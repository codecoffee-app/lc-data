{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1487",
            "title": "Making File Names Unique",
            "titleSlug": "making-file-names-unique",
            "content": "<p>Given an array of strings <code>names</code> of size <code>n</code>. You will create <code>n</code> folders in your file system <strong>such that</strong>, at the <code>i<sup>th</sup></code> minute, you will create a folder with the name <code>names[i]</code>.</p>\n\n<p>Since two files <strong>cannot</strong> have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of <code>(k)</code>, where, <code>k</code> is the <strong>smallest positive integer</strong> such that the obtained name remains unique.</p>\n\n<p>Return <em>an array of strings of length </em><code>n</code> where <code>ans[i]</code> is the actual name the system will assign to the <code>i<sup>th</sup></code> folder when you create it.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> names = [&quot;pes&quot;,&quot;fifa&quot;,&quot;gta&quot;,&quot;pes(2019)&quot;]\n<strong>Output:</strong> [&quot;pes&quot;,&quot;fifa&quot;,&quot;gta&quot;,&quot;pes(2019)&quot;]\n<strong>Explanation:</strong> Let&#39;s see how the file system creates folder names:\n&quot;pes&quot; --&gt; not assigned before, remains &quot;pes&quot;\n&quot;fifa&quot; --&gt; not assigned before, remains &quot;fifa&quot;\n&quot;gta&quot; --&gt; not assigned before, remains &quot;gta&quot;\n&quot;pes(2019)&quot; --&gt; not assigned before, remains &quot;pes(2019)&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> names = [&quot;gta&quot;,&quot;gta(1)&quot;,&quot;gta&quot;,&quot;avalon&quot;]\n<strong>Output:</strong> [&quot;gta&quot;,&quot;gta(1)&quot;,&quot;gta(2)&quot;,&quot;avalon&quot;]\n<strong>Explanation:</strong> Let&#39;s see how the file system creates folder names:\n&quot;gta&quot; --&gt; not assigned before, remains &quot;gta&quot;\n&quot;gta(1)&quot; --&gt; not assigned before, remains &quot;gta(1)&quot;\n&quot;gta&quot; --&gt; the name is reserved, system adds (k), since &quot;gta(1)&quot; is also reserved, systems put k = 2. it becomes &quot;gta(2)&quot;\n&quot;avalon&quot; --&gt; not assigned before, remains &quot;avalon&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> names = [&quot;onepiece&quot;,&quot;onepiece(1)&quot;,&quot;onepiece(2)&quot;,&quot;onepiece(3)&quot;,&quot;onepiece&quot;]\n<strong>Output:</strong> [&quot;onepiece&quot;,&quot;onepiece(1)&quot;,&quot;onepiece(2)&quot;,&quot;onepiece(3)&quot;,&quot;onepiece(4)&quot;]\n<strong>Explanation:</strong> When the last folder is created, the smallest positive valid k is 4, and it becomes &quot;onepiece(4)&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= names.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= names[i].length &lt;= 20</code></li>\n\t<li><code>names[i]</code> consists of lowercase English letters, digits, and/or round brackets.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 422,
            "dislikes": 697,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"32.2K\", \"totalSubmission\": \"87.7K\", \"totalAcceptedRaw\": 32219, \"totalSubmissionRaw\": 87677, \"acRate\": \"36.7%\"}",
            "hints": [
                "Keep a map of each name and the smallest valid integer that can be appended as a suffix to it.",
                "If the name is not present in the map, you can use it without adding any suffixes.",
                "If the name is present in the map, append the smallest proper suffix, and add the new name to the map."
            ],
            "rephrased": {
                "body": "Given an array of strings `names` representing desired folder names, create `n` folders in a file system. If a folder name is already taken, append `(k)` to it, where `k` is the smallest positive integer that makes the name unique. Return an array of the actual folder names created.",
                "constraints": [
                    "1 <= names.length <= 5 * 10^4",
                    "1 <= names[i].length <= 20",
                    "names[i] consists of lowercase English letters, digits, and/or round brackets."
                ],
                "testcases": [
                    {
                        "input": "[\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
                        "output": "[\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]",
                        "explanation": "Each name is unique initially, so no modifications are needed."
                    },
                    {
                        "input": "[\"gta\",\"gta(1)\",\"gta\",\"avalon\"]",
                        "output": "[\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]",
                        "explanation": "The first 'gta' and 'gta(1)' are unique. The second 'gta' conflicts with the first, so '(1)' is appended, but 'gta(1)' is already taken.  The next available suffix is '(2)', resulting in 'gta(2)'. 'avalon' is unique."
                    },
                    {
                        "input": "[\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]",
                        "output": "[\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]",
                        "explanation": "The first four names are unique. The last 'onepiece' conflicts with the existing 'onepiece'.  Suffixes (1), (2), and (3) are already used, so the next available suffix, (4), is used, resulting in 'onepiece(4)'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Keep a map of each name and the smallest valid integer that can be appended as a suffix to it.",
            "If the name is not present in the map, you can use it without adding any suffixes.",
            "If the name is present in the map, append the smallest proper suffix, and add the new name to the map."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> getFolderNames(vector<string>& names) {\n    vector<string> ans;\n    unordered_map<string, int> nameToSuffix;\n\n    for (const string& name : names)\n      if (const auto it = nameToSuffix.find(name); it != nameToSuffix.cend()) {\n        int suffix = it->second;\n        string newName = getName(name, ++suffix);\n        while (nameToSuffix.count(newName))\n          newName = getName(name, ++suffix);\n        nameToSuffix[name] = suffix;\n        nameToSuffix[newName] = 0;\n        ans.push_back(newName);\n      } else {\n        nameToSuffix[name] = 0;\n        ans.push_back(name);\n      }\n\n    return ans;\n  }\n\n private:\n  string getName(const string& name, int suffix) {\n    return name + \"(\" + to_string(suffix) + \")\";\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String[] getFolderNames(String[] names) {\n    String[] ans = new String[names.length];\n    Map<String, Integer> nameToSuffix = new HashMap<>();\n\n    for (int i = 0; i < names.length; ++i) {\n      final String name = names[i];\n      if (nameToSuffix.containsKey(name)) {\n        int suffix = nameToSuffix.get(name);\n        String newName = getName(name, ++suffix);\n        while (nameToSuffix.containsKey(newName))\n          newName = getName(name, ++suffix);\n        nameToSuffix.put(name, suffix);\n        nameToSuffix.put(newName, 0);\n        ans[i] = newName;\n      } else {\n        nameToSuffix.put(name, 0);\n        ans[i] = name;\n      }\n    }\n\n    return ans;\n  }\n\n  private String getName(final String name, int suffix) {\n    return name + \"(\" + String.valueOf(suffix) + \")\";\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getFolderNames(self, names: List[str]) -> List[str]:\n    ans = []\n    nameToSuffix = {}\n\n    for name in names:\n      if name in nameToSuffix:\n        suffix = nameToSuffix[name] + 1\n        newName = self._getName(name, suffix)\n        while newName in nameToSuffix:\n          suffix += 1\n          newName = self._getName(name, suffix)\n        nameToSuffix[name] = suffix\n        nameToSuffix[newName] = 0\n        ans.append(newName)\n      else:\n        nameToSuffix[name] = 0\n        ans.append(name)\n\n    return ans\n\n  def _getName(self, name: str, suffix: int) -> str:\n    return name + '(' + str(suffix) + ')'\n",
                "lang_text": "py"
            }
        }
    }
}