{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1765",
            "title": "Map of Highest Peak",
            "titleSlug": "map-of-highest-peak",
            "content": "<p>You are given an integer matrix <code>isWater</code> of size <code>m x n</code> that represents a map of <strong>land</strong> and <strong>water</strong> cells.</p>\n\n<ul>\n\t<li>If <code>isWater[i][j] == 0</code>, cell <code>(i, j)</code> is a <strong>land</strong> cell.</li>\n\t<li>If <code>isWater[i][j] == 1</code>, cell <code>(i, j)</code> is a <strong>water</strong> cell.</li>\n</ul>\n\n<p>You must assign each cell a height in a way that follows these rules:</p>\n\n<ul>\n\t<li>The height of each cell must be non-negative.</li>\n\t<li>If the cell is a <strong>water</strong> cell, its height must be <code>0</code>.</li>\n\t<li>Any two adjacent cells must have an absolute height difference of <strong>at most</strong> <code>1</code>. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).</li>\n</ul>\n\n<p>Find an assignment of heights such that the maximum height in the matrix is <strong>maximized</strong>.</p>\n\n<p>Return <em>an integer matrix </em><code>height</code><em> of size </em><code>m x n</code><em> where </em><code>height[i][j]</code><em> is cell </em><code>(i, j)</code><em>&#39;s height. If there are multiple solutions, return <strong>any</strong> of them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82045-am.png\" style=\"width: 220px; height: 219px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> isWater = [[0,1],[0,0]]\n<strong>Output:</strong> [[1,0],[2,1]]\n<strong>Explanation:</strong> The image shows the assigned heights of each cell.\nThe blue cell is the water cell, and the green cells are the land cells.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82050-am.png\" style=\"width: 300px; height: 296px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> isWater = [[0,0,1],[1,0,0],[0,0,0]]\n<strong>Output:</strong> [[1,1,0],[0,1,1],[1,2,2]]\n<strong>Explanation:</strong> A height of 2 is the maximum possible height of any assignment.\nAny height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == isWater.length</code></li>\n\t<li><code>n == isWater[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>isWater[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li>There is at least <strong>one</strong> water cell.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 769,
            "dislikes": 46,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.9K\", \"totalSubmission\": \"39K\", \"totalAcceptedRaw\": 23892, \"totalSubmissionRaw\": 39021, \"acRate\": \"61.2%\"}",
            "hints": [
                "Set each water cell to be 0. The height of each cell is limited by its closest water cell.",
                "Perform a multi-source BFS with all the water cells as sources."
            ],
            "rephrased": {
                "body": "You are given an integer matrix `isWater` of size `m x n` representing a map of land and water cells.  If `isWater[i][j] == 0`, cell `(i, j)` is a land cell. If `isWater[i][j] == 1`, cell `(i, j)` is a water cell.\n\nYou must assign each cell a height such that:\n\n*   The height of each cell must be non-negative.\n*   If the cell is a water cell, its height must be `0`.\n*   Any two adjacent cells (north, east, south, or west) must have an absolute height difference of at most `1`.\n\nFind an assignment of heights such that the maximum height in the matrix is maximized.\n\nReturn an integer matrix `height` of size `m x n` where `height[i][j]` is cell `(i, j)`'s height.  If multiple solutions exist, return any one of them.",
                "constraints": [
                    "m == isWater.length",
                    "n == isWater[i].length",
                    "1 <= m, n <= 1000",
                    "isWater[i][j] is 0 or 1",
                    "There is at least one water cell."
                ],
                "testcases": [
                    {
                        "input": "isWater = [[0,1],[0,0]]",
                        "output": "[[1,0],[2,1]]",
                        "explanation": "The water cell has a height of 0. The land cells are assigned heights such that adjacent cells have a height difference of at most 1, and the maximum height is maximized."
                    },
                    {
                        "input": "isWater = [[0,0,1],[1,0,0],[0,0,0]]",
                        "output": "[[1,1,0],[0,1,1],[1,2,2]]",
                        "explanation": "A height of 2 is the maximum possible height of any assignment. The water cells have height 0, and adjacent cells have a height difference of at most 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Set each water cell to be 0. The height of each cell is limited by its closest water cell.",
            "Perform a multi-source BFS with all the water cells as sources."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {\n    const int m = isWater.size();\n    const int n = isWater[0].size();\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    vector<vector<int>> ans(m, vector<int>(n, -1));\n    queue<pair<int, int>> q;\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (isWater[i][j] == 1) {\n          q.emplace(i, j);\n          ans[i][j] = 0;\n        }\n\n    while (!q.empty()) {\n      const auto [i, j] = q.front();\n      q.pop();\n      for (int k = 0; k < 4; ++k) {\n        const int x = i + dirs[k];\n        const int y = j + dirs[k + 1];\n        if (x < 0 || x == m || y < 0 || y == n)\n          continue;\n        if (ans[x][y] != -1)\n          continue;\n        ans[x][y] = ans[i][j] + 1;\n        q.emplace(x, y);\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] highestPeak(int[][] isWater) {\n    final int m = isWater.length;\n    final int n = isWater[0].length;\n    final int[] dirs = {0, 1, 0, -1, 0};\n    int[][] ans = new int[m][n];\n    Arrays.stream(ans).forEach(A -> Arrays.fill(A, -1));\n    Queue<Pair<Integer, Integer>> q = new ArrayDeque<>();\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (isWater[i][j] == 1) {\n          q.offer(new Pair<>(i, j));\n          ans[i][j] = 0;\n        }\n\n    while (!q.isEmpty()) {\n      final int i = q.peek().getKey();\n      final int j = q.poll().getValue();\n      for (int k = 0; k < 4; ++k) {\n        final int x = i + dirs[k];\n        final int y = j + dirs[k + 1];\n        if (x < 0 || x == m || y < 0 || y == n)\n          continue;\n        if (ans[x][y] != -1)\n          continue;\n        ans[x][y] = ans[i][j] + 1;\n        q.offer(new Pair<>(x, y));\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:\n    m = len(isWater)\n    n = len(isWater[0])\n    dirs = [0, 1, 0, -1, 0]\n    ans = [[-1] * n for _ in range(m)]\n    q = collections.deque()\n\n    for i in range(m):\n      for j in range(n):\n        if isWater[i][j] == 1:\n          q.append((i, j))\n          ans[i][j] = 0\n\n    while q:\n      i, j = q.popleft()\n      for k in range(4):\n        x = i + dirs[k]\n        y = j + dirs[k + 1]\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if ans[x][y] != -1:\n          continue\n        ans[x][y] = ans[i][j] + 1\n        q.append((x, y))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}