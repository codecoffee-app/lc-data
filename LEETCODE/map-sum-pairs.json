{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "677",
            "title": "Map Sum Pairs",
            "titleSlug": "map-sum-pairs",
            "content": "<p>Design a map that allows you to do the following:</p>\n\n<ul>\n\t<li>Maps a string key to a given value.</li>\n\t<li>Returns the sum of the values that have a key with a prefix equal to a given string.</li>\n</ul>\n\n<p>Implement the <code>MapSum</code> class:</p>\n\n<ul>\n\t<li><code>MapSum()</code> Initializes the <code>MapSum</code> object.</li>\n\t<li><code>void insert(String key, int val)</code> Inserts the <code>key-val</code> pair into the map. If the <code>key</code> already existed, the original <code>key-value</code> pair will be overridden to the new one.</li>\n\t<li><code>int sum(string prefix)</code> Returns the sum of all the pairs&#39; value whose <code>key</code> starts with the <code>prefix</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MapSum&quot;, &quot;insert&quot;, &quot;sum&quot;, &quot;insert&quot;, &quot;sum&quot;]\n[[], [&quot;apple&quot;, 3], [&quot;ap&quot;], [&quot;app&quot;, 2], [&quot;ap&quot;]]\n<strong>Output</strong>\n[null, null, 3, null, 5]\n\n<strong>Explanation</strong>\nMapSum mapSum = new MapSum();\nmapSum.insert(&quot;apple&quot;, 3);  \nmapSum.sum(&quot;ap&quot;);           // return 3 (<u>ap</u>ple = 3)\nmapSum.insert(&quot;app&quot;, 2);    \nmapSum.sum(&quot;ap&quot;);           // return 5 (<u>ap</u>ple + <u>ap</u>p = 3 + 2 = 5)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= key.length, prefix.length &lt;= 50</code></li>\n\t<li><code>key</code> and <code>prefix</code> consist of only lowercase English letters.</li>\n\t<li><code>1 &lt;= val &lt;= 1000</code></li>\n\t<li>At most <code>50</code> calls will be made to <code>insert</code> and <code>sum</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1605,
            "dislikes": 147,
            "similarQuestions": "[{\"title\": \"Sort the Jumbled Numbers\", \"titleSlug\": \"sort-the-jumbled-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Prefix Scores of Strings\", \"titleSlug\": \"sum-of-prefix-scores-of-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"111K\", \"totalSubmission\": \"195.8K\", \"totalAcceptedRaw\": 110972, \"totalSubmissionRaw\": 195826, \"acRate\": \"56.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a data structure that maps string keys to integer values and efficiently calculates the sum of values associated with keys that share a given prefix.\n\nImplement the `MapSum` class with the following methods:\n\n*   `MapSum()`: Initializes the `MapSum` object.\n*   `void insert(String key, int val)`: Inserts the `key-val` pair into the map. If the `key` already exists, its value is updated to the new `val`.\n*   `int sum(string prefix)`: Returns the sum of all values in the map whose keys start with the given `prefix`.",
                "constraints": [
                    "1 <= key.length, prefix.length <= 50",
                    "key and prefix consist of only lowercase English letters.",
                    "1 <= val <= 1000",
                    "At most 50 calls will be made to insert and sum."
                ],
                "testcases": [
                    {
                        "input": "[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]",
                        "output": "[null, null, 3, null, 5]",
                        "explanation": "Initially, the map is empty. `insert(\"apple\", 3)` adds \"apple\" with a value of 3. `sum(\"ap\")` returns 3 because \"apple\" starts with \"ap\". `insert(\"app\", 2)` adds \"app\" with a value of 2. `sum(\"ap\")` now returns 5 because both \"apple\" and \"app\" start with \"ap\", and their values sum to 3 + 2 = 5."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "sort-the-jumbled-numbers",
                "title": "Sort the Jumbled Numbers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-prefix-scores-of-strings",
                "title": "Sum of Prefix Scores of Strings",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ]
    }
}