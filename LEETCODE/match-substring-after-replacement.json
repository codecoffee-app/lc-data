{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2301",
            "title": "Match Substring After Replacement",
            "titleSlug": "match-substring-after-replacement",
            "content": "<p>You are given two strings <code>s</code> and <code>sub</code>. You are also given a 2D character array <code>mappings</code> where <code>mappings[i] = [old<sub>i</sub>, new<sub>i</sub>]</code> indicates that you may perform the following operation <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li><strong>Replace</strong> a character <code>old<sub>i</sub></code> of <code>sub</code> with <code>new<sub>i</sub></code>.</li>\n</ul>\n\n<p>Each character in <code>sub</code> <strong>cannot</strong> be replaced more than once.</p>\n\n<p>Return <code>true</code><em> if it is possible to make </em><code>sub</code><em> a substring of </em><code>s</code><em> by replacing zero or more characters according to </em><code>mappings</code>. Otherwise, return <code>false</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous non-empty sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;fool3e7bar&quot;, sub = &quot;leet&quot;, mappings = [[&quot;e&quot;,&quot;3&quot;],[&quot;t&quot;,&quot;7&quot;],[&quot;t&quot;,&quot;8&quot;]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Replace the first &#39;e&#39; in sub with &#39;3&#39; and &#39;t&#39; in sub with &#39;7&#39;.\nNow sub = &quot;l3e7&quot; is a substring of s, so we return true.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;fooleetbar&quot;, sub = &quot;f00l&quot;, mappings = [[&quot;o&quot;,&quot;0&quot;]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The string &quot;f00l&quot; is not a substring of s and no replacements can be made.\nNote that we cannot replace &#39;0&#39; with &#39;o&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Fool33tbaR&quot;, sub = &quot;leetd&quot;, mappings = [[&quot;e&quot;,&quot;3&quot;],[&quot;t&quot;,&quot;7&quot;],[&quot;t&quot;,&quot;8&quot;],[&quot;d&quot;,&quot;b&quot;],[&quot;p&quot;,&quot;b&quot;]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Replace the first and second &#39;e&#39; in sub with &#39;3&#39; and &#39;d&#39; in sub with &#39;b&#39;.\nNow sub = &quot;l33tb&quot; is a substring of s, so we return true.\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sub.length &lt;= s.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= mappings.length &lt;= 1000</code></li>\n\t<li><code>mappings[i].length == 2</code></li>\n\t<li><code>old<sub>i</sub> != new<sub>i</sub></code></li>\n\t<li><code>s</code> and <code>sub</code> consist of uppercase and lowercase English letters and digits.</li>\n\t<li><code>old<sub>i</sub></code> and <code>new<sub>i</sub></code> are either uppercase or lowercase English letters or digits.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 365,
            "dislikes": 74,
            "similarQuestions": "[{\"title\": \"Design Add and Search Words Data Structure\", \"titleSlug\": \"design-add-and-search-words-data-structure\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.9K\", \"totalSubmission\": \"32.3K\", \"totalAcceptedRaw\": 12857, \"totalSubmissionRaw\": 32283, \"acRate\": \"39.8%\"}",
            "hints": [
                "Enumerate all substrings of s with the same length as sub, and compare each substring to sub for equality.",
                "How can you quickly tell if a character of s can result from replacing the corresponding character in sub?"
            ],
            "rephrased": {
                "body": "Given two strings `s` and `sub`, and a 2D character array `mappings`, determine if `sub` can become a substring of `s` after applying zero or more replacements based on the `mappings`. Each `mappings[i] = [old_i, new_i]` allows replacing `old_i` in `sub` with `new_i`. Each character in `sub` can be replaced at most once.",
                "constraints": [
                    "1 <= sub.length <= s.length <= 5000",
                    "0 <= mappings.length <= 1000",
                    "mappings[i].length == 2",
                    "old_i != new_i",
                    "s and sub consist of uppercase and lowercase English letters and digits.",
                    "old_i and new_i are either uppercase or lowercase English letters or digits."
                ],
                "testcases": [
                    {
                        "input": {
                            "s": "fool3e7bar",
                            "sub": "leet",
                            "mappings": [
                                [
                                    "e",
                                    "3"
                                ],
                                [
                                    "t",
                                    "7"
                                ],
                                [
                                    "t",
                                    "8"
                                ]
                            ]
                        },
                        "output": true,
                        "explanation": "By replacing the first 'e' in `sub` with '3' and 't' with '7', `sub` becomes \"l3e7\", which is a substring of `s`."
                    },
                    {
                        "input": {
                            "s": "fooleetbar",
                            "sub": "f00l",
                            "mappings": [
                                [
                                    "o",
                                    "0"
                                ]
                            ]
                        },
                        "output": false,
                        "explanation": "The string \"f00l\" is not a substring of `s`, and no valid replacements can make it one. Note that we cannot replace '0' with 'o'."
                    },
                    {
                        "input": {
                            "s": "Fool33tbaR",
                            "sub": "leetd",
                            "mappings": [
                                [
                                    "e",
                                    "3"
                                ],
                                [
                                    "t",
                                    "7"
                                ],
                                [
                                    "t",
                                    "8"
                                ],
                                [
                                    "d",
                                    "b"
                                ],
                                [
                                    "p",
                                    "b"
                                ]
                            ]
                        },
                        "output": true,
                        "explanation": "Replacing the two 'e's in `sub` with '3' and the 'd' with 'b' results in \"l33tb\", which is a substring of `s`."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-add-and-search-words-data-structure",
                "title": "Design Add and Search Words Data Structure",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Enumerate all substrings of s with the same length as sub, and compare each substring to sub for equality.",
            "How can you quickly tell if a character of s can result from replacing the corresponding character in sub?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool matchReplacement(string s, string sub, vector<vector<char>>& mappings) {\n    vector<vector<bool>> isMapped(128, vector<bool>(128));\n\n    for (const vector<char>& m : mappings)\n      isMapped[m[0]][m[1]] = true;\n\n    for (int i = 0; i < s.length(); ++i)\n      if (canTransform(s, i, sub, isMapped))\n        return true\n\n            return false;\n  }\n\n private:\n  bool canTransform(const string& s, int start, const string& sub,\n                    const vector<vector<bool>>& isMapped) {\n    if (start + sub.length() > s.length())\n      return false;\n\n    for (int i = 0; i < sub.length(); ++i) {\n      const char a = sub[i];        // sub's char\n      const char b = s[start + i];  // s' char\n      if (a != b && !isMapped[a][b])\n        return false;\n    }\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean matchReplacement(String s, String sub, char[][] mappings) {\n    boolean[][] isMapped = new boolean[128][128];\n\n    for (char[] m : mappings)\n      isMapped[m[0]][m[1]] = true;\n\n    for (int i = 0; i < s.length(); ++i)\n      if (canTransform(s, i, sub, isMapped))\n        return true;\n\n    return false;\n  }\n\n  private boolean canTransform(final String s, int start, final String sub, boolean[][] isMapped) {\n    if (start + sub.length() > s.length())\n      return false;\n\n    for (int i = 0; i < sub.length(); ++i) {\n      final char a = sub.charAt(i);       // sub's char\n      final char b = s.charAt(start + i); // s' char\n      if (a != b && !isMapped[a][b])\n        return false;\n    }\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def matchReplacement(self, s: str, sub: str, mappings: List[List[str]]) -> bool:\n    isMapped = [[False] * 128 for _ in range(128)]\n\n    for old, new in mappings:\n      isMapped[ord(old)][ord(new)] = True\n\n    for i in range(len(s)):\n      if self._canTransform(s, i, sub, isMapped):\n        return True\n\n    return False\n\n  def _canTransform(self, s: str, start: int, sub: str, isMapped: List[List[bool]]) -> bool:\n    if start + len(sub) > len(s):\n      return False\n\n    for i in range(len(sub)):\n      a = sub[i]        # sub's char\n      b = s[start + i]  # s' char\n      if a != b and not isMapped[ord(a)][ord(b)]:\n        return False\n\n    return True\n",
                "lang_text": "py"
            }
        }
    }
}