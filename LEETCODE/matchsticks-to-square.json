{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "473",
            "title": "Matchsticks to Square",
            "titleSlug": "matchsticks-to-square",
            "content": "<p>You are given an integer array <code>matchsticks</code> where <code>matchsticks[i]</code> is the length of the <code>i<sup>th</sup></code> matchstick. You want to use <strong>all the matchsticks</strong> to make one square. You <strong>should not break</strong> any stick, but you can link them up, and each matchstick must be used <strong>exactly one time</strong>.</p>\n\n<p>Return <code>true</code> if you can make this square and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/matchsticks1-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> matchsticks = [1,1,2,2,2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can form a square with length 2, one side of the square came two sticks with length 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matchsticks = [3,3,3,3,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You cannot find a way to form a square with all the matchsticks.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= matchsticks.length &lt;= 15</code></li>\n\t<li><code>1 &lt;= matchsticks[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3720,
            "dislikes": 284,
            "similarQuestions": "[{\"title\": \"Maximum Rows Covered by Columns\", \"titleSlug\": \"maximum-rows-covered-by-columns\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"155.7K\", \"totalSubmission\": \"387.4K\", \"totalAcceptedRaw\": 155655, \"totalSubmissionRaw\": 387357, \"acRate\": \"40.2%\"}",
            "hints": [
                "Treat the matchsticks as an array. Can we split the array into 4 equal parts?",
                "Every matchstick can belong to either of the 4 sides. We don't know which one. Maybe try out all options!",
                "For every matchstick, we have to try out each of the 4 options i.e. which side it can belong to. We can make use of recursion for this.",
                "We don't really need to keep track of which matchsticks belong to a particular side during recursion. We just need to keep track of the <b>length</b> of each of the 4 sides.",
                "When all matchsticks have been used we simply need to see the length of all 4 sides. If they're equal, we have a square on our hands!"
            ],
            "rephrased": {
                "body": "Given an integer array `matchsticks`, where `matchsticks[i]` represents the length of the i-th matchstick, determine if it's possible to use all matchsticks to form a square. You must use each matchstick exactly once without breaking them. You can link the matchsticks to form the sides of the square.",
                "constraints": [
                    "1 <= matchsticks.length <= 15",
                    "1 <= matchsticks[i] <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "[1,1,2,2,2]",
                        "output": "true",
                        "explanation": "A square with side length 2 can be formed. One side can be composed of two matchsticks of length 1."
                    },
                    {
                        "input": "[3,3,3,3,4]",
                        "output": "false",
                        "explanation": "It's not possible to form a square using all the given matchsticks."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-rows-covered-by-columns",
                "title": "Maximum Rows Covered by Columns",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Treat the matchsticks as an array. Can we split the array into 4 equal parts?",
            "Every matchstick can belong to either of the 4 sides. We don't know which one. Maybe try out all options!",
            "For every matchstick, we have to try out each of the 4 options i.e. which side it can belong to. We can make use of recursion for this.",
            "We don't really need to keep track of which matchsticks belong to a particular side during recursion. We just need to keep track of the <b>length</b> of each of the 4 sides.",
            "When all matchsticks have been used we simply need to see the length of all 4 sides. If they're equal, we have a square on our hands!"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool makesquare(vector<int>& matchsticks) {\n    if (matchsticks.size() < 4)\n      return false;\n\n    const int perimeter = accumulate(matchsticks.begin(), matchsticks.end(), 0);\n    if (perimeter % 4 != 0)\n      return false;\n\n    sort(matchsticks.begin(), matchsticks.end(), greater<int>());\n    return dfs(matchsticks, 0, vector<int>(4, perimeter / 4));\n  }\n\n private:\n  bool dfs(const vector<int>& matchsticks, int selected, vector<int>&& edges) {\n    if (selected == matchsticks.size())\n      return all_of(edges.begin(), edges.end(),\n                    [](int edge) { return edge == 0; });\n\n    for (int i = 0; i < 4; ++i) {\n      if (matchsticks[selected] > edges[i])\n        continue;\n      edges[i] -= matchsticks[selected];\n      if (dfs(matchsticks, selected + 1, move(edges)))\n        return true;\n      edges[i] += matchsticks[selected];\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean makesquare(int[] matchsticks) {\n    if (matchsticks.length < 4)\n      return false;\n\n    final int perimeter = Arrays.stream(matchsticks).sum();\n    if (perimeter % 4 != 0)\n      return false;\n\n    int[] edges = new int[4];\n    Arrays.fill(edges, perimeter / 4);\n    Arrays.sort(edges); // can't do \"Arrays.sort(edges, (a, b) -> b - a);\" in Java\n    return dfs(matchsticks, matchsticks.length - 1, edges);\n  }\n\n  private boolean dfs(int[] matchsticks, int selected, int[] edges) {\n    if (selected == -1)\n      return Arrays.stream(edges).allMatch(edge -> edge == 0);\n\n    for (int i = 0; i < 4; ++i) {\n      if (matchsticks[selected] > edges[i])\n        continue;\n      edges[i] -= matchsticks[selected];\n      if (dfs(matchsticks, selected - 1, edges))\n        return true;\n      edges[i] += matchsticks[selected];\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def makesquare(self, matchsticks: List[int]) -> bool:\n    if len(matchsticks) < 4:\n      return False\n\n    perimeter = sum(matchsticks)\n    if perimeter % 4 != 0:\n      return False\n\n    A = sorted(matchsticks)[::-1]\n\n    def dfs(selected: int, edges: List[int]) -> bool:\n      if selected == len(A):\n        return all(edge == edges[0] for edge in edges)\n\n      for i, edge in enumerate(edges):\n        if A[selected] > edge:\n          continue\n        edges[i] -= A[selected]\n        if dfs(selected + 1, edges):\n          return True\n        edges[i] += A[selected]\n\n      return False\n\n    return dfs(0, [perimeter // 4] * 4)\n",
                "lang_text": "py"
            }
        }
    }
}