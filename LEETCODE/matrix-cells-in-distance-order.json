{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1030",
            "title": "Matrix Cells in Distance Order",
            "titleSlug": "matrix-cells-in-distance-order",
            "content": "<p>You are given four integers <code>row</code>, <code>cols</code>, <code>rCenter</code>, and <code>cCenter</code>. There is a <code>rows x cols</code> matrix and you are on the cell with the coordinates <code>(rCenter, cCenter)</code>.</p>\n\n<p>Return <em>the coordinates of all cells in the matrix, sorted by their <strong>distance</strong> from </em><code>(rCenter, cCenter)</code><em> from the smallest distance to the largest distance</em>. You may return the answer in <strong>any order</strong> that satisfies this condition.</p>\n\n<p>The <strong>distance</strong> between two cells <code>(r<sub>1</sub>, c<sub>1</sub>)</code> and <code>(r<sub>2</sub>, c<sub>2</sub>)</code> is <code>|r<sub>1</sub> - r<sub>2</sub>| + |c<sub>1</sub> - c<sub>2</sub>|</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> rows = 1, cols = 2, rCenter = 0, cCenter = 0\n<strong>Output:</strong> [[0,0],[0,1]]\n<strong>Explanation:</strong> The distances from (0, 0) to other cells are: [0,1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rows = 2, cols = 2, rCenter = 0, cCenter = 1\n<strong>Output:</strong> [[0,1],[0,0],[1,1],[1,0]]\n<strong>Explanation:</strong> The distances from (0, 1) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> rows = 2, cols = 3, rCenter = 1, cCenter = 2\n<strong>Output:</strong> [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\n<strong>Explanation:</strong> The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rows, cols &lt;= 100</code></li>\n\t<li><code>0 &lt;= rCenter &lt; rows</code></li>\n\t<li><code>0 &lt;= cCenter &lt; cols</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 717,
            "dislikes": 310,
            "similarQuestions": "[{\"title\": \"Cells in a Range on an Excel Sheet\", \"titleSlug\": \"cells-in-a-range-on-an-excel-sheet\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Geometry",
                    "slug": "geometry"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"55.2K\", \"totalSubmission\": \"78.4K\", \"totalAcceptedRaw\": 55235, \"totalSubmissionRaw\": 78402, \"acRate\": \"70.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the dimensions of a matrix (rows x cols) and a center cell (rCenter, cCenter), return the coordinates of all cells in the matrix sorted by their Manhattan distance from the center cell. The Manhattan distance between two cells (r1, c1) and (r2, c2) is calculated as |r1 - r2| + |c1 - c2|.",
                "constraints": [
                    "1 <= rows, cols <= 100",
                    "0 <= rCenter < rows",
                    "0 <= cCenter < cols"
                ],
                "testcases": [
                    {
                        "input": "rows = 1, cols = 2, rCenter = 0, cCenter = 0",
                        "output": "[[0,0],[0,1]]",
                        "explanation": "The Manhattan distances from (0, 0) to other cells are: [0, 1]. Therefore the sorted order is [[0,0],[0,1]]."
                    },
                    {
                        "input": "rows = 2, cols = 2, rCenter = 0, cCenter = 1",
                        "output": "[[0,1],[0,0],[1,1],[1,0]]",
                        "explanation": "The Manhattan distances from (0, 1) to other cells are: [0, 1, 1, 2]. One possible sorted order based on distances is [[0,1],[0,0],[1,1],[1,0]]."
                    },
                    {
                        "input": "rows = 2, cols = 3, rCenter = 1, cCenter = 2",
                        "output": "[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]",
                        "explanation": "The Manhattan distances from (1, 2) to other cells are: [0, 1, 1, 2, 2, 3]. One possible sorted order based on distances is [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "cells-in-a-range-on-an-excel-sheet",
                "title": "Cells in a Range on an Excel Sheet",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Geometry",
                "slug": "geometry"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> allCellsDistOrder(int rows, int cols, int rCenter,\n                                        int cCenter) {\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    vector<vector<int>> ans;\n    vector<vector<int>> seen(rows, vector<int>(cols));\n    queue<pair<int, int>> q{{{rCenter, cCenter}}};\n    seen[rCenter][cCenter] = true;\n\n    while (!q.empty()) {\n      const auto [i, j] = q.front();\n      q.pop();\n      ans.push_back({i, j});\n      for (int k = 0; k < 4; ++k) {\n        const int x = i + dirs[k];\n        const int y = j + dirs[k + 1];\n        if (x < 0 || x == rows || y < 0 || y == cols)\n          continue;\n        if (seen[x][y])\n          continue;\n        seen[x][y] = true;\n        q.emplace(x, y);\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] allCellsDistOrder(int rows, int cols, int rCenter, int cCenter) {\n    final int[] dirs = {0, 1, 0, -1, 0};\n    List<int[]> ans = new ArrayList<>();\n    boolean[][] seen = new boolean[rows][cols];\n    Queue<Pair<Integer, Integer>> q = new LinkedList<>(Arrays.asList(new Pair<>(rCenter, cCenter)));\n    seen[rCenter][cCenter] = true;\n\n    while (!q.isEmpty()) {\n      final int i = q.peek().getKey();\n      final int j = q.poll().getValue();\n      ans.add(new int[] {i, j});\n      for (int k = 0; k < 4; ++k) {\n        final int x = i + dirs[k];\n        final int y = j + dirs[k + 1];\n        if (x < 0 || x == rows || y < 0 || y == cols)\n          continue;\n        if (seen[x][y])\n          continue;\n        seen[x][y] = true;\n        q.offer(new Pair<>(x, y));\n      }\n    }\n\n    return ans.toArray(int[][] ::new);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def allCellsDistOrder(self, rows: int, cols: int, rCenter: int, cCenter: int) -> List[List[int]]:\n    dirs = [0, 1, 0, -1, 0]\n    ans = []\n    q = collections.deque([(rCenter, cCenter)])\n    seen = {(rCenter, cCenter)}\n\n    while q:\n      i, j = q.popleft()\n      ans.append([i, j])\n      for k in range(4):\n        x = i + dirs[k]\n        y = j + dirs[k + 1]\n        if x < 0 or x == rows or y < 0 or y == cols:\n          continue\n        if (x, y) in seen:\n          continue\n        seen.add((x, y))\n        q.append((x, y))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}