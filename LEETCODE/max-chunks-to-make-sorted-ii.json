{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "768",
            "title": "Max Chunks To Make Sorted II",
            "titleSlug": "max-chunks-to-make-sorted-ii",
            "content": "<p>You are given an integer array <code>arr</code>.</p>\n\n<p>We split <code>arr</code> into some number of <strong>chunks</strong> (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.</p>\n\n<p>Return <em>the largest number of chunks we can make to sort the array</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [5,4,3,2,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn&#39;t sorted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,1,3,4,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1786,
            "dislikes": 51,
            "similarQuestions": "[{\"title\": \"Max Chunks To Make Sorted\", \"titleSlug\": \"max-chunks-to-make-sorted\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"59.2K\", \"totalSubmission\": \"111.7K\", \"totalAcceptedRaw\": 59161, \"totalSubmissionRaw\": 111740, \"acRate\": \"52.9%\"}",
            "hints": [
                "Each k for which some permutation of arr[:k] is equal to sorted(arr)[:k] is where we should cut each chunk."
            ],
            "rephrased": {
                "body": "Given an integer array `arr`, partition it into chunks, sort each chunk individually, and then concatenate the sorted chunks. The goal is to determine the maximum number of chunks such that the resulting concatenated array is sorted in ascending order.",
                "constraints": [
                    "1 <= arr.length <= 2000",
                    "0 <= arr[i] <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "[5,4,3,2,1]",
                        "output": "1",
                        "explanation": "Splitting the array into two or more chunks will not produce the required sorted result after concatenation.  For instance, partitioning into [5, 4] and [3, 2, 1] yields [4, 5, 1, 2, 3], which is unsorted."
                    },
                    {
                        "input": "[2,1,3,4,4]",
                        "output": "4",
                        "explanation": "While partitioning into [2, 1] and [3, 4, 4] is possible, the maximum number of chunks is achieved by splitting into [2, 1], [3], [4], and [4]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "max-chunks-to-make-sorted",
                "title": "Max Chunks To Make Sorted",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Each k for which some permutation of arr[:k] is equal to sorted(arr)[:k] is where we should cut each chunk."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxChunksToSorted(vector<int>& arr) {\n    const int n = arr.size();\n    int ans = 0;\n    vector<int> maxL(n);  // l[i] := max(arr[0..i])\n    vector<int> minR(n);  // r[i] := min(arr[i..n))\n\n    for (int i = 0; i < n; ++i)\n      maxL[i] = i == 0 ? arr[i] : max(arr[i], maxL[i - 1]);\n\n    for (int i = n - 1; i >= 0; --i)\n      minR[i] = i == n - 1 ? arr[i] : min(arr[i], minR[i + 1]);\n\n    for (int i = 0; i + 1 < n; ++i)\n      if (maxL[i] <= minR[i + 1])\n        ++ans;\n\n    return ans + 1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxChunksToSorted(int[] arr) {\n    final int n = arr.length;\n    int ans = 0;\n    int[] maxL = new int[n]; // l[i] := max(arr[0..i])\n    int[] minR = new int[n]; // r[i] := min(arr[i..n))\n\n    for (int i = 0; i < n; ++i)\n      maxL[i] = i == 0 ? arr[i] : Math.max(arr[i], maxL[i - 1]);\n\n    for (int i = n - 1; i >= 0; --i)\n      minR[i] = i == n - 1 ? arr[i] : Math.min(arr[i], minR[i + 1]);\n\n    for (int i = 0; i + 1 < n; ++i)\n      if (maxL[i] <= minR[i + 1])\n        ++ans;\n\n    return ans + 1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxChunksToSorted(self, arr: List[int]) -> int:\n    n = len(arr)\n    ans = 0\n    maxi = -math.inf\n    mini = [arr[-1]] * n\n\n    for i in reversed(range(n - 1)):\n      mini[i] = min(mini[i + 1], arr[i])\n\n    for i in range(n - 1):\n      maxi = max(maxi, arr[i])\n      if maxi <= mini[i + 1]:\n        ans += 1\n\n    return ans + 1\n",
                "lang_text": "py"
            }
        }
    }
}