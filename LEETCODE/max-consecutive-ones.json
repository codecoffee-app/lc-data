{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "485",
            "title": "Max Consecutive Ones",
            "titleSlug": "max-consecutive-ones",
            "content": "<p>Given a binary array <code>nums</code>, return <em>the maximum number of consecutive </em><code>1</code><em>&#39;s in the array</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,0,1,1,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,1,1,0,1]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5405,
            "dislikes": 448,
            "similarQuestions": "[{\"title\": \"Max Consecutive Ones II\", \"titleSlug\": \"max-consecutive-ones-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Max Consecutive Ones III\", \"titleSlug\": \"max-consecutive-ones-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Consecutive Characters\", \"titleSlug\": \"consecutive-characters\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Longer Contiguous Segments of Ones than Zeros\", \"titleSlug\": \"longer-contiguous-segments-of-ones-than-zeros\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Length of the Longest Alphabetical Continuous Substring\", \"titleSlug\": \"length-of-the-longest-alphabetical-continuous-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Enemy Forts That Can Be Captured\", \"titleSlug\": \"maximum-enemy-forts-that-can-be-captured\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                }
            ],
            "stats": "{\"totalAccepted\": \"1M\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 1033913, \"totalSubmissionRaw\": 1777617, \"acRate\": \"58.2%\"}",
            "hints": [
                "You need to think about two things as far as any window is concerned. One is the starting point for the window. How do you detect that a new window of 1s has started? The next part is detecting the ending point for this window.\r\n\r\nHow do you detect the ending point for an existing window? If you figure these two things out, you will be able to detect the windows of consecutive ones. All that remains afterward is to find the longest such window and return the size."
            ],
            "rephrased": {
                "body": "Given a binary array `nums`, find the length of the longest consecutive sequence of 1s.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "nums[i] is either 0 or 1."
                ],
                "testcases": [
                    {
                        "input": "[1,1,0,1,1,1]",
                        "output": "3",
                        "explanation": "The longest consecutive sequence of 1s is [1,1,1], which has a length of 3."
                    },
                    {
                        "input": "[1,0,1,1,0,1]",
                        "output": "2",
                        "explanation": "The longest consecutive sequence of 1s is [1,1], which has a length of 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "max-consecutive-ones-ii",
                "title": "Max Consecutive Ones II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "max-consecutive-ones-iii",
                "title": "Max Consecutive Ones III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "consecutive-characters",
                "title": "Consecutive Characters",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "longer-contiguous-segments-of-ones-than-zeros",
                "title": "Longer Contiguous Segments of Ones than Zeros",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "length-of-the-longest-alphabetical-continuous-substring",
                "title": "Length of the Longest Alphabetical Continuous Substring",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-enemy-forts-that-can-be-captured",
                "title": "Maximum Enemy Forts That Can Be Captured",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "You need to think about two things as far as any window is concerned. One is the starting point for the window. How do you detect that a new window of 1s has started? The next part is detecting the ending point for this window.\r\n\r\nHow do you detect the ending point for an existing window? If you figure these two things out, you will be able to detect the windows of consecutive ones. All that remains afterward is to find the longest such window and return the size."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findMaxConsecutiveOnes(vector<int>& nums) {\n    int ans = 0;\n    int sum = 0;\n\n    for (const int num : nums)\n      if (num == 1)\n        ans = max(ans, ++sum);\n      else\n        sum = 0;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findMaxConsecutiveOnes(int[] nums) {\n    int ans = 0;\n    int sum = 0;\n\n    for (final int num : nums)\n      if (num == 1)\n        ans = Math.max(ans, ++sum);\n      else\n        sum = 0;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n    ans = 0\n    summ = 0\n\n    for num in nums:\n      if num == 0:\n        summ = 0\n      else:\n        summ += num\n        ans = max(ans, summ)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}