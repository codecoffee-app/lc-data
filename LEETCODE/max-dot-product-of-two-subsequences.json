{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1458",
            "title": "Max Dot Product of Two Subsequences",
            "titleSlug": "max-dot-product-of-two-subsequences",
            "content": "<p>Given two arrays <code>nums1</code>&nbsp;and <code><font face=\"monospace\">nums2</font></code><font face=\"monospace\">.</font></p>\n\n<p>Return the maximum dot product&nbsp;between&nbsp;<strong>non-empty</strong> subsequences of nums1 and nums2 with the same length.</p>\n\n<p>A subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,&nbsp;<code>[2,3,5]</code>&nbsp;is a subsequence of&nbsp;<code>[1,2,3,4,5]</code>&nbsp;while <code>[1,5,3]</code>&nbsp;is not).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,1,-2,5], nums2 = [3,0,-6]\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [3,-2], nums2 = [2,-6,7]\n<strong>Output:</strong> 21\n<strong>Explanation:</strong> Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [-1,-1], nums2 = [1,1]\n<strong>Output:</strong> -1\n<strong>Explanation: </strong>Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 500</code></li>\n\t<li><code>-1000 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1617,
            "dislikes": 33,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"75.4K\", \"totalSubmission\": \"120.3K\", \"totalAcceptedRaw\": 75366, \"totalSubmissionRaw\": 120300, \"acRate\": \"62.6%\"}",
            "hints": [
                "Use dynamic programming, define DP[i][j] as the maximum dot product of two subsequences starting in the position i of nums1 and position j of nums2."
            ],
            "rephrased": {
                "body": "Given two integer arrays `nums1` and `nums2`, find the maximum dot product between **non-empty** subsequences of `nums1` and `nums2` with the same length.\n\nA subsequence of an array is a new array formed from the original array by deleting some (or none) of the elements without changing the order of the remaining elements. For example, `[2, 3, 5]` is a subsequence of `[1, 2, 3, 4, 5]`, but `[1, 5, 3]` is not.",
                "constraints": [
                    "1 <= nums1.length, nums2.length <= 500",
                    "-1000 <= nums1[i], nums2[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [2,1,-2,5], nums2 = [3,0,-6]",
                        "output": "18",
                        "explanation": "The subsequence [2, -2] from nums1 and [3, -6] from nums2 yields the maximum dot product: (2 * 3) + (-2 * -6) = 6 + 12 = 18."
                    },
                    {
                        "input": "nums1 = [3,-2], nums2 = [2,-6,7]",
                        "output": "21",
                        "explanation": "The subsequence [3] from nums1 and [7] from nums2 yields the maximum dot product: (3 * 7) = 21."
                    },
                    {
                        "input": "nums1 = [-1,-1], nums2 = [1,1]",
                        "output": "-1",
                        "explanation": "The subsequence [-1] from nums1 and [1] from nums2 yields the maximum dot product: (-1 * 1) = -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use dynamic programming, define DP[i][j] as the maximum dot product of two subsequences starting in the position i of nums1 and position j of nums2."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxDotProduct(vector<int>& nums1, vector<int>& nums2) {\n    const int m = nums1.size();\n    const int n = nums2.size();\n    // dp[i][j] := max dot product of two subseqs nums[0..i) and nums2[0..j)\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1, INT_MIN));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        dp[i + 1][j + 1] = max({dp[i][j + 1], dp[i + 1][j],\n                                max(0, dp[i][j]) + nums1[i] * nums2[j]});\n\n    return dp[m][n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxDotProduct(int[] nums1, int[] nums2) {\n    final int m = nums1.length;\n    final int n = nums2.length;\n    // dp[i][j] := max dot product of two subseqs nums[0..i) and nums2[0..j)\n    int[][] dp = new int[m + 1][n + 1];\n    Arrays.stream(dp).forEach(row -> Arrays.fill(row, Integer.MIN_VALUE));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        dp[i + 1][j + 1] = Math.max(Math.max(dp[i][j + 1], dp[i + 1][j]),\n                                    Math.max(0, dp[i][j]) + nums1[i] * nums2[j]);\n\n    return dp[m][n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxDotProduct(self, A: List[int], B: List[int]) -> int:\n    m = len(A)\n    n = len(B)\n    # dp[i][j] := max dot product of two subseqs nums[0..i) and nums2[0..j)\n    dp = [[-math.inf] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m):\n      for j in range(n):\n        dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j],\n                               max(0, dp[i][j]) + A[i] * B[j])\n\n    return dp[m][n]\n",
                "lang_text": "py"
            }
        }
    }
}