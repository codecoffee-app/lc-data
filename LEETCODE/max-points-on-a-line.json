{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "149",
            "title": "Max Points on a Line",
            "titleSlug": "max-points-on-a-line",
            "content": "<p>Given an array of <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the <strong>X-Y</strong> plane, return <em>the maximum number of points that lie on the same straight line</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 300</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>All the <code>points</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4013,
            "dislikes": 455,
            "similarQuestions": "[{\"title\": \"Line Reflection\", \"titleSlug\": \"line-reflection\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Lines to Cover Points\", \"titleSlug\": \"minimum-number-of-lines-to-cover-points\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Lines to Represent a Line Chart\", \"titleSlug\": \"minimum-lines-to-represent-a-line-chart\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Geometry",
                    "slug": "geometry"
                }
            ],
            "stats": "{\"totalAccepted\": \"368.8K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 368829, \"totalSubmissionRaw\": 1411461, \"acRate\": \"26.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of points, where each point is represented as `[x, y]` on the X-Y plane, determine the maximum number of points that lie on the same straight line.",
                "constraints": [
                    "1 <= points.length <= 300",
                    "points[i].length == 2",
                    "-10<sup>4</sup> <= x<sub>i</sub>, y<sub>i</sub> <= 10<sup>4</sup>",
                    "All the points are unique."
                ],
                "testcases": [
                    {
                        "input": "[[1,1],[2,2],[3,3]]",
                        "output": "3",
                        "explanation": "All three points lie on the same line (y = x)."
                    },
                    {
                        "input": "[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]",
                        "output": "4",
                        "explanation": "The points (1,1), (2,3), (3,2), and (4,1) do not all lie on the same line.  However there exists a line with 4 points."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "line-reflection",
                "title": "Line Reflection",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-lines-to-cover-points",
                "title": "Minimum Number of Lines to Cover Points",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-lines-to-represent-a-line-chart",
                "title": "Minimum Lines to Represent a Line Chart",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Geometry",
                "slug": "geometry"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxPoints(vector<vector<int>>& points) {\n    int ans = 0;\n\n    for (int i = 0; i < points.size(); ++i) {\n      unordered_map<pair<int, int>, int, pairHash> slopeCount;\n      const vector<int> p1{points[i]};\n      int samePoints = 1;\n      int maxPoints = 0;  // Maximum number of points with the same slope\n      for (int j = i + 1; j < points.size(); ++j) {\n        const vector<int> p2{points[j]};\n        if (p1 == p2)\n          ++samePoints;\n        else\n          maxPoints = max(maxPoints, ++slopeCount[getSlope(p1, p2)]);\n      }\n      ans = max(ans, samePoints + maxPoints);\n    }\n\n    return ans;\n  }\n\n private:\n  pair<int, int> getSlope(const vector<int>& p, const vector<int>& q) {\n    const int dx = p[0] - q[0];\n    const int dy = p[1] - q[1];\n    if (dx == 0)\n      return {0, p[0]};\n    if (dy == 0)\n      return {p[1], 0};\n    const int d = __gcd(dx, dy);\n    return {dx / d, dy / d};\n  }\n\n  struct pairHash {\n    size_t operator()(const pair<int, int>& p) const {\n      return p.first ^ p.second;\n    }\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxPoints(int[][] points) {\n    int ans = 0;\n\n    for (int i = 0; i < points.length; ++i) {\n      Map<Pair<Integer, Integer>, Integer> slopeCount = new HashMap<>();\n      int[] p1 = points[i];\n      int samePoints = 1;\n      int maxPoints = 0; // Maximum number of points with the same slope\n      for (int j = i + 1; j < points.length; ++j) {\n        int[] p2 = points[j];\n        if (p1[0] == p2[0] && p1[1] == p2[1])\n          ++samePoints;\n        else {\n          Pair<Integer, Integer> slope = getSlope(p1, p2);\n          slopeCount.merge(slope, 1, Integer::sum);\n          maxPoints = Math.max(maxPoints, slopeCount.get(slope));\n        }\n      }\n      ans = Math.max(ans, samePoints + maxPoints);\n    }\n\n    return ans;\n  }\n\n  private Pair<Integer, Integer> getSlope(int[] p, int[] q) {\n    final int dx = p[0] - q[0];\n    final int dy = p[1] - q[1];\n    if (dx == 0)\n      return new Pair<>(0, p[0]);\n    if (dy == 0)\n      return new Pair<>(p[1], 0);\n    final int d = gcd(dx, dy);\n    return new Pair<>(dx / d, dy / y);\n  }\n\n  private int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxPoints(self, points: List[List[int]]) -> int:\n    ans = 0\n\n    def gcd(a: int, b: int) -> int:\n      return a if b == 0 else gcd(b, a % b)\n\n    def getSlope(p: List[int], q: List[int]) -> Tuple[int, int]:\n      dx = p[0] - q[0]\n      dy = p[1] - q[1]\n      if dx == 0:\n        return (0, p[0])\n      if dy == 0:\n        return (p[1], 0)\n      d = gcd(dx, dy)\n      return (dx // d, dy // d)\n\n    for i, p in enumerate(points):\n      slopeCount = collections.defaultdict(int)\n      samePoints = 1\n      maxPoints = 0\n      for j in range(i + 1, len(points)):\n        q = points[j]\n        if p == q:\n          samePoints += 1\n        else:\n          slope = getSlope(p, q)\n          slopeCount[slope] += 1\n          maxPoints = max(maxPoints, slopeCount[slope])\n      ans = max(ans, samePoints + maxPoints)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}