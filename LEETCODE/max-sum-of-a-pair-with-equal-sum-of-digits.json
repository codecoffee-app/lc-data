{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2342",
            "title": "Max Sum of a Pair With Equal Sum of Digits",
            "titleSlug": "max-sum-of-a-pair-with-equal-sum-of-digits",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of <strong>positive</strong> integers. You can choose two indices <code>i</code> and <code>j</code>, such that <code>i != j</code>, and the sum of digits of the number <code>nums[i]</code> is equal to that of <code>nums[j]</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> value of </em><code>nums[i] + nums[j]</code><em> that you can obtain over all possible indices </em><code>i</code><em> and </em><code>j</code><em> that satisfy the conditions.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [18,43,36,13,7]\n<strong>Output:</strong> 54\n<strong>Explanation:</strong> The pairs (i, j) that satisfy the conditions are:\n- (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.\n- (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.\nSo the maximum sum that we can obtain is 54.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,12,19,14]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There are no two numbers that satisfy the conditions, so we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 651,
            "dislikes": 16,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"41.6K\", \"totalSubmission\": \"76.7K\", \"totalAcceptedRaw\": 41648, \"totalSubmissionRaw\": 76738, \"acRate\": \"54.3%\"}",
            "hints": [
                "What is the largest possible sum of digits a number can have?",
                "Group the array elements by the sum of their digits, and find the largest two elements of each group."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` of positive integers, find two distinct indices `i` and `j` such that the sum of digits of `nums[i]` is equal to the sum of digits of `nums[j]`. Return the maximum value of `nums[i] + nums[j]` that can be obtained. If no such pair exists, return -1.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[18,43,36,13,7]",
                        "output": "54",
                        "explanation": "The pairs (i, j) that satisfy the conditions are:\n- (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.\n- (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.\nSo the maximum sum that we can obtain is 54."
                    },
                    {
                        "input": "[10,12,19,14]",
                        "output": "-1",
                        "explanation": "There are no two numbers that satisfy the conditions, so we return -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "What is the largest possible sum of digits a number can have?",
            "Group the array elements by the sum of their digits, and find the largest two elements of each group."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumSum(vector<int>& nums) {\n    constexpr int kMax = 9 * 9;  // 999,999,999\n    int ans = -1;\n    vector<vector<int>> count(kMax + 1);\n\n    for (const int num : nums)\n      count[getSum(num)].push_back(num);\n\n    for (vector<int>& groupNums : count) {\n      if (groupNums.size() < 2)\n        continue;\n      std::ranges::sort(groupNums, greater<>());\n      ans = max(ans, groupNums[0] + groupNums[1]);\n    }\n\n    return ans;\n  }\n\n private:\n  int getSum(int num) {\n    int sum = 0;\n    while (num) {\n      sum += num % 10;\n      num /= 10;\n    }\n    return sum;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumSum(int[] nums) {\n    final int kMax = 9 * 9; // 999,999,999\n    int ans = -1;\n    List<Integer>[] count = new List[kMax + 1];\n\n    for (int i = 0; i <= kMax; ++i)\n      count[i] = new ArrayList<>();\n\n    for (final int num : nums)\n      count[getSum(num)].add(num);\n\n    for (List<Integer> groupNums : count) {\n      if (groupNums.size() < 2)\n        continue;\n      Collections.sort(groupNums, Collections.reverseOrder());\n      ans = Math.max(ans, groupNums.get(0) + groupNums.get(1));\n    }\n\n    return ans;\n  }\n\n  private int getSum(int num) {\n    int sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num /= 10;\n    }\n    return sum;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumSum(self, nums: List[int]) -> int:\n    kMax = 9 * 9  # 999,999,999\n    ans = -1\n    count = [[] for _ in range(kMax + 1)]\n\n    def getSum(num: int) -> int:\n      summ = 0\n      while num:\n        summ += num % 10\n        num //= 10\n      return summ\n\n    for num in nums:\n      count[getSum(num)].append(num)\n\n    for groupNums in count:\n      if len(groupNums) < 2:\n        continue\n      groupNums.sort(reverse=True)\n      ans = max(ans, groupNums[0] + groupNums[1])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}