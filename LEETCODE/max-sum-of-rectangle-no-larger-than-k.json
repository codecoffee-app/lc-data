{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "363",
            "title": "Max Sum of Rectangle No Larger Than K",
            "titleSlug": "max-sum-of-rectangle-no-larger-than-k",
            "content": "<p>Given an <code>m x n</code> matrix <code>matrix</code> and an integer <code>k</code>, return <em>the max sum of a rectangle in the matrix such that its sum is no larger than</em> <code>k</code>.</p>\n\n<p>It is <strong>guaranteed</strong> that there will be a rectangle with a sum no larger than <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/18/sum-grid.jpg\" style=\"width: 255px; height: 176px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,0,1],[0,-2,3]], k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[2,2,-1]], k = 3\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if the number of rows is much larger than the number of columns?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3399,
            "dislikes": 170,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"122.5K\", \"totalSubmission\": \"278.4K\", \"totalAcceptedRaw\": 122514, \"totalSubmissionRaw\": 278354, \"acRate\": \"44.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an `m x n` matrix `matrix` and an integer `k`, find the maximum sum of any rectangular submatrix within `matrix` such that the sum is no greater than `k`. It is guaranteed that such a rectangle exists.",
                "constraints": [
                    "m == matrix.length",
                    "n == matrix[i].length",
                    "1 <= m, n <= 100",
                    "-100 <= matrix[i][j] <= 100",
                    "-10^5 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "matrix = [[1,0,1],[0,-2,3]], k = 2",
                        "output": "2",
                        "explanation": "The submatrix [[0, 1], [-2, 3]] has a sum of 2, which is the maximum sum no larger than k = 2."
                    },
                    {
                        "input": "matrix = [[2,2,-1]], k = 3",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {\n    const int m = matrix.size();\n    const int n = matrix[0].size();\n    int ans = INT_MIN;\n\n    for (int baseCol = 0; baseCol < n; ++baseCol) {\n      // sums[i] := sum(matrix[i][baseCol..j])\n      vector<int> sums(m, 0);\n      for (int j = baseCol; j < n; ++j) {\n        for (int i = 0; i < m; ++i)\n          sums[i] += matrix[i][j];\n        // Find the max subarray no more than k\n        set<int> accumulate{0};\n        int prefix = 0;\n        for (const int sum : sums) {\n          prefix += sum;\n          if (const auto it = accumulate.lower_bound(prefix - k);\n              it != accumulate.cend())\n            ans = max(ans, prefix - *it);\n          accumulate.insert(prefix);\n        }\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxSumSubmatrix(int[][] matrix, int k) {\n    final int m = matrix.length;\n    final int n = matrix[0].length;\n    int ans = Integer.MIN_VALUE;\n\n    for (int baseCol = 0; baseCol < n; ++baseCol) {\n      // sums[i] := sum(matrix[i][baseCol..j])\n      int[] sums = new int[m];\n      for (int j = baseCol; j < n; ++j) {\n        for (int i = 0; i < m; ++i)\n          sums[i] += matrix[i][j];\n        // Find the max subarray no more than k\n        TreeSet<Integer> accumulate = new TreeSet<>(Arrays.asList(0));\n        int prefix = 0;\n        for (final int sum : sums) {\n          prefix += sum;\n          final Integer lo = accumulate.ceiling(prefix - k);\n          if (lo != null)\n            ans = Math.max(ans, prefix - lo);\n          accumulate.add(prefix);\n        }\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}