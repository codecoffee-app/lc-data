{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1499",
            "title": "Max Value of Equation",
            "titleSlug": "max-value-of-equation",
            "content": "<p>You are given an array <code>points</code> containing the coordinates of points on a 2D plane, sorted by the x-values, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> such that <code>x<sub>i</sub> &lt; x<sub>j</sub></code> for all <code>1 &lt;= i &lt; j &lt;= points.length</code>. You are also given an integer <code>k</code>.</p>\n\n<p>Return <em>the maximum value of the equation </em><code>y<sub>i</sub> + y<sub>j</sub> + |x<sub>i</sub> - x<sub>j</sub>|</code> where <code>|x<sub>i</sub> - x<sub>j</sub>| &lt;= k</code> and <code>1 &lt;= i &lt; j &lt;= points.length</code>.</p>\n\n<p>It is guaranteed that there exists at least one pair of points that satisfy the constraint <code>|x<sub>i</sub> - x<sub>j</sub>| &lt;= k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,3],[2,0],[5,10],[6,-10]], k = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The first two points satisfy the condition |x<sub>i</sub> - x<sub>j</sub>| &lt;= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.\nNo other pairs satisfy the condition, so we return the max of 4 and 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[0,0],[3,0],[9,2]], k = 3\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= points.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>8</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>8</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 2 * 10<sup>8</sup></code></li>\n\t<li><code>x<sub>i</sub> &lt; x<sub>j</sub></code> for all <code>1 &lt;= i &lt; j &lt;= points.length</code></li>\n\t<li><code>x<sub>i</sub></code> form a strictly increasing sequence.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1281,
            "dislikes": 53,
            "similarQuestions": "[{\"title\": \"Count Pairs in Two Arrays\", \"titleSlug\": \"count-pairs-in-two-arrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Monotonic Queue",
                    "slug": "monotonic-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"40.8K\", \"totalSubmission\": \"91.7K\", \"totalAcceptedRaw\": 40803, \"totalSubmissionRaw\": 91738, \"acRate\": \"44.5%\"}",
            "hints": [
                "Use a priority queue to store for each point i, the tuple [yi-xi, xi]",
                "Loop through the array and pop elements from the heap if the condition xj - xi > k, where j is the current index and i is the point on top the queue.",
                "After popping elements from the queue. If the queue is not empty, calculate the equation with the current point and the point on top of the queue and maximize the answer."
            ],
            "rephrased": {
                "body": "Given an array `points` representing coordinates on a 2D plane, sorted by their x-values, and an integer `k`, find the maximum value of the equation `y<sub>i</sub> + y<sub>j</sub> + |x<sub>i</sub> - x<sub>j</sub>|` where `|x<sub>i</sub> - x<sub>j</sub>| <= k` and `1 <= i < j <= points.length`.",
                "constraints": [
                    "2 <= points.length <= 10<sup>5</sup>",
                    "points[i].length == 2",
                    "-10<sup>8</sup> <= x<sub>i</sub>, y<sub>i</sub> <= 10<sup>8</sup>",
                    "0 <= k <= 2 * 10<sup>8</sup>",
                    "x<sub>i</sub> < x<sub>j</sub> for all 1 <= i < j <= points.length",
                    "x<sub>i</sub> form a strictly increasing sequence."
                ],
                "testcases": [
                    {
                        "input": "points = [[1,3],[2,0],[5,10],[6,-10]], k = 1",
                        "output": "4",
                        "explanation": "The pair (1,3) and (2,0) satisfy the condition |x<sub>i</sub> - x<sub>j</sub>| <= 1. The equation yields 3 + 0 + |1 - 2| = 4. The pair (5,10) and (6,-10) also satisfy the condition, giving 10 + (-10) + |5 - 6| = 1. The maximum value between 4 and 1 is 4."
                    },
                    {
                        "input": "points = [[0,0],[3,0],[9,2]], k = 3",
                        "output": "3",
                        "explanation": "Only the first two points (0,0) and (3,0) have an absolute difference of 3 or less in their x-values. The equation gives 0 + 0 + |0 - 3| = 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "count-pairs-in-two-arrays",
                "title": "Count Pairs in Two Arrays",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Use a priority queue to store for each point i, the tuple [yi-xi, xi]",
            "Loop through the array and pop elements from the heap if the condition xj - xi > k, where j is the current index and i is the point on top the queue.",
            "After popping elements from the queue. If the queue is not empty, calculate the equation with the current point and the point on top of the queue and maximize the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Monotonic Queue",
                "slug": "monotonic-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findMaxValueOfEquation(vector<vector<int>>& points, int k) {\n    int ans = INT_MIN;\n    priority_queue<pair<int, int>> maxHeap;  // (y - x, x)\n\n    for (const vector<int>& p : points) {\n      const int x = p[0];\n      const int y = p[1];\n      while (!maxHeap.empty() && x - maxHeap.top().second > k)\n        maxHeap.pop();\n      if (!maxHeap.empty())\n        ans = max(ans, x + y + maxHeap.top().first);\n      maxHeap.emplace(y - x, x);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findMaxValueOfEquation(int[][] points, int k) {\n    int ans = Integer.MIN_VALUE;\n    // (y - x, x)\n    Queue<Pair<Integer, Integer>> maxHeap =\n        new PriorityQueue<>((a, b)\n                                -> a.getKey().equals(b.getKey()) ? b.getValue() - a.getValue()\n                                                                 : b.getKey() - a.getKey());\n\n    for (int[] p : points) {\n      final int x = p[0];\n      final int y = p[1];\n      while (!maxHeap.isEmpty() && x - maxHeap.peek().getValue() > k)\n        maxHeap.poll();\n      if (!maxHeap.isEmpty())\n        ans = Math.max(ans, x + y + maxHeap.peek().getKey());\n      maxHeap.offer(new Pair<>(y - x, x));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMaxValueOfEquation(self, points: List[List[int]], k: int) -> int:\n    ans = -math.inf\n    maxHeap = []  # (y - x, x)\n\n    for x, y in points:\n      while maxHeap and x + maxHeap[0][1] > k:\n        heapq.heappop(maxHeap)\n      if maxHeap:\n        ans = max(ans, x + y - maxHeap[0][0])\n      heapq.heappush(maxHeap, (x - y, -x))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}