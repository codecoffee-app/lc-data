{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1615",
            "title": "Maximal Network Rank",
            "titleSlug": "maximal-network-rank",
            "content": "<p>There is an infrastructure of <code>n</code> cities with some number of <code>roads</code> connecting these cities. Each <code>roads[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is a bidirectional road between cities <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p>The <strong>network rank</strong><em> </em>of <strong>two different cities</strong> is defined as the total number of&nbsp;<strong>directly</strong> connected roads to <strong>either</strong> city. If a road is directly connected to both cities, it is only counted <strong>once</strong>.</p>\n\n<p>The <strong>maximal network rank </strong>of the infrastructure is the <strong>maximum network rank</strong> of all pairs of different cities.</p>\n\n<p>Given the integer <code>n</code> and the array <code>roads</code>, return <em>the <strong>maximal network rank</strong> of the entire infrastructure</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/21/ex1.png\" style=\"width: 292px; height: 172px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/21/ex2.png\" style=\"width: 292px; height: 172px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> There are 5 roads that are connected to cities 1 or 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= roads.length &lt;= n * (n - 1) / 2</code></li>\n\t<li><code>roads[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub>&nbsp;&lt;= n-1</code></li>\n\t<li><code>a<sub>i</sub>&nbsp;!=&nbsp;b<sub>i</sub></code></li>\n\t<li>Each&nbsp;pair of cities has <strong>at most one</strong> road connecting them.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2277,
            "dislikes": 351,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"134K\", \"totalSubmission\": \"205.5K\", \"totalAcceptedRaw\": 134005, \"totalSubmissionRaw\": 205477, \"acRate\": \"65.2%\"}",
            "hints": [
                "Try every pair of different cities and calculate its network rank.",
                "The network rank of two vertices is <i>almost</i> the sum of their degrees.",
                "How can you efficiently check if there is a road connecting two different cities?"
            ],
            "rephrased": {
                "body": "Given an infrastructure of `n` cities connected by bidirectional roads, where `roads[i] = [a_i, b_i]` represents a road between cities `a_i` and `b_i`. The network rank of two different cities is the total number of roads directly connected to either city, counting a road between them only once.  The maximal network rank of the infrastructure is the maximum network rank of any pair of distinct cities.  Return the maximal network rank of the entire infrastructure.",
                "constraints": [
                    "2 <= n <= 100",
                    "0 <= roads.length <= n * (n - 1) / 2",
                    "roads[i].length == 2",
                    "0 <= a_i, b_i <= n-1",
                    "a_i != b_i",
                    "Each pair of cities has at most one road connecting them."
                ],
                "testcases": [
                    {
                        "input": "n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]",
                        "output": "4",
                        "explanation": "The network rank of cities 0 and 1 is 4. There are 4 roads connected to either 0 or 1. The road between 0 and 1 is counted only once."
                    },
                    {
                        "input": "n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]",
                        "output": "5",
                        "explanation": "There are 5 roads connected to cities 1 or 2."
                    },
                    {
                        "input": "n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]",
                        "output": "5",
                        "explanation": "The network rank of 2 and 5 is 5. Note that the cities are not required to be connected."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Try every pair of different cities and calculate its network rank.",
            "The network rank of two vertices is <i>almost</i> the sum of their degrees.",
            "How can you efficiently check if there is a road connecting two different cities?"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximalNetworkRank(int n, vector<vector<int>>& roads) {\n    vector<int> degrees(n);\n\n    for (const vector<int>& road : roads) {\n      const int u = road[0];\n      const int v = road[1];\n      ++degrees[u];\n      ++degrees[v];\n    }\n\n    // Find the first max and second max degree.\n    int maxDegree1 = 0;\n    int maxDegree2 = 0;\n    for (const int degree : degrees) {\n      if (degree > maxDegree1) {\n        maxDegree2 = maxDegree1;\n        maxDegree1 = degree;\n      } else if (degree > maxDegree2) {\n        maxDegree2 = degree;\n      }\n    }\n\n    // There can be multiple nodes with `maxDegree1` degree or `maxDegree2`\n    // degree. Find the count of such nodes.\n    int countMaxDegree1 = 0;\n    int countMaxDegree2 = 0;\n    for (const int degree : degrees)\n      if (degree == maxDegree1)\n        ++countMaxDegree1;\n      else if (degree == maxDegree2)\n        ++countMaxDegree2;\n\n    if (countMaxDegree1 == 1) {\n      // If there is only one node with degree = `maxDegree1`.\n      // Then we'll need to use the node with degree = `maxDegree2`.\n      // The answer in general will be (maxDegree1 + maxDegree2), but if the two\n      // nodes that we're considering are connected, then we'll have to\n      // subtract 1.\n      const int edgeCount =\n          getEdgeCount(roads, degrees, maxDegree1, maxDegree2) +\n          getEdgeCount(roads, degrees, maxDegree2, maxDegree1);\n      return maxDegree1 + maxDegree2 - (countMaxDegree2 == edgeCount ? 1 : 0);\n    } else {\n      // If there are more than one node with degree = `maxDegree1`\n      // Then we can consider `maxDegree1` twice, and we don't need to use\n      // `maxDegree2`. The answer in general will be 2 * maxDegree1, but if the\n      // two nodes that we're considering are connected, then we'll have to\n      // subtract 1.\n      const int edgeCount =\n          getEdgeCount(roads, degrees, maxDegree1, maxDegree1);\n      const int maxPossibleEdgeCount =\n          countMaxDegree1 * (countMaxDegree1 - 1) / 2;\n      return 2 * maxDegree1 - (maxPossibleEdgeCount == edgeCount ? 1 : 0);\n    }\n  }\n\n private:\n  // Returns # of edges (u, v) where degress[u] == degreeU and\n  // degrees[v] == degreeV.\n  int getEdgeCount(const vector<vector<int>>& roads, const vector<int>& degrees,\n                   int degreeU, int degreeV) {\n    int edgeCount = 0;\n    for (const vector<int>& road : roads) {\n      const int u = road[0];\n      const int v = road[1];\n      if (degrees[u] == degreeU && degrees[v] == degreeV)\n        ++edgeCount;\n    }\n    return edgeCount;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximalNetworkRank(int n, int[][] roads) {\n    int[] degrees = new int[n];\n\n    for (int[] road : roads) {\n      final int u = road[0];\n      final int v = road[1];\n      ++degrees[u];\n      ++degrees[v];\n    }\n\n    // Find the first max and second max degree.\n    int maxDegree1 = 0;\n    int maxDegree2 = 0;\n    for (final int degree : degrees)\n      if (degree > maxDegree1) {\n        maxDegree2 = maxDegree1;\n        maxDegree1 = degree;\n      } else if (degree > maxDegree2) {\n        maxDegree2 = degree;\n      }\n\n    // There can be multiple nodes with `maxDegree1` degree or `maxDegree2` degree.\n    // Find the count of such nodes.\n    int countMaxDegree1 = 0;\n    int countMaxDegree2 = 0;\n    for (final int degree : degrees)\n      if (degree == maxDegree1)\n        ++countMaxDegree1;\n      else if (degree == maxDegree2)\n        ++countMaxDegree2;\n\n    if (countMaxDegree1 == 1) {\n      // If there is only one node with degree = `maxDegree1`.\n      // Then we'll need to use the node with degree = `maxDegree2`.\n      // The answer in general will be (maxDegree1 + maxDegree2), but if the two nodes that we're\n      // considering are connected, then we'll have to subtract 1.\n      final int edgeCount = getEdgeCount(roads, degrees, maxDegree1, maxDegree2) +\n                            getEdgeCount(roads, degrees, maxDegree2, maxDegree1);\n      return maxDegree1 + maxDegree2 - (countMaxDegree2 == edgeCount ? 1 : 0);\n    } else {\n      // If there are more than one node with degree = `maxDegree1`\n      // Then we can consider `maxDegree1` twice, and we don't need to use `maxDegree2`.\n      // The answer in general will be 2 * maxDegree1, but if the two nodes that we're considering\n      // are connected, then we'll have to subtract 1.\n      final int edgeCount = getEdgeCount(roads, degrees, maxDegree1, maxDegree1);\n      final int maxPossibleEdgeCount = countMaxDegree1 * (countMaxDegree1 - 1) / 2;\n      return 2 * maxDegree1 - (maxPossibleEdgeCount == edgeCount ? 1 : 0);\n    }\n  }\n\n  // Returns # of edges (u, v) where degress[u] == degreeU and degrees[v] == degreeV.\n  private int getEdgeCount(int[][] roads, int[] degrees, int degreeU, int degreeV) {\n    int edgeCount = 0;\n    for (int[] road : roads) {\n      final int u = road[0];\n      final int v = road[1];\n      if (degrees[u] == degreeU && degrees[v] == degreeV)\n        ++edgeCount;\n    }\n    return edgeCount;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximalNetworkRank(self, n: int, roads: List[List[int]]) -> int:\n    degrees = [0] * n\n\n    for u, v in roads:\n      degrees[u] += 1\n      degrees[v] += 1\n\n    # Find the first max and second max degree.\n    maxDegree1 = 0\n    maxDegree2 = 0\n    for degree in degrees:\n      if degree > maxDegree1:\n        maxDegree2 = maxDegree1\n        maxDegree1 = degree\n      elif degree > maxDegree2:\n        maxDegree2 = degree\n\n    # There can be multiple nodes with `maxDegree1` degree or `maxDegree2`\n    # degree. Find the count of such nodes.\n    countMaxDegree1 = 0\n    countMaxDegree2 = 0\n    for degree in degrees:\n      if degree == maxDegree1:\n        countMaxDegree1 += 1\n      elif degree == maxDegree2:\n        countMaxDegree2 += 1\n\n    if countMaxDegree1 == 1:\n      # If there is only one node with degree = `maxDegree1`.\n      # Then we'll need to use the node with degree = `maxDegree2`.\n      # The answer in general will be (maxDegree1 + maxDegree2), but if the two\n      # nodes that we're considering are connected, then we'll have to\n      # subtract 1.\n      edgeCount = self._getEdgeCount(roads, degrees, maxDegree1, maxDegree2) + \\\n          self._getEdgeCount(roads, degrees, maxDegree2, maxDegree1)\n      return maxDegree1 + maxDegree2 - (countMaxDegree2 == edgeCount)\n    else:\n      # If there are more than one node with degree = `maxDegree1`\n      # Then we can consider `maxDegree1` twice, and we don't need to use\n      # `maxDegree2`. The answer in general will be 2 * maxDegree1, but if the\n      # two nodes that we're considering are connected, then we'll have to\n      # subtract 1.\n      edgeCount = self._getEdgeCount(roads, degrees, maxDegree1, maxDegree1)\n      maxPossibleEdgeCount = countMaxDegree1 * (countMaxDegree1 - 1) // 2\n      return 2 * maxDegree1 - (maxPossibleEdgeCount == edgeCount)\n\n  def _getEdgeCount(self, roads: List[List[int]], degrees: List[int], degreeU: int, degreeV: int) -> int:\n    \"\"\"Returns # of edges (u, v) where degress[u] == degreeU and degrees[v] == degreeV.\"\"\"\n    edgeCount = 0\n    for u, v in roads:\n      if degrees[u] == degreeU and degrees[v] == degreeV:\n        edgeCount += 1\n    return edgeCount\n",
                "lang_text": "py"
            }
        }
    }
}