{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "85",
            "title": "Maximal Rectangle",
            "titleSlug": "maximal-rectangle",
            "content": "<p>Given a <code>rows x cols</code>&nbsp;binary <code>matrix</code> filled with <code>0</code>&#39;s and <code>1</code>&#39;s, find the largest rectangle containing only <code>1</code>&#39;s and return <em>its area</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg\" style=\"width: 402px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The maximal rectangle is shown in the above picture.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;]]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rows == matrix.length</code></li>\n\t<li><code>cols == matrix[i].length</code></li>\n\t<li><code>1 &lt;= row, cols &lt;= 200</code></li>\n\t<li><code>matrix[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 9597,
            "dislikes": 159,
            "similarQuestions": "[{\"title\": \"Largest Rectangle in Histogram\", \"titleSlug\": \"largest-rectangle-in-histogram\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximal Square\", \"titleSlug\": \"maximal-square\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"379.8K\", \"totalSubmission\": \"820K\", \"totalAcceptedRaw\": 379825, \"totalSubmissionRaw\": 820004, \"acRate\": \"46.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a binary matrix (a 2D array) of 0s and 1s, find the largest rectangle containing only 1s and return its area.",
                "constraints": [
                    "rows == matrix.length",
                    "cols == matrix[i].length",
                    "1 <= row, cols <= 200",
                    "matrix[i][j] is '0' or '1'."
                ],
                "testcases": [
                    {
                        "input": "[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
                        "output": "6",
                        "explanation": "The maximal rectangle is a rectangle of size 2x3 in the middle rows, yielding an area of 6."
                    },
                    {
                        "input": "[[\"0\"]]",
                        "output": "0",
                        "explanation": "The matrix contains only 0, so there is no rectangle of 1s."
                    },
                    {
                        "input": "[[\"1\"]]",
                        "output": "1",
                        "explanation": "The matrix contains only one element which is 1, so the maximal rectangle is of size 1x1, and its area is 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "largest-rectangle-in-histogram",
                "title": "Largest Rectangle in Histogram",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximal-square",
                "title": "Maximal Square",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximalRectangle(vector<vector<char>>& matrix) {\n    if (matrix.empty())\n      return 0;\n\n    int ans = 0;\n    vector<int> hist(matrix[0].size());\n\n    for (const vector<char>& row : matrix) {\n      for (int i = 0; i < row.size(); ++i)\n        hist[i] = row[i] == '0' ? 0 : hist[i] + 1;\n      ans = max(ans, largestRectangleArea(hist));\n    }\n\n    return ans;\n  }\n\n private:\n  int largestRectangleArea(const vector<int>& heights) {\n    int ans = 0;\n    stack<int> stack;\n\n    for (int i = 0; i <= heights.size(); ++i) {\n      while (!stack.empty() &&\n             (i == heights.size() || heights[stack.top()] > heights[i])) {\n        const int h = heights[stack.top()];\n        stack.pop();\n        const int w = stack.empty() ? i : i - stack.top() - 1;\n        ans = max(ans, h * w);\n      }\n      stack.push(i);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximalRectangle(char[][] matrix) {\n    if (matrix.length == 0)\n      return 0;\n\n    int ans = 0;\n    int[] hist = new int[matrix[0].length];\n\n    for (char[] row : matrix) {\n      for (int i = 0; i < row.length; ++i)\n        hist[i] = row[i] == '0' ? 0 : hist[i] + 1;\n      ans = Math.max(ans, largestRectangleArea(hist));\n    }\n\n    return ans;\n  }\n\n  private int largestRectangleArea(int[] heights) {\n    int ans = 0;\n    Deque<Integer> stack = new ArrayDeque<>();\n\n    for (int i = 0; i <= heights.length; ++i) {\n      while (!stack.isEmpty() && (i == heights.length || heights[stack.peek()] > heights[i])) {\n        final int h = heights[stack.pop()];\n        final int w = stack.isEmpty() ? i : i - stack.peek() - 1;\n        ans = Math.max(ans, h * w);\n      }\n      stack.push(i);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximalRectangle(self, matrix: List[List[str]]) -> int:\n    if not matrix:\n      return 0\n\n    ans = 0\n    hist = [0] * len(matrix[0])\n\n    def largestRectangleArea(heights: List[int]) -> int:\n      ans = 0\n      stack = []\n\n      for i in range(len(heights) + 1):\n        while stack and (i == len(heights) or heights[stack[-1]] > heights[i]):\n          h = heights[stack.pop()]\n          w = i - stack[-1] - 1 if stack else i\n          ans = max(ans, h * w)\n        stack.append(i)\n\n      return ans\n\n    for row in matrix:\n      for i, num in enumerate(row):\n        hist[i] = 0 if num == '0' else hist[i] + 1\n      ans = max(ans, largestRectangleArea(hist))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}