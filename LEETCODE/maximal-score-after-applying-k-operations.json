{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2530",
            "title": "Maximal Score After Applying K Operations",
            "titleSlug": "maximal-score-after-applying-k-operations",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and an integer <code>k</code>. You have a <strong>starting score</strong> of <code>0</code>.</p>\n\n<p>In one <strong>operation</strong>:</p>\n\n<ol>\n\t<li>choose an index <code>i</code> such that <code>0 &lt;= i &lt; nums.length</code>,</li>\n\t<li>increase your <strong>score</strong> by <code>nums[i]</code>, and</li>\n\t<li>replace <code>nums[i]</code> with <code>ceil(nums[i] / 3)</code>.</li>\n</ol>\n\n<p>Return <em>the maximum possible <strong>score</strong> you can attain after applying <strong>exactly</strong></em> <code>k</code> <em>operations</em>.</p>\n\n<p>The ceiling function <code>ceil(val)</code> is the least integer greater than or equal to <code>val</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,10,10,10,10], k = 5\n<strong>Output:</strong> 50\n<strong>Explanation:</strong> Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,10,3,3,3], k = 3\n<strong>Output:</strong> 17\n<strong>Explanation: </strong>You can do the following operations:\nOperation 1: Select i = 1, so nums becomes [1,<strong><u>4</u></strong>,3,3,3]. Your score increases by 10.\nOperation 2: Select i = 1, so nums becomes [1,<strong><u>2</u></strong>,3,3,3]. Your score increases by 4.\nOperation 3: Select i = 2, so nums becomes [1,1,<u><strong>1</strong></u>,3,3]. Your score increases by 3.\nThe final score is 10 + 4 + 3 = 17.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length, k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 366,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"Sliding Window Maximum\", \"titleSlug\": \"sliding-window-maximum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Remove Stones to Minimize the Total\", \"titleSlug\": \"remove-stones-to-minimize-the-total\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.6K\", \"totalSubmission\": \"57.3K\", \"totalAcceptedRaw\": 25647, \"totalSubmissionRaw\": 57304, \"acRate\": \"44.8%\"}",
            "hints": [
                "It is always optimal to select the greatest element in the array.",
                "Use a heap to query for the maximum in O(log n) time."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` and an integer `k`, you start with a score of 0. In each operation, you can choose an index `i` such that 0 <= i < nums.length, increase your score by `nums[i]`, and replace `nums[i]` with `ceil(nums[i] / 3)`.  Return the maximum possible score you can attain after applying exactly `k` operations. The ceiling function `ceil(val)` returns the smallest integer greater than or equal to `val`.",
                "constraints": [
                    "1 <= nums.length, k <= 10^5",
                    "1 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [10,10,10,10,10], k = 5",
                        "output": "50",
                        "explanation": "Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50."
                    },
                    {
                        "input": "nums = [1,10,3,3,3], k = 3",
                        "output": "17",
                        "explanation": "You can do the following operations:\nOperation 1: Select i = 1, so nums becomes [1,4,3,3,3]. Your score increases by 10.\nOperation 2: Select i = 1, so nums becomes [1,2,3,3,3]. Your score increases by 4.\nOperation 3: Select i = 2, so nums becomes [1,1,1,3,3]. Your score increases by 3.\nThe final score is 10 + 4 + 3 = 17."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "sliding-window-maximum",
                "title": "Sliding Window Maximum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "remove-stones-to-minimize-the-total",
                "title": "Remove Stones to Minimize the Total",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "It is always optimal to select the greatest element in the array.",
            "Use a heap to query for the maximum in O(log n) time."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maxKelements(vector<int>& nums, int k) {\n    long long ans = 0;\n    priority_queue<int> maxHeap;\n\n    for (const int num : nums)\n      maxHeap.push(num);\n\n    for (int i = 0; i < k; ++i) {\n      const int num = maxHeap.top();\n      maxHeap.pop();\n      ans += num;\n      maxHeap.push((num + 2) / 3);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maxKelements(int[] nums, int k) {\n    long ans = 0;\n    Queue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n    for (final int num : nums)\n      maxHeap.offer(num);\n\n    for (int i = 0; i < k; ++i) {\n      final int num = maxHeap.poll();\n      ans += num;\n      maxHeap.offer((num + 2) / 3);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxKelements(self, nums: List[int], k: int) -> int:\n    ans = 0\n    maxHeap = [-num for num in nums]\n    heapq.heapify(maxHeap)\n\n    for _ in range(k):\n      num = -heapq.heappop(maxHeap)\n      ans += num\n      heapq.heappush(maxHeap, -math.ceil(num / 3))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}