{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3041",
            "title": "Maximize Consecutive Elements in an Array After Modification",
            "titleSlug": "maximize-consecutive-elements-in-an-array-after-modification",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of <strong>positive</strong> integers.</p>\n\n<p>Initially, you can increase the value of <strong>any</strong> element in the array by <strong>at most</strong> <code>1</code>.</p>\n\n<p>After that, you need to select <strong>one or more</strong> elements from the final array such that those elements are <strong>consecutive</strong> when sorted in increasing order. For example, the elements <code>[3, 4, 5]</code> are consecutive while <code>[3, 4, 6]</code> and <code>[1, 1, 2, 3]</code> are not.<!-- notionvc: 312f8c5d-40d0-4cd1-96cc-9e96a846735b --></p>\n\n<p>Return <em>the <strong>maximum</strong> number of elements that you can select</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,5,1,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can increase the elements at indices 0 and 3. The resulting array is nums = [3,1,5,2,1].\nWe select the elements [<u><strong>3</strong></u>,<u><strong>1</strong></u>,5,<u><strong>2</strong></u>,1] and we sort them to obtain [1,2,3], which are consecutive.\nIt can be shown that we cannot select more than 3 consecutive elements.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,7,10]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The maximum consecutive elements that we can select is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 138,
            "dislikes": 6,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.1K\", \"totalSubmission\": \"22.4K\", \"totalAcceptedRaw\": 7103, \"totalSubmissionRaw\": 22426, \"acRate\": \"31.7%\"}",
            "hints": [
                "Sort the array and try using dynamic programming.",
                "Let <code>dp[i]</code> be the length of the longest consecutive elements ending at element at index <code>i</code> in the sorted array."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` of positive integers, you can increase the value of any element in the array by at most 1. After modification, select the maximum number of elements from the array that form a consecutive sequence when sorted in increasing order. Return the maximum number of elements you can select.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2,1,5,1,1]",
                        "output": "3",
                        "explanation": "By increasing the elements at indices 0 and 3, the array becomes [3,1,5,2,1]. Selecting [3,1,2] and sorting them results in [1,2,3], a consecutive sequence. It can be shown that no selection of more than 3 elements can form a consecutive sequence."
                    },
                    {
                        "input": "[1,4,7,10]",
                        "output": "1",
                        "explanation": "The maximum number of consecutive elements that can be selected is 1. In this case, modifying any element won't help to create longer consecutive sequence."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Sort the array and try using dynamic programming.",
            "Let <code>dp[i]</code> be the length of the longest consecutive elements ending at element at index <code>i</code> in the sorted array."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxSelectedElements(vector<int>& nums) {\n    int ans = 0;\n    // {num: the length of the longest consecutive elements ending at num}\n    unordered_map<int, int> dp;\n\n    ranges::sort(nums);\n\n    for (const int num : nums) {\n      dp[num + 1] = dp[num] + 1;\n      dp[num] = dp[num - 1] + 1;\n      ans = max({ans, dp[num], dp[num + 1]});\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxSelectedElements(int[] nums) {\n    int ans = 0;\n    // {num: the length of the longest consecutive elements ending at num}\n    HashMap<Integer, Integer> dp = new HashMap<>();\n\n    Arrays.sort(nums);\n\n    for (final int num : nums) {\n      dp.put(num + 1, dp.getOrDefault(num, 0) + 1);\n      dp.put(num, dp.getOrDefault(num - 1, 0) + 1);\n      ans = Math.max(ans, Math.max(dp.get(num), dp.get(num + 1)));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSelectedElements(self, nums: List[int]) -> int:\n    ans = 0\n    # {num: the length of the longest consecutive elements ending at num}\n    dp = {}\n\n    for num in sorted(nums):\n      dp[num + 1] = dp.get(num, 0) + 1\n      dp[num] = dp.get(num - 1, 0) + 1\n      ans = max(ans, dp[num], dp[num + 1])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}