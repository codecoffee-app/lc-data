{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2592",
            "title": "Maximize Greatness of an Array",
            "titleSlug": "maximize-greatness-of-an-array",
            "content": "<p>You are given a 0-indexed integer array <code>nums</code>. You are allowed to permute <code>nums</code> into a new array <code>perm</code> of your choosing.</p>\n\n<p>We define the <strong>greatness</strong> of <code>nums</code> be the number of indices <code>0 &lt;= i &lt; nums.length</code> for which <code>perm[i] &gt; nums[i]</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible greatness you can achieve after permuting</em> <code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,2,1,3,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One of the optimal rearrangements is perm = [2,5,1,3,3,1,1].\nAt indices = 0, 1, 3, and 4, perm[i] &gt; nums[i]. Hence, we return 4.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can prove the optimal perm is [2,3,4,1].\nAt indices = 0, 1, and 2, perm[i] &gt; nums[i]. Hence, we return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 396,
            "dislikes": 12,
            "similarQuestions": "[{\"title\": \"3Sum Smaller\", \"titleSlug\": \"3sum-smaller\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Matching of Players With Trainers\", \"titleSlug\": \"maximum-matching-of-players-with-trainers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"20K\", \"totalSubmission\": \"35.3K\", \"totalAcceptedRaw\": 20036, \"totalSubmissionRaw\": 35322, \"acRate\": \"56.7%\"}",
            "hints": [
                "Can we use sorting and two pointers here?",
                "Assign every element the next bigger unused element as many times as possible."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums`, you are allowed to rearrange its elements to create a new array `perm`. The greatness of `nums` is defined as the number of indices `i` where `perm[i]` is greater than `nums[i]`.  Determine the maximum possible greatness that can be achieved after rearranging `nums`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "0 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1,3,5,2,1,3,1]",
                        "output": "4",
                        "explanation": "One possible optimal rearrangement is perm = [2,5,1,3,3,1,1]. In this arrangement, perm[i] > nums[i] at indices 0, 1, 3, and 4. Therefore, the greatness is 4."
                    },
                    {
                        "input": "[1,2,3,4]",
                        "output": "3",
                        "explanation": "One possible optimal rearrangement is perm = [2,3,4,1].  In this arrangement, perm[i] > nums[i] at indices 0, 1, and 2. Therefore, the greatness is 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "3sum-smaller",
                "title": "3Sum Smaller",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-matching-of-players-with-trainers",
                "title": "Maximum Matching of Players With Trainers",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we use sorting and two pointers here?",
            "Assign every element the next bigger unused element as many times as possible."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ]
    }
}