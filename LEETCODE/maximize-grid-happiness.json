{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1659",
            "title": "Maximize Grid Happiness",
            "titleSlug": "maximize-grid-happiness",
            "content": "<p>You are given four integers, <code>m</code>, <code>n</code>, <code>introvertsCount</code>, and <code>extrovertsCount</code>. You have an <code>m x n</code> grid, and there are two types of people: introverts and extroverts. There are <code>introvertsCount</code> introverts and <code>extrovertsCount</code> extroverts.</p>\n\n<p>You should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you <strong>do not</strong> have to have all the people living in the grid.</p>\n\n<p>The <strong>happiness</strong> of each person is calculated as follows:</p>\n\n<ul>\n\t<li>Introverts <strong>start</strong> with <code>120</code> happiness and <strong>lose</strong> <code>30</code> happiness for each neighbor (introvert or extrovert).</li>\n\t<li>Extroverts <strong>start</strong> with <code>40</code> happiness and <strong>gain</strong> <code>20</code> happiness for each neighbor (introvert or extrovert).</li>\n</ul>\n\n<p>Neighbors live in the directly adjacent cells north, east, south, and west of a person&#39;s cell.</p>\n\n<p>The <strong>grid happiness</strong> is the <strong>sum</strong> of each person&#39;s happiness. Return<em> the <strong>maximum possible grid happiness</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/grid_happiness.png\" style=\"width: 261px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2\n<strong>Output:</strong> 240\n<strong>Explanation:</strong> Assume the grid is 1-indexed with coordinates (row, column).\nWe can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120\n- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\n- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\nThe grid happiness is 120 + 60 + 60 = 240.\nThe above figure shows the grid in this example with each person&#39;s happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1\n<strong>Output:</strong> 260\n<strong>Explanation:</strong> Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\n- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80\n- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\nThe grid happiness is 90 + 80 + 90 = 260.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0\n<strong>Output:</strong> 240\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 5</code></li>\n\t<li><code>0 &lt;= introvertsCount, extrovertsCount &lt;= min(m * n, 6)</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 325,
            "dislikes": 53,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.2K\", \"totalSubmission\": \"13.1K\", \"totalAcceptedRaw\": 5161, \"totalSubmissionRaw\": 13061, \"acRate\": \"39.5%\"}",
            "hints": [
                "For each cell, it has 3 options, either it is empty, or contains an introvert, or an extrovert.",
                "You can do DP where you maintain the state of the previous row, the number of remaining introverts and extroverts, the current row and column, and try the 3 options for each cell.",
                "Assume that the previous columns in the current row already belong to the previous row."
            ],
            "rephrased": {
                "body": "You are given a grid of size `m x n`. You also have `introvertsCount` introverts and `extrovertsCount` extroverts. You can place any number of these people into the grid (you don't have to use all of them).  Each person's happiness is determined by their neighbors (north, east, south, west).\n\nIntroverts start with 120 happiness and lose 30 for each neighbor.\nExtroverts start with 40 happiness and gain 20 for each neighbor.\n\nDetermine the maximum possible total happiness of the grid.",
                "constraints": [
                    "1 <= m, n <= 5",
                    "0 <= introvertsCount, extrovertsCount <= min(m * n, 6)"
                ],
                "testcases": [
                    {
                        "input": "m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2",
                        "output": "240",
                        "explanation": "One optimal arrangement is to place the introvert at (1,1), and the extroverts at (1,3) and (2,3).  The introvert has 120 happiness (no neighbors). Each extrovert has 40 + 20 = 60 happiness (one neighbor).  Total happiness is 120 + 60 + 60 = 240."
                    },
                    {
                        "input": "m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1",
                        "output": "260",
                        "explanation": "Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\n- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80\n- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\nThe grid happiness is 90 + 80 + 90 = 260."
                    },
                    {
                        "input": "m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0",
                        "output": "240",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For each cell, it has 3 options, either it is empty, or contains an introvert, or an extrovert.",
            "You can do DP where you maintain the state of the previous row, the number of remaining introverts and extroverts, the current row and column, and try the 3 options for each cell.",
            "Assume that the previous columns in the current row already belong to the previous row."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int getMaxGridHappiness(int m, int n, int introvertsCount,\n                          int extrovertsCount) {\n    return getMaxGridHappiness(m, n, 0, 0, 0, introvertsCount, extrovertsCount);\n  }\n\n private:\n  int dp[25][64][64][7][7] = {};\n\n  // Calculates the cost based on left and up neighbors.\n  //\n  // The `diff` parameter represents the happiness change due to the current\n  // placed person in (i, j). We add `diff` each time we encounter a neighbor\n  // (left or up) who is already placed.\n  //\n  // * If the neighbor is an introvert, we subtract 30 from cost.\n  // * If the neighbor is an extrovert, we add 20 to from cost.\n  int getPlacementCost(int n, int i, int j, int inMask, int exMask, int diff) {\n    int cost = 0;\n    if (i > 0) {\n      if ((1 << (n - 1)) & inMask)\n        cost += diff - 30;\n      if ((1 << (n - 1)) & exMask)\n        cost += diff + 20;\n    }\n    if (j > 0) {\n      if (1 & inMask)\n        cost += diff - 30;\n      if (1 & exMask)\n        cost += diff + 20;\n    }\n    return cost;\n  }\n\n  int getMaxGridHappiness(int m, int n, int pos, int inMask, int exMask,\n                          int inCount, int exCount) {\n    // `inMask` is the placement of introvert people in the last n cells.\n    // E.g., if we have m = 2, n = 3, i = 1, j = 1, then inMask = 0b101 means\n    //\n    // ? 1 0\n    // 1 x ? (x := current position)\n    const int i = pos / n;\n    const int j = pos % n;\n    if (i == m)\n      return 0;\n    if (dp[pos][inMask][exMask][inCount][exCount] > 0)\n      return dp[pos][inMask][exMask][inCount][exCount];\n\n    const int shiftedInMask = (inMask << 1) & ((1 << n) - 1);\n    const int shiftedExMask = (exMask << 1) & ((1 << n) - 1);\n\n    const int skip = getMaxGridHappiness(m, n, pos + 1, shiftedInMask,\n                                         shiftedExMask, inCount, exCount);\n    const int placeIntrovert =\n        inCount > 0\n            ? 120 + getPlacementCost(n, i, j, inMask, exMask, -30) +\n                  getMaxGridHappiness(m, n, pos + 1, shiftedInMask | 1,\n                                      shiftedExMask, inCount - 1, exCount)\n            : INT_MIN;\n    const int placeExtrovert =\n        exCount > 0\n            ? 40 + getPlacementCost(n, i, j, inMask, exMask, 20) +\n                  getMaxGridHappiness(m, n, pos + 1, shiftedInMask,\n                                      shiftedExMask | 1, inCount, exCount - 1)\n            : INT_MIN;\n    return dp[pos][inMask][exMask][inCount][exCount] =\n               max({skip, placeIntrovert, placeExtrovert});\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public int getMaxGridHappiness(int m, int n, int introvertsCount, int extrovertsCount) {\n    final int twoToThePowerOfN = (int) Math.pow(2, n);\n    dp = new int[m * n][twoToThePowerOfN][twoToThePowerOfN][introvertsCount + 1]\n                [extrovertsCount + 1];\n    return getMaxGridHappiness(m, n, 0, 0, 0, introvertsCount, extrovertsCount);\n  }\n\n  private int[][][][][] dp;\n\n  // Calculates the cost based on left and up neighbors.\n  //\n  // The `diff` parameter represents the happiness change due to the current\n  // placed person in (i, j). We add `diff` each time we encounter a neighbor\n  // (left or up) who is already placed.\n  //\n  // * If the neighbor is an introvert, we subtract 30 from cost.\n  // * If the neighbor is an extrovert, we add 20 to the cost.\n  private int getPlacementCost(int n, int i, int j, int inMask, int exMask, int diff) {\n    int cost = 0;\n    if (i > 0) {\n      if (((1 << (n - 1)) & inMask) > 0)\n        cost += diff - 30;\n      if (((1 << (n - 1)) & exMask) > 0)\n        cost += diff + 20;\n    }\n    if (j > 0) {\n      if ((1 & inMask) > 0)\n        cost += diff - 30;\n      if ((1 & exMask) > 0)\n        cost += diff + 20;\n    }\n    return cost;\n  }\n\n  private int getMaxGridHappiness(int m, int n, int pos, int inMask, int exMask, int inCount,\n                                  int exCount) {\n    // `inMask` is the placement of introvert people in the last n cells.\n    // E.g., if we have m = 2, n = 3, i = 1, j = 1, then inMask = 0b101 means\n    //\n    // ? 1 0\n    // 1 x ? (x := current position)\n    final int i = pos / n;\n    final int j = pos % n;\n    if (i == m)\n      return 0;\n    if (dp[pos][inMask][exMask][inCount][exCount] > 0)\n      return dp[pos][inMask][exMask][inCount][exCount];\n\n    final int shiftedInMask = (inMask << 1) & ((1 << n) - 1);\n    final int shiftedExMask = (exMask << 1) & ((1 << n) - 1);\n\n    final int skip =\n        getMaxGridHappiness(m, n, pos + 1, shiftedInMask, shiftedExMask, inCount, exCount);\n    final int placeIntrovert = inCount > 0\n                                   ? 120 + getPlacementCost(n, i, j, inMask, exMask, -30) +\n                                         getMaxGridHappiness(m, n, pos + 1, shiftedInMask | 1,\n                                                             shiftedExMask, inCount - 1, exCount)\n                                   : Integer.MIN_VALUE;\n    final int placeExtrovert =\n        exCount > 0 ? 40 + getPlacementCost(n, i, j, inMask, exMask, 20) +\n                          getMaxGridHappiness(m, n, pos + 1, shiftedInMask, shiftedExMask | 1,\n                                              inCount, exCount - 1)\n                    : Integer.MIN_VALUE;\n    return dp[pos][inMask][exMask][inCount][exCount] =\n               Math.max(skip, Math.max(placeIntrovert, placeExtrovert));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getMaxGridHappiness(self, m: int, n: int, introvertsCount: int, extrovertsCount: int) -> int:\n    def getPlacementCost(i: int, j: int, inMask: int, exMask: int, diff: int) -> int:\n      \"\"\"\n      Calculates the cost based on left and up neighbors.\n\n      The `diff` parameter represents the happiness change due to the current\n      placed person in (i, j). We add `diff` each time we encounter a neighbor\n      (left or up) who is already placed.\n\n      * If the neighbor is an introvert, we subtract 30 from cost.\n      * If the neighbor is an extrovert, we add 20 to from cost.\n      \"\"\"\n      cost = 0\n      if i > 0:\n        if (1 << (n - 1)) & inMask:\n          cost += diff - 30\n        if (1 << (n - 1)) & exMask:\n          cost += diff + 20\n      if j > 0:\n        if 1 & inMask:\n          cost += diff - 30\n        if 1 & exMask:\n          cost += diff + 20\n      return cost\n\n    @functools.lru_cache(None)\n    def dp(pos: int, inMask: int, exMask: int, inCount: int, exCount: int) -> int:\n      # `inMask` is the placement of introvert people in the last n cells.\n      # E.g., if we have m = 2, n = 3, i = 1, j = 1, then inMask = 0b101 means\n      #\n      # ? 1 0\n      # 1 x ? (x := current position)\n      i, j = divmod(pos, n)\n      if i == m:\n        return 0\n\n      shiftedInMask = (inMask << 1) & ((1 << n) - 1)\n      shiftedExMask = (exMask << 1) & ((1 << n) - 1)\n\n      skip = dp(pos + 1, shiftedInMask, shiftedExMask, inCount, exCount)\n      placeIntrovert = 120 + getPlacementCost(i, j, inMask, exMask, -30) + \\\n          dp(pos + 1, shiftedInMask + 1, shiftedExMask, inCount - 1, exCount) if inCount > 0 \\\n          else -math.inf\n      placeExtrovert = 40 + getPlacementCost(i, j, inMask, exMask, 20) + \\\n          dp(pos + 1, shiftedInMask, shiftedExMask + 1, inCount, exCount - 1) if exCount > 0 \\\n          else -math.inf\n      return max(skip, placeIntrovert, placeExtrovert)\n\n    return dp(0, 0, 0, introvertsCount, extrovertsCount)\n",
                "lang_text": "py"
            }
        }
    }
}