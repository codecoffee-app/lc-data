{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3075",
            "title": "Maximize Happiness of Selected Children",
            "titleSlug": "maximize-happiness-of-selected-children",
            "content": "<p>You are given an array <code>happiness</code> of length <code>n</code>, and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>There are <code>n</code> children standing in a queue, where the <code>i<sup>th</sup></code> child has <strong>happiness value</strong> <code>happiness[i]</code>. You want to select <code>k</code> children from these <code>n</code> children in <code>k</code> turns.</p>\n\n<p>In each turn, when you select a child, the <strong>happiness value</strong> of all the children that have <strong>not</strong> been selected till now decreases by <code>1</code>. Note that the happiness value <strong>cannot</strong> become negative and gets decremented <strong>only</strong> if it is positive.</p>\n\n<p>Return <em>the <strong>maximum</strong> sum of the happiness values of the selected children you can achieve by selecting </em><code>k</code> <em>children</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> happiness = [1,2,3], k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We can pick 2 children in the following way:\n- Pick the child with the happiness value == 3. The happiness value of the remaining children becomes [0,1].\n- Pick the child with the happiness value == 1. The happiness value of the remaining child becomes [0]. Note that the happiness value cannot become less than 0.\nThe sum of the happiness values of the selected children is 3 + 1 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> happiness = [1,1,1,1], k = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can pick 2 children in the following way:\n- Pick any child with the happiness value == 1. The happiness value of the remaining children becomes [0,0,0].\n- Pick the child with the happiness value == 0. The happiness value of the remaining child becomes [0,0].\nThe sum of the happiness values of the selected children is 1 + 0 = 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> happiness = [2,3,4,5], k = 1\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> We can pick 1 child in the following way:\n- Pick the child with the happiness value == 5. The happiness value of the remaining children becomes [1,2,3].\nThe sum of the happiness values of the selected children is 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == happiness.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= happiness[i] &lt;= 10<sup>8</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 632,
            "dislikes": 89,
            "similarQuestions": "[{\"title\": \"Maximum Candies Allocated to K Children\", \"titleSlug\": \"maximum-candies-allocated-to-k-children\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"170.8K\", \"totalSubmission\": \"310K\", \"totalAcceptedRaw\": 170775, \"totalSubmissionRaw\": 310019, \"acRate\": \"55.1%\"}",
            "hints": [
                "Since all the unselected numbers are decreasing at the same rate, we should greedily select <code>k</code> largest values.",
                "The <code>i<sup>th</code> largest number (<code>i = 1, 2, 3,\u2026k</code>) should decrease by <code>(i - 1)</code> when it is picked.",
                "Add <code>0</code> if the decreased value is negative."
            ],
            "rephrased": {
                "body": "Given an array `happiness` of length `n` representing the happiness values of `n` children in a queue, and a positive integer `k`, you need to select `k` children in `k` turns.  Each time a child is selected, the happiness value of all remaining unselected children decreases by 1, but cannot become negative. Determine the maximum sum of the happiness values of the selected children.",
                "constraints": [
                    "1 <= n == happiness.length <= 2 * 10^5",
                    "1 <= happiness[i] <= 10^8",
                    "1 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "happiness = [1,2,3], k = 2",
                        "output": "4",
                        "explanation": "One optimal way is to first pick the child with happiness value 3. The remaining happiness values become [0, 1]. Then, pick the child with happiness value 1. The sum of selected happiness values is 3 + 1 = 4."
                    },
                    {
                        "input": "happiness = [1,1,1,1], k = 2",
                        "output": "1",
                        "explanation": "One optimal way is to pick any child with happiness value 1. The remaining happiness values become [0, 0, 0]. Then, pick any child with happiness value 0. The sum of selected happiness values is 1 + 0 = 1."
                    },
                    {
                        "input": "happiness = [2,3,4,5], k = 1",
                        "output": "5",
                        "explanation": "The optimal choice is to pick the child with happiness value 5. The remaining happiness values become [1, 2, 3]. The sum of the selected happiness values is 5."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-candies-allocated-to-k-children",
                "title": "Maximum Candies Allocated to K Children",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Since all the unselected numbers are decreasing at the same rate, we should greedily select <code>k</code> largest values.",
            "The <code>i<sup>th</code> largest number (<code>i = 1, 2, 3,\u2026k</code>) should decrease by <code>(i - 1)</code> when it is picked.",
            "Add <code>0</code> if the decreased value is negative."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maximumHappinessSum(vector<int>& happiness, int k) {\n    long long ans = 0;\n    int decremented = 0;\n\n    ranges::sort(happiness, greater<>());\n\n    for (int i = 0; i < k; ++i) {\n      ans += max(0, happiness[i] - decremented);\n      ++decremented;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maximumHappinessSum(int[] happiness, int k) {\n    final int n = happiness.length;\n    long ans = 0;\n    int decremented = 0;\n\n    Arrays.sort(happiness);\n\n    for (int i = n - 1; i >= n - k; --i) {\n      ans += Math.max(0, happiness[i] - decremented);\n      ++decremented;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumHappinessSum(self, happiness: List[int], k: int) -> int:\n    ans = 0\n    decremented = 0\n\n    happiness.sort(reverse=True)\n\n    for i in range(k):\n      ans += max(0, happiness[i] - decremented)\n      decremented += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}