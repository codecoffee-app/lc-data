{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1771",
            "title": "Maximize Palindrome Length From Subsequences",
            "titleSlug": "maximize-palindrome-length-from-subsequences",
            "content": "<p>You are given two strings, <code>word1</code> and <code>word2</code>. You want to construct a string in the following manner:</p>\n\n<ul>\n\t<li>Choose some <strong>non-empty</strong> subsequence <code>subsequence1</code> from <code>word1</code>.</li>\n\t<li>Choose some <strong>non-empty</strong> subsequence <code>subsequence2</code> from <code>word2</code>.</li>\n\t<li>Concatenate the subsequences: <code>subsequence1 + subsequence2</code>, to make the string.</li>\n</ul>\n\n<p>Return <em>the <strong>length</strong> of the longest <strong>palindrome</strong> that can be constructed in the described manner. </em>If no palindromes can be constructed, return <code>0</code>.</p>\n\n<p>A <strong>subsequence</strong> of a string <code>s</code> is a string that can be made by deleting some (possibly none) characters from <code>s</code> without changing the order of the remaining characters.</p>\n\n<p>A <strong>palindrome</strong> is a string that reads the same forward&nbsp;as well as backward.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;cacb&quot;, word2 = &quot;cbba&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Choose &quot;ab&quot; from word1 and &quot;cba&quot; from word2 to make &quot;abcba&quot;, which is a palindrome.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;ab&quot;, word2 = &quot;ab&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Choose &quot;ab&quot; from word1 and &quot;a&quot; from word2 to make &quot;aba&quot;, which is a palindrome.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;aa&quot;, word2 = &quot;bb&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> You cannot construct a palindrome from the described method, so return 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word1.length, word2.length &lt;= 1000</code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 527,
            "dislikes": 13,
            "similarQuestions": "[{\"title\": \"Longest Palindromic Subsequence\", \"titleSlug\": \"longest-palindromic-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.4K\", \"totalSubmission\": \"29K\", \"totalAcceptedRaw\": 10377, \"totalSubmissionRaw\": 28956, \"acRate\": \"35.8%\"}",
            "hints": [
                "Let's ignore the non-empty subsequence constraint. We can concatenate the two strings and find the largest palindromic subsequence with dynamic programming.",
                "Iterate through every pair of characters word1[i] and word2[j], and see if some palindrome begins with word1[i] and ends with word2[j]. This ensures that the subsequences are non-empty."
            ],
            "rephrased": {
                "body": "Given two strings, `word1` and `word2`, construct a string by concatenating a non-empty subsequence from `word1` and a non-empty subsequence from `word2`. Return the length of the longest palindrome that can be formed in this manner. If no palindromes can be constructed, return 0.",
                "constraints": [
                    "1 <= word1.length, word2.length <= 1000",
                    "word1 and word2 consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word1 = \"cacb\", word2 = \"cbba\"",
                        "output": "5",
                        "explanation": "One possible palindrome is constructed by choosing \"ab\" from word1 and \"cba\" from word2, resulting in \"abcba\"."
                    },
                    {
                        "input": "word1 = \"ab\", word2 = \"ab\"",
                        "output": "3",
                        "explanation": "One possible palindrome is constructed by choosing \"ab\" from word1 and \"a\" from word2, resulting in \"aba\"."
                    },
                    {
                        "input": "word1 = \"aa\", word2 = \"bb\"",
                        "output": "0",
                        "explanation": "No palindrome can be constructed by concatenating subsequences from the given strings."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-palindromic-subsequence",
                "title": "Longest Palindromic Subsequence",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let's ignore the non-empty subsequence constraint. We can concatenate the two strings and find the largest palindromic subsequence with dynamic programming.",
            "Iterate through every pair of characters word1[i] and word2[j], and see if some palindrome begins with word1[i] and ends with word2[j]. This ensures that the subsequences are non-empty."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int longestPalindrome(string word1, string word2) {\n    const string& s = word1 + word2;\n    const int n = s.length();\n    int ans = 0;\n    // dp[i][j] := LPS's length in s[i..j]\n    vector<vector<int>> dp(n, vector<int>(n));\n\n    for (int i = 0; i < n; ++i)\n      dp[i][i] = 1;\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        const int j = i + d;\n        if (s[i] == s[j]) {\n          dp[i][j] = 2 + dp[i + 1][j - 1];\n          if (i < word1.length() && j >= word1.length())\n            ans = max(ans, dp[i][j]);\n        } else {\n          dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n        }\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int longestPalindrome(String word1, String word2) {\n    final String s = word1 + word2;\n    final int n = s.length();\n    int ans = 0;\n    // dp[i][j] := LPS's length in s[i..j]\n    int[][] dp = new int[n][n];\n\n    for (int i = 0; i < n; ++i)\n      dp[i][i] = 1;\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        final int j = i + d;\n        if (s.charAt(i) == s.charAt(j)) {\n          dp[i][j] = 2 + dp[i + 1][j - 1];\n          if (i < word1.length() && j >= word1.length())\n            ans = Math.max(ans, dp[i][j]);\n        } else {\n          dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n        }\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}