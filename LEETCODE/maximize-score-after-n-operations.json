{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1799",
            "title": "Maximize Score After N Operations",
            "titleSlug": "maximize-score-after-n-operations",
            "content": "<p>You are given <code>nums</code>, an array of positive integers of size <code>2 * n</code>. You must perform <code>n</code> operations on this array.</p>\n\n<p>In the <code>i<sup>th</sup></code> operation <strong>(1-indexed)</strong>, you will:</p>\n\n<ul>\n\t<li>Choose two elements, <code>x</code> and <code>y</code>.</li>\n\t<li>Receive a score of <code>i * gcd(x, y)</code>.</li>\n\t<li>Remove <code>x</code> and <code>y</code> from <code>nums</code>.</li>\n</ul>\n\n<p>Return <em>the maximum score you can receive after performing </em><code>n</code><em> operations.</em></p>\n\n<p>The function <code>gcd(x, y)</code> is the greatest common divisor of <code>x</code> and <code>y</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>&nbsp;The optimal choice of operations is:\n(1 * gcd(1, 2)) = 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,6,8]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong>&nbsp;The optimal choice of operations is:\n(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong>&nbsp;The optimal choice of operations is:\n(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 7</code></li>\n\t<li><code>nums.length == 2 * n</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1589,
            "dislikes": 111,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"57.8K\", \"totalSubmission\": \"99.3K\", \"totalAcceptedRaw\": 57801, \"totalSubmissionRaw\": 99330, \"acRate\": \"58.2%\"}",
            "hints": [
                "Find every way to split the array until n groups of 2. Brute force recursion is acceptable.",
                "Calculate the gcd of every pair and greedily multiply the largest gcds."
            ],
            "rephrased": {
                "body": "Given an array `nums` of positive integers with size `2 * n`, your task is to maximize the score obtained by performing `n` operations. In each operation (1-indexed):\n\n1.  Choose two elements, `x` and `y`, from `nums`.\n2.  Add `i * gcd(x, y)` to your total score.\n3.  Remove `x` and `y` from `nums`.\n\nReturn the maximum possible score after completing all `n` operations, where `gcd(x, y)` represents the greatest common divisor of `x` and `y`.",
                "constraints": [
                    "1 <= n <= 7",
                    "nums.length == 2 * n",
                    "1 <= nums[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1,2]",
                        "output": "1",
                        "explanation": "The optimal operation is (1 * gcd(1, 2)) = 1."
                    },
                    {
                        "input": "[3,4,6,8]",
                        "output": "11",
                        "explanation": "The optimal operations are (1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11."
                    },
                    {
                        "input": "[1,2,3,4,5,6]",
                        "output": "14",
                        "explanation": "The optimal operations are (1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Find every way to split the array until n groups of 2. Brute force recursion is acceptable.",
            "Calculate the gcd of every pair and greedily multiply the largest gcds."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxScore(vector<int>& nums) {\n    const int n = nums.size() / 2;\n    // dp[i][j] := max score of i to n operations with j mask\n    dp.resize(n + 1, vector<int>(1 << n * 2));\n    return maxScore(nums, 1, 0);\n  }\n\n private:\n  vector<vector<int>> dp;\n\n  int maxScore(const vector<int>& nums, int op, int mask) {\n    if (op == dp.size())\n      return 0;\n    if (dp[op][mask] > 0)\n      return dp[op][mask];\n\n    for (int i = 0; i < nums.size(); ++i)\n      for (int j = i + 1; j < nums.size(); ++j) {\n        const int chosenMask = 1 << i | 1 << j;\n        if ((mask & chosenMask) == 0)\n          dp[op][mask] =\n              max(dp[op][mask], op * __gcd(nums[i], nums[j]) +\n                                    maxScore(nums, op + 1, mask | chosenMask));\n      }\n\n    return dp[op][mask];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxScore(int[] nums) {\n    final int n = nums.length / 2;\n    dp = new int[n + 1][1 << (n * 2)];\n    return maxScore(nums, 1, 0);\n  }\n\n  private int[][] dp;\n\n  private int maxScore(int[] nums, int op, int mask) {\n    if (op == dp.length)\n      return 0;\n    if (dp[op][mask] > 0)\n      return dp[op][mask];\n\n    for (int i = 0; i < nums.length; ++i)\n      for (int j = i + 1; j < nums.length; ++j) {\n        final int chosenMask = 1 << i | 1 << j;\n        if ((mask & chosenMask) == 0)\n          dp[op][mask] = Math.max(dp[op][mask], op * gcd(nums[i], nums[j]) +\n                                                    maxScore(nums, op + 1, mask | chosenMask));\n      }\n\n    return dp[op][mask];\n  }\n\n  private int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxScore(self, nums: List[int]) -> int:\n    n = len(nums) // 2\n\n    @functools.lru_cache(None)\n    def dp(op: int, mask: int) -> int:\n      if op == n + 1:\n        return 0\n\n      res = 0\n\n      for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n          chosenMask = 1 << i | 1 << j\n          if (mask & chosenMask) == 0:\n            res = max(res,\n                      op * math.gcd(nums[i], nums[j]) + dp(op + 1, mask | chosenMask))\n\n      return res\n\n    return dp(1, 0)\n",
                "lang_text": "py"
            }
        }
    }
}