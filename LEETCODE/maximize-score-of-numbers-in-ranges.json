{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3281",
            "title": "Maximize Score of Numbers in Ranges",
            "titleSlug": "maximize-score-of-numbers-in-ranges",
            "content": "<p>You are given an array of integers <code>start</code> and an integer <code>d</code>, representing <code>n</code> intervals <code>[start[i], start[i] + d]</code>.</p>\n\n<p>You are asked to choose <code>n</code> integers where the <code>i<sup>th</sup></code> integer must belong to the <code>i<sup>th</sup></code> interval. The <strong>score</strong> of the chosen integers is defined as the <strong>minimum</strong> absolute difference between any two integers that have been chosen.</p>\n\n<p>Return the <strong>maximum</strong> <em>possible score</em> of the chosen integers.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">start = [6,0,3], d = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum possible score can be obtained by choosing integers: 8, 0, and 4. The score of these chosen integers is <code>min(|8 - 0|, |8 - 4|, |0 - 4|)</code> which equals 4.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">start = [2,6,13,13], d = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The maximum possible score can be obtained by choosing integers: 2, 7, 13, and 18. The score of these chosen integers is <code>min(|2 - 7|, |2 - 13|, |2 - 18|, |7 - 13|, |7 - 18|, |13 - 18|)</code> which equals 5.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= start.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= start[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= d &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 183,
            "dislikes": 32,
            "similarQuestions": "[{\"title\": \"Find K-th Smallest Pair Distance\", \"titleSlug\": \"find-k-th-smallest-pair-distance\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"19K\", \"totalSubmission\": \"56.1K\", \"totalAcceptedRaw\": 18999, \"totalSubmissionRaw\": 56094, \"acRate\": \"33.9%\"}",
            "hints": [
                "Can we use binary search here?",
                "Suppose that the answer is <code>x</code>. We can find a valid configuration of integers by sorting <code>start</code>, the first integer should be <code>start[0]</code>, then each subsequent integer should be the smallest one in <code>[start[i], start[i] + d]</code> that is greater than <code>last_chosen_value + x</code>.",
                "Binary search over <code>x</code>"
            ],
            "rephrased": {
                "body": "Given an array of integers `start` and an integer `d`, you are given `n` intervals of the form `[start[i], start[i] + d]`.  Your task is to select one integer from each interval. The score is defined as the minimum absolute difference between any two of the chosen integers.  Find the maximum possible score that can be achieved.",
                "constraints": [
                    "2 <= start.length <= 10^5",
                    "0 <= start[i] <= 10^9",
                    "0 <= d <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "start = [6,0,3], d = 2",
                        "output": "4",
                        "explanation": "The integers 8, 0, and 4 can be chosen from the intervals [6, 8], [0, 2], and [3, 5] respectively. The minimum absolute difference between these chosen integers (min(|8 - 0|, |8 - 4|, |0 - 4|)) is 4. This is the maximum possible score."
                    },
                    {
                        "input": "start = [2,6,13,13], d = 5",
                        "output": "5",
                        "explanation": "The integers 2, 7, 13, and 18 can be chosen from the intervals [2, 7], [6, 11], [13, 18], and [13, 18] respectively. The minimum absolute difference between these chosen integers is 5."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "find-k-th-smallest-pair-distance",
                "title": "Find K-th Smallest Pair Distance",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we use binary search here?",
            "Suppose that the answer is <code>x</code>. We can find a valid configuration of integers by sorting <code>start</code>, the first integer should be <code>start[0]</code>, then each subsequent integer should be the smallest one in <code>[start[i], start[i] + d]</code> that is greater than <code>last_chosen_value + x</code>.",
            "Binary search over <code>x</code>"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxPossibleScore(vector<int>& start, int d) {\n    ranges::sort(start);\n\n    long l = 0;\n    long r = (start.back() + d) - start.front() + 1;\n\n    while (l < r) {\n      const long m = (l + r) / 2;\n      if (isPossible(start, d, m))\n        l = m + 1;\n      else\n        r = m;\n    }\n\n    return l - 1;\n  }\n\n private:\n  bool isPossible(const vector<int>& start, int d, long m) {\n    int lastPick = start[0];\n    for (int i = 1; i < start.size(); ++i) {\n      if (lastPick + m > start[i] + d)\n        return false;\n      lastPick = max(lastPick + m, static_cast<long>(start[i]));\n    }\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxPossibleScore(int[] start, int d) {\n    Arrays.sort(start);\n\n    long l = 0;\n    long r = (start[start.length - 1] + d) - start[0] + 1;\n\n    while (l < r) {\n      final long m = (l + r) / 2;\n      if (isPossible(start, d, m))\n        l = m + 1;\n      else\n        r = m;\n    }\n\n    return (int) (l - 1);\n  }\n\n  private boolean isPossible(int[] start, int d, long m) {\n    long lastPick = start[0];\n    for (int i = 1; i < start.length; ++i) {\n      if (lastPick + m > start[i] + d)\n        return false;\n      lastPick = Math.max(lastPick + m, (long) start[i]);\n    }\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxPossibleScore(self, start: list[int], d: int) -> int:\n    def isPossible(m: int) -> bool:\n      lastPick = start[0]\n      for i in range(1, len(start)):\n        if lastPick + m > start[i] + d:\n          return False\n        lastPick = max(lastPick + m, start[i])\n      return True\n\n    start.sort()\n\n    maxScore = (start[-1] + d) - start[0] + 1\n    l = bisect.bisect_left(range(maxScore), True,\n                           key=lambda m: not isPossible(m))\n    return l - 1\n",
                "lang_text": "py"
            }
        }
    }
}