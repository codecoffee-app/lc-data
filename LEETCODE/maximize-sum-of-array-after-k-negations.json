{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1005",
            "title": "Maximize Sum Of Array After K Negations",
            "titleSlug": "maximize-sum-of-array-after-k-negations",
            "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, modify the array in the following way:</p>\n\n<ul>\n\t<li>choose an index <code>i</code> and replace <code>nums[i]</code> with <code>-nums[i]</code>.</li>\n</ul>\n\n<p>You should apply this process exactly <code>k</code> times. You may choose the same index <code>i</code> multiple times.</p>\n\n<p>Return <em>the largest possible sum of the array after modifying it in this way</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,3], k = 1\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Choose index 1 and nums becomes [4,-2,3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,-1,0,2], k = 3\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Choose indices (1, 2, 2) and nums becomes [3,1,0,2].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,-3,-1,5,-4], k = 2\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> Choose indices (1, 4) and nums becomes [2,3,-1,5,4].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1484,
            "dislikes": 106,
            "similarQuestions": "[{\"title\": \"Find Subsequence of Length K With the Largest Sum\", \"titleSlug\": \"find-subsequence-of-length-k-with-the-largest-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"82.6K\", \"totalSubmission\": \"162.4K\", \"totalAcceptedRaw\": 82583, \"totalSubmissionRaw\": 162384, \"acRate\": \"50.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `k`, you are allowed to modify the array by repeatedly choosing an index `i` and replacing `nums[i]` with `-nums[i]`. You must apply this modification process exactly `k` times, and you can choose the same index multiple times.\n\nReturn the largest possible sum of the array after applying these modifications.",
                "constraints": [
                    "1 <= nums.length <= 10^4",
                    "-100 <= nums[i] <= 100",
                    "1 <= k <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "nums = [4,2,3], k = 1",
                        "output": "5",
                        "explanation": "By negating the element at index 1, the array becomes [4, -2, 3], resulting in a sum of 5, which is the maximum possible sum after one modification."
                    },
                    {
                        "input": "nums = [3,-1,0,2], k = 3",
                        "output": "6",
                        "explanation": "By negating the element at index 1 once and the element at index 2 twice, the array becomes [3, 1, 0, 2], resulting in a sum of 6.  Negating the -1 gives 1, and negating the 0 twice doesn't change it."
                    },
                    {
                        "input": "nums = [2,-3,-1,5,-4], k = 2",
                        "output": "13",
                        "explanation": "By negating the elements at index 1 and 4, the array becomes [2, 3, -1, 5, 4], resulting in a sum of 13. This is the maximum sum achievable with two negations."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "find-subsequence-of-length-k-with-the-largest-sum",
                "title": "Find Subsequence of Length K With the Largest Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int largestSumAfterKNegations(vector<int>& nums, int k) {\n    std::ranges::sort(nums);\n\n    for (int i = 0; i < nums.size(); ++i) {\n      if (nums[i] > 0 || k == 0)\n        break;\n      nums[i] = -nums[i];\n      --k;\n    }\n\n    return accumulate(nums.begin(), nums.end(), 0) -\n           (k % 2) * *min_element(nums.begin(), nums.end()) * 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int largestSumAfterKNegations(int[] nums, int k) {\n    Arrays.sort(nums);\n\n    for (int i = 0; i < nums.length; ++i) {\n      if (nums[i] > 0 || k == 0)\n        break;\n      nums[i] = -nums[i];\n      --k;\n    }\n\n    return Arrays.stream(nums).sum() - (k % 2) * Arrays.stream(nums).min().getAsInt() * 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:\n    nums.sort()\n\n    for i, num in enumerate(nums):\n      if num > 0 or k == 0:\n        break\n      nums[i] = -num\n      k -= 1\n\n    return sum(nums) - (k % 2) * min(nums) * 2\n",
                "lang_text": "py"
            }
        }
    }
}