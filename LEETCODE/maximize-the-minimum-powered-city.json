{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2528",
            "title": "Maximize the Minimum Powered City",
            "titleSlug": "maximize-the-minimum-powered-city",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>stations</code> of length <code>n</code>, where <code>stations[i]</code> represents the number of power stations in the <code>i<sup>th</sup></code> city.</p>\n\n<p>Each power station can provide power to every city in a fixed <strong>range</strong>. In other words, if the range is denoted by <code>r</code>, then a power station at city <code>i</code> can provide power to all cities <code>j</code> such that <code>|i - j| &lt;= r</code> and <code>0 &lt;= i, j &lt;= n - 1</code>.</p>\n\n<ul>\n\t<li>Note that <code>|x|</code> denotes <strong>absolute</strong> value. For example, <code>|7 - 5| = 2</code> and <code>|3 - 10| = 7</code>.</li>\n</ul>\n\n<p>The <strong>power</strong> of a city is the total number of power stations it is being provided power from.</p>\n\n<p>The government has sanctioned building <code>k</code> more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.</p>\n\n<p>Given the two integers <code>r</code> and <code>k</code>, return <em>the <strong>maximum possible minimum power</strong> of a city, if the additional power stations are built optimally.</em></p>\n\n<p><strong>Note</strong> that you can build the <code>k</code> power stations in multiple cities.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stations = [1,2,4,5,0], r = 1, k = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nOne of the optimal ways is to install both the power stations at city 1. \nSo stations will become [1,4,4,5,0].\n- City 0 is provided by 1 + 4 = 5 power stations.\n- City 1 is provided by 1 + 4 + 4 = 9 power stations.\n- City 2 is provided by 4 + 4 + 5 = 13 power stations.\n- City 3 is provided by 5 + 4 = 9 power stations.\n- City 4 is provided by 5 + 0 = 5 power stations.\nSo the minimum power of a city is 5.\nSince it is not possible to obtain a larger power, we return 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stations = [4,4,4,4], r = 0, k = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nIt can be proved that we cannot make the minimum power of a city greater than 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == stations.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= stations[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= r&nbsp;&lt;= n - 1</code></li>\n\t<li><code>0 &lt;= k&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 433,
            "dislikes": 7,
            "similarQuestions": "[{\"title\": \"Maximum Number of Tasks You Can Assign\", \"titleSlug\": \"maximum-number-of-tasks-you-can-assign\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.1K\", \"totalSubmission\": \"19.1K\", \"totalAcceptedRaw\": 6099, \"totalSubmissionRaw\": 19066, \"acRate\": \"32.0%\"}",
            "hints": [
                "Pre calculate the number of stations on each city using Line Sweep.",
                "Use binary search to maximize the minimum."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed integer array `stations` of length `n`, where `stations[i]` represents the number of power stations in the `i<sup>th</sup>` city.\n\nEach power station can provide power to every city within a fixed range `r`. A power station at city `i` provides power to all cities `j` such that `|i - j| <= r` and `0 <= i, j <= n - 1`.\n\nThe power of a city is the total number of power stations providing it power.\n\nThe government will build `k` additional power stations. These stations can be built in any city and have the same range `r` as the existing ones.\n\nGiven `r` and `k`, determine the maximum possible minimum power of a city, achieved by optimally placing the additional power stations. You can build multiple stations in the same city.",
                "constraints": [
                    "n == stations.length",
                    "1 <= n <= 10<sup>5</sup>",
                    "0 <= stations[i] <= 10<sup>5</sup>",
                    "0 <= r <= n - 1",
                    "0 <= k <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "stations = [1,2,4,5,0], r = 1, k = 2",
                        "output": "5",
                        "explanation": "One optimal strategy is to install both new power stations at city 1, resulting in `stations = [1, 4, 4, 5, 0]`. The power provided to each city is then:\n- City 0: 1 + 4 = 5\n- City 1: 1 + 4 + 4 = 9\n- City 2: 4 + 4 + 5 = 13\n- City 3: 5 + 4 = 9\n- City 4: 5 + 0 = 5\nThe minimum power across all cities is 5.  It's not possible to achieve a higher minimum power."
                    },
                    {
                        "input": "stations = [4,4,4,4], r = 0, k = 3",
                        "output": "4",
                        "explanation": "It can be proven that the minimum power of a city cannot be greater than 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-tasks-you-can-assign",
                "title": "Maximum Number of Tasks You Can Assign",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Pre calculate the number of stations on each city using Line Sweep.",
            "Use binary search to maximize the minimum."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maxPower(vector<int>& stations, int r, int k) {\n    long long left = *min_element(stations.begin(), stations.end());\n    long long right = accumulate(stations.begin(), stations.end(), 0LL) + k + 1;\n\n    while (left < right) {\n      const long long mid = (left + right) / 2;\n      if (check(stations, r, k, mid))\n        left = mid + 1;\n      else\n        right = mid;\n    }\n\n    return left - 1;\n  }\n\n private:\n  // Returns true if each city can have at least `minPower`.\n  bool check(vector<int> stations, int r, int additionalStations,\n             long long minPower) {\n    const int n = stations.size();\n    // Initilaize `power` as 0-th city's power - stations[r].\n    long long power = accumulate(stations.begin(), stations.begin() + r, 0LL);\n\n    for (int i = 0; i < n; ++i) {\n      if (i + r < n)\n        power += stations[i + r];  // `power` = sum(stations[i - r..i + r]).\n      if (power < minPower) {\n        const long long requiredPower = minPower - power;\n        if (requiredPower > additionalStations)  // No enough stations to plant.\n          return false;\n        // Greedily plant `requiredPower` power stations in the farthest place\n        // to cover as many cities as possible.\n        stations[min(n - 1, i + r)] += requiredPower;\n        additionalStations -= requiredPower;\n        power += requiredPower;\n      }\n      if (i - r >= 0)\n        power -= stations[i - r];\n    }\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maxPower(int[] stations, int r, int k) {\n    long left = Arrays.stream(stations).min().getAsInt();\n    long right = Arrays.stream(stations).asLongStream().sum() + k + 1;\n\n    while (left < right) {\n      final long mid = (left + right) / 2;\n      if (check(stations.clone(), r, k, mid))\n        left = mid + 1;\n      else\n        right = mid;\n    }\n\n    return left - 1;\n  }\n\n  // Returns true if each city can have at least `minPower`.\n  boolean check(int[] stations, int r, int additionalStations, long minPower) {\n    final int n = stations.length;\n    // Initilaize `power` as 0-th city's power - stations[r].\n    long power = 0;\n\n    for (int i = 0; i < r; ++i)\n      power += stations[i];\n\n    for (int i = 0; i < n; ++i) {\n      if (i + r < n)\n        power += stations[i + r]; // `power` = sum(stations[i - r..i + r]).\n      if (power < minPower) {\n        final long requiredPower = minPower - power;\n        if (requiredPower > additionalStations) // No enough stations to plant.\n          return false;\n        // Greedily plant `requiredPower` power stations in the farthest place\n        // to cover as many cities as possible.\n        stations[Math.min(n - 1, i + r)] += requiredPower;\n        additionalStations -= requiredPower;\n        power += requiredPower;\n      }\n      if (i - r >= 0)\n        power -= stations[i - r];\n    }\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxPower(self, stations: List[int], r: int, k: int) -> int:\n    n = len(stations)\n    left = min(stations)\n    right = sum(stations) + k + 1\n\n    # Returns true if each city can have at least `minPower`.\n    def check(stations: List[int], additionalStations: int, minPower: int) -> bool:\n      # Initilaize `power` as 0-th city's power - stations[r].\n      power = sum(stations[:r])\n\n      for i in range(n):\n        if i + r < n:\n          power += stations[i + r]  # `power` = sum(stations[i - r..i + r]).\n        if power < minPower:\n          requiredPower = minPower - power\n          if requiredPower > additionalStations:  # No enough stations to plant.\n            return False\n          # Greedily plant `requiredPower` power stations in the farthest place\n          # to cover as many cities as possible.\n          stations[min(n - 1, i + r)] += requiredPower\n          additionalStations -= requiredPower\n          power += requiredPower\n        if i - r >= 0:\n          power -= stations[i - r]\n\n      return True\n\n    while left < right:\n      mid = (left + right) // 2\n      if check(stations.copy(), k, mid):\n        left = mid + 1\n      else:\n        right = mid\n\n    return left - 1\n",
                "lang_text": "py"
            }
        }
    }
}