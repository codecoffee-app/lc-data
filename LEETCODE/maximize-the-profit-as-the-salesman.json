{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2830",
            "title": "Maximize the Profit as the Salesman",
            "titleSlug": "maximize-the-profit-as-the-salesman",
            "content": "<p>You are given an integer <code>n</code> representing the number of houses on a number line, numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>Additionally, you are given a 2D integer array <code>offers</code> where <code>offers[i] = [start<sub>i</sub>, end<sub>i</sub>, gold<sub>i</sub>]</code>, indicating that <code>i<sup>th</sup></code> buyer wants to buy all the houses from <code>start<sub>i</sub></code> to <code>end<sub>i</sub></code> for <code>gold<sub>i</sub></code> amount of gold.</p>\n\n<p>As a salesman, your goal is to <strong>maximize</strong> your earnings by strategically selecting and selling houses to buyers.</p>\n\n<p>Return <em>the maximum amount of gold you can earn</em>.</p>\n\n<p><strong>Note</strong> that different buyers can&#39;t buy the same house, and some houses may remain unsold.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,0] to 1<sup>st</sup> buyer for 1 gold and houses in the range [1,3] to 3<sup>rd</sup> buyer for 2 golds.\nIt can be proven that 3 is the maximum amount of gold we can achieve.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,2] to 2<sup>nd</sup> buyer for 10 golds.\nIt can be proven that 10 is the maximum amount of gold we can achieve.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= offers.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>offers[i].length == 3</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= gold<sub>i</sub> &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 654,
            "dislikes": 21,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.2K\", \"totalSubmission\": \"58.7K\", \"totalAcceptedRaw\": 21222, \"totalSubmissionRaw\": 58658, \"acRate\": \"36.2%\"}",
            "hints": [
                "<div class=\"_1l1MA\">The intended solution uses a dynamic programming approach to solve the problem.</div>",
                "<div class=\"_1l1MA\">Sort the array offers by <code>start<sub>i</sub></code>.</div>",
                "<div class=\"_1l1MA\">Let <code>dp[i]</code> = { the maximum amount of gold if the sold houses are in the range <code>[0 \u2026 i]</code> }.</div>"
            ],
            "rephrased": {
                "body": "You are given an integer `n` representing the number of houses on a number line, numbered from 0 to `n - 1`.  You are also given a 2D integer array `offers` where `offers[i] = [start_i, end_i, gold_i]`, indicating that the i-th buyer wants to buy all the houses from `start_i` to `end_i` for `gold_i` amount of gold. Your goal is to maximize your earnings by strategically selecting offers (buying houses) such that no house is sold to multiple buyers. Return the maximum amount of gold you can earn.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= offers.length <= 10^5",
                    "offers[i].length == 3",
                    "0 <= start_i <= end_i <= n - 1",
                    "1 <= gold_i <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]",
                        "output": "3",
                        "explanation": "We have 5 houses and 3 offers.  One optimal solution is to accept the first offer (houses [0,0] for 1 gold) and the third offer (houses [1,3] for 2 gold).  This yields a total of 1 + 2 = 3 gold. No other combination of offers yields a higher gold amount."
                    },
                    {
                        "input": "n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]",
                        "output": "10",
                        "explanation": "We have 5 houses and 3 offers. The optimal solution is to accept the second offer (houses [0,2] for 10 gold), which provides the maximum earnings. Accepting any other offer will result in lower earning."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<div class=\"_1l1MA\">The intended solution uses a dynamic programming approach to solve the problem.</div>",
            "<div class=\"_1l1MA\">Sort the array offers by <code>start<sub>i</sub></code>.</div>",
            "<div class=\"_1l1MA\">Let <code>dp[i]</code> = { the maximum amount of gold if the sold houses are in the range <code>[0 \u2026 i]</code> }.</div>"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ]
    }
}