{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2202",
            "title": "Maximize the Topmost Element After K Moves",
            "titleSlug": "maximize-the-topmost-element-after-k-moves",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> representing the contents of a <b>pile</b>, where <code>nums[0]</code> is the topmost element of the pile.</p>\n\n<p>In one move, you can perform <strong>either</strong> of the following:</p>\n\n<ul>\n\t<li>If the pile is not empty, <strong>remove</strong> the topmost element of the pile.</li>\n\t<li>If there are one or more removed elements, <strong>add</strong> any one of them back onto the pile. This element becomes the new topmost element.</li>\n</ul>\n\n<p>You are also given an integer <code>k</code>, which denotes the total number of moves to be made.</p>\n\n<p>Return <em>the <strong>maximum value</strong> of the topmost element of the pile possible after <strong>exactly</strong></em> <code>k</code> <em>moves</em>. In case it is not possible to obtain a non-empty pile after <code>k</code> moves, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,2,4,0,6], k = 4\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nOne of the ways we can end with 5 at the top of the pile after 4 moves is as follows:\n- Step 1: Remove the topmost element = 5. The pile becomes [2,2,4,0,6].\n- Step 2: Remove the topmost element = 2. The pile becomes [2,4,0,6].\n- Step 3: Remove the topmost element = 2. The pile becomes [4,0,6].\n- Step 4: Add 5 back onto the pile. The pile becomes [5,4,0,6].\nNote that this is not the only way to end with 5 at the top of the pile. It can be shown that 5 is the largest answer possible after 4 moves.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2], k = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> \nIn the first move, our only option is to pop the topmost element of the pile.\nSince it is not possible to obtain a non-empty pile after one move, we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 586,
            "dislikes": 314,
            "similarQuestions": "[{\"title\": \"Gas Station\", \"titleSlug\": \"gas-station\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.4K\", \"totalSubmission\": \"114.8K\", \"totalAcceptedRaw\": 26354, \"totalSubmissionRaw\": 114821, \"acRate\": \"23.0%\"}",
            "hints": [
                "For each index i, how can we check if nums[i] can be present at the top of the pile or not after k moves?",
                "For which conditions will we end up with an empty pile?"
            ],
            "rephrased": {
                "body": "You are given a 0-indexed integer array `nums` representing a pile of integers, where `nums[0]` is the topmost element. You can perform two types of moves:\n\n1.  Remove the topmost element if the pile is not empty.\n2.  Add any previously removed element back to the top of the pile.\n\nGiven an integer `k` representing the total number of moves, determine the maximum possible value of the topmost element after exactly `k` moves. If it's impossible to have a non-empty pile after `k` moves, return -1.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "0 <= nums[i], k <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [5,2,2,4,0,6], k = 4",
                        "output": "5",
                        "explanation": "One way to achieve 5 at the top after 4 moves:\n\n1. Remove 5 (pile: [2,2,4,0,6]).\n2. Remove 2 (pile: [2,4,0,6]).\n3. Remove 2 (pile: [4,0,6]).\n4. Add 5 back (pile: [5,4,0,6]).\n\n5 is the largest possible value achievable."
                    },
                    {
                        "input": "nums = [2], k = 1",
                        "output": "-1",
                        "explanation": "The only move is to remove 2, resulting in an empty pile.  It's impossible to have a non-empty pile after one move."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "gas-station",
                "title": "Gas Station",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each index i, how can we check if nums[i] can be present at the top of the pile or not after k moves?",
            "For which conditions will we end up with an empty pile?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumTop(vector<int>& nums, int k) {\n    const int n = nums.size();\n    // After taking k elements, if we're left something, then we return nums[k];\n    // Otherwise return -1\n    if (k == 0 || k == 1)\n      return n == k ? -1 : nums[k];\n    // (remove then add) even times\n    if (n == 1)\n      return k & 1 ? -1 : nums[0];\n    // Take min(n, k - 1) elements and put back the largest one\n    const int max = *max_element(nums.begin(), nums.begin() + min(n, k - 1));\n    if (k >= n)\n      return max;\n    return std::max(max, nums[k]);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumTop(int[] nums, int k) {\n    final int n = nums.length;\n    // After taking k elements, if we're left something, then we return nums[k]; otherwise return -1\n    if (k == 0 || k == 1)\n      return n == k ? -1 : nums[k];\n    // (remove then add) even times\n    if (n == 1)\n      return k % 2 == 0 ? nums[0] : -1;\n    // Take min(n, k - 1) elements and put back the largest one\n    final int max = firstKMax(nums, k - 1);\n    if (k >= n)\n      return max;\n    return Math.max(max, nums[k]);\n  }\n\n  private int firstKMax(int[] nums, int k) {\n    int max = 0;\n    for (int i = 0; i < nums.length && i < k; ++i)\n      max = Math.max(max, nums[i]);\n    return max;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumTop(self, nums: List[int], k: int) -> int:\n    n = len(nums)\n    # After taking k elements, if we're left something, then we return nums[k]\n    # Otherwise return -1\n    if k == 0 or k == 1:\n      return -1 if n == k else nums[k]\n    # (remove then add) even times\n    if n == 1:\n      return -1 if k & 1 else nums[0]\n    # Take min(n, k - 1) elements and put back the largest one\n    maxi = max(nums[:min(n, k - 1)])\n    if k >= n:\n      return maxi\n    return max(maxi, nums[k])\n",
                "lang_text": "py"
            }
        }
    }
}