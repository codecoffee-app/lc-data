{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2836",
            "title": "Maximize Value of Function in a Ball Passing Game",
            "titleSlug": "maximize-value-of-function-in-a-ball-passing-game",
            "content": "<p>You are given an integer array <code>receiver</code> of length <code>n</code> and an integer <code>k</code>. <code>n</code> players are playing a ball-passing game.</p>\n\n<p>You choose the starting player, <code>i</code>. The game proceeds as follows: player <code>i</code> passes the ball to player <code>receiver[i]</code>, who then passes it to <code>receiver[receiver[i]]</code>, and so on, for <code>k</code> passes in total. The game&#39;s score is the sum of the indices of the players who touched the ball, including repetitions, i.e. <code>i + receiver[i] + receiver[receiver[i]] + ... + receiver<sup>(k)</sup>[i]</code>.</p>\n\n<p>Return&nbsp;the <strong>maximum</strong>&nbsp;possible score.</p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li><code>receiver</code> may contain duplicates.</li>\n\t<li><code>receiver[i]</code> may be equal to <code>i</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">receiver = [2,0,1], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Starting with player <code>i = 2</code> the initial score is 2:</p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Pass</th>\n\t\t\t<th>Sender Index</th>\n\t\t\t<th>Receiver Index</th>\n\t\t\t<th>Score</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>0</td>\n\t\t\t<td>2</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t\t<td>6</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">receiver = [1,1,1,2,3], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Starting with player <code>i = 4</code> the initial score is 4:</p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Pass</th>\n\t\t\t<th>Sender Index</th>\n\t\t\t<th>Receiver Index</th>\n\t\t\t<th>Score</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>4</td>\n\t\t\t<td>3</td>\n\t\t\t<td>7</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t\t<td>2</td>\n\t\t\t<td>9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t\t<td>10</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= receiver.length == n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= receiver[i] &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>10</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 287,
            "dislikes": 91,
            "similarQuestions": "[{\"title\": \"Jump Game VI\", \"titleSlug\": \"jump-game-vi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.5K\", \"totalSubmission\": \"14.7K\", \"totalAcceptedRaw\": 4528, \"totalSubmissionRaw\": 14748, \"acRate\": \"30.7%\"}",
            "hints": [
                "<div class=\"_1l1MA\">We can solve the problem using binary lifting.</div>",
                "<div class=\"_1l1MA\">For each player with id <code>x</code> and for every <code>i</code> in the range <code>[0, ceil(log<sub>2</sub>k)]</code>, we can determine the last receiver's id and compute the sum of player ids who receive the ball after <code>2<sup>i</sup></code> passes, starting from <code>x</code>.</div>",
                "<div class=\"_1l1MA\">Let <code>last_receiver[x][i] =</code> the last receiver's id after <code>2<sup>i</sup></code> passes, and <code>sum[x][i] =</code> the sum of player ids who receive the ball after <code>2<sup>i</sup></code> passes. For all <code>x</code> in the range <code>[0, n - 1]</code>, <code>last_receiver[x][0] = receiver[x]</code>, and <code>sum[x][0] = receiver[x]</code>.</div>",
                "<div class=\"_1l1MA\">Then for <code>i</code> in range <code>[1, ceil(log<sub>2</sub>k)]</code>,\u00a0<code>last_receiver[x][i] = last_receiver[last_receiver[x][i - 1]][i - 1]</code> and <code>sum[x][i] = sum[x][i - 1] + sum[last_receiver[x][i - 1]][i - 1]</code>, for all <code>x</code> in the range <code>[0, n - 1]</code>.</div>",
                "<div class=\"_1l1MA\">Starting from each player id <code>x</code>, we can now go through the powers of <code>2</code> in the binary representation of <code>k</code> and make jumps corresponding to each power, using the pre-computed values, to compute <code>f(x)</code>.</div>",
                "<div class=\"_1l1MA\">The answer is the maximum <code>f(x)</code> from each player id.</div>"
            ],
            "rephrased": {
                "body": "Given an integer array `receiver` of length `n` and an integer `k`, simulate a ball-passing game. In this game, `n` players pass a ball. You choose a starting player `i`. The player `i` passes the ball to `receiver[i]`, who then passes it to `receiver[receiver[i]]`, and so on, for a total of `k` passes. The score is the sum of the indices of all players who touched the ball during the `k` passes, including the starting player and any repetitions.  Determine the maximum possible score achievable by choosing the optimal starting player.",
                "constraints": [
                    "1 <= receiver.length == n <= 10^5",
                    "0 <= receiver[i] <= n - 1",
                    "1 <= k <= 10^10"
                ],
                "testcases": [
                    {
                        "input": "receiver = [2,0,1], k = 4",
                        "output": "6",
                        "explanation": "Starting with player i = 2, the sequence of players is 2 -> 1 -> 0 -> 2 -> 1.  The score is 2 + 1 + 0 + 2 + 1 = 6."
                    },
                    {
                        "input": "receiver = [1,1,1,2,3], k = 3",
                        "output": "10",
                        "explanation": "Starting with player i = 4, the sequence of players is 4 -> 3 -> 2 -> 1. The score is 4 + 3 + 2 + 1 = 10."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-vi",
                "title": "Jump Game VI",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "<div class=\"_1l1MA\">We can solve the problem using binary lifting.</div>",
            "<div class=\"_1l1MA\">For each player with id <code>x</code> and for every <code>i</code> in the range <code>[0, ceil(log<sub>2</sub>k)]</code>, we can determine the last receiver's id and compute the sum of player ids who receive the ball after <code>2<sup>i</sup></code> passes, starting from <code>x</code>.</div>",
            "<div class=\"_1l1MA\">Let <code>last_receiver[x][i] =</code> the last receiver's id after <code>2<sup>i</sup></code> passes, and <code>sum[x][i] =</code> the sum of player ids who receive the ball after <code>2<sup>i</sup></code> passes. For all <code>x</code> in the range <code>[0, n - 1]</code>, <code>last_receiver[x][0] = receiver[x]</code>, and <code>sum[x][0] = receiver[x]</code>.</div>",
            "<div class=\"_1l1MA\">Then for <code>i</code> in range <code>[1, ceil(log<sub>2</sub>k)]</code>,\u00a0<code>last_receiver[x][i] = last_receiver[last_receiver[x][i - 1]][i - 1]</code> and <code>sum[x][i] = sum[x][i - 1] + sum[last_receiver[x][i - 1]][i - 1]</code>, for all <code>x</code> in the range <code>[0, n - 1]</code>.</div>",
            "<div class=\"_1l1MA\">Starting from each player id <code>x</code>, we can now go through the powers of <code>2</code> in the binary representation of <code>k</code> and make jumps corresponding to each power, using the pre-computed values, to compute <code>f(x)</code>.</div>",
            "<div class=\"_1l1MA\">The answer is the maximum <code>f(x)</code> from each player id.</div>"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long getMaxFunctionValue(vector<int>& receiver, long long k) {\n    const int n = receiver.size();\n    const int m = log2(k) + 1;\n    long long ans = 0;\n    // jump[i][j] := node you reach after jumping 2^j steps from i\n    vector<vector<int>> jump(n, vector<int>(m));\n    // sum[i][j] := sum of first 2^j nodes you reach when jumping from i\n    vector<vector<long long>> sum(n, vector<long long>(m));\n\n    for (int i = 0; i < n; ++i) {\n      jump[i][0] = receiver[i];\n      sum[i][0] = receiver[i];\n    }\n\n    // Binary lifting.\n    for (int j = 1; j < m; ++j)\n      for (int i = 0; i < n; ++i) {\n        const int midNode = jump[i][j - 1];\n        //   node you reach after jumping 2^j steps from i\n        // = node you reach after jumping 2^(j - 1) steps from i\n        // + node you reach after jumping another 2^(j - 1) steps\n        jump[i][j] = jump[midNode][j - 1];\n        //   sum of first 2^j nodes you reach when jumping from i\n        // = sum of first 2^(j - 1) nodes you reach when jumping from i\n        // + sum of another 2^(j - 1) nodes you reach\n        sum[i][j] = sum[i][j - 1] + sum[midNode][j - 1];\n      }\n\n    for (int i = 0; i < n; ++i) {\n      long long currSum = i;\n      int currPos = i;\n      for (int j = 0; j < m; ++j)\n        if ((k >> j & 1) == 1) {\n          currSum += sum[currPos][j];\n          currPos = jump[currPos][j];\n        }\n      ans = max(ans, currSum);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long getMaxFunctionValue(List<Integer> receiver, long k) {\n    final int n = receiver.size();\n    final int m = (int) (Math.log(k) / Math.log(2)) + 1;\n    long ans = 0;\n    // jump[i][j] := node you reach after jumping 2^j steps from i\n    int[][] jump = new int[n][m];\n    // sum[i][j] := sum of first 2^j nodes you reach when jumping from i\n    long[][] sum = new long[n][m];\n\n    for (int i = 0; i < n; ++i) {\n      jump[i][0] = receiver.get(i);\n      sum[i][0] = receiver.get(i);\n    }\n\n    // Binary lifting.\n    for (int j = 1; j < m; ++j)\n      for (int i = 0; i < n; ++i) {\n        final int midNode = jump[i][j - 1];\n        //   node you reach after jumping 2^j steps from i\n        // = node you reach after jumping 2^(j - 1) steps from i\n        // + node you reach after jumping another 2^(j - 1) steps\n        jump[i][j] = jump[midNode][j - 1];\n        //   sum of first 2^j nodes you reach when jumping from i\n        // = sum of first 2^(j - 1) nodes you reach when jumping from i\n        // + sum of another 2^(j - 1) nodes you reach\n        sum[i][j] = sum[i][j - 1] + sum[midNode][j - 1];\n      }\n\n    for (int i = 0; i < n; ++i) {\n      long currSum = i;\n      int currPos = i;\n      for (int j = 0; j < m; ++j)\n        if ((k >> j & 1) == 1) {\n          currSum += sum[currPos][j];\n          currPos = jump[currPos][j];\n        }\n      ans = Math.max(ans, currSum);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getMaxFunctionValue(self, receiver: List[int], k: int) -> int:\n    n = len(receiver)\n    m = int(math.log2(k)) + 1\n    ans = 0\n    # jump[i][j] := node you reach after jumping 2^j steps from i\n    jump = [[0] * m for _ in range(n)]\n    # summ[i][j] := sum of first 2^j nodes you reach when jumping from i\n    summ = [[0] * m for _ in range(n)]\n\n    for i in range(n):\n      jump[i][0] = receiver[i]\n      summ[i][0] = receiver[i]\n\n    # Binary lifting.\n    for j in range(1, m):\n      for i in range(n):\n        midNode = jump[i][j - 1]\n        #   node you reach after jumping 2^j steps from i\n        # = node you reach after jumping 2^(j - 1) steps from i\n        # + node you reach after jumping another 2^(j - 1) steps\n        jump[i][j] = jump[midNode][j - 1]\n        #   sum of first 2^j nodes you reach when jumping from i\n        # = sum of first 2^(j - 1) nodes you reach when jumping from i\n        # + sum of another 2^(j - 1) nodes you reach\n        summ[i][j] = summ[i][j - 1] + summ[midNode][j - 1]\n\n    for i in range(n):\n      currSum = i\n      currPos = i\n      for j in range(m):\n        if (k >> j) & 1 == 1:\n          currSum += summ[currPos][j]\n          currPos = jump[currPos][j]\n      ans = max(ans, currSum)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}