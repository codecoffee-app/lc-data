{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2172",
            "title": "Maximum AND Sum of Array",
            "titleSlug": "maximum-and-sum-of-array",
            "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code> and an integer <code>numSlots</code> such that <code>2 * numSlots &gt;= n</code>. There are <code>numSlots</code> slots numbered from <code>1</code> to <code>numSlots</code>.</p>\n\n<p>You have to place all <code>n</code> integers into the slots such that each slot contains at <strong>most</strong> two numbers. The <strong>AND sum</strong> of a given placement is the sum of the <strong>bitwise</strong> <code>AND</code> of every number with its respective slot number.</p>\n\n<ul>\n\t<li>For example, the <strong>AND sum</strong> of placing the numbers <code>[1, 3]</code> into slot <u><code>1</code></u> and <code>[4, 6]</code> into slot <u><code>2</code></u> is equal to <code>(1 AND <u>1</u>) + (3 AND <u>1</u>) + (4 AND <u>2</u>) + (6 AND <u>2</u>) = 1 + 1 + 0 + 2 = 4</code>.</li>\n</ul>\n\n<p>Return <em>the maximum possible <strong>AND sum</strong> of </em><code>nums</code><em> given </em><code>numSlots</code><em> slots.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6], numSlots = 3\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> One possible placement is [1, 4] into slot <u>1</u>, [2, 6] into slot <u>2</u>, and [3, 5] into slot <u>3</u>. \nThis gives the maximum AND sum of (1 AND <u>1</u>) + (4 AND <u>1</u>) + (2 AND <u>2</u>) + (6 AND <u>2</u>) + (3 AND <u>3</u>) + (5 AND <u>3</u>) = 1 + 0 + 2 + 2 + 3 + 1 = 9.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,10,4,7,1], numSlots = 9\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> One possible placement is [1, 1] into slot <u>1</u>, [3] into slot <u>3</u>, [4] into slot <u>4</u>, [7] into slot <u>7</u>, and [10] into slot <u>9</u>.\nThis gives the maximum AND sum of (1 AND <u>1</u>) + (1 AND <u>1</u>) + (3 AND <u>3</u>) + (4 AND <u>4</u>) + (7 AND <u>7</u>) + (10 AND <u>9</u>) = 1 + 1 + 3 + 4 + 7 + 8 = 24.\nNote that slots 2, 5, 6, and 8 are empty which is permitted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= numSlots &lt;= 9</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * numSlots</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 15</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 487,
            "dislikes": 27,
            "similarQuestions": "[{\"title\": \"Minimum XOR Sum of Two Arrays\", \"titleSlug\": \"minimum-xor-sum-of-two-arrays\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.7K\", \"totalSubmission\": \"26.1K\", \"totalAcceptedRaw\": 12696, \"totalSubmissionRaw\": 26107, \"acRate\": \"48.6%\"}",
            "hints": [
                "Can you think of a dynamic programming solution to this problem?",
                "Can you use a bitmask to represent the state of the slots?"
            ],
            "rephrased": {
                "body": "Given an integer array `nums` of length `n` and an integer `numSlots` (where `2 * numSlots >= n`), you have `numSlots` slots numbered from 1 to `numSlots`. Place all `n` integers into the slots, with each slot containing at most two numbers. The AND sum of a placement is the sum of the bitwise AND of every number with its respective slot number.  Return the maximum possible AND sum of `nums` given `numSlots` slots.",
                "constraints": [
                    "n == nums.length",
                    "1 <= numSlots <= 9",
                    "1 <= n <= 2 * numSlots",
                    "1 <= nums[i] <= 15"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3,4,5,6], numSlots = 3",
                        "output": "9",
                        "explanation": "One optimal arrangement involves placing [1, 4] into slot 1, [2, 6] into slot 2, and [3, 5] into slot 3. The resulting AND sum is (1 AND 1) + (4 AND 1) + (2 AND 2) + (6 AND 2) + (3 AND 3) + (5 AND 3) = 1 + 0 + 2 + 2 + 3 + 1 = 9."
                    },
                    {
                        "input": "nums = [1,3,10,4,7,1], numSlots = 9",
                        "output": "24",
                        "explanation": "An optimal arrangement places [1, 1] into slot 1, [3] into slot 3, [4] into slot 4, [7] into slot 7, and [10] into slot 9. This gives an AND sum of (1 AND 1) + (1 AND 1) + (3 AND 3) + (4 AND 4) + (7 AND 7) + (10 AND 9) = 1 + 1 + 3 + 4 + 7 + 8 = 24.  Note that slots 2, 5, 6, and 8 are unused, which is allowed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-xor-sum-of-two-arrays",
                "title": "Minimum XOR Sum of Two Arrays",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can you think of a dynamic programming solution to this problem?",
            "Can you use a bitmask to represent the state of the slots?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumANDSum(vector<int>& nums, int numSlots) {\n    const int n = 2 * numSlots;\n    const int nSelected = 1 << n;\n    // dp[i] := max value given mask representing the nums selected\n    vector<int> dp(nSelected);\n\n    nums.resize(n);\n\n    for (int mask = 1; mask < nSelected; ++mask) {\n      const int selected = __builtin_popcount(mask);\n      const int slot = (selected + 1) / 2;  // (1, 2) -> 1, (3, 4) -> 2\n      for (int i = 0; i < n; ++i)\n        if (mask >> i & 1)  // Assign nums[i] to `slot`-th slot\n          dp[mask] = max(dp[mask], dp[mask ^ 1 << i] + (slot & nums[i]));\n    }\n\n    return dp.back();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumANDSum(int[] nums, int numSlots) {\n    final int n = 2 * numSlots;\n    final int nSelected = 1 << n;\n    // dp[i] := max value given mask representing the nums selected\n    int[] dp = new int[nSelected];\n    int[] A = Arrays.copyOf(nums, n);\n\n    for (int mask = 1; mask < nSelected; ++mask) {\n      final int selected = Integer.bitCount(mask);\n      final int slot = (selected + 1) / 2; // (1, 2) -> 1, (3, 4) -> 2\n      for (int i = 0; i < n; ++i)\n        if ((mask >> i & 1) == 1) // Assign A[i] to `slot`-th slot\n          dp[mask] = Math.max(dp[mask], dp[mask ^ 1 << i] + (slot & A[i]));\n    }\n\n    return dp[nSelected - 1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumANDSum(self, nums: List[int], numSlots: int) -> int:\n    n = 2 * numSlots\n    nSelected = 1 << n\n    # dp[i] := max value given mask representing the nums selected\n    dp = [0] * nSelected\n\n    nums += [0] * (n - len(nums))\n\n    for mask in range(1, nSelected):\n      selected = mask.bit_count()\n      slot = (selected + 1) // 2  # (1, 2) -> 1, (3, 4) -> 2\n      for i, num in enumerate(nums):\n        if mask >> i & 1:  # Assign nums[i] to `slot`-th slot\n          dp[mask] = max(dp[mask], dp[mask ^ 1 << i] + (slot & num))\n\n    return dp[-1]\n",
                "lang_text": "py"
            }
        }
    }
}