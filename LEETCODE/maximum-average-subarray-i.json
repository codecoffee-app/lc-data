{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "643",
            "title": "Maximum Average Subarray I",
            "titleSlug": "maximum-average-subarray-i",
            "content": "<p>You are given an integer array <code>nums</code> consisting of <code>n</code> elements, and an integer <code>k</code>.</p>\n\n<p>Find a contiguous subarray whose <strong>length is equal to</strong> <code>k</code> that has the maximum average value and return <em>this value</em>. Any answer with a calculation error less than <code>10<sup>-5</sup></code> will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,12,-5,-6,50,3], k = 4\n<strong>Output:</strong> 12.75000\n<strong>Explanation:</strong> Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5], k = 1\n<strong>Output:</strong> 5.00000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3229,
            "dislikes": 268,
            "similarQuestions": "[{\"title\": \"Maximum Average Subarray II\", \"titleSlug\": \"maximum-average-subarray-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"K Radius Subarray Averages\", \"titleSlug\": \"k-radius-subarray-averages\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"353.7K\", \"totalSubmission\": \"819.2K\", \"totalAcceptedRaw\": 353680, \"totalSubmissionRaw\": 819243, \"acRate\": \"43.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` of size `n` and an integer `k`, find the contiguous subarray of length `k` with the maximum average value. Return this maximum average value. The answer should be within 10<sup>-5</sup> of the actual value.",
                "constraints": [
                    "n == nums.length",
                    "1 <= k <= n <= 10<sup>5</sup>",
                    "-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,12,-5,-6,50,3], k = 4",
                        "output": "12.75000",
                        "explanation": "The subarray [12, -5, -6, 50] has the maximum average: (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75"
                    },
                    {
                        "input": "nums = [5], k = 1",
                        "output": "5.00000",
                        "explanation": "The subarray [5] has the maximum average: 5 / 1 = 5"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-average-subarray-ii",
                "title": "Maximum Average Subarray II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "k-radius-subarray-averages",
                "title": "K Radius Subarray Averages",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  double findMaxAverage(vector<int>& nums, int k) {\n    double sum = accumulate(nums.begin(), nums.begin() + k, 0);\n    double ans = sum;\n\n    for (int i = k; i < nums.size(); ++i) {\n      sum += nums[i] - nums[i - k];\n      ans = max(ans, sum);\n    }\n\n    return ans / k;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public double findMaxAverage(int[] nums, int k) {\n    double sum = 0;\n    for (int i = 0; i < k; ++i)\n      sum += nums[i];\n    double ans = sum;\n\n    for (int i = k; i < nums.length; ++i) {\n      sum += nums[i] - nums[i - k];\n      ans = Math.max(ans, sum);\n    }\n\n    return ans / k;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMaxAverage(self, nums: List[int], k: int) -> float:\n    summ = sum(nums[:k])\n    ans = summ\n\n    for i in range(k, len(nums)):\n      summ += nums[i] - nums[i - k]\n      ans = max(ans, summ)\n\n    return ans / k\n",
                "lang_text": "py"
            }
        }
    }
}