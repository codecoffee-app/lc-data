{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2279",
            "title": "Maximum Bags With Full Capacity of Rocks",
            "titleSlug": "maximum-bags-with-full-capacity-of-rocks",
            "content": "<p>You have <code>n</code> bags numbered from <code>0</code> to <code>n - 1</code>. You are given two <strong>0-indexed</strong> integer arrays <code>capacity</code> and <code>rocks</code>. The <code>i<sup>th</sup></code> bag can hold a maximum of <code>capacity[i]</code> rocks and currently contains <code>rocks[i]</code> rocks. You are also given an integer <code>additionalRocks</code>, the number of additional rocks you can place in <strong>any</strong> of the bags.</p>\n\n<p>Return<em> the <strong>maximum</strong> number of bags that could have full capacity after placing the additional rocks in some bags.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nPlace 1 rock in bag 0 and 1 rock in bag 1.\nThe number of rocks in each bag are now [2,3,4,4].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that there may be other ways of placing the rocks that result in an answer of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nPlace 8 rocks in bag 0 and 2 rocks in bag 2.\nThe number of rocks in each bag are now [10,2,2].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that we did not use all of the additional rocks.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == capacity.length == rocks.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= capacity[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= rocks[i] &lt;= capacity[i]</code></li>\n\t<li><code>1 &lt;= additionalRocks &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1621,
            "dislikes": 68,
            "similarQuestions": "[{\"title\": \"Capacity To Ship Packages Within D Days\", \"titleSlug\": \"capacity-to-ship-packages-within-d-days\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Units on a Truck\", \"titleSlug\": \"maximum-units-on-a-truck\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"90.6K\", \"totalSubmission\": \"133.9K\", \"totalAcceptedRaw\": 90592, \"totalSubmissionRaw\": 133927, \"acRate\": \"67.6%\"}",
            "hints": [
                "Which bag should you fill completely first?",
                "Can you think of a greedy solution?"
            ],
            "rephrased": {
                "body": "You have `n` bags numbered from `0` to `n - 1`. Given two 0-indexed integer arrays `capacity` and `rocks`, where `capacity[i]` is the maximum number of rocks the i-th bag can hold, and `rocks[i]` is the current number of rocks in the i-th bag.  You are also given an integer `additionalRocks`, representing the number of additional rocks you can distribute among the bags. Determine the maximum number of bags that can be completely filled to their capacity after placing the additional rocks.",
                "constraints": [
                    "n == capacity.length == rocks.length",
                    "1 <= n <= 5 * 10^4",
                    "1 <= capacity[i] <= 10^9",
                    "0 <= rocks[i] <= capacity[i]",
                    "1 <= additionalRocks <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2",
                        "output": "3",
                        "explanation": "By placing 1 rock in bag 0 and 1 rock in bag 1, the rock counts become [2, 3, 4, 4].  Bags 0, 1, and 2 now have full capacity, resulting in a count of 3."
                    },
                    {
                        "input": "capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100",
                        "output": "3",
                        "explanation": "By placing 8 rocks in bag 0 and 2 rocks in bag 2, the rock counts become [10, 2, 2]. Bags 0, 1, and 2 now have full capacity, resulting in a count of 3.  Note that not all additional rocks need to be used."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "capacity-to-ship-packages-within-d-days",
                "title": "Capacity To Ship Packages Within D Days",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-units-on-a-truck",
                "title": "Maximum Units on a Truck",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Which bag should you fill completely first?",
            "Can you think of a greedy solution?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumBags(vector<int>& capacity, vector<int>& rocks,\n                  int additionalRocks) {\n    const int n = capacity.size();\n    vector<int> diff(n);\n\n    for (int i = 0; i < n; ++i)\n      diff[i] = capacity[i] - rocks[i];\n\n    std::ranges::sort(diff);\n\n    for (int i = 0; i < n; ++i) {\n      if (diff[i] > additionalRocks)\n        return i;\n      additionalRocks -= diff[i];\n    }\n\n    return n;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumBags(int[] capacity, int[] rocks, int additionalRocks) {\n    final int n = capacity.length;\n    int[] diff = new int[n];\n\n    for (int i = 0; i < n; ++i)\n      diff[i] = capacity[i] - rocks[i];\n\n    Arrays.sort(diff);\n\n    for (int i = 0; i < n; ++i) {\n      if (diff[i] > additionalRocks)\n        return i;\n      additionalRocks -= diff[i];\n    }\n\n    return n;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumBags(self, capacity: List[int], rocks: List[int], additionalRocks: int) -> int:\n    for i, d in enumerate(sorted([c - r for c, r in zip(capacity, rocks)])):\n      if d > additionalRocks:\n        return i\n      additionalRocks -= d\n    return len(capacity)\n",
                "lang_text": "py"
            }
        }
    }
}