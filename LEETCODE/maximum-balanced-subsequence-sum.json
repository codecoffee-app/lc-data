{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2926",
            "title": "Maximum Balanced Subsequence Sum",
            "titleSlug": "maximum-balanced-subsequence-sum",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>.</p>\n\n<p>A <strong>subsequence</strong> of <code>nums</code> having length <code>k</code> and consisting of <strong>indices</strong> <code>i<sub>0</sub>&nbsp;&lt;&nbsp;i<sub>1</sub> &lt;&nbsp;... &lt; i<sub>k-1</sub></code> is <strong>balanced</strong> if the following holds:</p>\n\n<ul>\n\t<li><code>nums[i<sub>j</sub>] - nums[i<sub>j-1</sub>] &gt;= i<sub>j</sub> - i<sub>j-1</sub></code>, for every <code>j</code> in the range <code>[1, k - 1]</code>.</li>\n</ul>\n\n<p>A <strong>subsequence</strong> of <code>nums</code> having length <code>1</code> is considered balanced.</p>\n\n<p>Return <em>an integer denoting the <strong>maximum</strong> possible <strong>sum of elements</strong> in a <strong>balanced</strong> subsequence of </em><code>nums</code>.</p>\n\n<p>A <strong>subsequence</strong> of an array is a new <strong>non-empty</strong> array that is formed from the original array by deleting some (<strong>possibly none</strong>) of the elements without disturbing the relative positions of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3,5,6]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected.\nnums[2] - nums[0] &gt;= 2 - 0.\nnums[3] - nums[2] &gt;= 3 - 2.\nHence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\nThe subsequence consisting of indices 1, 2, and 3 is also valid.\nIt can be shown that it is not possible to get a balanced subsequence with a sum greater than 14.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,-1,-3,8]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected.\nnums[3] - nums[0] &gt;= 3 - 0.\nHence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\nIt can be shown that it is not possible to get a balanced subsequence with a sum greater than 13.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,-1]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> In this example, the subsequence [-1] can be selected.\nIt is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 184,
            "dislikes": 8,
            "similarQuestions": "[{\"title\": \"Number of Pairs Satisfying Inequality\", \"titleSlug\": \"number-of-pairs-satisfying-inequality\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.3K\", \"totalSubmission\": \"22.5K\", \"totalAcceptedRaw\": 5338, \"totalSubmissionRaw\": 22462, \"acRate\": \"23.8%\"}",
            "hints": [
                "Let <code>dp[x]</code> represent the maximum sum of a balanced subsequence ending at <code>x</code>.",
                "Rewriting the formula <code>nums[i<sub>j</sub>] - nums[i<sub>j-1</sub>] >= i<sub>j</sub> - i<sub>j-1</sub></code> gives <code>nums[i<sub>j</sub>] - i<sub>j</sub> >= nums[i<sub>j-1</sub>] - i<sub>j-1</sub></code>.",
                "So, for some index <code>x</code>, we need to find an index <code>y</code>, <code>y < x</code>, such that <code>dp[x] = nums[x] + dp[y]</code> is maximized, and <code>nums[x] - x >= nums[y] - y</code>.",
                "There are many ways to achieve this. One method involves sorting the values of <code>nums[x] - x</code> for all indices <code>x</code> and using a segment/Fenwick tree with coordinate compression.",
                "Hence, using a dictionary or map, let's call it <code>dict</code>, where <code>dict[nums[x] - x]</code> represents the position of the value, <code>nums[x] - x</code>, in the segment tree.",
                "The tree is initialized with zeros initially.",
                "For indices <code>x</code> in order from <code>[0, n - 1]</code>, <code>dp[x] = max(nums[x]</code>, <code>nums[x]</code> + the maximum query from the tree in the range <code>[0, dict[nums[x] - x]])</code>, and if <code>dp[x]</code> is greater than the value in the tree at position <code>dict[nums[x] - x]</code>, we update the value in the tree.",
                "The answer to the problem is the maximum value in <code>dp</code>."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums`, a subsequence of length `k` with indices `i_0 < i_1 < ... < i_{k-1}` is considered **balanced** if `nums[i_j] - nums[i_{j-1}] >= i_j - i_{j-1}` for every `j` in the range `[1, k - 1]`. A subsequence of length 1 is also balanced.\n\nYour task is to find the maximum possible sum of elements within a balanced subsequence of `nums`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-10^9 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[3,3,5,6]",
                        "output": "14",
                        "explanation": "The subsequence [3, 5, 6] at indices 0, 2, and 3 is balanced because 5 - 3 >= 2 - 0 and 6 - 5 >= 3 - 2. The sum 3 + 5 + 6 = 14 is the maximum possible sum from any balanced subsequence."
                    },
                    {
                        "input": "[5,-1,-3,8]",
                        "output": "13",
                        "explanation": "The subsequence [5, 8] at indices 0 and 3 is balanced because 8 - 5 >= 3 - 0. The sum 5 + 8 = 13 is the maximum possible sum from any balanced subsequence."
                    },
                    {
                        "input": "[-2,-1]",
                        "output": "-1",
                        "explanation": "The subsequence [-1] is balanced (any subsequence of length 1 is balanced), and its sum is -1, which is the maximum possible in this case."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-pairs-satisfying-inequality",
                "title": "Number of Pairs Satisfying Inequality",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>dp[x]</code> represent the maximum sum of a balanced subsequence ending at <code>x</code>.",
            "Rewriting the formula <code>nums[i<sub>j</sub>] - nums[i<sub>j-1</sub>] >= i<sub>j</sub> - i<sub>j-1</sub></code> gives <code>nums[i<sub>j</sub>] - i<sub>j</sub> >= nums[i<sub>j-1</sub>] - i<sub>j-1</sub></code>.",
            "So, for some index <code>x</code>, we need to find an index <code>y</code>, <code>y < x</code>, such that <code>dp[x] = nums[x] + dp[y]</code> is maximized, and <code>nums[x] - x >= nums[y] - y</code>.",
            "There are many ways to achieve this. One method involves sorting the values of <code>nums[x] - x</code> for all indices <code>x</code> and using a segment/Fenwick tree with coordinate compression.",
            "Hence, using a dictionary or map, let's call it <code>dict</code>, where <code>dict[nums[x] - x]</code> represents the position of the value, <code>nums[x] - x</code>, in the segment tree.",
            "The tree is initialized with zeros initially.",
            "For indices <code>x</code> in order from <code>[0, n - 1]</code>, <code>dp[x] = max(nums[x]</code>, <code>nums[x]</code> + the maximum query from the tree in the range <code>[0, dict[nums[x] - x]])</code>, and if <code>dp[x]</code> is greater than the value in the tree at position <code>dict[nums[x] - x]</code>, we update the value in the tree.",
            "The answer to the problem is the maximum value in <code>dp</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "template <typename T>\nclass FenwickTree {\n public:\n  FenwickTree(int n) : vals(n + 1) {}\n\n  // Updates the maximum the sum of subsequence ending in (i - 1) with `val`.\n  void update(int i, T val) {\n    while (i < vals.size()) {\n      vals[i] = max(vals[i], val);\n      i += lowbit(i);\n    }\n  }\n\n  // Returns the maximum the sum of subsequence ending in (i - 1).\n  T get(int i) const {\n    T res = 0;\n    while (i > 0) {\n      res = max(res, vals[i]);\n      i -= lowbit(i);\n    }\n    return res;\n  }\n\n private:\n  vector<T> vals;\n\n  static int lowbit(int i) {\n    return i & -i;\n  }\n};\n\nclass Solution {\n public:\n  long long maxBalancedSubsequenceSum(vector<int>& nums) {\n    // Let's define maxSum[i] := subsequence with the maximum sum ending in i\n    // By observation:\n    //     nums[i] - nums[j] >= i - j\n    //  => nums[i] - i >= nums[j] - j\n    //  So, if nums[i] - i >= nums[j] - j, where i > j,\n    //  maxSum[i] = max(maxSum[i], maxSum[j] + nums[i])\n    long long ans = LLONG_MIN;\n    FenwickTree<long long> tree(nums.size());\n\n    for (const auto& [_, i] : getPairs(nums)) {\n      const long long subseqSum = tree.get(i) + nums[i];\n      tree.update(i + 1, subseqSum);\n      ans = max(ans, subseqSum);\n    }\n\n    return ans;\n  }\n\n private:\n  vector<pair<int, int>> getPairs(const vector<int>& nums) {\n    vector<pair<int, int>> pairs;\n    for (int i = 0; i < nums.size(); ++i)\n      pairs.emplace_back(nums[i] - i, i);\n    ranges::sort(pairs);\n    return pairs;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class FenwickTree {\n  public FenwickTree(int n) {\n    vals = new long[n + 1];\n  }\n\n  // Updates the maximum the sum of subsequence ending in (i - 1) with `val`.\n  public void update(int i, long val) {\n    while (i < vals.length) {\n      vals[i] = Math.max(vals[i], val);\n      i += lowbit(i);\n    }\n  }\n\n  // Returns the maximum the sum of subsequence ending in (i - 1).\n  public long get(int i) {\n    long res = 0;\n    while (i > 0) {\n      res = Math.max(res, vals[i]);\n      i -= lowbit(i);\n    }\n    return res;\n  }\n\n  private long[] vals;\n\n  private static int lowbit(int i) {\n    return i & -i;\n  }\n}\n\nclass Solution {\n  public long maxBalancedSubsequenceSum(int[] nums) {\n    // Let's define maxSum[i] := subsequence with the maximum sum ending in i\n    // By observation:\n    //     nums[i] - nums[j] >= i - j\n    //  => nums[i] - i >= nums[j] - j\n    //  So, if nums[i] - i >= nums[j] - j, where i > j,\n    //  maxSum[i] = max(maxSum[i], maxSum[j] + nums[i])\n    long ans = Long.MIN_VALUE;\n    FenwickTree tree = new FenwickTree(nums.length);\n\n    for (Pair<Integer, Integer> pair : getPairs(nums)) {\n      final int i = pair.getValue();\n      final long subseqSum = tree.get(i) + nums[i];\n      tree.update(i + 1, subseqSum);\n      ans = Math.max(ans, subseqSum);\n    }\n\n    return ans;\n  }\n\n  private List<Pair<Integer, Integer>> getPairs(int[] nums) {\n    List<Pair<Integer, Integer>> pairs = new ArrayList<>();\n    for (int i = 0; i < nums.length; ++i)\n      pairs.add(new Pair<>(nums[i] - i, i));\n    pairs.sort((p1, p2) -> p1.getKey() - p2.getKey());\n    return pairs;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class FenwickTree:\n  def __init__(self, n: int):\n    self.vals = [0] * (n + 1)\n\n  def update(self, i: int, val: int) -> None:\n    \"\"\"Updates the maximum the sum of subsequence ending in (i - 1) with `val`.\"\"\"\n    while i < len(self.vals):\n      self.vals[i] = max(self.vals[i], val)\n      i += FenwickTree.lowbit(i)\n\n  def get(self, i: int) -> int:\n    \"\"\"Returns the maximum the sum of subsequence ending in (i - 1).\"\"\"\n    res = 0\n    while i > 0:\n      res = max(res, self.vals[i])\n      i -= FenwickTree.lowbit(i)\n    return res\n\n  @staticmethod\n  def lowbit(i: int) -> int:\n    return i & -i\n\n\nclass Solution:\n  def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n    # Let's define maxSum[i] := subsequence with the maximum sum ending in i\n    # By observation:\n    #    nums[i] - nums[j] >= i - j\n    # => nums[i] - i >= nums[j] - j\n    # So, if nums[i] - i >= nums[j] - j, where i > j,\n    # maxSum[i] = max(maxSum[i], maxSum[j] + nums[i])\n    ans = -math.inf\n    tree = FenwickTree(len(nums))\n\n    for _, i in sorted([(num - i, i) for i, num in enumerate(nums)]):\n      subseqSum = tree.get(i) + nums[i]\n      tree.update(i + 1, subseqSum)\n      ans = max(ans, subseqSum)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}