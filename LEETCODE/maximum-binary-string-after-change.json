{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1702",
            "title": "Maximum Binary String After Change",
            "titleSlug": "maximum-binary-string-after-change",
            "content": "<p>You are given a binary string <code>binary</code> consisting of only <code>0</code>&#39;s or <code>1</code>&#39;s. You can apply each of the following operations any number of times:</p>\n\n<ul>\n\t<li>Operation 1: If the number contains the substring <code>&quot;00&quot;</code>, you can replace it with <code>&quot;10&quot;</code>.\n\n\t<ul>\n\t\t<li>For example, <code>&quot;<u>00</u>010&quot; -&gt; &quot;<u>10</u>010</code>&quot;</li>\n\t</ul>\n\t</li>\n\t<li>Operation 2: If the number contains the substring <code>&quot;10&quot;</code>, you can replace it with <code>&quot;01&quot;</code>.\n\t<ul>\n\t\t<li>For example, <code>&quot;000<u>10</u>&quot; -&gt; &quot;000<u>01</u>&quot;</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p><em>Return the <strong>maximum binary string</strong> you can obtain after any number of operations. Binary string <code>x</code> is greater than binary string <code>y</code> if <code>x</code>&#39;s decimal representation is greater than <code>y</code>&#39;s decimal representation.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> binary = &quot;000110&quot;\n<strong>Output:</strong> &quot;111011&quot;\n<strong>Explanation:</strong> A valid transformation sequence can be:\n&quot;0001<u>10</u>&quot; -&gt; &quot;0001<u>01</u>&quot; \n&quot;<u>00</u>0101&quot; -&gt; &quot;<u>10</u>0101&quot; \n&quot;1<u>00</u>101&quot; -&gt; &quot;1<u>10</u>101&quot; \n&quot;110<u>10</u>1&quot; -&gt; &quot;110<u>01</u>1&quot; \n&quot;11<u>00</u>11&quot; -&gt; &quot;11<u>10</u>11&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> binary = &quot;01&quot;\n<strong>Output:</strong> &quot;01&quot;\n<strong>Explanation:</strong>&nbsp;&quot;01&quot; cannot be transformed any further.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= binary.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>binary</code> consist of <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 477,
            "dislikes": 49,
            "similarQuestions": "[{\"title\": \"Longest Binary Subsequence Less Than or Equal to K\", \"titleSlug\": \"longest-binary-subsequence-less-than-or-equal-to-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.1K\", \"totalSubmission\": \"25.9K\", \"totalAcceptedRaw\": 12071, \"totalSubmissionRaw\": 25923, \"acRate\": \"46.6%\"}",
            "hints": [
                "Note that with the operations, you can always make the string only contain at most 1 zero."
            ],
            "rephrased": {
                "body": "You are given a binary string `binary` consisting of only `0`s or `1`s. You can perform the following operations any number of times to maximize the binary string:\n\n*   Operation 1: Replace the substring `\"00\"` with `\"10\"`.\n*   Operation 2: Replace the substring `\"10\"` with `\"01\"`.\n\nReturn the maximum binary string you can obtain after applying these operations.",
                "constraints": [
                    "1 <= binary.length <= 10^5",
                    "binary consists of '0' and '1'."
                ],
                "testcases": [
                    {
                        "input": "\"000110\"",
                        "output": "\"111011\"",
                        "explanation": "By applying the operations, we can transform \"000110\" to \"111011\".  One possible sequence of transformations is given in the original problem statement."
                    },
                    {
                        "input": "\"01\"",
                        "output": "\"01\"",
                        "explanation": "\"01\" cannot be transformed any further as neither \"00\" nor \"10\" are present as substrings."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-binary-subsequence-less-than-or-equal-to-k",
                "title": "Longest Binary Subsequence Less Than or Equal to K",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Note that with the operations, you can always make the string only contain at most 1 zero."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ]
    }
}