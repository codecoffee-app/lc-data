{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "998",
            "title": "Maximum Binary Tree II",
            "titleSlug": "maximum-binary-tree-ii",
            "content": "<p>A <strong>maximum tree</strong> is a tree where every node has a value greater than any other value in its subtree.</p>\n\n<p>You are given the <code>root</code> of a maximum binary tree and an integer <code>val</code>.</p>\n\n<p>Just as in the <a href=\"https://leetcode.com/problems/maximum-binary-tree/\" target=\"_blank\">previous problem</a>, the given tree was constructed from a list <code>a</code> (<code>root = Construct(a)</code>) recursively with the following <code>Construct(a)</code> routine:</p>\n\n<ul>\n\t<li>If <code>a</code> is empty, return <code>null</code>.</li>\n\t<li>Otherwise, let <code>a[i]</code> be the largest element of <code>a</code>. Create a <code>root</code> node with the value <code>a[i]</code>.</li>\n\t<li>The left child of <code>root</code> will be <code>Construct([a[0], a[1], ..., a[i - 1]])</code>.</li>\n\t<li>The right child of <code>root</code> will be <code>Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]])</code>.</li>\n\t<li>Return <code>root</code>.</li>\n</ul>\n\n<p>Note that we were not given <code>a</code> directly, only a root node <code>root = Construct(a)</code>.</p>\n\n<p>Suppose <code>b</code> is a copy of <code>a</code> with the value <code>val</code> appended to it. It is guaranteed that <code>b</code> has unique values.</p>\n\n<p>Return <code>Construct(b)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/09/maxtree1.JPG\" style=\"width: 376px; height: 235px;\" />\n<pre>\n<strong>Input:</strong> root = [4,1,3,null,null,2], val = 5\n<strong>Output:</strong> [5,4,null,1,3,null,null,2]\n<strong>Explanation:</strong> a = [1,4,2,3], b = [1,4,2,3,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/09/maxtree21.JPG\" style=\"width: 358px; height: 156px;\" />\n<pre>\n<strong>Input:</strong> root = [5,2,4,null,1], val = 3\n<strong>Output:</strong> [5,2,4,null,1,null,3]\n<strong>Explanation:</strong> a = [2,1,5,4], b = [2,1,5,4,3]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/09/maxtree3.JPG\" style=\"width: 404px; height: 180px;\" />\n<pre>\n<strong>Input:</strong> root = [5,2,3,null,1], val = 4\n<strong>Output:</strong> [5,2,4,null,1,3]\n<strong>Explanation:</strong> a = [2,1,5,3], b = [2,1,5,3,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 100</code></li>\n\t<li>All the values of the tree are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= val &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 508,
            "dislikes": 772,
            "similarQuestions": "[{\"title\": \"Maximum Binary Tree\", \"titleSlug\": \"maximum-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"34.1K\", \"totalSubmission\": \"49.8K\", \"totalAcceptedRaw\": 34128, \"totalSubmissionRaw\": 49845, \"acRate\": \"68.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a maximum binary tree and an integer `val`, construct a new maximum binary tree by appending `val` to the underlying array that generated the original tree and then applying the maximum binary tree construction algorithm.  A maximum binary tree is defined as a tree where each node's value is greater than all values in its subtree. The original tree was constructed using the following recursive process:\n\n1. If the array is empty, return `null`.\n2.  Find the largest element in the array and create a root node with that value.\n3. Recursively construct the left subtree from the elements to the left of the largest element.\n4. Recursively construct the right subtree from the elements to the right of the largest element.\n5. Return the root node.\n\nYou are not given the original array, only the root of the constructed tree. Imagine appending `val` to this hypothetical array and then constructing a new maximum binary tree.",
                "constraints": [
                    "The number of nodes in the tree is in the range `[1, 100]`.",
                    "`1 <= Node.val <= 100`",
                    "All the values of the tree are **unique**.",
                    "`1 <= val <= 100`"
                ],
                "testcases": [
                    {
                        "input": "root = [4,1,3,null,null,2], val = 5",
                        "output": "[5,4,null,1,3,null,null,2]",
                        "explanation": "The original array might have been [1,4,2,3]. Appending 5 results in [1,4,2,3,5]. The resulting maximum binary tree has 5 as the root. 4 becomes the left child, and the remaining elements [1,2,3] recursively form the right subtree."
                    },
                    {
                        "input": "root = [5,2,4,null,1], val = 3",
                        "output": "[5,2,4,null,1,null,3]",
                        "explanation": "The original array might have been [2,1,5,4]. Appending 3 results in [2,1,5,4,3]. The resulting maximum binary tree has 5 as the root. The remaining elements [2,1] and [4,3] recursively form the left and right subtrees respectively."
                    },
                    {
                        "input": "root = [5,2,3,null,1], val = 4",
                        "output": "[5,2,4,null,1,3]",
                        "explanation": "The original array might have been [2,1,5,3]. Appending 4 results in [2,1,5,3,4]. The resulting maximum binary tree has 5 as the root. The remaining elements [2,1] and [3,4] recursively form the left and right subtrees respectively. Since 4 > 3, 4 becomes parent and 3 becomes right child of 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-binary-tree",
                "title": "Maximum Binary Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* insertIntoMaxTree(TreeNode* root, int val) {\n    if (root == nullptr)\n      return new TreeNode(val);\n    if (root->val < val)\n      return new TreeNode(val, root, nullptr);\n    root->right = insertIntoMaxTree(root->right, val);\n    return root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode insertIntoMaxTree(TreeNode root, int val) {\n    if (root == null)\n      return new TreeNode(val);\n    if (root.val < val)\n      return new TreeNode(val, root, null);\n    root.right = insertIntoMaxTree(root.right, val);\n    return root;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def insertIntoMaxTree(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n    if not root:\n      return TreeNode(val)\n    if root.val < val:\n      return TreeNode(val, root, None)\n    root.right = self.insertIntoMaxTree(root.right, val)\n    return root\n",
                "lang_text": "py"
            }
        }
    }
}