{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "654",
            "title": "Maximum Binary Tree",
            "titleSlug": "maximum-binary-tree",
            "content": "<p>You are given an integer array <code>nums</code> with no duplicates. A <strong>maximum binary tree</strong> can be built recursively from <code>nums</code> using the following algorithm:</p>\n\n<ol>\n\t<li>Create a root node whose value is the maximum value in <code>nums</code>.</li>\n\t<li>Recursively build the left subtree on the <strong>subarray prefix</strong> to the <strong>left</strong> of the maximum value.</li>\n\t<li>Recursively build the right subtree on the <strong>subarray suffix</strong> to the <strong>right</strong> of the maximum value.</li>\n</ol>\n\n<p>Return <em>the <strong>maximum binary tree</strong> built from </em><code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg\" style=\"width: 302px; height: 421px;\" />\n<pre>\n<strong>Input:</strong> nums = [3,2,1,6,0,5]\n<strong>Output:</strong> [6,3,5,null,2,0,null,null,1]\n<strong>Explanation:</strong> The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n        - Empty array, so no child.\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n            - Empty array, so no child.\n            - Only one element, so child is a node with value 1.\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n        - Only one element, so child is a node with value 0.\n        - Empty array, so no child.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/tree2.jpg\" style=\"width: 182px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> nums = [3,2,1]\n<strong>Output:</strong> [3,null,2,null,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>All integers in <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5076,
            "dislikes": 330,
            "similarQuestions": "[{\"title\": \"Maximum Binary Tree II\", \"titleSlug\": \"maximum-binary-tree-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"277.7K\", \"totalSubmission\": \"326K\", \"totalAcceptedRaw\": 277680, \"totalSubmissionRaw\": 326017, \"acRate\": \"85.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of unique integers `nums`, construct a maximum binary tree. The tree is built recursively as follows:\n\n1.  The root node's value is the maximum value in `nums`.\n2.  The left subtree is built recursively from the subarray to the left of the maximum value.\n3.  The right subtree is built recursively from the subarray to the right of the maximum value.\n\nReturn the root of the constructed maximum binary tree.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "0 <= nums[i] <= 1000",
                    "All integers in nums are unique."
                ],
                "testcases": [
                    {
                        "input": "[3,2,1,6,0,5]",
                        "output": "[6,3,5,null,2,0,null,null,1]",
                        "explanation": "The largest value in [3,2,1,6,0,5] is 6.  The left subtree is built from [3,2,1] and the right subtree from [0,5].  The largest value in [3,2,1] is 3, so it's the left child of 6.  The right subtree of 3 is built from [2,1], with 2 as the root and 1 as its right child.  For the right subtree of 6, 5 is the largest in [0,5], and 0 is its left child."
                    },
                    {
                        "input": "[3,2,1]",
                        "output": "[3,null,2,null,1]",
                        "explanation": "The largest value in [3,2,1] is 3. The left subtree is null (empty subarray). The right subtree is built from [2,1], with 2 as the root and 1 as its right child."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-binary-tree-ii",
                "title": "Maximum Binary Tree II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n    return build(nums, 0, nums.size() - 1);\n  }\n\n private:\n  TreeNode* build(const vector<int>& nums, int i, int j) {\n    if (i > j)\n      return nullptr;\n\n    const auto it = max_element(nums.begin() + i, nums.begin() + j + 1);\n    const int maxNum = *it;\n    const int maxIndex = it - nums.begin();\n\n    TreeNode* root = new TreeNode(maxNum);\n    root->left = build(nums, i, maxIndex - 1);\n    root->right = build(nums, maxIndex + 1, j);\n    return root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode constructMaximumBinaryTree(int[] nums) {\n    return build(nums, 0, nums.length - 1);\n  }\n\n  private TreeNode build(int[] nums, int i, int j) {\n    if (i > j)\n      return null;\n\n    int maxIndex = i;\n    for (int k = i + 1; k <= j; ++k)\n      if (nums[k] > nums[maxIndex])\n        maxIndex = k;\n\n    TreeNode root = new TreeNode(nums[maxIndex]);\n    root.left = build(nums, i, maxIndex - 1);\n    root.right = build(nums, maxIndex + 1, j);\n    return root;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def constructMaximumBinaryTree(self, nums: List[int]) -> Optional[TreeNode]:\n    def build(i: int, j: int) -> Optional[TreeNode]:\n      if i > j:\n        return None\n\n      maxNum = max(nums[i:j + 1])\n      maxIndex = nums.index(maxNum)\n\n      root = TreeNode(maxNum)\n      root.left = build(i, maxIndex - 1)\n      root.right = build(maxIndex + 1, j)\n      return root\n\n    return build(0, len(nums) - 1)\n",
                "lang_text": "py"
            }
        }
    }
}