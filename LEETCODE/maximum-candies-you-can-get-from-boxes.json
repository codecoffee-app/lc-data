{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1298",
            "title": "Maximum Candies You Can Get from Boxes",
            "titleSlug": "maximum-candies-you-can-get-from-boxes",
            "content": "<p>You have <code>n</code> boxes labeled from <code>0</code> to <code>n - 1</code>. You are given four arrays: <code>status</code>, <code>candies</code>, <code>keys</code>, and <code>containedBoxes</code> where:</p>\n\n<ul>\n\t<li><code>status[i]</code> is <code>1</code> if the <code>i<sup>th</sup></code> box is open and <code>0</code> if the <code>i<sup>th</sup></code> box is closed,</li>\n\t<li><code>candies[i]</code> is the number of candies in the <code>i<sup>th</sup></code> box,</li>\n\t<li><code>keys[i]</code> is a list of the labels of the boxes you can open after opening the <code>i<sup>th</sup></code> box.</li>\n\t<li><code>containedBoxes[i]</code> is a list of the boxes you found inside the <code>i<sup>th</sup></code> box.</li>\n</ul>\n\n<p>You are given an integer array <code>initialBoxes</code> that contains the labels of the boxes you initially have. You can take all the candies in <strong>any open box</strong> and you can use the keys in it to open new boxes and you also can use the boxes you find in it.</p>\n\n<p>Return <em>the maximum number of candies you can get following the rules above</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2.\nBox 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\nTotal number of candies collected = 7 + 4 + 5 = 16 candy.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys.\nThe total number of candies will be 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == status.length == candies.length == keys.length == containedBoxes.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>status[i]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= candies[i] &lt;= 1000</code></li>\n\t<li><code>0 &lt;= keys[i].length &lt;= n</code></li>\n\t<li><code>0 &lt;= keys[i][j] &lt; n</code></li>\n\t<li>All values of <code>keys[i]</code> are <strong>unique</strong>.</li>\n\t<li><code>0 &lt;= containedBoxes[i].length &lt;= n</code></li>\n\t<li><code>0 &lt;= containedBoxes[i][j] &lt; n</code></li>\n\t<li>All values of <code>containedBoxes[i]</code> are unique.</li>\n\t<li>Each box is contained in one box at most.</li>\n\t<li><code>0 &lt;= initialBoxes.length &lt;= n</code></li>\n\t<li><code>0 &lt;= initialBoxes[i] &lt; n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 325,
            "dislikes": 144,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"15K\", \"totalSubmission\": \"25.7K\", \"totalAcceptedRaw\": 14993, \"totalSubmissionRaw\": 25680, \"acRate\": \"58.4%\"}",
            "hints": [
                "Use Breadth First Search (BFS) to traverse all possible boxes you can open. Only push to the queue the boxes the you have with their keys."
            ],
            "rephrased": {
                "body": "You are given `n` boxes labeled from `0` to `n - 1`. Each box can contain candies, keys to other boxes, and other boxes.  Your goal is to maximize the number of candies you can collect, starting with a given set of initial boxes.\n\nYou are provided with the following information:\n\n*   `status[i]`:  Indicates whether box `i` is open (`1`) or closed (`0`).\n*   `candies[i]`: The number of candies in box `i`.\n*   `keys[i]`: A list of box labels that can be opened using keys found in box `i`.\n*   `containedBoxes[i]`: A list of box labels found inside box `i`.\n*   `initialBoxes`: A list of box labels that you initially possess.\n\nYou can collect candies from open boxes, use keys to open other boxes, and find more boxes inside the ones you open. Return the maximum number of candies you can obtain.",
                "constraints": [
                    "`n == status.length == candies.length == keys.length == containedBoxes.length`",
                    "`1 <= n <= 1000`",
                    "`status[i]` is either `0` or `1`.",
                    "`1 <= candies[i] <= 1000`",
                    "`0 <= keys[i].length <= n`",
                    "`0 <= keys[i][j] < n`",
                    "All values of `keys[i]` are **unique**.",
                    "`0 <= containedBoxes[i].length <= n`",
                    "`0 <= containedBoxes[i][j] < n`",
                    "All values of `containedBoxes[i]` are unique.",
                    "Each box is contained in one box at most.",
                    "`0 <= initialBoxes.length <= n`",
                    "`0 <= initialBoxes[i] < n`"
                ],
                "testcases": [
                    {
                        "input": "status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]",
                        "output": "16",
                        "explanation": "Initially, you have box 0. You find 7 candies and boxes 1 and 2. Box 1 is closed and there's no key for it initially, so box 2 is opened. Box 2 has 4 candies and a key to box 1.  Opening box 1 yields 5 candies and box 3. Box 3 remains closed due to the lack of a key. Total candies: 7 + 4 + 5 = 16."
                    },
                    {
                        "input": "status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]",
                        "output": "6",
                        "explanation": "You start with box 0. Opening it provides access to boxes 1, 2, 3, 4, and 5 along with their corresponding keys.  The total number of candies collected is 6 (1 from each box)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use Breadth First Search (BFS) to traverse all possible boxes you can open. Only push to the queue the boxes the you have with their keys."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ]
    }
}