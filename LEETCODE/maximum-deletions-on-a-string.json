{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2430",
            "title": "Maximum Deletions on a String",
            "titleSlug": "maximum-deletions-on-a-string",
            "content": "<p>You are given a string <code>s</code> consisting of only lowercase English letters. In one operation, you can:</p>\n\n<ul>\n\t<li>Delete <strong>the entire string</strong> <code>s</code>, or</li>\n\t<li>Delete the <strong>first</strong> <code>i</code> letters of <code>s</code> if the first <code>i</code> letters of <code>s</code> are <strong>equal</strong> to the following <code>i</code> letters in <code>s</code>, for any <code>i</code> in the range <code>1 &lt;= i &lt;= s.length / 2</code>.</li>\n</ul>\n\n<p>For example, if <code>s = &quot;ababc&quot;</code>, then in one operation, you could delete the first two letters of <code>s</code> to get <code>&quot;abc&quot;</code>, since the first two letters of <code>s</code> and the following two letters of <code>s</code> are both equal to <code>&quot;ab&quot;</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of operations needed to delete all of </em><code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcdabc&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n- Delete the first 3 letters (&quot;abc&quot;) since the next 3 letters are equal. Now, s = &quot;abcdabc&quot;.\n- Delete all the letters.\nWe used 2 operations so return 2. It can be proven that 2 is the maximum number of operations needed.\nNote that in the second operation we cannot delete &quot;abc&quot; again because the next occurrence of &quot;abc&quot; does not happen in the next 3 letters.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaabaab&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\n- Delete the first letter (&quot;a&quot;) since the next letter is equal. Now, s = &quot;aabaab&quot;.\n- Delete the first 3 letters (&quot;aab&quot;) since the next 3 letters are equal. Now, s = &quot;aab&quot;.\n- Delete the first letter (&quot;a&quot;) since the next letter is equal. Now, s = &quot;ab&quot;.\n- Delete all the letters.\nWe used 4 operations so return 4. It can be proven that 4 is the maximum number of operations needed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaaaa&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> In each operation, we can delete the first letter of s.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 4000</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 460,
            "dislikes": 51,
            "similarQuestions": "[{\"title\": \"Shortest Palindrome\", \"titleSlug\": \"shortest-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Happy Prefix\", \"titleSlug\": \"longest-happy-prefix\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Remove All Occurrences of a Substring\", \"titleSlug\": \"remove-all-occurrences-of-a-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.1K\", \"totalSubmission\": \"37.4K\", \"totalAcceptedRaw\": 12120, \"totalSubmissionRaw\": 37388, \"acRate\": \"32.4%\"}",
            "hints": [
                "We can use dynamic programming to find the answer. Create a 0-indexed dp array where dp[i] represents the maximum number of moves needed to remove the first i + 1 letters from s.",
                "What should we do if there is an i where it is impossible to remove the first i + 1 letters?",
                "Use a sentinel value such as -1 to show that it is impossible.",
                "How can we quickly determine if two substrings of s are equal? We can use hashing."
            ],
            "rephrased": {
                "body": "Given a string `s` consisting of only lowercase English letters, determine the maximum number of operations required to delete the entire string.  Allowed operations are:\n\n1.  Delete the entire string `s`. \n2.  Delete the first `i` letters of `s` if the first `i` letters are equal to the following `i` letters in `s`, where `1 <= i <= s.length / 2`.",
                "constraints": [
                    "1 <= s.length <= 4000",
                    "s consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "abcabcdabc",
                        "output": "2",
                        "explanation": "First, delete the first 3 letters (\"abc\") since the next 3 letters are equal. This leaves s = \"abcdabc\".  Then, delete the entire remaining string in one operation.  Therefore, 2 operations are used."
                    },
                    {
                        "input": "aaabaab",
                        "output": "4",
                        "explanation": "Operations performed are:\n1. Delete \"a\" (s = \"aabaab\")\n2. Delete \"aab\" (s = \"aab\")\n3. Delete \"a\" (s = \"ab\")\n4. Delete \"ab\""
                    },
                    {
                        "input": "aaaaa",
                        "output": "5",
                        "explanation": "In each operation, we can only delete the first letter of s because it matches the next.  We will remove one 'a' at a time until the string is empty. This takes 5 steps."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "shortest-palindrome",
                "title": "Shortest Palindrome",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-happy-prefix",
                "title": "Longest Happy Prefix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "remove-all-occurrences-of-a-substring",
                "title": "Remove All Occurrences of a Substring",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can use dynamic programming to find the answer. Create a 0-indexed dp array where dp[i] represents the maximum number of moves needed to remove the first i + 1 letters from s.",
            "What should we do if there is an i where it is impossible to remove the first i + 1 letters?",
            "Use a sentinel value such as -1 to show that it is impossible.",
            "How can we quickly determine if two substrings of s are equal? We can use hashing."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int deleteString(string s) {\n    const int n = s.length();\n    // lcs[i][j] := # of the same characters of s[i:] and s[j:]\n    vector<vector<int>> lcs(n + 1, vector<int>(n + 1));\n    // dp[i] := max # of operations needed to delete s[i:]\n    vector<int> dp(n, 1);\n\n    for (int i = n - 1; i >= 0; --i)\n      for (int j = i + 1; j < n; ++j) {\n        if (s[i] == s[j])\n          lcs[i][j] = lcs[i + 1][j + 1] + 1;\n        if (lcs[i][j] >= j - i)\n          dp[i] = max(dp[i], dp[j] + 1);\n      }\n\n    return dp[0];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int deleteString(String s) {\n    final int n = s.length();\n    // lcs[i][j] := # of the same characters of s[i:] and s[j:]\n    int[][] lcs = new int[n + 1][n + 1];\n    // dp[i] := max # of operations needed to delete s[i:]\n    int[] dp = new int[n];\n    Arrays.fill(dp, 1);\n\n    for (int i = n - 1; i >= 0; --i)\n      for (int j = i + 1; j < n; ++j) {\n        if (s.charAt(i) == s.charAt(j))\n          lcs[i][j] = lcs[i + 1][j + 1] + 1;\n        if (lcs[i][j] >= j - i)\n          dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n\n    return dp[0];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def deleteString(self, s: str) -> int:\n    n = len(s)\n    # lcs[i][j] := # of the same characters of s[i:] and s[j:]\n    lcs = [[0] * (n + 1) for _ in range(n + 1)]\n    # dp[i] := max # of operations needed to delete s[i:]\n    dp = [1] * n\n\n    for i in reversed(range(n)):\n      for j in range(i + 1, n):\n        if s[i] == s[j]:\n          lcs[i][j] = lcs[i + 1][j + 1] + 1\n        if lcs[i][j] >= j - i:\n          dp[i] = max(dp[i], dp[j] + 1)\n\n    return dp[0]\n",
                "lang_text": "py"
            }
        }
    }
}