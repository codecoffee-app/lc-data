{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2008",
            "title": "Maximum Earnings From Taxi",
            "titleSlug": "maximum-earnings-from-taxi",
            "content": "<p>There are <code>n</code> points on a road you are driving your taxi on. The <code>n</code> points on the road are labeled from <code>1</code> to <code>n</code> in the direction you are going, and you want to drive from point <code>1</code> to point <code>n</code> to make money by picking up passengers. You cannot change the direction of the taxi.</p>\n\n<p>The passengers are represented by a <strong>0-indexed</strong> 2D integer array <code>rides</code>, where <code>rides[i] = [start<sub>i</sub>, end<sub>i</sub>, tip<sub>i</sub>]</code> denotes the <code>i<sup>th</sup></code> passenger requesting a ride from point <code>start<sub>i</sub></code> to point <code>end<sub>i</sub></code> who is willing to give a <code>tip<sub>i</sub></code> dollar tip.</p>\n\n<p>For<strong> each </strong>passenger <code>i</code> you pick up, you <strong>earn</strong> <code>end<sub>i</sub> - start<sub>i</sub> + tip<sub>i</sub></code> dollars. You may only drive <b>at most one </b>passenger at a time.</p>\n\n<p>Given <code>n</code> and <code>rides</code>, return <em>the <strong>maximum</strong> number of dollars you can earn by picking up the passengers optimally.</em></p>\n\n<p><strong>Note:</strong> You may drop off a passenger and pick up a different passenger at the same point.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, rides = [<u>[2,5,4]</u>,[1,5,1]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 20, rides = [[1,6,1],<u>[3,10,2]</u>,<u>[10,12,3]</u>,[11,12,2],[12,15,2],<u>[13,18,1]</u>]\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> We will pick up the following passengers:\n- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.\n- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.\n- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.\nWe earn 9 + 5 + 6 = 20 dollars in total.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= rides.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>rides[i].length == 3</code></li>\n\t<li><code>1 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= n</code></li>\n\t<li><code>1 &lt;= tip<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1189,
            "dislikes": 22,
            "similarQuestions": "[{\"title\": \"Maximum Profit in Job Scheduling\", \"titleSlug\": \"maximum-profit-in-job-scheduling\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Events That Can Be Attended\", \"titleSlug\": \"maximum-number-of-events-that-can-be-attended\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Events That Can Be Attended II\", \"titleSlug\": \"maximum-number-of-events-that-can-be-attended-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.3K\", \"totalSubmission\": \"62.1K\", \"totalAcceptedRaw\": 27261, \"totalSubmissionRaw\": 62118, \"acRate\": \"43.9%\"}",
            "hints": [
                "Can we sort the array to help us solve the problem?",
                "We can use dynamic programming to keep track of the maximum at each position."
            ],
            "rephrased": {
                "body": "You are driving a taxi on a road with `n` points, labeled from 1 to `n`. You want to maximize your earnings by picking up passengers between these points. Given a list of passenger ride requests, where each ride `rides[i] = [start_i, end_i, tip_i]` indicates a passenger willing to pay `end_i - start_i + tip_i` dollars for a ride from point `start_i` to `end_i`, determine the maximum amount of money you can earn. You can only carry one passenger at a time. You can drop off one passenger and pick up another at the same location.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= rides.length <= 3 * 10^4",
                    "rides[i].length == 3",
                    "1 <= start_i < end_i <= n",
                    "1 <= tip_i <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 5, rides = [[2,5,4],[1,5,1]]",
                        "output": "7",
                        "explanation": "The optimal strategy is to pick up passenger 0, who travels from point 2 to point 5 and offers a tip of 4.  This earns 5 - 2 + 4 = 7 dollars."
                    },
                    {
                        "input": "n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]",
                        "output": "20",
                        "explanation": "The optimal strategy involves picking up the following rides:\n- Ride 1: From 3 to 10, earning 10 - 3 + 2 = 9 dollars.\n- Ride 2: From 10 to 12, earning 12 - 10 + 3 = 5 dollars.\n- Ride 5: From 13 to 18, earning 18 - 13 + 1 = 6 dollars.\nTotal earnings: 9 + 5 + 6 = 20 dollars."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-profit-in-job-scheduling",
                "title": "Maximum Profit in Job Scheduling",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-events-that-can-be-attended",
                "title": "Maximum Number of Events That Can Be Attended",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-events-that-can-be-attended-ii",
                "title": "Maximum Number of Events That Can Be Attended II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we sort the array to help us solve the problem?",
            "We can use dynamic programming to keep track of the maximum at each position."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maxTaxiEarnings(int n, vector<vector<int>>& rides) {\n    vector<vector<pair<int, int>>> startToEndAndEarns(n);\n    // dp[i] := max dollars you can earn starting at i\n    vector<long long> dp(n + 1);\n\n    for (const vector<int>& ride : rides) {\n      const int start = ride[0];\n      const int end = ride[1];\n      const int tip = ride[2];\n      const int earn = end - start + tip;\n      startToEndAndEarns[start].emplace_back(end, earn);\n    }\n\n    for (int i = n - 1; i >= 1; --i) {\n      dp[i] = dp[i + 1];\n      for (const auto& [end, earn] : startToEndAndEarns[i])\n        dp[i] = max(dp[i], dp[end] + earn);\n    }\n\n    return dp[1];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maxTaxiEarnings(int n, int[][] rides) {\n    List<Pair<Integer, Integer>>[] startToEndAndEarns = new List[n];\n    // dp[i] := max dollars you can earn starting at i\n    long[] dp = new long[n + 1];\n\n    for (int i = 1; i < n; ++i)\n      startToEndAndEarns[i] = new ArrayList<>();\n\n    for (int[] ride : rides) {\n      final int start = ride[0];\n      final int end = ride[1];\n      final int tip = ride[2];\n      final int earn = end - start + tip;\n      startToEndAndEarns[start].add(new Pair<>(end, earn));\n    }\n\n    for (int i = n - 1; i >= 1; --i) {\n      dp[i] = dp[i + 1];\n      for (Pair<Integer, Integer> pair : startToEndAndEarns[i]) {\n        final int end = pair.getKey();\n        final int earn = pair.getValue();\n        dp[i] = Math.max(dp[i], dp[end] + earn);\n      }\n    }\n\n    return dp[1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxTaxiEarnings(self, n: int, rides: List[List[int]]) -> int:\n    startToEndAndEarns = [[] for _ in range(n)]\n    # dp[i] := max dollars you can earn starting at i\n    dp = [0] * (n + 1)\n\n    for start, end, tip in rides:\n      earn = end - start + tip\n      startToEndAndEarns[start].append((end, earn))\n\n    for i in range(n - 1, 0, -1):\n      dp[i] = dp[i + 1]\n      for end, earn in startToEndAndEarns[i]:\n        dp[i] = max(dp[i], dp[end] + earn)\n\n    return dp[1]\n",
                "lang_text": "py"
            }
        }
    }
}