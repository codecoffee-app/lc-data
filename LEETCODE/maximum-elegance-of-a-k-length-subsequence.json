{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2813",
            "title": "Maximum Elegance of a K-Length Subsequence",
            "titleSlug": "maximum-elegance-of-a-k-length-subsequence",
            "content": "<p>You are given a <strong>0-indexed</strong> 2D integer array <code>items</code> of length <code>n</code> and an integer <code>k</code>.</p>\n\n<p><code>items[i] = [profit<sub>i</sub>, category<sub>i</sub>]</code>, where <code>profit<sub>i</sub></code> and <code>category<sub>i</sub></code> denote the profit and category of the <code>i<sup>th</sup></code> item respectively.</p>\n\n<p>Let&#39;s define the <strong>elegance</strong> of a <strong>subsequence</strong> of <code>items</code> as <code>total_profit + distinct_categories<sup>2</sup></code>, where <code>total_profit</code> is the sum of all profits in the subsequence, and <code>distinct_categories</code> is the number of <strong>distinct</strong> categories from all the categories in the selected subsequence.</p>\n\n<p>Your task is to find the <strong>maximum elegance</strong> from all subsequences of size <code>k</code> in <code>items</code>.</p>\n\n<p>Return <em>an integer denoting the maximum elegance of a subsequence of </em><code>items</code><em> with size exactly </em><code>k</code>.</p>\n\n<p><strong>Note:</strong> A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements&#39; relative order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> items = [[3,2],[5,1],[10,1]], k = 2\n<strong>Output:</strong> 17\n<strong>Explanation: </strong>In this example, we have to select a subsequence of size 2.\nWe can select items[0] = [3,2] and items[2] = [10,1].\nThe total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].\nHence, the elegance is 13 + 2<sup>2</sup> = 17, and we can show that it is the maximum achievable elegance. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> items = [[3,1],[3,1],[2,2],[5,3]], k = 3\n<strong>Output:</strong> 19\n<strong>Explanation:</strong> In this example, we have to select a subsequence of size 3. \nWe can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3]. \nThe total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3]. \nHence, the elegance is 10 + 3<sup>2</sup> = 19, and we can show that it is the maximum achievable elegance.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> items = [[1,1],[2,1],[3,1]], k = 3\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> In this example, we have to select a subsequence of size 3. \nWe should select all the items. \nThe total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. \nHence, the maximum elegance is 6 + 1<sup>2</sup> = 7.  </pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= items.length == n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>items[i].length == 2</code></li>\n\t<li><code>items[i][0] == profit<sub>i</sub></code></li>\n\t<li><code>items[i][1] == category<sub>i</sub></code></li>\n\t<li><code>1 &lt;= profit<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= category<sub>i</sub> &lt;= n </code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 300,
            "dislikes": 5,
            "similarQuestions": "[{\"title\": \"IPO\", \"titleSlug\": \"ipo\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.3K\", \"totalSubmission\": \"19.2K\", \"totalAcceptedRaw\": 6278, \"totalSubmissionRaw\": 19202, \"acRate\": \"32.7%\"}",
            "hints": [
                "<div class=\"_1l1MA\">Greedy algorithm.</div>",
                "<div class=\"_1l1MA\">Sort items in non-increasing order of profits.</div>",
                "<div class=\"_1l1MA\">Select the first <code>k</code> items (the top <code>k</code> most profitable items). Keep track of the items as the candidate set.</div>",
                "<div class=\"_1l1MA\">For the remaining <code>n - k</code> items sorted in non-increasing order of profits, try replacing an item in the candidate set using the current item.</div>",
                "<div class=\"_1l1MA\">The replacing item should add a new category to the candidate set and should remove the item with the minimum profit that occurs more than once in the candidate set.</div>"
            ],
            "rephrased": {
                "body": "Given a 0-indexed 2D integer array `items` of length `n` and an integer `k`, where `items[i] = [profit_i, category_i]`, find the maximum elegance of a subsequence of `items` with size exactly `k`. The elegance of a subsequence is defined as `total_profit + distinct_categories^2`, where `total_profit` is the sum of all profits in the subsequence, and `distinct_categories` is the number of distinct categories from all the categories in the selected subsequence.",
                "constraints": [
                    "1 <= items.length == n <= 10^5",
                    "items[i].length == 2",
                    "1 <= profit_i <= 10^9",
                    "1 <= category_i <= n",
                    "1 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "items = [[3,2],[5,1],[10,1]], k = 2",
                        "output": "17",
                        "explanation": "Selecting items [3,2] and [10,1] results in a total profit of 13 and 2 distinct categories. The elegance is 13 + 2^2 = 17, which is the maximum achievable elegance."
                    },
                    {
                        "input": "items = [[3,1],[3,1],[2,2],[5,3]], k = 3",
                        "output": "19",
                        "explanation": "Selecting items [3,1], [2,2], and [5,3] gives a total profit of 10 and 3 distinct categories.  The elegance is 10 + 3^2 = 19, which is the maximum elegance."
                    },
                    {
                        "input": "items = [[1,1],[2,1],[3,1]], k = 3",
                        "output": "7",
                        "explanation": "Selecting all items yields a total profit of 6 and 1 distinct category.  The elegance is 6 + 1^2 = 7, which is the maximum elegance."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "ipo",
                "title": "IPO",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "<div class=\"_1l1MA\">Greedy algorithm.</div>",
            "<div class=\"_1l1MA\">Sort items in non-increasing order of profits.</div>",
            "<div class=\"_1l1MA\">Select the first <code>k</code> items (the top <code>k</code> most profitable items). Keep track of the items as the candidate set.</div>",
            "<div class=\"_1l1MA\">For the remaining <code>n - k</code> items sorted in non-increasing order of profits, try replacing an item in the candidate set using the current item.</div>",
            "<div class=\"_1l1MA\">The replacing item should add a new category to the candidate set and should remove the item with the minimum profit that occurs more than once in the candidate set.</div>"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long findMaximumElegance(vector<vector<int>>& items, int k) {\n    long long ans = 0;\n    long long totalProfit = 0;\n    // Store seen categories.\n    unordered_set<int> seenCategories;\n    // Store duplicate profits decreasingly.\n    stack<int> decreasingDuplicateProfits;\n\n    std::ranges::sort(items, greater<>());\n\n    for (int i = 0; i < k; i++) {\n      const int profit = items[i][0];\n      const int category = items[i][1];\n      totalProfit += profit;\n      if (seenCategories.count(category))\n        decreasingDuplicateProfits.push(profit);\n      else\n        seenCategories.insert(category);\n    }\n\n    ans = totalProfit + 1LL * seenCategories.size() * seenCategories.size();\n\n    for (int i = k; i < items.size(); ++i) {\n      const int profit = items[i][0];\n      const int category = items[i][1];\n      if (!seenCategories.count(category) &&\n          !decreasingDuplicateProfits.empty()) {\n        // If this is a new category we haven't seen before, it's worth\n        // considering taking it and replacing the one with the least profit\n        // since it will increase the distinct_categories and potentially result\n        // in a larger total_profit + distinct_categories^2.\n        totalProfit -= decreasingDuplicateProfits.top(),\n            decreasingDuplicateProfits.pop();\n        totalProfit += profit;\n        seenCategories.insert(category);\n        ans = max(ans, static_cast<long long>(totalProfit +\n                                              1LL * seenCategories.size() *\n                                                  seenCategories.size()));\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long findMaximumElegance(int[][] items, int k) {\n    long ans = 0;\n    long totalProfit = 0;\n    // Store seen categories.\n    Set<Integer> seenCategories = new HashSet<>();\n    // Store duplicate profits decreasingly.\n    Deque<Integer> decreasingDuplicateProfits = new ArrayDeque<>();\n\n    Arrays.sort(items, (a, b) -> b[0] - a[0]);\n\n    for (int i = 0; i < k; ++i) {\n      final int profit = items[i][0];\n      final int category = items[i][1];\n      totalProfit += profit;\n      if (seenCategories.contains(category))\n        decreasingDuplicateProfits.push(profit);\n      else\n        seenCategories.add(category);\n    }\n\n    ans = totalProfit + 1L * seenCategories.size() * seenCategories.size();\n\n    for (int i = k; i < items.length; ++i) {\n      final int profit = items[i][0];\n      final int category = items[i][1];\n      if (!seenCategories.contains(category) && !decreasingDuplicateProfits.isEmpty()) {\n        // If this is a new category we haven't seen before, it's worth\n        // considering taking it and replacing the one with the least profit\n        // since it will increase the distinct_categories and potentially result\n        // in a larger total_profit + distinct_categories^2.\n        totalProfit -= decreasingDuplicateProfits.pop();\n        totalProfit += profit;\n        seenCategories.add(category);\n        ans = Math.max(ans, totalProfit + 1L * seenCategories.size() * seenCategories.size());\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n    ans = 0\n    totalProfit = 0\n    # Store seen categories.\n    seenCategories = set()\n    # Store duplicate profits decreasingly.\n    decreasingDuplicateProfits = []\n\n    items.sort(reverse=True)\n\n    for i in range(k):\n      profit, category = items[i]\n      totalProfit += profit\n      if category in seenCategories:\n        decreasingDuplicateProfits.append(profit)\n      else:\n        seenCategories.add(category)\n\n    ans = totalProfit + len(seenCategories)**2\n\n    for i in range(k, len(items)):\n      profit, category = items[i]\n      if category not in seenCategories and decreasingDuplicateProfits:\n        # If this is a new category we haven't seen before, it's worth\n        # considering taking it and replacing the one with the least profit\n        # since it will increase the distinct_categories and potentially result\n        # in a larger total_profit + distinct_categories^2.\n        totalProfit -= decreasingDuplicateProfits.pop()\n        totalProfit += profit\n        seenCategories.add(category)\n        ans = max(ans, totalProfit + len(seenCategories)**2)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}