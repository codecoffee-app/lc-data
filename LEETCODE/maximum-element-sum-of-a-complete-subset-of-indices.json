{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2862",
            "title": "Maximum Element-Sum of a Complete Subset of Indices",
            "titleSlug": "maximum-element-sum-of-a-complete-subset-of-indices",
            "content": "<p>You are given a <strong>1</strong><strong>-indexed</strong> array <code>nums</code>. Your task is to select a <strong>complete subset</strong> from <code>nums</code> where every pair of selected indices multiplied is a <span data-keyword=\"perfect-square\">perfect square,</span>. i. e. if you select <code>a<sub>i</sub></code> and <code>a<sub>j</sub></code>, <code>i * j</code> must be a perfect square.</p>\n\n<p>Return the <em>sum</em> of the complete subset with the <em>maximum sum</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [8,7,3,5,7,2,4,9]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">16</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We select elements at indices 2 and 8 and 2<code>&nbsp;* 8</code>&nbsp;is a perfect square.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [8,10,3,8,1,13,7,9,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">20</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We select elements at indices 1, 4, and 9. <code>1 * 4</code>, <code>1 * 9</code>, <code>4 * 9</code> are perfect squares.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 198,
            "dislikes": 51,
            "similarQuestions": "[{\"title\": \"Constrained Subsequence Sum\", \"titleSlug\": \"constrained-subsequence-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Alternating Subsequence Sum\", \"titleSlug\": \"maximum-alternating-subsequence-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.4K\", \"totalSubmission\": \"16.8K\", \"totalAcceptedRaw\": 7384, \"totalSubmissionRaw\": 16840, \"acRate\": \"43.8%\"}",
            "hints": [
                "Define <strong>P(x)</strong> as the product of primes <strong>p</strong> with odd exponents in <strong>x</strong>'s factorization. Examples: For <code>x = 18</code>, factorization <code>2<sup>1</sup> \u00d7 3<sup>2</sup></code>, <strong>P(18) = 2</strong>; for <code>x = 45</code>, factorization <code>3<sup>2</sup> \u00d7 5<sup>1</sup></code>, <strong>P(45) = 5</strong>; for <code>x = 50</code>, factorization <code>2<sup>1</sup> \u00d7 5<sup>2</sup></code>, <strong>P(50) = 2</strong>; for <code>x = 210</code>, factorization <code>2<sup>1</sup> \u00d7 3<sup>1</sup> \u00d7 5<sup>1</sup> \u00d7 7<sup>1</sup></code>, <strong>P(210) = 210</strong>.",
                "If <code>P(nums[i]) = P(nums[j])</code>, <code>nums[i]</code> and <code>nums[j]</code> can be grouped together.",
                "Pick the group with the largest sum."
            ],
            "rephrased": {
                "body": "Given a 1-indexed array `nums`, the goal is to find a complete subset of `nums` with the maximum possible sum. A subset is considered complete if, for every pair of selected indices `i` and `j`, the product `i * j` is a perfect square.",
                "constraints": [
                    "1 <= n == nums.length <= 10^4",
                    "1 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[8,7,3,5,7,2,4,9]",
                        "output": "16",
                        "explanation": "The optimal subset consists of elements at indices 2 and 8. Since 2 * 8 = 16, which is a perfect square, this is a valid complete subset. The sum of these elements (7 + 9) is 16."
                    },
                    {
                        "input": "[8,10,3,8,1,13,7,9,4]",
                        "output": "20",
                        "explanation": "The optimal subset consists of elements at indices 1, 4, and 9. 1 * 4 = 4, 1 * 9 = 9, and 4 * 9 = 36 are all perfect squares. The sum of these elements (8 + 8 + 4) is 20."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "constrained-subsequence-sum",
                "title": "Constrained Subsequence Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-alternating-subsequence-sum",
                "title": "Maximum Alternating Subsequence Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Define <strong>P(x)</strong> as the product of primes <strong>p</strong> with odd exponents in <strong>x</strong>'s factorization. Examples: For <code>x = 18</code>, factorization <code>2<sup>1</sup> \u00d7 3<sup>2</sup></code>, <strong>P(18) = 2</strong>; for <code>x = 45</code>, factorization <code>3<sup>2</sup> \u00d7 5<sup>1</sup></code>, <strong>P(45) = 5</strong>; for <code>x = 50</code>, factorization <code>2<sup>1</sup> \u00d7 5<sup>2</sup></code>, <strong>P(50) = 2</strong>; for <code>x = 210</code>, factorization <code>2<sup>1</sup> \u00d7 3<sup>1</sup> \u00d7 5<sup>1</sup> \u00d7 7<sup>1</sup></code>, <strong>P(210) = 210</strong>.",
            "If <code>P(nums[i]) = P(nums[j])</code>, <code>nums[i]</code> and <code>nums[j]</code> can be grouped together.",
            "Pick the group with the largest sum."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maximumSum(vector<int>& nums) {\n    long long ans = 0;\n    unordered_map<int, long long> oddPowerToSum;\n\n    for (int i = 0; i < nums.size(); ++i) {\n      const int oddPower = divideSquares(i + 1);\n      ans = max(ans, oddPowerToSum[oddPower] += nums[i]);\n    }\n\n    return ans;\n  }\n\n private:\n  int divideSquares(int val) {\n    for (int num = 2; num * num <= val; ++num)\n      while (val % (num * num) == 0)\n        val /= num * num;\n    return val;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maximumSum(List<Integer> nums) {\n    long ans = 0;\n    HashMap<Integer, Long> oddPowerToSum = new HashMap<>();\n\n    for (int i = 0; i < nums.size(); ++i) {\n      final int oddPower = divideSquares(i + 1);\n      ans = Math.max(ans, oddPowerToSum.merge(oddPower, (long) nums.get(i), Long::sum));\n    }\n\n    return ans;\n  }\n\n  private int divideSquares(int val) {\n    for (int num = 2; num * num <= val; ++num)\n      while (val % (num * num) == 0)\n        val /= num * num;\n    return val;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumSum(self, nums: List[int]) -> int:\n    ans = 0\n    oddPowerToSum = collections.Counter()\n\n    def divideSquares(val: int) -> int:\n      for num in range(2, val + 1):\n        while val % (num * num) == 0:\n          val //= (num * num)\n      return val\n\n    for i, num in enumerate(nums):\n      oddPower = divideSquares(i + 1)\n      oddPowerToSum[oddPower] += num\n      ans = max(ans, oddPowerToSum[oddPower])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}