{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1224",
            "title": "Maximum Equal Frequency",
            "titleSlug": "maximum-equal-frequency",
            "content": "<p>Given an array <code>nums</code> of positive integers, return the longest possible length of an array prefix of <code>nums</code>, such that it is possible to remove <strong>exactly one</strong> element from this prefix so that every number that has appeared in it will have the same number of occurrences.</p>\n\n<p>If after removing one element there are no remaining elements, it&#39;s still considered that every appeared number has the same number of ocurrences (0).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,1,1,5,3,3,5]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4] = 5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]\n<strong>Output:</strong> 13\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 527,
            "dislikes": 56,
            "similarQuestions": "[{\"title\": \"Remove Letter To Equalize Frequency\", \"titleSlug\": \"remove-letter-to-equalize-frequency\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.2K\", \"totalSubmission\": \"38.5K\", \"totalAcceptedRaw\": 14249, \"totalSubmissionRaw\": 38507, \"acRate\": \"37.0%\"}",
            "hints": [
                "Keep track of the min and max frequencies.",
                "The number to be eliminated must have a frequency of 1, same as the others or the same +1."
            ],
            "rephrased": {
                "body": "Given an array `nums` of positive integers, find the longest prefix length such that removing exactly one element from this prefix results in all remaining numbers having the same frequency.  If removing one element results in an empty prefix, it's considered that every appeared number has the same number of occurrences (0).",
                "constraints": [
                    "2 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2,2,1,1,5,3,3,5]",
                        "output": "7",
                        "explanation": "The subarray [2,2,1,1,5,3,3] of length 7 satisfies the condition. Removing nums[4] = 5, results in [2,2,1,1,3,3], where each number appears exactly twice."
                    },
                    {
                        "input": "[1,1,1,2,2,2,3,3,3,4,4,4,5]",
                        "output": "13",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "remove-letter-to-equalize-frequency",
                "title": "Remove Letter To Equalize Frequency",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Keep track of the min and max frequencies.",
            "The number to be eliminated must have a frequency of 1, same as the others or the same +1."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxEqualFreq(vector<int>& nums) {\n    int ans = 0;\n    int maxFreq = 0;\n    unordered_map<int, int> count;\n    unordered_map<int, int> freq;\n\n    for (int i = 0; i < nums.size(); ++i) {\n      const int num = nums[i];\n      --freq[count[num]];\n      ++count[num];\n      ++freq[count[num]];\n      maxFreq = max(maxFreq, count[num]);\n      if (maxFreq == 1 || maxFreq * freq[maxFreq] == i ||\n          (maxFreq - 1) * (freq[maxFreq - 1] + 1) == i)\n        ans = i + 1;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxEqualFreq(int[] nums) {\n    int ans = 0;\n    int maxFreq = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n    Map<Integer, Integer> freq = new HashMap<>();\n\n    for (int i = 0; i < nums.length; ++i) {\n      final int currentFreq = count.getOrDefault(nums[i], 0);\n      freq.merge(currentFreq, -1, Integer::sum);\n      final int updatedFreq = currentFreq + 1;\n      count.put(nums[i], updatedFreq);\n      freq.merge(updatedFreq, 1, Integer::sum);\n      maxFreq = Math.max(maxFreq, updatedFreq);\n      if (maxFreq == 1 || maxFreq * freq.get(maxFreq) == i ||\n          (maxFreq - 1) * (freq.get(maxFreq - 1) + 1) == i)\n        ans = i + 1;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxEqualFreq(self, nums: List[int]) -> int:\n    ans = 0\n    maxFreq = 0\n    count = collections.Counter()\n    freq = collections.Counter()\n\n    for i, num in enumerate(nums):\n      freq[count[num]] -= 1\n      count[num] += 1\n      freq[count[num]] += 1\n      maxFreq = max(maxFreq, count[num])\n      if maxFreq == 1 or maxFreq * freq[maxFreq] == i or (maxFreq - 1) * (freq[maxFreq - 1] + 1) == i:\n        ans = i + 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}