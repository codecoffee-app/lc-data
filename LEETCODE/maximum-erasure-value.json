{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1695",
            "title": "Maximum Erasure Value",
            "titleSlug": "maximum-erasure-value",
            "content": "<p>You are given an array of positive integers <code>nums</code> and want to erase a subarray containing&nbsp;<strong>unique elements</strong>. The <strong>score</strong> you get by erasing the subarray is equal to the <strong>sum</strong> of its elements.</p>\n\n<p>Return <em>the <strong>maximum score</strong> you can get by erasing <strong>exactly one</strong> subarray.</em></p>\n\n<p>An array <code>b</code> is called to be a <span class=\"tex-font-style-it\">subarray</span> of <code>a</code> if it forms a contiguous subsequence of <code>a</code>, that is, if it is equal to <code>a[l],a[l+1],...,a[r]</code> for some <code>(l,r)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,4,5,6]\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> The optimal subarray here is [2,4,5,6].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,1,2,5,2,1,2,5]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The optimal subarray here is [5,2,1] or [1,2,5].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2728,
            "dislikes": 45,
            "similarQuestions": "[{\"title\": \"Longest Substring Without Repeating Characters\", \"titleSlug\": \"longest-substring-without-repeating-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"120K\", \"totalSubmission\": \"207.4K\", \"totalAcceptedRaw\": 119992, \"totalSubmissionRaw\": 207434, \"acRate\": \"57.8%\"}",
            "hints": [
                "The main point here is for the subarray to contain unique elements for each index. Only the first subarrays starting from that index have unique elements.",
                "This can be solved using the two pointers technique"
            ],
            "rephrased": {
                "body": "Given an array of positive integers `nums`, find the maximum score you can obtain by erasing exactly one subarray containing only unique elements. The score for a subarray is the sum of its elements.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[4,2,4,5,6]",
                        "output": "17",
                        "explanation": "The subarray [2, 4, 5, 6] contains unique elements and yields the maximum sum of 17."
                    },
                    {
                        "input": "[5,2,1,2,5,2,1,2,5]",
                        "output": "8",
                        "explanation": "The subarrays [5, 2, 1] and [1, 2, 5] both contain unique elements and yield a maximum sum of 8."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-substring-without-repeating-characters",
                "title": "Longest Substring Without Repeating Characters",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The main point here is for the subarray to contain unique elements for each index. Only the first subarrays starting from that index have unique elements.",
            "This can be solved using the two pointers technique"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumUniqueSubarray(vector<int>& nums) {\n    int ans = 0;\n    int score = 0;\n    unordered_set<int> seen;\n\n    for (int l = 0, r = 0; r < nums.size(); ++r) {\n      while (!seen.insert(nums[r]).second) {\n        score -= nums[l];\n        seen.erase(nums[l++]);\n      }\n      score += nums[r];\n      ans = max(ans, score);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumUniqueSubarray(int[] nums) {\n    int ans = 0;\n    int score = 0;\n    Set<Integer> seen = new HashSet<>();\n\n    for (int l = 0, r = 0; r < nums.length; ++r) {\n      while (!seen.add(nums[r])) {\n        score -= nums[l];\n        seen.remove(nums[l++]);\n      }\n      score += nums[r];\n      ans = Math.max(ans, score);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumUniqueSubarray(self, nums: List[int]) -> int:\n    ans = 0\n    score = 0\n    seen = set()\n\n    l = 0\n    for r, num in enumerate(nums):\n      while num in seen:\n        score -= nums[l]\n        seen.remove(nums[l])\n        l += 1\n      seen.add(nums[r])\n      score += nums[r]\n      ans = max(ans, score)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}