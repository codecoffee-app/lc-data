{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "164",
            "title": "Maximum Gap",
            "titleSlug": "maximum-gap",
            "content": "<p>Given an integer array <code>nums</code>, return <em>the maximum difference between two successive elements in its sorted form</em>. If the array contains less than two elements, return <code>0</code>.</p>\n\n<p>You must write an algorithm that runs in linear time and uses linear extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,6,9,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The array contains less than 2 elements, therefore return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3120,
            "dislikes": 362,
            "similarQuestions": "[{\"title\": \"Maximum Consecutive Floors Without Special Floors\", \"titleSlug\": \"maximum-consecutive-floors-without-special-floors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Bucket Sort",
                    "slug": "bucket-sort"
                },
                {
                    "name": "Radix Sort",
                    "slug": "radix-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"191K\", \"totalSubmission\": \"425.2K\", \"totalAcceptedRaw\": 191013, \"totalSubmissionRaw\": 425230, \"acRate\": \"44.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, find the maximum difference between two consecutive elements in its sorted form. If the array has fewer than two elements, return 0.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "0 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[3,6,9,1]",
                        "output": "3",
                        "explanation": "The sorted array is [1, 3, 6, 9]. The maximum difference between consecutive elements is either between (3, 6) or (6, 9), which is 3."
                    },
                    {
                        "input": "[10]",
                        "output": "0",
                        "explanation": "The array contains less than 2 elements, so the result is 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-consecutive-floors-without-special-floors",
                "title": "Maximum Consecutive Floors Without Special Floors",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Bucket Sort",
                "slug": "bucket-sort"
            },
            {
                "name": "Radix Sort",
                "slug": "radix-sort"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Bucket {\n  int min;\n  int max;\n};\n\nclass Solution {\n public:\n  int maximumGap(vector<int>& nums) {\n    if (nums.size() < 2)\n      return 0;\n\n    const int mini = *min_element(nums.begin(), nums.end());\n    const int maxi = *max_element(nums.begin(), nums.end());\n    if (mini == maxi)\n      return 0;\n\n    const int gap = ceil((maxi - mini) / (double)(nums.size() - 1));\n    const int bucketSize = (maxi - mini) / gap + 1;\n    vector<Bucket> buckets(bucketSize, {INT_MAX, INT_MIN});\n\n    for (const int num : nums) {\n      const int i = (num - mini) / gap;\n      buckets[i].min = min(buckets[i].min, num);\n      buckets[i].max = max(buckets[i].max, num);\n    }\n\n    int ans = 0;\n    int prevMax = mini;\n\n    for (const Bucket& bucket : buckets) {\n      if (bucket.min == INT_MAX)\n        continue;  // Empty bucket\n      ans = max(ans, bucket.min - prevMax);\n      prevMax = bucket.max;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Bucket {\n  public int min;\n  public int max;\n  public Bucket(int min, int max) {\n    this.min = min;\n    this.max = max;\n  }\n}\n\nclass Solution {\n  public int maximumGap(int[] nums) {\n    if (nums.length < 2)\n      return 0;\n\n    final int min = Arrays.stream(nums).min().getAsInt();\n    final int max = Arrays.stream(nums).max().getAsInt();\n    if (min == max)\n      return 0;\n\n    final int gap = (int) Math.ceil((double) (max - min) / (nums.length - 1));\n    final int bucketsLength = (max - min) / gap + 1;\n    Bucket[] buckets = new Bucket[bucketsLength];\n\n    for (int i = 0; i < buckets.length; ++i)\n      buckets[i] = new Bucket(Integer.MAX_VALUE, Integer.MIN_VALUE);\n\n    for (final int num : nums) {\n      final int i = (num - min) / gap;\n      buckets[i].min = Math.min(buckets[i].min, num);\n      buckets[i].max = Math.max(buckets[i].max, num);\n    }\n\n    int ans = 0;\n    int prevMax = min;\n\n    for (final Bucket bucket : buckets) {\n      if (bucket.min == Integer.MAX_VALUE) // Empty bucket\n        continue;\n      ans = Math.max(ans, bucket.min - prevMax);\n      prevMax = bucket.max;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Bucket:\n  def __init__(self, mini: int, maxi: int):\n    self.mini = mini\n    self.maxi = maxi\n\n\nclass Solution:\n  def maximumGap(self, nums: List[int]) -> int:\n    if len(nums) < 2:\n      return 0\n\n    mini = min(nums)\n    maxi = max(nums)\n    if mini == maxi:\n      return 0\n\n    gap = math.ceil((maxi - mini) / (len(nums) - 1))\n    bucketSize = (maxi - mini) // gap + 1\n    buckets = [Bucket(math.inf, -math.inf) for _ in range(bucketSize)]\n\n    for num in nums:\n      i = (num - mini) // gap\n      buckets[i].mini = min(buckets[i].mini, num)\n      buckets[i].maxi = max(buckets[i].maxi, num)\n\n    ans = 0\n    prevMax = mini\n\n    for bucket in buckets:\n      if bucket.mini == math.inf:\n        continue  # Empty bucket\n      ans = max(ans, bucket.mini - prevMax)\n      prevMax = bucket.maxi\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}