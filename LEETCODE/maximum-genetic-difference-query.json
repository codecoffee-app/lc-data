{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1938",
            "title": "Maximum Genetic Difference Query",
            "titleSlug": "maximum-genetic-difference-query",
            "content": "<p>There is a rooted tree consisting of <code>n</code> nodes numbered <code>0</code> to <code>n - 1</code>. Each node&#39;s number denotes its <strong>unique genetic value</strong> (i.e. the genetic value of node <code>x</code> is <code>x</code>). The <strong>genetic difference</strong> between two genetic values is defined as the <strong>bitwise-</strong><strong>XOR</strong> of their values. You are given the integer array <code>parents</code>, where <code>parents[i]</code> is the parent for node <code>i</code>. If node <code>x</code> is the <strong>root</strong> of the tree, then <code>parents[x] == -1</code>.</p>\n\n<p>You are also given the array <code>queries</code> where <code>queries[i] = [node<sub>i</sub>, val<sub>i</sub>]</code>. For each query <code>i</code>, find the <strong>maximum genetic difference</strong> between <code>val<sub>i</sub></code> and <code>p<sub>i</sub></code>, where <code>p<sub>i</sub></code> is the genetic value of any node that is on the path between <code>node<sub>i</sub></code> and the root (including <code>node<sub>i</sub></code> and the root). More formally, you want to maximize <code>val<sub>i</sub> XOR p<sub>i</sub></code>.</p>\n\n<p>Return <em>an array </em><code>ans</code><em> where </em><code>ans[i]</code><em> is the answer to the </em><code>i<sup>th</sup></code><em> query</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/c1.png\" style=\"width: 118px; height: 163px;\" />\n<pre>\n<strong>Input:</strong> parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]\n<strong>Output:</strong> [2,3,7]\n<strong>Explanation: </strong>The queries are processed as follows:\n- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.\n- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.\n- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/c2.png\" style=\"width: 256px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]\n<strong>Output:</strong> [6,14,7]\n<strong>Explanation: </strong>The queries are processed as follows:\n- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.\n- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.\n- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= parents.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= parents[i] &lt;= parents.length - 1</code> for every node <code>i</code> that is <strong>not</strong> the root.</li>\n\t<li><code>parents[root] == -1</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= node<sub>i</sub> &lt;= parents.length - 1</code></li>\n\t<li><code>0 &lt;= val<sub>i</sub> &lt;= 2 * 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 368,
            "dislikes": 18,
            "similarQuestions": "[{\"title\": \"Maximum XOR With an Element From Array\", \"titleSlug\": \"maximum-xor-with-an-element-from-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"5K\", \"totalSubmission\": \"12.1K\", \"totalAcceptedRaw\": 5048, \"totalSubmissionRaw\": 12092, \"acRate\": \"41.7%\"}",
            "hints": [
                "How can we use a trie to store all the XOR values in the path from a node to the root?",
                "How can we dynamically add the XOR values with a DFS search?"
            ],
            "rephrased": {
                "body": "Given a rooted tree with 'n' nodes numbered from 0 to n-1, where each node's number represents its unique genetic value. The genetic difference between two values is their bitwise XOR. You are given an array 'parents' representing the tree structure (parents[i] is the parent of node i, and parents[x] == -1 for the root node x). You are also given an array 'queries', where each query queries[i] = [node_i, val_i]. For each query, find the maximum genetic difference between val_i and p_i, where p_i is the genetic value of any node on the path from node_i to the root (inclusive). Return an array 'ans' where ans[i] is the result for the i-th query.",
                "constraints": [
                    "2 <= parents.length <= 10^5",
                    "0 <= parents[i] <= parents.length - 1 for every node i that is not the root.",
                    "parents[root] == -1",
                    "1 <= queries.length <= 3 * 10^4",
                    "0 <= node_i <= parents.length - 1",
                    "0 <= val_i <= 2 * 10^5"
                ],
                "testcases": [
                    {
                        "input": "parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]",
                        "output": "[2,3,7]",
                        "explanation": "For query [0,2], the path to the root is [0]. 2 XOR 0 = 2. For query [3,2], the path is [3, 1]. 2 XOR 3 = 1 and 2 XOR 1 = 3. Max is 3. For query [2,5], the path is [2, 1]. 5 XOR 2 = 7 and 5 XOR 1 = 4. Max is 7."
                    },
                    {
                        "input": "parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]",
                        "output": "[6,14,7]",
                        "explanation": "For query [4,6], the path is [4, 0, 3, -1(root is 2)].  6 XOR 4 = 2, 6 XOR 0 = 6, 6 XOR 2 = 4. Max is 6. For query [1,15], the path is [1, 7, 2, -1(root is 2)]. 15 XOR 1 = 14, 15 XOR 7 = 8, 15 XOR 2 = 13. Max is 14. For query [0,5], the path is [0, 3, 2, -1(root is 2)]. 5 XOR 0 = 5, 5 XOR 3 = 6, 5 XOR 2 = 7. Max is 7."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-xor-with-an-element-from-array",
                "title": "Maximum XOR With an Element From Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How can we use a trie to store all the XOR values in the path from a node to the root?",
            "How can we dynamically add the XOR values with a DFS search?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  int count = 0;\n  TrieNode() : children(2) {}\n};\n\nclass Trie {\n public:\n  void update(int num, int val) {\n    shared_ptr<TrieNode> node = root;\n    for (int i = kHeight; i >= 0; --i) {\n      const int bit = (num >> i) & 1;\n      if (node->children[bit] == nullptr)\n        node->children[bit] = make_shared<TrieNode>();\n      node = node->children[bit];\n      node->count += val;\n    }\n  }\n\n  int query(int num) {\n    int ans = 0;\n    shared_ptr<TrieNode> node = root;\n    for (int i = kHeight; i >= 0; --i) {\n      const int bit = (num >> i) & 1;\n      const int targetBit = bit ^ 1;\n      if (node->children[targetBit] && node->children[targetBit]->count) {\n        ans += 1 << i;\n        node = node->children[targetBit];\n      } else {\n        node = node->children[targetBit ^ 1];\n      }\n    }\n    return ans;\n  }\n\n private:\n  static constexpr int kHeight = 17;\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n};\n\nclass Solution {\n public:\n  vector<int> maxGeneticDifference(vector<int>& parents,\n                                   vector<vector<int>>& queries) {\n    const int n = parents.size();\n    vector<int> ans(queries.size());\n    int rootVal = -1;\n    vector<vector<int>> tree(n);\n    // {node: (index, val)}\n    unordered_map<int, vector<pair<int, int>>> nodeToQueries;\n    Trie trie;\n\n    for (int i = 0; i < parents.size(); ++i)\n      if (parents[i] == -1)\n        rootVal = i;\n      else\n        tree[parents[i]].push_back(i);\n\n    for (int i = 0; i < queries.size(); ++i) {\n      const int node = queries[i][0];\n      const int val = queries[i][1];\n      nodeToQueries[node].emplace_back(i, val);\n    }\n\n    dfs(rootVal, trie, tree, nodeToQueries, ans);\n    return ans;\n  }\n\n private:\n  void dfs(int node, Trie& trie, const vector<vector<int>>& tree,\n           const unordered_map<int, vector<pair<int, int>>>& nodeToQueries,\n           vector<int>& ans) {\n    trie.update(node, 1);\n\n    if (const auto it = nodeToQueries.find(node); it != nodeToQueries.cend())\n      for (const auto& [i, val] : it->second)\n        ans[i] = trie.query(val);\n\n    for (const int child : tree[node])\n      dfs(child, trie, tree, nodeToQueries, ans);\n\n    trie.update(node, -1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[2];\n  public int count = 0;\n}\n\nclass Trie {\n  public void update(int num, int val) {\n    TrieNode node = root;\n    for (int i = kHeight; i >= 0; --i) {\n      final int bit = (num >> i) & 1;\n      if (node.children[bit] == null)\n        node.children[bit] = new TrieNode();\n      node = node.children[bit];\n      node.count += val;\n    }\n  }\n\n  public int query(int num) {\n    int ans = 0;\n    TrieNode node = root;\n    for (int i = kHeight; i >= 0; --i) {\n      final int bit = (num >> i) & 1;\n      final int targetBit = bit ^ 1;\n      if (node.children[targetBit] != null && node.children[targetBit].count > 0) {\n        ans += 1 << i;\n        node = node.children[targetBit];\n      } else {\n        node = node.children[targetBit ^ 1];\n      }\n    }\n    return ans;\n  }\n\n  private static final int kHeight = 17;\n  TrieNode root = new TrieNode();\n}\n\nclass Solution {\n  public int[] maxGeneticDifference(int[] parents, int[][] queries) {\n    final int n = parents.length;\n    int[] ans = new int[queries.length];\n    int rootVal = -1;\n    List<Integer>[] tree = new List[n];\n\n    for (int i = 0; i < n; ++i)\n      tree[i] = new ArrayList<>();\n\n    // {node: (index, val)}\n    Map<Integer, List<Pair<Integer, Integer>>> nodeToQueries = new HashMap<>();\n    Trie trie = new Trie();\n\n    for (int i = 0; i < parents.length; ++i)\n      if (parents[i] == -1)\n        rootVal = i;\n      else\n        tree[parents[i]].add(i);\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int node = queries[i][0];\n      final int val = queries[i][1];\n      nodeToQueries.putIfAbsent(node, new ArrayList<>());\n      nodeToQueries.get(node).add(new Pair<>(i, val));\n    }\n\n    dfs(rootVal, trie, tree, nodeToQueries, ans);\n    return ans;\n  }\n\n  private void dfs(int node, Trie trie, List<Integer>[] tree,\n                   Map<Integer, List<Pair<Integer, Integer>>> nodeToQueries, int[] ans) {\n    trie.update(node, 1);\n\n    if (nodeToQueries.containsKey(node))\n      for (Pair<Integer, Integer> query : nodeToQueries.get(node)) {\n        final int i = query.getKey();\n        final int val = query.getValue();\n        ans[i] = trie.query(val);\n      }\n\n    for (final int child : tree[node])\n      dfs(child, trie, tree, nodeToQueries, ans);\n\n    trie.update(node, -1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children = [None] * 2\n    self.count = 0\n\n\nclass Trie:\n  def __init__(self):\n    self.root = TrieNode()\n    self.kHeight = 17\n\n  def update(self, num: int, val: int) -> None:\n    node = self.root\n    for i in range(self.kHeight, -1, -1):\n      bit = (num >> i) & 1\n      if not node.children[bit]:\n        node.children[bit] = TrieNode()\n      node = node.children[bit]\n      node.count += val\n\n  def query(self, num: int) -> int:\n    ans = 0\n    node = self.root\n    for i in range(self.kHeight, -1, -1):\n      bit = (num >> i) & 1\n      targetBit = bit ^ 1\n      if node.children[targetBit] and node.children[targetBit].count > 0:\n        ans += 1 << i\n        node = node.children[targetBit]\n      else:\n        node = node.children[targetBit ^ 1]\n    return ans\n\n\nclass Solution:\n  def maxGeneticDifference(self, parents: List[int], queries: List[List[int]]) -> List[int]:\n    n = len(parents)\n    ans = [0] * len(queries)\n    rootVal = -1\n    tree = [[] for _ in range(n)]\n    nodeToQueries = collections.defaultdict(list)  # {node: (index, val)}\n    trie = Trie()\n\n    for i, parent in enumerate(parents):\n      if parent == -1:\n        rootVal = i\n      else:\n        tree[parent].append(i)\n\n    for i, (node, val) in enumerate(queries):\n      nodeToQueries[node].append((i, val))\n\n    def dfs(node: int) -> None:\n      trie.update(node, 1)\n\n      # Answer queries for node\n      for i, val in nodeToQueries[node]:\n        ans[i] = trie.query(val)\n\n      for child in tree[node]:\n        dfs(child)\n\n      trie.update(node, -1)\n\n    dfs(rootVal)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}