{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2151",
            "title": "Maximum Good People Based on Statements",
            "titleSlug": "maximum-good-people-based-on-statements",
            "content": "<p>There are two types of persons:</p>\n\n<ul>\n\t<li>The <strong>good person</strong>: The person who always tells the truth.</li>\n\t<li>The <strong>bad person</strong>: The person who might tell the truth and might lie.</li>\n</ul>\n\n<p>You are given a <strong>0-indexed</strong> 2D integer array <code>statements</code> of size <code>n x n</code> that represents the statements made by <code>n</code> people about each other. More specifically, <code>statements[i][j]</code> could be one of the following:</p>\n\n<ul>\n\t<li><code>0</code> which represents a statement made by person <code>i</code> that person <code>j</code> is a <strong>bad</strong> person.</li>\n\t<li><code>1</code> which represents a statement made by person <code>i</code> that person <code>j</code> is a <strong>good</strong> person.</li>\n\t<li><code>2</code> represents that <strong>no statement</strong> is made by person <code>i</code> about person <code>j</code>.</li>\n</ul>\n\n<p>Additionally, no person ever makes a statement about themselves. Formally, we have that <code>statements[i][i] = 2</code> for all <code>0 &lt;= i &lt; n</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of people who can be <strong>good</strong> based on the statements made by the </em><code>n</code><em> people</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/01/15/logic1.jpg\" style=\"width: 600px; height: 262px;\" />\n<pre>\n<strong>Input:</strong> statements = [[2,1,2],[1,2,2],[2,0,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Each person makes a single statement.\n- Person 0 states that person 1 is good.\n- Person 1 states that person 0 is good.\n- Person 2 states that person 1 is bad.\nLet&#39;s take person 2 as the key.\n- Assuming that person 2 is a good person:\n    - Based on the statement made by person 2, person 1 is a bad person.\n    - Now we know for sure that person 1 is bad and person 2 is good.\n    - Based on the statement made by person 1, and since person 1 is bad, they could be:\n        - telling the truth. There will be a contradiction in this case and this assumption is invalid.\n        - lying. In this case, person 0 is also a bad person and lied in their statement.\n    - <strong>Following that person 2 is a good person, there will be only one good person in the group</strong>.\n- Assuming that person 2 is a bad person:\n    - Based on the statement made by person 2, and since person 2 is bad, they could be:\n        - telling the truth. Following this scenario, person 0 and 1 are both bad as explained before.\n            - <strong>Following that person 2 is bad but told the truth, there will be no good persons in the group</strong>.\n        - lying. In this case person 1 is a good person.\n            - Since person 1 is a good person, person 0 is also a good person.\n            - <strong>Following that person 2 is bad and lied, there will be two good persons in the group</strong>.\nWe can see that at most 2 persons are good in the best case, so we return 2.\nNote that there is more than one way to arrive at this conclusion.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/01/15/logic2.jpg\" style=\"width: 600px; height: 262px;\" />\n<pre>\n<strong>Input:</strong> statements = [[2,0],[0,2]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Each person makes a single statement.\n- Person 0 states that person 1 is bad.\n- Person 1 states that person 0 is bad.\nLet&#39;s take person 0 as the key.\n- Assuming that person 0 is a good person:\n    - Based on the statement made by person 0, person 1 is a bad person and was lying.\n    - <strong>Following that person 0 is a good person, there will be only one good person in the group</strong>.\n- Assuming that person 0 is a bad person:\n    - Based on the statement made by person 0, and since person 0 is bad, they could be:\n        - telling the truth. Following this scenario, person 0 and 1 are both bad.\n            - <strong>Following that person 0 is bad but told the truth, there will be no good persons in the group</strong>.\n        - lying. In this case person 1 is a good person.\n            - <strong>Following that person 0 is bad and lied, there will be only one good person in the group</strong>.\nWe can see that at most, one person is good in the best case, so we return 1.\nNote that there is more than one way to arrive at this conclusion.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == statements.length == statements[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 15</code></li>\n\t<li><code>statements[i][j]</code> is either <code>0</code>, <code>1</code>, or <code>2</code>.</li>\n\t<li><code>statements[i][i] == 2</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 473,
            "dislikes": 76,
            "similarQuestions": "[{\"title\": \"Maximum Score Words Formed by Letters\", \"titleSlug\": \"maximum-score-words-formed-by-letters\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.2K\", \"totalSubmission\": \"24.6K\", \"totalAcceptedRaw\": 12247, \"totalSubmissionRaw\": 24608, \"acRate\": \"49.8%\"}",
            "hints": [
                "You should test every possible assignment of good and bad people, using a bitmask.",
                "In each bitmask, if the person i is good, then his statements should be consistent with the bitmask in order for the assignment to be valid.",
                "If the assignment is valid, count how many people are good and keep track of the maximum."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed 2D integer array `statements` of size `n x n` representing statements made by `n` people about each other. There are two types of people: good persons (always tell the truth) and bad persons (may lie or tell the truth). `statements[i][j]` indicates person `i`'s statement about person `j`:\n\n- `0`: Person `i` claims person `j` is bad.\n- `1`: Person `i` claims person `j` is good.\n- `2`: Person `i` makes no statement about person `j`.\n\nNo person makes a statement about themselves (i.e., `statements[i][i] = 2`).\n\nDetermine the maximum number of people who can be good based on the statements made. Return the maximum count.",
                "constraints": [
                    "n == statements.length == statements[i].length",
                    "2 <= n <= 15",
                    "statements[i][j] is either 0, 1, or 2.",
                    "statements[i][i] == 2"
                ],
                "testcases": [
                    {
                        "input": "[[2,1,2],[1,2,2],[2,0,2]]",
                        "output": "2",
                        "explanation": "One possible scenario is: Person 2 is bad and lying when claiming Person 1 is bad. Therefore, Person 1 is good. Since Person 1 is good and states that Person 0 is good, Person 0 must be good too. This configuration gives two good people.\n\nAnother is person 2 is good, following that person 1 is bad. So Person 1 must lie for the statment that person 0 is good, therefore person 0 is bad. This gives one good person. so at most 2 good persons are there"
                    },
                    {
                        "input": "[[2,0],[0,2]]",
                        "output": "1",
                        "explanation": "If person 0 is good, person 1 must be bad. This results in one good person.\nIf person 0 is bad and truthful, then person 1 is bad. No good persons.\nIf person 0 is bad and lying, then person 1 is good. This gives one good person.\nTherefore, the maximum number of good persons is 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-score-words-formed-by-letters",
                "title": "Maximum Score Words Formed by Letters",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "You should test every possible assignment of good and bad people, using a bitmask.",
            "In each bitmask, if the person i is good, then his statements should be consistent with the bitmask in order for the assignment to be valid.",
            "If the assignment is valid, count how many people are good and keep track of the maximum."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumGood(vector<vector<int>>& statements) {\n    int ans = 0;\n    dfs(statements, {}, 0, 0, ans);\n    return ans;\n  }\n\n private:\n  void dfs(const vector<vector<int>>& statements, vector<int>&& good, int i,\n           int count, int& ans) {\n    if (i == statements.size()) {\n      if (isValid(statements, good))\n        ans = max(ans, count);\n      return;\n    }\n\n    good.push_back(0);  // Assume i-th person is bad.\n    dfs(statements, move(good), i + 1, count, ans);\n    good.back() = 1;  // Assume i-th person is good.\n    dfs(statements, move(good), i + 1, count + 1, ans);\n    good.pop_back();\n  }\n\n  bool isValid(const vector<vector<int>>& statements, const vector<int>& good) {\n    for (int i = 0; i < good.size(); ++i) {\n      if (!good[i])  // i-th person is bad, so no need to check.\n        continue;\n      for (int j = 0; j < statements.size(); ++j) {\n        if (statements[i][j] == 2)\n          continue;\n        if (statements[i][j] != good[j])\n          return false;\n      }\n    }\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumGood(int[][] statements) {\n    dfs(statements, new ArrayList<>(), 0, 0);\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private void dfs(int[][] statements, List<Integer> good, int i, int count) {\n    if (i == statements.length) {\n      if (isValid(statements, good))\n        ans = Math.max(ans, count);\n      return;\n    }\n\n    good.add(0); // Assume i-th person is bad.\n    dfs(statements, good, i + 1, count);\n    good.set(good.size() - 1, 1); // Assume i-th person is good.\n    dfs(statements, good, i + 1, count + 1);\n    good.remove(good.size() - 1);\n  }\n\n  private boolean isValid(int[][] statements, List<Integer> good) {\n    for (int i = 0; i < good.size(); ++i) {\n      if (good.get(i) == 0) // i-th person is bad, so no need to check.\n        continue;\n      for (int j = 0; j < statements.length; ++j) {\n        if (statements[i][j] == 2)\n          continue;\n        if (statements[i][j] != good.get(j))\n          return false;\n      }\n    }\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumGood(self, statements: List[List[int]]) -> int:\n    n = len(statements)\n    ans = 0\n\n    def isValid(good: List[int]) -> bool:\n      for i, g in enumerate(good):\n        if not g:  # i-th person is bad, so no need to check.\n          continue\n        for j in range(n):\n          if statements[i][j] == 2:\n            continue\n          if statements[i][j] != good[j]:\n            return False\n      return True\n\n    def dfs(good: List[int], i: int, count: int) -> None:\n      nonlocal ans\n      if i == n:\n        if isValid(good):\n          ans = max(ans, count)\n        return\n\n      good.append(0)  # Assume i-th person is bad.\n      dfs(good, i + 1, count)\n      good[-1] = 1  # Assume i-th person is good.\n      dfs(good, i + 1, count + 1)\n      good.pop()\n\n    dfs([], 0, 0)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}