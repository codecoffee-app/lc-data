{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3026",
            "title": "Maximum Good Subarray Sum",
            "titleSlug": "maximum-good-subarray-sum",
            "content": "<p>You are given an array <code>nums</code> of length <code>n</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>A <span data-keyword=\"subarray-nonempty\">subarray</span> of <code>nums</code> is called <strong>good</strong> if the <strong>absolute difference</strong> between its first and last element is <strong>exactly</strong> <code>k</code>, in other words, the subarray <code>nums[i..j]</code> is good if <code>|nums[i] - nums[j]| == k</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> sum of a <strong>good</strong> subarray of </em><code>nums</code>. <em>If there are no good subarrays</em><em>, return </em><code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6], k = 1\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The absolute difference between the first and last element<!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --> must be 1 for a good subarray. All the good subarrays are: [1,2], [2,3], [3,4], [4,5], and [5,6]. The maximum subarray sum is 11 for the subarray [5,6].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,3,2,4,5], k = 3\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The absolute difference between the first and last element<!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --> must be 3 for a good subarray. All the good subarrays are: [-1,3,2], and [2,4,5]. The maximum subarray sum is 11 for the subarray [2,4,5].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-2,-3,-4], k = 2\n<strong>Output:</strong> -6\n<strong>Explanation:</strong> The absolute difference between the first and last element<!-- notionvc: 2a6d66c9-0149-4294-b267-8be9fe252de9 --> must be 2 for a good subarray. All the good subarrays are: [-1,-2,-3], and [-2,-3,-4]. The maximum subarray sum is -6 for the subarray [-1,-2,-3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 287,
            "dislikes": 15,
            "similarQuestions": "[{\"title\": \"Maximum Subarray\", \"titleSlug\": \"maximum-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Sum of Distinct Subarrays With Length K\", \"titleSlug\": \"maximum-sum-of-distinct-subarrays-with-length-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.3K\", \"totalSubmission\": \"90.3K\", \"totalAcceptedRaw\": 16265, \"totalSubmissionRaw\": 90294, \"acRate\": \"18.0%\"}",
            "hints": [
                "Save all the prefix sums into a HashMap.",
                "For the index <code>i</code> store the element at index <code>i + 1</code> as the key and the prefix sum till <code>i</code> as the value.",
                "For each prefix sum ending at <code>nums[i]</code>, try finding <code>nums[i] - k</code> and <code>nums[i] + k</code> in the HashMap and update the answer."
            ],
            "rephrased": {
                "body": "Given an array `nums` of length `n` and a positive integer `k`, find the maximum sum of a 'good' subarray. A subarray `nums[i..j]` is considered 'good' if the absolute difference between its first and last element is exactly `k` (i.e., `|nums[i] - nums[j]| == k`). If no 'good' subarrays exist, return 0.",
                "constraints": [
                    "2 <= nums.length <= 10^5",
                    "-10^9 <= nums[i] <= 10^9",
                    "1 <= k <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3,4,5,6], k = 1",
                        "output": "11",
                        "explanation": "The good subarrays are [1,2], [2,3], [3,4], [4,5], and [5,6].  The subarray [5,6] has the maximum sum of 11."
                    },
                    {
                        "input": "nums = [-1,3,2,4,5], k = 3",
                        "output": "11",
                        "explanation": "The good subarrays are [-1,3,2] and [2,4,5]. The subarray [2,4,5] has the maximum sum of 11."
                    },
                    {
                        "input": "nums = [-1,-2,-3,-4], k = 2",
                        "output": "-6",
                        "explanation": "The good subarrays are [-1,-2,-3] and [-2,-3,-4]. The subarray [-1,-2,-3] has the maximum sum of -6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-subarray",
                "title": "Maximum Subarray",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-sum-of-distinct-subarrays-with-length-k",
                "title": "Maximum Sum of Distinct Subarrays With Length K",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Save all the prefix sums into a HashMap.",
            "For the index <code>i</code> store the element at index <code>i + 1</code> as the key and the prefix sum till <code>i</code> as the value.",
            "For each prefix sum ending at <code>nums[i]</code>, try finding <code>nums[i] - k</code> and <code>nums[i] + k</code> in the HashMap and update the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maximumSubarraySum(vector<int>& nums, int k) {\n    long long ans = LLONG_MIN;\n    long long prefix = 0;\n    // {num: the minimum prefix sum excluding `num`}\n    unordered_map<int, long long> numToMinPrefix;\n\n    for (const int num : nums) {\n      if (const auto it = numToMinPrefix.find(num);\n          it == numToMinPrefix.cend() || it->second > prefix) {\n        numToMinPrefix[num] = prefix;\n      }\n      prefix += num;\n      if (const auto it = numToMinPrefix.find(num + k);\n          it != numToMinPrefix.cend())\n        ans = max(ans, prefix - it->second);\n      if (const auto it = numToMinPrefix.find(num - k);\n          it != numToMinPrefix.cend())\n        ans = max(ans, prefix - it->second);\n    }\n\n    return ans == LLONG_MIN ? 0 : ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maximumSubarraySum(int[] nums, int k) {\n    long ans = Long.MIN_VALUE;\n    long prefix = 0;\n    Map<Integer, Long> numToMinPrefix = new HashMap<>();\n\n    for (final int num : nums) {\n      if (!numToMinPrefix.containsKey(num) || numToMinPrefix.get(num) > prefix)\n        numToMinPrefix.put(num, prefix);\n      prefix += num;\n      if (numToMinPrefix.containsKey(num + k))\n        ans = Math.max(ans, prefix - numToMinPrefix.get(num + k));\n      if (numToMinPrefix.containsKey(num - k))\n        ans = Math.max(ans, prefix - numToMinPrefix.get(num - k));\n    }\n\n    return ans == Long.MIN_VALUE ? 0 : ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumSubarraySum(self, nums: List[int], k: int) -> int:\n    ans = -math.inf\n    prefix = 0\n    numToMinPrefix = {}\n\n    for num in nums:\n      if num not in numToMinPrefix or numToMinPrefix[num] > prefix:\n        numToMinPrefix[num] = prefix\n      prefix += num\n      if num + k in numToMinPrefix:\n        ans = max(ans, prefix - numToMinPrefix[num + k])\n      if num - k in numToMinPrefix:\n        ans = max(ans, prefix - numToMinPrefix[num - k])\n\n    return 0 if ans == -math.inf else ans\n",
                "lang_text": "py"
            }
        }
    }
}