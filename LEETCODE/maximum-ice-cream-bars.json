{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1833",
            "title": "Maximum Ice Cream Bars",
            "titleSlug": "maximum-ice-cream-bars",
            "content": "<p>It is a sweltering summer day, and a boy wants to buy some ice cream bars.</p>\n\n<p>At the store, there are <code>n</code> ice cream bars. You are given an array <code>costs</code> of length <code>n</code>, where <code>costs[i]</code> is the price of the <code>i<sup>th</sup></code> ice cream bar in coins. The boy initially has <code>coins</code> coins to spend, and he wants to buy as many ice cream bars as possible.&nbsp;</p>\n\n<p><strong>Note:</strong> The boy can buy the ice cream bars in any order.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of ice cream bars the boy can buy with </em><code>coins</code><em> coins.</em></p>\n\n<p>You must solve the problem by counting sort.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [1,3,2,4,1], coins = 7\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [10,6,8,7,7,8], coins = 5\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>The boy cannot afford any of the ice cream bars.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [1,6,3,1,2,5], coins = 20\n<strong>Output:</strong> 6\n<strong>Explanation: </strong>The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>costs.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= costs[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= coins &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2117,
            "dislikes": 666,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"150.3K\", \"totalSubmission\": \"203.8K\", \"totalAcceptedRaw\": 150323, \"totalSubmissionRaw\": 203782, \"acRate\": \"73.8%\"}",
            "hints": [
                "It is always optimal to buy the least expensive ice cream bar first.",
                "Sort the prices so that the cheapest ice cream bar comes first."
            ],
            "rephrased": {
                "body": "A boy wants to buy as many ice cream bars as possible on a hot summer day.  Given an array `costs` representing the price of each ice cream bar, and the total number of `coins` the boy has, determine the maximum number of ice cream bars he can purchase. The boy can buy the ice cream bars in any order. Solve the problem using counting sort.",
                "constraints": [
                    "costs.length == n",
                    "1 <= n <= 10^5",
                    "1 <= costs[i] <= 10^5",
                    "1 <= coins <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "costs = [1,3,2,4,1], coins = 7",
                        "output": "4",
                        "explanation": "The boy can purchase ice cream bars with costs 1, 3, 2, and 1, totaling 7 coins."
                    },
                    {
                        "input": "costs = [10,6,8,7,7,8], coins = 5",
                        "output": "0",
                        "explanation": "The boy doesn't have enough coins to buy any ice cream bars."
                    },
                    {
                        "input": "costs = [1,6,3,1,2,5], coins = 20",
                        "output": "6",
                        "explanation": "The boy can afford to buy all the ice cream bars, with a total cost of 18 coins."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "It is always optimal to buy the least expensive ice cream bar first.",
            "Sort the prices so that the cheapest ice cream bar comes first."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxIceCream(vector<int>& costs, int coins) {\n    std::ranges::sort(costs);\n\n    for (int i = 0; i < costs.size(); ++i)\n      if (coins >= costs[i])\n        coins -= costs[i];\n      else\n        return i;\n\n    return costs.size();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxIceCream(int[] costs, int coins) {\n    Arrays.sort(costs);\n\n    for (int i = 0; i < costs.length; ++i)\n      if (coins >= costs[i])\n        coins -= costs[i];\n      else\n        return i;\n\n    return costs.length;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxIceCream(self, costs: List[int], coins: int) -> int:\n    for i, cost in enumerate(sorted(costs)):\n      if coins >= cost:\n        coins -= cost\n      else:\n        return i\n\n    return len(costs)\n",
                "lang_text": "py"
            }
        }
    }
}