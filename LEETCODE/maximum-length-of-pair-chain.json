{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "646",
            "title": "Maximum Length of Pair Chain",
            "titleSlug": "maximum-length-of-pair-chain",
            "content": "<p>You are given an array of <code>n</code> pairs <code>pairs</code> where <code>pairs[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> and <code>left<sub>i</sub> &lt; right<sub>i</sub></code>.</p>\n\n<p>A pair <code>p2 = [c, d]</code> <strong>follows</strong> a pair <code>p1 = [a, b]</code> if <code>b &lt; c</code>. A <strong>chain</strong> of pairs can be formed in this fashion.</p>\n\n<p>Return <em>the length longest chain which can be formed</em>.</p>\n\n<p>You do not need to use up all the given intervals. You can select pairs in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[2,3],[3,4]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest chain is [1,2] -&gt; [3,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[7,8],[4,5]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest chain is [1,2] -&gt; [4,5] -&gt; [7,8].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == pairs.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4435,
            "dislikes": 129,
            "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Non-decreasing Subsequences\", \"titleSlug\": \"non-decreasing-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Non-decreasing Subarray From Two Arrays\", \"titleSlug\": \"longest-non-decreasing-subarray-from-two-arrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"219.1K\", \"totalSubmission\": \"367.7K\", \"totalAcceptedRaw\": 219110, \"totalSubmissionRaw\": 367654, \"acRate\": \"59.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given an array of `n` pairs `pairs` where `pairs[i] = [left<sub>i</sub>, right<sub>i</sub>]` and `left<sub>i</sub> < right<sub>i</sub>`. A pair `p2 = [c, d]` follows a pair `p1 = [a, b]` if `b < c`.  A chain of pairs can be formed in this fashion.  Find the length of the longest chain you can create from the given pairs. You can select pairs in any order and you don't have to use all pairs.",
                "constraints": [
                    "n == pairs.length",
                    "1 <= n <= 1000",
                    "-1000 <= left<sub>i</sub> < right<sub>i</sub> <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[2,3],[3,4]]",
                        "output": "2",
                        "explanation": "The longest chain is [1,2] -> [3,4]. We pick the first and third pair to form the chain."
                    },
                    {
                        "input": "[[1,2],[7,8],[4,5]]",
                        "output": "3",
                        "explanation": "The longest chain is [1,2] -> [4,5] -> [7,8].  Sorting the pairs and selecting each subsequent pair creates the longest chain here."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-increasing-subsequence",
                "title": "Longest Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "non-decreasing-subsequences",
                "title": "Non-decreasing Subsequences",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-non-decreasing-subarray-from-two-arrays",
                "title": "Longest Non-decreasing Subarray From Two Arrays",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ]
    }
}