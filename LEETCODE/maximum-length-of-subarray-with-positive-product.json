{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1567",
            "title": "Maximum Length of Subarray With Positive Product",
            "titleSlug": "maximum-length-of-subarray-with-positive-product",
            "content": "<p>Given an array of integers <code>nums</code>, find the maximum length of a subarray where the product of all its elements is positive.</p>\n\n<p>A subarray of an array is a consecutive sequence of zero or more values taken out of that array.</p>\n\n<p>Return <em>the maximum length of a subarray with positive product</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,-2,-3,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The array nums already has a positive product of 24.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,-2,-3,-4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that&#39;ll make the product 0 which is not positive.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-2,-3,0,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest subarray with positive product is [-1,-2] or [-2,-3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2346,
            "dislikes": 63,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"90.3K\", \"totalSubmission\": \"204.5K\", \"totalAcceptedRaw\": 90272, \"totalSubmissionRaw\": 204515, \"acRate\": \"44.1%\"}",
            "hints": [
                "Split the whole array into subarrays by zeroes since a subarray with positive product cannot contain any zero.",
                "If the subarray has even number of negative numbers, the whole subarray has positive product.",
                "Otherwise, we have two choices, either - remove the prefix till the first negative element in this subarray, or remove the suffix starting from the last negative element in this subarray."
            ],
            "rephrased": {
                "body": "Given an array of integers `nums`, determine the maximum length of a contiguous subarray within `nums` where the product of all its elements is positive.\n\nA subarray is defined as a consecutive sequence of elements extracted from the original array (including empty subarray).\n\nReturn the maximum length achievable for a positive-product subarray.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-10^9 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1,-2,-3,4]",
                        "output": "4",
                        "explanation": "The entire array [1, -2, -3, 4] has a positive product of 24."
                    },
                    {
                        "input": "[0,1,-2,-3,-4]",
                        "output": "3",
                        "explanation": "The longest subarray with a positive product is [1, -2, -3], which has a product of 6.  Note that including 0 would result in a zero product, which is not positive."
                    },
                    {
                        "input": "[-1,-2,-3,0,1]",
                        "output": "2",
                        "explanation": "The longest subarray with a positive product is either [-1, -2] or [-2, -3], both having a product of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Split the whole array into subarrays by zeroes since a subarray with positive product cannot contain any zero.",
            "If the subarray has even number of negative numbers, the whole subarray has positive product.",
            "Otherwise, we have two choices, either - remove the prefix till the first negative element in this subarray, or remove the suffix starting from the last negative element in this subarray."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int getMaxLen(vector<int>& nums) {\n    int ans = 0;\n    int neg = 0;  // max length of the subarray ending with num so far\n    int pos = 0;  // max length of the subarray ending with num so far\n\n    for (const int num : nums) {\n      pos = num == 0 ? 0 : pos + 1;\n      neg = num == 0 || neg == 0 ? 0 : neg + 1;\n      if (num < 0)\n        swap(pos, neg);\n      ans = max(ans, pos);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int getMaxLen(int[] nums) {\n    int ans = 0;\n    int neg = 0; // max length of the subarray ending with num so far\n    int pos = 0; // max length of the subarray ending with num so far\n\n    for (final int num : nums) {\n      pos = num == 0 ? 0 : pos + 1;\n      neg = num == 0 || neg == 0 ? 0 : neg + 1;\n      if (num < 0) {\n        final int temp = pos;\n        pos = neg;\n        neg = temp;\n      }\n      ans = Math.max(ans, pos);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getMaxLen(self, nums: List[int]) -> int:\n    ans = 0\n    neg = 0  # max length of the subarray ending with num so far\n    pos = 0  # max length of the subarray ending with num so far\n\n    for num in nums:\n      pos = 0 if num == 0 else pos + 1\n      neg = 0 if num == 0 or neg == 0 else neg + 1\n      if num < 0:\n        pos, neg = neg, pos\n      ans = max(ans, pos)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}