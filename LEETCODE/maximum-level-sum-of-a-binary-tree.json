{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1161",
            "title": "Maximum Level Sum of a Binary Tree",
            "titleSlug": "maximum-level-sum-of-a-binary-tree",
            "content": "<p>Given the <code>root</code> of a binary tree, the level of its root is <code>1</code>, the level of its children is <code>2</code>, and so on.</p>\n\n<p>Return the <strong>smallest</strong> level <code>x</code> such that the sum of all the values of nodes at level <code>x</code> is <strong>maximal</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/05/03/capture.JPG\" style=\"width: 200px; height: 175px;\" />\n<pre>\n<strong>Input:</strong> root = [1,7,0,7,-8,null,null]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>\nLevel 1 sum = 1.\nLevel 2 sum = 7 + 0 = 7.\nLevel 3 sum = 7 + -8 = -1.\nSo we return the level with the maximum sum which is level 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [989,null,10250,98693,-89388,null,null,null,-32127]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3386,
            "dislikes": 97,
            "similarQuestions": "[{\"title\": \"Kth Largest Sum in a Binary Tree\", \"titleSlug\": \"kth-largest-sum-in-a-binary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Cousins in Binary Tree II\", \"titleSlug\": \"cousins-in-binary-tree-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"239.6K\", \"totalSubmission\": \"356.3K\", \"totalAcceptedRaw\": 239550, \"totalSubmissionRaw\": 356262, \"acRate\": \"67.2%\"}",
            "hints": [
                "Calculate the sum for each level then find the level with the maximum sum.",
                "How can you traverse the tree ?",
                "How can you sum up the values for every level ?",
                "Use DFS or BFS to traverse the tree keeping the level of each node, and sum up those values with a map or a frequency array."
            ],
            "rephrased": {
                "body": "Given the root of a binary tree, where the level of the root is 1, and the level of its children is 2, and so on, return the smallest level x such that the sum of all the values of nodes at level x is maximal.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 10<sup>4</sup>].",
                    "-10<sup>5</sup> <= Node.val <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "[1,7,0,7,-8,null,null]",
                        "output": "2",
                        "explanation": "Level 1 sum = 1. Level 2 sum = 7 + 0 = 7. Level 3 sum = 7 + -8 = -1.  The level with the maximum sum is level 2."
                    },
                    {
                        "input": "[989,null,10250,98693,-89388,null,null,null,-32127]",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "kth-largest-sum-in-a-binary-tree",
                "title": "Kth Largest Sum in a Binary Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "cousins-in-binary-tree-ii",
                "title": "Cousins in Binary Tree II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Calculate the sum for each level then find the level with the maximum sum.",
            "How can you traverse the tree ?",
            "How can you sum up the values for every level ?",
            "Use DFS or BFS to traverse the tree keeping the level of each node, and sum up those values with a map or a frequency array."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxLevelSum(TreeNode* root) {\n    int ans = 1;\n    int maxLevelSum = INT_MIN;\n    queue<TreeNode*> q{{root}};\n\n    for (int level = 1; !q.empty(); ++level) {\n      int levelSum = 0;\n      for (int sz = q.size(); sz > 0; --sz) {\n        TreeNode* node = q.front();\n        q.pop();\n        levelSum += node->val;\n        if (node->left != nullptr)\n          q.push(node->left);\n        if (node->right != nullptr)\n          q.push(node->right);\n      }\n      if (maxLevelSum < levelSum) {\n        maxLevelSum = levelSum;\n        ans = level;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxLevelSum(TreeNode root) {\n    int ans = 1;\n    int maxLevelSum = Integer.MIN_VALUE;\n    Queue<TreeNode> q = new LinkedList<>(Arrays.asList(root));\n\n    for (int level = 1; !q.isEmpty(); ++level) {\n      int levelSum = 0;\n      for (int sz = q.size(); sz > 0; --sz) {\n        TreeNode node = q.poll();\n        levelSum += node.val;\n        if (node.left != null)\n          q.offer(node.left);\n        if (node.right != null)\n          q.offer(node.right);\n      }\n      if (maxLevelSum < levelSum) {\n        maxLevelSum = levelSum;\n        ans = level;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxLevelSum(self, root: Optional[TreeNode]) -> int:\n    ans = 1\n    maxLevelSum = -math.inf\n    q = collections.deque([root])\n\n    level = 1\n    while q:\n      levelSum = 0\n      for _ in range(len(q)):\n        node = q.popleft()\n        levelSum += node.val\n        if node.left:\n          q.append(node.left)\n        if node.right:\n          q.append(node.right)\n      if maxLevelSum < levelSum:\n        maxLevelSum = levelSum\n        ans = level\n      level += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}