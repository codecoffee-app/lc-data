{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1975",
            "title": "Maximum Matrix Sum",
            "titleSlug": "maximum-matrix-sum",
            "content": "<p>You are given an <code>n x n</code> integer <code>matrix</code>. You can do the following operation <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose any two <strong>adjacent</strong> elements of <code>matrix</code> and <strong>multiply</strong> each of them by <code>-1</code>.</li>\n</ul>\n\n<p>Two elements are considered <strong>adjacent</strong> if and only if they share a <strong>border</strong>.</p>\n\n<p>Your goal is to <strong>maximize</strong> the summation of the matrix&#39;s elements. Return <em>the <strong>maximum</strong> sum of the matrix&#39;s elements using the operation mentioned above.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/16/pc79-q2ex1.png\" style=\"width: 401px; height: 81px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,-1],[-1,1]]\n<strong>Output:</strong> 4\n<b>Explanation:</b> We can follow the following steps to reach sum equals 4:\n- Multiply the 2 elements in the first row by -1.\n- Multiply the 2 elements in the first column by -1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/16/pc79-q2ex2.png\" style=\"width: 321px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]\n<strong>Output:</strong> 16\n<b>Explanation:</b> We can follow the following step to reach sum equals 16:\n- Multiply the 2 last elements in the second row by -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length == matrix[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 250</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= matrix[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 529,
            "dislikes": 19,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"17K\", \"totalSubmission\": \"34.6K\", \"totalAcceptedRaw\": 17009, \"totalSubmissionRaw\": 34590, \"acRate\": \"49.2%\"}",
            "hints": [
                "Try to use the operation so that each row has only one negative number.",
                "If you have only one negative element you cannot convert it to positive."
            ],
            "rephrased": {
                "body": "You are given an n x n integer matrix. You can perform the following operation any number of times:\n\nChoose any two adjacent elements of the matrix and multiply each of them by -1. Two elements are considered adjacent if and only if they share a border.\n\nYour goal is to maximize the summation of the matrix's elements. Return the maximum sum of the matrix's elements using the operation mentioned above.",
                "constraints": [
                    "n == matrix.length == matrix[i].length",
                    "2 <= n <= 250",
                    "-10^5 <= matrix[i][j] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[[1,-1],[-1,1]]",
                        "output": "4",
                        "explanation": "By multiplying the two elements in the first row by -1, and then the two elements in the first column by -1, the matrix becomes [[-1, 1], [1, 1]], resulting in a sum of 4."
                    },
                    {
                        "input": "[[1,2,3],[-1,-2,-3],[1,2,3]]",
                        "output": "16",
                        "explanation": "By multiplying the two last elements in the second row by -1, the matrix becomes [[1, 2, 3], [-1, 2, 3], [1, 2, 3]], resulting in a sum of 16."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Try to use the operation so that each row has only one negative number.",
            "If you have only one negative element you cannot convert it to positive."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maxMatrixSum(vector<vector<int>>& matrix) {\n    long long absSum = 0;\n    int minAbs = INT_MAX;\n    int oddNeg = 0;  // 0 := even neg, 1 := odd neg\n\n    for (const vector<int>& row : matrix)\n      for (const int num : row) {\n        absSum += abs(num);\n        minAbs = min(minAbs, abs(num));\n        if (num < 0)\n          oddNeg ^= 1;\n      }\n\n    return absSum - oddNeg * minAbs * 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maxMatrixSum(int[][] matrix) {\n    long absSum = 0;\n    int minAbs = Integer.MAX_VALUE;\n    int oddNeg = 0; // 0 := even neg, 1 := odd neg\n\n    for (int[] row : matrix)\n      for (final int num : row) {\n        absSum += Math.abs(num);\n        minAbs = Math.min(minAbs, Math.abs(num));\n        if (num < 0)\n          oddNeg ^= 1;\n      }\n\n    return absSum - oddNeg * minAbs * 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxMatrixSum(self, matrix: List[List[int]]) -> int:\n    absSum = 0\n    minAbs = math.inf\n    oddNeg = 0  # 0 := even neg, 1 := odd neg\n\n    for row in matrix:\n      for num in row:\n        absSum += abs(num)\n        minAbs = min(minAbs, abs(num))\n        if num < 0:\n          oddNeg ^= 1\n\n    return absSum - oddNeg * minAbs * 2\n",
                "lang_text": "py"
            }
        }
    }
}