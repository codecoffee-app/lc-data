{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1111",
            "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
            "titleSlug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
            "content": "<p>A string is a <em>valid parentheses string</em>&nbsp;(denoted VPS) if and only if it consists of <code>&quot;(&quot;</code> and <code>&quot;)&quot;</code> characters only, and:</p>\r\n\r\n<ul>\r\n\t<li>It is the empty string, or</li>\r\n\t<li>It can be written as&nbsp;<code>AB</code>&nbsp;(<code>A</code>&nbsp;concatenated with&nbsp;<code>B</code>), where&nbsp;<code>A</code>&nbsp;and&nbsp;<code>B</code>&nbsp;are VPS&#39;s, or</li>\r\n\t<li>It can be written as&nbsp;<code>(A)</code>, where&nbsp;<code>A</code>&nbsp;is a VPS.</li>\r\n</ul>\r\n\r\n<p>We can&nbsp;similarly define the <em>nesting depth</em> <code>depth(S)</code> of any VPS <code>S</code> as follows:</p>\r\n\r\n<ul>\r\n\t<li><code>depth(&quot;&quot;) = 0</code></li>\r\n\t<li><code>depth(A + B) = max(depth(A), depth(B))</code>, where <code>A</code> and <code>B</code> are VPS&#39;s</li>\r\n\t<li><code>depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A)</code>, where <code>A</code> is a VPS.</li>\r\n</ul>\r\n\r\n<p>For example,&nbsp; <code>&quot;&quot;</code>,&nbsp;<code>&quot;()()&quot;</code>, and&nbsp;<code>&quot;()(()())&quot;</code>&nbsp;are VPS&#39;s (with nesting depths 0, 1, and 2), and <code>&quot;)(&quot;</code> and <code>&quot;(()&quot;</code> are not VPS&#39;s.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Given a VPS <font face=\"monospace\">seq</font>, split it into two disjoint subsequences <code>A</code> and <code>B</code>, such that&nbsp;<code>A</code> and <code>B</code> are VPS&#39;s (and&nbsp;<code>A.length + B.length = seq.length</code>).</p>\r\n\r\n<p>Now choose <strong>any</strong> such <code>A</code> and <code>B</code> such that&nbsp;<code>max(depth(A), depth(B))</code> is the minimum possible value.</p>\r\n\r\n<p>Return an <code>answer</code> array (of length <code>seq.length</code>) that encodes such a&nbsp;choice of <code>A</code> and <code>B</code>:&nbsp; <code>answer[i] = 0</code> if <code>seq[i]</code> is part of <code>A</code>, else <code>answer[i] = 1</code>.&nbsp; Note that even though multiple answers may exist, you may return any of them.</p>\r\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> seq = &quot;(()())&quot;\n<strong>Output:</strong> [0,1,1,1,1,0]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> seq = &quot;()(())()&quot;\n<strong>Output:</strong> [0,0,0,1,1,0,1,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= seq.size &lt;= 10000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 398,
            "dislikes": 1625,
            "similarQuestions": "[{\"title\": \"Maximum Nesting Depth of the Parentheses\", \"titleSlug\": \"maximum-nesting-depth-of-the-parentheses\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.8K\", \"totalSubmission\": \"34.2K\", \"totalAcceptedRaw\": 24779, \"totalSubmissionRaw\": 34213, \"acRate\": \"72.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "A valid parentheses string (VPS) consists of '(' and ')' characters only and satisfies one of the following conditions:\n\n1.  It is the empty string.\n2.  It can be written as AB, where A and B are VPS's.\n3.  It can be written as (A), where A is a VPS.\n\nThe nesting depth of a VPS S, denoted as depth(S), is defined as:\n\n1.  depth(\"\") = 0\n2.  depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's\n3.  depth(\"(\" + A + \")\") = 1 + depth(A), where A is a VPS.\n\nGiven a VPS `seq`, split it into two disjoint subsequences A and B, such that A and B are VPS's (and A.length + B.length = seq.length).\n\nFind any such A and B such that max(depth(A), depth(B)) is minimized.\n\nReturn an `answer` array (of length `seq.length`) that encodes the choice of A and B: `answer[i] = 0` if `seq[i]` is part of A, else `answer[i] = 1`. Multiple answers may exist; return any valid one.",
                "constraints": [
                    "1 <= seq.size <= 10000"
                ],
                "testcases": [
                    {
                        "input": "(()())",
                        "output": "[0,1,1,1,1,0]",
                        "explanation": null
                    },
                    {
                        "input": "()(())()",
                        "output": "[0,0,0,1,1,0,1,1]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-nesting-depth-of-the-parentheses",
                "title": "Maximum Nesting Depth of the Parentheses",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> maxDepthAfterSplit(string seq) {\n    vector<int> ans;\n    int depth = 1;\n\n    // Put all odd-depth parentheses in one group and even-depth parentheses in\n    // the other group.\n    for (const char c : seq)\n      if (c == '(')\n        ans.push_back(++depth % 2);\n      else\n        ans.push_back(depth-- % 2);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] maxDepthAfterSplit(String seq) {\n    int[] ans = new int[seq.length()];\n    int depth = 1;\n\n    // Put all odd-depth parentheses in one group and even-depth parentheses in the other group.\n    for (int i = 0; i < seq.length(); ++i)\n      if (seq.charAt(i) == '(')\n        ans[i] = ++depth % 2;\n      else\n        ans[i] = depth-- % 2;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxDepthAfterSplit(self, seq: str) -> List[int]:\n    ans = []\n    depth = 1\n\n    # Put all odd-depth parentheses in one group and even-depth parentheses in the other group.\n    for c in seq:\n      if c == '(':\n        depth += 1\n        ans.append(depth % 2)\n      else:\n        ans.append(depth % 2)\n        depth -= 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}