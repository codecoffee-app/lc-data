{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1594",
            "title": "Maximum Non Negative Product in a Matrix",
            "titleSlug": "maximum-non-negative-product-in-a-matrix",
            "content": "<p>You are given a <code>m x n</code> matrix <code>grid</code>. Initially, you are located at the top-left corner <code>(0, 0)</code>, and in each step, you can only <strong>move right or down</strong> in the matrix.</p>\n\n<p>Among all possible paths starting from the top-left corner <code>(0, 0)</code> and ending in the bottom-right corner <code>(m - 1, n - 1)</code>, find the path with the <strong>maximum non-negative product</strong>. The product of a path is the product of all integers in the grid cells visited along the path.</p>\n\n<p>Return the <em>maximum non-negative product <strong>modulo</strong> </em><code>10<sup>9</sup> + 7</code>. <em>If the maximum product is <strong>negative</strong>, return </em><code>-1</code>.</p>\n\n<p>Notice that the modulo is performed after getting the maximum product.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/23/product1.jpg\" style=\"width: 244px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/23/product2.jpg\" style=\"width: 244px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,-2,1],[1,-2,1],[3,-4,1]]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Maximum non-negative product is shown (1 * 1 * -2 * -4 * 1 = 8).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/23/product3.jpg\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,3],[0,-4]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Maximum non-negative product is shown (1 * 0 * -4 = 0).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 15</code></li>\n\t<li><code>-4 &lt;= grid[i][j] &lt;= 4</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 800,
            "dislikes": 39,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.9K\", \"totalSubmission\": \"68.4K\", \"totalAcceptedRaw\": 22855, \"totalSubmissionRaw\": 68358, \"acRate\": \"33.4%\"}",
            "hints": [
                "Use Dynamic programming. Keep the highest value and lowest value you can achieve up to a point."
            ],
            "rephrased": {
                "body": "Given a `m x n` matrix `grid`, find the path from the top-left corner `(0, 0)` to the bottom-right corner `(m - 1, n - 1)` with the maximum non-negative product. You can only move right or down. The product of a path is the product of all integers in the grid cells visited along the path.\n\nReturn the maximum non-negative product modulo `10^9 + 7`. If the maximum product is negative, return `-1`.",
                "constraints": [
                    "`m == grid.length`",
                    "`n == grid[i].length`",
                    "`1 <= m, n <= 15`",
                    "`-4 <= grid[i][j] <= 4`"
                ],
                "testcases": [
                    {
                        "input": "grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]",
                        "output": "-1",
                        "explanation": "It is not possible to obtain a non-negative product along any path from (0, 0) to (2, 2)."
                    },
                    {
                        "input": "grid = [[1,-2,1],[1,-2,1],[3,-4,1]]",
                        "output": "8",
                        "explanation": "The maximum non-negative product is 8 (1 * 1 * -2 * -4 * 1 = 8)."
                    },
                    {
                        "input": "grid = [[1,3],[0,-4]]",
                        "output": "0",
                        "explanation": "The maximum non-negative product is 0 (1 * 0 * -4 = 0)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use Dynamic programming. Keep the highest value and lowest value you can achieve up to a point."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxProductPath(vector<vector<int>>& grid) {\n    constexpr int kMod = 1'000'000'007;\n    const int m = grid.size();\n    const int n = grid[0].size();\n    // dpMin[i][j] := the min product from (0, 0) to (i, j)\n    // dpMax[i][j] := the max product from (0, 0) to (i, j)\n    vector<vector<long>> dpMin(m, vector<long>(n));\n    vector<vector<long>> dpMax(m, vector<long>(n));\n\n    dpMin[0][0] = dpMax[0][0] = grid[0][0];\n\n    for (int i = 1; i < m; ++i)\n      dpMin[i][0] = dpMax[i][0] = dpMin[i - 1][0] * grid[i][0];\n\n    for (int j = 1; j < n; ++j)\n      dpMin[0][j] = dpMax[0][j] = dpMin[0][j - 1] * grid[0][j];\n\n    for (int i = 1; i < m; ++i)\n      for (int j = 1; j < n; ++j)\n        if (grid[i][j] < 0) {\n          dpMin[i][j] = max(dpMax[i - 1][j], dpMax[i][j - 1]) * grid[i][j];\n          dpMax[i][j] = min(dpMin[i - 1][j], dpMin[i][j - 1]) * grid[i][j];\n        } else {\n          dpMin[i][j] = min(dpMin[i - 1][j], dpMin[i][j - 1]) * grid[i][j];\n          dpMax[i][j] = max(dpMax[i - 1][j], dpMax[i][j - 1]) * grid[i][j];\n        }\n\n    const long maxi = max(dpMin.back().back(), dpMax.back().back());\n    return maxi < 0 ? -1 : maxi % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxProductPath(int[][] grid) {\n    final int kMod = 1_000_000_007;\n    final int m = grid.length;\n    final int n = grid[0].length;\n    // dpMin[i][j] := the min product from (0, 0) to (i, j)\n    // dpMax[i][j] := the max product from (0, 0) to (i, j)\n    long[][] dpMin = new long[m][n];\n    long[][] dpMax = new long[m][n];\n\n    dpMin[0][0] = dpMax[0][0] = grid[0][0];\n\n    for (int i = 1; i < m; ++i)\n      dpMin[i][0] = dpMax[i][0] = dpMin[i - 1][0] * grid[i][0];\n\n    for (int j = 1; j < n; ++j)\n      dpMin[0][j] = dpMax[0][j] = dpMin[0][j - 1] * grid[0][j];\n\n    for (int i = 1; i < m; ++i)\n      for (int j = 1; j < n; ++j)\n        if (grid[i][j] < 0) {\n          dpMin[i][j] = Math.max(dpMax[i - 1][j], dpMax[i][j - 1]) * grid[i][j];\n          dpMax[i][j] = Math.min(dpMin[i - 1][j], dpMin[i][j - 1]) * grid[i][j];\n        } else {\n          dpMin[i][j] = Math.min(dpMin[i - 1][j], dpMin[i][j - 1]) * grid[i][j];\n          dpMax[i][j] = Math.max(dpMax[i - 1][j], dpMax[i][j - 1]) * grid[i][j];\n        }\n\n    final long max = Math.max(dpMin[m - 1][n - 1], dpMax[m - 1][n - 1]);\n    return max < 0 ? -1 : (int) (max % kMod);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}