{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1601",
            "title": "Maximum Number of Achievable Transfer Requests",
            "titleSlug": "maximum-number-of-achievable-transfer-requests",
            "content": "<p>We have <code>n</code> buildings numbered from <code>0</code> to <code>n - 1</code>. Each building has a number of employees. It&#39;s transfer season, and some employees want to change the building they reside in.</p>\n\n<p>You are given an array <code>requests</code> where <code>requests[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> represents an employee&#39;s request to transfer from building <code>from<sub>i</sub></code> to building <code>to<sub>i</sub></code>.</p>\n\n<p><strong>All buildings are full</strong>, so a list of requests is achievable only if for each building, the <strong>net change in employee transfers is zero</strong>. This means the number of employees <strong>leaving</strong> is <strong>equal</strong> to the number of employees <strong>moving in</strong>. For example if <code>n = 3</code> and two employees are leaving building <code>0</code>, one is leaving building <code>1</code>, and one is leaving building <code>2</code>, there should be two employees moving to building <code>0</code>, one employee moving to building <code>1</code>, and one employee moving to building <code>2</code>.</p>\n\n<p>Return <em>the maximum number of achievable requests</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/10/move1.jpg\" style=\"width: 600px; height: 406px;\" />\n<pre>\n<strong>Input:</strong> n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]\n<strong>Output:</strong> 5\n<strong>Explantion:</strong> Let&#39;s see the requests:\nFrom building 0 we have employees x and y and both want to move to building 1.\nFrom building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\nFrom building 2 we have employee z and they want to move to building 0.\nFrom building 3 we have employee c and they want to move to building 4.\nFrom building 4 we don&#39;t have any requests.\nWe can achieve the requests of users x and b by swapping their places.\nWe can achieve the requests of users y, a and z by swapping the places in the 3 buildings.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/10/move2.jpg\" style=\"width: 450px; height: 327px;\" />\n<pre>\n<strong>Input:</strong> n = 3, requests = [[0,0],[1,2],[2,1]]\n<strong>Output:</strong> 3\n<strong>Explantion:</strong> Let&#39;s see the requests:\nFrom building 0 we have employee x and they want to stay in the same building 0.\nFrom building 1 we have employee y and they want to move to building 2.\nFrom building 2 we have employee z and they want to move to building 1.\nWe can achieve all the requests. </pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>1 &lt;= requests.length &lt;= 16</code></li>\n\t<li><code>requests[i].length == 2</code></li>\n\t<li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1373,
            "dislikes": 71,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"53.6K\", \"totalSubmission\": \"82.9K\", \"totalAcceptedRaw\": 53557, \"totalSubmissionRaw\": 82873, \"acRate\": \"64.6%\"}",
            "hints": [
                "Think brute force",
                "When is a subset of requests okay?"
            ],
            "rephrased": {
                "body": "Given `n` buildings numbered from 0 to `n - 1`, and a list of employee transfer requests represented by `requests`, where `requests[i] = [from_i, to_i]`.  A request involves an employee moving from building `from_i` to building `to_i`. All buildings are initially full. A list of requests is achievable if and only if for each building, the net change in employee transfers is zero, meaning the number of employees leaving the building equals the number of employees moving into the building. Determine and return the maximum number of achievable requests.",
                "constraints": [
                    "1 <= n <= 20",
                    "1 <= requests.length <= 16",
                    "requests[i].length == 2",
                    "0 <= from_i, to_i < n"
                ],
                "testcases": [
                    {
                        "input": "n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]",
                        "output": "5",
                        "explanation": "Achieving 5 requests requires a series of employee swaps to satisfy the net-zero transfer condition for each building. Some possible swaps include employees from building 0 and building 1, and a circular swap among employees from buildings 0, 1, and 2. The request from buildings 3 and 4 is also satisfied by individual transfer"
                    },
                    {
                        "input": "n = 3, requests = [[0,0],[1,2],[2,1]]",
                        "output": "3",
                        "explanation": "All requests are achievable. The employee from building 0 stays in building 0. The employee from building 1 moves to building 2, and the employee from building 2 moves to building 1. This maintains a net-zero transfer for each building."
                    },
                    {
                        "input": "n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]",
                        "output": "4",
                        "explanation": "All requests can be achieved by a cyclic transfer among the buildings. One employee leaves building 0 and moves to building 3, one leaves building 3 moves to building 1, one leaves building 1 and moves to building 2 and one leaves building 2 and moves to building 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Think brute force",
            "When is a subset of requests okay?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumRequests(int n, vector<vector<int>>& requests) {\n    int ans = 0;\n    vector<int> degrees(n);  // degrees[i] := degrees of building i\n\n    function<void(int, int)> dfs = [&](int i, int processedReqs) {\n      if (i == requests.size()) {\n        if (all_of(degrees.begin(), degrees.end(),\n                   [](int d) { return d == 0; }))\n          ans = max(ans, processedReqs);\n        return;\n      }\n\n      // Skip requests[i]\n      dfs(i + 1, processedReqs);\n\n      // Process requests[i]\n      --degrees[requests[i][0]];\n      ++degrees[requests[i][1]];\n      dfs(i + 1, processedReqs + 1);\n      --degrees[requests[i][1]];\n      ++degrees[requests[i][0]];\n    };\n\n    dfs(0, 0);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumRequests(int n, int[][] requests) {\n    dfs(0, 0, requests, new int[n]);\n\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private void dfs(int i, int processedReqs, int[][] requests, int[] degrees) {\n    if (i == requests.length) {\n      if (Arrays.stream(degrees).allMatch(d -> d == 0))\n        ans = Math.max(ans, processedReqs);\n      return;\n    }\n\n    // Skip requests[i]\n    dfs(i + 1, processedReqs, requests, degrees);\n\n    // Process requests[i]\n    --degrees[requests[i][0]];\n    ++degrees[requests[i][1]];\n    dfs(i + 1, processedReqs + 1, requests, degrees);\n    --degrees[requests[i][1]];\n    ++degrees[requests[i][0]];\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}