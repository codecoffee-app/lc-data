{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2861",
            "title": "Maximum Number of Alloys",
            "titleSlug": "maximum-number-of-alloys",
            "content": "<p>You are the owner of a company that creates alloys using various types of metals. There are <code>n</code> different types of metals available, and you have access to <code>k</code> machines that can be used to create alloys. Each machine requires a specific amount of each metal type to create an alloy.</p>\n\n<p>For the <code>i<sup>th</sup></code> machine to create an alloy, it needs <code>composition[i][j]</code> units of metal of type <code>j</code>. Initially, you have <code>stock[i]</code> units of metal type <code>i</code>, and purchasing one unit of metal type <code>i</code> costs <code>cost[i]</code> coins.</p>\n\n<p>Given integers <code>n</code>, <code>k</code>, <code>budget</code>, a <strong>1-indexed</strong> 2D array <code>composition</code>, and <strong>1-indexed</strong> arrays <code>stock</code> and <code>cost</code>, your goal is to <strong>maximize</strong> the number of alloys the company can create while staying within the budget of <code>budget</code> coins.</p>\n\n<p><strong>All alloys must be created with the same machine.</strong></p>\n\n<p>Return <em>the maximum number of alloys that the company can create</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> It is optimal to use the 1<sup>st</sup> machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 2 units of metal of the 1<sup>st</sup> type.\n- 2 units of metal of the 2<sup>nd</sup> type.\n- 2 units of metal of the 3<sup>rd</sup> type.\nIn total, we need 2 * 1 + 2 * 2 + 2 * 3 = 12 coins, which is smaller than or equal to budget = 15.\nNotice that we have 0 units of metal of each type and we have to buy all the required units of metal.\nIt can be proven that we can create at most 2 alloys.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> It is optimal to use the 2<sup>nd</sup> machine to create alloys.\nTo create 5 alloys we need to buy:\n- 5 units of metal of the 1<sup>st</sup> type.\n- 5 units of metal of the 2<sup>nd</sup> type.\n- 0 units of metal of the 3<sup>rd</sup> type.\nIn total, we need 5 * 1 + 5 * 2 + 0 * 3 = 15 coins, which is smaller than or equal to budget = 15.\nIt can be proven that we can create at most 5 alloys.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, k = 3, budget = 10, composition = [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> It is optimal to use the 3<sup>rd</sup> machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 1 unit of metal of the 1<sup>st</sup> type.\n- 1 unit of metal of the 2<sup>nd</sup> type.\nIn total, we need 1 * 5 + 1 * 5 = 10 coins, which is smaller than or equal to budget = 10.\nIt can be proven that we can create at most 2 alloys.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, k &lt;= 100</code></li>\n\t<li><code>0 &lt;= budget &lt;= 10<sup>8</sup></code></li>\n\t<li><code>composition.length == k</code></li>\n\t<li><code>composition[i].length == n</code></li>\n\t<li><code>1 &lt;= composition[i][j] &lt;= 100</code></li>\n\t<li><code>stock.length == cost.length == n</code></li>\n\t<li><code>0 &lt;= stock[i] &lt;= 10<sup>8</sup></code></li>\n\t<li><code>1 &lt;= cost[i] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 268,
            "dislikes": 43,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.8K\", \"totalSubmission\": \"36K\", \"totalAcceptedRaw\": 13796, \"totalSubmissionRaw\": 36040, \"acRate\": \"38.3%\"}",
            "hints": [
                "Use binary search to find the answer."
            ],
            "rephrased": {
                "body": "You manage a company that produces alloys using different metals. You have `n` types of metals and `k` machines. Each machine requires a specific amount of each metal to create an alloy. For the `i`-th machine, `composition[i][j]` units of metal type `j` are needed.  You initially have `stock[i]` units of metal type `i`, and buying one unit of metal type `i` costs `cost[i]` coins.  Given `n`, `k`, `budget`, the `composition` array, `stock` array, and `cost` array, determine the maximum number of alloys you can create within the given `budget`.  All alloys must be made using the *same* machine.",
                "constraints": [
                    "1 <= n, k <= 100",
                    "0 <= budget <= 10^8",
                    "composition.length == k",
                    "composition[i].length == n",
                    "1 <= composition[i][j] <= 100",
                    "stock.length == cost.length == n",
                    "0 <= stock[i] <= 10^8",
                    "1 <= cost[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3]",
                        "output": "2",
                        "explanation": "Using the first machine is optimal. Creating 2 alloys requires buying 2 units of each metal type 1, 2, and 3. The total cost is 2 * 1 + 2 * 2 + 2 * 3 = 12, which is within the budget of 15. You start with 0 of each metal, so you have to buy all the metal needed.  The maximum number of alloys that can be created is 2."
                    },
                    {
                        "input": "n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3]",
                        "output": "5",
                        "explanation": "Using the second machine is optimal. Creating 5 alloys requires buying 5 units of metal types 1 and 2 and 0 units of metal type 3. The total cost is 5 * 1 + 5 * 2 + 0 * 3 = 15, which is within the budget of 15. Because 100 units of the third material are already available, no additional purchases are required of it. The maximum number of alloys that can be created is 5."
                    },
                    {
                        "input": "n = 2, k = 3, budget = 10, composition = [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5]",
                        "output": "2",
                        "explanation": "Using the third machine is optimal. Creating 2 alloys requires buying 1 unit of metal type 1 and 1 unit of metal type 2. The total cost is 1 * 5 + 1 * 5 = 10, which is within the budget of 10. Considering that you start with one of each material, and the machine requires 1 unit of each material per alloy, you will have to buy one additional unit to make two alloys."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use binary search to find the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxNumberOfAlloys(int n, int k, int budget,\n                        vector<vector<int>>& composition, vector<int>& stock,\n                        vector<int>& cost) {\n    int l = 1;\n    int r = 1'000'000'000;\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (isPossible(n, budget, composition, stock, cost, m))\n        l = m + 1;\n      else\n        r = m;\n    }\n\n    return l - 1;\n  }\n\n private:\n  // Returns true if it's possible to create `m` alloys by using any machine.\n  bool isPossible(int n, int budget, const vector<vector<int>>& composition,\n                  const vector<int>& stock, const vector<int>& costs, int m) {\n    // Try all possible machines.\n    for (const vector<int>& machine : composition) {\n      long requiredMoney = 0;\n      for (int j = 0; j < n; ++j) {\n        const long requiredUnits =\n            max(0L, static_cast<long>(machine[j]) * m - stock[j]);\n        requiredMoney += static_cast<long>(requiredUnits) * costs[j];\n      }\n      if (requiredMoney <= budget)\n        return true;\n    }\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition,\n                               List<Integer> stock, List<Integer> cost) {\n    int l = 1;\n    int r = 1_000_000_000;\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (isPossible(n, budget, composition, stock, cost, m))\n        l = m + 1;\n      else\n        r = m;\n    }\n\n    return l - 1;\n  }\n\n  // Returns true if it's possible to create `m` alloys by using any machine.\n  private boolean isPossible(int n, int budget, List<List<Integer>> composition,\n                             List<Integer> stock, List<Integer> costs, int m) {\n    // Try all possible machines.\n    for (List<Integer> machine : composition) {\n      long requiredMoney = 0;\n      for (int j = 0; j < n; ++j) {\n        final long requiredUnits = Math.max(0L, (long) machine.get(j) * m - stock.get(j));\n        requiredMoney += requiredUnits * costs.get(j);\n      }\n      if (requiredMoney <= budget)\n        return true;\n    }\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxNumberOfAlloys(self, n: int, k: int, budget: int,\n                        composition: List[List[int]], stock: List[int],\n                        costs: List[int]) -> int:\n    l = 1\n    r = 1_000_000_000\n\n    def isPossible(m: int) -> bool:\n      \"\"\"Returns True if it's possible to create `m` alloys by using any machine.\"\"\"\n      # Try all possible machines.\n      for machine in composition:\n        requiredMoney = 0\n        for j in range(n):\n          requiredUnits = max(0, machine[j] * m - stock[j])\n          requiredMoney += requiredUnits * costs[j]\n        if requiredMoney <= budget:\n          return True\n      return False\n\n    while l < r:\n      m = (l + r) // 2\n      if isPossible(m):\n        l = m + 1\n      else:\n        r = m\n\n    return l - 1\n",
                "lang_text": "py"
            }
        }
    }
}