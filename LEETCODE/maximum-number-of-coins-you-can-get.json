{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1561",
            "title": "Maximum Number of Coins You Can Get",
            "titleSlug": "maximum-number-of-coins-you-can-get",
            "content": "<p>There are <code>3n</code> piles of coins of varying size, you and your friends will take piles of coins as follows:</p>\n\n<ul>\n\t<li>In each step, you will choose <strong>any </strong><code>3</code> piles of coins (not necessarily consecutive).</li>\n\t<li>Of your choice, Alice will pick the pile with the maximum number of coins.</li>\n\t<li>You will pick the next pile with the maximum number of coins.</li>\n\t<li>Your friend Bob will pick the last pile.</li>\n\t<li>Repeat until there are no more piles of coins.</li>\n</ul>\n\n<p>Given an array of integers <code>piles</code> where <code>piles[i]</code> is the number of coins in the <code>i<sup>th</sup></code> pile.</p>\n\n<p>Return the maximum number of coins that you can have.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [2,4,1,2,7,8]\n<strong>Output:</strong> 9\n<strong>Explanation: </strong>Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with <strong>7</strong> coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with <strong>2</strong> coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, <strong>2</strong>, 8), (2, <strong>4</strong>, 7) you only get 2 + 4 = 6 coins which is not optimal.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [2,4,5]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [9,8,7,6,5,1,2,3,4]\n<strong>Output:</strong> 18\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= piles.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>piles.length % 3 == 0</code></li>\n\t<li><code>1 &lt;= piles[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1823,
            "dislikes": 206,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"150.3K\", \"totalSubmission\": \"177.7K\", \"totalAcceptedRaw\": 150300, \"totalSubmissionRaw\": 177709, \"acRate\": \"84.6%\"}",
            "hints": [
                "Which pile of coins will you never be able to pick up?",
                "Bob is forced to take the last pile of coins, no matter what it is. Which pile should you give to him?"
            ],
            "rephrased": {
                "body": "Given an array `piles` of size `3n` representing coin piles, where `piles[i]` is the number of coins in the i-th pile. In each step, you choose any 3 piles. Alice takes the pile with the maximum coins, you take the next largest, and Bob takes the smallest. Repeat until no more piles remain. Return the maximum number of coins you can obtain.",
                "constraints": [
                    "3 <= piles.length <= 10^5",
                    "piles.length % 3 == 0",
                    "1 <= piles[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[2,4,1,2,7,8]",
                        "output": "9",
                        "explanation": "Choose (2, 7, 8): Alice takes 8, you take 7, Bob takes 2. Choose (1, 2, 4): Alice takes 4, you take 2, Bob takes 1. Total coins for you: 7 + 2 = 9.  This is the optimal strategy."
                    },
                    {
                        "input": "[2,4,5]",
                        "output": "4",
                        "explanation": null
                    },
                    {
                        "input": "[9,8,7,6,5,1,2,3,4]",
                        "output": "18",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Which pile of coins will you never be able to pick up?",
            "Bob is forced to take the last pile of coins, no matter what it is. Which pile should you give to him?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxCoins(vector<int>& piles) {\n    std::ranges::sort(piles);\n\n    int ans = 0;\n\n    // piles = [L M L M L M S S S], pick all the M.\n    for (int i = piles.size() / 3; i < piles.size(); i += 2)\n      ans += piles[i * 2 + 1];\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxCoins(int[] piles) {\n    Arrays.sort(piles);\n\n    int ans = 0;\n\n    // piles = [S S M L M L], pick all the M.\n    for (int i = piles.length / 3; i < piles.length; i += 2)\n      ans += piles[i];\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxCoins(self, piles: List[int]) -> int:\n    return sum(sorted(piles)[len(piles) // 3::2])\n",
                "lang_text": "py"
            }
        }
    }
}