{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1453",
            "title": "Maximum Number of Darts Inside of a Circular Dartboard",
            "titleSlug": "maximum-number-of-darts-inside-of-a-circular-dartboard",
            "content": "<p>Alice is throwing <code>n</code> darts on a very large wall. You are given an array <code>darts</code> where <code>darts[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> is the position of the <code>i<sup>th</sup></code> dart that Alice threw on the wall.</p>\n\n<p>Bob knows the positions of the <code>n</code> darts on the wall. He wants to place a dartboard of radius <code>r</code> on the wall so that the maximum number of darts that Alice throws lie&nbsp;on the dartboard.</p>\n\n<p>Given the integer <code>r</code>, return <em>the maximum number of darts that can lie on the dartboard</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/04/29/sample_1_1806.png\" style=\"width: 248px; height: 211px;\" />\n<pre>\n<strong>Input:</strong> darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Circle dartboard with center in (0,0) and radius = 2 contain all points.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/04/29/sample_2_1806.png\" style=\"width: 306px; height: 244px;\" />\n<pre>\n<strong>Input:</strong> darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= darts.length &lt;= 100</code></li>\n\t<li><code>darts[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>All the <code>darts</code>&nbsp;are unique</li>\n\t<li><code>1 &lt;= r &lt;= 5000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 139,
            "dislikes": 266,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Geometry",
                    "slug": "geometry"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.7K\", \"totalSubmission\": \"15.3K\", \"totalAcceptedRaw\": 5741, \"totalSubmissionRaw\": 15299, \"acRate\": \"37.5%\"}",
            "hints": [
                "If there is an optimal solution, you can always move the circle so that two points lie on the boundary of the circle.",
                "When the radius is fixed, you can find either 0 or 1 or 2 circles that pass two given points at the same time.",
                "Loop for each pair of points and find the center of the circle, after that count the number of points inside the circle."
            ],
            "rephrased": {
                "body": "Alice throws `n` darts at a wall. You're given the coordinates of each dart in the `darts` array, where `darts[i] = [x_i, y_i]` represents the position of the i-th dart. Bob wants to place a dartboard with radius `r` on the wall such that it covers the maximum number of darts. Your task is to determine the maximum number of darts that can lie within or on the dartboard.",
                "constraints": [
                    "1 <= darts.length <= 100",
                    "darts[i].length == 2",
                    "-10^4 <= x_i, y_i <= 10^4",
                    "All the darts are unique",
                    "1 <= r <= 5000"
                ],
                "testcases": [
                    {
                        "input": "darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2",
                        "output": "4",
                        "explanation": "A dartboard centered at (0,0) with a radius of 2 covers all the darts."
                    },
                    {
                        "input": "darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5",
                        "output": "5",
                        "explanation": "A dartboard centered at (0,4) with a radius of 5 covers all points except (7,8)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "If there is an optimal solution, you can always move the circle so that two points lie on the boundary of the circle.",
            "When the radius is fixed, you can find either 0 or 1 or 2 circles that pass two given points at the same time.",
            "Loop for each pair of points and find the center of the circle, after that count the number of points inside the circle."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Geometry",
                "slug": "geometry"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Point {\n  double x;\n  double y;\n  Point(double x, double y) : x(x), y(y) {}\n};\n\nclass Solution {\n public:\n  int numPoints(vector<vector<int>>& darts, int r) {\n    int ans = 1;\n    vector<Point> points = convertToPoints(darts);\n\n    for (int i = 0; i < points.size(); ++i)\n      for (int j = i + 1; j < points.size(); ++j)\n        for (const Point& c : getCircles(points[i], points[j], r)) {\n          int count = 0;\n          for (const Point& point : points)\n            if (dist(c, point) - r <= kErr)\n              ++count;\n          ans = max(ans, count);\n        }\n\n    return ans;\n  }\n\n private:\n  static constexpr double kErr = 1e-6;\n\n  vector<Point> convertToPoints(const vector<vector<int>>& darts) {\n    vector<Point> points;\n    for (const vector<int>& dart : darts)\n      points.emplace_back(dart[0], dart[1]);\n    return points;\n  }\n\n  vector<Point> getCircles(const Point& p, const Point& q, int r) {\n    if (dist(p, q) - 2.0 * r > kErr)\n      return {};\n    const Point m{(p.x + q.x) / 2, (p.y + q.y) / 2};\n    const double distCM = sqrt(pow(r, 2) - pow(dist(p, q) / 2, 2));\n    const double alpha = atan2(p.y - q.y, q.x - p.x);\n    return {Point{m.x - distCM * sin(alpha), m.y - distCM * cos(alpha)},\n            Point{m.x + distCM * sin(alpha), m.y + distCM * cos(alpha)}};\n  }\n\n  double dist(const Point& p, const Point& q) {\n    return sqrt(pow(p.x - q.x, 2) + pow(p.y - q.y, 2));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Point {\n  public double x = 0;\n  public double y = 0;\n  public Point(double x, double y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nclass Solution {\n  public int numPoints(int[][] darts, int r) {\n    int ans = 1;\n    List<Point> points = convertToPoints(darts);\n\n    for (int i = 0; i < points.size(); ++i)\n      for (int j = i + 1; j < points.size(); ++j)\n        for (Point c : getCircles(points.get(i), points.get(j), r)) {\n          int count = 0;\n          for (Point point : points)\n            if (dist(c, point) - r <= kErr)\n              ++count;\n          ans = Math.max(ans, count);\n        }\n\n    return ans;\n  }\n\n  private static final double kErr = 1e-6;\n\n  private List<Point> convertToPoints(int[][] darts) {\n    List<Point> points = new ArrayList<>();\n    for (int[] dart : darts)\n      points.add(new Point(dart[0], dart[1]));\n    return points;\n  }\n\n  private Point[] getCircles(Point p, Point q, int r) {\n    if (dist(p, q) - 2.0 * r > kErr)\n      return new Point[] {};\n    Point m = new Point((p.x + q.x) / 2, (p.y + q.y) / 2);\n    final double distCM = Math.sqrt(Math.pow(r, 2) - Math.pow(dist(p, q) / 2, 2));\n    final double alpha = Math.atan2(p.y - q.y, q.x - p.x);\n    return new Point[] {new Point(m.x - distCM * Math.sin(alpha), m.y - distCM * Math.cos(alpha)),\n                        new Point(m.x + distCM * Math.sin(alpha), m.y + distCM * Math.cos(alpha))};\n  }\n\n  private double dist(Point p, Point q) {\n    return Math.sqrt(Math.pow(p.x - q.x, 2) + Math.pow(p.y - q.y, 2));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Point:\n  def __init__(self, x: float, y: float):\n    self.x = x\n    self.y = y\n\n\nclass Solution:\n  def numPoints(self, darts: List[List[int]], r: int) -> int:\n    kErr = 1e-6\n    ans = 1\n    points = [Point(x, y) for x, y in darts]\n\n    def dist(p: Point, q: Point) -> float:\n      return ((p.x - q.x)**2 + (p.y - q.y)**2)**0.5\n\n    def getCircles(p: Point, q: Point) -> List[Point]:\n      if dist(p, q) - 2.0 * r > kErr:\n        return []\n      m = Point((p.x + q.x) / 2, (p.y + q.y) / 2)\n      distCM = (r**2 - (dist(p, q) / 2)**2)**0.5\n      alpha = math.atan2(p.y - q.y, q.x - p.x)\n      return [Point(m.x - distCM * math.sin(alpha), m.y - distCM * math.cos(alpha)),\n              Point(m.x + distCM * math.sin(alpha), m.y + distCM * math.cos(alpha))]\n\n    for i in range(len(points)):\n      for j in range(i + 1, len(points)):\n        for c in getCircles(points[i], points[j]):\n          count = 0\n          for point in points:\n            if dist(c, point) - r <= kErr:\n              count += 1\n          ans = max(ans, count)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}