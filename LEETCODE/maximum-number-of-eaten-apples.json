{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1705",
            "title": "Maximum Number of Eaten Apples",
            "titleSlug": "maximum-number-of-eaten-apples",
            "content": "<p>There is a special kind of apple tree that grows apples every day for <code>n</code> days. On the <code>i<sup>th</sup></code> day, the tree grows <code>apples[i]</code> apples that will rot after <code>days[i]</code> days, that is on day <code>i + days[i]</code> the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by <code>apples[i] == 0</code> and <code>days[i] == 0</code>.</p>\n\n<p>You decided to eat <strong>at most</strong> one apple a day (to keep the doctors away). Note that you can keep eating after the first <code>n</code> days.</p>\n\n<p>Given two integer arrays <code>days</code> and <code>apples</code> of length <code>n</code>, return <em>the maximum number of apples you can eat.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> apples = [1,2,3,5,2], days = [3,2,1,4,2]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> You can eat 7 apples:\n- On the first day, you eat an apple that grew on the first day.\n- On the second day, you eat an apple that grew on the second day.\n- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n- On the fourth to the seventh days, you eat apples that grew on the fourth day.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> You can eat 5 apples:\n- On the first to the third day you eat apples that grew on the first day.\n- Do nothing on the fouth and fifth days.\n- On the sixth and seventh days you eat apples that grew on the sixth day.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == apples.length == days.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= apples[i], days[i] &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>days[i] = 0</code> if and only if <code>apples[i] = 0</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 796,
            "dislikes": 176,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.3K\", \"totalSubmission\": \"55K\", \"totalAcceptedRaw\": 21346, \"totalSubmissionRaw\": 55031, \"acRate\": \"38.8%\"}",
            "hints": [
                "It's optimal to finish the apples that will rot first before those that will rot last",
                "You need a structure to keep the apples sorted by their finish time"
            ],
            "rephrased": {
                "body": "An apple tree grows apples daily for 'n' days. On day 'i', it yields 'apples[i]' apples, which rot after 'days[i]' days (on day 'i + days[i]'). Apples[i] == 0 and days[i] == 0 when the tree doesn't grow any apples.  You can eat at most one apple per day, even after the initial 'n' days. Given the 'days' and 'apples' arrays, find the maximum number of apples you can eat.",
                "constraints": [
                    "n == apples.length == days.length",
                    "1 <= n <= 2 * 10^4",
                    "0 <= apples[i], days[i] <= 2 * 10^4",
                    "days[i] = 0 if and only if apples[i] = 0"
                ],
                "testcases": [
                    {
                        "input": "apples = [1,2,3,5,2], days = [3,2,1,4,2]",
                        "output": "7",
                        "explanation": "Eat 1 apple from day 1 on day 1. Eat 1 apple from day 2 on day 2. Eat 1 apple from day 2 on day 3. Eat apples from day 4 for the next 4 days."
                    },
                    {
                        "input": "apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]",
                        "output": "5",
                        "explanation": "Eat apples from day 1 for 3 days. Then do nothing for 2 days as no apples grow. Finally, eat apples from day 6 for 2 days."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "It's optimal to finish the apples that will rot first before those that will rot last",
            "You need a structure to keep the apples sorted by their finish time"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int eatenApples(vector<int>& apples, vector<int>& days) {\n    const int n = apples.size();\n    int ans = 0;\n    using P = pair<int, int>;  // (rotten day, # apples)\n    priority_queue<P, vector<P>, greater<>> minHeap;\n\n    for (int i = 0; i < n || !minHeap.empty(); ++i) {  // i := day\n      // Remove rotten apples.\n      while (!minHeap.empty() && minHeap.top().first <= i)\n        minHeap.pop();\n      // Add today's apples.\n      if (i < n && apples[i] > 0)\n        minHeap.emplace(i + days[i], apples[i]);\n      // Eat one apple today.\n      if (!minHeap.empty()) {\n        const auto [rottenDay, numApples] = minHeap.top();\n        minHeap.pop();\n        if (numApples > 1)\n          minHeap.emplace(rottenDay, numApples - 1);\n        ++ans;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int eatenApples(int[] apples, int[] days) {\n    final int n = apples.length;\n    int ans = 0;\n    // (rotten day, # apples)\n    Queue<Pair<Integer, Integer>> minHeap = new PriorityQueue<>((a, b) -> a.getKey() - b.getKey());\n\n    for (int i = 0; i < n || !minHeap.isEmpty(); ++i) {\n      // Remove rotten apples.\n      while (!minHeap.isEmpty() && minHeap.peek().getKey() <= i)\n        minHeap.poll();\n      // Add today's apples.\n      if (i < n && apples[i] > 0)\n        minHeap.offer(new Pair<>(i + days[i], apples[i]));\n      // Eat one apple today.\n      if (!minHeap.isEmpty()) {\n        final int rottenDay = minHeap.peek().getKey();\n        final int numApples = minHeap.poll().getValue();\n        if (numApples > 1)\n          minHeap.offer(new Pair<>(rottenDay, numApples - 1));\n        ++ans;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def eatenApples(self, apples: List[int], days: List[int]) -> int:\n    n = len(apples)\n    ans = 0\n    minHeap = []  # (rotten day, # apples)\n\n    i = 0\n    while i < n or minHeap:\n      # Remove rotten apples.\n      while minHeap and minHeap[0][0] <= i:\n        heapq.heappop(minHeap)\n      # Add today's apples.\n      if i < n and apples[i] > 0:\n        heapq.heappush(minHeap, (i + days[i], apples[i]))\n      # Eat one apple today.\n      if minHeap:\n        rottenDay, numApples = heapq.heappop(minHeap)\n        if numApples > 1:\n          heapq.heappush(minHeap, (rottenDay, numApples - 1))\n        ans += 1\n      i += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}