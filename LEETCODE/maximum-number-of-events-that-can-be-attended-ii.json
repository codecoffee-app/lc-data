{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1751",
            "title": "Maximum Number of Events That Can Be Attended II",
            "titleSlug": "maximum-number-of-events-that-can-be-attended-ii",
            "content": "<p>You are given an array of <code>events</code> where <code>events[i] = [startDay<sub>i</sub>, endDay<sub>i</sub>, value<sub>i</sub>]</code>. The <code>i<sup>th</sup></code> event starts at <code>startDay<sub>i</sub></code><sub> </sub>and ends at <code>endDay<sub>i</sub></code>, and if you attend this event, you will receive a value of <code>value<sub>i</sub></code>. You are also given an integer <code>k</code> which represents the maximum number of events you can attend.</p>\n\n<p>You can only attend one event at a time. If you choose to attend an event, you must attend the <strong>entire</strong> event. Note that the end day is <strong>inclusive</strong>: that is, you cannot attend two events where one of them starts and the other ends on the same day.</p>\n\n<p>Return <em>the <strong>maximum sum</strong> of values that you can receive by attending events.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60048-pm.png\" style=\"width: 400px; height: 103px;\" /></p>\n\n<pre>\n<strong>Input:</strong> events = [[1,2,4],[3,4,3],[2,3,1]], k = 2\n<strong>Output:</strong> 7\n<strong>Explanation: </strong>Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60150-pm.png\" style=\"width: 400px; height: 103px;\" /></p>\n\n<pre>\n<strong>Input:</strong> events = [[1,2,4],[3,4,3],[2,3,10]], k = 2\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do <strong>not</strong> have to attend k events.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60703-pm.png\" style=\"width: 400px; height: 126px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= events.length</code></li>\n\t<li><code>1 &lt;= k * events.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= startDay<sub>i</sub> &lt;= endDay<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= value<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1993,
            "dislikes": 36,
            "similarQuestions": "[{\"title\": \"Maximum Number of Events That Can Be Attended\", \"titleSlug\": \"maximum-number-of-events-that-can-be-attended\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Earnings From Taxi\", \"titleSlug\": \"maximum-earnings-from-taxi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Best Non-Overlapping Events\", \"titleSlug\": \"two-best-non-overlapping-events\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Meeting Rooms III\", \"titleSlug\": \"meeting-rooms-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"71.7K\", \"totalSubmission\": \"114.8K\", \"totalAcceptedRaw\": 71650, \"totalSubmissionRaw\": 114815, \"acRate\": \"62.4%\"}",
            "hints": [
                "Sort the events by its startTime.",
                "For every event, you can either choose it and consider the next event available, or you can ignore it. You can efficiently find the next event that is available using binary search."
            ],
            "rephrased": {
                "body": "You are given an array of `events` where `events[i] = [startDay_i, endDay_i, value_i]`. The `i`th event starts at `startDay_i` and ends at `endDay_i`, and attending this event yields a value of `value_i`.  Given an integer `k` representing the maximum number of events you can attend, determine the maximum total value you can obtain.\n\nYou can only attend one event at a time, and you must attend the entire event if you choose to attend it. Note that the end day is inclusive; you cannot attend two events if one starts and the other ends on the same day.",
                "constraints": [
                    "1 <= k <= events.length",
                    "1 <= k * events.length <= 10^6",
                    "1 <= startDay_i <= endDay_i <= 10^9",
                    "1 <= value_i <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "events = [[1,2,4],[3,4,3],[2,3,1]], k = 2",
                        "output": "7",
                        "explanation": "By choosing events at indices 0 and 1 (with values 4 and 3 respectively), the total value is 7. This represents the maximum achievable value given the constraint of attending at most 2 events."
                    },
                    {
                        "input": "events = [[1,2,4],[3,4,3],[2,3,10]], k = 2",
                        "output": "10",
                        "explanation": "Choosing only event at index 2 (with value 10) yields the highest value. Note that because of the overlapping events at indices 0, 1, and 2, there is no way to attend more than one event."
                    },
                    {
                        "input": "events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3",
                        "output": "9",
                        "explanation": "Even though the events do not overlap, you are limited to attending a maximum of 3 events. Selecting the events with the highest values results in a total value of 9."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-events-that-can-be-attended",
                "title": "Maximum Number of Events That Can Be Attended",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-earnings-from-taxi",
                "title": "Maximum Earnings From Taxi",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "two-best-non-overlapping-events",
                "title": "Two Best Non-Overlapping Events",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "meeting-rooms-iii",
                "title": "Meeting Rooms III",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort the events by its startTime.",
            "For every event, you can either choose it and consider the next event available, or you can ignore it. You can efficiently find the next event that is available using binary search."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxValue(vector<vector<int>>& events, int k) {\n    // dp[i][k] := max sum of events[i:] w/ max k # of attendance\n    dp.resize(events.size(), vector<int>(k + 1, -1));\n    std::ranges::sort(events);\n    return maxValue(events, 0, k);\n  }\n\n private:\n  vector<vector<int>> dp;\n\n  int maxValue(const vector<vector<int>>& e, int i, int k) {\n    if (k == 0 || i == e.size())\n      return 0;\n    if (dp[i][k] != -1)\n      return dp[i][k];\n\n    // Binary search events to find the first index j s.t. e[j][0] > e[i][1]\n    const auto it =\n        upper_bound(e.begin() + i, e.end(), e[i][1],\n                    [](int end, const auto& a) { return a[0] > end; });\n    const int j = distance(e.begin(), it);\n    return dp[i][k] =\n               max(e[i][2] + maxValue(e, j, k - 1), maxValue(e, i + 1, k));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxValue(int[][] events, int k) {\n    // dp[i][k] := max sum of events[i:] w/ max k # of attendance\n    dp = new Integer[events.length][k + 1];\n    Arrays.sort(events, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);\n    return maxValue(events, 0, k);\n  }\n\n  private Integer[][] dp;\n\n  private int maxValue(int[][] e, int i, int k) {\n    if (k == 0 || i == e.length)\n      return 0;\n    if (dp[i][k] != null)\n      return dp[i][k];\n\n    final int j = binarySearch(e, i + 1, e[i][1] + 1);\n    return dp[i][k] = Math.max(e[i][2] + maxValue(e, j, k - 1), maxValue(e, i + 1, k));\n  }\n\n  // Find the first index l s.t e[l][0] >= target\n  private int binarySearch(int[][] e, int l, int target) {\n    int r = e.length;\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (e[m][0] >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxValue(self, events: List[List[int]], k: int) -> int:\n    e = sorted(events)\n\n    @functools.lru_cache(None)\n    def dp(i, k):\n      if k == 0 or i == len(e):\n        return 0\n\n      # Binary search events to find the first index j s.t. e[j][0] > e[i][1]\n      j = bisect.bisect(e, [e[i][1], math.inf, math.inf], i + 1)\n      return max(dp(i + 1, k), e[i][2] + dp(j, k - 1))\n\n    return dp(0, k)\n",
                "lang_text": "py"
            }
        }
    }
}