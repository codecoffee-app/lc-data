{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1353",
            "title": "Maximum Number of Events That Can Be Attended",
            "titleSlug": "maximum-number-of-events-that-can-be-attended",
            "content": "<p>You are given an array of <code>events</code> where <code>events[i] = [startDay<sub>i</sub>, endDay<sub>i</sub>]</code>. Every event <code>i</code> starts at <code>startDay<sub>i</sub></code><sub> </sub>and ends at <code>endDay<sub>i</sub></code>.</p>\n\n<p>You can attend an event <code>i</code> at any day <code>d</code> where <code>startTime<sub>i</sub> &lt;= d &lt;= endTime<sub>i</sub></code>. You can only attend one event at any time <code>d</code>.</p>\n\n<p>Return <em>the maximum number of events you can attend</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/05/e1.png\" style=\"width: 400px; height: 267px;\" />\n<pre>\n<strong>Input:</strong> events = [[1,2],[2,3],[3,4]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You can attend all the three events.\nOne way to attend them all is as shown.\nAttend the first event on day 1.\nAttend the second event on day 2.\nAttend the third event on day 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> events= [[1,2],[2,3],[3,4],[1,2]]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= events.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>events[i].length == 2</code></li>\n\t<li><code>1 &lt;= startDay<sub>i</sub> &lt;= endDay<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2891,
            "dislikes": 388,
            "similarQuestions": "[{\"title\": \"Maximum Number of Events That Can Be Attended II\", \"titleSlug\": \"maximum-number-of-events-that-can-be-attended-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Earnings From Taxi\", \"titleSlug\": \"maximum-earnings-from-taxi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Meeting Rooms III\", \"titleSlug\": \"meeting-rooms-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"81.1K\", \"totalSubmission\": \"250.8K\", \"totalAcceptedRaw\": 81055, \"totalSubmissionRaw\": 250801, \"acRate\": \"32.3%\"}",
            "hints": [
                "Sort the events by the start time and in case of tie by the end time in ascending order.",
                "Loop over the sorted events. Attend as much as you can and keep the last day occupied. When you try to attend new event keep in mind the first day you can attend a new event in."
            ],
            "rephrased": {
                "body": "Given an array of `events`, where each `events[i] = [startDay_i, endDay_i]` represents an event that starts on `startDay_i` and ends on `endDay_i`. You can attend event `i` on any day `d` such that `startDay_i <= d <= endDay_i`.  You can only attend one event per day. Determine the maximum number of events you can attend.",
                "constraints": [
                    "1 <= events.length <= 10^5",
                    "events[i].length == 2",
                    "1 <= startDay_i <= endDay_i <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[2,3],[3,4]]",
                        "output": "3",
                        "explanation": "You can attend all three events. Attend the first event on day 1, the second on day 2, and the third on day 3."
                    },
                    {
                        "input": "[[1,2],[2,3],[3,4],[1,2]]",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-events-that-can-be-attended-ii",
                "title": "Maximum Number of Events That Can Be Attended II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-earnings-from-taxi",
                "title": "Maximum Earnings From Taxi",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "meeting-rooms-iii",
                "title": "Meeting Rooms III",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort the events by the start time and in case of tie by the end time in ascending order.",
            "Loop over the sorted events. Attend as much as you can and keep the last day occupied. When you try to attend new event keep in mind the first day you can attend a new event in."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxEvents(vector<vector<int>>& events) {\n    int ans = 0;\n    int d = 0;  // Current day\n    int i = 0;  // events' index\n    priority_queue<int, vector<int>, greater<>> minHeap;\n\n    std::ranges::sort(events);\n\n    while (!minHeap.empty() || i < events.size()) {\n      // If no events are available to attend today, let time flies to the next\n      // available event.\n      if (minHeap.empty())\n        d = events[i][0];\n      // All events starting from today are newly available.\n      while (i < events.size() && events[i][0] == d)\n        minHeap.push(events[i++][1]);\n      // Greedily attend the event that'll end the earliest since it has higher\n      // chance can't be attended in the future.\n      minHeap.pop();\n      ++ans;\n      ++d;\n      // Pop events that can't be attended.\n      while (!minHeap.empty() && minHeap.top() < d)\n        minHeap.pop();\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxEvents(int[][] events) {\n    int ans = 0;\n    int d = 0; // Current day\n    int i = 0; // events' index\n    Queue<Integer> minHeap = new PriorityQueue<>();\n\n    Arrays.sort(events, (a, b) -> a[0] - b[0]);\n\n    while (!minHeap.isEmpty() || i < events.length) {\n      // If no events are available to attend today, let time flies to the next\n      // available event.\n      if (minHeap.isEmpty())\n        d = events[i][0];\n      // All events starting from today are newly available.\n      while (i < events.length && events[i][0] == d)\n        minHeap.offer(events[i++][1]);\n      // Greedily attend the event that'll end the earliest since it has higher\n      // chance can't be attended in the future.\n      minHeap.poll();\n      ++ans;\n      ++d;\n      // Pop events that can't be attended.\n      while (!minHeap.isEmpty() && minHeap.peek() < d)\n        minHeap.poll();\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxEvents(self, events: List[List[int]]) -> int:\n    ans = 0\n    minHeap = []\n    i = 0  # events' index\n\n    events.sort(key=lambda x: x[0])\n\n    while minHeap or i < len(events):\n      # If no events are available to attend today, let time flies to the next\n      # available event.\n      if not minHeap:\n        d = events[i][0]\n      # All events starting from today are newly available.\n      while i < len(events) and events[i][0] == d:\n        heapq.heappush(minHeap, events[i][1])\n        i += 1\n      # Greedily attend the event that'll end the earliest since it has higher\n      # chance can't be attended in the future.\n      heapq.heappop(minHeap)\n      ans += 1\n      d += 1\n      # Pop events that can't be attended.\n      while minHeap and minHeap[0] < d:\n        heapq.heappop(minHeap)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}