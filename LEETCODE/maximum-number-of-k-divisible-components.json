{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2872",
            "title": "Maximum Number of K-Divisible Components",
            "titleSlug": "maximum-number-of-k-divisible-components",
            "content": "<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>You are also given a <strong>0-indexed</strong> integer array <code>values</code> of length <code>n</code>, where <code>values[i]</code> is the <strong>value</strong> associated with the <code>i<sup>th</sup></code> node, and an integer <code>k</code>.</p>\n\n<p>A <strong>valid split</strong> of the tree is obtained by removing any set of edges, possibly empty, from the tree such that the resulting components all have values that are divisible by <code>k</code>, where the <strong>value of a connected component</strong> is the sum of the values of its nodes.</p>\n\n<p>Return <em>the <strong>maximum number of components</strong> in any valid split</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/07/example12-cropped2svg.jpg\" style=\"width: 1024px; height: 453px;\" />\n<pre>\n<strong>Input:</strong> n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We remove the edge connecting node 1 with 2. The resulting split is valid because:\n- The value of the component containing nodes 1 and 3 is values[1] + values[3] = 12.\n- The value of the component containing nodes 0, 2, and 4 is values[0] + values[2] + values[4] = 6.\nIt can be shown that no other valid split has more than 2 connected components.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/07/example21svg-1.jpg\" style=\"width: 999px; height: 338px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We remove the edge connecting node 0 with 2, and the edge connecting node 0 with 1. The resulting split is valid because:\n- The value of the component containing node 0 is values[0] = 3.\n- The value of the component containing nodes 2, 5, and 6 is values[2] + values[5] + values[6] = 9.\n- The value of the component containing nodes 1, 3, and 4 is values[1] + values[3] + values[4] = 6.\nIt can be shown that no other valid split has more than 3 connected components.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>values.length == n</code></li>\n\t<li><code>0 &lt;= values[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li>Sum of <code>values</code> is divisible by <code>k</code>.</li>\n\t<li>The input is generated such that <code>edges</code> represents a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 182,
            "dislikes": 3,
            "similarQuestions": "[{\"title\": \"Create Components With Same Value\", \"titleSlug\": \"create-components-with-same-value\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.3K\", \"totalSubmission\": \"17.7K\", \"totalAcceptedRaw\": 10302, \"totalSubmissionRaw\": 17720, \"acRate\": \"58.1%\"}",
            "hints": [
                "Root the tree at node <code>0</code>.",
                "If a leaf node is not divisible by <code>k</code>, it must be in the same component as its parent node so we merge it with its parent node.",
                "If a leaf node is divisible by <code>k</code>, it will be in its own components so we separate it from its parent node.",
                "In each step, we either cut a leaf node down or merge a leaf node. The number of nodes on the tree reduces by one. Repeat this process until only one node is left."
            ],
            "rephrased": {
                "body": "Given an undirected tree with `n` nodes labeled from `0` to `n - 1`.  You are provided with the integer `n`, a 2D integer array `edges` of length `n - 1` representing the tree's edges (where `edges[i] = [a_i, b_i]` indicates an edge between nodes `a_i` and `b_i`), a 0-indexed integer array `values` of length `n` representing the value of each node (where `values[i]` is the value of the i-th node), and an integer `k`. The goal is to find the maximum number of connected components you can achieve by removing any set of edges (possibly empty) such that the sum of node values within each resulting component is divisible by `k`. This split is called a valid split.",
                "constraints": [
                    "1 <= n <= 3 * 10^4",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= a_i, b_i < n",
                    "values.length == n",
                    "0 <= values[i] <= 10^9",
                    "1 <= k <= 10^9",
                    "Sum of `values` is divisible by `k`.",
                    "The input is generated such that `edges` represents a valid tree."
                ],
                "testcases": [
                    {
                        "input": "n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6",
                        "output": "2",
                        "explanation": "Removing the edge connecting node 1 and 2 results in two valid components. The first component contains nodes 1 and 3, with a value of 12 (8 + 4), which is divisible by 6. The second component contains nodes 0, 2, and 4, with a value of 6 (1 + 1 + 4), which is also divisible by 6.  No other split can result in more than 2 valid components."
                    },
                    {
                        "input": "n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3",
                        "output": "3",
                        "explanation": "Removing the edges connecting node 0 to 2 and node 0 to 1 yields three valid components. The first component is node 0 with a value of 3.  The second component contains nodes 2, 5, and 6 with a combined value of 9 (6 + 2 + 1). The third component contains nodes 1, 3, and 4 with a value of 6 (0 + 1 + 5).  All three components have values divisible by 3, and no other split can produce more valid components."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "create-components-with-same-value",
                "title": "Create Components With Same Value",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Root the tree at node <code>0</code>.",
            "If a leaf node is not divisible by <code>k</code>, it must be in the same component as its parent node so we merge it with its parent node.",
            "If a leaf node is divisible by <code>k</code>, it will be in its own components so we separate it from its parent node.",
            "In each step, we either cut a leaf node down or merge a leaf node. The number of nodes on the tree reduces by one. Repeat this process until only one node is left."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxKDivisibleComponents(int n, vector<vector<int>>& edges,\n                              vector<int>& values, int k) {\n    int ans = 0;\n    vector<vector<int>> graph(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].push_back(v);\n      graph[v].push_back(u);\n    }\n\n    dfs(graph, 0, /*prev=*/-1, values, k, ans);\n    return ans;\n  }\n\n private:\n  long long dfs(const vector<vector<int>>& graph, int u, int prev,\n                const vector<int>& values, int k, int& ans) {\n    long long treeSum = values[u];\n\n    for (const int v : graph[u])\n      if (v != prev)\n        treeSum += dfs(graph, v, u, values, k, ans);\n\n    if (treeSum % k == 0)\n      ++ans;\n    return treeSum;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {\n    List<Integer>[] graph = new List[n];\n\n    for (int i = 0; i < n; i++)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].add(v);\n      graph[v].add(u);\n    }\n\n    dfs(graph, 0, /*prev=*/-1, values, k);\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private long dfs(List<Integer>[] graph, int u, int prev, int[] values, int k) {\n    long treeSum = values[u];\n\n    for (int v : graph[u])\n      if (v != prev)\n        treeSum += dfs(graph, v, u, values, k);\n\n    if (treeSum % k == 0)\n      ++ans;\n    return treeSum;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxKDivisibleComponents(self, n: int, edges: List[List[int]], values: List[int], k: int) -> int:\n    ans = 0\n    graph = [[] for _ in range(n)]\n\n    def dfs(u: int, prev: int) -> int:\n      nonlocal ans\n      treeSum = values[u]\n\n      for v in graph[u]:\n        if v != prev:\n          treeSum += dfs(v, u)\n\n      if treeSum % k == 0:\n        ans += 1\n      return treeSum\n\n    for u, v in edges:\n      graph[u].append(v)\n      graph[v].append(u)\n\n    dfs(0, -1)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}