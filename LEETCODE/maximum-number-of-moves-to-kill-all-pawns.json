{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3283",
            "title": "Maximum Number of Moves to Kill All Pawns",
            "titleSlug": "maximum-number-of-moves-to-kill-all-pawns",
            "content": "<p>There is a <code>50 x 50</code> chessboard with <strong>one</strong> knight and some pawns on it. You are given two integers <code>kx</code> and <code>ky</code> where <code>(kx, ky)</code> denotes the position of the knight, and a 2D array <code>positions</code> where <code>positions[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> denotes the position of the pawns on the chessboard.</p>\n\n<p>Alice and Bob play a <em>turn-based</em> game, where Alice goes first. In each player&#39;s turn:</p>\n\n<ul>\n\t<li>The player <em>selects </em>a pawn that still exists on the board and captures it with the knight in the <strong>fewest</strong> possible <strong>moves</strong>. <strong>Note</strong> that the player can select <strong>any</strong> pawn, it <strong>might not</strong> be one that can be captured in the <strong>least</strong> number of moves.</li>\n\t<li><span>In the process of capturing the <em>selected</em> pawn, the knight <strong>may</strong> pass other pawns <strong>without</strong> capturing them</span>. <strong>Only</strong> the <em>selected</em> pawn can be captured in <em>this</em> turn.</li>\n</ul>\n\n<p>Alice is trying to <strong>maximize</strong> the <strong>sum</strong> of the number of moves made by <em>both</em> players until there are no more pawns on the board, whereas Bob tries to <strong>minimize</strong> them.</p>\n\n<p>Return the <strong>maximum</strong> <em>total</em> number of moves made during the game that Alice can achieve, assuming both players play <strong>optimally</strong>.</p>\n\n<p>Note that in one <strong>move, </strong>a chess knight has eight possible positions it can move to, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.</p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/08/01/chess_knight.jpg\" style=\"width: 275px; height: 273px;\" /></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">kx = 1, ky = 1, positions = [[0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/16/gif3.gif\" style=\"width: 275px; height: 275px;\" /></p>\n\n<p>The knight takes 4 moves to reach the pawn at <code>(0, 0)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">kx = 0, ky = 2, positions = [[1,1],[2,2],[3,3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">8</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/16/gif4.gif\" style=\"width: 320px; height: 320px;\" /></strong></p>\n\n<ul>\n\t<li>Alice picks the pawn at <code>(2, 2)</code> and captures it in two moves: <code>(0, 2) -&gt; (1, 4) -&gt; (2, 2)</code>.</li>\n\t<li>Bob picks the pawn at <code>(3, 3)</code> and captures it in two moves: <code>(2, 2) -&gt; (4, 1) -&gt; (3, 3)</code>.</li>\n\t<li>Alice picks the pawn at <code>(1, 1)</code> and captures it in four moves: <code>(3, 3) -&gt; (4, 1) -&gt; (2, 2) -&gt; (0, 3) -&gt; (1, 1)</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">kx = 0, ky = 0, positions = [[1,2],[2,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Alice picks the pawn at <code>(2, 4)</code> and captures it in two moves: <code>(0, 0) -&gt; (1, 2) -&gt; (2, 4)</code>. Note that the pawn at <code>(1, 2)</code> is not captured.</li>\n\t<li>Bob picks the pawn at <code>(1, 2)</code> and captures it in one move: <code>(2, 4) -&gt; (1, 2)</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= kx, ky &lt;= 49</code></li>\n\t<li><code>1 &lt;= positions.length &lt;= 15</code></li>\n\t<li><code>positions[i].length == 2</code></li>\n\t<li><code>0 &lt;= positions[i][0], positions[i][1] &lt;= 49</code></li>\n\t<li>All <code>positions[i]</code> are unique.</li>\n\t<li>The input is generated such that <code>positions[i] != [kx, ky]</code> for all <code>0 &lt;= i &lt; positions.length</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 101,
            "dislikes": 10,
            "similarQuestions": "[{\"title\": \"Knight Probability in Chessboard\", \"titleSlug\": \"knight-probability-in-chessboard\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check Knight Tour Configuration\", \"titleSlug\": \"check-knight-tour-configuration\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.1K\", \"totalSubmission\": \"15.9K\", \"totalAcceptedRaw\": 5077, \"totalSubmissionRaw\": 15882, \"acRate\": \"32.0%\"}",
            "hints": [
                "Use BFS to preprocess the minimum number of moves to reach one pawn from the other pawns.",
                "Consider the knight\u2019s original position as another pawn.",
                "Use DP with a bitmask to store current pawns that have not been captured."
            ],
            "rephrased": {
                "body": "A 50x50 chessboard has a knight at position (kx, ky) and several pawns at positions given by the 'positions' array. Alice and Bob take turns capturing pawns. Each player selects a pawn and captures it with the knight in the fewest possible moves. The knight can pass other pawns during the capture but only captures the selected pawn. Alice maximizes and Bob minimizes the total number of moves made until no pawns remain. Return the maximum total number of moves Alice can achieve assuming optimal play.",
                "constraints": [
                    "0 <= kx, ky <= 49",
                    "1 <= positions.length <= 15",
                    "positions[i].length == 2",
                    "0 <= positions[i][0], positions[i][1] <= 49",
                    "All positions[i] are unique.",
                    "positions[i] != [kx, ky] for all 0 <= i < positions.length."
                ],
                "testcases": [
                    {
                        "input": "kx = 1, ky = 1, positions = [[0,0]]",
                        "output": "4",
                        "explanation": "The knight requires 4 moves to capture the pawn at (0, 0)."
                    },
                    {
                        "input": "kx = 0, ky = 2, positions = [[1,1],[2,2],[3,3]]",
                        "output": "8",
                        "explanation": "Alice captures (2,2) in 2 moves. Bob captures (3,3) in 2 moves. Alice captures (1,1) in 4 moves. Total moves = 2 + 2 + 4 = 8."
                    },
                    {
                        "input": "kx = 0, ky = 0, positions = [[1,2],[2,4]]",
                        "output": "3",
                        "explanation": "Alice captures (2,4) in 2 moves. Bob captures (1,2) in 1 move. Total moves = 2 + 1 = 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "knight-probability-in-chessboard",
                "title": "Knight Probability in Chessboard",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "check-knight-tour-configuration",
                "title": "Check Knight Tour Configuration",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use BFS to preprocess the minimum number of moves to reach one pawn from the other pawns.",
            "Consider the knight\u2019s original position as another pawn.",
            "Use DP with a bitmask to store current pawns that have not been captured."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxMoves(int kx, int ky, vector<vector<int>>& positions) {\n    const int n = positions.size();\n    positions.push_back({kx, ky});\n    unordered_map<int, int> hashedPositionToIndex;\n    // dist[i][j] := the minimum distance from positions[i] to positions[j]\n    vector<vector<int>> dist(n + 1, vector<int>(n + 1));\n\n    for (int i = 0; i < positions.size(); ++i) {\n      const int x = positions[i][0];\n      const int y = positions[i][1];\n      hashedPositionToIndex[hash(x, y)] = i;\n    }\n\n    for (int sourceIndex = 0; sourceIndex < n + 1; ++sourceIndex)\n      bfs(positions, sourceIndex, hashedPositionToIndex, dist);\n\n    const int kMaxMask = 1 << (n + 1);\n    // dp[i][mask][turn] := the maximum (Alice) or the minimum (Bob) cost to\n    // kill all pawns, where i is the current pawn, mask is the set of pawns\n    // that have been killed, and turn is the current player's turn (0 for Alice\n    // and 1 for Bob)\n    vector<vector<vector<int>>> dp(\n        n + 1, vector<vector<int>>(1 << (n + 1), vector<int>(2)));\n\n    for (int i = 0; i < n + 1; ++i)\n      for (int mask = 0; mask < kMaxMask - 1; ++mask)\n        dp[i][mask] = {-kMax, kMax};\n\n    for (int mask = kMaxMask - 2; mask >= 0; --mask)\n      for (int i = 0; i < n + 1; ++i)\n        for (int turn = 0; turn < 2; ++turn)\n          for (int j = 0; j < n; ++j) {\n            if (mask >> j & 1)\n              continue;\n            const int moves = dist[i][j] + dp[j][mask | 1 << j][1 - turn];\n            dp[i][mask][turn] = turn == 0 ? max(dp[i][mask][turn], moves)\n                                          : min(dp[i][mask][turn], moves);\n          }\n\n    // Returns the maximum cost to kill all pawns, i.e., the original positions\n    // array without the knight (kx, ky).\n    return dp[n][1 << n][0];\n  }\n\n private:\n  static constexpr int kSize = 50;\n  static constexpr int kMax = 1'000'000;\n  static constexpr int dirs[8][2] = {{1, 2},   {2, 1},   {2, -1}, {1, -2},\n                                     {-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}};\n\n  int hash(int x, int y) {\n    return x * kSize + y;\n  }\n\n  // Computes the distance between positions[sourceIndex] and other positions.\n  void bfs(const vector<vector<int>>& positions, int sourceIndex,\n           const unordered_map<int, int>& hashedPositionToIndex,\n           vector<vector<int>>& dist) {\n    const int sx = positions[sourceIndex][0];\n    const int sy = positions[sourceIndex][1];\n    queue<pair<int, int>> q{{{sx, sy}}};\n    vector<vector<bool>> seen(kSize, vector<bool>(kSize));\n    seen[sx][sy] = true;\n    int seenPositions = 0;\n\n    for (int step = 0; !q.empty() && seenPositions < positions.size(); ++step)\n      for (int sz = q.size(); sz > 0; --sz) {\n        const auto [i, j] = q.front();\n        q.pop();\n        if (const auto it = hashedPositionToIndex.find(hash(i, j));\n            it != end(hashedPositionToIndex)) {\n          dist[sourceIndex][it->second] = step;\n          ++seenPositions;\n        }\n        for (const auto& [dx, dy] : dirs) {\n          const int x = i + dx;\n          const int y = j + dy;\n          if (x < 0 || x >= kSize || y < 0 || y >= kSize)\n            continue;\n          if (seen[x][y])\n            continue;\n          q.emplace(x, y);\n          seen[x][y] = true;\n        }\n      }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxMoves(int kx, int ky, int[][] positions) {\n    final int n = positions.length;\n    List<int[]> positionsList = new ArrayList<>(List.of(positions));\n    positionsList.add(new int[] {kx, ky});\n    Map<Integer, Integer> hashedPositionToIndex = new HashMap<>();\n    // dist[i][j] := the minimum distance from positions[i] to positions[j]\n    int[][] dist = new int[n + 1][n + 1];\n\n    for (int i = 0; i < positionsList.size(); ++i) {\n      final int x = positionsList.get(i)[0];\n      final int y = positionsList.get(i)[1];\n      hashedPositionToIndex.put(hash(x, y), i);\n    }\n\n    for (int sourceIndex = 0; sourceIndex < n + 1; ++sourceIndex)\n      bfs(positionsList, sourceIndex, hashedPositionToIndex, dist);\n\n    int kMaxMask = 1 << (n + 1);\n    // dp[i][mask][turn] := the maximum (Alice) or the minimum (Bob) cost to\n    // kill all pawns, where i is the current pawn, mask is the set of pawns\n    // that have been killed, and turn is the current player's turn (0 for Alice\n    // and 1 for Bob)\n    int[][][] dp = new int[n + 1][1 << (n + 1)][2];\n\n    for (int i = 0; i < n + 1; ++i)\n      for (int mask = 0; mask < kMaxMask - 1; ++mask)\n        dp[i][mask] = new int[] {-kMax, kMax};\n\n    for (int mask = kMaxMask - 2; mask >= 0; --mask)\n      for (int i = 0; i < n + 1; ++i)\n        for (int turn = 0; turn < 2; ++turn)\n          for (int j = 0; j < n; ++j) {\n            if ((mask >> j & 1) == 1)\n              continue;\n            final int moves = dist[i][j] + dp[j][mask | 1 << j][1 - turn];\n            dp[i][mask][turn] = turn == 0 ? Math.max(dp[i][mask][turn], moves) //\n                                          : Math.min(dp[i][mask][turn], moves);\n          }\n\n    // Returns the maximum cost to kill all pawns, i.e., the original positions\n    // array without the knight (kx, ky).\n    return dp[n][1 << n][0];\n  }\n\n  private static final int kSize = 50;\n  private static final int kMax = 1_000_000;\n  private static final int[][] dirs = {{1, 2},   {2, 1},   {2, -1}, {1, -2},\n                                       {-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}};\n\n  private int hash(int x, int y) {\n    return x * kSize + y;\n  }\n\n  // Computes the distance between positions[sourceIndex] and other positions.\n  private void bfs(List<int[]> positions, int sourceIndex,\n                   Map<Integer, Integer> hashedPositionToIndex, int[][] dist) {\n    final int sx = positions.get(sourceIndex)[0];\n    final int sy = positions.get(sourceIndex)[1];\n    Queue<Pair<Integer, Integer>> q = new ArrayDeque<>(List.of(new Pair<>(sx, sy)));\n    boolean[][] seen = new boolean[kSize][kSize];\n    seen[sx][sy] = true;\n    int seenPositions = 0;\n\n    for (int step = 0; !q.isEmpty() && seenPositions < positions.size(); ++step)\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int i = q.peek().getKey();\n        final int j = q.poll().getValue();\n        final int hashedPosition = hash(i, j);\n        if (hashedPositionToIndex.containsKey(hashedPosition)) {\n          dist[sourceIndex][hashedPositionToIndex.get(hashedPosition)] = step;\n          ++seenPositions;\n        }\n        for (int[] dir : dirs) {\n          final int x = i + dir[0];\n          final int y = j + dir[1];\n          if (x < 0 || x >= kSize || y < 0 || y >= kSize)\n            continue;\n          if (seen[x][y])\n            continue;\n          q.offer(new Pair<>(x, y));\n          seen[x][y] = true;\n        }\n      }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def __init__(self):\n    self.kSize = 50\n    self.kMax = 1_000_000\n    self.dirs = ((1, 2), (2, 1), (2, -1), (1, -2),\n                 (-1, -2), (-2, -1), (-2, 1), (-1, 2))\n\n  def maxMoves(self, kx: int, ky: int, positions: list[list[int]]) -> int:\n    n = len(positions)\n    positions.append([kx, ky])\n    hashedPositionToIndex = {}\n    # dist[i][j] := the minimum distance from positions[i] to positions[j]\n    dist = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i, (x, y) in enumerate(positions):\n      hashedPositionToIndex[self._hash(x, y)] = i\n\n    for sourceIndex in range(n + 1):\n      self._bfs(positions, sourceIndex, hashedPositionToIndex, dist)\n\n    kMaxMask = 1 << (n + 1)\n    # dp[i][mask][turn] := the maximum (Alice) or the minimum (Bob) cost to\n    # kill all pawns, where i is the current pawn, mask is the set of pawns\n    # that have been killed, and turn is the current player's turn (0 for Alice\n    # and 1 for Bob)\n    dp = [[[0, 0]\n          for _ in range(1 << (n + 1))]\n          for _ in range(n + 1)]\n\n    for i in range(n + 1):\n      for mask in range(kMaxMask - 1):\n        dp[i][mask] = [-self.kMax, self.kMax]\n\n    for mask in range(kMaxMask - 2, -1, -1):\n      for i in range(n + 1):\n        for turn in range(2):\n          for j in range(n):\n            if mask >> j & 1:\n              continue\n            moves = dist[i][j] + dp[j][mask | 1 << j][1 - turn]\n            dp[i][mask][turn] = (max(dp[i][mask][turn], moves) if turn == 0 else\n                                 min(dp[i][mask][turn], moves))\n\n    # Returns the maximum cost to kill all pawns, i.e., the original positions\n    # array without the knight (kx, ky).\n    return dp[n][1 << n][0]\n\n  def _hash(self, x: int, y: int) -> int:\n    return x * self.kSize + y\n\n  def _bfs(\n      self,\n      positions: list[list[int]],\n      sourceIndex: int,\n      hashedPositionToIndex: dict[int, int],\n      dist: list[list[int]]\n  ) -> None:\n    \"\"\"\n    Computes the distance between positions[sourceIndex] and other positions.\n    \"\"\"\n    sx, sy = positions[sourceIndex]\n    q = collections.deque([(sx, sy)])\n    seen = {(sx, sy)}\n    seenPositions = 0\n\n    step = 0\n    while q and seenPositions < len(positions):\n      for _ in range(len(q)):\n        i, j = q.popleft()\n        hashedPosition = self._hash(i, j)\n        if hashedPosition in hashedPositionToIndex:\n          dist[sourceIndex][hashedPositionToIndex[hashedPosition]] = step\n          seenPositions += 1\n        for dx, dy in self.dirs:\n          x = i + dx\n          y = j + dy\n          if x < 0 or x >= self.kSize or y < 0 or y >= self.kSize:\n            continue\n          if (x, y) in seen:\n            continue\n          q.append((x, y))\n          seen.add((x, y))\n      step += 1\n",
                "lang_text": "py"
            }
        }
    }
}