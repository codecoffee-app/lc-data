{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2472",
            "title": "Maximum Number of Non-overlapping Palindrome Substrings",
            "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
            "content": "<p>You are given a string <code>s</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>Select a set of <strong>non-overlapping</strong> substrings from the string <code>s</code> that satisfy the following conditions:</p>\n\n<ul>\n\t<li>The <strong>length</strong> of each substring is <strong>at least</strong> <code>k</code>.</li>\n\t<li>Each substring is a <strong>palindrome</strong>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> number of substrings in an optimal selection</em>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abaccdbbd&quot;, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can select the substrings underlined in s = &quot;<u><strong>aba</strong></u>cc<u><strong>dbbd</strong></u>&quot;. Both &quot;aba&quot; and &quot;dbbd&quot; are palindromes and have a length of at least k = 3.\nIt can be shown that we cannot find a selection with more than two valid substrings.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;adbcda&quot;, k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no palindrome substring of length at least 2 in the string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 430,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning\", \"titleSlug\": \"palindrome-partitioning\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning II\", \"titleSlug\": \"palindrome-partitioning-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning III\", \"titleSlug\": \"palindrome-partitioning-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Non-Overlapping Substrings\", \"titleSlug\": \"maximum-number-of-non-overlapping-substrings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning IV\", \"titleSlug\": \"palindrome-partitioning-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.2K\", \"totalSubmission\": \"33.7K\", \"totalAcceptedRaw\": 13173, \"totalSubmissionRaw\": 33707, \"acRate\": \"39.1%\"}",
            "hints": [
                "Try to use dynamic programming to solve the problem.",
                "let dp[i] be the answer for the prefix s[0\u2026i].",
                "The final answer to the problem will be dp[n-1]. How do you compute this dp?"
            ],
            "rephrased": {
                "body": "Given a string `s` and a positive integer `k`, find the maximum number of non-overlapping palindromic substrings within `s` that each have a length of at least `k`. A substring is a contiguous sequence of characters within a string.",
                "constraints": [
                    "1 <= k <= s.length <= 2000",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"abaccdbbd\", k = 3",
                        "output": "2",
                        "explanation": "The substrings \"aba\" and \"dbbd\" can be selected. Both are palindromes, have length at least k = 3, and do not overlap. It can be shown that a selection with more than two substrings is not possible."
                    },
                    {
                        "input": "s = \"adbcda\", k = 2",
                        "output": "0",
                        "explanation": "There are no palindromic substrings with length at least 2 in the string."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-palindromic-substring",
                "title": "Longest Palindromic Substring",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "palindrome-partitioning",
                "title": "Palindrome Partitioning",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-partitioning-ii",
                "title": "Palindrome Partitioning II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-partitioning-iii",
                "title": "Palindrome Partitioning III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-non-overlapping-substrings",
                "title": "Maximum Number of Non-Overlapping Substrings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-partitioning-iv",
                "title": "Palindrome Partitioning IV",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try to use dynamic programming to solve the problem.",
            "let dp[i] be the answer for the prefix s[0\u2026i].",
            "The final answer to the problem will be dp[n-1]. How do you compute this dp?"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxPalindromes(string s, int k) {\n    const int n = s.length();\n    // dp[i] := max # of substrings in the first i chars of s\n    vector<int> dp(n + 1);\n\n    // If a palindrome is a substring of another palindrome, then considering\n    // the longer palindrome won't increase the number of non-overlapping\n    // palindromes. So, we only need to consider the shorter one. Also,\n    // considering palindromes with both k length and k + 1 length ensures that\n    // we look for both even and odd length palindromes.\n    for (int i = k; i <= n; ++i) {\n      dp[i] = dp[i - 1];\n      // Consider palindrome with length k.\n      if (isPalindrome(s, i - k, i - 1))\n        dp[i] = max(dp[i], 1 + dp[i - k]);\n      // Consider palindrome with length k + 1.\n      if (isPalindrome(s, i - k - 1, i - 1))\n        dp[i] = max(dp[i], 1 + dp[i - k - 1]);\n    }\n\n    return dp[n];\n  }\n\n private:\n  // Returns true is s[i:j] is a palindrome.\n  bool isPalindrome(const string& s, int l, int r) {\n    if (l < 0)\n      return false;\n    while (l < r)\n      if (s[l++] != s[r--])\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxPalindromes(String s, int k) {\n    final int n = s.length();\n    // dp[i] := max # of substrings in the first i chars of s\n    int[] dp = new int[n + 1];\n\n    // If a palindrome is a subString of another palindrome, then considering\n    // the longer palindrome won't increase the number of non-overlapping\n    // palindromes. So, we only need to consider the shorter one. Also,\n    // considering palindromes with both k length and k + 1 length ensures that\n    // we look for both even and odd length palindromes.\n    for (int i = k; i <= n; ++i) {\n      dp[i] = dp[i - 1];\n      // Consider palindrome with length k.\n      if (isPalindrome(s, i - k, i - 1))\n        dp[i] = Math.max(dp[i], 1 + dp[i - k]);\n      // Consider palindrome with length k + 1.\n      if (isPalindrome(s, i - k - 1, i - 1))\n        dp[i] = Math.max(dp[i], 1 + dp[i - k - 1]);\n    }\n\n    return dp[n];\n  }\n\n  // Returns true is s[i:j] is a palindrome.\n  private boolean isPalindrome(String s, int l, int r) {\n    if (l < 0)\n      return false;\n    while (l < r)\n      if (s.charAt(l++) != s.charAt(r--))\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxPalindromes(self, s: str, k: int) -> int:\n    n = len(s)\n    # dp[i] := max # of substrings in the first i chars of s\n    dp = [0] * (n + 1)\n\n    # Returns True is s[i:j] is a palindrome.\n    def isPalindrome(l: int, r: int) -> bool:\n      if l < 0:\n        return False\n      while l < r:\n        if s[l] != s[r]:\n          return False\n        l += 1\n        r -= 1\n      return True\n\n    # If a palindrome is a subof another palindrome, then considering\n    # the longer palindrome won't increase the number of non-overlapping\n    # palindromes. So, we only need to consider the shorter one. Also,\n    # considering palindromes with both k length and k + 1 length ensures that\n    # we look for both even and odd length palindromes.\n    for i in range(k, n + 1):\n      dp[i] = dp[i - 1]\n      # Consider palindrome with length k.\n      if isPalindrome(i - k, i - 1):\n        dp[i] = max(dp[i], 1 + dp[i - k])\n      # Consider palindrome with length k + 1.\n      if isPalindrome(i - k - 1, i - 1):\n        dp[i] = max(dp[i], 1 + dp[i - k - 1])\n\n    return dp[n]\n",
                "lang_text": "py"
            }
        }
    }
}