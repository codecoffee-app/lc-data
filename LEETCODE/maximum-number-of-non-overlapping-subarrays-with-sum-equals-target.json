{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1546",
            "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
            "titleSlug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
            "content": "<p>Given an array <code>nums</code> and an integer <code>target</code>, return <em>the maximum number of <strong>non-empty</strong> <strong>non-overlapping</strong> subarrays such that the sum of values in each subarray is equal to</em> <code>target</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,1,1], target = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 non-overlapping subarrays [<strong>1,1</strong>,1,<strong>1,1</strong>] with sum equals to target(2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,3,5,1,4,2,-9], target = 6\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= target &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1022,
            "dislikes": 25,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.8K\", \"totalSubmission\": \"56.4K\", \"totalAcceptedRaw\": 26844, \"totalSubmissionRaw\": 56441, \"acRate\": \"47.6%\"}",
            "hints": [
                "Keep track of prefix sums to quickly look up what subarray that sums \"target\" can be formed at each step of scanning the input array.",
                "It can be proved that greedily forming valid subarrays as soon as one is found is optimal."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `target`, find the maximum number of non-empty, non-overlapping subarrays whose elements sum to `target`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-10^4 <= nums[i] <= 10^4",
                    "0 <= target <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,1,1,1,1], target = 2",
                        "output": "2",
                        "explanation": "Two non-overlapping subarrays [1,1,1,1,1] sum to the target value of 2.  Specifically, [1,1] and [1,1] are the non-overlapping subarrays that meet the criteria."
                    },
                    {
                        "input": "nums = [-1,3,5,1,4,2,-9], target = 6",
                        "output": "2",
                        "explanation": "There are multiple subarrays that sum to 6, such as [5,1], [4,2], and [3,5,1,4,2,-9]. However, only two non-overlapping subarrays, [5,1] and [4,2], can be selected to maximize the count."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Keep track of prefix sums to quickly look up what subarray that sums \"target\" can be formed at each step of scanning the input array.",
            "It can be proved that greedily forming valid subarrays as soon as one is found is optimal."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxNonOverlapping(vector<int>& nums, int target) {\n    // Ending the subarray ASAP always has a better result.\n    int ans = 0;\n    int prefix = 0;\n    unordered_set<int> prefixes{0};\n\n    // Greedily find the subarrays that equal to the target.\n    for (const int num : nums) {\n      // Check if there is a subarray ends here and equals to the target.\n      prefix += num;\n      if (prefixes.count(prefix - target)) {\n        // Find one and discard all the prefixes that have been used.\n        ++ans;\n        prefix = 0;\n        prefixes = {0};\n      } else {\n        prefixes.insert(prefix);\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public static int maxNonOverlapping(int[] nums, int target) {\n    // Ending the subarray ASAP always has a better result.\n    int ans = 0;\n    int prefix = 0;\n    Set<Integer> prefixes = new HashSet<>(Arrays.asList(0));\n\n    // Greedily find the subarrays that equal to the target.\n    for (int num : nums) {\n      prefix += num;\n      // Check if there is a subarray ends here and equals to the target.\n      if (prefixes.contains(prefix - target)) {\n        // Find one and discard all the prefixes that have been used.\n        ans++;\n        prefix = 0;\n        prefixes = new HashSet<>(Arrays.asList(0));\n      } else {\n        prefixes.add(prefix);\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n    # Ending the subarray ASAP always has a better result.\n    ans = 0\n    prefix = 0\n    prefixes = {0}\n\n    # Greedily find the subarrays that equal to the target.\n    for num in nums:\n      # Check if there is a subarray ends here and equals to the target.\n      prefix += num\n      if prefix - target in prefixes:\n        # Find one and discard all the prefixes that have been used.\n        ans += 1\n        prefix = 0\n        prefixes = {0}\n      else:\n        prefixes.add(prefix)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}