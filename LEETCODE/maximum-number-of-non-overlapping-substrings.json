{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1520",
            "title": "Maximum Number of Non-Overlapping Substrings",
            "titleSlug": "maximum-number-of-non-overlapping-substrings",
            "content": "<p>Given a string <code>s</code> of lowercase letters, you need to find the maximum number of <strong>non-empty</strong> substrings of <code>s</code> that meet the following conditions:</p>\n\n<ol>\n\t<li>The substrings do not overlap, that is for any two substrings <code>s[i..j]</code> and <code>s[x..y]</code>, either <code>j &lt; x</code> or <code>i &gt; y</code> is true.</li>\n\t<li>A substring that contains a certain character <code>c</code> must also contain all occurrences of <code>c</code>.</li>\n</ol>\n\n<p>Find <em>the maximum number of substrings that meet the above conditions</em>. If there are multiple solutions with the same number of substrings, <em>return the one with minimum total length. </em>It can be shown that there exists a unique solution of minimum total length.</p>\n\n<p>Notice that you can return the substrings in <strong>any</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;adefaddaccc&quot;\n<strong>Output:</strong> [&quot;e&quot;,&quot;f&quot;,&quot;ccc&quot;]\n<b>Explanation:</b>&nbsp;The following are all the possible substrings that meet the conditions:\n[\n&nbsp; &quot;adefaddaccc&quot;\n&nbsp; &quot;adefadda&quot;,\n&nbsp; &quot;ef&quot;,\n&nbsp; &quot;e&quot;,\n  &quot;f&quot;,\n&nbsp; &quot;ccc&quot;,\n]\nIf we choose the first string, we cannot choose anything else and we&#39;d get only 1. If we choose &quot;adefadda&quot;, we are left with &quot;ccc&quot; which is the only one that doesn&#39;t overlap, thus obtaining 2 substrings. Notice also, that it&#39;s not optimal to choose &quot;ef&quot; since it can be split into two. Therefore, the optimal way is to choose [&quot;e&quot;,&quot;f&quot;,&quot;ccc&quot;] which gives us 3 substrings. No other solution of the same number of substrings exist.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abbaccd&quot;\n<strong>Output:</strong> [&quot;d&quot;,&quot;bb&quot;,&quot;cc&quot;]\n<b>Explanation: </b>Notice that while the set of substrings [&quot;d&quot;,&quot;abba&quot;,&quot;cc&quot;] also has length 3, it&#39;s considered incorrect since it has larger total length.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 786,
            "dislikes": 72,
            "similarQuestions": "[{\"title\": \"Maximum Number of Non-overlapping Palindrome Substrings\", \"titleSlug\": \"maximum-number-of-non-overlapping-palindrome-substrings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.1K\", \"totalSubmission\": \"38.9K\", \"totalAcceptedRaw\": 15112, \"totalSubmissionRaw\": 38938, \"acRate\": \"38.8%\"}",
            "hints": [
                "Notice that it's impossible for any two valid substrings to overlap unless one is inside another.",
                "We can start by finding the starting and ending index for each character.",
                "From these indices, we can form the substrings by expanding each character's range if necessary (if another character exists in the range with smaller/larger starting/ending index).",
                "Sort the valid substrings by length and greedily take those with the smallest length, discarding the ones that overlap those we took."
            ],
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase letters, the goal is to find the maximum number of non-overlapping, non-empty substrings of `s` that satisfy the following conditions:\n\n1.  **Non-overlapping:**  Substrings `s[i..j]` and `s[x..y]` must not overlap, meaning either `j < x` or `i > y`.\n2.  **Complete Character Coverage:** If a substring contains a character `c`, it must contain *all* occurrences of `c` within the original string `s`.\n\nFind the maximum number of substrings that meet these conditions. If multiple solutions achieve the same maximum number of substrings, choose the one with the minimum total length of substrings. It is guaranteed that a unique solution with minimum total length exists.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "adefaddaccc",
                        "output": "[\"e\",\"f\",\"ccc\"]",
                        "explanation": "The optimal solution divides the string into the substrings \"e\", \"f\", and \"ccc\". These substrings satisfy both the non-overlapping and complete character coverage conditions.  Other possible substring combinations either have fewer substrings or a larger total length."
                    },
                    {
                        "input": "abbaccd",
                        "output": "[\"d\",\"bb\",\"cc\"]",
                        "explanation": "The substrings \"d\", \"bb\", and \"cc\" represent the optimal solution. While \"d\", \"abba\", and \"cc\" also give 3 substrings, the total length is greater than the optimal solution."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
                "title": "Maximum Number of Non-overlapping Palindrome Substrings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Notice that it's impossible for any two valid substrings to overlap unless one is inside another.",
            "We can start by finding the starting and ending index for each character.",
            "From these indices, we can form the substrings by expanding each character's range if necessary (if another character exists in the range with smaller/larger starting/ending index).",
            "Sort the valid substrings by length and greedily take those with the smallest length, discarding the ones that overlap those we took."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> maxNumOfSubstrings(string s) {\n    const int n = s.length();\n    vector<string> ans;\n    vector<int> leftmost(26, n);    // Leftmost index of each letter\n    vector<int> rightmost(26, -1);  // Rightmost index of each letter\n\n    for (int i = 0; i < n; ++i) {\n      leftmost[s[i] - 'a'] = min(leftmost[s[i] - 'a'], i);\n      rightmost[s[i] - 'a'] = i;\n    }\n\n    auto getNewRight = [&](int i) {\n      int right = rightmost[s[i] - 'a'];\n      for (int j = i; j <= right; ++j) {\n        if (leftmost[s[j] - 'a'] < i)  // Find a letter's first index < i\n          return -1;\n        right = max(right, rightmost[s[j] - 'a']);  // Right expands dynamically\n      }\n      return right;\n    };\n\n    int right = -1;  // Last substring's rightmost index\n    for (int i = 0; i < n; ++i) {\n      if (i == leftmost[s[i] - 'a']) {  // Current index is the first appearance\n        const int newRight = getNewRight(i);\n        if (newRight == -1)\n          continue;  // Find a letter's first index < i\n        if (i <= right && !ans.empty())\n          ans.back() = s.substr(i, newRight - i + 1);\n        else\n          ans.push_back(s.substr(i, newRight - i + 1));\n        right = newRight;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}