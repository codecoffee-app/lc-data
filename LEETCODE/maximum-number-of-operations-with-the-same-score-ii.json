{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3040",
            "title": "Maximum Number of Operations With the Same Score II",
            "titleSlug": "maximum-number-of-operations-with-the-same-score-ii",
            "content": "<p>Given an array of integers called <code>nums</code>, you can perform <strong>any</strong> of the following operation while <code>nums</code> contains <strong>at least</strong> <code>2</code> elements:</p>\n\n<ul>\n\t<li>Choose the first two elements of <code>nums</code> and delete them.</li>\n\t<li>Choose the last two elements of <code>nums</code> and delete them.</li>\n\t<li>Choose the first and the last elements of <code>nums</code> and delete them.</li>\n</ul>\n\n<p>The<strong> score</strong> of the operation is the sum of the deleted elements.</p>\n\n<p>Your task is to find the <strong>maximum</strong> number of operations that can be performed, such that <strong>all operations have the same score</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of operations possible that satisfy the condition mentioned above</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,2,3,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [1,2,3,4].\n- Delete the first and the last elements, with score 1 + 4 = 5, nums = [2,3].\n- Delete the first and the last elements, with score 2 + 3 = 5, nums = [].\nWe are unable to perform any more operations as nums is empty.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,6,1,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We perform the following operations:\n- Delete the first two elements, with score 3 + 2 = 5, nums = [6,1,4].\n- Delete the last two elements, with score 1 + 4 = 5, nums = [6].\nIt can be proven that we can perform at most 2 operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 144,
            "dislikes": 12,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.3K\", \"totalSubmission\": \"55.8K\", \"totalAcceptedRaw\": 18314, \"totalSubmissionRaw\": 55811, \"acRate\": \"32.8%\"}",
            "hints": [
                "After the first operation, the score of other operations is fixed.",
                "For the fixed score use dynamic programming <code>dp[l][r]</code> to find a maximum number of operations on the subarray <code>nums[l..r]</code>."
            ],
            "rephrased": {
                "body": "Given an array of integers `nums`, you can perform operations to delete elements. Each operation requires at least 2 elements remaining in `nums`. The allowed operations are:\n\n*   Delete the first two elements.\n*   Delete the last two elements.\n*   Delete the first and last elements.\n\nThe score of each operation is the sum of the deleted elements. The goal is to find the maximum number of operations that can be performed such that all operations have the same score.",
                "constraints": [
                    "2 <= nums.length <= 2000",
                    "1 <= nums[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[3,2,1,2,3,4]",
                        "output": "3",
                        "explanation": "One possible solution involves the following steps:\n\n1.  Delete the first two elements (3 + 2 = 5), resulting in `nums = [1,2,3,4]`.\n2.  Delete the first and last elements (1 + 4 = 5), resulting in `nums = [2,3]`.\n3.  Delete the first and last elements (2 + 3 = 5), resulting in `nums = []`.\n\nThis achieves 3 operations with a consistent score of 5."
                    },
                    {
                        "input": "[3,2,6,1,4]",
                        "output": "2",
                        "explanation": "One possible solution involves the following steps:\n\n1. Delete the first two elements (3 + 2 = 5), resulting in `nums = [6,1,4]`\n2. Delete the last two elements (1 + 4 = 5), resulting in `nums = [6]`\nIt can be proven that we can perform at most 2 operations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "After the first operation, the score of other operations is fixed.",
            "For the fixed score use dynamic programming <code>dp[l][r]</code> to find a maximum number of operations on the subarray <code>nums[l..r]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxOperations(vector<int>& nums) {\n    const int n = nums.size();\n    unordered_map<string, int> mem;\n    return max({maxOperations(nums, 0, n - 1, nums[0] + nums[1], mem),\n                maxOperations(nums, 0, n - 1, nums[n - 1] + nums[n - 2], mem),\n                maxOperations(nums, 0, n - 1, nums[0] + nums[n - 1], mem)});\n  }\n\n private:\n  // Returns the maximum number of operations that can be performed for\n  // nums[i..j], s.t. all operations have the same `score`.\n  int maxOperations(const vector<int>& nums, int i, int j, int score,\n                    unordered_map<string, int>& mem) {\n    if (i >= j)\n      return 0;\n    const string key = hash(i, j, score);\n    if (const auto it = mem.find(key); it != mem.end())\n      return it->second;\n    const int deleteFirstTwo =\n        nums[i] + nums[i + 1] == score\n            ? 1 + maxOperations(nums, i + 2, j, score, mem)\n            : 0;\n    const int deleteLastTwo =\n        nums[j] + nums[j - 1] == score\n            ? 1 + maxOperations(nums, i, j - 2, score, mem)\n            : 0;\n    const int deleteFirstAndLast =\n        nums[i] + nums[j] == score\n            ? 1 + maxOperations(nums, i + 1, j - 1, score, mem)\n            : 0;\n    return mem[key] = max({deleteFirstTwo, deleteLastTwo, deleteFirstAndLast});\n  }\n\n  string hash(int i, int j, int score) {\n    return to_string(i) + \",\" + to_string(j) + \",\" + to_string(score);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxOperations(int[] nums) {\n    final int n = nums.length;\n    Map<String, Integer> mem = new HashMap<>();\n    return Math.max(Math.max(maxOperations(nums, 0, n - 1, nums[0] + nums[1], mem),\n                             maxOperations(nums, 0, n - 1, nums[n - 1] + nums[n - 2], mem)),\n                    maxOperations(nums, 0, n - 1, nums[0] + nums[n - 1], mem));\n  }\n\n  // Returns the maximum number of operations that can be performed for\n  // nums[i..j], s.t. all operations have the same `score`.\n  private int maxOperations(int[] nums, int i, int j, int score, Map<String, Integer> mem) {\n    if (i >= j)\n      return 0;\n    final String key = hash(i, j, score);\n    if (mem.containsKey(key))\n      return mem.get(key);\n    final int deleteFirstTwo =\n        nums[i] + nums[i + 1] == score ? 1 + maxOperations(nums, i + 2, j, score, mem) : 0;\n    final int deleteLastTwo =\n        nums[j] + nums[j - 1] == score ? 1 + maxOperations(nums, i, j - 2, score, mem) : 0;\n    final int deleteFirstAndLast =\n        nums[i] + nums[j] == score ? 1 + maxOperations(nums, i + 1, j - 1, score, mem) : 0;\n    mem.put(key, Math.max(Math.max(deleteFirstTwo, deleteLastTwo), deleteFirstAndLast));\n    return mem.get(key);\n  }\n\n  private String hash(int i, int j, int score) {\n    return i + \",\" + j + \",\" + score;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxOperations(self, nums: List[int]) -> int:\n    @functools.lru_cache(None)\n    def dp(i: int, j: int, score: int) -> int:\n      \"\"\"\n      Returns the maximum number of operations that can be performed for\n      nums[i..j], s.t. all operations have the same `score`.\n      \"\"\"\n      if i >= j:\n        return 0\n      deleteFirstTwo = 1 + dp(i + 2, j, score) \\\n          if nums[i] + nums[i + 1] == score else 0\n      deleteLastTwo = 1 + dp(i, j - 2, score) \\\n          if nums[j] + nums[j - 1] == score else 0\n      deleteFirstAndLast = 1 + dp(i + 1, j - 1, score) \\\n          if nums[i] + nums[j] == score else 0\n      return max(deleteFirstTwo, deleteLastTwo, deleteFirstAndLast)\n\n    n = len(nums)\n    return max(dp(0, n - 1, nums[0] + nums[1]),\n               dp(0, n - 1, nums[-1] + nums[-2]),\n               dp(0, n - 1, nums[0] + nums[-1]))\n",
                "lang_text": "py"
            }
        }
    }
}