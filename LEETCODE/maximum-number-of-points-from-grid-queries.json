{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2503",
            "title": "Maximum Number of Points From Grid Queries",
            "titleSlug": "maximum-number-of-points-from-grid-queries",
            "content": "<p>You are given an <code>m x n</code> integer matrix <code>grid</code> and an array <code>queries</code> of size <code>k</code>.</p>\n\n<p>Find an array <code>answer</code> of size <code>k</code> such that for each integer <code>queries[i]</code> you start in the <strong>top left</strong> cell of the matrix and repeat the following process:</p>\n\n<ul>\n\t<li>If <code>queries[i]</code> is <strong>strictly</strong> greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any <strong>adjacent</strong> cell in all <code>4</code> directions: up, down, left, and right.</li>\n\t<li>Otherwise, you do not get any points, and you end this process.</li>\n</ul>\n\n<p>After the process, <code>answer[i]</code> is the <strong>maximum</strong> number of points you can get. <strong>Note</strong> that for each query you are allowed to visit the same cell <strong>multiple</strong> times.</p>\n\n<p>Return <em>the resulting array</em> <code>answer</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/19/yetgriddrawio.png\" style=\"width: 571px; height: 151px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2]\n<strong>Output:</strong> [5,8,1]\n<strong>Explanation:</strong> The diagrams above show which cells we visit to get points for each query.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/20/yetgriddrawio-2.png\" />\n<pre>\n<strong>Input:</strong> grid = [[5,2,1],[1,1,2]], queries = [3]\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> We can not get any points because the value of the top left cell is already greater than or equal to 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>2 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>4 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>k == queries.length</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= grid[i][j], queries[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 445,
            "dislikes": 15,
            "similarQuestions": "[{\"title\": \"Trapping Rain Water II\", \"titleSlug\": \"trapping-rain-water-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Escape the Spreading Fire\", \"titleSlug\": \"escape-the-spreading-fire\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.1K\", \"totalSubmission\": \"22.4K\", \"totalAcceptedRaw\": 8130, \"totalSubmissionRaw\": 22447, \"acRate\": \"36.2%\"}",
            "hints": [
                "The queries are all given to you beforehand so you can answer them in any order you want.",
                "Sort the queries knowing their original order to be able to build the answer array.",
                "Run a BFS on the graph and answer the queries in increasing order."
            ],
            "rephrased": {
                "body": "Given an m x n integer matrix `grid` and an array `queries` of size k, find an array `answer` of size k. For each `queries[i]`, start at the top-left cell of `grid`. If `queries[i]` is strictly greater than the current cell's value and it's your first visit to that cell, you gain one point and can move to any adjacent cell (up, down, left, right). Otherwise, the process ends. `answer[i]` is the maximum points achievable for `queries[i]`. You can revisit cells multiple times. Return the `answer` array.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "2 <= m, n <= 1000",
                    "4 <= m * n <= 10^5",
                    "k == queries.length",
                    "1 <= k <= 10^4",
                    "1 <= grid[i][j], queries[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2]",
                        "output": "[5,8,1]",
                        "explanation": "For query 5, we can visit cells [1,2,3,2,1], achieving 5 points. For query 6, we can visit [1,2,3,2,5,5,1,1], achieving 8 points. For query 2, we can only visit cell [1], achieving 1 point."
                    },
                    {
                        "input": "grid = [[5,2,1],[1,1,2]], queries = [3]",
                        "output": "[0]",
                        "explanation": "We cannot get any points because the value of the top left cell (5) is not strictly less than 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "trapping-rain-water-ii",
                "title": "Trapping Rain Water II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "escape-the-spreading-fire",
                "title": "Escape the Spreading Fire",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The queries are all given to you beforehand so you can answer them in any order you want.",
            "Sort the queries knowing their original order to be able to build the answer array.",
            "Run a BFS on the graph and answer the queries in increasing order."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  int i;\n  int j;\n  int val;  // grid[i][j]\n  T(int i, int j, int val) : i(i), j(j), val(val) {}\n};\n\nclass Solution {\n public:\n  vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    vector<int> ans(queries.size());\n    vector<pair<int, int>> queryAndIndexes;\n    auto compare = [](const T& a, const T& b) { return a.val > b.val; };\n    priority_queue<T, vector<T>, decltype(compare)> minHeap(compare);\n    vector<vector<bool>> seen(m, vector<bool>(n));\n\n    for (int i = 0; i < queries.size(); ++i)\n      queryAndIndexes.emplace_back(queries[i], i);\n\n    std::ranges::sort(queryAndIndexes);\n\n    minHeap.emplace(0, 0, grid[0][0]);\n    seen[0][0] = true;\n    int accumulate = 0;\n\n    for (const auto& [query, index] : queryAndIndexes) {\n      while (!minHeap.empty()) {\n        const auto [i, j, val] = minHeap.top();\n        minHeap.pop();\n        if (val >= query) {\n          // The smallest neighbor is still larger than `query`, so no need to\n          // keep exploring. Re-push (i, j, grid[i][j]) back to the `minHeap`.\n          minHeap.emplace(i, j, val);\n          break;\n        }\n        ++accumulate;\n        for (int k = 0; k < 4; ++k) {\n          const int x = i + dirs[k];\n          const int y = j + dirs[k + 1];\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          if (seen[x][y])\n            continue;\n          minHeap.emplace(x, y, grid[x][y]);\n          seen[x][y] = true;\n        }\n      }\n      ans[index] = accumulate;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int i;\n  public int j;\n  public int val; // grid[i][j]\n  public T(int i, int j, int val) {\n    this.i = i;\n    this.j = j;\n    this.val = val;\n  }\n}\n\nclass Solution {\n  public int[] maxPoints(int[][] grid, int[] queries) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    final int[] dirs = {0, 1, 0, -1, 0};\n    int[] ans = new int[queries.length];\n    Pair<Integer, Integer>[] queryAndIndexes = new Pair[queries.length];\n    Queue<T> minHeap = new PriorityQueue<>((a, b) -> a.val - b.val);\n    boolean[][] seen = new boolean[m][n];\n\n    for (int i = 0; i < queries.length; ++i)\n      queryAndIndexes[i] = new Pair<>(queries[i], i);\n\n    Arrays.sort(queryAndIndexes, (a, b) -> a.getKey() - b.getKey());\n\n    minHeap.offer(new T(0, 0, grid[0][0]));\n    seen[0][0] = true;\n    int accumulate = 0;\n\n    for (Pair<Integer, Integer> pair : queryAndIndexes) {\n      final int query = pair.getKey();\n      final int index = pair.getValue();\n      while (!minHeap.isEmpty()) {\n        final int i = minHeap.peek().i;\n        final int j = minHeap.peek().j;\n        final int val = minHeap.poll().val;\n        if (val >= query) {\n          // The smallest neighbor is still larger than `query`, so no need to\n          // keep exploring. Re-push (i, j, grid[i][j]) back to the `minHeap`.\n          minHeap.offer(new T(i, j, val));\n          break;\n        }\n        ++accumulate;\n        for (int k = 0; k < 4; ++k) {\n          final int x = i + dirs[k];\n          final int y = j + dirs[k + 1];\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          if (seen[x][y])\n            continue;\n          minHeap.offer(new T(x, y, grid[x][y]));\n          seen[x][y] = true;\n        }\n      }\n      ans[index] = accumulate;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxPoints(self, grid: List[List[int]], queries: List[int]) -> List[int]:\n    m = len(grid)\n    n = len(grid[0])\n    dirs = [0, 1, 0, -1, 0]\n    ans = [0] * len(queries)\n    queryAndIndexes = sorted([(query, i) for i, query in enumerate(queries)])\n    minHeap = [(grid[0][0], 0, 0)]  # (grid[i][j], i, j)\n    seen = {(0, 0)}\n    accumulate = 0\n\n    for query, index in queryAndIndexes:\n      while minHeap:\n        val, i, j = heapq.heappop(minHeap)\n        if val >= query:\n          # The smallest neighbor is still larger than `query`, so no need to\n          # keep exploring. Re-push (i, j, grid[i][j]) back to the `minHeap`.\n          heapq.heappush(minHeap, (val, i, j))\n          break\n        accumulate += 1\n        for k in range(4):\n          x = i + dirs[k]\n          y = j + dirs[k + 1]\n          if x < 0 or x == m or y < 0 or y == n:\n            continue\n          if (x, y) in seen:\n            continue\n          heapq.heappush(minHeap, (grid[x][y], x, y))\n          seen.add((x, y))\n      ans[index] = accumulate\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}