{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1937",
            "title": "Maximum Number of Points with Cost",
            "titleSlug": "maximum-number-of-points-with-cost",
            "content": "<p>You are given an <code>m x n</code> integer matrix <code>points</code> (<strong>0-indexed</strong>). Starting with <code>0</code> points, you want to <strong>maximize</strong> the number of points you can get from the matrix.</p>\n\n<p>To gain points, you must pick one cell in <strong>each row</strong>. Picking the cell at coordinates <code>(r, c)</code> will <strong>add</strong> <code>points[r][c]</code> to your score.</p>\n\n<p>However, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows <code>r</code> and <code>r + 1</code> (where <code>0 &lt;= r &lt; m - 1</code>), picking cells at coordinates <code>(r, c<sub>1</sub>)</code> and <code>(r + 1, c<sub>2</sub>)</code> will <strong>subtract</strong> <code>abs(c<sub>1</sub> - c<sub>2</sub>)</code> from your score.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of points you can achieve</em>.</p>\n\n<p><code>abs(x)</code> is defined as:</p>\n\n<ul>\n\t<li><code>x</code> for <code>x &gt;= 0</code>.</li>\n\t<li><code>-x</code> for <code>x &lt; 0</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong><strong> </strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/12/screenshot-2021-07-12-at-13-40-26-diagram-drawio-diagrams-net.png\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,2,3],[1,5,1],[3,1,1]]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong>\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).\nYou add 3 + 5 + 3 = 11 to your score.\nHowever, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.\nYour final score is 11 - 2 = 9.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/12/screenshot-2021-07-12-at-13-42-14-diagram-drawio-diagrams-net.png\" style=\"width: 200px; height: 299px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,5],[2,3],[4,2]]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong>\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).\nYou add 5 + 3 + 4 = 12 to your score.\nHowever, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.\nYour final score is 12 - 1 = 11.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == points.length</code></li>\n\t<li><code>n == points[r].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= points[r][c] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2258,
            "dislikes": 135,
            "similarQuestions": "[{\"title\": \"Minimum Path Sum\", \"titleSlug\": \"minimum-path-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimize the Difference Between Target and Chosen Elements\", \"titleSlug\": \"minimize-the-difference-between-target-and-chosen-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"57.5K\", \"totalSubmission\": \"160.8K\", \"totalAcceptedRaw\": 57522, \"totalSubmissionRaw\": 160769, \"acRate\": \"35.8%\"}",
            "hints": [
                "Try using dynamic programming.",
                "dp[i][j] is the maximum number of points you can have if points[i][j] is the most recent cell you picked."
            ],
            "rephrased": {
                "body": "Given an m x n integer matrix `points` (0-indexed), the goal is to maximize the total points earned by selecting one cell from each row. Selecting cell (r, c) adds `points[r][c]` to the score. However, a penalty is incurred between adjacent rows.  For rows r and r+1, selecting cells (r, c1) and (r+1, c2) subtracts `abs(c1 - c2)` from the score.  Return the maximum achievable score.",
                "constraints": [
                    "m == points.length",
                    "n == points[r].length",
                    "1 <= m, n <= 10^5",
                    "1 <= m * n <= 10^5",
                    "0 <= points[r][c] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[[1,2,3],[1,5,1],[3,1,1]]",
                        "output": "9",
                        "explanation": "Selecting cells (0, 2), (1, 1), and (2, 0) yields a score of 3 + 5 + 3 = 11. The penalty between adjacent rows is |2 - 1| + |1 - 0| = 1 + 1 = 2. Therefore, the final score is 11 - 2 = 9."
                    },
                    {
                        "input": "[[1,5],[2,3],[4,2]]",
                        "output": "11",
                        "explanation": "Selecting cells (0, 1), (1, 1), and (2, 0) yields a score of 5 + 3 + 4 = 12. The penalty between adjacent rows is |1 - 1| + |1 - 0| = 0 + 1 = 1. Therefore, the final score is 12 - 1 = 11."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-path-sum",
                "title": "Minimum Path Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimize-the-difference-between-target-and-chosen-elements",
                "title": "Minimize the Difference Between Target and Chosen Elements",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try using dynamic programming.",
            "dp[i][j] is the maximum number of points you can have if points[i][j] is the most recent cell you picked."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maxPoints(vector<vector<int>>& points) {\n    const int n = points[0].size();\n    // dp[j] := max # points you can have if points[i][j] is the most recent\n    // Cell you picked\n    vector<long long> dp(n);\n\n    for (const vector<int>& row : points) {\n      vector<long long> leftToRight(n);\n      long long runningMax = 0;\n\n      for (int j = 0; j < n; ++j) {\n        runningMax = max(runningMax - 1, dp[j]);\n        leftToRight[j] = runningMax;\n      }\n\n      vector<long long> rightToLeft(n);\n      runningMax = 0;\n\n      for (int j = n - 1; j >= 0; --j) {\n        runningMax = max(runningMax - 1, dp[j]);\n        rightToLeft[j] = runningMax;\n      }\n\n      for (int j = 0; j < n; ++j)\n        dp[j] = max(leftToRight[j], rightToLeft[j]) + row[j];\n    }\n\n    return *max_element(dp.begin(), dp.end());\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maxPoints(int[][] points) {\n    final int n = points[0].length;\n    // dp[j] := max # points you can have if points[i][j] is the most recent cell you picked\n    long[] dp = new long[n];\n\n    for (int[] row : points) {\n      long[] leftToRight = new long[n];\n      long runningMax = 0;\n\n      for (int j = 0; j < n; ++j) {\n        runningMax = Math.max(runningMax - 1, dp[j]);\n        leftToRight[j] = runningMax;\n      }\n\n      long[] rightToLeft = new long[n];\n      runningMax = 0;\n\n      for (int j = n - 1; j >= 0; --j) {\n        runningMax = Math.max(runningMax - 1, dp[j]);\n        rightToLeft[j] = runningMax;\n      }\n\n      for (int j = 0; j < n; ++j)\n        dp[j] = Math.max(leftToRight[j], rightToLeft[j]) + row[j];\n    }\n\n    return Arrays.stream(dp).max().getAsLong();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxPoints(self, points: List[List[int]]) -> int:\n    n = len(points[0])\n    # dp[j] := max # Points you can have if points[i][j] is the most recent cell you picked\n    dp = [0] * n\n\n    for row in points:\n      leftToRight = [0] * n\n      runningMax = 0\n      for j in range(n):\n        runningMax = max(runningMax - 1, dp[j])\n        leftToRight[j] = runningMax\n\n      rightToLeft = [0] * n\n      runningMax = 0\n      for j in range(n - 1, - 1, -1):\n        runningMax = max(runningMax - 1, dp[j])\n        rightToLeft[j] = runningMax\n\n      for j in range(n):\n        dp[j] = max(leftToRight[j], rightToLeft[j]) + row[j]\n\n    return max(dp)\n",
                "lang_text": "py"
            }
        }
    }
}