{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1898",
            "title": "Maximum Number of Removable Characters",
            "titleSlug": "maximum-number-of-removable-characters",
            "content": "<p>You are given two strings <code>s</code> and <code>p</code> where <code>p</code> is a <strong>subsequence </strong>of <code>s</code>. You are also given a <strong>distinct 0-indexed </strong>integer array <code>removable</code> containing a subset of indices of <code>s</code> (<code>s</code> is also <strong>0-indexed</strong>).</p>\n\n<p>You want to choose an integer <code>k</code> (<code>0 &lt;= k &lt;= removable.length</code>) such that, after removing <code>k</code> characters from <code>s</code> using the <strong>first</strong> <code>k</code> indices in <code>removable</code>, <code>p</code> is still a <strong>subsequence</strong> of <code>s</code>. More formally, you will mark the character at <code>s[removable[i]]</code> for each <code>0 &lt;= i &lt; k</code>, then remove all marked characters and check if <code>p</code> is still a subsequence.</p>\n\n<p>Return <em>the <strong>maximum</strong> </em><code>k</code><em> you can choose such that </em><code>p</code><em> is still a <strong>subsequence</strong> of </em><code>s</code><em> after the removals</em>.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcacb&quot;, p = &quot;ab&quot;, removable = [3,1,0]\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: After removing the characters at indices 3 and 1, &quot;a<s><strong>b</strong></s>c<s><strong>a</strong></s>cb&quot; becomes &quot;accb&quot;.\n&quot;ab&quot; is a subsequence of &quot;<strong><u>a</u></strong>cc<strong><u>b</u></strong>&quot;.\nIf we remove the characters at indices 3, 1, and 0, &quot;<s><strong>ab</strong></s>c<s><strong>a</strong></s>cb&quot; becomes &quot;ccb&quot;, and &quot;ab&quot; is no longer a subsequence.\nHence, the maximum k is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcbddddd&quot;, p = &quot;abcd&quot;, removable = [3,2,1,4,5,6]\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: After removing the character at index 3, &quot;abc<s><strong>b</strong></s>ddddd&quot; becomes &quot;abcddddd&quot;.\n&quot;abcd&quot; is a subsequence of &quot;<u><strong>abcd</strong></u>dddd&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcab&quot;, p = &quot;abc&quot;, removable = [0,1,2,3,4]\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: If you remove the first index in the array removable, &quot;abc&quot; is no longer a subsequence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= p.length &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= removable.length &lt; s.length</code></li>\n\t<li><code>0 &lt;= removable[i] &lt; s.length</code></li>\n\t<li><code>p</code> is a <strong>subsequence</strong> of <code>s</code>.</li>\n\t<li><code>s</code> and <code>p</code> both consist of lowercase English letters.</li>\n\t<li>The elements in <code>removable</code> are <strong>distinct</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 931,
            "dislikes": 119,
            "similarQuestions": "[{\"title\": \"Maximum Candies Allocated to K Children\", \"titleSlug\": \"maximum-candies-allocated-to-k-children\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"27K\", \"totalSubmission\": \"63K\", \"totalAcceptedRaw\": 26980, \"totalSubmissionRaw\": 63021, \"acRate\": \"42.8%\"}",
            "hints": [
                "First, we need to think about solving an easier problem, If we remove a set of indices from the string does P exist in S as a subsequence",
                "We can binary search the K and check by solving the above problem."
            ],
            "rephrased": {
                "body": "Given two strings `s` and `p`, where `p` is a subsequence of `s`. You are also given a distinct 0-indexed integer array `removable` containing indices of `s`. The goal is to find the maximum integer `k` (0 <= k <= removable.length) such that after removing the characters from `s` at the first `k` indices specified in `removable`, `p` remains a subsequence of the modified `s`.",
                "constraints": [
                    "1 <= p.length <= s.length <= 10^5",
                    "0 <= removable.length < s.length",
                    "0 <= removable[i] < s.length",
                    "p is a subsequence of s.",
                    "s and p both consist of lowercase English letters.",
                    "The elements in removable are distinct."
                ],
                "testcases": [
                    {
                        "input": "s = \"abcacb\", p = \"ab\", removable = [3,1,0]",
                        "output": "2",
                        "explanation": "Removing characters at indices 3 and 1 results in \"accb\", which still contains \"ab\" as a subsequence. Removing indices 3, 1, and 0 results in \"ccb\", which no longer contains \"ab\" as a subsequence. Therefore, the maximum k is 2."
                    },
                    {
                        "input": "s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]",
                        "output": "1",
                        "explanation": "Removing the character at index 3 results in \"abcddddd\", which still contains \"abcd\" as a subsequence."
                    },
                    {
                        "input": "s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]",
                        "output": "0",
                        "explanation": "Removing the first index (0) in the removable array results in string where \"abc\" is no longer a subsequence."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-candies-allocated-to-k-children",
                "title": "Maximum Candies Allocated to K Children",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "First, we need to think about solving an easier problem, If we remove a set of indices from the string does P exist in S as a subsequence",
            "We can binary search the K and check by solving the above problem."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumRemovals(string s, string p, vector<int>& removable) {\n    int l = 0;\n    int r = removable.size() + 1;\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      const string removed = remove(s, removable, m);\n      if (isSubsequence(p, removed))\n        l = m + 1;\n      else\n        r = m;\n    }\n\n    return l - 1;\n  }\n\n private:\n  string remove(const string& s, const vector<int>& removable, int k) {\n    string removed(s);\n    for (int i = 0; i < k; ++i)\n      removed[removable[i]] = '*';\n    return removed;\n  }\n\n  bool isSubsequence(const string& p, const string& s) {\n    int i = 0;  // p's index\n    for (int j = 0; j < s.length(); ++j)\n      if (p[i] == s[j])\n        if (++i == p.length())\n          return true;\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumRemovals(String s, String p, int[] removable) {\n    int l = 0;\n    int r = removable.length + 1;\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      final String removed = remove(s, removable, m);\n      if (isSubsequence(p, removed))\n        l = m + 1;\n      else\n        r = m;\n    }\n\n    return l - 1;\n  }\n\n  private String remove(final String s, int[] removable, int k) {\n    StringBuilder sb = new StringBuilder(s);\n    for (int i = 0; i < k; ++i)\n      sb.setCharAt(removable[i], '*');\n    return sb.toString();\n  }\n\n  private boolean isSubsequence(final String p, final String s) {\n    int i = 0; // p's index\n    for (int j = 0; j < s.length(); ++j)\n      if (p.charAt(i) == s.charAt(j))\n        if (++i == p.length())\n          return true;\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumRemovals(self, s: str, p: str, removable: List[int]) -> int:\n    l = 0\n    r = len(removable) + 1\n\n    def remove(k: int) -> str:\n      removed = [c for c in s]\n      for i in range(k):\n        removed[removable[i]] = '*'\n      return ''.join(removed)\n\n    def isSubsequence(p: str, s: str) -> bool:\n      i = 0\n      for j, c in enumerate(s):\n        if p[i] == s[j]:\n          i += 1\n          if i == len(p):\n            return True\n      return False\n\n    while l < r:\n      m = (l + r) // 2\n      removed = remove(m)\n      if isSubsequence(p, removed):\n        l = m + 1\n      else:\n        r = m\n\n    return l - 1\n",
                "lang_text": "py"
            }
        }
    }
}