{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2071",
            "title": "Maximum Number of Tasks You Can Assign",
            "titleSlug": "maximum-number-of-tasks-you-can-assign",
            "content": "<p>You have <code>n</code> tasks and <code>m</code> workers. Each task has a strength requirement stored in a <strong>0-indexed</strong> integer array <code>tasks</code>, with the <code>i<sup>th</sup></code> task requiring <code>tasks[i]</code> strength to complete. The strength of each worker is stored in a <strong>0-indexed</strong> integer array <code>workers</code>, with the <code>j<sup>th</sup></code> worker having <code>workers[j]</code> strength. Each worker can only be assigned to a <strong>single</strong> task and must have a strength <strong>greater than or equal</strong> to the task&#39;s strength requirement (i.e., <code>workers[j] &gt;= tasks[i]</code>).</p>\n\n<p>Additionally, you have <code>pills</code> magical pills that will <strong>increase a worker&#39;s strength</strong> by <code>strength</code>. You can decide which workers receive the magical pills, however, you may only give each worker <strong>at most one</strong> magical pill.</p>\n\n<p>Given the <strong>0-indexed </strong>integer arrays <code>tasks</code> and <code>workers</code> and the integers <code>pills</code> and <code>strength</code>, return <em>the <strong>maximum</strong> number of tasks that can be completed.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [<u><strong>3</strong></u>,<u><strong>2</strong></u>,<u><strong>1</strong></u>], workers = [<u><strong>0</strong></u>,<u><strong>3</strong></u>,<u><strong>3</strong></u>], pills = 1, strength = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 2 (0 + 1 &gt;= 1)\n- Assign worker 1 to task 1 (3 &gt;= 2)\n- Assign worker 2 to task 0 (3 &gt;= 3)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [<u><strong>5</strong></u>,4], workers = [<u><strong>0</strong></u>,0,0], pills = 1, strength = 5\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 0 (0 + 5 &gt;= 5)\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [<u><strong>10</strong></u>,<u><strong>15</strong></u>,30], workers = [<u><strong>0</strong></u>,<u><strong>10</strong></u>,10,10,10], pills = 3, strength = 10\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nWe can assign the magical pills and tasks as follows:\n- Give the magical pill to worker 0 and worker 1.\n- Assign worker 0 to task 0 (0 + 10 &gt;= 10)\n- Assign worker 1 to task 1 (10 + 10 &gt;= 15)\nThe last pill is not given because it will not make any worker strong enough for the last task.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == tasks.length</code></li>\n\t<li><code>m == workers.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= pills &lt;= m</code></li>\n\t<li><code>0 &lt;= tasks[i], workers[j], strength &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 497,
            "dislikes": 19,
            "similarQuestions": "[{\"title\": \"Most Profit Assigning Work\", \"titleSlug\": \"most-profit-assigning-work\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Running Time of N Computers\", \"titleSlug\": \"maximum-running-time-of-n-computers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Robots Within Budget\", \"titleSlug\": \"maximum-number-of-robots-within-budget\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Matching of Players With Trainers\", \"titleSlug\": \"maximum-matching-of-players-with-trainers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximize the Minimum Powered City\", \"titleSlug\": \"maximize-the-minimum-powered-city\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Monotonic Queue",
                    "slug": "monotonic-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.1K\", \"totalSubmission\": \"24K\", \"totalAcceptedRaw\": 8118, \"totalSubmissionRaw\": 24022, \"acRate\": \"33.8%\"}",
            "hints": [
                "Is it possible to assign the first k smallest tasks to the workers?",
                "How can you efficiently try every k?"
            ],
            "rephrased": {
                "body": "You are given `n` tasks and `m` workers. Each task has a strength requirement, represented by the 0-indexed integer array `tasks`, where `tasks[i]` is the strength required for the i-th task. Each worker has a strength, represented by the 0-indexed integer array `workers`, where `workers[j]` is the strength of the j-th worker. A worker can only be assigned to one task, and their strength must be greater than or equal to the task's strength requirement.  You also have `pills` magical pills, each of which increases a worker's strength by `strength`. Each worker can receive at most one pill.  Determine the maximum number of tasks that can be completed.",
                "constraints": [
                    "n == tasks.length",
                    "m == workers.length",
                    "1 <= n, m <= 5 * 10^4",
                    "0 <= pills <= m",
                    "0 <= tasks[i], workers[j], strength <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1",
                        "output": "3",
                        "explanation": "Give the magical pill to worker 0. Assign worker 0 to task 2 (0 + 1 >= 1). Assign worker 1 to task 1 (3 >= 2). Assign worker 2 to task 0 (3 >= 3)."
                    },
                    {
                        "input": "tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5",
                        "output": "1",
                        "explanation": "Give the magical pill to worker 0. Assign worker 0 to task 0 (0 + 5 >= 5)."
                    },
                    {
                        "input": "tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10",
                        "output": "2",
                        "explanation": "Give the magical pill to worker 0 and worker 1. Assign worker 0 to task 0 (0 + 10 >= 10). Assign worker 1 to task 1 (10 + 10 >= 15).  The last pill is not used as it wouldn't enable completion of the remaining task."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "most-profit-assigning-work",
                "title": "Most Profit Assigning Work",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-running-time-of-n-computers",
                "title": "Maximum Running Time of N Computers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-robots-within-budget",
                "title": "Maximum Number of Robots Within Budget",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-matching-of-players-with-trainers",
                "title": "Maximum Matching of Players With Trainers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximize-the-minimum-powered-city",
                "title": "Maximize the Minimum Powered City",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Is it possible to assign the first k smallest tasks to the workers?",
            "How can you efficiently try every k?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Monotonic Queue",
                "slug": "monotonic-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills,\n                    int strength) {\n    int ans = 0;\n    int l = 0;\n    int r = min(tasks.size(), workers.size());\n\n    std::ranges::sort(tasks);\n    std::ranges::sort(workers);\n\n    // Can we finish k tasks?\n    auto canComplete = [&](int k, int pillsLeft) {\n      // K strongest workers\n      map<int, int> sortedWorkers;\n      for (int i = workers.size() - k; i < workers.size(); ++i)\n        ++sortedWorkers[workers[i]];\n\n      // Out of the k smallest tasks, start from the biggest one.\n      for (int i = k - 1; i >= 0; --i) {\n        // Find the first worker that has strength >= tasks[i].\n        auto it = sortedWorkers.lower_bound(tasks[i]);\n        if (it != sortedWorkers.end()) {\n          if (--(it->second) == 0)\n            sortedWorkers.erase(it);\n        } else if (pillsLeft > 0) {\n          // Find the first worker that has strength >= tasks[i] - strength.\n          it = sortedWorkers.lower_bound(tasks[i] - strength);\n          if (it != sortedWorkers.end()) {\n            if (--(it->second) == 0)\n              sortedWorkers.erase(it);\n            --pillsLeft;\n          } else {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    while (l <= r) {\n      const int m = (l + r) / 2;\n      if (canComplete(m, pills)) {\n        ans = m;\n        l = m + 1;\n      } else {\n        r = m - 1;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {\n    int ans = 0;\n    int l = 0;\n    int r = Math.min(tasks.length, workers.length);\n\n    Arrays.sort(tasks);\n    Arrays.sort(workers);\n\n    while (l <= r) {\n      final int m = (l + r) / 2;\n      if (canComplete(tasks, workers, pills, strength, m)) {\n        ans = m;\n        l = m + 1;\n\n      } else {\n        r = m - 1;\n      }\n    }\n\n    return ans;\n  }\n\n  // Can we finish k tasks?\n  private boolean canComplete(int[] tasks, int[] workers, int pillsLeft, int strength, int k) {\n    // K strongest workers\n    TreeMap<Integer, Integer> sortedWorkers = new TreeMap<>();\n    for (int i = workers.length - k; i < workers.length; ++i)\n      sortedWorkers.merge(workers[i], 1, Integer::sum);\n\n    // Out of the k smallest tasks, start from the biggest one.\n    for (int i = k - 1; i >= 0; --i) {\n      // Find the first worker that has strength >= tasks[i].\n      Integer lo = sortedWorkers.ceilingKey(tasks[i]);\n      if (lo != null) {\n        sortedWorkers.merge(lo, -1, Integer::sum);\n        if (sortedWorkers.get(lo) == 0) {\n          sortedWorkers.remove(lo);\n        }\n      } else if (pillsLeft > 0) {\n        // Find the first worker that has strength >= tasks[i] - strength.\n        lo = sortedWorkers.ceilingKey(tasks[i] - strength);\n        if (lo != null) {\n          sortedWorkers.merge(lo, -1, Integer::sum);\n          if (sortedWorkers.get(lo) == 0) {\n            sortedWorkers.remove(lo);\n          }\n          --pillsLeft;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from sortedcontainers import SortedList\n\n\nclass Solution:\n  def maxTaskAssign(self, tasks: List[int], workers: List[int], pills: int, strength: int) -> int:\n    tasks.sort()\n    workers.sort()\n\n    # Can we finish k tasks?\n    def canComplete(k: int, pillsLeft: int) -> bool:\n      # K strongest workers\n      sortedWorkers = SortedList(workers[-k:])\n\n      # Out of the k smallest tasks, start from the biggest one.\n      for i in reversed(range(k)):\n        # Find the first worker that has strength >= tasks[i].\n        index = sortedWorkers.bisect_left(tasks[i])\n        if index < len(sortedWorkers):\n          sortedWorkers.pop(index)\n        elif pillsLeft > 0:\n          # Find the first worker that has strength >= tasks[i] - strength.\n          index = sortedWorkers.bisect_left(tasks[i] - strength)\n          if index < len(sortedWorkers):\n            sortedWorkers.pop(index)\n            pillsLeft -= 1\n          else:\n            return False\n        else:\n          return False\n\n      return True\n\n    ans = 0\n    l = 0\n    r = min(len(tasks), len(workers))\n\n    while l <= r:\n      m = (l + r) // 2\n      if canComplete(m, pills):\n        ans = m\n        l = m + 1\n      else:\n        r = m - 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}