{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2025",
            "title": "Maximum Number of Ways to Partition an Array",
            "titleSlug": "maximum-number-of-ways-to-partition-an-array",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code>. The number of ways to <strong>partition</strong> <code>nums</code> is the number of <code>pivot</code> indices that satisfy both conditions:</p>\n\n<ul>\n\t<li><code>1 &lt;= pivot &lt; n</code></li>\n\t<li><code>nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]</code></li>\n</ul>\n\n<p>You are also given an integer <code>k</code>. You can choose to change the value of <strong>one</strong> element of <code>nums</code> to <code>k</code>, or to leave the array <strong>unchanged</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible number of ways to <strong>partition</strong> </em><code>nums</code><em> to satisfy both conditions after changing <strong>at most</strong> one element</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,-1,2], k = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> One optimal approach is to change nums[0] to k. The array becomes [<strong><u>3</u></strong>,-1,2].\nThere is one way to partition the array:\n- For pivot = 2, we have the partition [3,-1 | 2]: 3 + -1 == 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0], k = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The optimal approach is to leave the array unchanged.\nThere are two ways to partition the array:\n- For pivot = 1, we have the partition [0 | 0,0]: 0 == 0 + 0.\n- For pivot = 2, we have the partition [0,0 | 0]: 0 + 0 == 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One optimal approach is to change nums[2] to k. The array becomes [22,4,<u><strong>-33</strong></u>,-20,-15,15,-16,7,19,-10,0,-13,-14].\nThere are four ways to partition the array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= k, nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 441,
            "dislikes": 47,
            "similarQuestions": "[{\"title\": \"Partition Equal Subset Sum\", \"titleSlug\": \"partition-equal-subset-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Partition to K Equal Sum Subsets\", \"titleSlug\": \"partition-to-k-equal-sum-subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.3K\", \"totalSubmission\": \"24.6K\", \"totalAcceptedRaw\": 8295, \"totalSubmissionRaw\": 24572, \"acRate\": \"33.8%\"}",
            "hints": [
                "A pivot point splits the array into equal prefix and suffix. If no change is made to the array, the goal is to find the number of pivot p such that prefix[p-1] == suffix[p].",
                "Consider how prefix and suffix will change when we change a number nums[i] to k.",
                "When sweeping through each element, can you find the total number of pivots where the difference of prefix and suffix happens to equal to the changes of k-nums[i]."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` of length `n`, a partition is valid if there exists a `pivot` index satisfying: `1 <= pivot < n` and `nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]`.  You are given an integer `k`. You can change the value of at most one element of `nums` to `k`, or leave the array unchanged.  Return the maximum possible number of valid partitions of `nums` after changing at most one element.",
                "constraints": [
                    "n == nums.length",
                    "2 <= n <= 10^5",
                    "-10^5 <= k, nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,-1,2], k = 3",
                        "output": "1",
                        "explanation": "One optimal approach is to change nums[0] to k, making the array [3,-1,2]. There is one valid partition with pivot = 2, where 3 + (-1) == 2."
                    },
                    {
                        "input": "nums = [0,0,0], k = 1",
                        "output": "2",
                        "explanation": "The optimal approach is to leave the array unchanged. There are two valid partitions: pivot = 1 (0 == 0 + 0) and pivot = 2 (0 + 0 == 0)."
                    },
                    {
                        "input": "nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33",
                        "output": "4",
                        "explanation": "One optimal approach is to change nums[2] to k, making the array [22,4,-33,-20,-15,15,-16,7,19,-10,0,-13,-14]. There are four valid partitions."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "partition-equal-subset-sum",
                "title": "Partition Equal Subset Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "partition-to-k-equal-sum-subsets",
                "title": "Partition to K Equal Sum Subsets",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "A pivot point splits the array into equal prefix and suffix. If no change is made to the array, the goal is to find the number of pivot p such that prefix[p-1] == suffix[p].",
            "Consider how prefix and suffix will change when we change a number nums[i] to k.",
            "When sweeping through each element, can you find the total number of pivots where the difference of prefix and suffix happens to equal to the changes of k-nums[i]."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Counting",
                "slug": "counting"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int waysToPartition(vector<int>& nums, int k) {\n    const int n = nums.size();\n    const long sum = accumulate(nums.begin(), nums.end(), 0L);\n    long prefix = 0;\n    // count of sum(A[0..k)) - sum(A[k..n)) for k in [0..i)\n    unordered_map<long, int> l;\n    // count of sum(A[0..k)) - sum(A[k..n)) for k in [i..n)\n    unordered_map<long, int> r;\n\n    for (int pivot = 1; pivot < n; ++pivot) {\n      prefix += nums[pivot - 1];\n      const long suffix = sum - prefix;\n      ++r[prefix - suffix];\n    }\n\n    int ans = r[0];\n    prefix = 0;\n\n    for (const int num : nums) {\n      ans = max(ans, l[k - num] + r[num - k]);\n      prefix += num;\n      const long suffix = sum - prefix;\n      const long diff = prefix - suffix;\n      --r[diff];\n      ++l[diff];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int waysToPartition(int[] nums, int k) {\n    final int n = nums.length;\n    final long sum = Arrays.stream(nums).asLongStream().sum();\n    long prefix = 0;\n    // count of sum(A[0..k)) - sum(A[k..n)) for k in [0..i)\n    Map<Long, Integer> l = new HashMap<>();\n    // count of sum(A[0..k)) - sum(A[k..n)) for k in [i..n)\n    Map<Long, Integer> r = new HashMap<>();\n\n    for (int pivot = 1; pivot < n; ++pivot) {\n      prefix += nums[pivot - 1];\n      final long suffix = sum - prefix;\n      r.merge(prefix - suffix, 1, Integer::sum);\n    }\n\n    int ans = r.getOrDefault(0L, 0);\n    prefix = 0;\n\n    for (final int num : nums) {\n      final long change = (long) k - num;\n      ans = Math.max(ans, l.getOrDefault(change, 0) + r.getOrDefault(-change, 0));\n      prefix += num;\n      final long suffix = sum - prefix;\n      final long diff = prefix - suffix;\n      r.merge(diff, -1, Integer::sum);\n      l.merge(diff, 1, Integer::sum);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def waysToPartition(self, nums: List[int], k: int) -> int:\n    n = len(nums)\n    summ = sum(nums)\n    prefix = 0\n    # Count of sum(A[0..k)) - sum(A[k..n)) for k in [0..i)\n    l = collections.Counter()\n    # Count of sum(A[0..k)) - sum(A[k..n)) for k in [i..n)\n    r = collections.Counter()\n\n    for pivot in range(1, n):\n      prefix += nums[pivot - 1]\n      suffix = summ - prefix\n      r[prefix - suffix] += 1\n\n    ans = r[0]\n    prefix = 0\n\n    for num in nums:\n      ans = max(ans, l[k - num] + r[num - k])\n      prefix += num\n      suffix = summ - prefix\n      diff = prefix - suffix\n      r[diff] -= 1\n      l[diff] += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}