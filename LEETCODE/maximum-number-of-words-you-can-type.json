{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1935",
            "title": "Maximum Number of Words You Can Type",
            "titleSlug": "maximum-number-of-words-you-can-type",
            "content": "<p>There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.</p>\n\n<p>Given a string <code>text</code> of words separated by a single space (no leading or trailing spaces) and a string <code>brokenLetters</code> of all <strong>distinct</strong> letter keys that are broken, return <em>the <strong>number of words</strong> in</em> <code>text</code> <em>you can fully type using this keyboard</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;hello world&quot;, brokenLetters = &quot;ad&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We cannot type &quot;world&quot; because the &#39;d&#39; key is broken.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;leet code&quot;, brokenLetters = &quot;lt&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We cannot type &quot;leet&quot; because the &#39;l&#39; and &#39;t&#39; keys are broken.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;leet code&quot;, brokenLetters = &quot;e&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We cannot type either word because the &#39;e&#39; key is broken.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= brokenLetters.length &lt;= 26</code></li>\n\t<li><code>text</code> consists of words separated by a single space without any leading or trailing spaces.</li>\n\t<li>Each word only consists of lowercase English letters.</li>\n\t<li><code>brokenLetters</code> consists of <strong>distinct</strong> lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 562,
            "dislikes": 26,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"52.7K\", \"totalSubmission\": \"72.7K\", \"totalAcceptedRaw\": 52747, \"totalSubmissionRaw\": 72741, \"acRate\": \"72.5%\"}",
            "hints": [
                "Check each word separately if it can be typed.",
                "A word can be typed if all its letters are not broken."
            ],
            "rephrased": {
                "body": "Given a string `text` consisting of words separated by single spaces, and a string `brokenLetters` containing distinct broken letter keys, determine the number of words in `text` that can be typed using the keyboard. A word can be typed if it does not contain any of the broken letters.",
                "constraints": [
                    "1 <= text.length <= 10^4",
                    "0 <= brokenLetters.length <= 26",
                    "`text` consists of words separated by a single space without any leading or trailing spaces.",
                    "Each word only consists of lowercase English letters.",
                    "`brokenLetters` consists of distinct lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": {
                            "text": "hello world",
                            "brokenLetters": "ad"
                        },
                        "output": 1,
                        "explanation": "The word \"hello\" can be typed because it doesn't contain 'a' or 'd'. However, \"world\" contains 'd', which is a broken letter. Therefore, only 1 word can be typed."
                    },
                    {
                        "input": {
                            "text": "leet code",
                            "brokenLetters": "lt"
                        },
                        "output": 1,
                        "explanation": "The word \"code\" can be typed because it doesn't contain 'l' or 't'. However, \"leet\" contains 'l' and 't', which are broken letters. Therefore, only 1 word can be typed."
                    },
                    {
                        "input": {
                            "text": "leet code",
                            "brokenLetters": "e"
                        },
                        "output": 0,
                        "explanation": "Neither \"leet\" nor \"code\" can be typed because both words contain the broken letter 'e'. Therefore, 0 words can be typed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Check each word separately if it can be typed.",
            "A word can be typed if all its letters are not broken."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int canBeTypedWords(string text, string brokenLetters) {\n    int ans = 0;\n    istringstream iss(text);\n    vector<bool> broken(26);\n\n    for (const char c : brokenLetters)\n      broken[c - 'a'] = true;\n\n    for (string word; iss >> word;)\n      ans += canBeTyped(word, broken);\n\n    return ans;\n  }\n\n private:\n  bool canBeTyped(const string& word, const vector<bool>& broken) {\n    for (const char c : word)\n      if (broken[c - 'a'])\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int canBeTypedWords(String text, String brokenLetters) {\n    int ans = 0;\n    boolean[] broken = new boolean[26];\n\n    for (final char c : brokenLetters.toCharArray())\n      broken[c - 'a'] = true;\n\n    for (final String word : text.split(\" \"))\n      ans += canBeTyped(word, broken);\n\n    return ans;\n  }\n\n  private int canBeTyped(final String word, boolean[] broken) {\n    for (final char c : word.toCharArray())\n      if (broken[c - 'a'])\n        return 0;\n    return 1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canBeTypedWords(self, text: str, brokenLetters: str) -> int:\n    ans = 0\n    broken = set(brokenLetters)\n\n    for word in text.split():\n      ans += all(c not in broken for c in word)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}