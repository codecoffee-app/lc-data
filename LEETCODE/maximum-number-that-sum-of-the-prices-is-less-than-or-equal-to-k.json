{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3007",
            "title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K",
            "titleSlug": "maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k",
            "content": "<p>You are given an integer <code>k</code> and an integer <code>x</code>. The price of a number&nbsp;<code>num</code> is calculated by the count of <span data-keyword=\"set-bit\">set bits</span> at positions <code>x</code>, <code>2x</code>, <code>3x</code>, etc., in its binary representation, starting from the least significant bit. The following table contains examples of how price is calculated.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>x</th>\n\t\t\t<th>num</th>\n\t\t\t<th>Binary Representation</th>\n\t\t\t<th>Price</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>13</td>\n\t\t\t<td><u>0</u><u>0</u><u>0</u><u>0</u><u>0</u><strong><u>1</u></strong><strong><u>1</u></strong><u>0</u><strong><u>1</u></strong></td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>13</td>\n\t\t\t<td>0<u>0</u>0<u>0</u>0<strong><u>1</u></strong>1<u>0</u>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>233</td>\n\t\t\t<td>0<strong><u>1</u></strong>1<strong><u>1</u></strong>0<strong><u>1</u></strong>0<u>0</u>1</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>13</td>\n\t\t\t<td><u>0</u>00<u>0</u>01<strong><u>1</u></strong>01</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>362</td>\n\t\t\t<td><strong><u>1</u></strong>01<strong><u>1</u></strong>01<u>0</u>10</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The&nbsp;<strong>accumulated price</strong>&nbsp;of&nbsp;<code>num</code>&nbsp;is the <b>total</b>&nbsp;price of&nbsp;numbers from <code>1</code> to <code>num</code>. <code>num</code>&nbsp;is considered&nbsp;<strong>cheap</strong>&nbsp;if its accumulated price&nbsp;is less than or equal to <code>k</code>.</p>\n\n<p>Return the <b>greatest</b>&nbsp;cheap number.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 9, x = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>As shown in the table below, <code>6</code> is the greatest cheap number.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>x</th>\n\t\t\t<th>num</th>\n\t\t\t<th>Binary Representation</th>\n\t\t\t<th>Price</th>\n\t\t\t<th>Accumulated Price</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td><u>0</u><u>0</u><strong><u>1</u></strong></td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t\t<td><u>0</u><strong><u>1</u></strong><u>0</u></td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>3</td>\n\t\t\t<td><u>0</u><strong><u>1</u></strong><strong><u>1</u></strong></td>\n\t\t\t<td>2</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>4</td>\n\t\t\t<td><strong><u>1</u></strong><u>0</u><u>0</u></td>\n\t\t\t<td>1</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>5</td>\n\t\t\t<td><strong><u>1</u></strong><u>0</u><strong><u>1</u></strong></td>\n\t\t\t<td>2</td>\n\t\t\t<td>7</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>6</td>\n\t\t\t<td><strong><u>1</u></strong><strong><u>1</u></strong><u>0</u></td>\n\t\t\t<td>2</td>\n\t\t\t<td>9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>7</td>\n\t\t\t<td><strong><u>1</u></strong><strong><u>1</u></strong><strong><u>1</u></strong></td>\n\t\t\t<td>3</td>\n\t\t\t<td>12</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 7, x = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">9</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>As shown in the table below, <code>9</code> is the greatest cheap number.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>x</th>\n\t\t\t<th>num</th>\n\t\t\t<th>Binary Representation</th>\n\t\t\t<th>Price</th>\n\t\t\t<th>Accumulated Price</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t\t<td><u>0</u>0<u>0</u>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>2</td>\n\t\t\t<td><u>0</u>0<strong><u>1</u></strong>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t\t<td><u>0</u>0<strong><u>1</u></strong>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>4</td>\n\t\t\t<td><u>0</u>1<u>0</u>0</td>\n\t\t\t<td>0</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>5</td>\n\t\t\t<td><u>0</u>1<u>0</u>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>6</td>\n\t\t\t<td><u>0</u>1<strong><u>1</u></strong>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>7</td>\n\t\t\t<td><u>0</u>1<strong><u>1</u></strong>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>8</td>\n\t\t\t<td><strong><u>1</u></strong>0<u>0</u>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>9</td>\n\t\t\t<td><strong><u>1</u></strong>0<u>0</u>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>6</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>10</td>\n\t\t\t<td><strong><u>1</u></strong>0<strong><u>1</u></strong>0</td>\n\t\t\t<td>2</td>\n\t\t\t<td>8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>15</sup></code></li>\n\t<li><code>1 &lt;= x &lt;= 8</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 277,
            "dislikes": 109,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.3K\", \"totalSubmission\": \"23K\", \"totalAcceptedRaw\": 8328, \"totalSubmissionRaw\": 23032, \"acRate\": \"36.2%\"}",
            "hints": [
                "Binary search the answer.",
                "In each step of the binary search you should calculate the number of the set bits in the <code>i<sup>th</sup></code> position. Then calculate the sum of them."
            ],
            "rephrased": {
                "body": "Given an integer `k` and an integer `x`, we define the price of a number `num` based on the count of set bits in its binary representation at positions `x`, `2x`, `3x`, and so on, starting from the least significant bit. The accumulated price of `num` is the sum of the prices of numbers from 1 to `num`. A number `num` is considered cheap if its accumulated price is less than or equal to `k`. The goal is to find the greatest cheap number.",
                "constraints": [
                    "1 <= k <= 10^15",
                    "1 <= x <= 8"
                ],
                "testcases": [
                    {
                        "input": "k = 9, x = 1",
                        "output": "6",
                        "explanation": "The accumulated prices for numbers 1 to 6 are as follows:\n- 1: Price = 1, Accumulated Price = 1\n- 2: Price = 1, Accumulated Price = 2\n- 3: Price = 2, Accumulated Price = 4\n- 4: Price = 1, Accumulated Price = 5\n- 5: Price = 2, Accumulated Price = 7\n- 6: Price = 2, Accumulated Price = 9\n- 7: Price = 3, Accumulated Price = 12\nSince the accumulated price of 6 is 9 (which is <= k) and the accumulated price of 7 is 12 (which is > k), 6 is the greatest cheap number."
                    },
                    {
                        "input": "k = 7, x = 2",
                        "output": "9",
                        "explanation": "The accumulated prices for numbers 1 to 9 are as follows:\n- 1: Price = 0, Accumulated Price = 0\n- 2: Price = 1, Accumulated Price = 1\n- 3: Price = 1, Accumulated Price = 2\n- 4: Price = 0, Accumulated Price = 2\n- 5: Price = 0, Accumulated Price = 2\n- 6: Price = 1, Accumulated Price = 3\n- 7: Price = 1, Accumulated Price = 4\n- 8: Price = 1, Accumulated Price = 5\n- 9: Price = 1, Accumulated Price = 6\n- 10: Price = 2, Accumulated Price = 8\nSince the accumulated price of 9 is 6 (which is <= k) and the accumulated price of 10 is 8 (which is > k), 9 is the greatest cheap number."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Binary search the answer.",
            "In each step of the binary search you should calculate the number of the set bits in the <code>i<sup>th</sup></code> position. Then calculate the sum of them."
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long findMaximumNumber(long long k, int x) {\n    long long l = 1;\n    long long r = 1e15;\n\n    while (l < r) {\n      long long m = (l + r + 1) / 2;\n      if (getSumPrices(m, x) > k)\n        r = m - 1;\n      else\n        l = m;\n    }\n\n    return l;\n  }\n\n private:\n  // Returns the sum of prices of all numbers from 1 to `num`.\n  long long getSumPrices(long long num, int x) {\n    long long sumPrices = 0;\n    // Increment `num` to account the 0-th row in the count of groups.\n    ++num;\n    for (int i = leftmostColumnIndex(num); i > 0; --i)\n      // If the current column is valid, count the number of 1s in this column.\n      if (i % x == 0) {\n        const long long groupSize = 1LL << i;\n        const long long halfGroupSize = 1LL << i - 1;\n        sumPrices += num / groupSize * halfGroupSize;\n        sumPrices += max(0LL, (num % groupSize) - halfGroupSize);\n      }\n    return sumPrices;\n  }\n\n  // Returns the leftmost column index in 1-indexed.\n  int leftmostColumnIndex(long long num) {\n    return 63 - __builtin_clzll(num) + 1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long findMaximumNumber(long k, int x) {\n    long l = 1;\n    long r = 1000000000000000L;\n\n    while (l < r) {\n      final long m = (l + r + 1) / 2;\n      if (getSumPrices(m, x) > k)\n        r = m - 1;\n      else\n        l = m;\n    }\n\n    return l;\n  }\n\n  // Returns the sum of prices of all numbers from 1 to `num`.\n  private long getSumPrices(long num, int x) {\n    long sumPrices = 0;\n    num++; // Increment `num` to account the 0-th row in the count of groups.\n    for (int i = leftmostColumnIndex(num); i > 0; --i)\n      if (i % x == 0) {\n        final long groupSize = 1L << i;\n        final long halfGroupSize = 1L << i - 1;\n        sumPrices += num / groupSize * halfGroupSize;\n        sumPrices += Math.max(0L, (num % groupSize) - halfGroupSize);\n      }\n    return sumPrices;\n  }\n\n  // Returns the leftmost column index in 1-indexed.\n  private int leftmostColumnIndex(long num) {\n    return 63 - Long.numberOfLeadingZeros(num) + 1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMaximumNumber(self, k: int, x: int) -> int:\n    def getSumPrices(num: int) -> int:\n      \"\"\"Returns the sum of prices of all numbers from 1 to `num`.\"\"\"\n      sumPrices = 0\n      # Increment `num` to account the 0-th row in the count of groups.\n      num += 1\n      for i in range(num.bit_length(), 0, -1):\n        if i % x == 0:\n          groupSize = 1 << i\n          halfGroupSize = 1 << i - 1\n          sumPrices += num // groupSize * halfGroupSize\n          sumPrices += max(0, (num % groupSize) - halfGroupSize)\n      return sumPrices\n\n    return bisect.bisect_right(range(1, 10**15), k,\n                               key=lambda m: getSumPrices(m))\n",
                "lang_text": "py"
            }
        }
    }
}