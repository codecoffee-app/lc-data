{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2680",
            "title": "Maximum OR",
            "titleSlug": "maximum-or",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code> and an integer <code>k</code>. In an operation, you can choose an element and multiply it by <code>2</code>.</p>\n\n<p>Return <em>the maximum possible value of </em><code>nums[0] | nums[1] | ... | nums[n - 1]</code> <em>that can be obtained after applying the operation on nums at most </em><code>k</code><em> times</em>.</p>\n\n<p>Note that <code>a | b</code> denotes the <strong>bitwise or</strong> between two integers <code>a</code> and <code>b</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [12,9], k = 1\n<strong>Output:</strong> 30\n<strong>Explanation:</strong> If we apply the operation to index 1, our new array nums will be equal to [12,18]. Thus, we return the bitwise or of 12 and 18, which is 30.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [8,1,2], k = 2\n<strong>Output:</strong> 35\n<strong>Explanation:</strong> If we apply the operation twice on index 0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 15</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 358,
            "dislikes": 43,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"12K\", \"totalSubmission\": \"30K\", \"totalAcceptedRaw\": 12048, \"totalSubmissionRaw\": 30014, \"acRate\": \"40.1%\"}",
            "hints": [
                "The optimal solution should apply all the k operations on a single number.",
                "Calculate the prefix or and the suffix or and perform k operations over each element, and maximize the answer."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` of length `n` and an integer `k`, you can perform an operation where you choose an element and multiply it by 2.\n\nReturn the maximum possible value of `nums[0] | nums[1] | ... | nums[n - 1]` (bitwise OR) that can be obtained after applying the operation on `nums` at most `k` times.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^9",
                    "1 <= k <= 15"
                ],
                "testcases": [
                    {
                        "input": "nums = [12,9], k = 1",
                        "output": "30",
                        "explanation": "Applying the operation once to the element at index 1 (9) results in nums = [12, 18].  The bitwise OR of 12 and 18 is 30."
                    },
                    {
                        "input": "nums = [8,1,2], k = 2",
                        "output": "35",
                        "explanation": "Applying the operation twice to the element at index 0 (8) results in nums = [32, 1, 2].  The bitwise OR of 32, 1, and 2 is 35."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The optimal solution should apply all the k operations on a single number.",
            "Calculate the prefix or and the suffix or and perform k operations over each element, and maximize the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maximumOr(vector<int>& nums, int k) {\n    const int n = nums.size();\n    long long ans = 0;\n    // prefix[i] := nums[0] | nums[1] | ... | nums[i - 1]\n    vector<long long> prefix(n);\n    // suffix[i] := nums[i + 1] | nums[i + 2] | ... nums[n - 1]\n    vector<long long> suffix(n);\n\n    for (int i = 1; i < n; ++i)\n      prefix[i] = prefix[i - 1] | nums[i - 1];\n\n    for (int i = n - 2; i >= 0; --i)\n      suffix[i] = suffix[i + 1] | nums[i + 1];\n\n    // For each num, greedily shift it left by k bits.\n    for (int i = 0; i < n; ++i)\n      ans = max(ans,\n                prefix[i] | static_cast<long long>(nums[i]) << k | suffix[i]);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maximumOr(int[] nums, int k) {\n    final int n = nums.length;\n    long ans = 0;\n    // prefix[i] := nums[0] | nums[1] | ... | nums[i - 1]\n    long[] prefix = new long[n];\n    // suffix[i] := nums[i + 1] | nums[i + 2] | ... nums[n - 1]\n    long[] suffix = new long[n];\n\n    for (int i = 1; i < n; ++i)\n      prefix[i] = prefix[i - 1] | nums[i - 1];\n\n    for (int i = n - 2; i >= 0; --i)\n      suffix[i] = suffix[i + 1] | nums[i + 1];\n\n    // For each num, greedily shift it left by k bits. The bitwise or value is\n    // prefix[i] | nums[i] << k | suffix[i]\n    for (int i = 0; i < n; ++i)\n      ans = Math.max(ans, prefix[i] | (long) nums[i] << k | suffix[i]);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumOr(self, nums: List[int], k: int) -> int:\n    n = len(nums)\n    # prefix[i] := nums[0] | nums[1] | ... | nums[i - 1]\n    prefix = [0] * n\n    # suffix[i] := nums[i + 1] | nums[i + 2] | ... nums[n - 1]\n    suffix = [0] * n\n\n    for i in range(1, n):\n      prefix[i] = prefix[i - 1] | nums[i - 1]\n\n    for i in range(n - 2, -1, -1):\n      suffix[i] = suffix[i + 1] | nums[i + 1]\n\n    # For each num, greedily shift it left by k bits.\n    return max(p | num << k | s for num, p, s in zip(nums, prefix, suffix))\n",
                "lang_text": "py"
            }
        }
    }
}