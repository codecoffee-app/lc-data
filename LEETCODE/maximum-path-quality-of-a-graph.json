{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2065",
            "title": "Maximum Path Quality of a Graph",
            "titleSlug": "maximum-path-quality-of-a-graph",
            "content": "<p>There is an <strong>undirected</strong> graph with <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> (<strong>inclusive</strong>). You are given a <strong>0-indexed</strong> integer array <code>values</code> where <code>values[i]</code> is the <strong>value </strong>of the <code>i<sup>th</sup></code> node. You are also given a <strong>0-indexed</strong> 2D integer array <code>edges</code>, where each <code>edges[j] = [u<sub>j</sub>, v<sub>j</sub>, time<sub>j</sub>]</code> indicates that there is an undirected edge between the nodes <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code>,<sub> </sub>and it takes <code>time<sub>j</sub></code> seconds to travel between the two nodes. Finally, you are given an integer <code>maxTime</code>.</p>\n\n<p>A <strong>valid</strong> <strong>path</strong> in the graph is any path that starts at node <code>0</code>, ends at node <code>0</code>, and takes <strong>at most</strong> <code>maxTime</code> seconds to complete. You may visit the same node multiple times. The <strong>quality</strong> of a valid path is the <strong>sum</strong> of the values of the <strong>unique nodes</strong> visited in the path (each node&#39;s value is added <strong>at most once</strong> to the sum).</p>\n\n<p>Return <em>the <strong>maximum</strong> quality of a valid path</em>.</p>\n\n<p><strong>Note:</strong> There are <strong>at most four</strong> edges connected to each node.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/19/ex1drawio.png\" style=\"width: 269px; height: 170px;\" />\n<pre>\n<strong>Input:</strong> values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49\n<strong>Output:</strong> 75\n<strong>Explanation:</strong>\nOne possible path is 0 -&gt; 1 -&gt; 0 -&gt; 3 -&gt; 0. The total time taken is 10 + 10 + 10 + 10 = 40 &lt;= 49.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/19/ex2drawio.png\" style=\"width: 269px; height: 170px;\" />\n<pre>\n<strong>Input:</strong> values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30\n<strong>Output:</strong> 25\n<strong>Explanation:</strong>\nOne possible path is 0 -&gt; 3 -&gt; 0. The total time taken is 10 + 10 = 20 &lt;= 30.\nThe nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/19/ex31drawio.png\" style=\"width: 236px; height: 170px;\" />\n<pre>\n<strong>Input:</strong> values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50\n<strong>Output:</strong> 7\n<strong>Explanation:</strong>\nOne possible path is 0 -&gt; 1 -&gt; 3 -&gt; 1 -&gt; 0. The total time taken is 10 + 13 + 13 + 10 = 46 &lt;= 50.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == values.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= values[i] &lt;= 10<sup>8</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 2000</code></li>\n\t<li><code>edges[j].length == 3 </code></li>\n\t<li><code>0 &lt;= u<sub>j </sub>&lt; v<sub>j</sub> &lt;= n - 1</code></li>\n\t<li><code>10 &lt;= time<sub>j</sub>, maxTime &lt;= 100</code></li>\n\t<li>All the pairs <code>[u<sub>j</sub>, v<sub>j</sub>]</code> are <strong>unique</strong>.</li>\n\t<li>There are <strong>at most four</strong> edges connected to each node.</li>\n\t<li>The graph may not be connected.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 605,
            "dislikes": 42,
            "similarQuestions": "[{\"title\": \"Cherry Pickup\", \"titleSlug\": \"cherry-pickup\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Reach Destination in Time\", \"titleSlug\": \"minimum-cost-to-reach-destination-in-time\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.6K\", \"totalSubmission\": \"32.2K\", \"totalAcceptedRaw\": 18598, \"totalSubmissionRaw\": 32219, \"acRate\": \"57.7%\"}",
            "hints": [
                "How many nodes can you visit within maxTime seconds?",
                "Can you try every valid path?"
            ],
            "rephrased": {
                "body": "Given an undirected graph with 'n' nodes (0 to n-1) and node values in the 'values' array. The 'edges' array represents connections between nodes, where each edge is defined by [u, v, time], indicating the time to travel between nodes u and v.  Find the maximum quality of a valid path. A valid path starts and ends at node 0, and the total travel time does not exceed 'maxTime'. The quality of a path is the sum of the values of unique nodes visited.",
                "constraints": [
                    "n == values.length",
                    "1 <= n <= 1000",
                    "0 <= values[i] <= 10^8",
                    "0 <= edges.length <= 2000",
                    "edges[j].length == 3",
                    "0 <= u_j < v_j <= n - 1",
                    "10 <= time_j, maxTime <= 100",
                    "All the pairs [u_j, v_j] are unique.",
                    "There are at most four edges connected to each node.",
                    "The graph may not be connected."
                ],
                "testcases": [
                    {
                        "input": "values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49",
                        "output": "75",
                        "explanation": "One possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49. The nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75."
                    },
                    {
                        "input": "values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30",
                        "output": "25",
                        "explanation": "One possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30. The nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25."
                    },
                    {
                        "input": "values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50",
                        "output": "7",
                        "explanation": "One possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50. The nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "cherry-pickup",
                "title": "Cherry Pickup",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-reach-destination-in-time",
                "title": "Minimum Cost to Reach Destination in Time",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How many nodes can you visit within maxTime seconds?",
            "Can you try every valid path?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ]
    }
}