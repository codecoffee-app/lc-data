{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1383",
            "title": "Maximum Performance of a Team",
            "titleSlug": "maximum-performance-of-a-team",
            "content": "<p>You are given two integers <code>n</code> and <code>k</code> and two integer arrays <code>speed</code> and <code>efficiency</code> both of length <code>n</code>. There are <code>n</code> engineers numbered from <code>1</code> to <code>n</code>. <code>speed[i]</code> and <code>efficiency[i]</code> represent the speed and efficiency of the <code>i<sup>th</sup></code> engineer respectively.</p>\n\n<p>Choose <strong>at most</strong> <code>k</code> different engineers out of the <code>n</code> engineers to form a team with the maximum <strong>performance</strong>.</p>\n\n<p>The performance of a team is the sum of its engineers&#39; speeds multiplied by the minimum efficiency among its engineers.</p>\n\n<p>Return <em>the maximum performance of this team</em>. Since the answer can be a huge number, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\n<strong>Output:</strong> 60\n<strong>Explanation:</strong> \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\n<strong>Output:</strong> 68\n<strong>Explanation:\n</strong>This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\n<strong>Output:</strong> 72\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>speed.length == n</code></li>\n\t<li><code>efficiency.length == n</code></li>\n\t<li><code>1 &lt;= speed[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= efficiency[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3019,
            "dislikes": 83,
            "similarQuestions": "[{\"title\": \"Maximum Fruits Harvested After at Most K Steps\", \"titleSlug\": \"maximum-fruits-harvested-after-at-most-k-steps\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"91.3K\", \"totalSubmission\": \"190.4K\", \"totalAcceptedRaw\": 91313, \"totalSubmissionRaw\": 190429, \"acRate\": \"48.0%\"}",
            "hints": [
                "Keep track of the engineers by their efficiency in decreasing order.",
                "Starting from one engineer, to build a team, it suffices to bring K-1 more engineers who have higher efficiencies as well as high speeds."
            ],
            "rephrased": {
                "body": "Given two integers, `n` and `k`, and two integer arrays, `speed` and `efficiency`, each of length `n`, representing the speed and efficiency of `n` engineers, respectively.  Select at most `k` engineers to form a team. The performance of a team is calculated by multiplying the sum of the selected engineers' speeds by the minimum efficiency among the selected engineers. Find the maximum possible performance of a team, returning the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= k <= n <= 10^5",
                    "speed.length == n",
                    "efficiency.length == n",
                    "1 <= speed[i] <= 10^5",
                    "1 <= efficiency[i] <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2",
                        "output": "60",
                        "explanation": "The maximum performance is achieved by selecting engineer 2 (speed=10, efficiency=4) and engineer 5 (speed=5, efficiency=7). Performance = (10 + 5) * min(4, 7) = 15 * 4 = 60."
                    },
                    {
                        "input": "n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3",
                        "output": "68",
                        "explanation": "The maximum performance is achieved by selecting engineers 1, 2, and 5. Performance = (2 + 10 + 5) * min(5, 4, 7) = 17 * 4 = 68."
                    },
                    {
                        "input": "n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4",
                        "output": "72",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-fruits-harvested-after-at-most-k-steps",
                "title": "Maximum Fruits Harvested After at Most K Steps",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Keep track of the engineers by their efficiency in decreasing order.",
            "Starting from one engineer, to build a team, it suffices to bring K-1 more engineers who have higher efficiencies as well as high speeds."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 857. Minimum Cost to Hire K Workers\n  int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency,\n                     int k) {\n    constexpr int kMod = 1'000'000'007;\n    long ans = 0;\n    long speedSum = 0;\n    // (efficiency[i], speed[i]) sorted by efficiency[i] in descending order.\n    vector<pair<int, int>> A;\n    priority_queue<int, vector<int>, greater<>> minHeap;\n\n    for (int i = 0; i < n; ++i)\n      A.emplace_back(efficiency[i], speed[i]);\n\n    std::ranges::sort(A, greater<>());\n\n    for (const auto& [e, s] : A) {\n      minHeap.push(s);\n      speedSum += s;\n      if (minHeap.size() > k)\n        speedSum -= minHeap.top(), minHeap.pop();\n      ans = max(ans, speedSum * e);\n    }\n\n    return ans % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 857. Minimum Cost to Hire K Workers\n  public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {\n    final int kMod = 1_000_000_007;\n    long ans = 0;\n    long speedSum = 0;\n    // (efficiency[i], speed[i]) sorted by efficiency[i] in descending order.\n    Pair<Integer, Integer>[] A = new Pair[n];\n    Queue<Integer> minHeap = new PriorityQueue<>();\n\n    for (int i = 0; i < n; ++i)\n      A[i] = new Pair<>(efficiency[i], speed[i]);\n\n    Arrays.sort(A, (a, b) -> Integer.compare(b.getKey(), a.getKey()));\n\n    for (Pair<Integer, Integer> a : A) {\n      final int e = a.getKey();\n      final int s = a.getValue();\n      minHeap.offer(s);\n      speedSum += s;\n      if (minHeap.size() > k)\n        speedSum -= minHeap.poll();\n      ans = Math.max(ans, speedSum * e);\n    }\n\n    return (int) (ans % kMod);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 857. Minimum Cost to Hire K Workers\n  def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:\n    kMod = 1_000_000_007\n    ans = 0\n    speedSum = 0\n    # (efficiency[i], speed[i]) sorted by efficiency[i] in descending order.\n    A = sorted([(e, s) for s, e in zip(speed, efficiency)], reverse=True)\n    minHeap = []\n\n    for e, s in A:\n      heapq.heappush(minHeap, s)\n      speedSum += s\n      if len(minHeap) > k:\n        speedSum -= heapq.heappop(minHeap)\n      ans = max(ans, speedSum * e)\n\n    return ans % kMod\n",
                "lang_text": "py"
            }
        }
    }
}