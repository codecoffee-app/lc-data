{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2212",
            "title": "Maximum Points in an Archery Competition",
            "titleSlug": "maximum-points-in-an-archery-competition",
            "content": "<p>Alice and Bob are opponents in an archery competition. The competition has set the following rules:</p>\n\n<ol>\n\t<li>Alice first shoots <code>numArrows</code> arrows and then Bob shoots <code>numArrows</code> arrows.</li>\n\t<li>The points are then calculated as follows:\n\t<ol>\n\t\t<li>The target has integer scoring sections ranging from <code>0</code> to <code>11</code> <strong>inclusive</strong>.</li>\n\t\t<li>For <strong>each</strong> section of the target with score <code>k</code> (in between <code>0</code> to <code>11</code>), say Alice and Bob have shot <code>a<sub>k</sub></code> and <code>b<sub>k</sub></code> arrows on that section respectively. If <code>a<sub>k</sub> &gt;= b<sub>k</sub></code>, then Alice takes <code>k</code> points. If <code>a<sub>k</sub> &lt; b<sub>k</sub></code>, then Bob takes <code>k</code> points.</li>\n\t\t<li>However, if <code>a<sub>k</sub> == b<sub>k</sub> == 0</code>, then <strong>nobody</strong> takes <code>k</code> points.</li>\n\t</ol>\n\t</li>\n</ol>\n\n<ul>\n\t<li>\n\t<p>For example, if Alice and Bob both shot <code>2</code> arrows on the section with score <code>11</code>, then Alice takes <code>11</code> points. On the other hand, if Alice shot <code>0</code> arrows on the section with score <code>11</code> and Bob shot <code>2</code> arrows on that same section, then Bob takes <code>11</code> points.</p>\n\t</li>\n</ul>\n\n<p>You are given the integer <code>numArrows</code> and an integer array <code>aliceArrows</code> of size <code>12</code>, which represents the number of arrows Alice shot on each scoring section from <code>0</code> to <code>11</code>. Now, Bob wants to <strong>maximize</strong> the total number of points he can obtain.</p>\n\n<p>Return <em>the array </em><code>bobArrows</code><em> which represents the number of arrows Bob shot on <strong>each</strong> scoring section from </em><code>0</code><em> to </em><code>11</code>. The sum of the values in <code>bobArrows</code> should equal <code>numArrows</code>.</p>\n\n<p>If there are multiple ways for Bob to earn the maximum total points, return <strong>any</strong> one of them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/02/24/ex1.jpg\" style=\"width: 600px; height: 120px;\" />\n<pre>\n<strong>Input:</strong> numArrows = 9, aliceArrows = [1,1,0,1,0,0,2,1,0,1,2,0]\n<strong>Output:</strong> [0,0,0,0,1,1,0,0,1,2,3,1]\n<strong>Explanation:</strong> The table above shows how the competition is scored. \nBob earns a total point of 4 + 5 + 8 + 9 + 10 + 11 = 47.\nIt can be shown that Bob cannot obtain a score higher than 47 points.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/02/24/ex2new.jpg\" style=\"width: 600px; height: 117px;\" />\n<pre>\n<strong>Input:</strong> numArrows = 3, aliceArrows = [0,0,1,0,0,0,0,0,0,0,0,2]\n<strong>Output:</strong> [0,0,0,0,0,0,0,0,1,1,1,0]\n<strong>Explanation:</strong> The table above shows how the competition is scored.\nBob earns a total point of 8 + 9 + 10 = 27.\nIt can be shown that Bob cannot obtain a score higher than 27 points.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numArrows &lt;= 10<sup>5</sup></code></li>\n\t<li><code>aliceArrows.length == bobArrows.length == 12</code></li>\n\t<li><code>0 &lt;= aliceArrows[i], bobArrows[i] &lt;= numArrows</code></li>\n\t<li><code>sum(aliceArrows[i]) == numArrows</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 478,
            "dislikes": 46,
            "similarQuestions": "[{\"title\": \"Maximum Product of the Length of Two Palindromic Subsequences\", \"titleSlug\": \"maximum-product-of-the-length-of-two-palindromic-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.3K\", \"totalSubmission\": \"28.9K\", \"totalAcceptedRaw\": 14305, \"totalSubmissionRaw\": 28907, \"acRate\": \"49.5%\"}",
            "hints": [
                "To obtain points for some certain section x, what is the minimum number of arrows Bob must shoot?",
                "Given the small number of sections, can we brute force which sections Bob wants to win?",
                "For every set of sections Bob wants to win, check if we have the required amount of arrows. If we do, it is a valid selection."
            ],
            "rephrased": {
                "body": "Alice and Bob are competing in an archery contest. Each shoots `numArrows` arrows. The target has scoring sections from 0 to 11. For each section `k`, Alice shoots `a_k` arrows and Bob shoots `b_k` arrows.\n\n*   If `a_k >= b_k`, Alice gets `k` points.\n*   If `a_k < b_k`, Bob gets `k` points.\n*   If `a_k == b_k == 0`, no one gets points.\n\nGiven `numArrows` and `aliceArrows`, an array of size 12 representing Alice's arrows on each section, find `bobArrows` that maximizes Bob's total score. The sum of `bobArrows` must equal `numArrows`. Return any valid `bobArrows` if multiple solutions exist.",
                "constraints": [
                    "1 <= numArrows <= 10^5",
                    "aliceArrows.length == bobArrows.length == 12",
                    "0 <= aliceArrows[i], bobArrows[i] <= numArrows",
                    "sum(aliceArrows[i]) == numArrows"
                ],
                "testcases": [
                    {
                        "input": "numArrows = 9, aliceArrows = [1,1,0,1,0,0,2,1,0,1,2,0]",
                        "output": "[0,0,0,0,1,1,0,0,1,2,3,1]",
                        "explanation": "Bob shoots his arrows to maximize his score. In this case, the optimal strategy results in Bob earning 47 points by scoring on sections 4, 5, 8, 9, 10, and 11."
                    },
                    {
                        "input": "numArrows = 3, aliceArrows = [0,0,1,0,0,0,0,0,0,0,0,2]",
                        "output": "[0,0,0,0,0,0,0,0,1,1,1,0]",
                        "explanation": "Bob utilizes his 3 arrows to secure points on sections 8, 9 and 10, resulting in a total score of 27. This is the highest possible score Bob can achieve with the given number of arrows and Alice's distribution."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
                "title": "Maximum Product of the Length of Two Palindromic Subsequences",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "To obtain points for some certain section x, what is the minimum number of arrows Bob must shoot?",
            "Given the small number of sections, can we brute force which sections Bob wants to win?",
            "For every set of sections Bob wants to win, check if we have the required amount of arrows. If we do, it is a valid selection."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> maximumBobPoints(int numArrows, vector<int>& aliceArrows) {\n    constexpr int allMask = (1 << 12) - 1;\n    int maxPoint = 0;\n    int maxMask = 0;\n\n    for (int mask = 0; mask < allMask; ++mask) {\n      const auto& [shotable, point] =\n          getShotableAndPoint(mask, numArrows, aliceArrows);\n      if (shotable && point > maxPoint) {\n        maxPoint = point;\n        maxMask = mask;\n      }\n    }\n\n    return getBobsArrows(maxMask, numArrows, aliceArrows);\n  }\n\n private:\n  pair<bool, int> getShotableAndPoint(int mask, int leftArrows,\n                                      const vector<int>& aliceArrows) {\n    int point = 0;\n    for (int i = 0; i < 12; ++i)\n      if (mask >> i & 1) {\n        leftArrows -= aliceArrows[i] + 1;\n        point += i;\n      }\n    return {leftArrows >= 0, point};\n  }\n\n  vector<int> getBobsArrows(int mask, int leftArrows,\n                            const vector<int>& aliceArrows) {\n    vector<int> bobsArrows(12);\n    for (int i = 0; i < 12; ++i)\n      if (mask >> i & 1) {\n        bobsArrows[i] = aliceArrows[i] + 1;\n        leftArrows -= aliceArrows[i] + 1;\n      }\n    bobsArrows[0] = leftArrows;\n    return bobsArrows;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] maximumBobPoints(int numArrows, int[] aliceArrows) {\n    final int allMask = (1 << 12) - 1;\n    int maxPoint = 0;\n    int maxMask = 0;\n\n    for (int mask = 0; mask < allMask; ++mask) {\n      Pair<Boolean, Integer> pair = getShotableAndPoint(mask, numArrows, aliceArrows);\n      final boolean shotable = pair.getKey();\n      final int point = pair.getValue();\n      if (shotable && point > maxPoint) {\n        maxPoint = point;\n        maxMask = mask;\n      }\n    }\n\n    return getBobsArrows(maxMask, numArrows, aliceArrows);\n  }\n\n  private Pair<Boolean, Integer> getShotableAndPoint(int mask, int leftArrows, int[] aliceArrows) {\n    int point = 0;\n    for (int i = 0; i < 12; ++i)\n      if ((mask >> i & 1) == 1) {\n        leftArrows -= aliceArrows[i] + 1;\n        point += i;\n      }\n    return new Pair<>(leftArrows >= 0, point);\n  }\n\n  int[] getBobsArrows(int mask, int leftArrows, int[] aliceArrows) {\n    int[] bobsArrows = new int[12];\n    for (int i = 0; i < 12; ++i)\n      if ((mask >> i & 1) == 1) {\n        bobsArrows[i] = aliceArrows[i] + 1;\n        leftArrows -= aliceArrows[i] + 1;\n      }\n    bobsArrows[0] = leftArrows;\n    return bobsArrows;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumBobPoints(self, numArrows: int, aliceArrows: List[int]) -> List[int]:\n    allMask = (1 << 12) - 1\n    maxPoint = 0\n    maxMask = 0\n\n    def getShotableAndPoint(mask: int, leftArrows: int) -> Tuple[bool, int]:\n      point = 0\n      for i in range(12):\n        if mask >> i & 1:\n          leftArrows -= aliceArrows[i] + 1\n          point += i\n      return leftArrows >= 0, point\n\n    for mask in range(allMask):\n      shotable, point = getShotableAndPoint(mask, numArrows)\n      if shotable and point > maxPoint:\n        maxPoint = point\n        maxMask = mask\n\n    def getBobsArrows(mask: int, leftArrows: int) -> List[int]:\n      bobsArrows = [0] * 12\n      for i in range(12):\n        if mask >> i & 1:\n          bobsArrows[i] = aliceArrows[i] + 1\n          leftArrows -= aliceArrows[i] + 1\n      bobsArrows[0] = leftArrows\n      return bobsArrows\n\n    return getBobsArrows(maxMask, numArrows)\n",
                "lang_text": "py"
            }
        }
    }
}