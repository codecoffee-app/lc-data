{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3115",
            "title": "Maximum Prime Difference",
            "titleSlug": "maximum-prime-difference",
            "content": "<p>You are given an integer array <code>nums</code>.</p>\n\n<p>Return an integer that is the <strong>maximum</strong> distance between the <strong>indices</strong> of two (not necessarily different) prime numbers in <code>nums</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,2,9,5,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong> <code>nums[1]</code>, <code>nums[3]</code>, and <code>nums[4]</code> are prime. So the answer is <code>|4 - 1| = 3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,8,2,8]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong> <code>nums[2]</code> is prime. Because there is just one prime number, the answer is <code>|2 - 2| = 0</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n\t<li>The input is generated such that the number of prime numbers in the <code>nums</code> is at least one.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 94,
            "dislikes": 12,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"35.7K\", \"totalSubmission\": \"60.8K\", \"totalAcceptedRaw\": 35741, \"totalSubmissionRaw\": 60831, \"acRate\": \"58.8%\"}",
            "hints": [
                "Find all prime numbers in the <code>nums</code>.",
                "Find the first and the last prime number in the <code>nums</code>."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, return the maximum distance between the indices of two prime numbers within the array. The distance is calculated as the absolute difference between the indices.",
                "constraints": [
                    "1 <= nums.length <= 3 * 10^5",
                    "1 <= nums[i] <= 100",
                    "The input is generated such that the number of prime numbers in the nums is at least one."
                ],
                "testcases": [
                    {
                        "input": "[4,2,9,5,3]",
                        "output": "3",
                        "explanation": "The prime numbers in the array are 2 (at index 1), 5 (at index 3), and 3 (at index 4). The maximum distance between any two of these indices is |4 - 1| = 3."
                    },
                    {
                        "input": "[4,8,2,8]",
                        "output": "0",
                        "explanation": "The only prime number in the array is 2 (at index 2).  Since there's only one prime, the maximum distance is the distance from the prime index to itself, |2 - 2| = 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Find all prime numbers in the <code>nums</code>.",
            "Find the first and the last prime number in the <code>nums</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumPrimeDifference(vector<int>& nums) {\n    constexpr int kMax = 100;\n    const vector<bool> isPrime = sieveEratosthenes(kMax + 1);\n    int minPrimeIndex = -1;\n    int maxPrimeIndex = -1;\n\n    for (int i = 0; i < nums.size(); ++i)\n      if (isPrime[nums[i]]) {\n        if (minPrimeIndex == -1)\n          minPrimeIndex = i;\n        maxPrimeIndex = i;\n      }\n\n    return maxPrimeIndex - minPrimeIndex;\n  }\n\n private:\n  vector<bool> sieveEratosthenes(int n) {\n    vector<bool> isPrime(n, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    return isPrime;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumPrimeDifference(int[] nums) {\n    final int kMax = 100;\n    boolean[] isPrime = sieveEratosthenes(kMax + 1);\n    int minPrimeIndex = -1;\n    int maxPrimeIndex = -1;\n\n    for (int i = 0; i < nums.length; ++i)\n      if (isPrime[nums[i]]) {\n        if (minPrimeIndex == -1)\n          minPrimeIndex = i;\n        maxPrimeIndex = i;\n      }\n\n    return maxPrimeIndex - minPrimeIndex;\n  }\n\n  private boolean[] sieveEratosthenes(int n) {\n    boolean[] isPrime = new boolean[n];\n    Arrays.fill(isPrime, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    return isPrime;\n  }\n};\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumPrimeDifference(self, nums: List[int]) -> int:\n    kMax = 100\n    isPrime = self._sieveEratosthenes(kMax + 1)\n    minPrimeIndex = -1\n    maxPrimeIndex = -1\n\n    for i, num in enumerate(nums):\n      if isPrime[num]:\n        if minPrimeIndex == -1:\n          minPrimeIndex = i\n        maxPrimeIndex = i\n\n    return maxPrimeIndex - minPrimeIndex\n\n  def _sieveEratosthenes(self, n: int) -> List[bool]:\n    isPrime = [True] * n\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n      if isPrime[i]:\n        for j in range(i * i, n, i):\n          isPrime[j] = False\n    return isPrime\n",
                "lang_text": "py"
            }
        }
    }
}