{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2233",
            "title": "Maximum Product After K Increments",
            "titleSlug": "maximum-product-after-k-increments",
            "content": "<p>You are given an array of non-negative integers <code>nums</code> and an integer <code>k</code>. In one operation, you may choose <strong>any</strong> element from <code>nums</code> and <strong>increment</strong> it by <code>1</code>.</p>\n\n<p>Return<em> the <strong>maximum</strong> <strong>product</strong> of </em><code>nums</code><em> after <strong>at most</strong> </em><code>k</code><em> operations. </em>Since the answer may be very large, return it <b>modulo</b> <code>10<sup>9</sup> + 7</code>. Note that you should maximize the product before taking the modulo.&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,4], k = 5\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> Increment the first number 5 times.\nNow nums = [5, 4], with a product of 5 * 4 = 20.\nIt can be shown that 20 is maximum product possible, so we return 20.\nNote that there may be other ways to increment nums to have the maximum product.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,3,3,2], k = 2\n<strong>Output:</strong> 216\n<strong>Explanation:</strong> Increment the second number 1 time and increment the fourth number 1 time.\nNow nums = [6, 4, 3, 3], with a product of 6 * 4 * 3 * 3 = 216.\nIt can be shown that 216 is maximum product possible, so we return 216.\nNote that there may be other ways to increment nums to have the maximum product.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length, k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 659,
            "dislikes": 43,
            "similarQuestions": "[{\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Increment to Make Array Unique\", \"titleSlug\": \"minimum-increment-to-make-array-unique\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make the Array Increasing\", \"titleSlug\": \"minimum-operations-to-make-the-array-increasing\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.3K\", \"totalSubmission\": \"66.2K\", \"totalAcceptedRaw\": 27341, \"totalSubmissionRaw\": 66205, \"acRate\": \"41.3%\"}",
            "hints": [
                "If you can increment only once, which number should you increment?",
                "We should always prioritize the smallest number. What kind of data structure could we use?",
                "Use a min heap to hold all the numbers. Each time we do an operation, replace the top of the heap x by x + 1."
            ],
            "rephrased": {
                "body": "Given an array of non-negative integers `nums` and an integer `k`, you are allowed to perform at most `k` operations. In each operation, you can choose any element from `nums` and increment it by 1.  Your task is to maximize the product of the elements in `nums` after performing at most `k` operations. Return the maximum possible product modulo `10^9 + 7`.",
                "constraints": [
                    "1 <= nums.length, k <= 10^5",
                    "0 <= nums[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": {
                            "nums": [
                                0,
                                4
                            ],
                            "k": 5
                        },
                        "output": 20,
                        "explanation": "By incrementing the first number five times, `nums` becomes [5, 4]. The product is 5 * 4 = 20, which is the maximum possible product."
                    },
                    {
                        "input": {
                            "nums": [
                                6,
                                3,
                                3,
                                2
                            ],
                            "k": 2
                        },
                        "output": 216,
                        "explanation": "Incrementing the second number once and the fourth number once results in `nums` being [6, 4, 3, 3]. The product is 6 * 4 * 3 * 3 = 216, which is the maximum possible product."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-size-subarray-sum",
                "title": "Minimum Size Subarray Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-increment-to-make-array-unique",
                "title": "Minimum Increment to Make Array Unique",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "minimum-operations-to-make-the-array-increasing",
                "title": "Minimum Operations to Make the Array Increasing",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If you can increment only once, which number should you increment?",
            "We should always prioritize the smallest number. What kind of data structure could we use?",
            "Use a min heap to hold all the numbers. Each time we do an operation, replace the top of the heap x by x + 1."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumProduct(vector<int>& nums, int k) {\n    constexpr int kMod = 1'000'000'007;\n    long ans = 1;\n    priority_queue<int, vector<int>, greater<>> minHeap;\n\n    for (const int num : nums)\n      minHeap.push(num);\n\n    for (int i = 0; i < k; ++i) {\n      const int minNum = minHeap.top();\n      minHeap.pop();\n      minHeap.push(minNum + 1);\n    }\n\n    while (!minHeap.empty()) {\n      ans *= minHeap.top(), minHeap.pop();\n      ans %= kMod;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumProduct(int[] nums, int k) {\n    final int kMod = 1_000_000_007;\n    long ans = 1;\n    Queue<Integer> minHeap = new PriorityQueue<>();\n\n    for (final int num : nums)\n      minHeap.offer(num);\n\n    for (int i = 0; i < k; ++i) {\n      final int minNum = minHeap.poll();\n      minHeap.offer(minNum + 1);\n    }\n\n    while (!minHeap.isEmpty()) {\n      ans *= minHeap.poll();\n      ans %= kMod;\n    }\n\n    return (int) ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumProduct(self, nums: List[int], k: int) -> int:\n    kMod = 1_000_000_007\n    ans = 1\n    minHeap = nums.copy()\n    heapq.heapify(minHeap)\n\n    for _ in range(k):\n      minNum = heapq.heappop(minHeap)\n      heapq.heappush(minHeap, minNum + 1)\n\n    while minHeap:\n      ans *= heapq.heappop(minHeap)\n      ans %= kMod\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}