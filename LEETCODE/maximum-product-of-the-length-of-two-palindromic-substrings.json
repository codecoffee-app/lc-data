{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1960",
            "title": "Maximum Product of the Length of Two Palindromic Substrings",
            "titleSlug": "maximum-product-of-the-length-of-two-palindromic-substrings",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code> and are tasked with finding two <strong>non-intersecting palindromic </strong>substrings of <strong>odd</strong> length such that the product of their lengths is maximized.</p>\n\n<p>More formally, you want to choose four integers <code>i</code>, <code>j</code>, <code>k</code>, <code>l</code> such that <code>0 &lt;= i &lt;= j &lt; k &lt;= l &lt; s.length</code> and both the substrings <code>s[i...j]</code> and <code>s[k...l]</code> are palindromes and have odd lengths. <code>s[i...j]</code> denotes a substring from index <code>i</code> to index <code>j</code> <strong>inclusive</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible product of the lengths of the two non-intersecting palindromic substrings.</em></p>\n\n<p>A <strong>palindrome</strong> is a string that is the same forward and backward. A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababbb&quot;\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Substrings &quot;aba&quot; and &quot;bbb&quot; are palindromes with odd length. product = 3 * 3 = 9.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;zaaaxbbby&quot;\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Substrings &quot;aaa&quot; and &quot;bbb&quot; are palindromes with odd length. product = 3 * 3 = 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 235,
            "dislikes": 40,
            "similarQuestions": "[{\"title\": \"Maximum Product of the Length of Two Palindromic Subsequences\", \"titleSlug\": \"maximum-product-of-the-length-of-two-palindromic-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Make Array Equal\", \"titleSlug\": \"minimum-cost-to-make-array-equal\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.2K\", \"totalSubmission\": \"10.7K\", \"totalAcceptedRaw\": 3223, \"totalSubmissionRaw\": 10690, \"acRate\": \"30.1%\"}",
            "hints": [
                "You can use Manacher's algorithm to get the maximum palindromic substring centered at each index",
                "After using Manacher's for each center use a line sweep from the center to the left and from the center to the right to find for each index the farthest center to it with distance \u2264 palin[center]",
                "After that, find the maximum palindrome size for each prefix in the string and for each suffix and the answer would be max(prefix[i] * suffix[i + 1])"
            ],
            "rephrased": {
                "body": "Given a 0-indexed string `s`, find two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.  You need to select four integers `i`, `j`, `k`, `l` satisfying `0 <= i <= j < k <= l < s.length` where `s[i...j]` and `s[k...l]` are palindromes with odd lengths. Return the maximum possible product of the lengths of these two palindromic substrings.",
                "constraints": [
                    "2 <= s.length <= 10^5",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "ababbb",
                        "output": "9",
                        "explanation": "The substrings \"aba\" and \"bbb\" are palindromes with odd length. Their product is 3 * 3 = 9."
                    },
                    {
                        "input": "zaaaxbbby",
                        "output": "9",
                        "explanation": "The substrings \"aaa\" and \"bbb\" are palindromes with odd length. Their product is 3 * 3 = 9."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
                "title": "Maximum Product of the Length of Two Palindromic Subsequences",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-make-array-equal",
                "title": "Minimum Cost to Make Array Equal",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "You can use Manacher's algorithm to get the maximum palindromic substring centered at each index",
            "After using Manacher's for each center use a line sweep from the center to the left and from the center to the right to find for each index the farthest center to it with distance \u2264 palin[center]",
            "After that, find the maximum palindrome size for each prefix in the string and for each suffix and the answer would be max(prefix[i] * suffix[i + 1])"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maxProduct(string s) {\n    const int n = s.length();\n    long long ans = 1;\n    // l[i] := max length of palindromes in s[0..i)\n    vector<int> l = manacher(s, n);\n    // r[i] := max length of palindromes in s[i..n)\n    vector<int> r = manacher(string(s.rbegin(), s.rend()), n);\n    reverse(r.begin(), r.end());\n\n    for (int i = 0; i + 1 < n; ++i)\n      ans = max(ans, (long long)l[i] * r[i + 1]);\n\n    return ans;\n  }\n\n private:\n  vector<int> manacher(const string& s, int n) {\n    vector<int> maxExtends(n);\n    vector<int> l2r(n, 1);\n    int center = 0;\n\n    for (int i = 0; i < n; ++i) {\n      const int r = center + maxExtends[center] - 1;\n      const int mirrorIndex = center - (i - center);\n      int extend = i > r ? 1 : min(maxExtends[mirrorIndex], r - i + 1);\n      while (i - extend >= 0 && i + extend < n &&\n             s[i - extend] == s[i + extend]) {\n        l2r[i + extend] = 2 * extend + 1;\n        ++extend;\n      }\n      maxExtends[i] = extend;\n      if (i + maxExtends[i] >= r)\n        center = i;\n    }\n\n    for (int i = 1; i < n; ++i)\n      l2r[i] = max(l2r[i], l2r[i - 1]);\n\n    return l2r;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maxProduct(String s) {\n    final int n = s.length();\n    long ans = 1;\n    // l[i] := max length of palindromes in s[0..i)\n    int[] l = manacher(s, n);\n    // r[i] := max length of palindromes in s[i..n)\n    int[] r = manacher(new StringBuilder(s).reverse().toString(), n);\n\n    reverse(r, 0, n - 1);\n\n    for (int i = 0; i + 1 < n; ++i)\n      ans = Math.max(ans, (long) l[i] * r[i + 1]);\n\n    return ans;\n  }\n\n  private int[] manacher(final String s, int n) {\n    int[] maxExtends = new int[n];\n    int[] l2r = new int[n];\n    Arrays.fill(l2r, 1);\n    int center = 0;\n\n    for (int i = 0; i < n; ++i) {\n      final int r = center + maxExtends[center] - 1;\n      final int mirrorIndex = center - (i - center);\n      int extend = i > r ? 1 : Math.min(maxExtends[mirrorIndex], r - i + 1);\n      while (i - extend >= 0 && i + extend < n && s.charAt(i - extend) == s.charAt(i + extend)) {\n        l2r[i + extend] = 2 * extend + 1;\n        ++extend;\n      }\n      maxExtends[i] = extend;\n      if (i + maxExtends[i] >= r)\n        center = i;\n    }\n\n    for (int i = 1; i < n; ++i)\n      l2r[i] = Math.max(l2r[i], l2r[i - 1]);\n\n    return l2r;\n  }\n\n  private void reverse(int[] A, int l, int r) {\n    while (l < r)\n      swap(A, l++, r--);\n  }\n\n  private void swap(int[] A, int i, int j) {\n    final int temp = A[i];\n    A[i] = A[j];\n    A[j] = temp;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxProduct(self, s: str) -> int:\n    n = len(s)\n\n    def manacher(s: str) -> List[int]:\n      maxExtends = [0] * n\n      l2r = [1] * n\n      center = 0\n\n      for i in range(n):\n        r = center + maxExtends[center] - 1\n        mirrorIndex = center - (i - center)\n        extend = 1 if i > r else min(maxExtends[mirrorIndex], r - i + 1)\n        while i - extend >= 0 and i + extend < n and s[i - extend] == s[i + extend]:\n          l2r[i + extend] = 2 * extend + 1\n          extend += 1\n        maxExtends[i] = extend\n        if i + maxExtends[i] >= r:\n          center = i\n\n      for i in range(1, n):\n        l2r[i] = max(l2r[i], l2r[i - 1])\n\n      return l2r\n\n    # l[i] := max length of palindromes in s[0..i)\n    l = manacher(s)\n    # r[i] := max length of palindromes in s[i..n)\n    r = manacher(s[::-1])[::-1]\n    return max(l[i] * r[i + 1] for i in range(n - 1))\n",
                "lang_text": "py"
            }
        }
    }
}