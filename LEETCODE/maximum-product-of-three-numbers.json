{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "628",
            "title": "Maximum Product of Three Numbers",
            "titleSlug": "maximum-product-of-three-numbers",
            "content": "<p>Given an integer array <code>nums</code>, <em>find three numbers whose product is maximum and return the maximum product</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 6\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 24\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,-2,-3]\n<strong>Output:</strong> -6\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;=&nbsp;10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4068,
            "dislikes": 654,
            "similarQuestions": "[{\"title\": \"Maximum Product Subarray\", \"titleSlug\": \"maximum-product-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"296.8K\", \"totalSubmission\": \"656.3K\", \"totalAcceptedRaw\": 296792, \"totalSubmissionRaw\": 656258, \"acRate\": \"45.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, find three numbers within the array whose product results in the maximum possible value. Return this maximum product.",
                "constraints": [
                    "The length of the input array `nums` is between 3 and 10,000 (inclusive): 3 <= nums.length <= 10^4.",
                    "Each element `nums[i]` in the array falls within the range of -1000 to 1000 (inclusive): -1000 <= nums[i] <= 1000."
                ],
                "testcases": [
                    {
                        "input": "[1,2,3]",
                        "output": "6",
                        "explanation": null
                    },
                    {
                        "input": "[1,2,3,4]",
                        "output": "24",
                        "explanation": null
                    },
                    {
                        "input": "[-1,-2,-3]",
                        "output": "-6",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-product-subarray",
                "title": "Maximum Product Subarray",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumProduct(vector<int>& nums) {\n    const int n = nums.size();\n    std::ranges::sort(nums);\n    return max(nums[n - 1] * nums[0] * nums[1],\n               nums[n - 1] * nums[n - 2] * nums[n - 3]);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumProduct(int[] nums) {\n    final int n = nums.length;\n    Arrays.sort(nums);\n    return Math.max(nums[n - 1] * nums[0] * nums[1], nums[n - 1] * nums[n - 2] * nums[n - 3]);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumProduct(self, nums: List[int]) -> int:\n    nums.sort()\n    return max(nums[-1] * nums[0] * nums[1],\n               nums[-1] * nums[-2] * nums[-3])\n",
                "lang_text": "py"
            }
        }
    }
}