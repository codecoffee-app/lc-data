{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1235",
            "title": "Maximum Profit in Job Scheduling",
            "titleSlug": "maximum-profit-in-job-scheduling",
            "content": "<p>We have <code>n</code> jobs, where every job is scheduled to be done from <code>startTime[i]</code> to <code>endTime[i]</code>, obtaining a profit of <code>profit[i]</code>.</p>\n\n<p>You&#39;re given the <code>startTime</code>, <code>endTime</code> and <code>profit</code> arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.</p>\n\n<p>If you choose a job that ends at time <code>X</code> you will be able to start another job that starts at time <code>X</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/10/sample1_1584.png\" style=\"width: 380px; height: 154px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\n<strong>Output:</strong> 120\n<strong>Explanation:</strong> The subset chosen is the first and fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/10/sample22_1584.png\" style=\"width: 600px; height: 112px;\" /> </strong></p>\n\n<pre>\n<strong>Input:</strong> startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\n<strong>Output:</strong> 150\n<strong>Explanation:</strong> The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/10/sample3_1584.png\" style=\"width: 400px; height: 112px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\n<strong>Output:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= startTime.length == endTime.length == profit.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= startTime[i] &lt; endTime[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= profit[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5565,
            "dislikes": 69,
            "similarQuestions": "[{\"title\": \"Maximum Earnings From Taxi\", \"titleSlug\": \"maximum-earnings-from-taxi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Best Non-Overlapping Events\", \"titleSlug\": \"two-best-non-overlapping-events\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"208.4K\", \"totalSubmission\": \"391.5K\", \"totalAcceptedRaw\": 208435, \"totalSubmissionRaw\": 391531, \"acRate\": \"53.2%\"}",
            "hints": [
                "Think on DP.",
                "Sort the elements by starting time, then define the dp[i] as the maximum profit taking elements from the suffix starting at i.",
                "Use binarySearch (lower_bound/upper_bound on C++) to get the next index for the DP transition."
            ],
            "rephrased": {
                "body": "Given `n` jobs, each with a `startTime`, `endTime`, and `profit`, determine the maximum profit achievable by selecting a subset of non-overlapping jobs. A job can start at the same time another job ends.",
                "constraints": [
                    "1 <= startTime.length == endTime.length == profit.length <= 5 * 10^4",
                    "1 <= startTime[i] < endTime[i] <= 10^9",
                    "1 <= profit[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]",
                        "output": "120",
                        "explanation": "Selecting jobs with time ranges [1-3] and [3-6] yields a profit of 50 + 70 = 120."
                    },
                    {
                        "input": "startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]",
                        "output": "150",
                        "explanation": "Selecting jobs with time ranges [1-3], [4-6], and [6-9] yields a profit of 20 + 70 + 60 = 150."
                    },
                    {
                        "input": "startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]",
                        "output": "6",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-earnings-from-taxi",
                "title": "Maximum Earnings From Taxi",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "two-best-non-overlapping-events",
                "title": "Two Best Non-Overlapping Events",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think on DP.",
            "Sort the elements by starting time, then define the dp[i] as the maximum profit taking elements from the suffix starting at i.",
            "Use binarySearch (lower_bound/upper_bound on C++) to get the next index for the DP transition."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Job {\n  int startTime;\n  int endTime;\n  int profit;\n  Job(int startTime, int endTime, int profit)\n      : startTime(startTime), endTime(endTime), profit(profit) {}\n};\n\nclass Solution {\n public:\n  int jobScheduling(vector<int>& startTime, vector<int>& endTime,\n                    vector<int>& profit) {\n    const int n = startTime.size();\n    // dp[i] := max profit to schedule jobs[i:]\n    dp.resize(n + 1);\n    vector<Job> jobs;\n\n    for (int i = 0; i < n; ++i)\n      jobs.emplace_back(startTime[i], endTime[i], profit[i]);\n\n    sort(jobs.begin(), jobs.end(), [](const auto& a, const auto& b) {\n      return a.startTime < b.startTime;\n    });\n\n    // Will use binary search to find the first available startTime\n    for (int i = 0; i < n; ++i)\n      startTime[i] = jobs[i].startTime;\n\n    return jobScheduling(jobs, startTime, 0);\n  }\n\n private:\n  vector<int> dp;\n\n  int jobScheduling(const vector<Job>& jobs, const vector<int>& startTime,\n                    int i) {\n    if (i == jobs.size())\n      return 0;\n    if (dp[i] > 0)\n      return dp[i];\n\n    const int j = firstGreaterEqual(startTime, i + 1, jobs[i].endTime);\n    const int pick = jobs[i].profit + jobScheduling(jobs, startTime, j);\n    const int skip = jobScheduling(jobs, startTime, i + 1);\n    return dp[i] = max(pick, skip);\n  }\n\n  int firstGreaterEqual(const vector<int>& A, int startFrom, int target) {\n    return lower_bound(A.begin() + startFrom, A.end(), target) - A.begin();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Job {\n  public int startTime;\n  public int endTime;\n  public int profit;\n  public Job(int startTime, int endTime, int profit) {\n    this.startTime = startTime;\n    this.endTime = endTime;\n    this.profit = profit;\n  }\n}\n\nclass Solution {\n  public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {\n    final int n = startTime.length;\n    // dp[i] := max profit to schedule jobs[i:]\n    dp = new int[n + 1];\n    Job[] jobs = new Job[n];\n\n    for (int i = 0; i < n; ++i)\n      jobs[i] = new Job(startTime[i], endTime[i], profit[i]);\n\n    Arrays.sort(jobs, (a, b) -> a.startTime - b.startTime);\n\n    // Will use binary search to find the first available startTime\n    for (int i = 0; i < n; ++i)\n      startTime[i] = jobs[i].startTime;\n\n    return jobScheduling(jobs, startTime, 0);\n  }\n\n  private int[] dp;\n\n  private int jobScheduling(Job[] jobs, int[] startTime, int i) {\n    if (i == jobs.length)\n      return 0;\n    if (dp[i] > 0)\n      return dp[i];\n\n    final int j = firstGreaterEqual(startTime, i + 1, jobs[i].endTime);\n    final int pick = jobs[i].profit + jobScheduling(jobs, startTime, j);\n    final int skip = jobScheduling(jobs, startTime, i + 1);\n    return dp[i] = Math.max(pick, skip);\n  }\n\n  private int firstGreaterEqual(int[] A, int startFrom, int target) {\n    int l = startFrom;\n    int r = A.length;\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A[m] >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:\n    jobs = sorted([(s, e, p) for s, e, p in zip(startTime, endTime, profit)])\n\n    # Will use binary search to find the first available startTime\n    for i in range(len(startTime)):\n      startTime[i] = jobs[i][0]\n\n    # dp(i) := max profit to schedule jobs[i:]\n    @functools.lru_cache(None)\n    def dp(i: int) -> int:\n      if i == len(startTime):\n        return 0\n\n      j = bisect_left(startTime, jobs[i][1])\n      return max(jobs[i][2] + dp(j), dp(i + 1))\n\n    return dp(0)\n",
                "lang_text": "py"
            }
        }
    }
}