{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1668",
            "title": "Maximum Repeating Substring",
            "titleSlug": "maximum-repeating-substring",
            "content": "<p>For a string <code>sequence</code>, a string <code>word</code> is <strong><code>k</code>-repeating</strong> if <code>word</code> concatenated <code>k</code> times is a substring of <code>sequence</code>. The <code>word</code>&#39;s <strong>maximum <code>k</code>-repeating value</strong> is the highest value <code>k</code> where <code>word</code> is <code>k</code>-repeating in <code>sequence</code>. If <code>word</code> is not a substring of <code>sequence</code>, <code>word</code>&#39;s maximum <code>k</code>-repeating value is <code>0</code>.</p>\n\n<p>Given strings <code>sequence</code> and <code>word</code>, return <em>the <strong>maximum <code>k</code>-repeating value</strong> of <code>word</code> in <code>sequence</code></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sequence = &quot;ababc&quot;, word = &quot;ab&quot;\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>&quot;abab&quot; is a substring in &quot;<u>abab</u>c&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sequence = &quot;ababc&quot;, word = &quot;ba&quot;\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>&quot;ba&quot; is a substring in &quot;a<u>ba</u>bc&quot;. &quot;baba&quot; is not a substring in &quot;ababc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> sequence = &quot;ababc&quot;, word = &quot;ac&quot;\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>&quot;ac&quot; is not a substring in &quot;ababc&quot;. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sequence.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>sequence</code> and <code>word</code>&nbsp;contains only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 642,
            "dislikes": 239,
            "similarQuestions": "[{\"title\": \"Detect Pattern of Length M Repeated K or More Times\", \"titleSlug\": \"detect-pattern-of-length-m-repeated-k-or-more-times\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                }
            ],
            "stats": "{\"totalAccepted\": \"42.3K\", \"totalSubmission\": \"109.3K\", \"totalAcceptedRaw\": 42261, \"totalSubmissionRaw\": 109333, \"acRate\": \"38.7%\"}",
            "hints": [
                "The constraints are low enough for a brute force approach.",
                "Try every k value from 0 upwards until word is no longer k-repeating."
            ],
            "rephrased": {
                "body": "Given a string `sequence` and a string `word`, determine the maximum `k` such that `word` concatenated `k` times is a substring of `sequence`.  Return the maximum `k`-repeating value. If `word` is not a substring of `sequence`, the maximum `k`-repeating value is `0`.",
                "constraints": [
                    "1 <= sequence.length <= 100",
                    "1 <= word.length <= 100",
                    "sequence and word contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "sequence = \"ababc\", word = \"ab\"",
                        "output": "2",
                        "explanation": "The string \"abab\" (word repeated twice) is a substring of \"ababc\"."
                    },
                    {
                        "input": "sequence = \"ababc\", word = \"ba\"",
                        "output": "1",
                        "explanation": "The string \"ba\" (word repeated once) is a substring of \"ababc\", but \"baba\" (word repeated twice) is not."
                    },
                    {
                        "input": "sequence = \"ababc\", word = \"ac\"",
                        "output": "0",
                        "explanation": "The string \"ac\" is not a substring of \"ababc\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "detect-pattern-of-length-m-repeated-k-or-more-times",
                "title": "Detect Pattern of Length M Repeated K or More Times",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The constraints are low enough for a brute force approach.",
            "Try every k value from 0 upwards until word is no longer k-repeating."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            }
        ],
        "solutions": {}
    }
}