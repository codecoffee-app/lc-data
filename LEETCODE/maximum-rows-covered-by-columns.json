{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2397",
            "title": "Maximum Rows Covered by Columns",
            "titleSlug": "maximum-rows-covered-by-columns",
            "content": "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> binary matrix <code>matrix</code> and an integer <code>numSelect</code>, which denotes the number of <strong>distinct</strong> columns you must select from <code>matrix</code>.</p>\n\n<p>Let us consider <code>s = {c<sub>1</sub>, c<sub>2</sub>, ...., c<sub>numSelect</sub>}</code> as the set of columns selected by you. A row <code>row</code> is <strong>covered</strong> by <code>s</code> if:</p>\n\n<ul>\n\t<li>For each cell <code>matrix[row][col]</code> (<code>0 &lt;= col &lt;= n - 1</code>) where <code>matrix[row][col] == 1</code>, <code>col</code> is present in <code>s</code> or,</li>\n\t<li><strong>No cell</strong> in <code>row</code> has a value of <code>1</code>.</li>\n</ul>\n\n<p>You need to choose <code>numSelect</code> columns such that the number of rows that are covered is <strong>maximized</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of rows that can be <strong>covered</strong> by a set of </em><code>numSelect</code><em> columns.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/07/14/rowscovered.png\" style=\"width: 240px; height: 400px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], numSelect = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> One possible way to cover 3 rows is shown in the diagram above.\nWe choose s = {0, 2}.\n- Row 0 is covered because it has no occurrences of 1.\n- Row 1 is covered because the columns with value 1, i.e. 0 and 2 are present in s.\n- Row 2 is not covered because matrix[2][1] == 1 but 1 is not present in s.\n- Row 3 is covered because matrix[2][2] == 1 and 2 is present in s.\nThus, we can cover three rows.\nNote that s = {1, 2} will also cover 3 rows, but it can be shown that no more than three rows can be covered.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/07/14/rowscovered2.png\" style=\"height: 250px; width: 84px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1],[0]], numSelect = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Selecting the only column will result in both rows being covered since the entire matrix is selected.\nTherefore, we return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 12</code></li>\n\t<li><code>matrix[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= numSelect&nbsp;&lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 252,
            "dislikes": 392,
            "similarQuestions": "[{\"title\": \"Matchsticks to Square\", \"titleSlug\": \"matchsticks-to-square\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Partition to K Equal Sum Subsets\", \"titleSlug\": \"partition-to-k-equal-sum-subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find the Shortest Superstring\", \"titleSlug\": \"find-the-shortest-superstring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Smallest Sufficient Team\", \"titleSlug\": \"smallest-sufficient-team\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Fair Distribution of Cookies\", \"titleSlug\": \"fair-distribution-of-cookies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.7K\", \"totalSubmission\": \"25.4K\", \"totalAcceptedRaw\": 13728, \"totalSubmissionRaw\": 25379, \"acRate\": \"54.1%\"}",
            "hints": [
                "Try a brute-force approach.",
                "Iterate through all possible sets of exactly <code>cols</code> columns.",
                "For each valid set, check how many rows are covered, and return the maximum."
            ],
            "rephrased": {
                "body": "Given a 0-indexed m x n binary matrix `matrix` and an integer `numSelect`, find the maximum number of rows that can be covered by selecting exactly `numSelect` distinct columns from `matrix`. A row is considered covered if for every cell `matrix[row][col]` where `matrix[row][col] == 1`, the column `col` is among the selected columns, or if the row contains no 1's at all.",
                "constraints": [
                    "m == matrix.length",
                    "n == matrix[i].length",
                    "1 <= m, n <= 12",
                    "matrix[i][j] is either 0 or 1.",
                    "1 <= numSelect <= n"
                ],
                "testcases": [
                    {
                        "input": "matrix = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], numSelect = 2",
                        "output": "3",
                        "explanation": "Selecting columns 0 and 2 covers rows 0, 1, and 3. Row 0 is covered because it has no 1s. Row 1 is covered because columns 0 and 2, which contain 1s in that row, are selected. Row 3 is covered for the same reason. Row 2 is not covered because column 1 contains a 1, but column 1 was not selected."
                    },
                    {
                        "input": "matrix = [[1],[0]], numSelect = 1",
                        "output": "2",
                        "explanation": "Selecting the only column covers both rows. Row 0 is covered because column 0, which contains a 1 in that row, is selected. Row 1 is covered because it has no 1s."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "matchsticks-to-square",
                "title": "Matchsticks to Square",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "partition-to-k-equal-sum-subsets",
                "title": "Partition to K Equal Sum Subsets",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-the-shortest-superstring",
                "title": "Find the Shortest Superstring",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "smallest-sufficient-team",
                "title": "Smallest Sufficient Team",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "fair-distribution-of-cookies",
                "title": "Fair Distribution of Cookies",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try a brute-force approach.",
            "Iterate through all possible sets of exactly <code>cols</code> columns.",
            "For each valid set, check how many rows are covered, and return the maximum."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumRows(vector<vector<int>>& matrix, int numSelect) {\n    int ans = 0;\n    dfs(matrix, /*colIndex=*/0, numSelect, /*mask=*/0, ans);\n    return ans;\n  }\n\n private:\n  void dfs(const vector<vector<int>>& matrix, int colIndex, int leftColsCount,\n           int mask, int& ans) {\n    if (leftColsCount == 0) {\n      ans = max(ans, getAllZerosRowCount(matrix, mask));\n      return;\n    }\n    if (colIndex == matrix[0].size())\n      return;\n\n    // Choose this column\n    dfs(matrix, colIndex + 1, leftColsCount - 1, mask | 1 << colIndex, ans);\n    // Not choose this column\n    dfs(matrix, colIndex + 1, leftColsCount, mask, ans);\n  }\n\n  int getAllZerosRowCount(const vector<vector<int>>& matrix, int mask) {\n    int count = 0;\n    for (const vector<int>& row : matrix) {\n      bool isAllZeros = true;\n      for (int i = 0; i < row.size(); ++i) {\n        if (row[i] == 1 && (mask >> i & 1) == 0) {\n          isAllZeros = false;\n          break;\n        }\n      }\n      if (isAllZeros)\n        ++count;\n    }\n    return count;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumRows(int[][] matrix, int numSelect) {\n    dfs(matrix, /*colIndex=*/0, numSelect, /*mask=*/0);\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private void dfs(int[][] matrix, int colIndex, int leftColsCount, int mask) {\n    if (leftColsCount == 0) {\n      ans = Math.max(ans, getAllZerosRowCount(matrix, mask));\n      return;\n    }\n    if (colIndex == matrix[0].length)\n      return;\n\n    // Choose this column\n    dfs(matrix, colIndex + 1, leftColsCount - 1, mask | 1 << colIndex);\n    // Not choose this column\n    dfs(matrix, colIndex + 1, leftColsCount, mask);\n  }\n\n  int getAllZerosRowCount(int[][] matrix, int mask) {\n    int count = 0;\n    for (int[] row : matrix) {\n      boolean isAllZeros = true;\n      for (int i = 0; i < row.length; ++i) {\n        if (row[i] == 1 && (mask >> i & 1) == 0) {\n          isAllZeros = false;\n          break;\n        }\n      }\n      if (isAllZeros)\n        ++count;\n    }\n    return count;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumRows(self, matrix: List[List[int]], numSelect: int) -> int:\n    ans = 0\n\n    def dfs(colIndex: int, leftColsCount: int, mask: int):\n      nonlocal ans\n      if leftColsCount == 0:\n        ans = max(ans, self._getAllZerosRowCount(matrix, mask))\n        return\n\n      if colIndex == len(matrix[0]):\n        return\n\n      # Choose this column\n      dfs(colIndex + 1, leftColsCount - 1, mask | 1 << colIndex)\n      # Not choose this column\n      dfs(colIndex + 1, leftColsCount, mask)\n\n    dfs(0, numSelect, 0)\n    return ans\n\n  def _getAllZerosRowCount(self, matrix: List[List[int]], mask: int) -> int:\n    count = 0\n    for row in matrix:\n      isAllZeros = True\n      for i, cell in enumerate(row):\n        if cell == 1 and (mask >> i & 1) == 0:\n          isAllZeros = False\n          break\n      if isAllZeros:\n        count += 1\n    return count\n",
                "lang_text": "py"
            }
        }
    }
}