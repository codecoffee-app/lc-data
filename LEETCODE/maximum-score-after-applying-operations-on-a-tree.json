{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2925",
            "title": "Maximum Score After Applying Operations on a Tree",
            "titleSlug": "maximum-score-after-applying-operations-on-a-tree",
            "content": "<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, and rooted at node <code>0</code>. You are given&nbsp;a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>You are also given a <strong>0-indexed</strong> integer array <code>values</code> of length <code>n</code>, where <code>values[i]</code> is the <strong>value</strong> associated with the <code>i<sup>th</sup></code> node.</p>\n\n<p>You start with a score of <code>0</code>. In one operation, you can:</p>\n\n<ul>\n\t<li>Pick any node <code>i</code>.</li>\n\t<li>Add <code>values[i]</code> to your score.</li>\n\t<li>Set <code>values[i]</code> to <code>0</code>.</li>\n</ul>\n\n<p>A tree is <strong>healthy</strong> if the sum of values on the path from the root to any leaf node is different than zero.</p>\n\n<p>Return <em>the <strong>maximum score</strong> you can obtain after performing these operations on the tree any number of times so that it remains <strong>healthy</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/10/11/graph-13-1.png\" style=\"width: 515px; height: 443px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> We can choose nodes 1, 2, 3, 4, and 5. The value of the root is non-zero. Hence, the sum of values on the path from the root to any leaf is different than zero. Therefore, the tree is healthy and the score is values[1] + values[2] + values[3] + values[4] + values[5] = 11.\nIt can be shown that 11 is the maximum score obtainable after any number of operations on the tree.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/10/11/graph-14-2.png\" style=\"width: 522px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5]\n<strong>Output:</strong> 40\n<strong>Explanation:</strong> We can choose nodes 0, 2, 3, and 4.\n- The sum of values on the path from 0 to 4 is equal to 10.\n- The sum of values on the path from 0 to 3 is equal to 10.\n- The sum of values on the path from 0 to 5 is equal to 3.\n- The sum of values on the path from 0 to 6 is equal to 5.\nTherefore, the tree is healthy and the score is values[0] + values[2] + values[3] + values[4] = 40.\nIt can be shown that 40 is the maximum score obtainable after any number of operations on the tree.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>values.length == n</code></li>\n\t<li><code>1 &lt;= values[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>The input is generated such that <code>edges</code> represents a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 311,
            "dislikes": 62,
            "similarQuestions": "[{\"title\": \"Sum of Distances in Tree\", \"titleSlug\": \"sum-of-distances-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Collect Coins in a Tree\", \"titleSlug\": \"collect-coins-in-a-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find the Maximum Sum of Node Values\", \"titleSlug\": \"find-the-maximum-sum-of-node-values\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.4K\", \"totalSubmission\": \"25K\", \"totalAcceptedRaw\": 12353, \"totalSubmissionRaw\": 25030, \"acRate\": \"49.4%\"}",
            "hints": [
                "Let <code>dp[i]</code> be the maximum score we can get on the subtree rooted at <code>i</code> and <code>sum[i]</code> be the sum of all the values of the subtree rooted at <code>i</code>.",
                "If we don\u2019t take <code>value[i]</code> into the final score, we can take all the nodes of the subtrees rooted at <code>i</code>\u2019s children.",
                "If we take <code>value[i]</code> into the score, then each subtree rooted at its children should satisfy the constraints.",
                "<code>dp[x] = max(value[x] + sigma(dp[y]), sigma(sum[y]))</code>, where <code>y</code> is a direct child of <code>x</code>."
            ],
            "rephrased": {
                "body": "Given an undirected tree with `n` nodes (labeled 0 to `n-1`) rooted at node 0, and a 2D integer array `edges` representing the tree's connections (where `edges[i] = [a_i, b_i]` indicates an edge between nodes `a_i` and `b_i`). You're also given an integer array `values` representing the value of each node.  Your goal is to maximize your score by picking nodes, adding their values to your score, and setting the node's value to 0. The tree must remain *healthy*: the sum of values along any path from the root to a leaf node must be non-zero. Find the maximum possible score achievable.",
                "constraints": [
                    "2 <= n <= 2 * 10^4",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= a_i, b_i < n",
                    "values.length == n",
                    "1 <= values[i] <= 10^9",
                    "The input is generated such that `edges` represents a valid tree."
                ],
                "testcases": [
                    {
                        "input": "edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1]",
                        "output": "11",
                        "explanation": "The optimal strategy is to select nodes 1, 2, 3, 4, and 5. This yields a score of 11 and ensures that the sum of values on any path from the root to a leaf remains non-zero."
                    },
                    {
                        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5]",
                        "output": "40",
                        "explanation": "The optimal strategy is to select nodes 0, 2, 3, and 4. This yields a score of 40, with the path sums from the root to leaves being 10, 10, 3 and 5 for leaves 3,4,5, and 6 respectively."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-distances-in-tree",
                "title": "Sum of Distances in Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "collect-coins-in-a-tree",
                "title": "Collect Coins in a Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-the-maximum-sum-of-node-values",
                "title": "Find the Maximum Sum of Node Values",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>dp[i]</code> be the maximum score we can get on the subtree rooted at <code>i</code> and <code>sum[i]</code> be the sum of all the values of the subtree rooted at <code>i</code>.",
            "If we don\u2019t take <code>value[i]</code> into the final score, we can take all the nodes of the subtrees rooted at <code>i</code>\u2019s children.",
            "If we take <code>value[i]</code> into the score, then each subtree rooted at its children should satisfy the constraints.",
            "<code>dp[x] = max(value[x] + sigma(dp[y]), sigma(sum[y]))</code>, where <code>y</code> is a direct child of <code>x</code>."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maximumScoreAfterOperations(vector<vector<int>>& edges,\n                                        vector<int>& values) {\n    vector<vector<int>> tree(values.size());\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      tree[u].push_back(v);\n      tree[v].push_back(u);\n    }\n\n    return accumulate(values.begin(), values.end(), 0LL) -\n           dfs(tree, 0, /*prev=*/-1, values);\n  }\n\n private:\n  // Returns the minimum of sum to be reduced.\n  long long dfs(const vector<vector<int>>& tree, int u, int prev,\n                const vector<int>& values) {\n    if (u > 0 && tree[u].size() == 1)\n      return values[u];\n    long long childrenSum = 0;\n    for (const int v : tree[u])\n      if (v != prev)\n        childrenSum += dfs(tree, v, u, values);\n    return min(childrenSum, 1LL * values[u]);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maximumScoreAfterOperations(int[][] edges, int[] values) {\n    List<Integer>[] tree = new ArrayList[values.length];\n\n    for (int i = 0; i < values.length; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      tree[u].add(v);\n      tree[v].add(u);\n    }\n\n    return Arrays.stream(values).sum() - dfs(tree, 0, /*prev=*/-1, values);\n  }\n\n  private long dfs(List<Integer>[] tree, int u, int prev, int[] values) {\n    if (u > 0 && tree[u].size() == 1)\n      return values[u];\n    long childrenSum = 0;\n    for (final int v : tree[u])\n      if (v != prev)\n        childrenSum += dfs(tree, v, u, values);\n    return Math.min(childrenSum, 1L * values[u]);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumScoreAfterOperations(self, edges: List[List[int]], values: List[int]) -> int:\n    tree = [[] for _ in values]\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    def dfs(u: int, prev: int) -> None:\n      if u > 0 and len(tree[u]) == 1:\n        return values[u]\n      childrenSum = sum(dfs(v, u)\n                        for v in tree[u]\n                        if v != prev)\n      return min(childrenSum, values[u])\n\n    return sum(values) - dfs(0, -1)\n",
                "lang_text": "py"
            }
        }
    }
}