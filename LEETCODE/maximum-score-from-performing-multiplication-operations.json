{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1770",
            "title": "Maximum Score from Performing Multiplication Operations",
            "titleSlug": "maximum-score-from-performing-multiplication-operations",
            "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums</code> and <code>multipliers</code><strong> </strong>of size <code>n</code> and <code>m</code> respectively, where <code>n &gt;= m</code>.</p>\n\n<p>You begin with a score of <code>0</code>. You want to perform <strong>exactly</strong> <code>m</code> operations. On the <code>i<sup>th</sup></code> operation (<strong>0-indexed</strong>) you will:</p>\n\n<ul>\n    <li>Choose one integer <code>x</code> from <strong>either the start or the end </strong>of the array <code>nums</code>.</li>\n    <li>Add <code>multipliers[i] * x</code> to your score.\n    <ul>\n        <li>Note that <code>multipliers[0]</code> corresponds to the first operation, <code>multipliers[1]</code> to the second operation, and so on.</li>\n    </ul>\n    </li>\n    <li>Remove <code>x</code> from <code>nums</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> score after performing </em><code>m</code> <em>operations.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], multipliers = [3,2,1]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong>&nbsp;An optimal solution is as follows:\n- Choose from the end, [1,2,<strong><u>3</u></strong>], adding 3 * 3 = 9 to the score.\n- Choose from the end, [1,<strong><u>2</u></strong>], adding 2 * 2 = 4 to the score.\n- Choose from the end, [<strong><u>1</u></strong>], adding 1 * 1 = 1 to the score.\nThe total score is 9 + 4 + 1 = 14.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]\n<strong>Output:</strong> 102\n<strong>Explanation: </strong>An optimal solution is as follows:\n- Choose from the start, [<u><strong>-5</strong></u>,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.\n- Choose from the start, [<strong><u>-3</u></strong>,-3,-2,7,1], adding -3 * -5 = 15 to the score.\n- Choose from the start, [<strong><u>-3</u></strong>,-2,7,1], adding -3 * 3 = -9 to the score.\n- Choose from the end, [-2,7,<strong><u>1</u></strong>], adding 1 * 4 = 4 to the score.\n- Choose from the end, [-2,<strong><u>7</u></strong>], adding 7 * 6 = 42 to the score. \nThe total score is 50 + 15 - 9 + 4 + 42 = 102.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>m == multipliers.length</code></li>\n\t<li><code>1 &lt;= m &lt;= 300</code></li>\n\t<li><code>m &lt;= n &lt;= 10<sup>5</sup></code><code> </code></li>\n\t<li><code>-1000 &lt;= nums[i], multipliers[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2474,
            "dislikes": 509,
            "similarQuestions": "[{\"title\": \"Maximum Points You Can Obtain from Cards\", \"titleSlug\": \"maximum-points-you-can-obtain-from-cards\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game VII\", \"titleSlug\": \"stone-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Spending After Buying Items\", \"titleSlug\": \"maximum-spending-after-buying-items\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"104.4K\", \"totalSubmission\": \"265.7K\", \"totalAcceptedRaw\": 104369, \"totalSubmissionRaw\": 265747, \"acRate\": \"39.3%\"}",
            "hints": [
                "At first glance, the solution seems to be greedy, but if you try to greedily take the largest value from the beginning or the end, this will not be optimal.",
                "You should try all scenarios but this will be costly.",
                "Memoizing the pre-visited states while trying all the possible scenarios will reduce the complexity, and hence dp is a perfect choice here."
            ],
            "rephrased": {
                "body": "Given two 0-indexed integer arrays `nums` and `multipliers` of size `n` and `m` respectively, where `n >= m`. You start with a score of 0. You need to perform exactly `m` operations. In each operation, you can choose an integer `x` from either the start or the end of the array `nums`, add `multipliers[i] * x` to your score, and remove `x` from `nums`. Return the maximum score after performing `m` operations.",
                "constraints": [
                    "n == nums.length",
                    "m == multipliers.length",
                    "1 <= m <= 300",
                    "m <= n <= 10^5",
                    "-1000 <= nums[i], multipliers[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3], multipliers = [3,2,1]",
                        "output": "14",
                        "explanation": "The optimal strategy is to choose 3, then 2, then 1. 3 * 3 + 2 * 2 + 1 * 1 = 14."
                    },
                    {
                        "input": "nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]",
                        "output": "102",
                        "explanation": "The optimal strategy is to choose -5, then -3, then -3, then 1, then 7. -5 * -10 + -3 * -5 + -3 * 3 + 1 * 4 + 7 * 6 = 102."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-points-you-can-obtain-from-cards",
                "title": "Maximum Points You Can Obtain from Cards",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-vii",
                "title": "Stone Game VII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-spending-after-buying-items",
                "title": "Maximum Spending After Buying Items",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "At first glance, the solution seems to be greedy, but if you try to greedily take the largest value from the beginning or the end, this will not be optimal.",
            "You should try all scenarios but this will be costly.",
            "Memoizing the pre-visited states while trying all the possible scenarios will reduce the complexity, and hence dp is a perfect choice here."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumScore(vector<int>& nums, vector<int>& multipliers) {\n    // dp[s][i] := max score of nums[s..e] and multipliers[i],\n    dp.resize(multipliers.size(), vector<int>(multipliers.size(), -1));\n    return maximumScore(nums, 0, multipliers, 0);\n  }\n\n private:\n  vector<vector<int>> dp;\n\n  int maximumScore(const vector<int>& nums, int s,\n                   const vector<int>& multipliers, int i) {\n    if (i == multipliers.size())\n      return 0;\n    if (dp[s][i] != -1)\n      return dp[s][i];\n\n    // # of nums picked on the start side = s,\n    // # of nums picked on the end side = i - s,\n    // So e = n - (i - s) - 1\n    const int e = nums.size() - (i - s) - 1;\n    const int pickStart = nums[s] * multipliers[i] +\n                          maximumScore(nums, s + 1, multipliers, i + 1);\n    const int pickEnd = nums[e] * multipliers[i] +  //\n                        maximumScore(nums, s, multipliers, i + 1);\n    return dp[s][i] = max(pickStart, pickEnd);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumScore(int[] nums, int[] multipliers) {\n    // dp[s][i] := max score of nums[s..e] and multipliers[i],\n    dp = new Integer[multipliers.length][multipliers.length];\n    return maximumScore(nums, 0, multipliers, 0);\n  }\n\n  private Integer[][] dp;\n\n  int maximumScore(int[] nums, int s, int[] multipliers, int i) {\n    if (i == multipliers.length)\n      return 0;\n    if (dp[s][i] != null)\n      return dp[s][i];\n\n    // # of nums picked on the start side = s,\n    // # of nums picked on the end side = i - s,\n    // So e = n - (i - s) - 1\n    final int e = nums.length - (i - s) - 1;\n    final int pickStart = nums[s] * multipliers[i] + maximumScore(nums, s + 1, multipliers, i + 1);\n    final int pickEnd = nums[e] * multipliers[i] + maximumScore(nums, s, multipliers, i + 1);\n    return dp[s][i] = Math.max(pickStart, pickEnd);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumScore(self, nums: List[int], multipliers: List[int]) -> int:\n    @functools.lru_cache(2000)\n    def dp(s: int, i: int) -> int:\n      if i == len(multipliers):\n        return 0\n\n      e = len(nums) - (i - s) - 1\n      pickStart = nums[s] * multipliers[i] + dp(s + 1, i + 1)\n      pickEnd = nums[e] * multipliers[i] + dp(s, i + 1)\n      return max(pickStart, pickEnd)\n\n    return dp(0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}