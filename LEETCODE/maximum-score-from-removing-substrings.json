{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1717",
            "title": "Maximum Score From Removing Substrings",
            "titleSlug": "maximum-score-from-removing-substrings",
            "content": "<p>You are given a string <code>s</code> and two integers <code>x</code> and <code>y</code>. You can perform two types of operations any number of times.</p>\n\n<ul>\n\t<li>Remove substring <code>&quot;ab&quot;</code> and gain <code>x</code> points.\n\n\t<ul>\n\t\t<li>For example, when removing <code>&quot;ab&quot;</code> from <code>&quot;c<u>ab</u>xbae&quot;</code> it becomes <code>&quot;cxbae&quot;</code>.</li>\n\t</ul>\n\t</li>\n\t<li>Remove substring <code>&quot;ba&quot;</code> and gain <code>y</code> points.\n\t<ul>\n\t\t<li>For example, when removing <code>&quot;ba&quot;</code> from <code>&quot;cabx<u>ba</u>e&quot;</code> it becomes <code>&quot;cabxe&quot;</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the maximum points you can gain after applying the above operations on</em> <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cdbcbbaaabab&quot;, x = 4, y = 5\n<strong>Output:</strong> 19\n<strong>Explanation:</strong>\n- Remove the &quot;ba&quot; underlined in &quot;cdbcbbaaa<u>ba</u>b&quot;. Now, s = &quot;cdbcbbaaab&quot; and 5 points are added to the score.\n- Remove the &quot;ab&quot; underlined in &quot;cdbcbbaa<u>ab</u>&quot;. Now, s = &quot;cdbcbbaa&quot; and 4 points are added to the score.\n- Remove the &quot;ba&quot; underlined in &quot;cdbcb<u>ba</u>a&quot;. Now, s = &quot;cdbcba&quot; and 5 points are added to the score.\n- Remove the &quot;ba&quot; underlined in &quot;cdbc<u>ba</u>&quot;. Now, s = &quot;cdbc&quot; and 5 points are added to the score.\nTotal score = 5 + 4 + 5 + 5 = 19.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabbaaxybbaabb&quot;, x = 5, y = 4\n<strong>Output:</strong> 20\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= x, y &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 613,
            "dislikes": 34,
            "similarQuestions": "[{\"title\": \"Count Words Obtained After Adding a Letter\", \"titleSlug\": \"count-words-obtained-after-adding-a-letter\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.9K\", \"totalSubmission\": \"29.7K\", \"totalAcceptedRaw\": 13891, \"totalSubmissionRaw\": 29747, \"acRate\": \"46.7%\"}",
            "hints": [
                "Note that it is always more optimal to take one type of substring before another",
                "You can use a stack to handle erasures"
            ],
            "rephrased": {
                "body": "Given a string `s` and two integers `x` and `y`, representing the points gained by removing the substrings \"ab\" and \"ba\" respectively, determine the maximum points obtainable by repeatedly removing these substrings from `s`.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "1 <= x, y <= 10^4",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"cdbcbbaaabab\", x = 4, y = 5",
                        "output": "19",
                        "explanation": "One optimal sequence of operations is as follows:\n\n1.  Remove \"ba\" from \"cdbcbbaaaba`b`\" gaining 5 points, leaving \"cdbcbbaaab\".\n2.  Remove \"ab\" from \"cdbcbbaa`ab`\" gaining 4 points, leaving \"cdbcbbaa\".\n3.  Remove \"ba\" from \"cdbcb`ba`a\" gaining 5 points, leaving \"cdbcba\".\n4.  Remove \"ba\" from \"cdbc`ba`\" gaining 5 points, leaving \"cdbc\".\n\nThe total score is 5 + 4 + 5 + 5 = 19."
                    },
                    {
                        "input": "s = \"aabbaaxybbaabb\", x = 5, y = 4",
                        "output": "20",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "count-words-obtained-after-adding-a-letter",
                "title": "Count Words Obtained After Adding a Letter",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Note that it is always more optimal to take one type of substring before another",
            "You can use a stack to handle erasures"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumGain(string s, int x, int y) {\n    // The assumption that gain(\"ab\") > gain(\"ba\") while removing \"ba\" first is\n    // optimal is contradicted. Only \"b(ab)a\" satisfies the condition of\n    // preventing two \"ba\" removals, but after removing \"ab\", we can still\n    // remove one \"ba\", resulting in a higher gain. Thus, removing \"ba\" first is\n    // not optimal.\n    return x > y ? gain(s, \"ab\", x, \"ba\", y) : gain(s, \"ba\", y, \"ab\", x);\n  }\n\n private:\n  // Returns the points gained by first removing sub1 (\"ab\" | \"ba\") from s with\n  // point1, then removing sub2 (\"ab\" | \"ba\") from s with point2.\n  int gain(const string& s, const string& sub1, int point1, const string& sub2,\n           int point2) {\n    int points = 0;\n    vector<char> stack1;\n    vector<char> stack2;\n\n    // Remove \"sub1\" from s with point1 gain.\n    for (const char c : s)\n      if (!stack1.empty() && stack1.back() == sub1[0] && c == sub1[1]) {\n        stack1.pop_back();\n        points += point1;\n      } else {\n        stack1.push_back(c);\n      }\n\n    // Remove \"sub2\" from s with point2 gain.\n    for (const char c : stack1)\n      if (!stack2.empty() && stack2.back() == sub2[0] && c == sub2[1]) {\n        stack2.pop_back();\n        points += point2;\n      } else {\n        stack2.push_back(c);\n      }\n\n    return points;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumGain(String s, int x, int y) {\n    // The assumption that gain(\"ab\") > gain(\"ba\") while removing \"ba\" first is\n    // optimal is contradicted. Only \"b(ab)a\" satisfies the condition of\n    // preventing two \"ba\" removals, but after removing \"ab\", we can still\n    // remove one \"ba\", resulting in a higher gain. Thus, removing \"ba\" first is\n    // not optimal.\n    return x > y ? gain(s, \"ab\", x, \"ba\", y) : gain(s, \"ba\", y, \"ab\", x);\n  }\n\n  // Returns the points gained by first removing sub1 (\"ab\" | \"ba\") from s with\n  // point1, then removing sub2 (\"ab\" | \"ba\") from s with point2.\n  private int gain(final String s, final String sub1, int point1, final String sub2, int point2) {\n    int points = 0;\n    Stack<Character> stack1 = new Stack<>();\n    Stack<Character> stack2 = new Stack<>();\n\n    // Remove \"sub1\" from s with point1 gain.\n    for (final char c : s.toCharArray())\n      if (!stack1.isEmpty() && stack1.peek() == sub1.charAt(0) && c == sub1.charAt(1)) {\n        stack1.pop();\n        points += point1;\n      } else {\n        stack1.push(c);\n      }\n\n    // Remove \"sub2\" from s with point2 gain.\n    for (final char c : stack1)\n      if (!stack2.isEmpty() && stack2.peek() == sub2.charAt(0) && c == sub2.charAt(1)) {\n        stack2.pop();\n        points += point2;\n      } else {\n        stack2.push(c);\n      }\n\n    return points;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumGain(self, s: str, x: int, y: int) -> int:\n    # The assumption that gain('ab') > gain('ba') while removing 'ba' first is\n    # optimal is contradicted. Only 'b(ab)a' satisfies the condition of\n    # preventing two 'ba' removals, but after removing 'ab', we can still\n    # remove one 'ba', resulting in a higher gain. Thus, removing 'ba' first is\n    # not optimal.\n    return self._gain(s, 'ab', x, 'ba', y) if x > y \\\n        else self._gain(s, 'ba', y, 'ab', x)\n\n  # Returns the points gained by first removing sub1 ('ab' | 'ba') from s with\n  # point1, then removing sub2 ('ab' | 'ba') from s with point2.\n  def _gain(self, s: str, sub1: str, point1: int, sub2: str, point2: int) -> int:\n    points = 0\n    stack1 = []\n    stack2 = []\n\n    # Remove 'sub1' from s with point1 gain.\n    for c in s:\n      if stack1 and stack1[-1] == sub1[0] and c == sub1[1]:\n        stack1.pop()\n        points += point1\n      else:\n        stack1.append(c)\n\n    # Remove 'sub2' from s with point2 gain.\n    for c in stack1:\n      if stack2 and stack2[-1] == sub2[0] and c == sub2[1]:\n        stack2.pop()\n        points += point2\n      else:\n        stack2.append(c)\n\n    return points\n",
                "lang_text": "py"
            }
        }
    }
}