{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1793",
            "title": "Maximum Score of a Good Subarray",
            "titleSlug": "maximum-score-of-a-good-subarray",
            "content": "<p>You are given an array of integers <code>nums</code> <strong>(0-indexed)</strong> and an integer <code>k</code>.</p>\n\n<p>The <strong>score</strong> of a subarray <code>(i, j)</code> is defined as <code>min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)</code>. A <strong>good</strong> subarray is a subarray where <code>i &lt;= k &lt;= j</code>.</p>\n\n<p>Return <em>the maximum possible <strong>score</strong> of a <strong>good</strong> subarray.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,3,7,4,5], k = 3\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,5,4,5,4,1,1,1], k = 0\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= k &lt; nums.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1748,
            "dislikes": 44,
            "similarQuestions": "[{\"title\": \"Largest Rectangle in Histogram\", \"titleSlug\": \"largest-rectangle-in-histogram\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"68.7K\", \"totalSubmission\": \"106.2K\", \"totalAcceptedRaw\": 68704, \"totalSubmissionRaw\": 106237, \"acRate\": \"64.7%\"}",
            "hints": [
                "Try thinking about the prefix before index k and the suffix after index k as two separate arrays.",
                "Using two pointers or binary search, we can find the maximum prefix of each array where the numbers are less than or equal to a certain value"
            ],
            "rephrased": {
                "body": "Given an array of integers `nums` and an integer `k`, find the maximum possible score of a good subarray. The score of a subarray `(i, j)` is defined as the minimum value within that subarray multiplied by its length: `min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)`. A good subarray is one that includes the index `k`: `i <= k <= j`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 2 * 10^4",
                    "0 <= k < nums.length"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,4,3,7,4,5], k = 3",
                        "output": "15",
                        "explanation": "The optimal subarray is (1, 5). The minimum value within this subarray is 3, and its length is 5. Therefore, the score is 3 * 5 = 15."
                    },
                    {
                        "input": "nums = [5,5,4,5,4,1,1,1], k = 0",
                        "output": "20",
                        "explanation": "The optimal subarray is (0, 4). The minimum value within this subarray is 4, and its length is 5. Therefore, the score is 4 * 5 = 20."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "largest-rectangle-in-histogram",
                "title": "Largest Rectangle in Histogram",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try thinking about the prefix before index k and the suffix after index k as two separate arrays.",
            "Using two pointers or binary search, we can find the maximum prefix of each array where the numbers are less than or equal to a certain value"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 84. Largest Rectangle in Histogram\n  int maximumScore(vector<int>& nums, int k) {\n    int ans = 0;\n    stack<int> stack;\n\n    for (int i = 0; i <= nums.size(); ++i) {\n      while (!stack.empty() &&\n             (i == nums.size() || nums[stack.top()] > nums[i])) {\n        const int h = nums[stack.top()];\n        stack.pop();\n        const int w = stack.empty() ? i : i - stack.top() - 1;\n        if ((stack.empty() || stack.top() + 1 <= k) && i - 1 >= k)\n          ans = max(ans, h * w);\n      }\n      stack.push(i);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 84. Largest Rectangle in Histogram\n  public int maximumScore(int[] nums, int k) {\n    int ans = 0;\n    Deque<Integer> stack = new ArrayDeque<>();\n\n    for (int i = 0; i <= nums.length; ++i) {\n      while (!stack.isEmpty() && (i == nums.length || nums[stack.peek()] > nums[i])) {\n        final int h = nums[stack.pop()];\n        final int w = stack.isEmpty() ? i : i - stack.peek() - 1;\n        if ((stack.isEmpty() || stack.peek() + 1 <= k) && i - 1 >= k)\n          ans = Math.max(ans, h * w);\n      }\n      stack.push(i);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 84. Largest Rectangle in Histogram\n  def maximumScore(self, nums: List[int], k: int) -> int:\n    ans = 0\n    stack = []\n\n    for i in range(len(nums) + 1):\n      while stack and (i == len(nums) or nums[stack[-1]] > nums[i]):\n        h = nums[stack.pop()]\n        w = i - stack[-1] - 1 if stack else i\n        if (not stack or stack[-1] + 1 <= k) and i - 1 >= k:\n          ans = max(ans, h * w)\n      stack.append(i)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}