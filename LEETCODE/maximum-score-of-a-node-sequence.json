{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2242",
            "title": "Maximum Score of a Node Sequence",
            "titleSlug": "maximum-score-of-a-node-sequence",
            "content": "<p>There is an <strong>undirected</strong> graph with <code>n</code> nodes, numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>scores</code> of length <code>n</code> where <code>scores[i]</code> denotes the score of node <code>i</code>. You are also given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an <strong>undirected</strong> edge connecting nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p>A node sequence is <b>valid</b> if it meets the following conditions:</p>\n\n<ul>\n\t<li>There is an edge connecting every pair of <strong>adjacent</strong> nodes in the sequence.</li>\n\t<li>No node appears more than once in the sequence.</li>\n</ul>\n\n<p>The score of a node sequence is defined as the <strong>sum</strong> of the scores of the nodes in the sequence.</p>\n\n<p>Return <em>the <strong>maximum score</strong> of a valid node sequence with a length of </em><code>4</code><em>. </em>If no such sequence exists, return<em> </em><code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/04/15/ex1new3.png\" style=\"width: 290px; height: 215px;\" />\n<pre>\n<strong>Input:</strong> scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> The figure above shows the graph and the chosen node sequence [0,1,2,3].\nThe score of the node sequence is 5 + 2 + 9 + 8 = 24.\nIt can be shown that no other node sequence has a score of more than 24.\nNote that the sequences [3,1,2,0] and [1,0,2,3] are also valid and have a score of 24.\nThe sequence [0,3,2,4] is not valid since no edge connects nodes 0 and 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/17/ex2.png\" style=\"width: 333px; height: 151px;\" />\n<pre>\n<strong>Input:</strong> scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The figure above shows the graph.\nThere are no valid node sequences of length 4, so we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == scores.length</code></li>\n\t<li><code>4 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= scores[i] &lt;= 10<sup>8</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>There are no duplicate edges.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 501,
            "dislikes": 15,
            "similarQuestions": "[{\"title\": \"Get the Maximum Score\", \"titleSlug\": \"get-the-maximum-score\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"11K\", \"totalSubmission\": \"28.8K\", \"totalAcceptedRaw\": 11006, \"totalSubmissionRaw\": 28785, \"acRate\": \"38.2%\"}",
            "hints": [
                "For every node sequence of length 4, there are 3 relevant edges. How can we consider valid triplets of edges?",
                "Fix the middle 2 nodes connected by an edge in the node sequence. Can you determine the other 2 nodes that will give the highest possible score?",
                "The other 2 nodes must each be connected to one of the middle nodes. If we only consider nodes with the highest scores, how many should we store to ensure we don\u2019t choose duplicate nodes?",
                "For each node, we should store the 3 adjacent nodes with the highest scores to ensure we can find a sequence with no duplicate nodes via the method above."
            ],
            "rephrased": {
                "body": "Given an undirected graph with 'n' nodes (numbered 0 to n-1) and an integer array 'scores' of length 'n' where scores[i] is the score of node 'i'. You are also given a 2D integer array 'edges' where edges[i] = [ai, bi] indicates an undirected edge between nodes ai and bi. Find the maximum score of a valid node sequence of length 4. A node sequence is valid if: \n1. There is an edge connecting every pair of adjacent nodes in the sequence.\n2. No node appears more than once in the sequence.\nThe score of a node sequence is the sum of the scores of the nodes in the sequence. If no such sequence exists, return -1.",
                "constraints": [
                    "n == scores.length",
                    "4 <= n <= 5 * 10^4",
                    "1 <= scores[i] <= 10^8",
                    "0 <= edges.length <= 5 * 10^4",
                    "edges[i].length == 2",
                    "0 <= a<sub>i</sub>, b<sub>i</sub> <= n - 1",
                    "a<sub>i</sub> != b<sub>i</sub>",
                    "There are no duplicate edges."
                ],
                "testcases": [
                    {
                        "input": "scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]",
                        "output": "24",
                        "explanation": "One valid sequence is [0,1,2,3] with a score of 5 + 2 + 9 + 8 = 24. No other valid sequence has a higher score."
                    },
                    {
                        "input": "scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]",
                        "output": "-1",
                        "explanation": "There are no valid node sequences of length 4 in this graph."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "get-the-maximum-score",
                "title": "Get the Maximum Score",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For every node sequence of length 4, there are 3 relevant edges. How can we consider valid triplets of edges?",
            "Fix the middle 2 nodes connected by an edge in the node sequence. Can you determine the other 2 nodes that will give the highest possible score?",
            "The other 2 nodes must each be connected to one of the middle nodes. If we only consider nodes with the highest scores, how many should we store to ensure we don\u2019t choose duplicate nodes?",
            "For each node, we should store the 3 adjacent nodes with the highest scores to ensure we can find a sequence with no duplicate nodes via the method above."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumScore(vector<int>& scores, vector<vector<int>>& edges) {\n    int ans = -1;\n    vector<set<pair<int, int>>> graph(scores.size());  // {(score, node)}\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].emplace(scores[v], v);\n      graph[v].emplace(scores[u], u);\n      if (graph[u].size() > 3)\n        graph[u].erase(graph[u].begin());\n      if (graph[v].size() > 3)\n        graph[v].erase(graph[v].begin());\n    }\n\n    // Target sequence: a - u - v - b\n    // Enumerate each edge (u, v), and find a (u's child) and b (v's child)\n    // that's why we find the 3 children that have the highest scores because\n    // One of the 3 children is guaranteed to be valid\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      for (const auto& [scoreA, a] : graph[u])\n        for (const auto& [scoreB, b] : graph[v])\n          if (a != b && a != v && b != u)\n            ans = max(ans, scoreA + scores[u] + scores[v] + scoreB);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumScore(int[] scores, int[][] edges) {\n    final int n = scores.length;\n    int ans = -1;\n    Queue<Integer>[] graph = new Queue[n];\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new PriorityQueue<>((a, b) -> scores[a] - scores[b]);\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].offer(v);\n      graph[v].offer(u);\n      if (graph[u].size() > 3)\n        graph[u].poll();\n      if (graph[v].size() > 3)\n        graph[v].poll();\n    }\n\n    // Target sequence: a - u - v - b\n    // Enumerate each edge (u, v), and find a (u's child) and b (v's child)\n    // that's why we find the 3 children that have the highest scores because\n    // The third child is guaranteed to be a valid child\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      for (final int a : graph[u])\n        for (final int b : graph[v])\n          if (a != b && a != v && b != u)\n            ans = Math.max(ans, scores[a] + scores[u] + scores[v] + scores[b]);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumScore(self, scores: List[int], edges: List[List[int]]) -> int:\n    n = len(scores)\n    ans = -1\n    graph = [[] for _ in range(n)]\n\n    for u, v in edges:\n      graph[u].append((scores[v], v))\n      graph[v].append((scores[u], u))\n\n    for i in range(n):\n      graph[i] = heapq.nlargest(3, graph[i])\n\n    for u, v in edges:\n      for scoreA, a in graph[u]:\n        for scoreB, b in graph[v]:\n          if a != b and a != v and b != u:\n            ans = max(ans, scoreA + scores[u] + scores[v] + scoreB)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}