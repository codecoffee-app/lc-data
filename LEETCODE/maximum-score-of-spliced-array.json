{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2321",
            "title": "Maximum Score Of Spliced Array",
            "titleSlug": "maximum-score-of-spliced-array",
            "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, both of length <code>n</code>.</p>\n\n<p>You can choose two integers <code>left</code> and <code>right</code> where <code>0 &lt;= left &lt;= right &lt; n</code> and <strong>swap</strong> the subarray <code>nums1[left...right]</code> with the subarray <code>nums2[left...right]</code>.</p>\n\n<ul>\n\t<li>For example, if <code>nums1 = [1,2,3,4,5]</code> and <code>nums2 = [11,12,13,14,15]</code> and you choose <code>left = 1</code> and <code>right = 2</code>, <code>nums1</code> becomes <code>[1,<strong><u>12,13</u></strong>,4,5]</code> and <code>nums2</code> becomes <code>[11,<strong><u>2,3</u></strong>,14,15]</code>.</li>\n</ul>\n\n<p>You may choose to apply the mentioned operation <strong>once</strong> or not do anything.</p>\n\n<p>The <strong>score</strong> of the arrays is the <strong>maximum</strong> of <code>sum(nums1)</code> and <code>sum(nums2)</code>, where <code>sum(arr)</code> is the sum of all the elements in the array <code>arr</code>.</p>\n\n<p>Return <em>the <strong>maximum possible score</strong></em>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous sequence of elements within an array. <code>arr[left...right]</code> denotes the subarray that contains the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> (<strong>inclusive</strong>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [60,60,60], nums2 = [10,90,10]\n<strong>Output:</strong> 210\n<strong>Explanation:</strong> Choosing left = 1 and right = 1, we have nums1 = [60,<u><strong>90</strong></u>,60] and nums2 = [10,<u><strong>60</strong></u>,10].\nThe score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]\n<strong>Output:</strong> 220\n<strong>Explanation:</strong> Choosing left = 3, right = 4, we have nums1 = [20,40,20,<u><strong>40,20</strong></u>] and nums2 = [50,20,50,<u><strong>70,30</strong></u>].\nThe score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [7,11,13], nums2 = [1,1,1]\n<strong>Output:</strong> 31\n<strong>Explanation:</strong> We choose not to swap any subarray.\nThe score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 745,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Maximum Subarray\", \"titleSlug\": \"maximum-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"17.6K\", \"totalSubmission\": \"31.3K\", \"totalAcceptedRaw\": 17609, \"totalSubmissionRaw\": 31299, \"acRate\": \"56.3%\"}",
            "hints": [
                "Think on Dynamic Programming.",
                "First assume you will be taking the array a and choose some subarray from b",
                "Suppose the DP is DP(pos, state). pos is the current position you are in. state is one of {0,1,2}, where 0 means taking the array a, 1 means we are taking the subarray b, and 2 means we are again taking the array a. We need to handle the transitions carefully."
            ],
            "rephrased": {
                "body": "Given two 0-indexed integer arrays, `nums1` and `nums2`, of length `n`, you can swap a subarray within a defined range. Choose integers `left` and `right` such that `0 <= left <= right < n` and swap the subarray `nums1[left...right]` with the subarray `nums2[left...right]`. This operation can be performed at most once. The score is determined by the maximum of the sums of `nums1` and `nums2` after the potential swap. Determine the maximum possible score.",
                "constraints": [
                    "n == nums1.length == nums2.length",
                    "1 <= n <= 10^5",
                    "1 <= nums1[i], nums2[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [60,60,60], nums2 = [10,90,10]",
                        "output": "210",
                        "explanation": "By choosing left = 1 and right = 1, nums1 becomes [60, 90, 60] and nums2 becomes [10, 60, 10]. The score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210."
                    },
                    {
                        "input": "nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]",
                        "output": "220",
                        "explanation": "By choosing left = 3 and right = 4, nums1 becomes [20, 40, 20, 40, 20] and nums2 becomes [50, 20, 50, 70, 30]. The score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220."
                    },
                    {
                        "input": "nums1 = [7,11,13], nums2 = [1,1,1]",
                        "output": "31",
                        "explanation": "If we choose not to swap any subarray, the score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-subarray",
                "title": "Maximum Subarray",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think on Dynamic Programming.",
            "First assume you will be taking the array a and choose some subarray from b",
            "Suppose the DP is DP(pos, state). pos is the current position you are in. state is one of {0,1,2}, where 0 means taking the array a, 1 means we are taking the subarray b, and 2 means we are again taking the array a. We need to handle the transitions carefully."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ]
    }
}