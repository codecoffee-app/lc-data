{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1255",
            "title": "Maximum Score Words Formed by Letters",
            "titleSlug": "maximum-score-words-formed-by-letters",
            "content": "<p>Given a list of <code>words</code>, list of&nbsp; single&nbsp;<code>letters</code> (might be repeating)&nbsp;and <code>score</code>&nbsp;of every character.</p>\n\n<p>Return the maximum score of <strong>any</strong> valid set of words formed by using the given letters (<code>words[i]</code> cannot be used two&nbsp;or more times).</p>\n\n<p>It is not necessary to use all characters in <code>letters</code> and each letter can only be used once. Score of letters&nbsp;<code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, <code>&#39;c&#39;</code>, ... ,<code>&#39;z&#39;</code> is given by&nbsp;<code>score[0]</code>, <code>score[1]</code>, ... , <code>score[25]</code> respectively.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;dog&quot;,&quot;cat&quot;,&quot;dad&quot;,&quot;good&quot;], letters = [&quot;a&quot;,&quot;a&quot;,&quot;c&quot;,&quot;d&quot;,&quot;d&quot;,&quot;d&quot;,&quot;g&quot;,&quot;o&quot;,&quot;o&quot;], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]\n<strong>Output:</strong> 23\n<strong>Explanation:</strong>\nScore  a=1, c=9, d=5, g=3, o=2\nGiven letters, we can form the words &quot;dad&quot; (5+1+5) and &quot;good&quot; (3+2+2+5) with a score of 23.\nWords &quot;dad&quot; and &quot;dog&quot; only get a score of 21.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;xxxz&quot;,&quot;ax&quot;,&quot;bx&quot;,&quot;cx&quot;], letters = [&quot;z&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;x&quot;,&quot;x&quot;,&quot;x&quot;], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]\n<strong>Output:</strong> 27\n<strong>Explanation:</strong>\nScore  a=4, b=4, c=4, x=5, z=10\nGiven letters, we can form the words &quot;ax&quot; (4+5), &quot;bx&quot; (4+5) and &quot;cx&quot; (4+5) with a score of 27.\nWord &quot;xxxz&quot; only get a score of 25.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;leetcode&quot;], letters = [&quot;l&quot;,&quot;e&quot;,&quot;t&quot;,&quot;c&quot;,&quot;o&quot;,&quot;d&quot;], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nLetter &quot;e&quot; can only be used once.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 14</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 15</code></li>\n\t<li><code>1 &lt;= letters.length &lt;= 100</code></li>\n\t<li><code>letters[i].length == 1</code></li>\n\t<li><code>score.length ==&nbsp;26</code></li>\n\t<li><code>0 &lt;= score[i] &lt;= 10</code></li>\n\t<li><code>words[i]</code>, <code>letters[i]</code>&nbsp;contains only lower case English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1193,
            "dislikes": 54,
            "similarQuestions": "[{\"title\": \"Maximum Good People Based on Statements\", \"titleSlug\": \"maximum-good-people-based-on-statements\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"35.3K\", \"totalSubmission\": \"48.7K\", \"totalAcceptedRaw\": 35272, \"totalSubmissionRaw\": 48666, \"acRate\": \"72.5%\"}",
            "hints": [
                "Note that words.length is small. This means you can iterate over every subset of words (2^N)."
            ],
            "rephrased": {
                "body": "Given a list of `words`, a list of single `letters` (which might be repeating), and a `score` array representing the score of each letter of the alphabet, find the maximum score of any valid set of words that can be formed using the given letters. Each word can be used at most once, and each letter can be used at most as many times as it appears in the `letters` array. It is not necessary to use all the letters.",
                "constraints": [
                    "1 <= words.length <= 14",
                    "1 <= words[i].length <= 15",
                    "1 <= letters.length <= 100",
                    "letters[i].length == 1",
                    "score.length == 26",
                    "0 <= score[i] <= 10",
                    "words[i], letters[i] contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]",
                        "output": "23",
                        "explanation": "The score for 'a' is 1, 'c' is 9, 'd' is 5, 'g' is 3, and 'o' is 2.  Using the given letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) for a total score of 23.  Forming \"dad\" and \"dog\" only results in a score of 21."
                    },
                    {
                        "input": "words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]",
                        "output": "27",
                        "explanation": "The score for 'a' is 4, 'b' is 4, 'c' is 4, 'x' is 5, and 'z' is 10. We can form the words \"ax\" (4+5), \"bx\" (4+5), and \"cx\" (4+5) for a total score of 27.  Forming \"xxxz\" only results in a score of 25."
                    },
                    {
                        "input": "words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]",
                        "output": "0",
                        "explanation": "The letter \"e\" can only be used once, and the word \"leetcode\" requires two \"e\"s. Therefore, no words can be formed, resulting in a score of 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-good-people-based-on-statements",
                "title": "Maximum Good People Based on Statements",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Note that words.length is small. This means you can iterate over every subset of words (2^N)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxScoreWords(vector<string>& words, vector<char>& letters,\n                    vector<int>& score) {\n    vector<int> count(26);\n    for (const char c : letters)\n      ++count[c - 'a'];\n    return dfs(words, 0, count, score);\n  }\n\n private:\n  // Max score you can get from words[s:]\n  int dfs(const vector<string>& words, int s, vector<int>& count,\n          const vector<int>& score) {\n    int ans = 0;\n    for (int i = s; i < words.size(); ++i) {\n      const int earned = useWord(words, i, count, score);\n      if (earned > 0)\n        ans = max(ans, earned + dfs(words, i + 1, count, score));\n      unuseWord(words, i, count);\n    }\n    return ans;\n  }\n\n  int useWord(const vector<string>& words, int i, vector<int>& count,\n              const vector<int>& score) {\n    bool isValid = true;\n    int earned = 0;\n    for (const char c : words[i]) {\n      if (--count[c - 'a'] < 0)\n        isValid = false;\n      earned += score[c - 'a'];\n    }\n    return isValid ? earned : -1;\n  }\n\n  void unuseWord(const vector<string>& words, int i, vector<int>& count) {\n    for (const char c : words[i])\n      ++count[c - 'a'];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxScoreWords(String[] words, char[] letters, int[] score) {\n    int[] count = new int[26];\n    for (final char c : letters)\n      ++count[c - 'a'];\n    return dfs(words, 0, count, score);\n  }\n\n  // Max score you can get from words[s:]\n  private int dfs(String[] words, int s, int[] count, int[] score) {\n    int ans = 0;\n    for (int i = s; i < words.length; ++i) {\n      final int earned = useWord(words, i, count, score);\n      if (earned > 0)\n        ans = Math.max(ans, earned + dfs(words, i + 1, count, score));\n      unuseWord(words, i, count);\n    }\n    return ans;\n  }\n\n  int useWord(String[] words, int i, int[] count, int[] score) {\n    boolean isValid = true;\n    int earned = 0;\n    for (final char c : words[i].toCharArray()) {\n      if (--count[c - 'a'] < 0)\n        isValid = false;\n      earned += score[c - 'a'];\n    }\n    return isValid ? earned : -1;\n  }\n\n  void unuseWord(String[] words, int i, int[] count) {\n    for (final char c : words[i].toCharArray())\n      ++count[c - 'a'];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxScoreWords(self, words: List[str], letters: List[chr], score: List[int]) -> int:\n    count = collections.Counter(letters)\n\n    def useWord(i: int) -> int:\n      isValid = True\n      earned = 0\n      for c in words[i]:\n        count[c] -= 1\n        if count[c] < 0:\n          isValid = False\n        earned += score[ord(c) - ord('a')]\n      return earned if isValid else -1\n\n    def unuseWord(i: int) -> None:\n      for c in words[i]:\n        count[c] += 1\n\n    # Max score you can get from words[s:]\n    def dfs(s: int) -> int:\n      ans = 0\n      for i in range(s, len(words)):\n        earned = useWord(i)\n        if earned > 0:\n          ans = max(ans, earned + dfs(i + 1))\n        unuseWord(i)\n      return ans\n\n    return dfs(0)\n",
                "lang_text": "py"
            }
        }
    }
}