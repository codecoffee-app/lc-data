{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2382",
            "title": "Maximum Segment Sum After Removals",
            "titleSlug": "maximum-segment-sum-after-removals",
            "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums</code> and <code>removeQueries</code>, both of length <code>n</code>. For the <code>i<sup>th</sup></code> query, the element in <code>nums</code> at the index <code>removeQueries[i]</code> is removed, splitting <code>nums</code> into different segments.</p>\n\n<p>A <strong>segment</strong> is a contiguous sequence of <strong>positive</strong> integers in <code>nums</code>. A <strong>segment sum</strong> is the sum of every element in a segment.</p>\n\n<p>Return<em> an integer array </em><code>answer</code><em>, of length </em><code>n</code><em>, where </em><code>answer[i]</code><em> is the <strong>maximum</strong> segment sum after applying the </em><code>i<sup>th</sup></code> <em>removal.</em></p>\n\n<p><strong>Note:</strong> The same index will <strong>not</strong> be removed more than once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]\n<strong>Output:</strong> [14,7,2,2,0]\n<strong>Explanation:</strong> Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 0th element, nums becomes [0,2,5,6,1] and the maximum segment sum is 14 for segment [2,5,6,1].\nQuery 2: Remove the 3rd element, nums becomes [0,2,5,0,1] and the maximum segment sum is 7 for segment [2,5].\nQuery 3: Remove the 2nd element, nums becomes [0,2,0,0,1] and the maximum segment sum is 2 for segment [2]. \nQuery 4: Remove the 4th element, nums becomes [0,2,0,0,0] and the maximum segment sum is 2 for segment [2]. \nQuery 5: Remove the 1st element, nums becomes [0,0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [14,7,2,2,0].</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,11,1], removeQueries = [3,2,1,0]\n<strong>Output:</strong> [16,5,3,0]\n<strong>Explanation:</strong> Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 3rd element, nums becomes [3,2,11,0] and the maximum segment sum is 16 for segment [3,2,11].\nQuery 2: Remove the 2nd element, nums becomes [3,2,0,0] and the maximum segment sum is 5 for segment [3,2].\nQuery 3: Remove the 1st element, nums becomes [3,0,0,0] and the maximum segment sum is 3 for segment [3].\nQuery 4: Remove the 0th element, nums becomes [0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [16,5,3,0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length == removeQueries.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= removeQueries[i] &lt; n</code></li>\n\t<li>All the values of <code>removeQueries</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 434,
            "dislikes": 5,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.9K\", \"totalSubmission\": \"16.3K\", \"totalAcceptedRaw\": 7890, \"totalSubmissionRaw\": 16311, \"acRate\": \"48.4%\"}",
            "hints": [
                "Use a sorted data structure to collect removal points and store the segments.",
                "Use a heap or priority queue to store segment sums and their corresponding boundaries.",
                "Make sure to remove invalid segments from the heap."
            ],
            "rephrased": {
                "body": "Given two 0-indexed integer arrays `nums` and `removeQueries`, both of length `n`. For each query `i`, remove the element in `nums` at index `removeQueries[i]`.  This removal splits `nums` into contiguous segments of positive integers. Find the maximum segment sum after each removal.",
                "constraints": [
                    "n == nums.length == removeQueries.length",
                    "1 <= n <= 10^5",
                    "1 <= nums[i] <= 10^9",
                    "0 <= removeQueries[i] < n",
                    "All the values of removeQueries are unique."
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]",
                        "output": "[14,7,2,2,0]",
                        "explanation": "Initially, nums = [1, 2, 5, 6, 1].\nQuery 1: Remove index 0. nums becomes [0, 2, 5, 6, 1].  Maximum segment sum is 2+5+6+1 = 14.\nQuery 2: Remove index 3. nums becomes [0, 2, 5, 0, 1]. Maximum segment sum is 2+5 = 7.\nQuery 3: Remove index 2. nums becomes [0, 2, 0, 0, 1]. Maximum segment sum is 2.\nQuery 4: Remove index 4. nums becomes [0, 2, 0, 0, 0]. Maximum segment sum is 2.\nQuery 5: Remove index 1. nums becomes [0, 0, 0, 0, 0]. Maximum segment sum is 0."
                    },
                    {
                        "input": "nums = [3,2,11,1], removeQueries = [3,2,1,0]",
                        "output": "[16,5,3,0]",
                        "explanation": "Initially, nums = [3, 2, 11, 1].\nQuery 1: Remove index 3. nums becomes [3, 2, 11, 0]. Maximum segment sum is 3+2+11 = 16.\nQuery 2: Remove index 2. nums becomes [3, 2, 0, 0]. Maximum segment sum is 3+2 = 5.\nQuery 3: Remove index 1. nums becomes [3, 0, 0, 0]. Maximum segment sum is 3.\nQuery 4: Remove index 0. nums becomes [0, 0, 0, 0]. Maximum segment sum is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use a sorted data structure to collect removal points and store the segments.",
            "Use a heap or priority queue to store segment sums and their corresponding boundaries.",
            "Make sure to remove invalid segments from the heap."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<long long> maximumSegmentSum(vector<int>& nums,\n                                      vector<int>& removeQueries) {\n    const int n = nums.size();\n    long long maxSum = 0;\n    vector<long long> ans(n);\n    // For segment [l, r], record its sum in sum[l] and sum[r]\n    vector<long long> sum(n);\n    // For segment [l, r], record its count in count[l] and count[r]\n    vector<int> count(n);\n\n    for (int i = n - 1; i >= 0; --i) {\n      ans[i] = maxSum;\n      const int j = removeQueries[i];\n\n      // Calculate `segmentSum`\n      const long long leftSum = j > 0 ? sum[j - 1] : 0;\n      const long long rightSum = j + 1 < n ? sum[j + 1] : 0;\n      const long long segmentSum = nums[j] + leftSum + rightSum;\n\n      // Calculate `segmentCount`\n      const int leftCount = j > 0 ? count[j - 1] : 0;\n      const int rightCount = j + 1 < n ? count[j + 1] : 0;\n      const int segmentCount = 1 + leftCount + rightCount;\n\n      // Update sum and count of segment [l, r]\n      const int l = j - leftCount;\n      const int r = j + rightCount;\n      sum[l] = segmentSum;\n      sum[r] = segmentSum;\n      count[l] = segmentCount;\n      count[r] = segmentCount;\n      maxSum = max(maxSum, segmentSum);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long[] maximumSegmentSum(int[] nums, int[] removeQueries) {\n    final int n = nums.length;\n    long maxSum = 0;\n    long[] ans = new long[n];\n    // For segment [l, r], record its sum in sum[l] and sum[r]\n    long[] sum = new long[n];\n    // For segment [l, r], record its count in count[l] and count[r]\n    int[] count = new int[n];\n\n    for (int i = n - 1; i >= 0; --i) {\n      ans[i] = maxSum;\n      final int j = removeQueries[i];\n\n      // Calculate `segmentSum`\n      final long leftSum = j > 0 ? sum[j - 1] : 0;\n      final long rightSum = j + 1 < n ? sum[j + 1] : 0;\n      final long segmentSum = nums[j] + leftSum + rightSum;\n\n      // Calculate `segmentCount`\n      final int leftCount = j > 0 ? count[j - 1] : 0;\n      final int rightCount = j + 1 < n ? count[j + 1] : 0;\n      final int segmentCount = 1 + leftCount + rightCount;\n\n      // Update sum and count of segment [l, r]\n      final int l = j - leftCount;\n      final int r = j + rightCount;\n      sum[l] = segmentSum;\n      sum[r] = segmentSum;\n      count[l] = segmentCount;\n      count[r] = segmentCount;\n      maxSum = Math.max(maxSum, segmentSum);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumSegmentSum(self, nums: List[int], removeQueries: List[int]) -> List[int]:\n    n = len(nums)\n    maxSum = 0\n    ans = [0] * n\n    # For segment [l, r], record its sum in summ[l] and summ[r]\n    summ = [0] * n\n    # For segment [l, r], record its count in count[l] and count[r]\n    count = [0] * n\n\n    for i in reversed(range(n)):\n      ans[i] = maxSum\n      j = removeQueries[i]\n\n      # Calculate `segmentSum`\n      leftSum = summ[j - 1] if j > 0 else 0\n      rightSum = summ[j + 1] if j + 1 < n else 0\n      segmentSum = nums[j] + leftSum + rightSum\n\n      # Calculate `segmentCount`\n      leftCount = count[j - 1] if j > 0 else 0\n      rightCount = count[j + 1] if j + 1 < n else 0\n      segmentCount = 1 + leftCount + rightCount\n\n      # Update `summ` and `count`` of segment [l, r]\n      l = j - leftCount\n      r = j + rightCount\n      summ[l] = segmentSum\n      summ[r] = segmentSum\n      count[l] = segmentCount\n      count[r] = segmentCount\n      maxSum = max(maxSum, segmentSum)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}