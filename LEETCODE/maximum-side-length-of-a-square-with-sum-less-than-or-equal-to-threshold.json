{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1292",
            "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
            "titleSlug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
            "content": "<p>Given a <code>m x n</code> matrix <code>mat</code> and an integer <code>threshold</code>, return <em>the maximum side-length of a square with a sum less than or equal to </em><code>threshold</code><em> or return </em><code>0</code><em> if there is no such square</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/05/e1.png\" style=\"width: 335px; height: 186px;\" />\n<pre>\n<strong>Input:</strong> mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The maximum side length of square with sum less than 4 is 2 as shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>0 &lt;= mat[i][j] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= threshold &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1052,
            "dislikes": 87,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"32.2K\", \"totalSubmission\": \"60.3K\", \"totalAcceptedRaw\": 32176, \"totalSubmissionRaw\": 60274, \"acRate\": \"53.4%\"}",
            "hints": [
                "Store prefix sum of all grids in another 2D array.",
                "Try all possible solutions and if you cannot find one return -1.",
                "If x is a valid answer then any y < x is also valid answer. Use binary search to find answer."
            ],
            "rephrased": {
                "body": "Given a matrix `mat` of size `m x n` and an integer `threshold`, find the maximum side-length of a square submatrix whose sum is less than or equal to `threshold`. If no such square exists, return `0`.",
                "constraints": [
                    "m == mat.length",
                    "n == mat[i].length",
                    "1 <= m, n <= 300",
                    "0 <= mat[i][j] <= 10^4",
                    "0 <= threshold <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4",
                        "output": "2",
                        "explanation": "The largest square submatrix with a sum less than or equal to 4 has a side length of 2."
                    },
                    {
                        "input": "mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1",
                        "output": "0",
                        "explanation": "There is no square submatrix with a sum less than or equal to 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Store prefix sum of all grids in another 2D array.",
            "Try all possible solutions and if you cannot find one return -1.",
            "If x is a valid answer then any y < x is also valid answer. Use binary search to find answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxSideLength(vector<vector<int>>& mat, int threshold) {\n    const int m = mat.size();\n    const int n = mat[0].size();\n    int ans = 0;\n    vector<vector<int>> prefix(m + 1, vector<int>(n + 1));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        prefix[i + 1][j + 1] =\n            mat[i][j] + prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        for (int length = ans; length < min(m - i, n - j); ++length) {\n          if (squareSum(prefix, i, j, i + length, j + length) > threshold)\n            break;\n          ans = max(ans, length + 1);\n        }\n\n    return ans;\n  }\n\n private:\n  int squareSum(vector<vector<int>>& prefix, int r1, int c1, int r2, int c2) {\n    return prefix[r2 + 1][c2 + 1] - prefix[r1][c2 + 1] - prefix[r2 + 1][c1] +\n           prefix[r1][c1];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxSideLength(int[][] mat, int threshold) {\n    final int m = mat.length;\n    final int n = mat[0].length;\n    int ans = 0;\n    int[][] prefix = new int[m + 1][n + 1];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        prefix[i + 1][j + 1] = mat[i][j] + prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        for (int length = ans; length < Math.min(m - i, n - j); ++length) {\n          if (squareSum(prefix, i, j, i + length, j + length) > threshold)\n            break;\n          ans = Math.max(ans, length + 1);\n        }\n\n    return ans;\n  }\n\n  private int squareSum(int[][] prefix, int r1, int c1, int r2, int c2) {\n    return prefix[r2 + 1][c2 + 1] - prefix[r1][c2 + 1] - prefix[r2 + 1][c1] + prefix[r1][c1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n    m = len(mat)\n    n = len(mat[0])\n    ans = 0\n    prefix = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m):\n      for j in range(n):\n        prefix[i + 1][j + 1] = mat[i][j] + prefix[i][j + 1] + \\\n            prefix[i + 1][j] - prefix[i][j]\n\n    def squareSum(r1: int, c1: int, r2: int, c2: int) -> int:\n      return prefix[r2 + 1][c2 + 1] - prefix[r1][c2 + 1] - prefix[r2 + 1][c1] + prefix[r1][c1]\n\n    for i in range(m):\n      for j in range(n):\n        for length in range(ans, min(m - i, n - j)):\n          if squareSum(i, j, i + length, j + length) > threshold:\n            break\n          ans = max(ans, length + 1)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}