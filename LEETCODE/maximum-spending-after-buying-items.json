{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2931",
            "title": "Maximum Spending After Buying Items",
            "titleSlug": "maximum-spending-after-buying-items",
            "content": "<p>You are given a <strong>0-indexed</strong> <code>m * n</code> integer matrix <code>values</code>, representing the values of <code>m * n</code> different items in <code>m</code> different shops. Each shop has <code>n</code> items where the <code>j<sup>th</sup></code> item in the <code>i<sup>th</sup></code> shop has a value of <code>values[i][j]</code>. Additionally, the items in the <code>i<sup>th</sup></code> shop are sorted in non-increasing order of value. That is, <code>values[i][j] &gt;= values[i][j + 1]</code> for all <code>0 &lt;= j &lt; n - 1</code>.</p>\n\n<p>On each day, you would like to buy a single item from one of the shops. Specifically, On the <code>d<sup>th</sup></code> day you can:</p>\n\n<ul>\n\t<li>Pick any shop <code>i</code>.</li>\n\t<li>Buy the rightmost available item <code>j</code> for the price of <code>values[i][j] * d</code>. That is, find the greatest index <code>j</code> such that item <code>j</code> was never bought before, and buy it for the price of <code>values[i][j] * d</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that all items are pairwise different. For example, if you have bought item <code>0</code> from shop <code>1</code>, you can still buy item <code>0</code> from any other shop.</p>\n\n<p>Return <em>the <strong>maximum amount of money that can be spent</strong> on buying all </em> <code>m * n</code> <em>products</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> values = [[8,5,2],[6,4,1],[9,7,3]]\n<strong>Output:</strong> 285\n<strong>Explanation:</strong> On the first day, we buy product 2 from shop 1 for a price of values[1][2] * 1 = 1.\nOn the second day, we buy product 2 from shop 0 for a price of values[0][2] * 2 = 4.\nOn the third day, we buy product 2 from shop 2 for a price of values[2][2] * 3 = 9.\nOn the fourth day, we buy product 1 from shop 1 for a price of values[1][1] * 4 = 16.\nOn the fifth day, we buy product 1 from shop 0 for a price of values[0][1] * 5 = 25.\nOn the sixth day, we buy product 0 from shop 1 for a price of values[1][0] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 2 for a price of values[2][1] * 7 = 49.\nOn the eighth day, we buy product 0 from shop 0 for a price of values[0][0] * 8 = 64.\nOn the ninth day, we buy product 0 from shop 2 for a price of values[2][0] * 9 = 81.\nHence, our total spending is equal to 285.\nIt can be shown that 285 is the maximum amount of money that can be spent buying all m * n products. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> values = [[10,8,6,4,2],[9,7,5,3,2]]\n<strong>Output:</strong> 386\n<strong>Explanation:</strong> On the first day, we buy product 4 from shop 0 for a price of values[0][4] * 1 = 2.\nOn the second day, we buy product 4 from shop 1 for a price of values[1][4] * 2 = 4.\nOn the third day, we buy product 3 from shop 1 for a price of values[1][3] * 3 = 9.\nOn the fourth day, we buy product 3 from shop 0 for a price of values[0][3] * 4 = 16.\nOn the fifth day, we buy product 2 from shop 1 for a price of values[1][2] * 5 = 25.\nOn the sixth day, we buy product 2 from shop 0 for a price of values[0][2] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 1 for a price of values[1][1] * 7 = 49.\nOn the eighth day, we buy product 1 from shop 0 for a price of values[0][1] * 8 = 64\nOn the ninth day, we buy product 0 from shop 1 for a price of values[1][0] * 9 = 81.\nOn the tenth day, we buy product 0 from shop 0 for a price of values[0][0] * 10 = 100.\nHence, our total spending is equal to 386.\nIt can be shown that 386 is the maximum amount of money that can be spent buying all m * n products.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m == values.length &lt;= 10</code></li>\n\t<li><code>1 &lt;= n == values[i].length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= values[i][j] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>values[i]</code> are sorted in non-increasing order.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 86,
            "dislikes": 28,
            "similarQuestions": "[{\"title\": \"Maximum Points You Can Obtain from Cards\", \"titleSlug\": \"maximum-points-you-can-obtain-from-cards\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Score from Performing Multiplication Operations\", \"titleSlug\": \"maximum-score-from-performing-multiplication-operations\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"10K\", \"totalSubmission\": \"15.4K\", \"totalAcceptedRaw\": 10043, \"totalSubmissionRaw\": 15392, \"acRate\": \"65.2%\"}",
            "hints": [
                "Iterate on days <code>1</code> to <code>m * n</code>.",
                "On each day, buy the product that minimizes <code>values[i][values[i].length - 1]</code>, and pop it from <code>values[i]</code>."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed `m x n` integer matrix `values`. Each `values[i][j]` represents the value of an item in shop `i` at index `j`.  The items within each shop are sorted in non-increasing order. On each day, you buy one item. You can pick any shop `i` and buy the rightmost available item `j`. The cost of the item is `values[i][j] * d`, where `d` is the day number. Return the maximum total spending after buying all `m * n` items.",
                "constraints": [
                    "1 <= m <= 10 (where m is the number of rows in the values matrix)",
                    "1 <= n <= 10^4 (where n is the number of columns in the values matrix)",
                    "1 <= values[i][j] <= 10^6",
                    "values[i] are sorted in non-increasing order."
                ],
                "testcases": [
                    {
                        "input": "[[8,5,2],[6,4,1],[9,7,3]]",
                        "output": "285",
                        "explanation": "The optimal strategy is to buy items in the following order:\nDay 1: values[1][2] * 1 = 1\nDay 2: values[0][2] * 2 = 4\nDay 3: values[2][2] * 3 = 9\nDay 4: values[1][1] * 4 = 16\nDay 5: values[0][1] * 5 = 25\nDay 6: values[1][0] * 6 = 36\nDay 7: values[2][1] * 7 = 49\nDay 8: values[0][0] * 8 = 64\nDay 9: values[2][0] * 9 = 81\nTotal spending: 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 = 285"
                    },
                    {
                        "input": "[[10,8,6,4,2],[9,7,5,3,2]]",
                        "output": "386",
                        "explanation": "The optimal strategy is to buy items in the following order:\nDay 1: values[0][4] * 1 = 2\nDay 2: values[1][4] * 2 = 4\nDay 3: values[1][3] * 3 = 9\nDay 4: values[0][3] * 4 = 16\nDay 5: values[1][2] * 5 = 25\nDay 6: values[0][2] * 6 = 36\nDay 7: values[1][1] * 7 = 49\nDay 8: values[0][1] * 8 = 64\nDay 9: values[1][0] * 9 = 81\nDay 10: values[0][0] * 10 = 100\nTotal spending: 2 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 = 386"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-points-you-can-obtain-from-cards",
                "title": "Maximum Points You Can Obtain from Cards",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-score-from-performing-multiplication-operations",
                "title": "Maximum Score from Performing Multiplication Operations",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Iterate on days <code>1</code> to <code>m * n</code>.",
            "On each day, buy the product that minimizes <code>values[i][values[i].length - 1]</code>, and pop it from <code>values[i]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maxSpending(vector<vector<int>>& values) {\n    const int m = values.size();\n    const int n = values[0].size();\n    long long ans = 0;\n    long long d = 1;\n    vector<int> items;\n\n    for (const vector<int>& shop : values)\n      for (const int item : shop)\n        items.push_back(item);\n\n    ranges::sort(items);\n\n    for (const int item : items)\n      ans += item * d++;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maxSpending(int[][] values) {\n    int[] sorted = Arrays.stream(values)\n                       .flatMapToInt(Arrays::stream) //\n                       .sorted()                     //\n                       .toArray();                   //\n    return LongStream.range(0, sorted.length)\n        .map(i -> (i + 1) * sorted[(int) i]) //\n        .sum();                              //\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSpending(self, values: List[List[int]]) -> int:\n    items = sorted(item for shop in values for item in shop)\n    return sum(item * d for d, item in enumerate(items, 1))\n",
                "lang_text": "py"
            }
        }
    }
}