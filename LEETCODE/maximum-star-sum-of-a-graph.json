{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2497",
            "title": "Maximum Star Sum of a Graph",
            "titleSlug": "maximum-star-sum-of-a-graph",
            "content": "<p>There is an undirected graph consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. You are given a <strong>0-indexed</strong> integer array <code>vals</code> of length <code>n</code> where <code>vals[i]</code> denotes the value of the <code>i<sup>th</sup></code> node.</p>\n\n<p>You are also given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an <strong>undirected</strong> edge connecting nodes <code>a<sub>i</sub></code> and <code>b<sub>i.</sub></code></p>\n\n<p>A <strong>star graph</strong> is a subgraph of the given graph having a center node containing <code>0</code> or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges.</p>\n\n<p>The image below shows star graphs with <code>3</code> and <code>4</code> neighbors respectively, centered at the blue node.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/11/07/max-star-sum-descdrawio.png\" style=\"width: 400px; height: 179px;\" />\n<p>The <strong>star sum</strong> is the sum of the values of all the nodes present in the star graph.</p>\n\n<p>Given an integer <code>k</code>, return <em>the <strong>maximum star sum</strong> of a star graph containing <strong>at most</strong> </em><code>k</code><em> edges.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/11/07/max-star-sum-example1drawio.png\" style=\"width: 300px; height: 291px;\" />\n<pre>\n<strong>Input:</strong> vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> The above diagram represents the input graph.\nThe star graph with the maximum star sum is denoted by blue. It is centered at 3 and includes its neighbors 1 and 4.\nIt can be shown it is not possible to get a star graph with a sum greater than 16.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> vals = [-5], edges = [], k = 0\n<strong>Output:</strong> -5\n<strong>Explanation:</strong> There is only one possible star graph, which is node 0 itself.\nHence, we return -5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == vals.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= vals[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= min(n * (n - 1) / 2</code><code>, 10<sup>5</sup>)</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>0 &lt;= k &lt;= n - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 346,
            "dislikes": 41,
            "similarQuestions": "[{\"title\": \"Number Of Ways To Reconstruct A Tree\", \"titleSlug\": \"number-of-ways-to-reconstruct-a-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Center of Star Graph\", \"titleSlug\": \"find-center-of-star-graph\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.2K\", \"totalSubmission\": \"42K\", \"totalAcceptedRaw\": 16244, \"totalSubmissionRaw\": 42028, \"acRate\": \"38.7%\"}",
            "hints": [
                "A star graph doesn\u2019t necessarily include all of its neighbors.",
                "For each node, sort its neighbors in descending order and take k max valued neighbors."
            ],
            "rephrased": {
                "body": "Given an undirected graph with 'n' nodes (numbered 0 to n-1) and an integer array 'vals' representing node values, and a 2D integer array 'edges' representing undirected connections between nodes. A star graph is a subgraph with a center node and 0 or more neighbors. The star sum is the sum of the values of all nodes in the star graph. Find the maximum star sum of a star graph containing at most 'k' edges.",
                "constraints": [
                    "n == vals.length",
                    "1 <= n <= 10^5",
                    "-10^4 <= vals[i] <= 10^4",
                    "0 <= edges.length <= min(n * (n - 1) / 2, 10^5)",
                    "edges[i].length == 2",
                    "0 <= a_i, b_i <= n - 1",
                    "a_i != b_i",
                    "0 <= k <= n - 1"
                ],
                "testcases": [
                    {
                        "input": "vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2",
                        "output": "16",
                        "explanation": "The star graph with the maximum star sum is centered at node 3 and includes its neighbors 1 and 4. The sum is 3 + 2 + 10 = 16. No other star graph with at most 2 edges yields a higher sum."
                    },
                    {
                        "input": "vals = [-5], edges = [], k = 0",
                        "output": "-5",
                        "explanation": "There is only one possible star graph, which consists of node 0 itself, so the maximum star sum is -5."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-ways-to-reconstruct-a-tree",
                "title": "Number Of Ways To Reconstruct A Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-center-of-star-graph",
                "title": "Find Center of Star Graph",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "A star graph doesn\u2019t necessarily include all of its neighbors.",
            "For each node, sort its neighbors in descending order and take k max valued neighbors."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxStarSum(vector<int>& vals, vector<vector<int>>& edges, int k) {\n    const int n = vals.size();\n    int ans = INT_MIN;\n    vector<vector<pair<int, int>>> graph(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].emplace_back(v, vals[v]);\n      graph[v].emplace_back(u, vals[u]);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      priority_queue<int> maxHeap;\n      for (const auto& [_, val] : graph[i])\n        if (val > 0)\n          maxHeap.push(val);\n      int starSum = vals[i];\n      for (int j = 0; j < k && !maxHeap.empty(); ++j)\n        starSum += maxHeap.top(), maxHeap.pop();\n      ans = max(ans, starSum);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxStarSum(int[] vals, int[][] edges, int k) {\n    final int n = vals.length;\n    int ans = Integer.MIN_VALUE;\n    List<Pair<Integer, Integer>>[] graph = new List[n];\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].add(new Pair<>(v, vals[v]));\n      graph[v].add(new Pair<>(u, vals[u]));\n    }\n\n    for (int i = 0; i < n; ++i) {\n      Queue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n      for (Pair<Integer, Integer> pair : graph[i]) {\n        final int val = pair.getValue();\n        if (val > 0)\n          maxHeap.offer(val);\n      }\n      int starSum = vals[i];\n      for (int j = 0; j < k && !maxHeap.isEmpty(); ++j)\n        starSum += maxHeap.poll();\n      ans = Math.max(ans, starSum);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxStarSum(self, vals: List[int], edges: List[List[int]], k: int) -> int:\n    n = len(vals)\n    ans = -math.inf\n    graph = [[] for _ in range(n)]\n\n    for u, v in edges:\n      graph[u].append((v, vals[v]))\n      graph[v].append((u, vals[u]))\n\n    for i, starSum in enumerate(vals):\n      maxHeap = []\n      for _, val in graph[i]:\n        if val > 0:\n          heapq.heappush(maxHeap, -val)\n      j = 0\n      while j < k and maxHeap:\n        starSum -= heapq.heappop(maxHeap)\n        j += 1\n      ans = max(ans, starSum)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}