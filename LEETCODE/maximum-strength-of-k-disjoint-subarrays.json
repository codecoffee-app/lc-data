{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3077",
            "title": "Maximum Strength of K Disjoint Subarrays",
            "titleSlug": "maximum-strength-of-k-disjoint-subarrays",
            "content": "<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>, and a <strong>positive</strong> <strong>odd</strong> integer <code>k</code>.</p>\n\n<p>The strength of <code>x</code> subarrays is defined as <code>strength = sum[1] * x - sum[2] * (x - 1) + sum[3] * (x - 2) - sum[4] * (x - 3) + ... + sum[x] * 1</code> where <code>sum[i]</code> is the sum of the elements in the <code>i<sup>th</sup></code> subarray. Formally, strength is sum of <code>(-1)<sup>i+1</sup> * sum[i] * (x - i + 1)</code> over all <code>i</code>&#39;s such that <code>1 &lt;= i &lt;= x</code>.</p>\n\n<p>You need to select <code>k</code> <strong>disjoint <span data-keyword=\"subarray-nonempty\">subarrays</span></strong> from <code>nums</code>, such that their <strong>strength</strong> is <strong>maximum</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible <strong>strength</strong> that can be obtained</em>.</p>\n\n<p><strong>Note</strong> that the selected subarrays <strong>don&#39;t</strong> need to cover the entire array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,-1,2], k = 3\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> The best possible way to select 3 subarrays is: nums[0..2], nums[3..3], and nums[4..4]. The strength is (1 + 2 + 3) * 3 - (-1) * 2 + 2 * 1 = 22.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [12,-2,-2,-2,-2], k = 5\n<strong>Output:</strong> 64\n<strong>Explanation:</strong> The only possible way to select 5 disjoint subarrays is: nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength is 12 * 5 - (-2) * 4 + (-2) * 3 - (-2) * 2 + (-2) * 1 = 64.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-2,-3], k = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The best possible way to select 1 subarray is: nums[0..0]. The strength is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n\t<li><code>1 &lt;= n * k &lt;= 10<sup>6</sup></code></li>\n\t<li><code>k</code> is odd.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 121,
            "dislikes": 74,
            "similarQuestions": "[{\"title\": \"Partition Array into Disjoint Intervals\", \"titleSlug\": \"partition-array-into-disjoint-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Strength of a Group\", \"titleSlug\": \"maximum-strength-of-a-group\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.8K\", \"totalSubmission\": \"21K\", \"totalAcceptedRaw\": 5822, \"totalSubmissionRaw\": 20996, \"acRate\": \"27.7%\"}",
            "hints": [
                "Let <code>dp[i][j][x == 0/1]</code> be the maximum strength to select <code>j</code> disjoint subarrays from the original array\u2019s suffix (<code>nums[i..(n - 1)]</code>), x denotes whether we select the element or not.",
                "Initially <code>dp[n][0][0] == 0</code>.",
                "We have \r\n<code>dp[i][j][1] = nums[i] * get(j) + max(dp[i + 1][j - 1][0], dp[i + 1][j][1])</code> where <code>get(j) = j</code> if <code>j</code> is odd, otherwise <code>-j</code>.",
                "We can select <code>nums[i]</code> as a separate subarray or select at least <code>nums[i]</code> and <code>nums[i + 1]</code> as the first subarray.\r\n<code>dp[i][j][0] = max(dp[i + 1][j][0], dp[i][j][1])</code>.",
                "The answer is <code>dp[0][k][0]</code>."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` of integers with length `n` and a positive odd integer `k`, the strength of `x` subarrays is defined as: `strength = sum[1] * x - sum[2] * (x - 1) + sum[3] * (x - 2) - sum[4] * (x - 3) + ... + sum[x] * 1`, where `sum[i]` is the sum of elements in the i-th subarray.  You need to select `k` disjoint subarrays from `nums` such that their total strength is maximized. Return the maximum possible strength.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "-10^9 <= nums[i] <= 10^9",
                    "1 <= k <= n",
                    "1 <= n * k <= 10^6",
                    "k is odd"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3,-1,2], k = 3",
                        "output": "22",
                        "explanation": "The maximum strength is achieved by selecting subarrays nums[0..2], nums[3..3], and nums[4..4].  The strength calculation is (1+2+3) * 3 - (-1) * 2 + 2 * 1 = 22."
                    },
                    {
                        "input": "nums = [12,-2,-2,-2,-2], k = 5",
                        "output": "64",
                        "explanation": "The only way to select 5 disjoint subarrays is nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength calculation is 12 * 5 - (-2) * 4 + (-2) * 3 - (-2) * 2 + (-2) * 1 = 64."
                    },
                    {
                        "input": "nums = [-1,-2,-3], k = 1",
                        "output": "-1",
                        "explanation": "The best subarray to select is nums[0..0], resulting in a strength of -1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "partition-array-into-disjoint-intervals",
                "title": "Partition Array into Disjoint Intervals",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-strength-of-a-group",
                "title": "Maximum Strength of a Group",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>dp[i][j][x == 0/1]</code> be the maximum strength to select <code>j</code> disjoint subarrays from the original array\u2019s suffix (<code>nums[i..(n - 1)]</code>), x denotes whether we select the element or not.",
            "Initially <code>dp[n][0][0] == 0</code>.",
            "We have \r\n<code>dp[i][j][1] = nums[i] * get(j) + max(dp[i + 1][j - 1][0], dp[i + 1][j][1])</code> where <code>get(j) = j</code> if <code>j</code> is odd, otherwise <code>-j</code>.",
            "We can select <code>nums[i]</code> as a separate subarray or select at least <code>nums[i]</code> and <code>nums[i + 1]</code> as the first subarray.\r\n<code>dp[i][j][0] = max(dp[i + 1][j][0], dp[i][j][1])</code>.",
            "The answer is <code>dp[0][k][0]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maximumStrength(vector<int>& nums, int k) {\n    vector<vector<vector<long long>>> mem(\n        nums.size(),\n        vector<vector<long long>>(k + 1, vector<long long>(2, -1)));\n    return maximumStrength(nums, 0, k, /*fresh=*/true, mem);\n  }\n\n private:\n  static constexpr long long kMin = LLONG_MIN / 2;\n\n  // Returns the maximum strength of nums[i..n) with k operations left, where\n  // `fresh` means we're starting a new subarray.\n  long long maximumStrength(const vector<int>& nums, int i, int k, bool fresh,\n                            vector<vector<vector<long long>>>& mem) {\n    if (nums.size() - i < k)\n      return kMin;\n    if (k == 0)\n      return 0;\n    if (i == nums.size())\n      return k == 0 ? 0 : kMin;\n    if (mem[i][k][fresh] != -1)\n      return mem[i][k][fresh];\n    // If it's not fresh, we can't skip the current number and consider it as a\n    // fresh start, since the case where it's fresh is already covered by\n    // `includeAndFreshStart`.\n    const long long skip =\n        fresh ? maximumStrength(nums, i + 1, k, true, mem) : kMin;\n    const long long gain = (k % 2 == 1 ? 1 : -1) * 1LL * nums[i] * k;\n    const long long includeAndContinue =\n        maximumStrength(nums, i + 1, k, false, mem) + gain;\n    const long long includeAndFreshStart =\n        maximumStrength(nums, i + 1, k - 1, true, mem) + gain;\n    return mem[i][k][fresh] =\n               max(skip, max(includeAndContinue, includeAndFreshStart));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maximumStrength(int[] nums, int k) {\n    Long[][][] mem = new Long[nums.length][k + 1][2];\n    return maximumStrength(nums, 0, k, /*fresh=*/true, mem);\n  }\n\n  private static final long kMin = Long.MIN_VALUE / 2;\n\n  // Returns the maximum strength of nums[i..n) with k operations left, where\n  // `fresh` means we're starting a new subarray.\n  private long maximumStrength(int[] nums, int i, int k, boolean fresh, Long[][][] mem) {\n    if (nums.length - i < k)\n      return kMin;\n    if (k == 0)\n      return 0;\n    if (i == nums.length)\n      return k == 0 ? 0 : kMin;\n    if (mem[i][k][fresh ? 1 : 0] != null)\n      return mem[i][k][fresh ? 1 : 0];\n    // If it's not fresh, we can't skip the current number and consider it as a\n    // fresh start, since the case where it's fresh is already covered by\n    // `includeAndFreshStart`.\n    final long skip = fresh ? maximumStrength(nums, i + 1, k, true, mem) : kMin;\n    final long gain = (k % 2 == 1 ? 1 : -1) * 1L * nums[i] * k;\n    final long includeAndContinue = maximumStrength(nums, i + 1, k, false, mem) + gain;\n    final long includeAndFreshStart = maximumStrength(nums, i + 1, k - 1, true, mem) + gain;\n    return mem[i][k][fresh ? 1 : 0] =\n               Math.max(skip, Math.max(includeAndContinue, includeAndFreshStart));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumStrength(self, nums: List[int], k: int) -> int:\n\n    @functools.lru_cache(None)\n    def dp(i: int, k: int, fresh: bool) -> int:\n      \"\"\"\n      Returns the maximum strength of nums[i..n) with k operations left, where\n      `fresh` means we're starting a new subarray.\n      \"\"\"\n      if len(nums) - i < k:\n        return -math.inf\n      if k == 0:\n        return 0\n      if i == len(nums):\n        return 0 if k == 0 else -math.inf\n      # If it's not fresh, we can't skip the current number and consider it as a\n      # fresh start, since the case where it's fresh is already covered by\n      # `includeAndFreshStart`.\n      skip = dp(i + 1, k, True) if fresh else -math.inf\n      gain = (1 if k % 2 == 1 else -1) * nums[i] * k\n      includeAndContinue = dp(i + 1, k, False) + gain\n      includeAndFreshStart = dp(i + 1, k - 1, True) + gain\n      return max(skip, includeAndContinue, includeAndFreshStart)\n\n    return dp(0, k, True)\n",
                "lang_text": "py"
            }
        }
    }
}