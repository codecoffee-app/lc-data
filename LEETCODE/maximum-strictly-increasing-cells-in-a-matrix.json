{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2713",
            "title": "Maximum Strictly Increasing Cells in a Matrix",
            "titleSlug": "maximum-strictly-increasing-cells-in-a-matrix",
            "content": "<p>Given a <strong>1-indexed</strong>&nbsp;<code>m x n</code> integer matrix <code>mat</code>, you can select any cell in the matrix as your <strong>starting cell</strong>.</p>\n\n<p>From the starting cell, you can move to any other cell <strong>in the</strong> <strong>same row or column</strong>, but only if the value of the destination cell is <strong>strictly greater</strong> than the value of the current cell. You can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves.</p>\n\n<p>Your task is to find the <strong>maximum number of cells</strong> that you can visit in the matrix by starting from some cell.</p>\n\n<p>Return <em>an integer denoting the maximum number of cells that can be visited.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/23/diag1drawio.png\" style=\"width: 200px; height: 176px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[3,1],[3,4]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The image shows how we can visit 2 cells starting from row 1, column 2. It can be shown that we cannot visit more than 2 cells no matter where we start from, so the answer is 2. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/23/diag3drawio.png\" style=\"width: 200px; height: 176px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[1,1],[1,1]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Since the cells must be strictly increasing, we can only visit one cell in this example. \n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/23/diag4drawio.png\" style=\"width: 350px; height: 250px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[3,1,6],[-9,5,7]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The image above shows how we can visit 4 cells starting from row 2, column 1. It can be shown that we cannot visit more than 4 cells no matter where we start from, so the answer is 4. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length&nbsp;</code></li>\n\t<li><code>n == mat[i].length&nbsp;</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup>&nbsp;&lt;= mat[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 511,
            "dislikes": 18,
            "similarQuestions": "[{\"title\": \"Number of Increasing Paths in a Grid\", \"titleSlug\": \"number-of-increasing-paths-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.1K\", \"totalSubmission\": \"34.6K\", \"totalAcceptedRaw\": 10137, \"totalSubmissionRaw\": 34581, \"acRate\": \"29.3%\"}",
            "hints": [
                "We can try to build the answer in a bottom-up fashion, starting from the smallest values and increasing to the larger values.",
                "Going through the values in sorted order, we can store the maximum path we have seen so far for a row/column.",
                "When we are at a cell, we check its row and column to find out the best previous smaller value that we\u2019ve got so far, and we use it to increment the current value of the row and column."
            ],
            "rephrased": {
                "body": "Given a 1-indexed m x n integer matrix `mat`, the goal is to find the maximum number of cells that can be visited by starting from any cell in the matrix. From a starting cell, you can move to any other cell in the same row or column, but only if the value of the destination cell is strictly greater than the value of the current cell. This process can be repeated until no further moves are possible.",
                "constraints": [
                    "m == mat.length",
                    "n == mat[i].length",
                    "1 <= m, n <= 10^5",
                    "1 <= m * n <= 10^5",
                    "-10^5 <= mat[i][j] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[[3,1],[3,4]]",
                        "output": "2",
                        "explanation": "Starting from cell (1, 2) with value 4, we can move to cell (2,2) with value 4. No other moves are possible, leading to a maximum of 2 visited cells."
                    },
                    {
                        "input": "[[1,1],[1,1]]",
                        "output": "1",
                        "explanation": "Since the cells must be strictly increasing, it's only possible to visit one cell."
                    },
                    {
                        "input": "[[3,1,6],[-9,5,7]]",
                        "output": "4",
                        "explanation": "Starting from cell (2, 1) with value -9, we can move to (2,2) then (2,3). Alternatively, starting from cell (1,2) we can go to (1,3) then (2,3)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-increasing-paths-in-a-grid",
                "title": "Number of Increasing Paths in a Grid",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can try to build the answer in a bottom-up fashion, starting from the smallest values and increasing to the larger values.",
            "Going through the values in sorted order, we can store the maximum path we have seen so far for a row/column.",
            "When we are at a cell, we check its row and column to find out the best previous smaller value that we\u2019ve got so far, and we use it to increment the current value of the row and column."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxIncreasingCells(vector<vector<int>>& mat) {\n    const int m = mat.size();\n    const int n = mat[0].size();\n    vector<int> rows(m);  // rows[i] := max path length for i-th row\n    vector<int> cols(n);  // cols[j] := max path length for j-th col\n    unordered_map<int, vector<pair<int, int>>> valToIndices;\n    // maxPathLength[i][j] := max path length from mat[i][j]\n    vector<vector<int>> maxPathLength(m, vector<int>(n));\n    // all unique values in the matrix in non-increasing order\n    set<int, greater<>> decreasingSet;\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        valToIndices[mat[i][j]].emplace_back(i, j);\n        decreasingSet.insert(mat[i][j]);\n      }\n\n    for (const int val : decreasingSet) {\n      for (const auto& [i, j] : valToIndices[val])\n        maxPathLength[i][j] = max(rows[i], cols[j]) + 1;\n      for (const auto& [i, j] : valToIndices[val]) {\n        rows[i] = max(rows[i], maxPathLength[i][j]);\n        cols[j] = max(cols[j], maxPathLength[i][j]);\n      }\n    }\n\n    return max(*max_element(rows.begin(), rows.end()),\n               *max_element(cols.begin(), cols.end()));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxIncreasingCells(int[][] mat) {\n    final int m = mat.length;\n    final int n = mat[0].length;\n    int[] rows = new int[m]; // rows[i] := max path length for i-th row\n    int[] cols = new int[n]; // cols[j] := max path length for j-th col\n    Map<Integer, ArrayList<Pair<Integer, Integer>>> valToIndices = new HashMap<>();\n    // maxPathLength[i][j] := max path length from mat[i][j]\n    int[][] maxPathLength = new int[m][n];\n    // all unique values in the matrix in non-increasing order\n    TreeSet<Integer> decreasingSet = new TreeSet<>(Comparator.reverseOrder());\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        final int val = mat[i][j];\n        valToIndices.putIfAbsent(val, new ArrayList<>());\n        valToIndices.get(val).add(new Pair<>(i, j));\n        decreasingSet.add(val);\n      }\n\n    for (final int val : decreasingSet) {\n      for (Pair<Integer, Integer> pair : valToIndices.get(val)) {\n        final int i = pair.getKey();\n        final int j = pair.getValue();\n        maxPathLength[i][j] = Math.max(rows[i], cols[j]) + 1;\n      }\n      for (Pair<Integer, Integer> pair : valToIndices.get(val)) {\n        final int i = pair.getKey();\n        final int j = pair.getValue();\n        rows[i] = Math.max(rows[i], maxPathLength[i][j]);\n        cols[j] = Math.max(cols[j], maxPathLength[i][j]);\n      }\n    }\n\n    return Math.max(Arrays.stream(rows).max().getAsInt(), //\n                    Arrays.stream(cols).max().getAsInt());\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxIncreasingCells(self, mat: List[List[int]]) -> int:\n    m = len(mat)\n    n = len(mat[0])\n    rows = [0] * m  # rows[i] := max path length for i-th row\n    cols = [0] * n  # cols[j] := max path length for j-th col\n    valToIndices = collections.defaultdict(list)\n    # maxPathLength[i][j] := max path length from mat[i][j]\n    maxPathLength = [[0] * n for _ in range(m)]\n    # all unique values in the matrix in non-increasing order\n    decreasingSet = set()\n\n    for i in range(m):\n      for j in range(n):\n        val = mat[i][j]\n        valToIndices[val].append((i, j))\n        decreasingSet.add(val)\n\n    for val in sorted(decreasingSet, reverse=True):\n      for i, j in valToIndices[val]:\n        maxPathLength[i][j] = max(rows[i], cols[j]) + 1\n      for i, j in valToIndices[val]:\n        rows[i] = max(rows[i], maxPathLength[i][j])\n        cols[j] = max(cols[j], maxPathLength[i][j])\n\n    return max(max(rows), max(cols))\n",
                "lang_text": "py"
            }
        }
    }
}