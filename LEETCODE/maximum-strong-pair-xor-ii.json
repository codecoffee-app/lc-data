{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2935",
            "title": "Maximum Strong Pair XOR II",
            "titleSlug": "maximum-strong-pair-xor-ii",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. A pair of integers <code>x</code> and <code>y</code> is called a <strong>strong</strong> pair if it satisfies the condition:</p>\n\n<ul>\n\t<li><code>|x - y| &lt;= min(x, y)</code></li>\n</ul>\n\n<p>You need to select two integers from <code>nums</code> such that they form a strong pair and their bitwise <code>XOR</code> is the <strong>maximum</strong> among all strong pairs in the array.</p>\n\n<p>Return <em>the <strong>maximum</strong> </em><code>XOR</code><em> value out of all possible strong pairs in the array</em> <code>nums</code>.</p>\n\n<p><strong>Note</strong> that you can pick the same integer twice to form a pair.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> There are 11 strong pairs in the array <code>nums</code>: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,100]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [500,520,2500,3000]\n<strong>Output:</strong> 1020\n<strong>Explanation:</strong> There are 6 strong pairs in the array nums: (500, 500), (500, 520), (520, 520), (2500, 2500), (2500, 3000) and (3000, 3000).\nThe maximum XOR possible from these pairs is 500 XOR 520 = 1020 since the only other non-zero XOR value is 2500 XOR 3000 = 636.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 2<sup>20</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 164,
            "dislikes": 1,
            "similarQuestions": "[{\"title\": \"Maximum XOR of Two Numbers in an Array\", \"titleSlug\": \"maximum-xor-of-two-numbers-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum XOR With an Element From Array\", \"titleSlug\": \"maximum-xor-with-an-element-from-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.9K\", \"totalSubmission\": \"19.6K\", \"totalAcceptedRaw\": 5890, \"totalSubmissionRaw\": 19578, \"acRate\": \"30.1%\"}",
            "hints": [
                "Sort the array, now let <code>x <= y</code> which means <code>|x - y| <= min(x, y)</code> can now be written as <code>y - x <= x</code> or in other words, <code>y <= 2 * x</code>.",
                "If <code>x</code> and <code>y</code> have the same number of bits, try making<code>y</code>\u2019s bits different from x if possible for each bit starting from the second most significant bit.",
                "If <code>y</code> has 1 more bit than <code>x</code> and <code>y <= 2 * x</code> use the idea about Digit DP to make <code>y</code>\u2019s prefix smaller than <code>2 * x + 1</code> as well as trying to make each bit different from <code>x</code> using a Hashmap.",
                "Alternatively, use Trie data structure to find the pair with maximum <code>XOR</code>."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums`, find the maximum XOR value among all strong pairs within the array. A pair of integers `x` and `y` is considered a strong pair if the absolute difference between them is less than or equal to the minimum of the two numbers, i.e., `|x - y| <= min(x, y)`.  Return the maximum XOR value obtainable from any strong pair in `nums`.  Note that you can pick the same integer twice to form a pair.",
                "constraints": [
                    "1 <= nums.length <= 5 * 10^4",
                    "1 <= nums[i] <= 2^20 - 1"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4,5]",
                        "output": "7",
                        "explanation": "The strong pairs are (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5), and (5, 5). The maximum XOR value is achieved by 3 XOR 4, which equals 7."
                    },
                    {
                        "input": "[10,100]",
                        "output": "0",
                        "explanation": "The strong pairs are (10, 10) and (100, 100). The maximum XOR value is achieved by 10 XOR 10 or 100 XOR 100, both of which equal 0."
                    },
                    {
                        "input": "[500,520,2500,3000]",
                        "output": "1020",
                        "explanation": "The strong pairs are (500, 500), (500, 520), (520, 520), (2500, 2500), (2500, 3000) and (3000, 3000). The maximum XOR value is achieved by 500 XOR 520, which equals 1020. The only other non-zero XOR value comes from 2500 XOR 3000 = 636, which is less than 1020."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-xor-of-two-numbers-in-an-array",
                "title": "Maximum XOR of Two Numbers in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-xor-with-an-element-from-array",
                "title": "Maximum XOR With an Element From Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort the array, now let <code>x <= y</code> which means <code>|x - y| <= min(x, y)</code> can now be written as <code>y - x <= x</code> or in other words, <code>y <= 2 * x</code>.",
            "If <code>x</code> and <code>y</code> have the same number of bits, try making<code>y</code>\u2019s bits different from x if possible for each bit starting from the second most significant bit.",
            "If <code>y</code> has 1 more bit than <code>x</code> and <code>y <= 2 * x</code> use the idea about Digit DP to make <code>y</code>\u2019s prefix smaller than <code>2 * x + 1</code> as well as trying to make each bit different from <code>x</code> using a Hashmap.",
            "Alternatively, use Trie data structure to find the pair with maximum <code>XOR</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  TrieNode() : children(2) {}\n  int min = INT_MAX;\n  int max = INT_MIN;\n};\n\nclass BitTrie {\n public:\n  BitTrie(int maxBit) : maxBit(maxBit) {}\n\n  void insert(int num) {\n    shared_ptr<TrieNode> node = root;\n    for (int i = maxBit; i >= 0; --i) {\n      const int bit = num >> i & 1;\n      if (node->children[bit] == nullptr)\n        node->children[bit] = make_shared<TrieNode>();\n      node = node->children[bit];\n      node->min = min(node->min, num);\n      node->max = max(node->max, num);\n    }\n  }\n\n  // Returns max(x ^ y), where |x - y| <= min(x, y).\n  //\n  // If x <= y, |x - y| <= min(x, y) can be written as y - x <= x.\n  // So, y <= 2 * x.\n  int getMaxXor(int x) {\n    int maxXor = 0;\n    shared_ptr<TrieNode> node = root;\n    for (int i = maxBit; i >= 0; --i) {\n      const int bit = x >> i & 1;\n      const int toggleBit = bit ^ 1;\n      // If `node.children[toggleBit].max > x`, it means there's a number in the\n      // node that satisfies the condition to ensure that x <= y among x and y.\n      // If `node.children[toggleBit].min <= 2 * x`, it means there's a number\n      // in the node that satisfies the condition for a valid y.\n      if (node->children[toggleBit] != nullptr &&\n          node->children[toggleBit]->max > x &&\n          node->children[toggleBit]->min <= 2 * x) {\n        maxXor = maxXor | 1 << i;\n        node = node->children[toggleBit];\n      } else if (node->children[bit] != nullptr) {\n        node = node->children[bit];\n      } else {  // There's nothing in the Bit Trie.\n        return 0;\n      }\n    }\n    return maxXor;\n  }\n\n private:\n  const int maxBit;\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n};\n\nclass Solution {\n public:\n  // Same as 2932. Maximum Strong Pair XOR I\n  int maximumStrongPairXor(vector<int>& nums) {\n    const int maxNum = ranges::max(nums);\n    const int maxBit = static_cast<int>(log2(maxNum));\n    int ans = 0;\n    BitTrie bitTrie(maxBit);\n\n    for (const int num : nums)\n      bitTrie.insert(num);\n\n    for (const int num : nums)\n      ans = max(ans, bitTrie.getMaxXor(num));\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[2];\n  public int min = Integer.MAX_VALUE;\n  public int max = Integer.MIN_VALUE;\n}\n\nclass BitTrie {\n  public BitTrie(int maxBit) {\n    this.maxBit = maxBit;\n  }\n\n  public void insert(int num) {\n    TrieNode node = root;\n    for (int i = maxBit; i >= 0; --i) {\n      final int bit = (int) (num >> i & 1);\n      if (node.children[bit] == null)\n        node.children[bit] = new TrieNode();\n      node = node.children[bit];\n      node.min = Math.min(node.min, num);\n      node.max = Math.max(node.max, num);\n    }\n  }\n\n  // Returns max(x ^ y), where |x - y| <= min(x, y).\n  //\n  // If x <= y, |x - y| <= min(x, y) can be written as y - x <= x.\n  // So, y <= 2 * x.\n  public int getMaxXor(int x) {\n    int maxXor = 0;\n    TrieNode node = root;\n    for (int i = maxBit; i >= 0; --i) {\n      final int bit = (int) (x >> i & 1);\n      final int toggleBit = bit ^ 1;\n      // If `node.children[toggleBit].max > x`, it means there's a number in the\n      // node that satisfies the condition to ensure that x <= y among x and y.\n      // If `node.children[toggleBit].min <= 2 * x`, it means there's a number\n      // in the node that satisfies the condition for a valid y.\n      if (node.children[toggleBit] != null && node.children[toggleBit].max > x &&\n          node.children[toggleBit].min <= 2 * x) {\n        maxXor = maxXor | 1 << i;\n        node = node.children[toggleBit];\n      } else if (node.children[bit] != null) {\n        node = node.children[bit];\n      } else { // There's nothing in the Bit Trie.\n        return 0;\n      }\n    }\n    return maxXor;\n  }\n\n  private int maxBit;\n  private TrieNode root = new TrieNode();\n}\n\nclass Solution {\n  // Same as 2932. Maximum Strong Pair XOR I\n  public int maximumStrongPairXor(int[] nums) {\n    final int maxNum = Arrays.stream(nums).max().getAsInt();\n    final int maxBit = (int) (Math.log(maxNum) / Math.log(2));\n    int ans = 0;\n    BitTrie bitTrie = new BitTrie(maxBit);\n\n    for (final int num : nums)\n      bitTrie.insert(num);\n\n    for (final int num : nums)\n      ans = Math.max(ans, bitTrie.getMaxXor(num));\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children: List[Optional[TrieNode]] = [None] * 2\n    self.min = math.inf\n    self.max = -math.inf\n\n\nclass BitTrie:\n  def __init__(self, maxBit: int):\n    self.maxBit = maxBit\n    self.root = TrieNode()\n\n  def insert(self, num: int) -> None:\n    node = self.root\n    for i in range(self.maxBit, -1, -1):\n      bit = num >> i & 1\n      if not node.children[bit]:\n        node.children[bit] = TrieNode()\n      node = node.children[bit]\n      node.min = min(node.min, num)\n      node.max = max(node.max, num)\n\n  def getMaxXor(self, x: int) -> int:\n    \"\"\"Returns max(x ^ y) where |x - y| <= min(x, y).\n\n    If x <= y, |x - y| <= min(x, y) can be written as y - x <= x.\n    So, y <= 2 * x.\n    \"\"\"\n    maxXor = 0\n    node = self.root\n    for i in range(self.maxBit, -1, -1):\n      bit = x >> i & 1\n      toggleBit = bit ^ 1\n      # If `node.children[toggleBit].max > x`, it means there's a number in the\n      # node that satisfies the condition to ensure that x <= y among x and y.\n      # If `node.children[toggleBit].min <= 2 * x`, it means there's a number in\n      # the node that satisfies the condition for a valid y.\n      if node.children[toggleBit] \\\n              and node.children[toggleBit].max > x \\\n              and node.children[toggleBit].min <= 2 * x:\n        maxXor = maxXor | 1 << i\n        node = node.children[toggleBit]\n      elif node.children[bit]:\n        node = node.children[bit]\n      else:  # There's nothing in the Bit Trie.\n        return 0\n    return maxXor\n\n\nclass Solution:\n  # Same as 2932. Maximum Strong Pair XOR I\n  def maximumStrongPairXor(self, nums: List[int]) -> int:\n    maxNum = max(nums)\n    maxBit = int(math.log2(maxNum))\n    bitTrie = BitTrie(maxBit)\n\n    for num in nums:\n      bitTrie.insert(num)\n\n    return max(bitTrie.getMaxXor(num) for num in nums)\n",
                "lang_text": "py"
            }
        }
    }
}