{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1349",
            "title": "Maximum Students Taking Exam",
            "titleSlug": "maximum-students-taking-exam",
            "content": "<p>Given a <code>m&nbsp;* n</code>&nbsp;matrix <code>seats</code>&nbsp;&nbsp;that represent seats distributions&nbsp;in a classroom.&nbsp;If a seat&nbsp;is&nbsp;broken, it is denoted by <code>&#39;#&#39;</code> character otherwise it is denoted by a <code>&#39;.&#39;</code> character.</p>\n\n<p>Students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting&nbsp;directly in front or behind him. Return the <strong>maximum </strong>number of students that can take the exam together&nbsp;without any cheating being possible.</p>\n\n<p>Students must be placed in seats in good condition.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img height=\"200\" src=\"https://assets.leetcode.com/uploads/2020/01/29/image.png\" width=\"339\" />\n<pre>\n<strong>Input:</strong> seats = [[&quot;#&quot;,&quot;.&quot;,&quot;#&quot;,&quot;#&quot;,&quot;.&quot;,&quot;#&quot;],\n&nbsp;               [&quot;.&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;.&quot;],\n&nbsp;               [&quot;#&quot;,&quot;.&quot;,&quot;#&quot;,&quot;#&quot;,&quot;.&quot;,&quot;#&quot;]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Teacher can place 4 students in available seats so they don&#39;t cheat on the exam. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> seats = [[&quot;.&quot;,&quot;#&quot;],\n&nbsp;               [&quot;#&quot;,&quot;#&quot;],\n&nbsp;               [&quot;#&quot;,&quot;.&quot;],\n&nbsp;               [&quot;#&quot;,&quot;#&quot;],\n&nbsp;               [&quot;.&quot;,&quot;#&quot;]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Place all students in available seats. \n\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> seats = [[&quot;#&quot;,&quot;.&quot;,&quot;<strong>.</strong>&quot;,&quot;.&quot;,&quot;#&quot;],\n&nbsp;               [&quot;<strong>.</strong>&quot;,&quot;#&quot;,&quot;<strong>.</strong>&quot;,&quot;#&quot;,&quot;<strong>.</strong>&quot;],\n&nbsp;               [&quot;<strong>.</strong>&quot;,&quot;.&quot;,&quot;#&quot;,&quot;.&quot;,&quot;<strong>.</strong>&quot;],\n&nbsp;               [&quot;<strong>.</strong>&quot;,&quot;#&quot;,&quot;<strong>.</strong>&quot;,&quot;#&quot;,&quot;<strong>.</strong>&quot;],\n&nbsp;               [&quot;#&quot;,&quot;.&quot;,&quot;<strong>.</strong>&quot;,&quot;.&quot;,&quot;#&quot;]]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Place students in available seats in column 1, 3 and 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>seats</code>&nbsp;contains only characters&nbsp;<code>&#39;.&#39;<font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">&nbsp;and</font></code><code>&#39;#&#39;.</code></li>\n\t<li><code>m ==&nbsp;seats.length</code></li>\n\t<li><code>n ==&nbsp;seats[i].length</code></li>\n\t<li><code>1 &lt;= m &lt;= 8</code></li>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 801,
            "dislikes": 16,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.2K\", \"totalSubmission\": \"30.3K\", \"totalAcceptedRaw\": 15211, \"totalSubmissionRaw\": 30314, \"acRate\": \"50.2%\"}",
            "hints": [
                "Students in row i only can see exams in row i+1.",
                "Use Dynamic programming to compute the result given a (current row, bitmask people seated in previous row)."
            ],
            "rephrased": {
                "body": "Given an `m * n` matrix `seats` representing seat distributions in a classroom. If a seat is broken, it is denoted by the '#' character; otherwise, it's denoted by the '.' character. Students can see the answers of those sitting to their immediate left and right, as well as diagonally to their upper-left and upper-right. They cannot see the answers of students sitting directly in front or behind them. Determine the maximum number of students that can take the exam together without any cheating being possible. Students must be placed in seats that are in good condition ('.').",
                "constraints": [
                    "`seats` contains only characters '.' and '#'.",
                    "`m == seats.length`",
                    "`n == seats[i].length`",
                    "`1 <= m <= 8`",
                    "`1 <= n <= 8`"
                ],
                "testcases": [
                    {
                        "input": "[[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n               [\".\",\"#\",\"#\",\"#\",\"#\",\".\"],\n               [\"#\",\".\",\"#\",\"#\",\".\",\"#\"]] ",
                        "output": 4,
                        "explanation": "The teacher can place 4 students in available seats such that no cheating is possible."
                    },
                    {
                        "input": "[[\".\",\"#\"],\n               [\"#\",\"#\"],\n               [\"#\",\".\"],\n               [\"#\",\"#\"],\n               [\".\",\"#\"]] ",
                        "output": 3,
                        "explanation": "Place all students in available seats."
                    },
                    {
                        "input": "[[\"#\",\".\",\".\",\".\",\"#\"],\n               [\".\",\"#\",\".\",\"#\",\".\"],\n               [\".\",\".\",\"#\",\".\",\".\"],\n               [\".\",\"#\",\".\",\"#\",\".\"],\n               [\"#\",\".\",\".\",\".\",\"#\"]] ",
                        "output": 10,
                        "explanation": "Place students in available seats in columns 1, 3, and 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Students in row i only can see exams in row i+1.",
            "Use Dynamic programming to compute the result given a (current row, bitmask people seated in previous row)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxStudents(vector<vector<char>>& seats) {\n    return accumulate(\n               seats.begin(), seats.end(), 0,\n               [&](int a, const auto& seat) {\n      return a + count(seat.begin(), seat.end(), '.');\n               }) -\n        hungarian(seats);\n  }\n\n private:\n  const vector<pair<int, int>> dirs{{-1, -1}, {0, -1}, {1, -1},\n                                    {-1, 1},  {0, 1},  {1, 1}};\n\n  int hungarian(const vector<vector<char>>& seats) {\n    const int m = seats.size();\n    const int n = seats[0].size();\n    int count = 0;\n    vector<vector<int>> seen(m, vector<int>(n));\n    vector<vector<int>> match(m, vector<int>(n, -1));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (seats[i][j] == '.' && match[i][j] == -1) {\n          const int sessionId = i * n + j;\n          seen[i][j] = sessionId;\n          count += dfs(seats, i, j, sessionId, seen, match);\n        }\n\n    return count;\n  }\n\n  int dfs(const vector<vector<char>>& seats, int i, int j, int sessionId,\n          vector<vector<int>>& seen, vector<vector<int>>& match) {\n    const int m = seats.size();\n    const int n = seats[0].size();\n\n    for (const auto& [dx, dy] : dirs) {\n      const int x = i + dx;\n      const int y = j + dy;\n      if (x < 0 || x == m || y < 0 || y == n)\n        continue;\n      if (seats[x][y] != '.' || seen[x][y] == sessionId)\n        continue;\n      seen[x][y] = sessionId;\n      if (match[x][y] == -1 || dfs(seats, match[x][y] / n, match[x][y] % n,\n                                   sessionId, seen, match)) {\n        match[x][y] = i * n + j;\n        match[i][j] = x * n + y;\n        return 1;\n      }\n    }\n\n    return 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxStudents(char[][] seats) {\n    int studentsCount = 0;\n\n    for (char[] seat : seats)\n      for (final char s : seat)\n        if (s == '.')\n          ++studentsCount;\n\n    return studentsCount - hungarian(seats);\n  }\n\n  private static final int[][] dirs = {{-1, -1}, {0, -1}, {1, -1}, {-1, 1}, {0, 1}, {1, 1}};\n\n  private int hungarian(char[][] seats) {\n    final int m = seats.length;\n    final int n = seats[0].length;\n    int count = 0;\n    int[][] seen = new int[m][n];\n    int[][] match = new int[m][n];\n    Arrays.stream(match).forEach(A -> Arrays.fill(A, -1));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (seats[i][j] == '.' && match[i][j] == -1) {\n          final int sessionId = i * n + j;\n          seen[i][j] = sessionId;\n          if (dfs(seats, i, j, sessionId, seen, match))\n            ++count;\n        }\n\n    return count;\n  }\n\n  private boolean dfs(char[][] seats, int i, int j, int sessionId, int[][] seen, int[][] match) {\n    final int m = seats.length;\n    final int n = seats[0].length;\n\n    for (int[] dir : dirs) {\n      final int x = i + dir[0];\n      final int y = j + dir[1];\n      if (x < 0 || x == m || y < 0 || y == n)\n        continue;\n      if (seats[x][y] != '.' || seen[x][y] == sessionId)\n        continue;\n      seen[x][y] = sessionId;\n      if (match[x][y] == -1 ||\n          dfs(seats, match[x][y] / n, match[x][y] % n, sessionId, seen, match)) {\n        match[x][y] = i * n + j;\n        match[i][j] = x * n + y;\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxStudents(self, seats: List[List[str]]) -> int:\n    m = len(seats)\n    n = len(seats[0])\n    dirs = [(-1, -1), (0, -1), (1, -1), (-1, 1), (0, 1), (1, 1)]\n    seen = [[0] * n for _ in range(m)]\n    match = [[-1] * n for _ in range(m)]\n\n    def dfs(i: int, j: int, sessionId: int) -> int:\n      for dx, dy in dirs:\n        x = i + dx\n        y = j + dy\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if seats[x][y] != '.' or seen[x][y] == sessionId:\n          continue\n        seen[x][y] = sessionId\n        if match[x][y] == -1 or dfs(*divmod(match[x][y], n), sessionId):\n          match[x][y] = i * n + j\n          match[i][j] = x * n + y\n          return 1\n      return 0\n\n    def hungarian() -> int:\n      count = 0\n      for i in range(m):\n        for j in range(n):\n          if seats[i][j] == '.' and match[i][j] == -1:\n            sessionId = i * n + j\n            seen[i][j] = sessionId\n            count += dfs(i, j, sessionId)\n      return count\n\n    return sum(seats[i][j] == '.' for i in range(m)\n               for j in range(n)) - hungarian()\n",
                "lang_text": "py"
            }
        }
    }
}