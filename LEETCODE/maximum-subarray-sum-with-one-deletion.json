{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1186",
            "title": "Maximum Subarray Sum with One Deletion",
            "titleSlug": "maximum-subarray-sum-with-one-deletion",
            "content": "<p>Given an array of integers, return the maximum sum for a <strong>non-empty</strong>&nbsp;subarray (contiguous elements) with at most one element deletion.&nbsp;In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the&nbsp;sum of the remaining elements is maximum possible.</p>\n\n<p>Note that the subarray needs to be <strong>non-empty</strong> after deleting one element.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,-2,0,3]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,-2,-2,3]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>We just choose [3] and it&#39;s the maximum sum.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [-1,-1,-1,-1]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>&nbsp;The final subarray needs to be non-empty. You can&#39;t choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1737,
            "dislikes": 59,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"48K\", \"totalSubmission\": \"110.9K\", \"totalAcceptedRaw\": 47955, \"totalSubmissionRaw\": 110899, \"acRate\": \"43.2%\"}",
            "hints": [
                "How to solve this problem if no deletions are allowed ?",
                "Try deleting each element and find the maximum subarray sum to both sides of that element.",
                "To do that efficiently, use the idea of Kadane's algorithm."
            ],
            "rephrased": {
                "body": "Given an array of integers, find the maximum possible sum of a non-empty subarray after optionally deleting at most one element from it. The subarray must contain at least one element after the potential deletion.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "-10^4 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[1,-2,0,3]",
                        "output": "4",
                        "explanation": "The subarray [1, -2, 0, 3] yields the maximum sum after deleting -2, resulting in the subarray [1, 0, 3] with a sum of 4."
                    },
                    {
                        "input": "[1,-2,-2,3]",
                        "output": "3",
                        "explanation": "The subarray [3] itself gives the maximum sum, which is 3."
                    },
                    {
                        "input": "[-1,-1,-1,-1]",
                        "output": "-1",
                        "explanation": "The maximum sum is -1. Deleting an element from a single-element subarray is not allowed since the subarray must be non-empty after the deletion."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "How to solve this problem if no deletions are allowed ?",
            "Try deleting each element and find the maximum subarray sum to both sides of that element.",
            "To do that efficiently, use the idea of Kadane's algorithm."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Very similar to 53. Maximum Subarray\n  int maximumSum(vector<int>& arr) {\n    // dp[0][i] := max sum subarray ending w/ i (no deletion)\n    // dp[1][i] := max sum subarray ending w/ i (at most 1 deletion)\n    vector<vector<int>> dp(2, vector<int>(arr.size()));\n\n    dp[0][0] = arr[0];\n    dp[1][0] = arr[0];\n    for (int i = 1; i < arr.size(); ++i) {\n      dp[0][i] = max(arr[i], dp[0][i - 1] + arr[i]);\n      dp[1][i] =\n          max({arr[i], dp[1][i - 1] + arr[i], dp[0][i - 1] /*delete arr[i]*/});\n    }\n\n    return *max_element(dp[1].begin(), dp[1].end());\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Very similar to 53. Maximum Subarray\n  public int maximumSum(int[] arr) {\n    // dp[0][i] := max sum subarray ending w/ i (no deletion)\n    // dp[1][i] := max sum subarray ending w/ i (at most 1 deletion)\n    int[][] dp = new int[2][arr.length];\n\n    dp[0][0] = arr[0];\n    dp[1][0] = arr[0];\n    for (int i = 1; i < arr.length; ++i) {\n      dp[0][i] = Math.max(arr[i], dp[0][i - 1] + arr[i]);\n      dp[1][i] = Math.max(arr[i], Math.max(dp[1][i - 1] + arr[i], dp[0][i - 1] /*delete arr[i]*/));\n    }\n\n    return Arrays.stream(dp[1]).max().getAsInt();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Very similar to 53. Maximum Subarray\n  def maximumSum(self, arr: List[int]) -> int:\n    # dp[0][i] := max sum subarray ending w/ i (no deletion)\n    # dp[1][i] := max sum subarray ending w/ i (at most 1 deletion)\n    dp = [[0] * len(arr) for _ in range(2)]\n\n    dp[0][0] = arr[0]\n    dp[1][0] = arr[0]\n    for i in range(1, len(arr)):\n      dp[0][i] = max(arr[i], dp[0][i - 1] + arr[i])\n      dp[1][i] = max(arr[i], dp[1][i - 1] + arr[i], dp[0][i - 1])\n\n    return max(dp[1])\n",
                "lang_text": "py"
            }
        }
    }
}