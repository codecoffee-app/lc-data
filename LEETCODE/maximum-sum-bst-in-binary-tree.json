{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1373",
            "title": "Maximum Sum BST in Binary Tree",
            "titleSlug": "maximum-sum-bst-in-binary-tree",
            "content": "<p>Given a <strong>binary tree</strong> <code>root</code>, return <em>the maximum sum of all keys of <strong>any</strong> sub-tree which is also a Binary Search Tree (BST)</em>.</p>\n\n<p>Assume a BST is defined as follows:</p>\n\n<ul>\n\t<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/30/sample_1_1709.png\" style=\"width: 320px; height: 250px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/30/sample_2_1709.png\" style=\"width: 134px; height: 180px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [4,3,null,1,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [-4,-2,-5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All values are negatives. Return an empty BST.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 4 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>-4 * 10<sup>4</sup> &lt;= Node.val &lt;= 4 * 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2489,
            "dislikes": 168,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"63.3K\", \"totalSubmission\": \"156.9K\", \"totalAcceptedRaw\": 63335, \"totalSubmissionRaw\": 156947, \"acRate\": \"40.4%\"}",
            "hints": [
                "Create a datastructure with 4 parameters:  (sum, isBST, maxLeft, minRight).",
                "In each node compute theses parameters, following the conditions of a Binary Search Tree."
            ],
            "rephrased": {
                "body": "Given a binary tree `root`, find the maximum sum of all keys of any subtree which is also a Binary Search Tree (BST). A BST is defined as follows:\n\n*   The left subtree of a node contains only nodes with keys less than the node's key.\n*   The right subtree of a node contains only nodes with keys greater than the node's key.\n*   Both the left and right subtrees must also be binary search trees.",
                "constraints": [
                    "The number of nodes in the tree is in the range `[1, 4 * 10<sup>4</sup>]`.",
                    "`-4 * 10<sup>4</sup> <= Node.val <= 4 * 10<sup>4</sup>`"
                ],
                "testcases": [
                    {
                        "input": "[1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]",
                        "output": "20",
                        "explanation": "The maximum sum of a valid Binary Search Tree is obtained from the subtree rooted at the node with value 3. The sum of this BST is 2 + 3 + 4 + 4 + 6 = 19 + 1 =20."
                    },
                    {
                        "input": "[4,3,null,1,2]",
                        "output": "2",
                        "explanation": "The maximum sum of a valid Binary Search Tree is obtained from a single root node with a key equal to 2."
                    },
                    {
                        "input": "[-4,-2,-5]",
                        "output": "0",
                        "explanation": "Since all values are negative, the maximum sum is 0 which corresponds to an empty BST or the case where no BST subtree exists."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Create a datastructure with 4 parameters:  (sum, isBST, maxLeft, minRight).",
            "In each node compute theses parameters, following the conditions of a Binary Search Tree."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  bool isBST;\n  int max;\n  int min;\n  int sum;\n  T() : isBST(false) {}\n  T(bool isBST, int max, int min, int sum)\n      : isBST(isBST), max(max), min(min), sum(sum) {}\n};\n\nclass Solution {\n public:\n  int maxSumBST(TreeNode* root) {\n    int ans = 0;\n    traverse(root, ans);\n    return ans;\n  }\n\n private:\n  T traverse(TreeNode* root, int& ans) {\n    if (root == nullptr)\n      return T(true, INT_MIN, INT_MAX, 0);\n\n    const T left = traverse(root->left, ans);\n    const T right = traverse(root->right, ans);\n\n    if (!left.isBST || !right.isBST)\n      return T();\n    if (root->val <= left.max || root->val >= right.min)\n      return T();\n\n    // Root is a valid BST\n    const int sum = root->val + left.sum + right.sum;\n    ans = max(ans, sum);\n    return T(true, max(root->val, right.max), min(root->val, left.min), sum);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public boolean isBST;\n  public Integer max;\n  public Integer min;\n  public Integer sum;\n  public T() {\n    this.isBST = false;\n    this.max = null;\n    this.min = null;\n    this.sum = null;\n  }\n  public T(boolean isBST, int max, int min, int sum) {\n    this.isBST = isBST;\n    this.max = max;\n    this.min = min;\n    this.sum = sum;\n  }\n}\n\nclass Solution {\n  public int maxSumBST(TreeNode root) {\n    traverse(root);\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private T traverse(TreeNode root) {\n    if (root == null)\n      return new T(true, Integer.MIN_VALUE, Integer.MAX_VALUE, 0);\n\n    T left = traverse(root.left);\n    T right = traverse(root.right);\n\n    if (!left.isBST || !right.isBST)\n      return new T();\n    if (root.val <= left.max || root.val >= right.min)\n      return new T();\n\n    // Root is a valid BST\n    final int sum = root.val + left.sum + right.sum;\n    ans = Math.max(ans, sum);\n    return new T(true, Math.max(root.val, right.max), Math.min(root.val, left.min), sum);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class T:\n  def __init__(self, isBST: bool = False,\n               max: Optional[int] = None,\n               min: Optional[int] = None,\n               sum: Optional[int] = None):\n    self.isBST = isBST\n    self.max = max\n    self.min = min\n    self.sum = sum\n\n\nclass Solution:\n  def maxSumBST(self, root: Optional[TreeNode]) -> int:\n    self.ans = 0\n\n    def traverse(root: Optional[TreeNode]) -> T:\n      if not root:\n        return T(True, -math.inf, math.inf, 0)\n\n      left: T = traverse(root.left)\n      right: T = traverse(root.right)\n\n      if not left.isBST or not right.isBST:\n        return T()\n      if root.val <= left.max or root.val >= right.min:\n        return T()\n\n      # Root is a valid BST\n      summ = root.val + left.sum + right.sum\n      self.ans = max(self.ans, summ)\n      return T(True, max(root.val, right.max), min(root.val, left.min), summ)\n\n    traverse(root)\n    return self.ans\n",
                "lang_text": "py"
            }
        }
    }
}