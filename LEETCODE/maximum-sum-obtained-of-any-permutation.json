{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1589",
            "title": "Maximum Sum Obtained of Any Permutation",
            "titleSlug": "maximum-sum-obtained-of-any-permutation",
            "content": "<p>We have an array of integers, <code>nums</code>, and an array of <code>requests</code> where <code>requests[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>. The <code>i<sup>th</sup></code> request asks for the sum of <code>nums[start<sub>i</sub>] + nums[start<sub>i</sub> + 1] + ... + nums[end<sub>i</sub> - 1] + nums[end<sub>i</sub>]</code>. Both <code>start<sub>i</sub></code> and <code>end<sub>i</sub></code> are <em>0-indexed</em>.</p>\n\n<p>Return <em>the maximum total sum of all requests <strong>among all permutations</strong> of</em> <code>nums</code>.</p>\n\n<p>Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5], requests = [[1,3],[0,1]]\n<strong>Output:</strong> 19\n<strong>Explanation:</strong> One permutation of nums is [2,1,3,4,5] with the following result: \nrequests[0] -&gt; nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -&gt; nums[0] + nums[1] = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\nA permutation with a higher total sum is [3,5,4,2,1] with the following result:\nrequests[0] -&gt; nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequests[1] -&gt; nums[0] + nums[1] = 3 + 5  = 8\nTotal sum: 11 + 8 = 19, which is the best that you can do.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6], requests = [[0,1]]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]\n<strong>Output:</strong> 47\n<strong>Explanation:</strong> A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i]&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= requests.length &lt;=&nbsp;10<sup>5</sup></code></li>\n\t<li><code>requests[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub>&nbsp;&lt;= end<sub>i</sub>&nbsp;&lt;&nbsp;n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 733,
            "dislikes": 37,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.3K\", \"totalSubmission\": \"48.8K\", \"totalAcceptedRaw\": 18302, \"totalSubmissionRaw\": 48754, \"acRate\": \"37.5%\"}",
            "hints": [
                "Indexes with higher frequencies should be bound with larger values"
            ],
            "rephrased": {
                "body": "Given an array of integers, `nums`, and an array of `requests` where `requests[i] = [start<sub>i</sub>, end<sub>i</sub>]`, find the maximum total sum of all requests among all permutations of `nums`. The `i<sup>th</sup>` request asks for the sum of elements in `nums` from index `start<sub>i</sub>` to `end<sub>i</sub>` (inclusive).  Both `start<sub>i</sub>` and `end<sub>i</sub>` are 0-indexed.\n\nReturn the maximum total sum modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "n == nums.length",
                    "1 <= n <= 10<sup>5</sup>",
                    "0 <= nums[i] <= 10<sup>5</sup>",
                    "1 <= requests.length <= 10<sup>5</sup>",
                    "requests[i].length == 2",
                    "0 <= start<sub>i</sub> <= end<sub>i</sub> < n"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3,4,5], requests = [[1,3],[0,1]]",
                        "output": "19",
                        "explanation": "One optimal permutation of nums is [3,5,4,2,1].\nrequest[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequest[1] -> nums[0] + nums[1] = 3 + 5  = 8\nTotal sum: 11 + 8 = 19."
                    },
                    {
                        "input": "nums = [1,2,3,4,5,6], requests = [[0,1]]",
                        "output": "11",
                        "explanation": "A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11]."
                    },
                    {
                        "input": "nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]",
                        "output": "47",
                        "explanation": "A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Indexes with higher frequencies should be bound with larger values"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxSumRangeQuery(vector<int>& nums, vector<vector<int>>& requests) {\n    constexpr int kMod = 1'000'000'007;\n    long ans = 0;\n    // count[i] := # of times nums[i] has been requested\n    vector<int> count(nums.size());\n\n    for (const vector<int>& request : requests) {\n      const int start = request[0];\n      const int end = request[1];\n      ++count[start];\n      if (end + 1 < nums.size())\n        --count[end + 1];\n    }\n\n    for (int i = 1; i < nums.size(); ++i)\n      count[i] += count[i - 1];\n\n    std::ranges::sort(count);\n    std::ranges::sort(nums);\n\n    for (int i = 0; i < nums.size(); ++i) {\n      ans += static_cast<long>(nums[i]) * count[i];\n      ans %= kMod;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxSumRangeQuery(int[] nums, int[][] requests) {\n    final int kMod = 1_000_000_007;\n    long ans = 0;\n    // count[i] := # of times nums[i] has been requested\n    int[] count = new int[nums.length];\n\n    for (int[] request : requests) {\n      final int start = request[0];\n      final int end = request[1];\n      ++count[start];\n      if (end + 1 < nums.length)\n        --count[end + 1];\n    }\n\n    for (int i = 1; i < nums.length; ++i)\n      count[i] += count[i - 1];\n\n    Arrays.sort(count);\n    Arrays.sort(nums);\n\n    for (int i = 0; i < nums.length; ++i) {\n      ans += (long) nums[i] * count[i];\n      ans %= kMod;\n    }\n\n    return (int) ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSumRangeQuery(self, nums: List[int], requests: List[List[int]]) -> int:\n    kMod = 1_000_000_007\n    ans = 0\n    # count[i] := # of times nums[i] has been requested\n    count = [0] * len(nums)\n\n    for start, end in requests:\n      count[start] += 1\n      if end + 1 < len(nums):\n        count[end + 1] -= 1\n\n    for i in range(1, len(nums)):\n      count[i] += count[i - 1]\n\n    for num, c in zip(sorted(nums), sorted(count)):\n      ans += num * c\n      ans %= kMod\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}