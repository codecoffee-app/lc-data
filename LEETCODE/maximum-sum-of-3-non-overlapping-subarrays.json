{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "689",
            "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
            "titleSlug": "maximum-sum-of-3-non-overlapping-subarrays",
            "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, find three non-overlapping subarrays of length <code>k</code> with maximum sum and return them.</p>\n\n<p>Return the result as a list of indices representing the starting position of each interval (<strong>0-indexed</strong>). If there are multiple answers, return the lexicographically smallest one.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,2,6,7,5,1], k = 2\n<strong>Output:</strong> [0,3,5]\n<strong>Explanation:</strong> Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,2,1,2,1,2,1], k = 2\n<strong>Output:</strong> [0,2,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;&nbsp;2<sup>16</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= floor(nums.length / 3)</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1918,
            "dislikes": 109,
            "similarQuestions": "[{\"title\": \"Best Time to Buy and Sell Stock III\", \"titleSlug\": \"best-time-to-buy-and-sell-stock-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"71K\", \"totalSubmission\": \"143.9K\", \"totalAcceptedRaw\": 71030, \"totalSubmissionRaw\": 143878, \"acRate\": \"49.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `k`, find three non-overlapping subarrays of length `k` such that the sum of elements in these subarrays is maximized. Return a list of the starting indices (0-indexed) of each of these three subarrays. If multiple solutions exist, return the lexicographically smallest one.",
                "constraints": [
                    "1 <= nums.length <= 2 * 10^4",
                    "1 <= nums[i] < 2^16",
                    "1 <= k <= floor(nums.length / 3)"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,1,2,6,7,5,1], k = 2",
                        "output": "[0,3,5]",
                        "explanation": "The subarrays [1, 2], [2, 6], and [7, 5] correspond to the starting indices [0, 3, 5]. While [2, 1] is also a valid subarray, the answer [1, 3, 5] would be lexicographically larger, thus [0,3,5] is the correct answer."
                    },
                    {
                        "input": "nums = [1,2,1,2,1,2,1,2,1], k = 2",
                        "output": "[0,2,4]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "best-time-to-buy-and-sell-stock-iii",
                "title": "Best Time to Buy and Sell Stock III",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {\n    const int n = nums.size() - k + 1;\n    vector<int> sums(n);  // sums[i] := sum of nums[i..i + k)\n    vector<int> l(n);     // l[i] := index in [0..i] having max sums[i]\n    vector<int> r(n);     // r[i] := index in [i..n) having max sums[i]\n\n    int sum = 0;\n    for (int i = 0; i < nums.size(); ++i) {\n      sum += nums[i];\n      if (i >= k)\n        sum -= nums[i - k];\n      if (i >= k - 1)\n        sums[i - k + 1] = sum;\n    }\n\n    int maxIndex = 0;\n    for (int i = 0; i < n; ++i) {\n      if (sums[i] > sums[maxIndex])\n        maxIndex = i;\n      l[i] = maxIndex;\n    }\n\n    maxIndex = n - 1;\n    for (int i = n - 1; i >= 0; --i) {\n      if (sums[i] >= sums[maxIndex])\n        maxIndex = i;\n      r[i] = maxIndex;\n    }\n\n    vector<int> ans{-1, -1, -1};\n\n    for (int i = k; i < n - k; ++i)\n      if (ans[0] == -1 || sums[ans[0]] + sums[ans[1]] + sums[ans[2]] <\n                              sums[l[i - k]] + sums[i] + sums[r[i + k]]) {\n        ans[0] = l[i - k];\n        ans[1] = i;\n        ans[2] = r[i + k];\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] maxSumOfThreeSubarrays(int[] nums, int k) {\n    final int n = nums.length - k + 1;\n    int[] sums = new int[n]; // sums[i] := sum of nums[i..i + k)\n    int[] l = new int[n];    // l[i] := index in [0..i] having max sums[i]\n    int[] r = new int[n];    // r[i] := index in [i..n) having max sums[i]\n\n    int sum = 0;\n    for (int i = 0; i < nums.length; ++i) {\n      sum += nums[i];\n      if (i >= k)\n        sum -= nums[i - k];\n      if (i >= k - 1)\n        sums[i - k + 1] = sum;\n    }\n\n    int maxIndex = 0;\n    for (int i = 0; i < n; ++i) {\n      if (sums[i] > sums[maxIndex])\n        maxIndex = i;\n      l[i] = maxIndex;\n    }\n\n    maxIndex = n - 1;\n    for (int i = n - 1; i >= 0; --i) {\n      if (sums[i] >= sums[maxIndex])\n        maxIndex = i;\n      r[i] = maxIndex;\n    }\n\n    int[] ans = {-1, -1, -1};\n\n    for (int i = k; i + k < n; ++i)\n      if (ans[0] == -1 ||\n          sums[ans[0]] + sums[ans[1]] + sums[ans[2]] < sums[l[i - k]] + sums[i] + sums[r[i + k]]) {\n        ans[0] = l[i - k];\n        ans[1] = i;\n        ans[2] = r[i + k];\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:\n    ans = [-1] * 3\n    subarrayCount = len(nums) - k + 1\n    dp = [0] * subarrayCount\n    summ = 0\n\n    for i, num in enumerate(nums):\n      summ += num\n      if i >= k:\n        summ -= nums[i - k]\n      if i >= k - 1:\n        dp[i - k + 1] = summ\n\n    left = [0] * subarrayCount\n    maxIndex = 0\n\n    for i in range(subarrayCount):\n      if dp[i] > dp[maxIndex]:\n        maxIndex = i\n      left[i] = maxIndex\n\n    right = [0] * subarrayCount\n    maxIndex = subarrayCount - 1\n\n    for i in reversed(range(subarrayCount)):\n      if dp[i] >= dp[maxIndex]:\n        maxIndex = i\n      right[i] = maxIndex\n\n    for i in range(k, subarrayCount - k):\n      if ans[0] == -1 or dp[left[i - k]] + dp[i] + dp[right[i + k]] > dp[ans[0]] + dp[ans[1]] + dp[ans[2]]:\n        ans = [left[i - k], i, right[i + k]]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}