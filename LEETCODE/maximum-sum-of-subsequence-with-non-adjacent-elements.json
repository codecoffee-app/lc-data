{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3165",
            "title": "Maximum Sum of Subsequence With Non-adjacent Elements",
            "titleSlug": "maximum-sum-of-subsequence-with-non-adjacent-elements",
            "content": "<p>You are given an array <code>nums</code> consisting of integers. You are also given a 2D array <code>queries</code>, where <code>queries[i] = [pos<sub>i</sub>, x<sub>i</sub>]</code>.</p>\n\n<p>For query <code>i</code>, we first set <code>nums[pos<sub>i</sub>]</code> equal to <code>x<sub>i</sub></code>, then we calculate the answer to query <code>i</code> which is the <strong>maximum</strong> sum of a <span data-keyword=\"subsequence-array\">subsequence</span> of <code>nums</code> where <strong>no two adjacent elements are selected</strong>.</p>\n\n<p>Return the <em>sum</em> of the answers to all queries.</p>\n\n<p>Since the final answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,5,9], queries = [[1,-2],[0,-3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">21</span></p>\n\n<p><strong>Explanation:</strong><br />\nAfter the 1<sup>st</sup> query, <code>nums = [3,-2,9]</code> and the maximum sum of a subsequence with non-adjacent elements is <code>3 + 9 = 12</code>.<br />\nAfter the 2<sup>nd</sup> query, <code>nums = [-3,-2,9]</code> and the maximum sum of a subsequence with non-adjacent elements is 9.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,-1], queries = [[0,-5]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong><br />\nAfter the 1<sup>st</sup> query, <code>nums = [-5,-1]</code> and the maximum sum of a subsequence with non-adjacent elements is 0 (choosing an empty subsequence).</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>queries[i] == [pos<sub>i</sub>, x<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= pos<sub>i</sub> &lt;= nums.length - 1</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= x<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 90,
            "dislikes": 23,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.2K\", \"totalSubmission\": \"29.4K\", \"totalAcceptedRaw\": 5198, \"totalSubmissionRaw\": 29416, \"acRate\": \"17.7%\"}",
            "hints": [
                "Can you solve each query in <code>O(nums.length)</code> with dynamic programming?",
                "In order to optimize, we will use segment tree where each node contains the maximum value of (front element has been chosen or not, back element has been chosen or not)."
            ],
            "rephrased": {
                "body": "Given an array `nums` of integers and a 2D array `queries`, where `queries[i] = [pos_i, x_i]`. For each query `i`, first update `nums[pos_i]` to `x_i`. Then, calculate the maximum sum of a subsequence of `nums` where no two selected elements are adjacent. Return the sum of the answers to all queries modulo 10^9 + 7. A subsequence is derived by deleting some or no elements without changing the order.",
                "constraints": [
                    "1 <= nums.length <= 5 * 10^4",
                    "-10^5 <= nums[i] <= 10^5",
                    "1 <= queries.length <= 5 * 10^4",
                    "queries[i] == [pos_i, x_i]",
                    "0 <= pos_i <= nums.length - 1",
                    "-10^5 <= x_i <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "nums = [3,5,9], queries = [[1,-2],[0,-3]]",
                        "output": "21",
                        "explanation": "After the first query, `nums = [3,-2,9]`. The maximum sum of a non-adjacent subsequence is 3 + 9 = 12. After the second query, `nums = [-3,-2,9]`. The maximum sum of a non-adjacent subsequence is 9. Thus, 12 + 9 = 21."
                    },
                    {
                        "input": "nums = [0,-1], queries = [[0,-5]]",
                        "output": "0",
                        "explanation": "After the first query, `nums = [-5,-1]`. The maximum sum of a non-adjacent subsequence is 0 (choosing an empty subsequence)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can you solve each query in <code>O(nums.length)</code> with dynamic programming?",
            "In order to optimize, we will use segment tree where each node contains the maximum value of (front element has been chosen or not, back element has been chosen or not)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "using NodeType = array<array<int, 2>, 2>;\n\nclass SegmentTree {\n public:\n  explicit SegmentTree(const vector<int>& nums) : n(nums.size()), tree(4 * n) {\n    build(nums, 0, 0, n - 1);\n  }\n\n  // Updates nums[i] to val.\n  void update(int i, int val) {\n    update(0, 0, n - 1, i, val);\n  }\n\n  // Returns the four values of the range query from nums[i..j].\n  //\n  // The four values are:\n  //   1. nums[i] is not selected, nums[j] is not selected\n  //   2. nums[i] is not selected, nums[j] is selected\n  //   3. nums[i] is selected, nums[j] is not selected\n  //   4. nums[i] is selected, nums[j] is selected\n  NodeType query(int i, int j) const {\n    return query(0, 0, n - 1, i, j);\n  }\n\n private:\n  static constexpr int kInf = 1'000'000'000;\n  static constexpr NodeType kDefaultNode = {{{-kInf, -kInf}, {-kInf, -kInf}}};\n  const int n;  // the size of the input array\n  // tree[i][l][r] := the value of the i-th node, where `l` and `r` represent if\n  // the leftmost or rightmost element is selected, respectively\n  vector<NodeType> tree;\n\n  void build(const vector<int>& nums, int treeIndex, int lo, int hi) {\n    if (lo == hi) {\n      tree[treeIndex] = {{{0, -kInf}, {-kInf, nums[lo]}}};\n      return;\n    }\n    const int mid = (lo + hi) / 2;\n    build(nums, 2 * treeIndex + 1, lo, mid);\n    build(nums, 2 * treeIndex + 2, mid + 1, hi);\n    tree[treeIndex] = merge(tree[2 * treeIndex + 1], tree[2 * treeIndex + 2]);\n  }\n\n  void update(int treeIndex, int lo, int hi, int i, int val) {\n    if (lo == hi) {\n      tree[treeIndex] = {{{0, -kInf}, {-kInf, val}}};\n      return;\n    }\n    const int mid = (lo + hi) / 2;\n    if (i <= mid)\n      update(2 * treeIndex + 1, lo, mid, i, val);\n    else\n      update(2 * treeIndex + 2, mid + 1, hi, i, val);\n    tree[treeIndex] = merge(tree[2 * treeIndex + 1], tree[2 * treeIndex + 2]);\n  }\n\n  NodeType query(int treeIndex, int lo, int hi, int i, int j) const {\n    if (i <= lo && hi <= j)  // [lo, hi] lies completely inside [i, j].\n      return tree[treeIndex];\n    if (j < lo || hi < i)  // [lo, hi] lies completely outside [i, j].\n      return kDefaultNode;\n    const int mid = (lo + hi) / 2;\n    return merge(query(2 * treeIndex + 1, lo, mid, i, j),\n                 query(2 * treeIndex + 2, mid + 1, hi, i, j));\n  }\n\n  // Merges the result of the left node and the right node.\n  NodeType merge(const NodeType& a, const NodeType& b) const {\n    NodeType node = {{{0, 0}, {0, 0}}};\n    for (int l = 0; l < 2; ++l)\n      for (int r = 0; r < 2; ++r)\n        node[l][r] =\n            max({a[l][0] + b[0][r], a[l][0] + b[1][r], a[l][1] + b[0][r]});\n    return node;\n  }\n};\n\nclass Solution {\n public:\n  int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = nums.size();\n    int ans = 0;\n    SegmentTree tree(nums);\n\n    for (const vector<int>& query : queries) {\n      const int pos = query[0];\n      const int x = query[1];\n      tree.update(pos, x);\n      NodeType res = tree.query(0, n - 1);\n      ans = (ans + static_cast<long>(\n                       max({res[0][0], res[0][1], res[1][0], res[1][1]}))) %\n            kMod;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}