{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1031",
            "title": "Maximum Sum of Two Non-Overlapping Subarrays",
            "titleSlug": "maximum-sum-of-two-non-overlapping-subarrays",
            "content": "<p>Given an integer array <code>nums</code> and two integers <code>firstLen</code> and <code>secondLen</code>, return <em>the maximum sum of elements in two non-overlapping <strong>subarrays</strong> with lengths </em><code>firstLen</code><em> and </em><code>secondLen</code>.</p>\n\n<p>The array with length <code>firstLen</code> could occur before or after the array with length <code>secondLen</code>, but they have to be non-overlapping.</p>\n\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> One choice of subarrays is [9] with length 1, and [6,5] with length 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2\n<strong>Output:</strong> 29\n<strong>Explanation:</strong> One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3\n<strong>Output:</strong> 31\n<strong>Explanation:</strong> One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= firstLen, secondLen &lt;= 1000</code></li>\n\t<li><code>2 &lt;= firstLen + secondLen &lt;= 1000</code></li>\n\t<li><code>firstLen + secondLen &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2487,
            "dislikes": 80,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"67.6K\", \"totalSubmission\": \"113.3K\", \"totalAcceptedRaw\": 67641, \"totalSubmissionRaw\": 113267, \"acRate\": \"59.7%\"}",
            "hints": [
                "We can use prefix sums to calculate any subarray sum quickly.\r\nFor each L length subarray, find the best possible M length subarray that occurs before and after it."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and two integers `firstLen` and `secondLen`, find the maximum sum of elements in two non-overlapping subarrays with lengths `firstLen` and `secondLen`. The subarray with length `firstLen` can appear before or after the array with length `secondLen`, but they must not overlap. A subarray is a contiguous part of the array.",
                "constraints": [
                    "1 <= firstLen, secondLen <= 1000",
                    "2 <= firstLen + secondLen <= 1000",
                    "firstLen + secondLen <= nums.length <= 1000",
                    "0 <= nums[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2",
                        "output": "20",
                        "explanation": "One optimal solution is to choose the subarray [9] of length 1 and the subarray [6,5] of length 2."
                    },
                    {
                        "input": "nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2",
                        "output": "29",
                        "explanation": "One optimal solution is to choose the subarray [3,8,1] of length 3 and the subarray [8,9] of length 2."
                    },
                    {
                        "input": "nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3",
                        "output": "31",
                        "explanation": "One optimal solution is to choose the subarray [5,6,0,9] of length 4 and the subarray [0,3,8] of length 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "We can use prefix sums to calculate any subarray sum quickly.\r\nFor each L length subarray, find the best possible M length subarray that occurs before and after it."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxSumTwoNoOverlap(vector<int>& nums, int firstLen, int secondLen) {\n    return max(helper(nums, firstLen, secondLen),\n               helper(nums, secondLen, firstLen));\n  }\n\n private:\n  int helper(vector<int>& A, int l, int r) {\n    const int n = A.size();\n    vector<int> left(n);\n    int sum = 0;\n\n    for (int i = 0; i < n; ++i) {\n      sum += A[i];\n      if (i >= l)\n        sum -= A[i - l];\n      if (i >= l - 1)\n        left[i] = i > 0 ? max(left[i - 1], sum) : sum;\n    }\n\n    vector<int> right(n);\n    sum = 0;\n\n    for (int i = n - 1; i >= 0; --i) {\n      sum += A[i];\n      if (i <= n - r - 1)\n        sum -= A[i + r];\n      if (i <= n - r)\n        right[i] = i < n - 1 ? max(right[i + 1], sum) : sum;\n    }\n\n    int ans = 0;\n\n    for (int i = 0; i < n - 1; ++i)\n      ans = max(ans, left[i] + right[i + 1]);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {\n    return Math.max(helper(nums, firstLen, secondLen), helper(nums, secondLen, firstLen));\n  }\n\n  private int helper(int[] A, int l, int r) {\n    final int n = A.length;\n    int[] left = new int[n];\n    int sum = 0;\n\n    for (int i = 0; i < n; ++i) {\n      sum += A[i];\n      if (i >= l)\n        sum -= A[i - l];\n      if (i >= l - 1)\n        left[i] = i > 0 ? Math.max(left[i - 1], sum) : sum;\n    }\n\n    int[] right = new int[n];\n    sum = 0;\n\n    for (int i = n - 1; i >= 0; --i) {\n      sum += A[i];\n      if (i <= n - r - 1)\n        sum -= A[i + r];\n      if (i <= n - r)\n        right[i] = i < n - 1 ? Math.max(right[i + 1], sum) : sum;\n    }\n\n    int ans = 0;\n\n    for (int i = 0; i < n - 1; ++i)\n      ans = Math.max(ans, left[i] + right[i + 1]);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSumTwoNoOverlap(self, nums: List[int], firstLen: int, secondLen: int) -> int:\n    def helper(l: int, r: int) -> int:\n      n = len(nums)\n      left = [0] * n\n      summ = 0\n\n      for i in range(n):\n        summ += nums[i]\n        if i >= l:\n          summ -= nums[i - l]\n        if i >= l - 1:\n          left[i] = max(left[i - 1], summ) if i > 0 else summ\n\n      right = [0] * n\n      summ = 0\n\n      for i in reversed(range(n)):\n        summ += nums[i]\n        if i <= n - r - 1:\n          summ -= nums[i + r]\n        if i <= n - r:\n          right[i] = max(right[i + 1], summ) if i < n - 1 else summ\n\n      return max(left[i] + right[i + 1] for i in range(n - 1))\n\n    return max(helper(firstLen, secondLen), helper(secondLen, firstLen))\n",
                "lang_text": "py"
            }
        }
    }
}