{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2234",
            "title": "Maximum Total Beauty of the Gardens",
            "titleSlug": "maximum-total-beauty-of-the-gardens",
            "content": "<p>Alice is a caretaker of <code>n</code> gardens and she wants to plant flowers to maximize the total beauty of all her gardens.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>flowers</code> of size <code>n</code>, where <code>flowers[i]</code> is the number of flowers already planted in the <code>i<sup>th</sup></code> garden. Flowers that are already planted <strong>cannot</strong> be removed. You are then given another integer <code>newFlowers</code>, which is the <strong>maximum</strong> number of flowers that Alice can additionally plant. You are also given the integers <code>target</code>, <code>full</code>, and <code>partial</code>.</p>\n\n<p>A garden is considered <strong>complete</strong> if it has <strong>at least</strong> <code>target</code> flowers. The <strong>total beauty</strong> of the gardens is then determined as the <strong>sum</strong> of the following:</p>\n\n<ul>\n\t<li>The number of <strong>complete</strong> gardens multiplied by <code>full</code>.</li>\n\t<li>The <strong>minimum</strong> number of flowers in any of the <strong>incomplete</strong> gardens multiplied by <code>partial</code>. If there are no incomplete gardens, then this value will be <code>0</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> total beauty that Alice can obtain after planting at most </em><code>newFlowers</code><em> flowers.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> Alice can plant\n- 2 flowers in the 0<sup>th</sup> garden\n- 3 flowers in the 1<sup>st</sup> garden\n- 1 flower in the 2<sup>nd</sup> garden\n- 1 flower in the 3<sup>rd</sup> garden\nThe gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.\nThere is 1 garden that is complete.\nThe minimum number of flowers in the incomplete gardens is 2.\nThus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14.\nNo other way of planting flowers can obtain a total beauty higher than 14.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6\n<strong>Output:</strong> 30\n<strong>Explanation:</strong> Alice can plant\n- 3 flowers in the 0<sup>th</sup> garden\n- 0 flowers in the 1<sup>st</sup> garden\n- 0 flowers in the 2<sup>nd</sup> garden\n- 2 flowers in the 3<sup>rd</sup> garden\nThe gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.\nThere are 3 gardens that are complete.\nThe minimum number of flowers in the incomplete gardens is 4.\nThus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30.\nNo other way of planting flowers can obtain a total beauty higher than 30.\nNote that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= flowers.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= flowers[i], target &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= newFlowers &lt;= 10<sup>10</sup></code></li>\n\t<li><code>1 &lt;= full, partial &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 416,
            "dislikes": 37,
            "similarQuestions": "[{\"title\": \"Split Array Largest Sum\", \"titleSlug\": \"split-array-largest-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.5K\", \"totalSubmission\": \"22.7K\", \"totalAcceptedRaw\": 6546, \"totalSubmissionRaw\": 22685, \"acRate\": \"28.9%\"}",
            "hints": [
                "Say we choose k gardens to be complete, is there an optimal way of choosing which gardens to plant more flowers to achieve this?",
                "For a given k, we should greedily fill-up the k gardens with the most flowers planted already. This gives us the most remaining flowers to fill up the other gardens.",
                "After sorting flowers, we can thus try every possible k and what is left is to find the highest minimum flowers we can obtain by planting the remaining flowers in the other gardens.",
                "To find the highest minimum in the other gardens, we can use binary search to find the most optimal way of planting."
            ],
            "rephrased": {
                "body": "Alice manages 'n' gardens and wants to maximize their total beauty by planting flowers. You're given an array 'flowers' representing the current number of flowers in each garden. Alice can plant up to 'newFlowers' additional flowers. A garden is complete if it has at least 'target' flowers. The total beauty is calculated as (number of complete gardens * 'full') + (minimum flowers in any incomplete garden * 'partial'), where the latter is 0 if no gardens are incomplete. Return the maximum total beauty Alice can achieve.",
                "constraints": [
                    "1 <= flowers.length <= 10^5",
                    "1 <= flowers[i], target <= 10^5",
                    "1 <= newFlowers <= 10^10",
                    "1 <= full, partial <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1",
                        "output": "14",
                        "explanation": "Alice can plant 2 flowers in the 0th garden, 3 in the 1st, 1 in the 2nd, and 1 in the 3rd. This results in gardens [3,6,2,2].  One garden is complete. The minimum in incomplete gardens is 2. Total beauty = (1 * 12) + (2 * 1) = 14."
                    },
                    {
                        "input": "flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6",
                        "output": "30",
                        "explanation": "Alice can plant 3 flowers in the 0th garden and 2 in the 3rd, resulting in gardens [5,4,5,5]. Three gardens are complete. The minimum in incomplete gardens is 4. Total beauty = (3 * 2) + (4 * 6) = 30."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "split-array-largest-sum",
                "title": "Split Array Largest Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Say we choose k gardens to be complete, is there an optimal way of choosing which gardens to plant more flowers to achieve this?",
            "For a given k, we should greedily fill-up the k gardens with the most flowers planted already. This gives us the most remaining flowers to fill up the other gardens.",
            "After sorting flowers, we can thus try every possible k and what is left is to find the highest minimum flowers we can obtain by planting the remaining flowers in the other gardens.",
            "To find the highest minimum in the other gardens, we can use binary search to find the most optimal way of planting."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maximumBeauty(vector<int>& flowers, long long newFlowers,\n                          int target, int full, int partial) {\n    const long long n = flowers.size();\n\n    // If a garden is already complete, clamp it to target.\n    for (int& flower : flowers)\n      flower = min(flower, target);\n    std::ranges::sort(flowers);\n\n    // All gardens are complete, so nothing we can do.\n    if (flowers[0] == target)\n      return n * full;\n\n    // Have many new flowers can maximize the beauty value.\n    if (newFlowers >=\n        n * target - accumulate(flowers.begin(), flowers.end(), 0LL))\n      return max(n * full,\n                 (n - 1) * full + static_cast<long long>(target - 1) * partial);\n\n    long long ans = 0;\n    long long leftFlowers = newFlowers;\n    // cost[i] := cost to make flowers[0..i] the same\n    vector<long long> cost(n);\n\n    for (long long i = 1; i < n; ++i)\n      // Plant (flowers[i] - flowers[i - 1]) flowers for flowers[0..i - 1].\n      cost[i] = cost[i - 1] + i * (flowers[i] - flowers[i - 1]);\n\n    int i = n - 1;  // flowers' index (flowers[i + 1:] are complete)\n    while (flowers[i] == target)\n      --i;\n\n    for (; leftFlowers >= 0; --i) {\n      // To maximize the min # of incomplete flowers, we find the first index j\n      // that we can't make flowers[0..j] equal to flowers[j], then we know we\n      // can make flowers[0..j - 1] equal to flowers[j - 1]. In the meantime,\n      // evenly increase each of them to seek a bigger min value.\n      const int j = firstGreater(cost, i, leftFlowers);\n      const long long minIncomplete =\n          flowers[j - 1] + (leftFlowers - cost[j - 1]) / j;\n      ans = max(ans, (n - 1 - i) * full + minIncomplete * partial);\n      leftFlowers -= max(0, target - flowers[i]);\n    }\n\n    return ans;\n  }\n\n private:\n  int firstGreater(const vector<long long>& A, int maxIndex, long long target) {\n    return upper_bound(A.begin(), A.begin() + maxIndex + 1, target) - A.begin();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maximumBeauty(int[] flowers, long newFlowers, int target, int full, int partial) {\n    final long n = flowers.length;\n\n    // If a garden is already complete, clamp it to target.\n    for (int i = 0; i < n; ++i)\n      flowers[i] = Math.min(flowers[i], target);\n    Arrays.sort(flowers);\n\n    // All gardens are complete, so nothing we can do.\n    if (flowers[0] == target)\n      return (long) n * full;\n\n    // Have many new flowers can maximize beauty value.\n    if (newFlowers >= n * target - Arrays.stream(flowers).asLongStream().sum())\n      return Math.max(n * full, (n - 1) * full + (long) (target - 1) * partial);\n\n    long ans = 0;\n    long leftFlowers = newFlowers;\n    // cost[i] := cost to make flowers[0..i] the same\n    long[] cost = new long[flowers.length];\n\n    for (int i = 1; i < flowers.length; ++i)\n      // Plant (flowers[i] - flowers[i - 1]) flowers for flowers[0..i - 1].\n      cost[i] = cost[i - 1] + i * (flowers[i] - flowers[i - 1]);\n\n    int i = flowers.length - 1; // flowers' index (flowers[i + 1:] are complete)\n    while (flowers[i] == target)\n      --i;\n\n    for (; leftFlowers >= 0; --i) {\n      // To maximize the min # of incomplete flowers, we find the first index j\n      // that we can't make flowers[0..j] equal to flowers[j], then we know we\n      // can make flowers[0..j - 1] equal to flowers[j - 1]. In the meantime,\n      // evenly increase each of them to seek a bigger min value.\n      final int j = firstGreater(cost, i, leftFlowers);\n      final long minIncomplete = flowers[j - 1] + (leftFlowers - cost[j - 1]) / j;\n      ans = Math.max(ans, (long) (n - 1 - i) * full + (long) minIncomplete * partial);\n      leftFlowers -= Math.max(0, target - flowers[i]);\n    }\n\n    return ans;\n  }\n\n  private int firstGreater(long[] A, int maxIndex, long target) {\n    final int i = Arrays.binarySearch(A, 0, maxIndex + 1, target + 1);\n    return i < 0 ? -i - 1 : i;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumBeauty(self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int) -> int:\n    n = len(flowers)\n\n    # If a garden is already complete, clamp it to target.\n    flowers = [min(flower, target) for flower in flowers]\n    flowers.sort()\n\n    # All gardens are complete, so nothing we can do.\n    if flowers[0] == target:\n      return n * full\n\n    # Have many new flowers can maximize beauty value.\n    if newFlowers >= n * target - sum(flowers):\n      return max(n * full, (n - 1) * full + (target - 1) * partial)\n\n    ans = 0\n    leftFlowers = newFlowers\n    # cost[i] := cost to make flowers[0..i] the same\n    cost = [0] * n\n\n    for i in range(1, n):\n      # Plant (flowers[i] - flowers[i - 1]) flowers for flowers[0..i - 1].\n      cost[i] = cost[i - 1] + i * (flowers[i] - flowers[i - 1])\n\n    i = n - 1  # flowers' index (flowers[i + 1:] are complete)\n    while flowers[i] == target:\n      i -= 1\n\n    while leftFlowers >= 0:\n      # To maximize the min # of incomplete flowers, we find the first index j\n      # that we can't make flowers[0..j] equal to flowers[j], then we know we\n      # can make flowers[0..j - 1] equal to flowers[j - 1]. In the meantime,\n      # evenly increase each of them to seek a bigger min value.\n      j = min(i + 1, bisect_right(cost, leftFlowers))\n      minIncomplete = flowers[j - 1] + (leftFlowers - cost[j - 1]) // j\n      ans = max(ans, (n - 1 - i) * full + minIncomplete * partial)\n      leftFlowers -= max(0, target - flowers[i])\n      i -= 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}