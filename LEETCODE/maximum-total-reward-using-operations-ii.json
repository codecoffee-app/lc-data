{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3181",
            "title": "Maximum Total Reward Using Operations II",
            "titleSlug": "maximum-total-reward-using-operations-ii",
            "content": "<p>You are given an integer array <code>rewardValues</code> of length <code>n</code>, representing the values of rewards.</p>\n\n<p>Initially, your total reward <code>x</code> is 0, and all indices are <strong>unmarked</strong>. You are allowed to perform the following operation <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose an <strong>unmarked</strong> index <code>i</code> from the range <code>[0, n - 1]</code>.</li>\n\t<li>If <code>rewardValues[i]</code> is <strong>greater</strong> than your current total reward <code>x</code>, then add <code>rewardValues[i]</code> to <code>x</code> (i.e., <code>x = x + rewardValues[i]</code>), and <strong>mark</strong> the index <code>i</code>.</li>\n</ul>\n\n<p>Return an integer denoting the <strong>maximum </strong><em>total reward</em> you can collect by performing the operations optimally.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">rewardValues = [1,1,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>During the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">rewardValues = [1,6,4,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">11</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Mark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rewardValues.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= rewardValues[i] &lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 96,
            "dislikes": 31,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.3K\", \"totalSubmission\": \"27K\", \"totalAcceptedRaw\": 5315, \"totalSubmissionRaw\": 27024, \"acRate\": \"19.7%\"}",
            "hints": [
                "Sort the rewards array first.",
                "If we decide to apply some rewards, it's always optimal to apply them in order.",
                "The transition is given by: <code>dp[i][j] = dp[i - 1][j \u2212 rewardValues[i]]</code> if <code>j \u2212 rewardValues[i] < rewardValues[i]</code>.",
                "Note that the dp array is a boolean array. We just need 1 bit per element, so we can use a bitset or something similar. We just need a \"stream\" of bits and apply bitwise operations to optimize the computations by a constant factor."
            ],
            "rephrased": {
                "body": "You are given an integer array `rewardValues` of length `n`, representing the values of rewards. Initially, your total reward `x` is 0, and all indices are unmarked. You can perform the following operation any number of times: Choose an unmarked index `i` from the range `[0, n - 1]`. If `rewardValues[i]` is greater than your current total reward `x`, then add `rewardValues[i]` to `x` (i.e., `x = x + rewardValues[i]`), and mark the index `i`. Return the maximum total reward you can collect by performing the operations optimally.",
                "constraints": [
                    "1 <= rewardValues.length <= 5 * 10^4",
                    "1 <= rewardValues[i] <= 5 * 10^4"
                ],
                "testcases": [
                    {
                        "input": "[1,1,3,3]",
                        "output": "4",
                        "explanation": "By marking indices 0 and 2 in order, the total reward will be 4, which is the maximum achievable reward."
                    },
                    {
                        "input": "[1,6,4,3,2]",
                        "output": "11",
                        "explanation": "By marking indices 0, 2, and 1 in order, the total reward becomes 11, which is the maximum possible reward."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Sort the rewards array first.",
            "If we decide to apply some rewards, it's always optimal to apply them in order.",
            "The transition is given by: <code>dp[i][j] = dp[i - 1][j \u2212 rewardValues[i]]</code> if <code>j \u2212 rewardValues[i] < rewardValues[i]</code>.",
            "Note that the dp array is a boolean array. We just need 1 bit per element, so we can use a bitset or something similar. We just need a \"stream\" of bits and apply bitwise operations to optimize the computations by a constant factor."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 3180. Maximum Total Reward Using Operations I\n  int maxTotalReward(vector<int>& rewardValues) {\n    constexpr int kPossibleRewards = 100'000;\n    // dp[num] := true if reward `num` is achievable\n    bitset<kPossibleRewards> dp;\n    dp[0] = true;\n\n    ranges::sort(rewardValues);\n\n    for (const int num : rewardValues) {\n      bitset<kPossibleRewards> newBits = dp;\n      // Remove the numbers >= the current number.\n      newBits <<= kPossibleRewards - num;\n      newBits >>= kPossibleRewards - num;\n      dp |= newBits << num;\n    }\n\n    for (int ans = kPossibleRewards - 1; ans >= 0; --ans)\n      if (dp[ans])\n        return ans;\n\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "import java.math.BigInteger;\n\nclass Solution {\n  // Same as 3180. Maximum Total Reward Using Operations I\n  public int maxTotalReward(int[] rewardValues) {\n    BigInteger one = BigInteger.ONE;\n    BigInteger dp = one; // the possible rewards (initially, 0 is achievable)\n\n    Arrays.sort(rewardValues);\n\n    for (final int num : rewardValues) {\n      // Remove the numbers >= the current number.\n      BigInteger maskBitsLessThanNum = one.shiftLeft(num).subtract(one);\n      BigInteger bitsLessThanNum = dp.and(maskBitsLessThanNum);\n      dp = dp.or(bitsLessThanNum.shiftLeft(num));\n    }\n\n    return dp.bitLength() - 1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 3180. Maximum Total Reward Using Operations I\n  def maxTotalReward(self, rewardValues: List[int]) -> int:\n    dp = 1  # the possible rewards (initially, 0 is achievable)\n\n    for num in sorted(rewardValues):\n      # Remove the numbers >= the current number.\n      smallerNums = dp & ((1 << num) - 1)\n      dp |= smallerNums << num\n\n    return dp.bit_length() - 1\n",
                "lang_text": "py"
            }
        }
    }
}