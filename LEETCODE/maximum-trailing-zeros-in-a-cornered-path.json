{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2245",
            "title": "Maximum Trailing Zeros in a Cornered Path",
            "titleSlug": "maximum-trailing-zeros-in-a-cornered-path",
            "content": "<p>You are given a 2D integer array <code>grid</code> of size <code>m x n</code>, where each cell contains a positive integer.</p>\n\n<p>A <strong>cornered path</strong> is defined as a set of adjacent cells with <strong>at most</strong> one turn. More specifically, the path should exclusively move either <strong>horizontally</strong> or <strong>vertically</strong> up to the turn (if there is one), without returning to a previously visited cell. After the turn, the path will then move exclusively in the <strong>alternate</strong> direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell.</p>\n\n<p>The <strong>product</strong> of a path is defined as the product of all the values in the path.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of <strong>trailing zeros</strong> in the product of a cornered path found in </em><code>grid</code>.</p>\n\n<p>Note:</p>\n\n<ul>\n\t<li><strong>Horizontal</strong> movement means moving in either the left or right direction.</li>\n\t<li><strong>Vertical</strong> movement means moving in either the up or down direction.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/23/ex1new2.jpg\" style=\"width: 577px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> grid = [[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The grid on the left shows a valid cornered path.\nIt has a product of 15 * 20 * 6 * 1 * 10 = 18000 which has 3 trailing zeros.\nIt can be shown that this is the maximum trailing zeros in the product of a cornered path.\n\nThe grid in the middle is not a cornered path as it has more than one turn.\nThe grid on the right is not a cornered path as it requires a return to a previously visited cell.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/25/ex2.jpg\" style=\"width: 150px; height: 157px;\" />\n<pre>\n<strong>Input:</strong> grid = [[4,3,2],[7,6,1],[8,8,8]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The grid is shown in the figure above.\nThere are no cornered paths in the grid that result in a product with a trailing zero.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 171,
            "dislikes": 395,
            "similarQuestions": "[{\"title\": \"Factorial Trailing Zeroes\", \"titleSlug\": \"factorial-trailing-zeroes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Bomb Enemy\", \"titleSlug\": \"bomb-enemy\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Abbreviating the Product of a Range\", \"titleSlug\": \"abbreviating-the-product-of-a-range\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.6K\", \"totalSubmission\": \"21.3K\", \"totalAcceptedRaw\": 7616, \"totalSubmissionRaw\": 21260, \"acRate\": \"35.8%\"}",
            "hints": [
                "What actually tells us the trailing zeros of the product of a path?",
                "It is the sum of the exponents of 2 and sum of the exponents of 5 of the prime factorizations of the numbers on that path. The smaller of the two is the answer for that path.",
                "We can then treat each cell as the elbow point and calculate the largest minimum (sum of 2 exponents, sum of 5 exponents) from the combination of top-left, top-right, bottom-left and bottom-right.",
                "To do this efficiently, we should use the prefix sum technique."
            ],
            "rephrased": {
                "body": "Given a 2D integer array `grid` of size `m x n`, where each cell contains a positive integer, find the maximum number of trailing zeros in the product of a cornered path found in `grid`. A cornered path is a set of adjacent cells with at most one turn, moving exclusively horizontally or vertically up to the turn (if any), and then exclusively in the alternate direction without revisiting any cells. The product of a path is the product of all values in the path.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 10^5",
                    "1 <= m * n <= 10^5",
                    "1 <= grid[i][j] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]",
                        "output": "3",
                        "explanation": "One valid cornered path has a product of 15 * 20 * 6 * 1 * 10 = 18000, which has 3 trailing zeros. This is the maximum achievable."
                    },
                    {
                        "input": "[[4,3,2],[7,6,1],[8,8,8]]",
                        "output": "0",
                        "explanation": "There are no cornered paths in the grid that result in a product with a trailing zero."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "factorial-trailing-zeroes",
                "title": "Factorial Trailing Zeroes",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "bomb-enemy",
                "title": "Bomb Enemy",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "abbreviating-the-product-of-a-range",
                "title": "Abbreviating the Product of a Range",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What actually tells us the trailing zeros of the product of a path?",
            "It is the sum of the exponents of 2 and sum of the exponents of 5 of the prime factorizations of the numbers on that path. The smaller of the two is the answer for that path.",
            "We can then treat each cell as the elbow point and calculate the largest minimum (sum of 2 exponents, sum of 5 exponents) from the combination of top-left, top-right, bottom-left and bottom-right.",
            "To do this efficiently, we should use the prefix sum technique."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxTrailingZeros(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    // leftPrefix2[i][j] := # of 2 in grid[i][0..j]\n    // leftPrefix5[i][j] := # of 5 in grid[i][0..j]\n    // topPrefix2[i][j] := # of 2 in grid[0..i][j]\n    // topPrefix5[i][j] := # of 5 in grid[0..i][j]\n    vector<vector<int>> leftPrefix2(m, vector<int>(n));\n    vector<vector<int>> leftPrefix5(m, vector<int>(n));\n    vector<vector<int>> topPrefix2(m, vector<int>(n));\n    vector<vector<int>> topPrefix5(m, vector<int>(n));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        leftPrefix2[i][j] = getCount(grid[i][j], 2);\n        leftPrefix5[i][j] = getCount(grid[i][j], 5);\n        if (j > 0) {\n          leftPrefix2[i][j] += leftPrefix2[i][j - 1];\n          leftPrefix5[i][j] += leftPrefix5[i][j - 1];\n        }\n      }\n\n    for (int j = 0; j < n; ++j)\n      for (int i = 0; i < m; ++i) {\n        topPrefix2[i][j] = getCount(grid[i][j], 2);\n        topPrefix5[i][j] = getCount(grid[i][j], 5);\n        if (i > 0) {\n          topPrefix2[i][j] += topPrefix2[i - 1][j];\n          topPrefix5[i][j] += topPrefix5[i - 1][j];\n        }\n      }\n\n    int ans = 0;\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        const int curr2 = getCount(grid[i][j], 2);\n        const int curr5 = getCount(grid[i][j], 5);\n        const int l2 = leftPrefix2[i][j];\n        const int l5 = leftPrefix5[i][j];\n        const int r2 = leftPrefix2[i][n - 1] - (j ? leftPrefix2[i][j - 1] : 0);\n        const int r5 = leftPrefix5[i][n - 1] - (j ? leftPrefix5[i][j - 1] : 0);\n        const int t2 = topPrefix2[i][j];\n        const int t5 = topPrefix5[i][j];\n        const int d2 = topPrefix2[m - 1][j] - (i ? topPrefix2[i - 1][j] : 0);\n        const int d5 = topPrefix5[m - 1][j] - (i ? topPrefix5[i - 1][j] : 0);\n        ans = max({ans, min(l2 + t2 - curr2, l5 + t5 - curr5),\n                   min(r2 + t2 - curr2, r5 + t5 - curr5),\n                   min(l2 + d2 - curr2, l5 + d5 - curr5),\n                   min(r2 + d2 - curr2, r5 + d5 - curr5)});\n      }\n\n    return ans;\n  }\n\n private:\n  int getCount(int num, int factor) {\n    int count = 0;\n    while (num % factor == 0) {\n      num /= factor;\n      ++count;\n    }\n    return count;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxTrailingZeros(int[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    // leftPrefix2[i][j] := # of 2 in grid[i][0..j]\n    // leftPrefix5[i][j] := # of 5 in grid[i][0..j]\n    // topPrefix2[i][j] := # of 2 in grid[0..i][j]\n    // topPrefix5[i][j] := # of 5 in grid[0..i][j]\n    int[][] leftPrefix2 = new int[m][n];\n    int[][] leftPrefix5 = new int[m][n];\n    int[][] topPrefix2 = new int[m][n];\n    int[][] topPrefix5 = new int[m][n];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        leftPrefix2[i][j] = getCount(grid[i][j], 2);\n        leftPrefix5[i][j] = getCount(grid[i][j], 5);\n        if (j > 0) {\n          leftPrefix2[i][j] += leftPrefix2[i][j - 1];\n          leftPrefix5[i][j] += leftPrefix5[i][j - 1];\n        }\n      }\n\n    for (int j = 0; j < n; ++j)\n      for (int i = 0; i < m; ++i) {\n        topPrefix2[i][j] = getCount(grid[i][j], 2);\n        topPrefix5[i][j] = getCount(grid[i][j], 5);\n        if (i > 0) {\n          topPrefix2[i][j] += topPrefix2[i - 1][j];\n          topPrefix5[i][j] += topPrefix5[i - 1][j];\n        }\n      }\n\n    int ans = 0;\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        final int curr2 = getCount(grid[i][j], 2);\n        final int curr5 = getCount(grid[i][j], 5);\n        final int l2 = leftPrefix2[i][j];\n        final int l5 = leftPrefix5[i][j];\n        final int r2 = leftPrefix2[i][n - 1] - (j > 0 ? leftPrefix2[i][j - 1] : 0);\n        final int r5 = leftPrefix5[i][n - 1] - (j > 0 ? leftPrefix5[i][j - 1] : 0);\n        final int t2 = topPrefix2[i][j];\n        final int t5 = topPrefix5[i][j];\n        final int d2 = topPrefix2[m - 1][j] - (i > 0 ? topPrefix2[i - 1][j] : 0);\n        final int d5 = topPrefix5[m - 1][j] - (i > 0 ? topPrefix5[i - 1][j] : 0);\n        ans = Math.max(ans, Math.max(Math.max(Math.min(l2 + t2 - curr2, l5 + t5 - curr5),\n                                              Math.min(r2 + t2 - curr2, r5 + t5 - curr5)),\n                                     Math.max(Math.min(l2 + d2 - curr2, l5 + d5 - curr5),\n                                              Math.min(r2 + d2 - curr2, r5 + d5 - curr5))));\n      }\n\n    return ans;\n  }\n\n  private int getCount(int num, int factor) {\n    int count = 0;\n    while (num % factor == 0) {\n      num /= factor;\n      ++count;\n    }\n    return count;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxTrailingZeros(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    # leftPrefix2[i][j] := # of 2 in grid[i][0..j]\n    # leftPrefix5[i][j] := # of 5 in grid[i][0..j]\n    # topPrefix2[i][j] := # of 2 in grid[0..i][j]\n    # topPrefix5[i][j] := # of 5 in grid[0..i][j]\n    leftPrefix2 = [[0] * n for _ in range(m)]\n    leftPrefix5 = [[0] * n for _ in range(m)]\n    topPrefix2 = [[0] * n for _ in range(m)]\n    topPrefix5 = [[0] * n for _ in range(m)]\n\n    def getCount(num: int, factor: int) -> int:\n      count = 0\n      while num % factor == 0:\n        num //= factor\n        count += 1\n      return count\n\n    for i in range(m):\n      for j in range(n):\n        leftPrefix2[i][j] = getCount(grid[i][j], 2)\n        leftPrefix5[i][j] = getCount(grid[i][j], 5)\n        if j:\n          leftPrefix2[i][j] += leftPrefix2[i][j - 1]\n          leftPrefix5[i][j] += leftPrefix5[i][j - 1]\n\n    for j in range(n):\n      for i in range(m):\n        topPrefix2[i][j] = getCount(grid[i][j], 2)\n        topPrefix5[i][j] = getCount(grid[i][j], 5)\n        if i:\n          topPrefix2[i][j] += topPrefix2[i - 1][j]\n          topPrefix5[i][j] += topPrefix5[i - 1][j]\n\n    ans = 0\n    for i in range(m):\n      for j in range(n):\n        curr2 = getCount(grid[i][j], 2)\n        curr5 = getCount(grid[i][j], 5)\n        l2 = leftPrefix2[i][j]\n        l5 = leftPrefix5[i][j]\n        r2 = leftPrefix2[i][n - 1] - (0 if j == 0 else leftPrefix2[i][j - 1])\n        r5 = leftPrefix5[i][n - 1] - (0 if j == 0 else leftPrefix5[i][j - 1])\n        t2 = topPrefix2[i][j]\n        t5 = topPrefix5[i][j]\n        d2 = topPrefix2[m - 1][j] - (0 if i == 0 else topPrefix2[i - 1][j])\n        d5 = topPrefix5[m - 1][j] - (0 if i == 0 else topPrefix5[i - 1][j])\n        ans = max(ans,\n                  min(l2 + t2 - curr2, l5 + t5 - curr5),\n                  min(r2 + t2 - curr2, r5 + t5 - curr5),\n                  min(l2 + d2 - curr2, l5 + d5 - curr5),\n                  min(r2 + d2 - curr2, r5 + d5 - curr5))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}