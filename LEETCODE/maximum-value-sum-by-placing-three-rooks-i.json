{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3256",
            "title": "Maximum Value Sum by Placing Three Rooks I",
            "titleSlug": "maximum-value-sum-by-placing-three-rooks-i",
            "content": "<p>You are given a <code>m x n</code> 2D array <code>board</code> representing a chessboard, where <code>board[i][j]</code> represents the <strong>value</strong> of the cell <code>(i, j)</code>.</p>\n\n<p>Rooks in the <strong>same</strong> row or column <strong>attack</strong> each other. You need to place <em>three</em> rooks on the chessboard such that the rooks <strong>do not</strong> <strong>attack</strong> each other.</p>\n\n<p>Return the <strong>maximum</strong> sum of the cell <strong>values</strong> on which the rooks are placed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = </span>[[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]</p>\n\n<p><strong>Output:</strong> 4</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/08/rooks2.png\" style=\"width: 294px; height: 450px;\" /></p>\n\n<p>We can place the rooks in the cells <code>(0, 2)</code>, <code>(1, 3)</code>, and <code>(2, 1)</code> for a sum of <code>1 + 1 + 2 = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = [[1,2,3],[4,5,6],[7,8,9]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can place the rooks in the cells <code>(0, 0)</code>, <code>(1, 1)</code>, and <code>(2, 2)</code> for a sum of <code>1 + 5 + 9 = 15</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = [[1,1,1],[1,1,1],[1,1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can place the rooks in the cells <code>(0, 2)</code>, <code>(1, 1)</code>, and <code>(2, 0)</code> for a sum of <code>1 + 1 + 1 = 3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= m == board.length &lt;= 100</code></li>\n\t<li><code>3 &lt;= n == board[i].length &lt;= 100</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= board[i][j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 94,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Available Captures for Rook\", \"titleSlug\": \"available-captures-for-rook\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.4K\", \"totalSubmission\": \"51.4K\", \"totalAcceptedRaw\": 7392, \"totalSubmissionRaw\": 51431, \"acRate\": \"14.4%\"}",
            "hints": [
                "Store the largest 3 values for each row.",
                "Select any 3 rows and brute force all combinations."
            ],
            "rephrased": {
                "body": "Given a `m x n` 2D array `board` representing a chessboard, where `board[i][j]` is the value of the cell `(i, j)`. Place three rooks on the chessboard such that no two rooks attack each other (rooks in the same row or column attack each other). Return the maximum sum of the cell values where the rooks are placed.",
                "constraints": [
                    "3 <= m == board.length <= 100",
                    "3 <= n == board[i].length <= 100",
                    "-10<sup>9</sup> <= board[i][j] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "[[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]",
                        "output": "4",
                        "explanation": "The rooks can be placed in cells (0, 2), (1, 3), and (2, 1) for a sum of 1 + 1 + 2 = 4."
                    },
                    {
                        "input": "[[1,2,3],[4,5,6],[7,8,9]]",
                        "output": "15",
                        "explanation": "The rooks can be placed in cells (0, 0), (1, 1), and (2, 2) for a sum of 1 + 5 + 9 = 15."
                    },
                    {
                        "input": "[[1,1,1],[1,1,1],[1,1,1]]",
                        "output": "3",
                        "explanation": "The rooks can be placed in cells (0, 2), (1, 1), and (2, 0) for a sum of 1 + 1 + 1 = 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "available-captures-for-rook",
                "title": "Available Captures for Rook",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Store the largest 3 values for each row.",
            "Select any 3 rows and brute force all combinations."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ]
    }
}