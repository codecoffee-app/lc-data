{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3257",
            "title": "Maximum Value Sum by Placing Three Rooks II",
            "titleSlug": "maximum-value-sum-by-placing-three-rooks-ii",
            "content": "<p>You are given a <code>m x n</code> 2D array <code>board</code> representing a chessboard, where <code>board[i][j]</code> represents the <strong>value</strong> of the cell <code>(i, j)</code>.</p>\n\n<p>Rooks in the <strong>same</strong> row or column <strong>attack</strong> each other. You need to place <em>three</em> rooks on the chessboard such that the rooks <strong>do not</strong> <strong>attack</strong> each other.</p>\n\n<p>Return the <strong>maximum</strong> sum of the cell <strong>values</strong> on which the rooks are placed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = </span>[[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]</p>\n\n<p><strong>Output:</strong> 4</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/08/rooks2.png\" style=\"width: 294px; height: 450px;\" /></p>\n\n<p>We can place the rooks in the cells <code>(0, 2)</code>, <code>(1, 3)</code>, and <code>(2, 1)</code> for a sum of <code>1 + 1 + 2 = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = [[1,2,3],[4,5,6],[7,8,9]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can place the rooks in the cells <code>(0, 0)</code>, <code>(1, 1)</code>, and <code>(2, 2)</code> for a sum of <code>1 + 5 + 9 = 15</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = [[1,1,1],[1,1,1],[1,1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can place the rooks in the cells <code>(0, 2)</code>, <code>(1, 1)</code>, and <code>(2, 0)</code> for a sum of <code>1 + 1 + 1 = 3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= m == board.length &lt;= 500</code></li>\n\t<li><code>3 &lt;= n == board[i].length &lt;= 500</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= board[i][j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 47,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"Available Captures for Rook\", \"titleSlug\": \"available-captures-for-rook\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.3K\", \"totalSubmission\": \"15.3K\", \"totalAcceptedRaw\": 4258, \"totalSubmissionRaw\": 15325, \"acRate\": \"27.8%\"}",
            "hints": [
                "Save the top 3 largest values in each row.",
                "Select any row, and select any of the three values stored in it.",
                "Get the top 4 values from all of the other 3 largest values of the other rows, which do not share the same column as the selected value.",
                "Brute force the selection of 2 positions from the top 4 now."
            ],
            "rephrased": {
                "body": "Given a `m x n` 2D array `board` representing a chessboard, where `board[i][j]` represents the value of the cell `(i, j)`.  Place three rooks on the chessboard such that no two rooks attack each other (rooks in the same row or column attack each other). Return the maximum sum of the cell values on which the rooks are placed.",
                "constraints": [
                    "3 <= m == board.length <= 500",
                    "3 <= n == board[i].length <= 500",
                    "-10<sup>9</sup> <= board[i][j] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "[[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]",
                        "output": "4",
                        "explanation": "The rooks can be placed in cells (0, 2), (1, 3), and (2, 1) for a sum of 1 + 1 + 2 = 4. This placement ensures that no two rooks share the same row or column."
                    },
                    {
                        "input": "[[1,2,3],[4,5,6],[7,8,9]]",
                        "output": "15",
                        "explanation": "The rooks can be placed in cells (0, 0), (1, 1), and (2, 2) for a sum of 1 + 5 + 9 = 15."
                    },
                    {
                        "input": "[[1,1,1],[1,1,1],[1,1,1]]",
                        "output": "3",
                        "explanation": "The rooks can be placed in cells (0, 2), (1, 1), and (2, 0) for a sum of 1 + 1 + 1 = 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "available-captures-for-rook",
                "title": "Available Captures for Rook",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Save the top 3 largest values in each row.",
            "Select any row, and select any of the three values stored in it.",
            "Get the top 4 values from all of the other 3 largest values of the other rows, which do not share the same column as the selected value.",
            "Brute force the selection of 2 positions from the top 4 now."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 3256. Maximum Value Sum by Placing Three Rooks I\n  long long maximumValueSum(vector<vector<int>>& board) {\n    const int m = board.size();\n    const int n = board[0].size();\n    long ans = LONG_MIN;\n    using T = tuple<long, int, int>;\n    vector<vector<T>> rows(m);  // [(val, i, j)]\n    vector<vector<T>> cols(n);  // [(val, i, j)]\n    set<T> rowSet;              // {(val, i, j)}\n    set<T> colSet;              // {(val, i, j)}\n    set<T> topNine;             // {(val, i, j)}\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        rows[i].emplace_back(board[i][j], i, j);\n        cols[j].emplace_back(board[i][j], i, j);\n      }\n\n    auto getTop3 = [](vector<T>& row) -> vector<T> {\n      partial_sort(row.begin(),\n                   row.begin() + min(3, static_cast<int>(row.size())),\n                   row.end(), greater<>());\n      row.resize(min(3, (int)row.size()));\n      return row;\n    };\n\n    for (vector<T>& row : rows) {\n      row = getTop3(row);\n      rowSet.insert(row.begin(), row.end());\n    }\n\n    for (vector<T>& col : cols) {\n      col = getTop3(col);\n      colSet.insert(col.begin(), col.end());\n    }\n\n    set_intersection(rowSet.begin(), rowSet.end(), colSet.begin(), colSet.end(),\n                     inserter(topNine, topNine.begin()));\n\n    // At least 9 positions are required on the board to place 3 rooks such that\n    // none can attack another.\n    if (topNine.size() > 9) {\n      auto it = topNine.begin();\n      advance(it, topNine.size() - 9);\n      topNine.erase(topNine.begin(), it);\n    }\n\n    for (auto it1 = topNine.begin(); it1 != topNine.end(); ++it1)\n      for (auto it2 = next(it1); it2 != topNine.end(); ++it2)\n        for (auto it3 = next(it2); it3 != topNine.end(); ++it3) {\n          const auto [val1, i1, j1] = *it1;\n          const auto [val2, i2, j2] = *it2;\n          const auto [val3, i3, j3] = *it3;\n          if (i1 == i2 || i1 == i3 || i2 == i3 ||  //\n              j1 == j2 || j1 == j3 || j2 == j3)\n            continue;\n          ans = max(ans, val1 + val2 + val3);\n        }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Same as 3256. Maximum Value Sum by Placing Three Rooks I\n  public long maximumValueSum(int[][] board) {\n    final int m = board.length;\n    final int n = board[0].length;\n    long ans = Long.MIN_VALUE;\n    List<int[]>[] rows = new ArrayList[m];\n    List<int[]>[] cols = new ArrayList[n];\n    Set<int[]> rowSet = new HashSet<>();\n    Set<int[]> colSet = new HashSet<>();\n    Set<int[]> boardSet = new HashSet<>();\n\n    for (int i = 0; i < m; ++i)\n      rows[i] = new ArrayList<>();\n\n    for (int j = 0; j < n; ++j)\n      cols[j] = new ArrayList<>();\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        int[] cell = new int[] {board[i][j], i, j};\n        rows[i].add(cell);\n        cols[j].add(cell);\n      }\n\n    Comparator<int[]> comparator = (a, b) -> Integer.compare(b[0], a[0]);\n\n    for (List<int[]> row : rows) {\n      row.sort(comparator);\n      rowSet.addAll(row.subList(0, Math.min(3, row.size())));\n    }\n\n    for (List<int[]> col : cols) {\n      col.sort(comparator);\n      colSet.addAll(col.subList(0, Math.min(3, col.size())));\n    }\n\n    boardSet.addAll(rowSet);\n    boardSet.retainAll(colSet);\n\n    // At least 9 positions are required on the board to place 3 rooks such that\n    // none can attack another.\n    List<int[]> topNine = new ArrayList<>(boardSet);\n    topNine.sort(comparator);\n    topNine = topNine.subList(0, Math.min(9, topNine.size()));\n\n    for (int i = 0; i < topNine.size(); ++i)\n      for (int j = i + 1; j < topNine.size(); ++j)\n        for (int k = j + 1; k < topNine.size(); ++k) {\n          int[] t1 = topNine.get(i);\n          int[] t2 = topNine.get(j);\n          int[] t3 = topNine.get(k);\n          if (t1[1] == t2[1] || t1[1] == t3[1] || t2[1] == t3[1] || //\n              t1[2] == t2[2] || t1[2] == t3[2] || t2[2] == t3[2])\n            continue;\n          ans = Math.max(ans, (long) t1[0] + t2[0] + t3[0]);\n        }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 3256. Maximum Value Sum by Placing Three Rooks I\n  def maximumValueSum(self, board: list[list[int]]) -> int:\n    rows = [heapq.nlargest(3, [(val, i, j)\n            for j, val in enumerate(row)])\n            for i, row in enumerate(board)]\n    cols = [heapq.nlargest(3, [(val, i, j)\n            for i, val in enumerate(col)])\n            for j, col in enumerate(zip(*board))]\n    topNine = heapq.nlargest(9,\n                             set(itertools.chain(*rows)) &\n                             set(itertools.chain(*cols)))\n    return max(\n        (val1 + val2 + val3 for\n         (val1, i1, j1),\n         (val2, i2, j2),\n         (val3, i3, j3) in (itertools.combinations(topNine, 3))\n         if len({i1, i2, i3}) == 3 and len({j1, j2, j3}) == 3))\n",
                "lang_text": "py"
            }
        }
    }
}