{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2271",
            "title": "Maximum White Tiles Covered by a Carpet",
            "titleSlug": "maximum-white-tiles-covered-by-a-carpet",
            "content": "<p>You are given a 2D integer array <code>tiles</code> where <code>tiles[i] = [l<sub>i</sub>, r<sub>i</sub>]</code> represents that every tile <code>j</code> in the range <code>l<sub>i</sub> &lt;= j &lt;= r<sub>i</sub></code> is colored white.</p>\n\n<p>You are also given an integer <code>carpetLen</code>, the length of a single carpet that can be placed <strong>anywhere</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of white tiles that can be covered by the carpet</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/25/example1drawio3.png\" style=\"width: 644px; height: 158px;\" />\n<pre>\n<strong>Input:</strong> tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetLen = 10\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Place the carpet starting on tile 10. \nIt covers 9 white tiles, so we return 9.\nNote that there may be other places where the carpet covers 9 white tiles.\nIt can be shown that the carpet cannot cover more than 9 white tiles.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/24/example2drawio.png\" style=\"width: 231px; height: 168px;\" />\n<pre>\n<strong>Input:</strong> tiles = [[10,11],[1,1]], carpetLen = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Place the carpet starting on tile 10. \nIt covers 2 white tiles, so we return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tiles.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>tiles[i].length == 2</code></li>\n\t<li><code>1 &lt;= l<sub>i</sub> &lt;= r<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= carpetLen &lt;= 10<sup>9</sup></code></li>\n\t<li>The <code>tiles</code> are <strong>non-overlapping</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 751,
            "dislikes": 46,
            "similarQuestions": "[{\"title\": \"Maximum Number of Vowels in a Substring of Given Length\", \"titleSlug\": \"maximum-number-of-vowels-in-a-substring-of-given-length\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.4K\", \"totalSubmission\": \"46K\", \"totalAcceptedRaw\": 15376, \"totalSubmissionRaw\": 45989, \"acRate\": \"33.4%\"}",
            "hints": [
                "Think about the potential placements of the carpet in an optimal solution.",
                "Can we use Prefix Sum and Binary Search to determine how many tiles are covered for a given placement?"
            ],
            "rephrased": {
                "body": "You are given a 2D integer array `tiles` where `tiles[i] = [l\u1d62, r\u1d62]` represents that every tile `j` in the range `l\u1d62 <= j <= r\u1d62` is colored white.\n\nYou are also given an integer `carpetLen`, the length of a single carpet that can be placed **anywhere**.\n\nReturn *the **maximum** number of white tiles that can be covered by the carpet*.",
                "constraints": [
                    "1 <= tiles.length <= 5 * 10\u2074",
                    "tiles[i].length == 2",
                    "1 <= l\u1d62 <= r\u1d62 <= 10\u2079",
                    "1 <= carpetLen <= 10\u2079",
                    "The tiles are **non-overlapping**."
                ],
                "testcases": [
                    {
                        "input": "tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetLen = 10",
                        "output": "9",
                        "explanation": "The carpet placed starting on tile 10 covers the maximum number of white tiles. It covers 9 white tiles (from 10 to 11 and partially 12 to 18), which is the maximum achievable coverage."
                    },
                    {
                        "input": "tiles = [[10,11],[1,1]], carpetLen = 2",
                        "output": "2",
                        "explanation": "The carpet placed starting on tile 10 covers the maximum number of white tiles. It covers 2 white tiles (from 10 to 11)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-vowels-in-a-substring-of-given-length",
                "title": "Maximum Number of Vowels in a Substring of Given Length",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think about the potential placements of the carpet in an optimal solution.",
            "Can we use Prefix Sum and Binary Search to determine how many tiles are covered for a given placement?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumWhiteTiles(vector<vector<int>>& tiles, int carpetLen) {\n    if (any_of(tiles.begin(), tiles.end(), [&](const auto& tile) {\n      return tile[1] - tile[0] + 1 >= carpetLen;\n    }))\n      return carpetLen;\n\n    int ans = 0;\n    vector<int> starts;\n    vector<int> prefix(tiles.size() + 1);\n\n    std::ranges::sort(tiles);\n\n    for (const vector<int>& tile : tiles)\n      starts.push_back(tile[0]);\n\n    for (int i = 0; i < tiles.size(); ++i) {\n      const int length = tiles[i][1] - tiles[i][0] + 1;\n      prefix[i + 1] = prefix[i] + length;\n    }\n\n    for (int i = 0; i < tiles.size(); ++i) {\n      const int s = tiles[i][0];\n      const int carpetEnd = s + carpetLen - 1;\n      const int endIndex =\n          upper_bound(starts.begin(), starts.end(), carpetEnd) -\n          starts.begin() - 1;\n      const int notCover = max(0, tiles[endIndex][1] - carpetEnd);\n      ans = max(ans, prefix[endIndex + 1] - prefix[i] - notCover);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumWhiteTiles(int[][] tiles, int carpetLen) {\n    if (Arrays.stream(tiles).anyMatch(tile -> tile[1] - tile[0] + 1 >= carpetLen))\n      return carpetLen;\n\n    int ans = 0;\n    List<Integer> starts = new ArrayList<>();\n    int[] prefix = new int[tiles.length + 1];\n\n    Arrays.sort(tiles, (a, b) -> a[0] - b[0]);\n\n    for (int[] tile : tiles)\n      starts.add(tile[0]);\n\n    for (int i = 0; i < tiles.length; ++i) {\n      final int length = tiles[i][1] - tiles[i][0] + 1;\n      prefix[i + 1] = prefix[i] + length;\n    }\n\n    for (int i = 0; i < tiles.length; ++i) {\n      final int s = tiles[i][0];\n      final int carpetEnd = s + carpetLen - 1;\n      final int endIndex = firstGreater(starts, carpetEnd) - 1;\n      final int notCover = Math.max(0, tiles[endIndex][1] - carpetEnd);\n      ans = Math.max(ans, prefix[endIndex + 1] - prefix[i] - notCover);\n    }\n\n    return ans;\n  }\n\n  private int firstGreater(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) > target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumWhiteTiles(self, tiles: List[List[int]], carpetLen: int) -> int:\n    if any(tile[1] - tile[0] + 1 >= carpetLen for tile in tiles):\n      return carpetLen\n\n    ans = 0\n    prefix = [0] * (len(tiles) + 1)\n\n    tiles.sort()\n    starts = [tile[0] for tile in tiles]\n\n    for i, tile in enumerate(tiles):\n      length = tile[1] - tile[0] + 1\n      prefix[i + 1] = prefix[i] + length\n\n    for i, (s, _) in enumerate(tiles):\n      carpetEnd = s + carpetLen - 1\n      endIndex = bisect_right(starts, carpetEnd) - 1\n      notCover = max(0, tiles[endIndex][1] - carpetEnd)\n      ans = max(ans, prefix[endIndex + 1] - prefix[i] - notCover)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}