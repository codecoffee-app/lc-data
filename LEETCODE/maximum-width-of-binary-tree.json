{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "662",
            "title": "Maximum Width of Binary Tree",
            "titleSlug": "maximum-width-of-binary-tree",
            "content": "<p>Given the <code>root</code> of a binary tree, return <em>the <strong>maximum width</strong> of the given tree</em>.</p>\n\n<p>The <strong>maximum width</strong> of a tree is the maximum <strong>width</strong> among all levels.</p>\n\n<p>The <strong>width</strong> of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.</p>\n\n<p>It is <strong>guaranteed</strong> that the answer will in the range of a <strong>32-bit</strong> signed integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg\" style=\"width: 359px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,2,5,3,null,9]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The maximum width exists in the third level with length 4 (5,3,null,9).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg\" style=\"width: 442px; height: 422px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,2,5,null,null,9,6,null,7]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/width3-tree.jpg\" style=\"width: 289px; height: 299px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,2,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The maximum width exists in the second level with length 2 (3,2).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 3000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8374,
            "dislikes": 1160,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"347.1K\", \"totalSubmission\": \"811K\", \"totalAcceptedRaw\": 347143, \"totalSubmissionRaw\": 811036, \"acRate\": \"42.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, determine the maximum width of the tree. The maximum width is defined as the largest width among all levels. The width of a level is the distance between the leftmost and rightmost non-null nodes, considering null nodes that would be present in a complete binary tree extending down to that level. The answer is guaranteed to be within the range of a 32-bit signed integer.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 3000].",
                    "-100 <= Node.val <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1,3,2,5,3,null,9]",
                        "output": "4",
                        "explanation": "The maximum width exists in the third level, spanning from the node with value 5 to the node with value 9, including the null node in between. This results in a width of 4."
                    },
                    {
                        "input": "[1,3,2,5,null,null,9,6,null,7]",
                        "output": "7",
                        "explanation": "The maximum width is found on the fourth level. It encompasses the nodes 6 and 7, along with the five null nodes needed to complete the binary tree structure down to that level, giving a width of 7."
                    },
                    {
                        "input": "[1,3,2,5]",
                        "output": "2",
                        "explanation": "The maximum width is found at the second level, encompassing nodes 3 and 2, giving a width of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int widthOfBinaryTree(TreeNode* root) {\n    if (root == nullptr)\n      return 0;\n\n    int ans = 0;\n    queue<pair<TreeNode*, int>> q{{{root, 1}}};  // {node, index}\n\n    while (!q.empty()) {\n      const int offset = q.front().second * 2;\n      ans = max(ans, q.back().second - q.front().second + 1);\n      for (int sz = q.size(); sz > 0; --sz) {\n        const auto [node, index] = q.front();\n        q.pop();\n        if (node->left)\n          q.emplace(node->left, index * 2 - offset);\n        if (node->right)\n          q.emplace(node->right, index * 2 + 1 - offset);\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int widthOfBinaryTree(TreeNode root) {\n    if (root == null)\n      return 0;\n\n    int ans = 0;\n    Deque<Pair<TreeNode, Integer>> q = new ArrayDeque<>(); // {node, index}\n    q.offer(new Pair<>(root, 1));\n\n    while (!q.isEmpty()) {\n      final int offset = q.peekFirst().getValue() * 2;\n      ans = Math.max(ans, q.peekLast().getValue() - q.peekFirst().getValue() + 1);\n      for (int sz = q.size(); sz > 0; --sz) {\n        final TreeNode node = q.peekFirst().getKey();\n        final int index = q.pollFirst().getValue();\n        if (node.left != null)\n          q.offer(new Pair<>(node.left, index * 2 - offset));\n        if (node.right != null)\n          q.offer(new Pair<>(node.right, index * 2 + 1 - offset));\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}