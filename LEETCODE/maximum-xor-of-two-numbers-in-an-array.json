{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "421",
            "title": "Maximum XOR of Two Numbers in an Array",
            "titleSlug": "maximum-xor-of-two-numbers-in-an-array",
            "content": "<p>Given an integer array <code>nums</code>, return <em>the maximum result of </em><code>nums[i] XOR nums[j]</code>, where <code>0 &lt;= i &lt;= j &lt; n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,10,5,25,2,8]\n<strong>Output:</strong> 28\n<strong>Explanation:</strong> The maximum result is 5 XOR 25 = 28.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [14,70,53,83,49,91,36,80,92,51,66,70]\n<strong>Output:</strong> 127\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5318,
            "dislikes": 384,
            "similarQuestions": "[{\"title\": \"Maximum XOR With an Element From Array\", \"titleSlug\": \"maximum-xor-with-an-element-from-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum XOR After Operations \", \"titleSlug\": \"maximum-xor-after-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Prefix Scores of Strings\", \"titleSlug\": \"sum-of-prefix-scores-of-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimize XOR\", \"titleSlug\": \"minimize-xor\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Strong Pair XOR I\", \"titleSlug\": \"maximum-strong-pair-xor-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Strong Pair XOR II\", \"titleSlug\": \"maximum-strong-pair-xor-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"153.7K\", \"totalSubmission\": \"287.3K\", \"totalAcceptedRaw\": 153734, \"totalSubmissionRaw\": 287312, \"acRate\": \"53.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, find the maximum result of `nums[i] XOR nums[j]` where `0 <= i <= j < n`. In simpler terms, find the maximum XOR value you can get from any two numbers within the array (including a number XOR'ed with itself).",
                "constraints": [
                    "1 <= nums.length <= 2 * 10^5",
                    "0 <= nums[i] <= 2^31 - 1"
                ],
                "testcases": [
                    {
                        "input": "[3,10,5,25,2,8]",
                        "output": "28",
                        "explanation": "The maximum XOR result is achieved by 5 XOR 25, which equals 28."
                    },
                    {
                        "input": "[14,70,53,83,49,91,36,80,92,51,66,70]",
                        "output": "127",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-xor-with-an-element-from-array",
                "title": "Maximum XOR With an Element From Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-xor-after-operations",
                "title": "Maximum XOR After Operations ",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-prefix-scores-of-strings",
                "title": "Sum of Prefix Scores of Strings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimize-xor",
                "title": "Minimize XOR",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-strong-pair-xor-i",
                "title": "Maximum Strong Pair XOR I",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-strong-pair-xor-ii",
                "title": "Maximum Strong Pair XOR II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findMaximumXOR(vector<int>& nums) {\n    const int maxNum = *max_element(nums.begin(), nums.end());\n    if (maxNum == 0)\n      return 0;\n    const int maxBit = static_cast<int>(log2(maxNum));\n    int ans = 0;\n    int mask = 0;\n\n    // If ans is 11100 when i = 2, it means that before we reach the last two\n    // bits, 11100 is the maximum XOR we have, and we're going to explore if we\n    // can get another two '1's and put them into ans.\n    for (int i = maxBit; i >= 0; --i) {\n      // Mask grows like: 100...000, 110...000, 111...000, ..., 111...111.\n      mask |= 1 << i;\n      unordered_set<int> prefixes;\n      // We only care about the left parts,\n      // If i = 2, nums = {1110, 1011, 0111}\n      //    -> prefixes = {1100, 1000, 0100}\n      for (const int num : nums)\n        prefixes.insert(num & mask);\n      // If i = 1 and before this iteration, the ans is 10100, it means that we\n      // want to grow the ans to 10100 | 1 << 1 = 10110 and we're looking for\n      // XOR of two prefixes = candidate.\n      const int candidate = ans | 1 << i;\n      for (const int prefix : prefixes)\n        if (prefixes.count(prefix ^ candidate)) {\n          ans = candidate;\n          break;\n        }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findMaximumXOR(int[] nums) {\n    final int maxNum = Arrays.stream(nums).max().getAsInt();\n    if (maxNum == 0)\n      return 0;\n    final int maxBit = (int) (Math.log(maxNum) / Math.log(2));\n    int ans = 0;\n    int mask = 0;\n\n    // If ans is 11100 when i = 2, it means that before we reach the last two\n    // bits, 11100 is the maximum XOR we have, and we're going to explore if we\n    // can get another two '1's and put them into ans.\n    for (int i = maxBit; i >= 0; --i) {\n      // Mask grows like: 100...000, 110...000, 111...000, ..., 111...111.\n      mask |= 1 << i;\n      Set<Integer> prefixes = new HashSet<>();\n      // We only care about the left parts,\n      // If i = 2, nums = {1110, 1011, 0111}\n      //    . prefixes = {1100, 1000, 0100}\n      for (final int num : nums)\n        prefixes.add(num & mask);\n      // If i = 1 and before this iteration, the ans is 10100, it means that we\n      // want to grow the ans to 10100 | 1 << 1 = 10110 and we're looking for\n      // XOR of two prefixes = candidate.\n      final int candidate = ans | 1 << i;\n      for (final int prefix : prefixes)\n        if (prefixes.contains(prefix ^ candidate)) {\n          ans = candidate;\n          break;\n        }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMaximumXOR(self, nums: List[int]) -> int:\n    maxNum = max(nums)\n    if maxNum == 0:\n      return 0\n    maxBit = int(math.log2(maxNum))\n    ans = 0\n    mask = 0\n\n    # If ans is 11100 when i = 2, it means that before we reach the last two\n    # bits, 11100 is the maximum XOR we have, and we're going to explore if we\n    # can get another two '1's and put them into ans.\n    for i in range(maxBit, -1, -1):\n      # Mask grows like: 100...000, 110...000, 111...000, ..., 111...111.\n      mask |= 1 << i\n      # We only care about the left parts,\n      # If i = 2, nums = [1110, 1011, 0111]\n      #    -> prefixes = [1100, 1000, 0100]\n      prefixes = set([num & mask for num in nums])\n      # If i = 1 and before this iteration, the ans is 10100, it means that we\n      # want to grow the ans to 10100 | 1 << 1 = 10110 and we're looking for\n      # XOR of two prefixes = candidate.\n      candidate = ans | 1 << i\n      for prefix in prefixes:\n        if prefix ^ candidate in prefixes:\n          ans = candidate\n          break\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}