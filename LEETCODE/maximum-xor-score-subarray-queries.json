{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3277",
            "title": "Maximum XOR Score Subarray Queries",
            "titleSlug": "maximum-xor-score-subarray-queries",
            "content": "<p>You are given an array <code>nums</code> of <code>n</code> integers, and a 2D integer array <code>queries</code> of size <code>q</code>, where <code>queries[i] = [l<sub>i</sub>, r<sub>i</sub>]</code>.</p>\n\n<p>For each query, you must find the <strong>maximum XOR score</strong> of any <span data-keyword=\"subarray\">subarray</span> of <code>nums[l<sub>i</sub>..r<sub>i</sub>]</code>.</p>\n\n<p>The <strong>XOR score</strong> of an array <code>a</code> is found by repeatedly applying the following operations on <code>a</code> so that only one element remains, that is the <strong>score</strong>:</p>\n\n<ul>\n\t<li>Simultaneously replace <code>a[i]</code> with <code>a[i] XOR a[i + 1]</code> for all indices <code>i</code> except the last one.</li>\n\t<li>Remove the last element of <code>a</code>.</li>\n</ul>\n\n<p>Return an array <code>answer</code> of size <code>q</code> where <code>answer[i]</code> is the answer to query <code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,8,4,32,16,1], queries = [[0,2],[1,4],[0,5]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[12,60,60]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>In the first query, <code>nums[0..2]</code> has 6 subarrays <code>[2]</code>, <code>[8]</code>, <code>[4]</code>, <code>[2, 8]</code>, <code>[8, 4]</code>, and <code>[2, 8, 4]</code> each with a respective XOR score of 2, 8, 4, 10, 12, and 6. The answer for the query is 12, the largest of all XOR scores.</p>\n\n<p>In the second query, the subarray of <code>nums[1..4]</code> with the largest XOR score is <code>nums[1..4]</code> with a score of 60.</p>\n\n<p>In the third query, the subarray of <code>nums[0..5]</code> with the largest XOR score is <code>nums[1..4]</code> with a score of 60.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [0,7,3,2,8,5,1], queries = [[0,3],[1,5],[2,4],[2,6],[5,6]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[7,14,11,14,5]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table height=\"70\" width=\"472\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Index</th>\n\t\t\t<th>nums[l<sub>i</sub>..r<sub>i</sub>]</th>\n\t\t\t<th>Maximum XOR Score Subarray</th>\n\t\t\t<th>Maximum Subarray XOR Score</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td>[0, 7, 3, 2]</td>\n\t\t\t<td>[7]</td>\n\t\t\t<td>7</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>[7, 3, 2, 8, 5]</td>\n\t\t\t<td>[7, 3, 2, 8]</td>\n\t\t\t<td>14</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>[3, 2, 8]</td>\n\t\t\t<td>[3, 2, 8]</td>\n\t\t\t<td>11</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>[3, 2, 8, 5, 1]</td>\n\t\t\t<td>[2, 8, 5, 1]</td>\n\t\t\t<td>14</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>[5, 1]</td>\n\t\t\t<td>[5]</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= q == queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2 </code></li>\n\t<li><code>queries[i] = [l<sub>i</sub>, r<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= l<sub>i</sub> &lt;= r<sub>i</sub> &lt;= n - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 90,
            "dislikes": 15,
            "similarQuestions": "[{\"title\": \"Make the XOR of All Segments Equal to Zero\", \"titleSlug\": \"make-the-xor-of-all-segments-equal-to-zero\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.9K\", \"totalSubmission\": \"8.3K\", \"totalAcceptedRaw\": 3869, \"totalSubmissionRaw\": 8328, \"acRate\": \"46.5%\"}",
            "hints": [
                "Precompute the XOR score of every subarray.",
                "Try to find a relationship between XOR score of <code>nums[i..j], nums[i..j + 1], nums[i..j + 2], \u2026</code>. Do you notice any pattern?",
                "If <code>dp[i][j]</code> is the XOR score of subarray <code>nums[i..j]</code>, <code>dp[i][j] = dp[i - 1][j] XOR dp[i - 1][j + 1]</code>."
            ],
            "rephrased": {
                "body": "Given an array `nums` of `n` integers and a 2D integer array `queries` of size `q`, where `queries[i] = [l<sub>i</sub>, r<sub>i</sub>]`, find the maximum XOR score of any subarray of `nums[l<sub>i</sub>..r<sub>i</sub>]` for each query.\n\nThe XOR score of an array `a` is calculated by repeatedly applying the following operations until only one element remains:\n\n1.  Simultaneously replace `a[i]` with `a[i] XOR a[i + 1]` for all indices `i` except the last one.\n2.  Remove the last element of `a`.\n\nReturn an array `answer` of size `q` where `answer[i]` is the answer to query `i`.",
                "constraints": [
                    "1 <= n == nums.length <= 2000",
                    "0 <= nums[i] <= 2<sup>31</sup> - 1",
                    "1 <= q == queries.length <= 10<sup>5</sup>",
                    "queries[i].length == 2",
                    "queries[i] = [l<sub>i</sub>, r<sub>i</sub>]",
                    "0 <= l<sub>i</sub> <= r<sub>i</sub> <= n - 1"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,8,4,32,16,1], queries = [[0,2],[1,4],[0,5]]",
                        "output": "[12,60,60]",
                        "explanation": "For the first query (nums[0..2] = [2, 8, 4]), the subarrays are [2], [8], [4], [2, 8], [8, 4], and [2, 8, 4] with XOR scores 2, 8, 4, 10, 12, and 6, respectively. The maximum XOR score is 12.\nFor the second query (nums[1..4] = [8, 4, 32, 16,]), the subarray with the maximum XOR score is [8, 4, 32, 16] which equals 60.\nFor the third query (nums[0..5] = [2, 8, 4, 32, 16, 1]), the subarray with the maximum XOR score is [8, 4, 32, 16] which equals 60."
                    },
                    {
                        "input": "nums = [0,7,3,2,8,5,1], queries = [[0,3],[1,5],[2,4],[2,6],[5,6]]",
                        "output": "[7,14,11,14,5]",
                        "explanation": "Query 0: nums[0..3] = [0, 7, 3, 2]. Max XOR score is 7 (from subarray [7]).\nQuery 1: nums[1..5] = [7, 3, 2, 8, 5]. Max XOR score is 14 (from subarray [7, 3, 2, 8]).\nQuery 2: nums[2..4] = [3, 2, 8]. Max XOR score is 11 (from subarray [3, 2, 8]).\nQuery 3: nums[2..6] = [3, 2, 8, 5, 1]. Max XOR score is 14 (from subarray [2, 8, 5, 1]).\nQuery 4: nums[5..6] = [5, 1]. Max XOR score is 5 (from subarray [5])."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "make-the-xor-of-all-segments-equal-to-zero",
                "title": "Make the XOR of All Segments Equal to Zero",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Precompute the XOR score of every subarray.",
            "Try to find a relationship between XOR score of <code>nums[i..j], nums[i..j + 1], nums[i..j + 2], \u2026</code>. Do you notice any pattern?",
            "If <code>dp[i][j]</code> is the XOR score of subarray <code>nums[i..j]</code>, <code>dp[i][j] = dp[i - 1][j] XOR dp[i - 1][j + 1]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> maximumSubarrayXor(vector<int>& nums,\n                                 vector<vector<int>>& queries) {\n    const int n = nums.size();\n    vector<int> ans;\n    // xors[i][j] := the XOR score of nums[i..j]\n    vector<vector<int>> xors(n, vector<int>(n));\n    // dp[i][j] := the maximum XOR score of nums[i..j]\n    vector<vector<int>> dp(n, vector<int>(n));\n\n    for (int i = 0; i < n; ++i) {\n      xors[i][i] = nums[i];\n      dp[i][i] = nums[i];\n    }\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        const int j = i + d;\n        xors[i][j] = xors[i][j - 1] ^ xors[i + 1][j];\n        dp[i][j] = max({xors[i][j], dp[i][j - 1], dp[i + 1][j]});\n      }\n\n    for (const vector<int>& query : queries) {\n      const int l = query[0];\n      const int r = query[1];\n      ans.push_back(dp[l][r]);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] maximumSubarrayXor(int[] nums, int[][] queries) {\n    final int n = nums.length;\n    int[] ans = new int[queries.length];\n    // xors[i][j] := the XOR score of nums[i..j]\n    int[][] xors = new int[n][n];\n    // dp[i][j] := the maximum XOR score of nums[i..j]\n    int[][] dp = new int[n][n];\n\n    for (int i = 0; i < n; ++i) {\n      xors[i][i] = nums[i];\n      dp[i][i] = nums[i];\n    }\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        final int j = i + d;\n        xors[i][j] = xors[i][j - 1] ^ xors[i + 1][j];\n        dp[i][j] = Math.max(xors[i][j], Math.max(dp[i][j - 1], dp[i + 1][j]));\n      }\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int l = queries[i][0];\n      final int r = queries[i][1];\n      ans[i] = dp[l][r];\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumSubarrayXor(\n      self,\n      nums: list[int],\n      queries: list[list[int]]\n  ) -> list[int]:\n    n = len(nums)\n    # xors[i][j] := the XOR score of nums[i..j]\n    xors = [[0] * n for _ in range(n)]\n    # dp[i][j] := the maximum XOR score of nums[i..j]\n    dp = [[0] * n for _ in range(n)]\n\n    for i, num in enumerate(nums):\n      xors[i][i] = num\n      dp[i][i] = num\n\n    for d in range(1, n):\n      for i in range(n - d):\n        j = i + d\n        xors[i][j] = xors[i][j - 1] ^ xors[i + 1][j]\n        dp[i][j] = max(xors[i][j], dp[i][j - 1], dp[i + 1][j])\n\n    return [dp[l][r] for l, r in queries]\n",
                "lang_text": "py"
            }
        }
    }
}