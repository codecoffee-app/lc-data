{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1707",
            "title": "Maximum XOR With an Element From Array",
            "titleSlug": "maximum-xor-with-an-element-from-array",
            "content": "<p>You are given an array <code>nums</code> consisting of non-negative integers. You are also given a <code>queries</code> array, where <code>queries[i] = [x<sub>i</sub>, m<sub>i</sub>]</code>.</p>\n\n<p>The answer to the <code>i<sup>th</sup></code> query is the maximum bitwise <code>XOR</code> value of <code>x<sub>i</sub></code> and any element of <code>nums</code> that does not exceed <code>m<sub>i</sub></code>. In other words, the answer is <code>max(nums[j] XOR x<sub>i</sub>)</code> for all <code>j</code> such that <code>nums[j] &lt;= m<sub>i</sub></code>. If all elements in <code>nums</code> are larger than <code>m<sub>i</sub></code>, then the answer is <code>-1</code>.</p>\n\n<p>Return <em>an integer array </em><code>answer</code><em> where </em><code>answer.length == queries.length</code><em> and </em><code>answer[i]</code><em> is the answer to the </em><code>i<sup>th</sup></code><em> query.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]\n<strong>Output:</strong> [3,3,7]\n<strong>Explanation:</strong>\n1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.\n2) 1 XOR 2 = 3.\n3) 5 XOR 2 = 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]\n<strong>Output:</strong> [15,-1,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length, queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= nums[j], x<sub>i</sub>, m<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1147,
            "dislikes": 35,
            "similarQuestions": "[{\"title\": \"Maximum XOR of Two Numbers in an Array\", \"titleSlug\": \"maximum-xor-of-two-numbers-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Genetic Difference Query\", \"titleSlug\": \"maximum-genetic-difference-query\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimize XOR\", \"titleSlug\": \"minimize-xor\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Strong Pair XOR I\", \"titleSlug\": \"maximum-strong-pair-xor-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Strong Pair XOR II\", \"titleSlug\": \"maximum-strong-pair-xor-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"19.4K\", \"totalSubmission\": \"40K\", \"totalAcceptedRaw\": 19420, \"totalSubmissionRaw\": 40014, \"acRate\": \"48.5%\"}",
            "hints": [
                "In problems involving bitwise operations, we often think on the bits level. In this problem, we can think that to maximize the result of an xor operation, we need to maximize the most significant bit, then the next one, and so on.",
                "If there's some number in the array that is less than m and whose the most significant bit is different than that of x, then xoring with this number maximizes the most significant bit, so I know this bit in the answer is 1.",
                "To check the existence of such numbers and narrow your scope for further bits based on your choice, you can use trie.",
                "You can sort the array and the queries, and maintain the trie such that in each query the trie consists exactly of the valid elements."
            ],
            "rephrased": {
                "body": "Given an array `nums` of non-negative integers and a `queries` array where `queries[i] = [x_i, m_i]`, find the maximum bitwise XOR value of `x_i` with any element of `nums` that is less than or equal to `m_i`. If no element in `nums` satisfies this condition, the answer is -1. Return an array `answer` where `answer[i]` is the result of the i-th query.",
                "constraints": [
                    "1 <= nums.length, queries.length <= 10^5",
                    "queries[i].length == 2",
                    "0 <= nums[j], x_i, m_i <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]",
                        "output": "[3,3,7]",
                        "explanation": "For the first query [3,1], the eligible numbers from 'nums' are 0 and 1. 3 XOR 0 = 3 and 3 XOR 1 = 2. The maximum is 3.\nFor the second query [1,3], the eligible numbers from 'nums' are 0, 1, 2, and 3. The maximum XOR value with 1 among these is 1 XOR 2 = 3.\nFor the third query [5,6], the eligible numbers are 0, 1, 2, 3, 4. The maximum XOR value with 5 among these is 5 XOR 2 = 7."
                    },
                    {
                        "input": "nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]",
                        "output": "[15,-1,5]",
                        "explanation": "For the first query [12,4], the eligible numbers from 'nums' are 2, 3, and 4.  The maximum XOR is 12 XOR 3 = 15 (or 12 XOR 2 = 14 or 12 XOR 4 = 8). \nFor the second query [8,1], the eligible numbers from 'nums' are none (no numbers are <= 1), so the result is -1. \nFor the third query [6,3], the eligible numbers from 'nums' are 2 and 3. The maximum XOR is 6 XOR 3 = 5 (6 XOR 2 = 4)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-xor-of-two-numbers-in-an-array",
                "title": "Maximum XOR of Two Numbers in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-genetic-difference-query",
                "title": "Maximum Genetic Difference Query",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimize-xor",
                "title": "Minimize XOR",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-strong-pair-xor-i",
                "title": "Maximum Strong Pair XOR I",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-strong-pair-xor-ii",
                "title": "Maximum Strong Pair XOR II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "In problems involving bitwise operations, we often think on the bits level. In this problem, we can think that to maximize the result of an xor operation, we need to maximize the most significant bit, then the next one, and so on.",
            "If there's some number in the array that is less than m and whose the most significant bit is different than that of x, then xoring with this number maximizes the most significant bit, so I know this bit in the answer is 1.",
            "To check the existence of such numbers and narrow your scope for further bits based on your choice, you can use trie.",
            "You can sort the array and the queries, and maintain the trie such that in each query the trie consists exactly of the valid elements."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  TrieNode() : children(2) {}\n};\n\nclass BitTrie {\n public:\n  BitTrie(int maxBit) : maxBit(maxBit) {}\n\n  void insert(int num) {\n    shared_ptr<TrieNode> node = root;\n    for (int i = maxBit; i >= 0; --i) {\n      const int bit = num >> i & 1;\n      if (node->children[bit] == nullptr)\n        node->children[bit] = make_shared<TrieNode>();\n      node = node->children[bit];\n    }\n  }\n\n  int getMaxXor(int num) {\n    int maxXor = 0;\n    shared_ptr<TrieNode> node = root;\n    for (int i = maxBit; i >= 0; --i) {\n      const int bit = num >> i & 1;\n      const int toggleBit = bit ^ 1;\n      if (node->children[toggleBit] != nullptr) {\n        maxXor = maxXor | 1 << i;\n        node = node->children[toggleBit];\n      } else if (node->children[bit] != nullptr) {\n        node = node->children[bit];\n      } else {  // Nothing in the Bit Trie.\n        return 0;\n      }\n    }\n    return maxXor;\n  }\n\n private:\n  const int maxBit;\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n};\n\nclass Solution {\n public:\n  vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {\n    vector<int> ans(queries.size(), -1);\n    vector<pair<vector<int>, int>> queryAndIndexes;\n\n    const int maxNumInNums = *max_element(nums.begin(), nums.end());\n    const int maxNumInQuery =\n        max_element(queries.begin(), queries.end(),\n                    [](const vector<int>& a, const vector<int>& b) {\n      return a[0] < b[0];\n    })->at(0);\n    const int maxBit = static_cast<int>(log2(max(maxNumInNums, maxNumInQuery)));\n    BitTrie bitTrie(maxBit);\n\n    for (int i = 0; i < queries.size(); i++)\n      queryAndIndexes.emplace_back(queries[i], i);\n\n    std::ranges::sort(nums);\n    sort(queryAndIndexes.begin(), queryAndIndexes.end(),\n         [](const pair<vector<int>, int>& a, const pair<vector<int>, int>& b) {\n      return a.first[1] < b.first[1];\n    });\n\n    int i = 0;  // nums' index\n    for (const auto& [query, index] : queryAndIndexes) {\n      const int x = query[0];\n      const int m = query[1];\n      while (i < nums.size() && nums[i] <= m)\n        bitTrie.insert(nums[i++]);\n      if (i > 0 && nums[i - 1] <= m)\n        ans[index] = bitTrie.getMaxXor(x);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[2];\n}\n\nclass BitTrie {\n  public BitTrie(int maxBit) {\n    this.maxBit = maxBit;\n  }\n\n  public void insert(int num) {\n    TrieNode node = root;\n    for (int i = maxBit; i >= 0; --i) {\n      final int bit = (int) (num >> i & 1);\n      if (node.children[bit] == null)\n        node.children[bit] = new TrieNode();\n      node = node.children[bit];\n    }\n  }\n\n  public int getMaxXor(int num) {\n    int maxXor = 0;\n    TrieNode node = root;\n    for (int i = maxBit; i >= 0; --i) {\n      final int bit = (int) (num >> i & 1);\n      final int toggleBit = bit ^ 1;\n      if (node.children[toggleBit] != null) {\n        maxXor = maxXor | 1 << i;\n        node = node.children[toggleBit];\n      } else if (node.children[bit] != null) {\n        node = node.children[bit];\n      } else { // Nothing in the Bit Trie.\n        return 0;\n      }\n    }\n    return maxXor;\n  }\n\n  private int maxBit;\n  private TrieNode root = new TrieNode();\n}\n\nclass Solution {\n  public int[] maximizeXor(int[] nums, int[][] queries) {\n    int[] ans = new int[queries.length];\n    Arrays.fill(ans, -1);\n    Pair<int[], Integer>[] queryAndIndexes = new Pair[queries.length];\n\n    final int maxNumInNums = Arrays.stream(nums).max().getAsInt();\n    final int maxNumInQuery = Arrays.stream(queries).mapToInt(query -> query[0]).max().getAsInt();\n    final int maxBit = (int) (Math.log(Math.max(maxNumInNums, maxNumInQuery)) / Math.log(2));\n    BitTrie bitTrie = new BitTrie(maxBit);\n\n    for (int i = 0; i < queries.length; ++i)\n      queryAndIndexes[i] = new Pair<>(queries[i], i);\n\n    Arrays.sort(nums);\n    Arrays.sort(queryAndIndexes, (a, b) -> Integer.compare(a.getKey()[1], b.getKey()[1]));\n\n    int i = 0; // nums' index\n    for (Pair<int[], Integer> pair : queryAndIndexes) {\n      final int[] query = pair.getKey();\n      final int index = pair.getValue();\n      final int x = query[0];\n      final int m = query[1];\n      while (i < nums.length && nums[i] <= m)\n        bitTrie.insert(nums[i++]);\n      if (i > 0 && nums[i - 1] <= m)\n        ans[index] = bitTrie.getMaxXor(x);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children: List[Optional[TrieNode]] = [None] * 2\n\n\nclass BitTrie:\n  def __init__(self, maxBit: int):\n    self.maxBit = maxBit\n    self.root = TrieNode()\n\n  def insert(self, num: int) -> None:\n    node = self.root\n    for i in range(self.maxBit, -1, -1):\n      bit = num >> i & 1\n      if not node.children[bit]:\n        node.children[bit] = TrieNode()\n      node = node.children[bit]\n\n  def getMaxXor(self, num: int) -> int:\n    maxXor = 0\n    node = self.root\n    for i in range(self.maxBit, -1, -1):\n      bit = num >> i & 1\n      toggleBit = bit ^ 1\n      if node.children[toggleBit]:\n        maxXor = maxXor | 1 << i\n        node = node.children[toggleBit]\n      elif node.children[bit]:\n        node = node.children[bit]\n      else:  # Nothing in the Bit Trie.\n        return 0\n    return maxXor\n\n\nclass Solution:\n  def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n    ans = [-1] * len(queries)\n    queryAndIndexes = sorted([(query, i) for i, query in enumerate(queries)],\n                             key=lambda x: x[0][1])\n    maxBit = int(math.log2(max(max(nums), max(x for x, _ in queries))))\n    bitTrie = BitTrie(maxBit)\n\n    nums.sort()\n\n    i = 0  # nums' index\n    for (x, m), index in queryAndIndexes:\n      while i < len(nums) and nums[i] <= m:\n        bitTrie.insert(nums[i])\n        i += 1\n      if i > 0 and nums[i - 1] <= m:\n        ans[index] = bitTrie.getMaxXor(x)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}