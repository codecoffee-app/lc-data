{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2402",
            "title": "Meeting Rooms III",
            "titleSlug": "meeting-rooms-iii",
            "content": "<p>You are given an integer <code>n</code>. There are <code>n</code> rooms numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given a 2D integer array <code>meetings</code> where <code>meetings[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> means that a meeting will be held during the <strong>half-closed</strong> time interval <code>[start<sub>i</sub>, end<sub>i</sub>)</code>. All the values of <code>start<sub>i</sub></code> are <strong>unique</strong>.</p>\n\n<p>Meetings are allocated to rooms in the following manner:</p>\n\n<ol>\n\t<li>Each meeting will take place in the unused room with the <strong>lowest</strong> number.</li>\n\t<li>If there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the <strong>same</strong> duration as the original meeting.</li>\n\t<li>When a room becomes unused, meetings that have an earlier original <strong>start</strong> time should be given the room.</li>\n</ol>\n\n<p>Return<em> the <strong>number</strong> of the room that held the most meetings. </em>If there are multiple rooms, return<em> the room with the <strong>lowest</strong> number.</em></p>\n\n<p>A <strong>half-closed interval</strong> <code>[a, b)</code> is the interval between <code>a</code> and <code>b</code> <strong>including</strong> <code>a</code> and <strong>not including</strong> <code>b</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\n- At time 0, both rooms are not being used. The first meeting starts in room 0.\n- At time 1, only room 1 is not being used. The second meeting starts in room 1.\n- At time 2, both rooms are being used. The third meeting is delayed.\n- At time 3, both rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 1 finishes. The third meeting starts in room 1 for the time period [5,10).\n- At time 10, the meetings in both rooms finish. The fourth meeting starts in room 0 for the time period [10,11).\nBoth rooms 0 and 1 held 2 meetings, so we return 0. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\n- At time 1, all three rooms are not being used. The first meeting starts in room 0.\n- At time 2, rooms 1 and 2 are not being used. The second meeting starts in room 1.\n- At time 3, only room 2 is not being used. The third meeting starts in room 2.\n- At time 4, all three rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 2 finishes. The fourth meeting starts in room 2 for the time period [5,10).\n- At time 6, all three rooms are being used. The fifth meeting is delayed.\n- At time 10, the meetings in rooms 1 and 2 finish. The fifth meeting starts in room 1 for the time period [10,12).\nRoom 0 held 1 meeting while rooms 1 and 2 each held 2 meetings, so we return 1. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>meetings[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li>All the values of <code>start<sub>i</sub></code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 857,
            "dislikes": 50,
            "similarQuestions": "[{\"title\": \"Meeting Rooms\", \"titleSlug\": \"meeting-rooms\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Meeting Rooms II\", \"titleSlug\": \"meeting-rooms-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Events That Can Be Attended\", \"titleSlug\": \"maximum-number-of-events-that-can-be-attended\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Servers That Handled Most Number of Requests\", \"titleSlug\": \"find-servers-that-handled-most-number-of-requests\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Events That Can Be Attended II\", \"titleSlug\": \"maximum-number-of-events-that-can-be-attended-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"31.4K\", \"totalSubmission\": \"93K\", \"totalAcceptedRaw\": 31369, \"totalSubmissionRaw\": 92997, \"acRate\": \"33.7%\"}",
            "hints": [
                "Sort meetings based on start times.",
                "Use two min heaps, the first one keeps track of the numbers of all the rooms that are free. The second heap keeps track of the end times of all the meetings that are happening and the room that they are in.",
                "Keep track of the number of times each room is used in an array.",
                "With each meeting, check if there are any free rooms. If there are, then use the room with the smallest number. Otherwise, assign the meeting to the room whose meeting will end the soonest."
            ],
            "rephrased": {
                "body": "You are given an integer `n` representing the number of rooms, numbered from 0 to `n - 1`. You are also given a 2D integer array `meetings`, where `meetings[i] = [start_i, end_i]` indicates a meeting that will occur in the half-closed interval `[start_i, end_i)`.  All `start_i` values are unique. The goal is to allocate meetings to rooms based on the following rules:\n\n1.  Assign each meeting to the unused room with the lowest number.\n2.  If no rooms are available, delay the meeting until a room becomes free, maintaining the original duration.\n3.  When a room becomes available, prioritize delayed meetings based on their original start time (earliest first).\n\nReturn the room number that hosted the most meetings. If multiple rooms hosted the maximum number of meetings, return the room with the lowest number.",
                "constraints": [
                    "1 <= n <= 100",
                    "1 <= meetings.length <= 10^5",
                    "meetings[i].length == 2",
                    "0 <= start_i < end_i <= 5 * 10^5",
                    "All the values of start_i are unique."
                ],
                "testcases": [
                    {
                        "input": "n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]",
                        "output": "0",
                        "explanation": "The meetings are scheduled as follows:\n- At time 0, meeting [0, 10) is assigned to room 0.\n- At time 1, meeting [1, 5) is assigned to room 1.\n- At time 2, meeting [2, 7) is delayed.\n- At time 3, meeting [3, 4) is delayed.\n- At time 5, room 1 becomes free, and meeting [2, 7) is assigned to room 1, now scheduled for [5, 10).\n- At time 10, room 0 becomes free, and meeting [3, 4) is assigned to room 0, now scheduled for [10, 11).\nRoom 0 hosted 2 meetings and Room 1 hosted 2 meetings. Therefore, the output is 0, since we return the smallest room number if multiple rooms have the most meetings."
                    },
                    {
                        "input": "n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]",
                        "output": "1",
                        "explanation": "The meetings are scheduled as follows:\n- At time 1, meeting [1, 20) is assigned to room 0.\n- At time 2, meeting [2, 10) is assigned to room 1.\n- At time 3, meeting [3, 5) is assigned to room 2.\n- At time 4, meeting [4, 9) is delayed.\n- At time 5, room 2 becomes free, and meeting [4, 9) is assigned to room 2, now scheduled for [5, 10).\n- At time 6, meeting [6, 8) is delayed.\n- At time 10, rooms 1 and 2 become free, and meeting [6, 8) is assigned to room 1, now scheduled for [10, 12).\nRoom 0 hosted 1 meeting, Room 1 hosted 2 meetings, and Room 2 hosted 2 meetings. Therefore, the output is 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "meeting-rooms",
                "title": "Meeting Rooms",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "meeting-rooms-ii",
                "title": "Meeting Rooms II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-events-that-can-be-attended",
                "title": "Maximum Number of Events That Can Be Attended",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-servers-that-handled-most-number-of-requests",
                "title": "Find Servers That Handled Most Number of Requests",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-events-that-can-be-attended-ii",
                "title": "Maximum Number of Events That Can Be Attended II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort meetings based on start times.",
            "Use two min heaps, the first one keeps track of the numbers of all the rooms that are free. The second heap keeps track of the end times of all the meetings that are happening and the room that they are in.",
            "Keep track of the number of times each room is used in an array.",
            "With each meeting, check if there are any free rooms. If there are, then use the room with the smallest number. Otherwise, assign the meeting to the room whose meeting will end the soonest."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ]
    }
}