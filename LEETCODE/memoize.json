{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2623",
            "title": "Memoize",
            "titleSlug": "memoize",
            "content": "<p>Given a function <code>fn</code>, return a&nbsp;<strong>memoized</strong>&nbsp;version of that function.</p>\n\n<p>A&nbsp;<strong>memoized&nbsp;</strong>function is a function that will never be called twice with&nbsp;the same inputs. Instead it will return&nbsp;a cached value.</p>\n\n<p>You can assume there are&nbsp;<strong>3&nbsp;</strong>possible input functions:&nbsp;<code>sum</code><strong>, </strong><code>fib</code><strong>,&nbsp;</strong>and&nbsp;<code>factorial</code><strong>.</strong></p>\n\n<ul>\n\t<li><code>sum</code><strong>&nbsp;</strong>accepts two integers&nbsp;<code>a</code> and <code>b</code> and returns <code>a + b</code>.</li>\n\t<li><code>fib</code><strong>&nbsp;</strong>accepts a&nbsp;single integer&nbsp;<code>n</code> and&nbsp;returns&nbsp;<code>1</code> if <font face=\"monospace\"><code>n &lt;= 1</code> </font>or<font face=\"monospace\">&nbsp;<code>fib(n - 1) + fib(n - 2)</code>&nbsp;</font>otherwise.</li>\n\t<li><code>factorial</code>&nbsp;accepts a single integer&nbsp;<code>n</code> and returns <code>1</code>&nbsp;if&nbsp;<code>n &lt;= 1</code>&nbsp;or&nbsp;<code>factorial(n - 1) * n</code>&nbsp;otherwise.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong>\nfnName = &quot;sum&quot;\nactions = [&quot;call&quot;,&quot;call&quot;,&quot;getCallCount&quot;,&quot;call&quot;,&quot;getCallCount&quot;]\nvalues = [[2,2],[2,2],[],[1,2],[]]\n<strong>Output:</strong> [4,4,1,3,2]\n<strong>Explanation:</strong>\nconst sum = (a, b) =&gt; a + b;\nconst memoizedSum = memoize(sum);\nmemoizedSum(2, 2); // &quot;call&quot; - returns 4. sum() was called as (2, 2) was not seen before.\nmemoizedSum(2, 2); // &quot;call&quot; - returns 4. However sum() was not called because the same inputs were seen before.\n// &quot;getCallCount&quot; - total call count: 1\nmemoizedSum(1, 2); // &quot;call&quot; - returns 3. sum() was called as (1, 2) was not seen before.\n// &quot;getCallCount&quot; - total call count: 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:\n</strong>fnName = &quot;factorial&quot;\nactions = [&quot;call&quot;,&quot;call&quot;,&quot;call&quot;,&quot;getCallCount&quot;,&quot;call&quot;,&quot;getCallCount&quot;]\nvalues = [[2],[3],[2],[],[3],[]]\n<strong>Output:</strong> [2,6,2,2,6,2]\n<strong>Explanation:</strong>\nconst factorial = (n) =&gt; (n &lt;= 1) ? 1 : (n * factorial(n - 1));\nconst memoFactorial = memoize(factorial);\nmemoFactorial(2); // &quot;call&quot; - returns 2.\nmemoFactorial(3); // &quot;call&quot; - returns 6.\nmemoFactorial(2); // &quot;call&quot; - returns 2. However factorial was not called because 2 was seen before.\n// &quot;getCallCount&quot; - total call count: 2\nmemoFactorial(3); // &quot;call&quot; - returns 6. However factorial was not called because 3 was seen before.\n// &quot;getCallCount&quot; - total call count: 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:\n</strong>fnName = &quot;fib&quot;\nactions = [&quot;call&quot;,&quot;getCallCount&quot;]\nvalues = [[5],[]]\n<strong>Output:</strong> [8,1]\n<strong>Explanation:\n</strong>fib(5) = 8 // &quot;call&quot;\n// &quot;getCallCount&quot; - total call count: 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= a, b &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= n &lt;= 10</code></li>\n\t<li><code>0 &lt;= actions.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>actions.length === values.length</code></li>\n\t<li><code>actions[i]</code> is one of &quot;call&quot; and &quot;getCallCount&quot;</li>\n\t<li><code>fnName</code> is one of &quot;sum&quot;, &quot;factorial&quot; and&nbsp;&quot;fib&quot;</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 497,
            "dislikes": 55,
            "similarQuestions": "[{\"title\": \"Counter\", \"titleSlug\": \"counter\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Curry\", \"titleSlug\": \"curry\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Function Composition\", \"titleSlug\": \"function-composition\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Memoize II\", \"titleSlug\": \"memoize-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [],
            "stats": "{\"totalAccepted\": \"57.3K\", \"totalSubmission\": \"92.5K\", \"totalAcceptedRaw\": 57284, \"totalSubmissionRaw\": 92504, \"acRate\": \"61.9%\"}",
            "hints": [
                "You can create copy of a function by spreading function parameters. \r\n\r\nfunction outerFunction(passedFunction) {\r\n  return newFunction(...params) {\r\n    return passedFunction(...params);\r\n  };\r\n}",
                "params is an array. Since you know all values in the array are numbers, you can turn it into a string with JSON.stringify().",
                "In the outerFunction, you can declare a Map or Object. In the inner function you can avoid executing the passed function if the params have already been passed before."
            ],
            "rephrased": {
                "body": "Given a function `fn`, return a **memoized** version of that function.\n\nA **memoized** function is a function that caches the results of its calls, so that if it is called again with the same inputs, it returns the cached value instead of recomputing it.  This optimization avoids redundant computations, especially for expensive functions.\n\nYou can assume there are **3** possible input functions: `sum`, `fib`, and `factorial`.\n\n*   `sum` accepts two integers `a` and `b` and returns `a + b`. \n*   `fib` accepts a single integer `n` and returns `1` if `n <= 1` or `fib(n - 1) + fib(n - 2)` otherwise.\n*   `factorial` accepts a single integer `n` and returns `1` if `n <= 1` or `factorial(n - 1) * n` otherwise.",
                "constraints": [
                    "0 <= a, b <= 10<sup>5</sup>",
                    "1 <= n <= 10",
                    "0 <= actions.length <= 10<sup>5</sup>",
                    "actions.length === values.length",
                    "actions[i] is one of \"call\" and \"getCallCount\"",
                    "fnName is one of \"sum\", \"factorial\" and \"fib\""
                ],
                "testcases": [
                    {
                        "input": {
                            "fnName": "sum",
                            "actions": [
                                "call",
                                "call",
                                "getCallCount",
                                "call",
                                "getCallCount"
                            ],
                            "values": [
                                [
                                    2,
                                    2
                                ],
                                [
                                    2,
                                    2
                                ],
                                [],
                                [
                                    1,
                                    2
                                ],
                                []
                            ]
                        },
                        "output": [
                            4,
                            4,
                            1,
                            3,
                            2
                        ],
                        "explanation": "The `sum` function is memoized. The first call with (2, 2) results in a calculation and caching. The second call with (2, 2) retrieves the cached value.  Then `getCallCount` returns 1. The call with (1, 2) is a new input, so a new calculation occurs. Finally, `getCallCount` returns 2."
                    },
                    {
                        "input": {
                            "fnName": "factorial",
                            "actions": [
                                "call",
                                "call",
                                "call",
                                "getCallCount",
                                "call",
                                "getCallCount"
                            ],
                            "values": [
                                [
                                    2
                                ],
                                [
                                    3
                                ],
                                [
                                    2
                                ],
                                [],
                                [
                                    3
                                ],
                                []
                            ]
                        },
                        "output": [
                            2,
                            6,
                            2,
                            2,
                            6,
                            2
                        ],
                        "explanation": "The `factorial` function is memoized. The first call with 2 calculates and caches.  The second call with 3 calculates and caches.  The third call with 2 retrieves the cached value. `getCallCount` shows the actual calls to factorial were 2. The call with 3 retrieves the cached value. Then, `getCallCount` still returns 2 because calls to memoized function returned cached value not computed again."
                    },
                    {
                        "input": {
                            "fnName": "fib",
                            "actions": [
                                "call",
                                "getCallCount"
                            ],
                            "values": [
                                [
                                    5
                                ],
                                []
                            ]
                        },
                        "output": [
                            8,
                            1
                        ],
                        "explanation": "The `fib` function is memoized. The call to `fib(5)` calculates the result. `getCallCount` shows that the fib function was called only once."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "counter",
                "title": "Counter",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "curry",
                "title": "Curry",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "function-composition",
                "title": "Function Composition",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "memoize-ii",
                "title": "Memoize II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "You can create copy of a function by spreading function parameters. \r\n\r\nfunction outerFunction(passedFunction) {\r\n  return newFunction(...params) {\r\n    return passedFunction(...params);\r\n  };\r\n}",
            "params is an array. Since you know all values in the array are numbers, you can turn it into a string with JSON.stringify().",
            "In the outerFunction, you can declare a Map or Object. In the inner function you can avoid executing the passed function if the params have already been passed before."
        ],
        "relatedTopics": [],
        "solutions": {}
    }
}