{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1932",
            "title": "Merge BSTs to Create Single BST",
            "titleSlug": "merge-bsts-to-create-single-bst",
            "content": "<p>You are given <code>n</code> <strong>BST (binary search tree) root nodes</strong> for <code>n</code> separate BSTs stored in an array <code>trees</code> (<strong>0-indexed</strong>). Each BST in <code>trees</code> has <strong>at most 3 nodes</strong>, and no two roots have the same value. In one operation, you can:</p>\n\n<ul>\n\t<li>Select two <strong>distinct</strong> indices <code>i</code> and <code>j</code> such that the value stored at one of the <strong>leaves </strong>of <code>trees[i]</code> is equal to the <strong>root value</strong> of <code>trees[j]</code>.</li>\n\t<li>Replace the leaf node in <code>trees[i]</code> with <code>trees[j]</code>.</li>\n\t<li>Remove <code>trees[j]</code> from <code>trees</code>.</li>\n</ul>\n\n<p>Return<em> the <strong>root</strong> of the resulting BST if it is possible to form a valid BST after performing </em><code>n - 1</code><em> operations, or</em><em> </em><code>null</code> <i>if it is impossible to create a valid BST</i>.</p>\n\n<p>A BST (binary search tree) is a binary tree where each node satisfies the following property:</p>\n\n<ul>\n\t<li>Every node in the node&#39;s left subtree has a value&nbsp;<strong>strictly less</strong>&nbsp;than the node&#39;s value.</li>\n\t<li>Every node in the node&#39;s right subtree has a value&nbsp;<strong>strictly greater</strong>&nbsp;than the node&#39;s value.</li>\n</ul>\n\n<p>A leaf is a node that has no children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/08/d1.png\" style=\"width: 450px; height: 163px;\" />\n<pre>\n<strong>Input:</strong> trees = [[2,1],[3,2,5],[5,4]]\n<strong>Output:</strong> [3,2,5,1,null,4]\n<strong>Explanation:</strong>\nIn the first operation, pick i=1 and j=0, and merge trees[0] into trees[1].\nDelete trees[0], so trees = [[3,2,5,1],[5,4]].\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/24/diagram.png\" style=\"width: 450px; height: 181px;\" />\nIn the second operation, pick i=0 and j=1, and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[3,2,5,1,null,4]].\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/24/diagram-2.png\" style=\"width: 220px; height: 165px;\" />\nThe resulting tree, shown above, is a valid BST, so return its root.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/08/d2.png\" style=\"width: 450px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> trees = [[5,3,8],[3,2,6]]\n<strong>Output:</strong> []\n<strong>Explanation:</strong>\nPick i=0 and j=1 and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[5,3,8,2,6]].\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/24/diagram-3.png\" style=\"width: 240px; height: 196px;\" />\nThe resulting tree is shown above. This is the only valid operation that can be performed, but the resulting tree is not a valid BST, so return null.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/08/d3.png\" style=\"width: 430px; height: 168px;\" />\n<pre>\n<strong>Input:</strong> trees = [[5,4],[3]]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> It is impossible to perform any operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == trees.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li>The number of nodes in each tree is in the range <code>[1, 3]</code>.</li>\n\t<li>Each node in the input may have children but no grandchildren.</li>\n\t<li>No two roots of <code>trees</code> have the same value.</li>\n\t<li>All the trees in the input are <strong>valid BSTs</strong>.</li>\n\t<li><code>1 &lt;= TreeNode.val &lt;= 5 * 10<sup>4</sup></code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 543,
            "dislikes": 39,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.8K\", \"totalSubmission\": \"21.5K\", \"totalAcceptedRaw\": 7756, \"totalSubmissionRaw\": 21539, \"acRate\": \"36.0%\"}",
            "hints": [
                "Is it possible to have multiple leaf nodes with the same values?",
                "How many possible positions are there for each tree?",
                "The root value of the final tree does not occur as a value in any of the leaves of the original tree."
            ],
            "rephrased": {
                "body": "You are given an array `trees` of `n` BST (binary search tree) root nodes. Each BST has at most 3 nodes, and no two roots have the same value.  Your goal is to merge these BSTs into one valid BST through a series of operations. In each operation, you can select two distinct trees `trees[i]` and `trees[j]` and merge `trees[j]` into `trees[i]` by replacing a leaf node in `trees[i]` with `trees[j]`. After the merge, `trees[j]` is removed from `trees`. Return the root of the resulting BST after performing `n - 1` operations. If it's impossible to create a valid BST, return null.",
                "constraints": [
                    "n == trees.length",
                    "1 <= n <= 5 * 10^4",
                    "The number of nodes in each tree is in the range [1, 3].",
                    "Each node in the input may have children but no grandchildren.",
                    "No two roots of trees have the same value.",
                    "All the trees in the input are valid BSTs.",
                    "1 <= TreeNode.val <= 5 * 10^4"
                ],
                "testcases": [
                    {
                        "input": "[[2,1],[3,2,5],[5,4]]",
                        "output": "[3,2,5,1,null,4]",
                        "explanation": "The trees can be merged in the following order: First, merge the tree with root 2 into the tree with root 3 (at the leaf 2). Then, merge the tree with root 5 into the tree with root 3 (at the leaf 5). The resulting tree is a valid BST."
                    },
                    {
                        "input": "[[5,3,8],[3,2,6]]",
                        "output": "[]",
                        "explanation": "Merging the tree with root 3 into the tree with root 5 results in [5,3,8,2,6] which is not a valid BST. This is the only possible merge, so the result is null."
                    },
                    {
                        "input": "[[5,4],[3]]",
                        "output": "[]",
                        "explanation": "It is impossible to perform any merge operations since no leaf value of one tree matches the root value of another. Therefore, the result is null."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Is it possible to have multiple leaf nodes with the same values?",
            "How many possible positions are there for each tree?",
            "The root value of the final tree does not occur as a value in any of the leaves of the original tree."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ]
    }
}