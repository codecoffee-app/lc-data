{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1669",
            "title": "Merge In Between Linked Lists",
            "titleSlug": "merge-in-between-linked-lists",
            "content": "<p>You are given two linked lists: <code>list1</code> and <code>list2</code> of sizes <code>n</code> and <code>m</code> respectively.</p>\n\n<p>Remove <code>list1</code>&#39;s nodes from the <code>a<sup>th</sup></code> node to the <code>b<sup>th</sup></code> node, and put <code>list2</code> in their place.</p>\n\n<p>The blue edges and nodes in the following figure indicate the result:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/fig1.png\" style=\"height: 130px; width: 504px;\" />\n<p><em>Build the result list and return its head.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/merge_linked_list_ex1.png\" style=\"width: 406px; height: 140px;\" />\n<pre>\n<strong>Input:</strong> list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]\n<strong>Output:</strong> [0,1,2,1000000,1000001,1000002,5]\n<strong>Explanation:</strong> We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/merge_linked_list_ex2.png\" style=\"width: 463px; height: 140px;\" />\n<pre>\n<strong>Input:</strong> list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]\n<strong>Output:</strong> [0,1,1000000,1000001,1000002,1000003,1000004,6]\n<strong>Explanation:</strong> The blue edges and nodes in the above figure indicate the result.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= list1.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= a &lt;= b &lt; list1.length - 1</code></li>\n\t<li><code>1 &lt;= list2.length &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1476,
            "dislikes": 184,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                }
            ],
            "stats": "{\"totalAccepted\": \"83.9K\", \"totalSubmission\": \"115.3K\", \"totalAcceptedRaw\": 83906, \"totalSubmissionRaw\": 115317, \"acRate\": \"72.8%\"}",
            "hints": [
                "Check which edges need to be changed.",
                "Let the next node of the (a-1)th node of list1 be the 0-th node in list 2.",
                "Let the next node of the last node of list2 be the (b+1)-th node in list 1."
            ],
            "rephrased": {
                "body": "Given two linked lists, `list1` and `list2`, modify `list1` by removing the nodes from index `a` to `b` (inclusive) and inserting `list2` in their place. Return the head of the modified `list1`.",
                "constraints": [
                    "3 <= list1.length <= 10^4",
                    "1 <= a <= b < list1.length - 1",
                    "1 <= list2.length <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]",
                        "output": "[0,1,2,1000000,1000001,1000002,5]",
                        "explanation": "Nodes at indices 3 and 4 (values 3 and 4) are removed from list1 and list2 is inserted in their place."
                    },
                    {
                        "input": "list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]",
                        "output": "[0,1,1000000,1000001,1000002,1000003,1000004,6]",
                        "explanation": "Nodes at indices 2, 3, 4, and 5 (values 2, 3, 4, and 5) are removed from list1 and list2 is inserted in their place."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Check which edges need to be changed.",
            "Let the next node of the (a-1)th node of list1 be the 0-th node in list 2.",
            "Let the next node of the last node of list2 be the (b+1)-th node in list 1."
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  ListNode* mergeInBetween(ListNode* list1, int a, int b, ListNode* list2) {\n    ListNode* nodeBeforeA = list1;\n    for (int i = 0; i < a - 1; ++i)\n      nodeBeforeA = nodeBeforeA->next;\n\n    ListNode* nodeB = nodeBeforeA->next;\n    for (int i = 0; i < b - a; ++i)\n      nodeB = nodeB->next;\n\n    nodeBeforeA->next = list2;\n    ListNode* lastNodeInList2 = list2;\n\n    while (lastNodeInList2->next != nullptr)\n      lastNodeInList2 = lastNodeInList2->next;\n\n    lastNodeInList2->next = nodeB->next;\n    nodeB->next = nullptr;\n    return list1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {\n    ListNode nodeBeforeA = list1;\n    for (int i = 0; i < a - 1; ++i)\n      nodeBeforeA = nodeBeforeA.next;\n\n    ListNode nodeB = nodeBeforeA.next;\n    for (int i = 0; i < b - a; ++i)\n      nodeB = nodeB.next;\n\n    nodeBeforeA.next = list2;\n    ListNode lastNodeInList2 = list2;\n\n    while (lastNodeInList2.next != null)\n      lastNodeInList2 = lastNodeInList2.next;\n\n    lastNodeInList2.next = nodeB.next;\n    nodeB.next = null;\n    return list1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def mergeInBetween(self, list1: ListNode, a: int, b: int, list2: ListNode) -> ListNode:\n    nodeBeforeA = list1\n    for i in range(a - 1):\n      nodeBeforeA = nodeBeforeA.next\n\n    nodeB = nodeBeforeA.next\n    for i in range(b - a):\n      nodeB = nodeB.next\n\n    nodeBeforeA.next = list2\n    lastNodeInList2 = list2\n\n    while lastNodeInList2.next:\n      lastNodeInList2 = lastNodeInList2.next\n\n    lastNodeInList2.next = nodeB.next\n    nodeB.next = None\n    return list1\n",
                "lang_text": "py"
            }
        }
    }
}