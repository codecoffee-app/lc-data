{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "56",
            "title": "Merge Intervals",
            "titleSlug": "merge-intervals",
            "content": "<p>Given an array&nbsp;of <code>intervals</code>&nbsp;where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[2,6],[8,10],[15,18]]\n<strong>Output:</strong> [[1,6],[8,10],[15,18]]\n<strong>Explanation:</strong> Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[4,5]]\n<strong>Output:</strong> [[1,5]]\n<strong>Explanation:</strong> Intervals [1,4] and [4,5] are considered overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 21363,
            "dislikes": 732,
            "similarQuestions": "[{\"title\": \"Insert Interval\", \"titleSlug\": \"insert-interval\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Meeting Rooms\", \"titleSlug\": \"meeting-rooms\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Meeting Rooms II\", \"titleSlug\": \"meeting-rooms-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Teemo Attacking\", \"titleSlug\": \"teemo-attacking\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Add Bold Tag in String\", \"titleSlug\": \"add-bold-tag-in-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Module\", \"titleSlug\": \"range-module\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Employee Free Time\", \"titleSlug\": \"employee-free-time\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Partition Labels\", \"titleSlug\": \"partition-labels\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Interval List Intersections\", \"titleSlug\": \"interval-list-intersections\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Amount of New Area Painted Each Day\", \"titleSlug\": \"amount-of-new-area-painted-each-day\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Substring of One Repeating Character\", \"titleSlug\": \"longest-substring-of-one-repeating-character\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Integers in Intervals\", \"titleSlug\": \"count-integers-in-intervals\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Divide Intervals Into Minimum Number of Groups\", \"titleSlug\": \"divide-intervals-into-minimum-number-of-groups\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Determine if Two Events Have Conflict\", \"titleSlug\": \"determine-if-two-events-have-conflict\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Ways to Group Overlapping Ranges\", \"titleSlug\": \"count-ways-to-group-overlapping-ranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Points That Intersect With Cars\", \"titleSlug\": \"points-that-intersect-with-cars\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"2.2M\", \"totalSubmission\": \"4.6M\", \"totalAcceptedRaw\": 2166993, \"totalSubmissionRaw\": 4628087, \"acRate\": \"46.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of intervals, where each interval is represented as `[start_i, end_i]`, merge all overlapping intervals. Return a new array containing only the non-overlapping intervals that completely cover all intervals from the original input.",
                "constraints": [
                    "1 <= intervals.length <= 10^4",
                    "intervals[i].length == 2",
                    "0 <= start_i <= end_i <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[[1,3],[2,6],[8,10],[15,18]]",
                        "output": "[[1,6],[8,10],[15,18]]",
                        "explanation": "The intervals [1,3] and [2,6] overlap and are merged into [1,6].  The other intervals do not overlap, and are included as is."
                    },
                    {
                        "input": "[[1,4],[4,5]]",
                        "output": "[[1,5]]",
                        "explanation": "The intervals [1,4] and [4,5] overlap and are merged into [1,5]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "insert-interval",
                "title": "Insert Interval",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "meeting-rooms",
                "title": "Meeting Rooms",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "meeting-rooms-ii",
                "title": "Meeting Rooms II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "teemo-attacking",
                "title": "Teemo Attacking",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "add-bold-tag-in-string",
                "title": "Add Bold Tag in String",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "range-module",
                "title": "Range Module",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "employee-free-time",
                "title": "Employee Free Time",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "partition-labels",
                "title": "Partition Labels",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "interval-list-intersections",
                "title": "Interval List Intersections",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "amount-of-new-area-painted-each-day",
                "title": "Amount of New Area Painted Each Day",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-substring-of-one-repeating-character",
                "title": "Longest Substring of One Repeating Character",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-integers-in-intervals",
                "title": "Count Integers in Intervals",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "divide-intervals-into-minimum-number-of-groups",
                "title": "Divide Intervals Into Minimum Number of Groups",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "determine-if-two-events-have-conflict",
                "title": "Determine if Two Events Have Conflict",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-ways-to-group-overlapping-ranges",
                "title": "Count Ways to Group Overlapping Ranges",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "points-that-intersect-with-cars",
                "title": "Points That Intersect With Cars",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> merge(vector<vector<int>>& intervals) {\n    vector<vector<int>> ans;\n\n    std::ranges::sort(intervals);\n\n    for (const vector<int>& interval : intervals)\n      if (ans.empty() || ans.back()[1] < interval[0])\n        ans.push_back(interval);\n      else\n        ans.back()[1] = max(ans.back()[1], interval[1]);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] merge(int[][] intervals) {\n    List<int[]> ans = new ArrayList<>();\n\n    Arrays.sort(intervals, (a, b) -> (a[0] - b[0]));\n\n    for (int[] interval : intervals)\n      if (ans.isEmpty() || ans.get(ans.size() - 1)[1] < interval[0])\n        ans.add(interval);\n      else\n        ans.get(ans.size() - 1)[1] = Math.max(ans.get(ans.size() - 1)[1], interval[1]);\n\n    return ans.toArray(int[][] ::new);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n    ans = []\n\n    for interval in sorted(intervals):\n      if not ans or ans[-1][1] < interval[0]:\n        ans.append(interval)\n      else:\n        ans[-1][1] = max(ans[-1][1], interval[1])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}