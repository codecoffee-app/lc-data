{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2363",
            "title": "Merge Similar Items",
            "titleSlug": "merge-similar-items",
            "content": "<p>You are given two 2D integer arrays, <code>items1</code> and <code>items2</code>, representing two sets of items. Each array <code>items</code> has the following properties:</p>\n\n<ul>\n\t<li><code>items[i] = [value<sub>i</sub>, weight<sub>i</sub>]</code> where <code>value<sub>i</sub></code> represents the <strong>value</strong> and <code>weight<sub>i</sub></code> represents the <strong>weight </strong>of the <code>i<sup>th</sup></code> item.</li>\n\t<li>The value of each item in <code>items</code> is <strong>unique</strong>.</li>\n</ul>\n\n<p>Return <em>a 2D integer array</em> <code>ret</code> <em>where</em> <code>ret[i] = [value<sub>i</sub>, weight<sub>i</sub>]</code><em>,</em> <em>with</em> <code>weight<sub>i</sub></code> <em>being the <strong>sum of weights</strong> of all items with value</em> <code>value<sub>i</sub></code>.</p>\n\n<p><strong>Note:</strong> <code>ret</code> should be returned in <strong>ascending</strong> order by value.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]\n<strong>Output:</strong> [[1,6],[3,9],[4,5]]\n<strong>Explanation:</strong> \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 5, total weight = 1 + 5 = 6.\nThe item with value = 3 occurs in items1 with weight = 8 and in items2 with weight = 1, total weight = 8 + 1 = 9.\nThe item with value = 4 occurs in items1 with weight = 5, total weight = 5.  \nTherefore, we return [[1,6],[3,9],[4,5]].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]\n<strong>Output:</strong> [[1,4],[2,4],[3,4]]\n<strong>Explanation:</strong> \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 3, total weight = 1 + 3 = 4.\nThe item with value = 2 occurs in items1 with weight = 3 and in items2 with weight = 1, total weight = 3 + 1 = 4.\nThe item with value = 3 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4.\nTherefore, we return [[1,4],[2,4],[3,4]].</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]\n<strong>Output:</strong> [[1,7],[2,4],[7,1]]\n<strong>Explanation:\n</strong>The item with value = 1 occurs in items1 with weight = 3 and in items2 with weight = 4, total weight = 3 + 4 = 7. \nThe item with value = 2 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4. \nThe item with value = 7 occurs in items2 with weight = 1, total weight = 1.\nTherefore, we return [[1,7],[2,4],[7,1]].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= items1.length, items2.length &lt;= 1000</code></li>\n\t<li><code>items1[i].length == items2[i].length == 2</code></li>\n\t<li><code>1 &lt;= value<sub>i</sub>, weight<sub>i</sub> &lt;= 1000</code></li>\n\t<li>Each <code>value<sub>i</sub></code> in <code>items1</code> is <strong>unique</strong>.</li>\n\t<li>Each <code>value<sub>i</sub></code> in <code>items2</code> is <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 517,
            "dislikes": 22,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"48.9K\", \"totalSubmission\": \"64.8K\", \"totalAcceptedRaw\": 48923, \"totalSubmissionRaw\": 64775, \"acRate\": \"75.5%\"}",
            "hints": [
                "Map the weights using the corresponding values as keys.",
                "Make sure your output is sorted in ascending order by value."
            ],
            "rephrased": {
                "body": "You are given two 2D integer arrays, `items1` and `items2`, representing two sets of items. Each item is defined as `[value, weight]`.  Each array `items` has the following properties:\n\n*   `items[i] = [value<sub>i</sub>, weight<sub>i</sub>]` where `value<sub>i</sub>` represents the **value** and `weight<sub>i</sub>` represents the **weight** of the `i<sup>th</sup>` item.\n*   The value of each item in `items` is **unique**.\n\nReturn a 2D integer array `ret` where `ret[i] = [value<sub>i</sub>, weight<sub>i</sub>]`, with `weight<sub>i</sub>` being the **sum of weights** of all items with value `value<sub>i</sub>`. The returned array `ret` should be sorted in **ascending** order by value.",
                "constraints": [
                    "1 <= items1.length, items2.length <= 1000",
                    "items1[i].length == items2[i].length == 2",
                    "1 <= value<sub>i</sub>, weight<sub>i</sub> <= 1000",
                    "Each value<sub>i</sub> in items1 is unique.",
                    "Each value<sub>i</sub> in items2 is unique."
                ],
                "testcases": [
                    {
                        "input": "items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]",
                        "output": "[[1,6],[3,9],[4,5]]",
                        "explanation": "The item with value 1 has a weight of 1 in items1 and 5 in items2, resulting in a total weight of 6. The item with value 3 has a weight of 8 in items1 and 1 in items2, resulting in a total weight of 9. The item with value 4 has a weight of 5 in items1, resulting in a total weight of 5. The output array is sorted by value."
                    },
                    {
                        "input": "items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]",
                        "output": "[[1,4],[2,4],[3,4]]",
                        "explanation": "The item with value 1 has a weight of 1 in items1 and 3 in items2, resulting in a total weight of 4. The item with value 2 has a weight of 3 in items1 and 1 in items2, resulting in a total weight of 4. The item with value 3 has a weight of 2 in items1 and 2 in items2, resulting in a total weight of 4. The output array is sorted by value."
                    },
                    {
                        "input": "items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]",
                        "output": "[[1,7],[2,4],[7,1]]",
                        "explanation": "The item with value 1 has a weight of 3 in items1 and 4 in items2, resulting in a total weight of 7. The item with value 2 has a weight of 2 in items1 and 2 in items2, resulting in a total weight of 4. The item with value 7 has a weight of 1 in items2, resulting in a total weight of 1. The output array is sorted by value."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Map the weights using the corresponding values as keys.",
            "Make sure your output is sorted in ascending order by value."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> mergeSimilarItems(vector<vector<int>>& items1,\n                                        vector<vector<int>>& items2) {\n    constexpr int kMax = 1000;\n    vector<vector<int>> ans;\n    vector<int> count(kMax + 1);\n\n    for (const vector<int>& item : items1)\n      count[item[0]] += item[1];\n\n    for (const vector<int>& item : items2)\n      count[item[0]] += item[1];\n\n    for (int i = 1; i <= kMax; ++i)\n      if (count[i])\n        ans.push_back({i, count[i]});\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> mergeSimilarItems(int[][] items1, int[][] items2) {\n    final int kMax = 1000;\n    List<List<Integer>> ans = new ArrayList<>();\n    int[] count = new int[kMax + 1];\n\n    for (int[] item : items1)\n      count[item[0]] += item[1];\n\n    for (int[] item : items2)\n      count[item[0]] += item[1];\n\n    for (int i = 1; i <= kMax; ++i)\n      if (count[i] > 0)\n        ans.add(Arrays.asList(i, count[i]));\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def mergeSimilarItems(self, items1: List[List[int]], items2: List[List[int]]) -> List[List[int]]:\n    return sorted((Counter(dict(items1)) + collections.Counter(dict(items2))).items())\n",
                "lang_text": "py"
            }
        }
    }
}