{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "88",
            "title": "Merge Sorted Array",
            "titleSlug": "merge-sorted-array",
            "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p>\n\n<p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p>\n\n<p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array </em><code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n<strong>Output:</strong> [1,2,2,3,5,6]\n<strong>Explanation:</strong> The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [<u>1</u>,<u>2</u>,2,<u>3</u>,5,6] with the underlined elements coming from nums1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1], m = 1, nums2 = [], n = 0\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0], m = 0, nums2 = [1], n = 1\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m + n</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 200</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up: </strong>Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 13553,
            "dislikes": 1596,
            "similarQuestions": "[{\"title\": \"Merge Two Sorted Lists\", \"titleSlug\": \"merge-two-sorted-lists\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Squares of a Sorted Array\", \"titleSlug\": \"squares-of-a-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Interval List Intersections\", \"titleSlug\": \"interval-list-intersections\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Take K of Each Character From Left and Right\", \"titleSlug\": \"take-k-of-each-character-from-left-and-right\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"2.7M\", \"totalSubmission\": \"5.5M\", \"totalAcceptedRaw\": 2668060, \"totalSubmissionRaw\": 5493276, \"acRate\": \"48.6%\"}",
            "hints": [
                "You can easily solve this problem if you simply think about two elements at a time rather than two arrays. We know that each of the individual arrays is sorted. What we don't know is how they will intertwine. Can we take a local decision and arrive at an optimal solution?",
                "If you simply consider one element each at a time from the two arrays and make a decision and proceed accordingly, you will arrive at the optimal solution."
            ],
            "rephrased": {
                "body": "You are given two integer arrays `nums1` and `nums2`, both sorted in non-decreasing order.  You are also given two integers `m` and `n`, representing the number of valid elements in `nums1` and `nums2` respectively. Merge `nums1` and `nums2` into a single array sorted in non-decreasing order, stored directly within `nums1`. `nums1` has a length of `m + n`, with the first `m` elements representing the initial elements, and the last `n` elements initialized to 0 and to be overwritten. `nums2` has a length of `n`.",
                "constraints": [
                    "`nums1.length == m + n`",
                    "`nums2.length == n`",
                    "`0 <= m, n <= 200`",
                    "`1 <= m + n <= 200`",
                    "`-10^9 <= nums1[i], nums2[j] <= 10^9`"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
                        "output": "[1,2,2,3,5,6]",
                        "explanation": "Merging [1,2,3] and [2,5,6] results in [1,2,2,3,5,6]. The underlined elements in the original problem statement denoted which elements originated from `nums1`."
                    },
                    {
                        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
                        "output": "[1]",
                        "explanation": "Merging [1] and [] results in [1]."
                    },
                    {
                        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
                        "output": "[1]",
                        "explanation": "Merging [] and [1] results in [1]. The initial 0 in `nums1` is overwritten by the elements from `nums2`."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "merge-two-sorted-lists",
                "title": "Merge Two Sorted Lists",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "squares-of-a-sorted-array",
                "title": "Squares of a Sorted Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "interval-list-intersections",
                "title": "Interval List Intersections",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "take-k-of-each-character-from-left-and-right",
                "title": "Take K of Each Character From Left and Right",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "You can easily solve this problem if you simply think about two elements at a time rather than two arrays. We know that each of the individual arrays is sorted. What we don't know is how they will intertwine. Can we take a local decision and arrive at an optimal solution?",
            "If you simply consider one element each at a time from the two arrays and make a decision and proceed accordingly, you will arrive at the optimal solution."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n    int i = m - 1;      // nums1's index (actual nums)\n    int j = n - 1;      // nums2's index\n    int k = m + n - 1;  // nums1's index (next filled position)\n\n    while (j >= 0)\n      if (i >= 0 && nums1[i] > nums2[j])\n        nums1[k--] = nums1[i--];\n      else\n        nums1[k--] = nums2[j--];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public void merge(int[] nums1, int m, int[] nums2, int n) {\n    int i = m - 1;     // nums1's index (actual nums)\n    int j = n - 1;     // nums2's index\n    int k = m + n - 1; // nums1's index (next filled position)\n\n    while (j >= 0)\n      if (i >= 0 && nums1[i] > nums2[j])\n        nums1[k--] = nums1[i--];\n      else\n        nums1[k--] = nums2[j--];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n    i = m - 1      # nums1's index (actual nums)\n    j = n - 1      # nums2's index\n    k = m + n - 1  # nums1's index (next filled position)\n\n    while j >= 0:\n      if i >= 0 and nums1[i] > nums2[j]:\n        nums1[k] = nums1[i]\n        k -= 1\n        i -= 1\n      else:\n        nums1[k] = nums2[j]\n        k -= 1\n        j -= 1\n",
                "lang_text": "py"
            }
        }
    }
}