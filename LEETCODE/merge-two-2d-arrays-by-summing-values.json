{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2570",
            "title": "Merge Two 2D Arrays by Summing Values",
            "titleSlug": "merge-two-2d-arrays-by-summing-values",
            "content": "<p>You are given two <strong>2D</strong> integer arrays <code>nums1</code> and <code>nums2.</code></p>\n\n<ul>\n\t<li><code>nums1[i] = [id<sub>i</sub>, val<sub>i</sub>]</code>&nbsp;indicate that the number with the id <code>id<sub>i</sub></code> has a value equal to <code>val<sub>i</sub></code>.</li>\n\t<li><code>nums2[i] = [id<sub>i</sub>, val<sub>i</sub>]</code>&nbsp;indicate that the number with the id <code>id<sub>i</sub></code> has a value equal to <code>val<sub>i</sub></code>.</li>\n</ul>\n\n<p>Each array contains <strong>unique</strong> ids and is sorted in <strong>ascending</strong> order by id.</p>\n\n<p>Merge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:</p>\n\n<ul>\n\t<li>Only ids that appear in at least one of the two arrays should be included in the resulting array.</li>\n\t<li>Each id should be included <strong>only once</strong> and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays then its value in that array is considered to be <code>0</code>.</li>\n</ul>\n\n<p>Return <em>the resulting array</em>. The returned array must be sorted in ascending order by id.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]\n<strong>Output:</strong> [[1,6],[2,3],[3,2],[4,6]]\n<strong>Explanation:</strong> The resulting array contains the following:\n- id = 1, the value of this id is 2 + 4 = 6.\n- id = 2, the value of this id is 3.\n- id = 3, the value of this id is 2.\n- id = 4, the value of this id is 5 + 1 = 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]\n<strong>Output:</strong> [[1,3],[2,4],[3,6],[4,3],[5,5]]\n<strong>Explanation:</strong> There are no common ids, so we just include each id with its value in the resulting list.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 200</code></li>\n\t<li><code>nums1[i].length == nums2[j].length == 2</code></li>\n\t<li><code>1 &lt;= id<sub>i</sub>, val<sub>i</sub> &lt;= 1000</code></li>\n\t<li>Both arrays contain unique ids.</li>\n\t<li>Both arrays are in&nbsp;strictly ascending order by id.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 302,
            "dislikes": 10,
            "similarQuestions": "[{\"title\": \"Merge Two Sorted Lists\", \"titleSlug\": \"merge-two-sorted-lists\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Meeting Scheduler\", \"titleSlug\": \"meeting-scheduler\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                }
            ],
            "stats": "{\"totalAccepted\": \"36K\", \"totalSubmission\": \"49.2K\", \"totalAcceptedRaw\": 35967, \"totalSubmissionRaw\": 49183, \"acRate\": \"73.1%\"}",
            "hints": [
                "Use a dictionary/hash map to keep track of the indices and their sum\r\nvalues."
            ],
            "rephrased": {
                "body": "You are given two 2D integer arrays `nums1` and `nums2`. Each array contains unique IDs and is sorted in ascending order by ID.  `nums1[i] = [id_i, val_i]` indicates that the number with the ID `id_i` has a value equal to `val_i`. The same applies to `nums2`.  Merge the two arrays into one array sorted in ascending order by ID.  For each ID, include it in the resulting array only once. Its value should be the sum of its values in the two input arrays. If an ID exists in only one array, its value in the other array is considered 0. Return the resulting merged array.",
                "constraints": [
                    "1 <= nums1.length, nums2.length <= 200",
                    "nums1[i].length == nums2[j].length == 2",
                    "1 <= id_i, val_i <= 1000",
                    "Both arrays contain unique IDs.",
                    "Both arrays are in strictly ascending order by ID."
                ],
                "testcases": [
                    {
                        "input": "nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]",
                        "output": "[[1,6],[2,3],[3,2],[4,6]]",
                        "explanation": "ID 1: 2 + 4 = 6\nID 2: 3 + 0 = 3\nID 3: 0 + 2 = 2\nID 4: 5 + 1 = 6"
                    },
                    {
                        "input": "nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]",
                        "output": "[[1,3],[2,4],[3,6],[4,3],[5,5]]",
                        "explanation": "No common IDs. Each ID and its value are simply included in the resulting array."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "merge-two-sorted-lists",
                "title": "Merge Two Sorted Lists",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "meeting-scheduler",
                "title": "Meeting Scheduler",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Use a dictionary/hash map to keep track of the indices and their sum\r\nvalues."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> mergeArrays(vector<vector<int>>& nums1,\n                                  vector<vector<int>>& nums2) {\n    constexpr int kMax = 1000;\n    vector<vector<int>> ans;\n    vector<int> count(kMax + 1);\n\n    addCount(nums1, count);\n    addCount(nums2, count);\n\n    for (int i = 1; i <= kMax; ++i)\n      if (count[i] > 0)\n        ans.push_back({i, count[i]});\n\n    return ans;\n  }\n\n private:\n  void addCount(const vector<vector<int>>& nums, vector<int>& count) {\n    for (const vector<int>& idAndVal : nums) {\n      const int id = idAndVal[0];\n      const int val = idAndVal[1];\n      count[id] += val;\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] mergeArrays(int[][] nums1, int[][] nums2) {\n    final int kMax = 1000;\n    List<int[]> ans = new ArrayList<>();\n    int[] count = new int[kMax + 1];\n\n    addCount(nums1, count);\n    addCount(nums2, count);\n\n    for (int i = 1; i <= kMax; ++i)\n      if (count[i] > 0)\n        ans.add(new int[] {i, count[i]});\n\n    return ans.stream().toArray(int[][] ::new);\n  }\n\n  private void addCount(int[][] nums, int[] count) {\n    for (int[] idAndVal : nums) {\n      final int id = idAndVal[0];\n      final int val = idAndVal[1];\n      count[id] += val;\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:\n    count = [0] * (1001)\n    self._addCount(nums1, count)\n    self._addCount(nums2, count)\n    return [[i, c] for i, c in enumerate(count) if c > 0]\n\n  def _addCount(self, nums: List[List[int]], count: List[int]) -> None:\n    for id_, val in nums:\n      count[id_] += val\n",
                "lang_text": "py"
            }
        }
    }
}