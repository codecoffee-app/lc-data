{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1584",
            "title": "Min Cost to Connect All Points",
            "titleSlug": "min-cost-to-connect-all-points",
            "content": "<p>You are given an array <code>points</code> representing integer coordinates of some points on a 2D-plane, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p>\n\n<p>The cost of connecting two points <code>[x<sub>i</sub>, y<sub>i</sub>]</code> and <code>[x<sub>j</sub>, y<sub>j</sub>]</code> is the <strong>manhattan distance</strong> between them: <code>|x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|</code>, where <code>|val|</code> denotes the absolute value of <code>val</code>.</p>\n\n<p>Return <em>the minimum cost to make all points connected.</em> All points are connected if there is <strong>exactly one</strong> simple path between any two points.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/26/d.png\" style=\"width: 214px; height: 268px;\" />\n<pre>\n<strong>Input:</strong> points = [[0,0],[2,2],[3,10],[5,2],[7,0]]\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> \n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/26/c.png\" style=\"width: 214px; height: 268px;\" />\nWe can connect the points as shown above to get the minimum cost of 20.\nNotice that there is a unique path between every pair of points.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[3,12],[-2,5],[-4,1]]\n<strong>Output:</strong> 18\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 1000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li>All pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are distinct.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4817,
            "dislikes": 116,
            "similarQuestions": "[{\"title\": \"Minimum Number of Lines to Cover Points\", \"titleSlug\": \"minimum-number-of-lines-to-cover-points\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Minimum Spanning Tree",
                    "slug": "minimum-spanning-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"255.7K\", \"totalSubmission\": \"384.2K\", \"totalAcceptedRaw\": 255749, \"totalSubmissionRaw\": 384237, \"acRate\": \"66.6%\"}",
            "hints": [
                "Connect each pair of points with a weighted edge, the weight being the manhattan distance between those points.",
                "The problem is now the cost of minimum spanning tree in graph with above edges."
            ],
            "rephrased": {
                "body": "Given an array `points` representing integer coordinates of some points on a 2D-plane, where `points[i] = [x<sub>i</sub>, y<sub>i</sub>]`. The cost of connecting two points `[x<sub>i</sub>, y<sub>i</sub>]` and `[x<sub>j</sub>, y<sub>j</sub>]` is the Manhattan distance between them: `|x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|`, where `|val|` denotes the absolute value of `val`. Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.",
                "constraints": [
                    "1 <= points.length <= 1000",
                    "-10<sup>6</sup> <= x<sub>i</sub>, y<sub>i</sub> <= 10<sup>6</sup>",
                    "All pairs (x<sub>i</sub>, y<sub>i</sub>) are distinct."
                ],
                "testcases": [
                    {
                        "input": "[[0,0],[2,2],[3,10],[5,2],[7,0]]",
                        "output": "20",
                        "explanation": "The minimum cost to connect all points using Manhattan distance is 20.  This can be achieved by connecting points such that there is a unique path between every pair."
                    },
                    {
                        "input": "[[3,12],[-2,5],[-4,1]]",
                        "output": "18",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-lines-to-cover-points",
                "title": "Minimum Number of Lines to Cover Points",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Connect each pair of points with a weighted edge, the weight being the manhattan distance between those points.",
            "The problem is now the cost of minimum spanning tree in graph with above edges."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Minimum Spanning Tree",
                "slug": "minimum-spanning-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minCostConnectPoints(vector<vector<int>>& points) {\n    // dist[i] := min distance to connect points[i]\n    vector<int> dist(points.size(), INT_MAX);\n    int ans = 0;\n\n    for (int i = 0; i < points.size() - 1; ++i) {\n      for (int j = i + 1; j < points.size(); ++j) {\n        // Try to connect points[i] with points[j].\n        dist[j] = min(dist[j], abs(points[i][0] - points[j][0]) +\n                                   abs(points[i][1] - points[j][1]));\n        // Swap points[j] (point with min dist) with points[i + 1].\n        if (dist[j] < dist[i + 1]) {\n          swap(points[j], points[i + 1]);\n          swap(dist[j], dist[i + 1]);\n        }\n      }\n      ans += dist[i + 1];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minCostConnectPoints(int[][] points) {\n    // dist[i] := min distance to connect points[i]\n    int[] dist = new int[points.length];\n    Arrays.fill(dist, Integer.MAX_VALUE);\n    int ans = 0;\n\n    for (int i = 0; i < points.length - 1; ++i) {\n      for (int j = i + 1; j < points.length; ++j) {\n        // Try to connect points[i] with points[j].\n        dist[j] = Math.min(dist[j], Math.abs(points[i][0] - points[j][0]) +\n                                        Math.abs(points[i][1] - points[j][1]));\n        // Swap points[j] (point with min dist) with points[i + 1].\n        if (dist[j] < dist[i + 1]) {\n          final int[] tempPoint = points[j];\n          points[j] = points[i + 1];\n          points[i + 1] = tempPoint;\n          final int tempDist = dist[j];\n          dist[j] = dist[i + 1];\n          dist[i + 1] = tempDist;\n        }\n      }\n      ans += dist[i + 1];\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minCostConnectPoints(self, points: List[int]) -> int:\n    # dist[i] := min distance to connect points[i]\n    dist = [math.inf] * len(points)\n    ans = 0\n\n    for i in range(len(points) - 1):\n      for j in range(i + 1, len(points)):\n        # Try to connect points[i] with points[j].\n        dist[j] = min(dist[j], abs(points[i][0] - points[j][0]) +\n                      abs(points[i][1] - points[j][1]))\n        # Swap points[j] (point with min dist) with points[i + 1].\n        if dist[j] < dist[i + 1]:\n          points[j], points[i + 1] = points[i + 1], points[j]\n          dist[j], dist[i + 1] = dist[i + 1], dist[j]\n      ans += dist[i + 1]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}