{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "155",
            "title": "Min Stack",
            "titleSlug": "min-stack",
            "content": "<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>\n\n<p>Implement the <code>MinStack</code> class:</p>\n\n<ul>\n\t<li><code>MinStack()</code> initializes the stack object.</li>\n\t<li><code>void push(int val)</code> pushes the element <code>val</code> onto the stack.</li>\n\t<li><code>void pop()</code> removes the element on the top of the stack.</li>\n\t<li><code>int top()</code> gets the top element of the stack.</li>\n\t<li><code>int getMin()</code> retrieves the minimum element in the stack.</li>\n</ul>\n\n<p>You must implement a solution with <code>O(1)</code> time complexity for each function.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]\n[[],[-2],[0],[-3],[],[],[],[]]\n\n<strong>Output</strong>\n[null,null,null,null,-3,null,0,-2]\n\n<strong>Explanation</strong>\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on <strong>non-empty</strong> stacks.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>getMin</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 13461,
            "dislikes": 819,
            "similarQuestions": "[{\"title\": \"Sliding Window Maximum\", \"titleSlug\": \"sliding-window-maximum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Max Stack\", \"titleSlug\": \"max-stack\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Design",
                    "slug": "design"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.8M\", \"totalAcceptedRaw\": 1503298, \"totalSubmissionRaw\": 2810101, \"acRate\": \"53.5%\"}",
            "hints": [
                "Consider each node in the stack having a minimum value. (Credits to @aakarshmadhavan)"
            ],
            "rephrased": {
                "body": "Design a data structure that implements a stack with the additional functionality of retrieving the minimum element in O(1) time. Implement the `MinStack` class with the following methods:\n\n*   `MinStack()`: Initializes the stack object.\n*   `void push(int val)`: Pushes the element `val` onto the stack.\n*   `void pop()`: Removes the element on the top of the stack.\n*   `int top()`: Gets the top element of the stack.\n*   `int getMin()`: Retrieves the minimum element in the stack.",
                "constraints": [
                    "-2<sup>31</sup> <= val <= 2<sup>31</sup> - 1",
                    "Methods `pop`, `top` and `getMin` operations will always be called on **non-empty** stacks.",
                    "At most `3 * 10<sup>4</sup>` calls will be made to `push`, `pop`, `top`, and `getMin`."
                ],
                "testcases": [
                    {
                        "input": "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]",
                        "output": "[null,null,null,null,-3,null,0,-2]",
                        "explanation": "1. MinStack is initialized.\n2. push(-2): The stack is [-2]. The minimum is -2.\n3. push(0): The stack is [-2, 0]. The minimum is -2.\n4. push(-3): The stack is [-2, 0, -3]. The minimum is -3.\n5. getMin(): Returns -3.\n6. pop(): The stack is [-2, 0].\n7. top(): Returns 0.\n8. getMin(): Returns -2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "sliding-window-maximum",
                "title": "Sliding Window Maximum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "max-stack",
                "title": "Max Stack",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Consider each node in the stack having a minimum value. (Credits to @aakarshmadhavan)"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Design",
                "slug": "design"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class MinStack {\n public:\n  void push(int x) {\n    if (stack.empty())\n      stack.emplace(x, x);\n    else\n      stack.emplace(x, min(x, stack.top().second));\n  }\n\n  void pop() {\n    stack.pop();\n  }\n\n  int top() {\n    return stack.top().first;\n  }\n\n  int getMin() {\n    return stack.top().second;\n  }\n\n private:\n  stack<pair<int, int>> stack;  // {x, min}\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class MinStack {\n  public void push(int x) {\n    if (stack.isEmpty())\n      stack.push(new int[] {x, x});\n    else\n      stack.push(new int[] {x, Math.min(x, stack.peek()[1])});\n  }\n\n  public void pop() {\n    stack.pop();\n  }\n\n  public int top() {\n    return stack.peek()[0];\n  }\n\n  public int getMin() {\n    return stack.peek()[1];\n  }\n\n  private Stack<int[]> stack = new Stack<>(); // {x, min}\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class MinStack:\n  def __init__(self):\n    self.stack = []\n\n  def push(self, x: int) -> None:\n    mini = x if not self.stack else min(self.stack[-1][1], x)\n    self.stack.append([x, mini])\n\n  def pop(self) -> None:\n    self.stack.pop()\n\n  def top(self) -> int:\n    return self.stack[-1][0]\n\n  def getMin(self) -> int:\n    return self.stack[-1][1]\n",
                "lang_text": "py"
            }
        }
    }
}