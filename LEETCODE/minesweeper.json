{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "529",
            "title": "Minesweeper",
            "titleSlug": "minesweeper",
            "content": "<p>Let&#39;s play the minesweeper game (<a href=\"https://en.wikipedia.org/wiki/Minesweeper_(video_game)\" target=\"_blank\">Wikipedia</a>, <a href=\"http://minesweeperonline.com\" target=\"_blank\">online game</a>)!</p>\n\n<p>You are given an <code>m x n</code> char matrix <code>board</code> representing the game board where:</p>\n\n<ul>\n\t<li><code>&#39;M&#39;</code> represents an unrevealed mine,</li>\n\t<li><code>&#39;E&#39;</code> represents an unrevealed empty square,</li>\n\t<li><code>&#39;B&#39;</code> represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),</li>\n\t<li>digit (<code>&#39;1&#39;</code> to <code>&#39;8&#39;</code>) represents how many mines are adjacent to this revealed square, and</li>\n\t<li><code>&#39;X&#39;</code> represents a revealed mine.</li>\n</ul>\n\n<p>You are also given an integer array <code>click</code> where <code>click = [click<sub>r</sub>, click<sub>c</sub>]</code> represents the next click position among all the unrevealed squares (<code>&#39;M&#39;</code> or <code>&#39;E&#39;</code>).</p>\n\n<p>Return <em>the board after revealing this position according to the following rules</em>:</p>\n\n<ol>\n\t<li>If a mine <code>&#39;M&#39;</code> is revealed, then the game is over. You should change it to <code>&#39;X&#39;</code>.</li>\n\t<li>If an empty square <code>&#39;E&#39;</code> with no adjacent mines is revealed, then change it to a revealed blank <code>&#39;B&#39;</code> and all of its adjacent unrevealed squares should be revealed recursively.</li>\n\t<li>If an empty square <code>&#39;E&#39;</code> with at least one adjacent mine is revealed, then change it to a digit (<code>&#39;1&#39;</code> to <code>&#39;8&#39;</code>) representing the number of adjacent mines.</li>\n\t<li>Return the board when no more squares will be revealed.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2023/08/09/untitled.jpeg\" style=\"width: 500px; max-width: 400px; height: 269px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;],[&quot;E&quot;,&quot;E&quot;,&quot;M&quot;,&quot;E&quot;,&quot;E&quot;],[&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;],[&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;]], click = [3,0]\n<strong>Output:</strong> [[&quot;B&quot;,&quot;1&quot;,&quot;E&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;M&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2023/08/09/untitled-2.jpeg\" style=\"width: 489px; max-width: 400px; height: 269px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;B&quot;,&quot;1&quot;,&quot;E&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;M&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]], click = [1,2]\n<strong>Output:</strong> [[&quot;B&quot;,&quot;1&quot;,&quot;E&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;X&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;B&quot;],[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>board[i][j]</code> is either <code>&#39;M&#39;</code>, <code>&#39;E&#39;</code>, <code>&#39;B&#39;</code>, or a digit from <code>&#39;1&#39;</code> to <code>&#39;8&#39;</code>.</li>\n\t<li><code>click.length == 2</code></li>\n\t<li><code>0 &lt;= click<sub>r</sub> &lt; m</code></li>\n\t<li><code>0 &lt;= click<sub>c</sub> &lt; n</code></li>\n\t<li><code>board[click<sub>r</sub>][click<sub>c</sub>]</code> is either <code>&#39;M&#39;</code> or <code>&#39;E&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1899,
            "dislikes": 1038,
            "similarQuestions": "[{\"title\": \"Detonate the Maximum Bombs\", \"titleSlug\": \"detonate-the-maximum-bombs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"147.9K\", \"totalSubmission\": \"223.3K\", \"totalAcceptedRaw\": 147898, \"totalSubmissionRaw\": 223253, \"acRate\": \"66.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Let's implement the Minesweeper game. Given an `m x n` character matrix `board` representing the game board, and an integer array `click` representing the coordinates of a click, return the board after revealing the clicked position according to the Minesweeper rules:\n\n1.  If a mine `'M'` is revealed, change it to `'X'` (game over).\n2.  If an empty square `'E'` with no adjacent mines is revealed, change it to `'B'` and recursively reveal adjacent unrevealed squares.\n3.  If an empty square `'E'` with adjacent mines is revealed, change it to a digit ('1' to '8') representing the number of adjacent mines.\n4.  Return the board when no more squares can be revealed.",
                "constraints": [
                    "m == board.length",
                    "n == board[i].length",
                    "1 <= m, n <= 50",
                    "board[i][j] is either 'M', 'E', 'B', or a digit from '1' to '8'.",
                    "click.length == 2",
                    "0 <= click<sub>r</sub> < m",
                    "0 <= click<sub>c</sub> < n",
                    "board[click<sub>r</sub>][click<sub>c</sub>] is either 'M' or 'E'."
                ],
                "testcases": [
                    {
                        "input": "board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]",
                        "output": "[[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]",
                        "explanation": null
                    },
                    {
                        "input": "board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]",
                        "output": "[[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "detonate-the-maximum-bombs",
                "title": "Detonate the Maximum Bombs",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<char>> updateBoard(vector<vector<char>>& board,\n                                   vector<int>& click) {\n    if (board[click[0]][click[1]] == 'M') {\n      board[click[0]][click[1]] = 'X';\n      return board;\n    }\n\n    dfs(board, click[0], click[1]);\n    return board;\n  }\n\n private:\n  const vector<pair<int, int>> dirs{{-1, -1}, {-1, 0}, {-1, 1}, {0, -1},\n                                    {0, 1},   {1, -1}, {1, 0},  {1, 1}};\n\n  void dfs(vector<vector<char>>& board, int i, int j) {\n    if (i < 0 || i == board.size() || j < 0 || j == board[0].size())\n      return;\n    if (board[i][j] != 'E')\n      return;\n\n    const int minesCount = getMinesCount(board, i, j);\n    board[i][j] = minesCount == 0 ? 'B' : '0' + minesCount;\n\n    if (minesCount == 0)\n      for (const auto& [dx, dy] : dirs)\n        dfs(board, i + dx, j + dy);\n  }\n\n  int getMinesCount(const vector<vector<char>>& board, int i, int j) {\n    int minesCount = 0;\n    for (const auto& [dx, dy] : dirs) {\n      const int x = i + dx;\n      const int y = j + dy;\n      if (x < 0 || x == board.size() || y < 0 || y == board[0].size())\n        continue;\n      if (board[x][y] == 'M')\n        ++minesCount;\n    }\n    return minesCount;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public char[][] updateBoard(char[][] board, int[] click) {\n    if (board[click[0]][click[1]] == 'M') {\n      board[click[0]][click[1]] = 'X';\n      return board;\n    }\n\n    dfs(board, click[0], click[1]);\n    return board;\n  }\n\n  private static final int[][] dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1},\n                                       {0, 1},   {1, -1}, {1, 0},  {1, 1}};\n\n  private void dfs(char[][] board, int i, int j) {\n    if (i < 0 || i == board.length || j < 0 || j == board[0].length)\n      return;\n    if (board[i][j] != 'E')\n      return;\n\n    final int minesCount = getMinesCount(board, i, j);\n    board[i][j] = minesCount == 0 ? 'B' : (char) ('0' + minesCount);\n\n    if (minesCount == 0)\n      for (int[] dir : dirs)\n        dfs(board, i + dir[0], j + dir[1]);\n  }\n\n  private int getMinesCount(char[][] board, int i, int j) {\n    int minesCount = 0;\n    for (final int[] dir : dirs) {\n      final int x = i + dir[0];\n      final int y = j + dir[1];\n      if (x < 0 || x == board.length || y < 0 || y == board[0].length)\n        continue;\n      if (board[x][y] == 'M')\n        ++minesCount;\n    }\n    return minesCount;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:\n    if board[click[0]][click[1]] == 'M':\n      board[click[0]][click[1]] = 'X'\n      return board\n\n    dirs = [(-1, -1), (-1, 0), (-1, 1), (0, -1),\n            (0, 1), (1, -1), (1, 0), (1, 1)]\n\n    def getMinesCount(i: int, j: int) -> int:\n      minesCount = 0\n      for dx, dy in dirs:\n        x = i + dx\n        y = j + dy\n        if x < 0 or x == len(board) or y < 0 or y == len(board[0]):\n          continue\n        if board[x][y] == 'M':\n          minesCount += 1\n      return minesCount\n\n    def dfs(i: int, j: int) -> None:\n      if i < 0 or i == len(board) or j < 0 or j == len(board[0]):\n        return\n      if board[i][j] != 'E':\n        return\n\n      minesCount = getMinesCount(i, j)\n      board[i][j] = 'B' if minesCount == 0 else str(minesCount)\n\n      if minesCount == 0:\n        for dx, dy in dirs:\n          dfs(i + dx, j + dy)\n\n    dfs(click[0], click[1])\n    return board\n",
                "lang_text": "py"
            }
        }
    }
}