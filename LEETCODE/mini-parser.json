{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "385",
            "title": "Mini Parser",
            "titleSlug": "mini-parser",
            "content": "<p>Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return <em>the deserialized</em> <code>NestedInteger</code>.</p>\n\n<p>Each element is either an integer or a list whose elements may also be integers or other lists.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;324&quot;\n<strong>Output:</strong> 324\n<strong>Explanation:</strong> You should return a NestedInteger object which contains a single integer 324.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;[123,[456,[789]]]&quot;\n<strong>Output:</strong> [123,[456,[789]]]\n<strong>Explanation:</strong> Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of digits, square brackets <code>&quot;[]&quot;</code>, negative sign <code>&#39;-&#39;</code>, and commas <code>&#39;,&#39;</code>.</li>\n\t<li><code>s</code> is the serialization of valid <code>NestedInteger</code>.</li>\n\t<li>All the values in the input are in the range <code>[-10<sup>6</sup>, 10<sup>6</sup>]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 444,
            "dislikes": 1339,
            "similarQuestions": "[{\"title\": \"Flatten Nested List Iterator\", \"titleSlug\": \"flatten-nested-list-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ternary Expression Parser\", \"titleSlug\": \"ternary-expression-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Remove Comments\", \"titleSlug\": \"remove-comments\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"54.9K\", \"totalSubmission\": \"145.9K\", \"totalAcceptedRaw\": 54850, \"totalSubmissionRaw\": 145904, \"acRate\": \"37.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` representing the serialization of a nested list, implement a parser to deserialize it and return the deserialized `NestedInteger`. Each element is either an integer or a list whose elements may also be integers or other lists.",
                "constraints": [
                    "1 <= s.length <= 5 * 10^4",
                    "s consists of digits, square brackets \"[]\", negative sign '-', and commas ','.",
                    "s is the serialization of a valid NestedInteger.",
                    "All the values in the input are in the range [-10^6, 10^6]."
                ],
                "testcases": [
                    {
                        "input": "\"324\"",
                        "output": "324",
                        "explanation": "The input string represents a single integer, so the output is a NestedInteger object containing the value 324."
                    },
                    {
                        "input": "\"[123,[456,[789]]]\"",
                        "output": "[123,[456,[789]]]",
                        "explanation": "The input string represents a nested list. The output is a NestedInteger object containing a nested list with the following structure: The outer list has two elements: 1) The integer 123. 2) Another nested list containing two elements: i) The integer 456. ii) A further nested list containing only the integer 789."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "flatten-nested-list-iterator",
                "title": "Flatten Nested List Iterator",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "ternary-expression-parser",
                "title": "Ternary Expression Parser",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "remove-comments",
                "title": "Remove Comments",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  NestedInteger deserialize(string s) {\n    if (s[0] != '[')\n      return NestedInteger(stoi(s));\n\n    stack<NestedInteger> stack;\n    int start;  // the start index of num\n\n    for (int i = 0; i < s.length(); ++i) {\n      switch (s[i]) {\n        case '[':\n          stack.push(NestedInteger());\n          start = i + 1;\n          break;\n        case ',':\n          if (i > start) {\n            const int num = stoi(s.substr(start, i));\n            stack.top().add(NestedInteger(num));\n          }\n          start = i + 1;\n          break;\n        case ']':\n          NestedInteger popped = stack.top();\n          stack.pop();\n          if (i > start) {\n            const int num = stoi(s.substr(start, i));\n            popped.add(NestedInteger(num));\n          }\n          if (stack.empty())\n            return popped;\n          else\n            stack.top().add(popped);\n          start = i + 1;\n          break;\n      }\n    }\n\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public NestedInteger deserialize(String s) {\n    if (s.charAt(0) != '[')\n      return new NestedInteger(Integer.parseInt(s));\n\n    Deque<NestedInteger> stack = new ArrayDeque<>();\n    int start; // the start index of num\n\n    for (int i = 0; i < s.length(); ++i)\n      switch (s.charAt(i)) {\n        case '[':\n          stack.push(new NestedInteger());\n          start = i + 1;\n          break;\n        case ',':\n          if (i > start) {\n            final int num = Integer.parseInt(s.substring(start, i));\n            stack.peek().add(new NestedInteger(num));\n          }\n          start = i + 1;\n          break;\n        case ']':\n          NestedInteger popped = stack.pop();\n          if (i > start) {\n            final int num = Integer.parseInt(s.substring(start, i));\n            popped.add(new NestedInteger(num));\n          }\n          if (!stack.isEmpty())\n            stack.peek().add(popped);\n          else\n            return popped;\n          start = i + 1;\n          break;\n      }\n\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def deserialize(self, s: str) -> NestedInteger:\n    if s[0] != '[':\n      return NestedInteger(int(s))\n\n    stack = []\n\n    for i, c in enumerate(s):\n      if c == '[':\n        stack.append(NestedInteger())\n        start = i + 1\n      elif c == ',':\n        if i > start:\n          num = int(s[start:i])\n          stack[-1].add(NestedInteger(num))\n        start = i + 1\n      elif c == ']':\n        popped = stack.pop()\n        if i > start:\n          num = int(s[start:i])\n          popped.add(NestedInteger(num))\n        if stack:\n          stack[-1].add(popped)\n        else:\n          return popped\n        start = i + 1\n",
                "lang_text": "py"
            }
        }
    }
}