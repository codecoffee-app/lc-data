{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1675",
            "title": "Minimize Deviation in Array",
            "titleSlug": "minimize-deviation-in-array",
            "content": "<p>You are given an array <code>nums</code> of <code>n</code> positive integers.</p>\n\n<p>You can perform two types of operations on any element of the array any number of times:</p>\n\n<ul>\n\t<li>If the element is <strong>even</strong>, <strong>divide</strong> it by <code>2</code>.\n\n\t<ul>\n\t\t<li>For example, if the array is <code>[1,2,3,4]</code>, then you can do this operation on the last element, and the array will be <code>[1,2,3,<u>2</u>].</code></li>\n\t</ul>\n\t</li>\n\t<li>If the element is <strong>odd</strong>, <strong>multiply</strong> it by <code>2</code>.\n\t<ul>\n\t\t<li>For example, if the array is <code>[1,2,3,4]</code>, then you can do this operation on the first element, and the array will be <code>[<u>2</u>,2,3,4].</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>The <strong>deviation</strong> of the array is the <strong>maximum difference</strong> between any two elements in the array.</p>\n\n<p>Return <em>the <strong>minimum deviation</strong> the array can have after performing some number of operations.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You can transform the array to [1,2,3,<u>2</u>], then to [<u>2</u>,2,3,2], then the deviation will be 3 - 2 = 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,1,5,20,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You can transform the array after two operations to [4,<u>2</u>,5,<u>5</u>,3], then the deviation will be 5 - 2 = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,10,8]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 5 * 10<sup><span style=\"font-size: 10.8333px;\">4</span></sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2984,
            "dislikes": 167,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"91.3K\", \"totalSubmission\": \"168.2K\", \"totalAcceptedRaw\": 91260, \"totalSubmissionRaw\": 168196, \"acRate\": \"54.3%\"}",
            "hints": [
                "Assume you start with the minimum possible value for each number so you can only multiply a number by 2 till it reaches its maximum possible value.",
                "If there is a better solution than the current one, then it must have either its maximum value less than the current maximum value, or the minimum value larger than the current minimum value.",
                "Since that we only increase numbers (multiply them by 2), we cannot decrease the current maximum value, so we must multiply the current minimum number by 2."
            ],
            "rephrased": {
                "body": "Given an array `nums` of `n` positive integers, you can perform the following operations on any element any number of times:\n\n*   If the element is even, divide it by 2.\n*   If the element is odd, multiply it by 2.\n\nThe deviation of the array is the maximum difference between any two elements in the array.  Return the minimum deviation the array can have after performing some number of operations.",
                "constraints": [
                    "n == nums.length",
                    "2 <= n <= 5 * 10^4",
                    "1 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4]",
                        "output": "1",
                        "explanation": "One possible transformation is [1,2,3,4] -> [1,2,3,2] -> [2,2,3,2]. The maximum difference between elements is then 3 - 2 = 1."
                    },
                    {
                        "input": "[4,1,5,20,3]",
                        "output": "3",
                        "explanation": "One possible transformation is [4,1,5,20,3] -> [4,2,5,20,3] -> [4,2,5,5,3]. The maximum difference between elements is then 5 - 2 = 3."
                    },
                    {
                        "input": "[2,10,8]",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Assume you start with the minimum possible value for each number so you can only multiply a number by 2 till it reaches its maximum possible value.",
            "If there is a better solution than the current one, then it must have either its maximum value less than the current maximum value, or the minimum value larger than the current minimum value.",
            "Since that we only increase numbers (multiply them by 2), we cannot decrease the current maximum value, so we must multiply the current minimum number by 2."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumDeviation(vector<int>& nums) {\n    int ans = INT_MAX;\n    int mini = INT_MAX;\n    priority_queue<int> maxHeap;\n\n    for (const int num : nums) {\n      const int evenNum = num % 2 == 0 ? num : num * 2;\n      mini = min(mini, evenNum);\n      maxHeap.push(evenNum);\n    }\n\n    while (maxHeap.top() % 2 == 0) {\n      const int maxi = maxHeap.top();\n      maxHeap.pop();\n      ans = min(ans, maxi - mini);\n      mini = min(mini, maxi / 2);\n      maxHeap.push(maxi / 2);\n    }\n\n    return min(ans, maxHeap.top() - mini);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumDeviation(int[] nums) {\n    int ans = Integer.MAX_VALUE;\n    int min = Integer.MAX_VALUE;\n    Queue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n    for (final int num : nums) {\n      final int evenNum = num % 2 == 0 ? num : num * 2;\n      min = Math.min(min, evenNum);\n      maxHeap.offer(evenNum);\n    }\n\n    while (maxHeap.peek() % 2 == 0) {\n      final int max = maxHeap.poll();\n      ans = Math.min(ans, max - min);\n      min = Math.min(min, max / 2);\n      maxHeap.offer(max / 2);\n    }\n\n    return Math.min(ans, maxHeap.peek() - min);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumDeviation(self, nums: List[int]) -> int:\n    ans = math.inf\n    mini = math.inf\n    maxHeap = []\n\n    for num in nums:\n      evenNum = num if num % 2 == 0 else num * 2\n      heapq.heappush(maxHeap, -evenNum)\n      mini = min(mini, evenNum)\n\n    while maxHeap[0] % 2 == 0:\n      maxi = -heapq.heappop(maxHeap)\n      ans = min(ans, maxi - mini)\n      mini = min(mini, maxi // 2)\n      heapq.heappush(maxHeap, -maxi // 2)\n\n    return min(ans, -maxHeap[0] - mini)\n",
                "lang_text": "py"
            }
        }
    }
}