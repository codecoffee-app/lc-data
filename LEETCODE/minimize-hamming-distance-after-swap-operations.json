{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1722",
            "title": "Minimize Hamming Distance After Swap Operations",
            "titleSlug": "minimize-hamming-distance-after-swap-operations",
            "content": "<p>You are given two integer arrays, <code>source</code> and <code>target</code>, both of length <code>n</code>. You are also given an array <code>allowedSwaps</code> where each <code>allowedSwaps[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you are allowed to swap the elements at index <code>a<sub>i</sub></code> and index <code>b<sub>i</sub></code> <strong>(0-indexed)</strong> of array <code>source</code>. Note that you can swap elements at a specific pair of indices <strong>multiple</strong> times and in <strong>any</strong> order.</p>\n\n<p>The <strong>Hamming distance</strong> of two arrays of the same length, <code>source</code> and <code>target</code>, is the number of positions where the elements are different. Formally, it is the number of indices <code>i</code> for <code>0 &lt;= i &lt;= n-1</code> where <code>source[i] != target[i]</code> <strong>(0-indexed)</strong>.</p>\n\n<p>Return <em>the <strong>minimum Hamming distance</strong> of </em><code>source</code><em> and </em><code>target</code><em> after performing <strong>any</strong> amount of swap operations on array </em><code>source</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> source can be transformed the following way:\n- Swap indices 0 and 1: source = [<u>2</u>,<u>1</u>,3,4]\n- Swap indices 2 and 3: source = [2,1,<u>4</u>,<u>3</u>]\nThe Hamming distance of source and target is 1 as they differ in 1 position: index 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are no allowed swaps.\nThe Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == source.length == target.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= source[i], target[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= allowedSwaps.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>allowedSwaps[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 815,
            "dislikes": 26,
            "similarQuestions": "[{\"title\": \"Smallest String With Swaps\", \"titleSlug\": \"smallest-string-with-swaps\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Make Lexicographically Smallest Array by Swapping Elements\", \"titleSlug\": \"make-lexicographically-smallest-array-by-swapping-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                }
            ],
            "stats": "{\"totalAccepted\": \"17K\", \"totalSubmission\": \"34.9K\", \"totalAcceptedRaw\": 17011, \"totalSubmissionRaw\": 34895, \"acRate\": \"48.7%\"}",
            "hints": [
                "The source array can be imagined as a graph where each index is a node and each allowedSwaps[i] is an edge.",
                "Nodes within the same component can be freely swapped with each other.",
                "For each component, find the number of common elements. The elements that are not in common will contribute to the total Hamming distance."
            ],
            "rephrased": {
                "body": "Given two integer arrays, `source` and `target`, of length `n`, and an array `allowedSwaps` where each `allowedSwaps[i] = [a_i, b_i]` indicates that you can swap the elements at indices `a_i` and `b_i` in `source`. You can swap elements at a specific pair of indices multiple times and in any order.\n\nThe Hamming distance of two arrays of the same length is the number of positions where the elements are different.  Specifically, it's the count of indices `i` where `source[i] != target[i]`.\n\nReturn the minimum Hamming distance of `source` and `target` after performing any amount of swap operations on array `source`.",
                "constraints": [
                    "n == source.length == target.length",
                    "1 <= n <= 10^5",
                    "1 <= source[i], target[i] <= 10^5",
                    "0 <= allowedSwaps.length <= 10^5",
                    "allowedSwaps[i].length == 2",
                    "0 <= a_i, b_i <= n - 1",
                    "a_i != b_i"
                ],
                "testcases": [
                    {
                        "input": "source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]",
                        "output": "1",
                        "explanation": "The source array can be transformed as follows:\n- Swap indices 0 and 1: source = [2,1,3,4]\n- Swap indices 2 and 3: source = [2,1,4,3]\nThe Hamming distance between the transformed source and the target is 1 (index 3)."
                    },
                    {
                        "input": "source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []",
                        "output": "2",
                        "explanation": "Since no swaps are allowed, the Hamming distance is simply the number of positions where the source and target arrays differ. In this case, indices 1 and 2."
                    },
                    {
                        "input": "source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]",
                        "output": "0",
                        "explanation": "With the given swaps, it's possible to rearrange the source array to be identical to the target array, resulting in a Hamming distance of 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "smallest-string-with-swaps",
                "title": "Smallest String With Swaps",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "make-lexicographically-smallest-array-by-swapping-elements",
                "title": "Make Lexicographically Smallest Array by Swapping Elements",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The source array can be imagined as a graph where each index is a node and each allowedSwaps[i] is an edge.",
            "Nodes within the same component can be freely swapped with each other.",
            "For each component, find the number of common elements. The elements that are not in common will contribute to the total Hamming distance."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n};\n\nclass Solution {\n public:\n  int minimumHammingDistance(vector<int>& source, vector<int>& target,\n                             vector<vector<int>>& allowedSwaps) {\n    const int n = source.size();\n    int ans = 0;\n    UnionFind uf(n);\n    vector<unordered_map<int, int>> groupIdToCount(n);\n\n    for (const vector<int>& allowedSwap : allowedSwaps) {\n      const int a = allowedSwap[0];\n      const int b = allowedSwap[1];\n      uf.unionByRank(a, b);\n    }\n\n    for (int i = 0; i < n; ++i)\n      ++groupIdToCount[uf.find(i)][source[i]];\n\n    for (int i = 0; i < n; ++i) {\n      const int groupId = uf.find(i);\n      unordered_map<int, int>& count = groupIdToCount[groupId];\n      if (!count.count(target[i]))\n        ++ans;\n      else if (--count[target[i]] == 0)\n        count.erase(target[i]);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  private int[] id;\n  private int[] rank;\n}\n\nclass Solution {\n  public int minimumHammingDistance(int[] source, int[] target, int[][] allowedSwaps) {\n    final int n = source.length;\n    int ans = 0;\n    UnionFind uf = new UnionFind(n);\n    Map<Integer, Integer>[] groupIdToCount = new Map[n];\n\n    for (int i = 0; i < n; ++i)\n      groupIdToCount[i] = new HashMap<>();\n\n    for (int[] allowedSwap : allowedSwaps) {\n      final int a = allowedSwap[0];\n      final int b = allowedSwap[1];\n      uf.unionByRank(a, b);\n    }\n\n    for (int i = 0; i < n; ++i)\n      groupIdToCount[uf.find(i)].merge(source[i], 1, Integer::sum);\n\n    for (int i = 0; i < n; ++i) {\n      final int groupId = uf.find(i);\n      Map<Integer, Integer> count = groupIdToCount[groupId];\n      if (!count.containsKey(target[i]))\n        ++ans;\n      else if (count.merge(target[i], -1, Integer::sum) == 0)\n        count.remove(target[i]);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def minimumHammingDistance(self, source: List[int], target: List[int], allowedSwaps: List[List[int]]) -> int:\n    n = len(source)\n    ans = 0\n    uf = UnionFind(n)\n    groupIdToCount = [collections.Counter() for _ in range(n)]\n\n    for a, b in allowedSwaps:\n      uf.unionByRank(a, b)\n\n    for i in range(n):\n      groupIdToCount[uf.find(i)][source[i]] += 1\n\n    for i in range(n):\n      groupId = uf.find(i)\n      count = groupIdToCount[groupId]\n      if target[i] not in count:\n        ans += 1\n      else:\n        count[target[i]] -= 1\n        if count[target[i]] == 0:\n          del count[target[i]]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}