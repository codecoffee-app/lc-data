{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "924",
            "title": "Minimize Malware Spread",
            "titleSlug": "minimize-malware-spread",
            "content": "<p>You are given a network of <code>n</code> nodes represented as an <code>n x n</code> adjacency matrix <code>graph</code>, where the <code>i<sup>th</sup></code> node is directly connected to the <code>j<sup>th</sup></code> node if <code>graph[i][j] == 1</code>.</p>\n\n<p>Some nodes <code>initial</code> are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.</p>\n\n<p>Suppose <code>M(initial)</code> is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove <strong>exactly one node</strong> from <code>initial</code>.</p>\n\n<p>Return the node that, if removed, would minimize <code>M(initial)</code>. If multiple nodes could be removed to minimize <code>M(initial)</code>, return such a node with <strong>the smallest index</strong>.</p>\n\n<p>Note that if a node was removed from the <code>initial</code> list of infected nodes, it might still be infected later due to the malware spread.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n<strong>Output:</strong> 0\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\n<strong>Output:</strong> 0\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == graph.length</code></li>\n\t<li><code>n == graph[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 300</code></li>\n\t<li><code>graph[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li><code>graph[i][j] == graph[j][i]</code></li>\n\t<li><code>graph[i][i] == 1</code></li>\n\t<li><code>1 &lt;= initial.length &lt;= n</code></li>\n\t<li><code>0 &lt;= initial[i] &lt;= n - 1</code></li>\n\t<li>All the integers in <code>initial</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 938,
            "dislikes": 557,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"47.2K\", \"totalSubmission\": \"112.5K\", \"totalAcceptedRaw\": 47212, \"totalSubmissionRaw\": 112511, \"acRate\": \"42.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a network of `n` nodes represented by an `n x n` adjacency matrix `graph`, where `graph[i][j] == 1` indicates a direct connection between nodes `i` and `j`.  A set of nodes `initial` are initially infected with malware. The malware spreads through the network such that if two directly connected nodes have at least one infected, both become infected. This process continues until no further infections occur.  Let `M(initial)` represent the total number of infected nodes after the spread stops.\n\nThe task is to remove exactly one node from the `initial` list. Return the node whose removal minimizes `M(initial)`. If multiple nodes achieve the minimum `M(initial)`, return the node with the smallest index. Note that removing a node from `initial` doesn't guarantee it won't be infected later during the spread.",
                "constraints": [
                    "`n == graph.length`",
                    "`n == graph[i].length`",
                    "`2 <= n <= 300`",
                    "`graph[i][j]` is `0` or `1`.",
                    "`graph[i][j] == graph[j][i]`",
                    "`graph[i][i] == 1`",
                    "`1 <= initial.length <= n`",
                    "`0 <= initial[i] <= n - 1`",
                    "All the integers in `initial` are **unique**."
                ],
                "testcases": [
                    {
                        "input": "graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]",
                        "output": "0",
                        "explanation": null
                    },
                    {
                        "input": "graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]",
                        "output": "0",
                        "explanation": null
                    },
                    {
                        "input": "graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n};\n\nclass Solution {\n public:\n  int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {\n    const int n = graph.size();\n    UnionFind uf(n);\n    vector<int> ufSize(n);\n    vector<int> malwareCount(n);\n\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j)\n        if (graph[i][j] == 1)\n          uf.unionByRank(i, j);\n\n    for (int i = 0; i < n; ++i)\n      ++ufSize[uf.find(i)];\n\n    for (const int i : initial)\n      ++malwareCount[uf.find(i)];\n\n    std::ranges::sort(initial);\n\n    int ans = initial[0];\n    int maxUfSize = 0;\n\n    // Find the max union's malware if it only contains 1 malware.\n    for (const int i : initial) {\n      const int id = uf.find(i);\n      if (ufSize[id] > maxUfSize && malwareCount[id] == 1) {\n        maxUfSize = ufSize[id];\n        ans = i;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  private int[] id;\n  private int[] rank;\n}\n\nclass Solution {\n  public int minMalwareSpread(int[][] graph, int[] initial) {\n    final int n = graph.length;\n    UnionFind uf = new UnionFind(n);\n    int[] ufSize = new int[n];\n    int[] malwareCount = new int[n];\n\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j)\n        if (graph[i][j] == 1)\n          uf.unionByRank(i, j);\n\n    for (int i = 0; i < n; ++i)\n      ++ufSize[uf.find(i)];\n\n    for (final int i : initial)\n      ++malwareCount[uf.find(i)];\n\n    Arrays.sort(initial);\n\n    int ans = initial[0];\n    int maxUfSize = 0;\n\n    // Find the max union's malware if it only contains 1 malware.\n    for (final int i : initial) {\n      final int id = uf.find(i);\n      if (ufSize[id] > maxUfSize && malwareCount[id] == 1) {\n        maxUfSize = ufSize[id];\n        ans = i;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}