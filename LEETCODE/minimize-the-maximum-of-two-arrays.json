{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2513",
            "title": "Minimize the Maximum of Two Arrays",
            "titleSlug": "minimize-the-maximum-of-two-arrays",
            "content": "<p>We have two arrays <code>arr1</code> and <code>arr2</code> which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:</p>\n\n<ul>\n\t<li><code>arr1</code> contains <code>uniqueCnt1</code> <strong>distinct</strong> positive integers, each of which is <strong>not divisible</strong> by <code>divisor1</code>.</li>\n\t<li><code>arr2</code> contains <code>uniqueCnt2</code> <strong>distinct</strong> positive integers, each of which is <strong>not divisible</strong> by <code>divisor2</code>.</li>\n\t<li><strong>No</strong> integer is present in both <code>arr1</code> and <code>arr2</code>.</li>\n</ul>\n\n<p>Given <code>divisor1</code>, <code>divisor2</code>, <code>uniqueCnt1</code>, and <code>uniqueCnt2</code>, return <em>the <strong>minimum possible maximum</strong> integer that can be present in either array</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nWe can distribute the first 4 natural numbers into arr1 and arr2.\narr1 = [1] and arr2 = [2,3,4].\nWe can see that both arrays satisfy all the conditions.\nSince the maximum value is 4, we return it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nHere arr1 = [1,2], and arr2 = [3] satisfy all conditions.\nSince the maximum value is 3, we return it.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> \nHere, the final possible arrays can be arr1 = [1,3,5,7,9,11,13,15], and arr2 = [2,6].\nIt can be shown that it is not possible to obtain a lower maximum satisfying all conditions. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= divisor1, divisor2 &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= uniqueCnt1, uniqueCnt2 &lt; 10<sup>9</sup></code></li>\n\t<li><code>2 &lt;= uniqueCnt1 + uniqueCnt2 &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 348,
            "dislikes": 66,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.5K\", \"totalSubmission\": \"24K\", \"totalAcceptedRaw\": 6456, \"totalSubmissionRaw\": 24020, \"acRate\": \"26.9%\"}",
            "hints": [
                "Use binary search to find smallest maximum element.",
                "Add numbers divisible by x in nums2 and vice versa."
            ],
            "rephrased": {
                "body": "Given two initially empty arrays, `arr1` and `arr2`, the goal is to populate them with positive integers satisfying specific conditions. `arr1` must contain `uniqueCnt1` distinct positive integers, none of which are divisible by `divisor1`. Similarly, `arr2` must contain `uniqueCnt2` distinct positive integers, none of which are divisible by `divisor2`.  Crucially, no integer can appear in both arrays.\n\nThe task is to determine the minimum possible maximum integer that can exist in either `arr1` or `arr2`.",
                "constraints": [
                    "2 <= divisor1, divisor2 <= 10^5",
                    "1 <= uniqueCnt1, uniqueCnt2 < 10^9",
                    "2 <= uniqueCnt1 + uniqueCnt2 <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3",
                        "output": "4",
                        "explanation": "One possible distribution is arr1 = [1] and arr2 = [2, 3, 4].  This satisfies all conditions, and the maximum value is 4."
                    },
                    {
                        "input": "divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1",
                        "output": "3",
                        "explanation": "A valid solution is arr1 = [1, 2] and arr2 = [3]. The maximum value is 3, meeting all conditions."
                    },
                    {
                        "input": "divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2",
                        "output": "15",
                        "explanation": "A possible solution is arr1 = [1, 3, 5, 7, 9, 11, 13, 15] and arr2 = [2, 6]. It can be demonstrated that a lower maximum integer is not achievable while adhering to all constraints."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use binary search to find smallest maximum element.",
            "Add numbers divisible by x in nums2 and vice versa."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n    const long divisorLcm = std::lcm(static_cast<long>(divisor1), divisor2);\n    long l = 0;\n    long r = INT_MAX;\n\n    while (l < r) {\n      const long m = (l + r) / 2;\n      if (isPossible(m, divisorLcm, divisor1, divisor2, uniqueCnt1, uniqueCnt2))\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n private:\n  // Returns true if we can take uniqueCnt1 integers from [1..m] to arr1 and\n  // take uniqueCnt2 integers from [1..m] to arr2.\n  bool isPossible(long m, long divisorLcm, int divisor1, int divisor2,\n                  int uniqueCnt1, int uniqueCnt2) {\n    const long cnt1 = m - m / divisor1;\n    const long cnt2 = m - m / divisor2;\n    const long totalCnt = m - m / divisorLcm;\n    return cnt1 >= uniqueCnt1 && cnt2 >= uniqueCnt2 &&\n           totalCnt >= uniqueCnt1 + uniqueCnt2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n    final long divisorLcm = lcm(divisor1, divisor2);\n    long l = 0;\n    long r = Integer.MAX_VALUE;\n\n    while (l < r) {\n      final long m = (l + r) / 2;\n      if (isPossible(m, divisorLcm, divisor1, divisor2, uniqueCnt1, uniqueCnt2))\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return (int) l;\n  }\n\n  // Returns true if we can take uniqueCnt1 integers from [1..m] to arr1 and\n  // take uniqueCnt2 integers from [1..m] to arr2.\n  private boolean isPossible(long m, long divisorLcm, int divisor1, int divisor2, int uniqueCnt1,\n                             int uniqueCnt2) {\n    final long cnt1 = m - m / divisor1;\n    final long cnt2 = m - m / divisor2;\n    final long totalCnt = m - m / divisorLcm;\n    return cnt1 >= uniqueCnt1 && cnt2 >= uniqueCnt2 && totalCnt >= uniqueCnt1 + uniqueCnt2;\n  }\n\n  private long gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n\n  private long lcm(int a, int b) {\n    return a * (b / gcd(a, b));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimizeSet(self, divisor1: int, divisor2: int, uniqueCnt1: int, uniqueCnt2: int) -> int:\n    divisorLcm = math.lcm(divisor1, divisor2)\n    l = 0\n    r = 2**31 - 1\n\n    # True if we can take uniqueCnt1 integers from [1..m] to arr1 and take\n    # uniqueCnt2 integers from [1..m] to arr2.\n    def isPossible(m: int) -> bool:\n      cnt1 = m - m // divisor1\n      cnt2 = m - m // divisor2\n      totalCnt = m - m // divisorLcm\n      return cnt1 >= uniqueCnt1 and cnt2 >= uniqueCnt2 and \\\n          totalCnt >= uniqueCnt1 + uniqueCnt2\n\n    while l < r:\n      m = (l + r) // 2\n      if isPossible(m):\n        r = m\n      else:\n        l = m + 1\n\n    return l\n",
                "lang_text": "py"
            }
        }
    }
}