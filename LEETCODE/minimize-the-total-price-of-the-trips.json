{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2646",
            "title": "Minimize the Total Price of the Trips",
            "titleSlug": "minimize-the-total-price-of-the-trips",
            "content": "<p>There exists an undirected and unrooted tree with <code>n</code> nodes indexed from <code>0</code> to <code>n - 1</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>Each node has an associated price. You are given an integer array <code>price</code>, where <code>price[i]</code> is the price of the <code>i<sup>th</sup></code> node.</p>\n\n<p>The <strong>price sum</strong> of a given path is the sum of the prices of all nodes lying on that path.</p>\n\n<p>Additionally, you are given a 2D integer array <code>trips</code>, where <code>trips[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> indicates that you start the <code>i<sup>th</sup></code> trip from the node <code>start<sub>i</sub></code> and travel to the node <code>end<sub>i</sub></code> by any path you like.</p>\n\n<p>Before performing your first trip, you can choose some <strong>non-adjacent</strong> nodes and halve the prices.</p>\n\n<p>Return <em>the minimum total price sum to perform all the given trips</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/03/16/diagram2.png\" style=\"width: 541px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[0,1],[1,2],[1,3]], price = [2,2,10,6], trips = [[0,3],[2,1],[2,3]]\n<strong>Output:</strong> 23\n<strong>Explanation:</strong> The diagram above denotes the tree after rooting it at node 2. The first part shows the initial tree and the second part shows the tree after choosing nodes 0, 2, and 3, and making their price half.\nFor the 1<sup>st</sup> trip, we choose path [0,1,3]. The price sum of that path is 1 + 2 + 3 = 6.\nFor the 2<sup>nd</sup> trip, we choose path [2,1]. The price sum of that path is 2 + 5 = 7.\nFor the 3<sup>rd</sup> trip, we choose path [2,1,3]. The price sum of that path is 5 + 2 + 3 = 10.\nThe total price sum of all trips is 6 + 7 + 10 = 23.\nIt can be proven, that 23 is the minimum answer that we can achieve.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/03/16/diagram3.png\" style=\"width: 456px; height: 111px;\" />\n<pre>\n<strong>Input:</strong> n = 2, edges = [[0,1]], price = [2,2], trips = [[0,0]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The diagram above denotes the tree after rooting it at node 0. The first part shows the initial tree and the second part shows the tree after choosing node 0, and making its price half.\nFor the 1<sup>st</sup> trip, we choose path [0]. The price sum of that path is 1.\nThe total price sum of all trips is 1. It can be proven, that 1 is the minimum answer that we can achieve.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n\t<li><code>price.length == n</code></li>\n\t<li><code>price[i]</code> is an even integer.</li>\n\t<li><code>1 &lt;= price[i] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= trips.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub>, end<sub>i</sub>&nbsp;&lt;= n - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 444,
            "dislikes": 16,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.7K\", \"totalSubmission\": \"19.5K\", \"totalAcceptedRaw\": 8663, \"totalSubmissionRaw\": 19530, \"acRate\": \"44.4%\"}",
            "hints": [
                "The final answer is the price[i] * freq[i], where freq[i] is the number of times node i was visited during the trip, and price[i] is the final price.",
                "To find freq[i] we will use dfs or bfs for each trip and update every node on the path start and end.",
                "Finally, to find the final price[i] we will use dynamic programming on the tree. Let dp(v, 0/1) denote the minimum total price with the node v\u2019s price being halved or not."
            ],
            "rephrased": {
                "body": "Given an undirected and unrooted tree with `n` nodes (indexed from 0 to `n - 1`) and a list of edges representing the tree's connections, where `edges[i] = [a_i, b_i]` indicates an edge between nodes `a_i` and `b_i`. Each node `i` has a price `price[i]`. You're also given a list of `trips`, where `trips[i] = [start_i, end_i]` represents a trip from node `start_i` to node `end_i`.  You can halve the prices of some non-adjacent nodes before starting any trips. The objective is to minimize the total price sum of all trips.  The price sum of a trip is the sum of the prices of all nodes on the path taken for that trip.",
                "constraints": [
                    "1 <= n <= 50",
                    "edges.length == n - 1",
                    "0 <= a<sub>i</sub>, b<sub>i</sub> <= n - 1",
                    "`edges` represents a valid tree.",
                    "price.length == n",
                    "`price[i]` is an even integer.",
                    "1 <= price[i] <= 1000",
                    "1 <= trips.length <= 100",
                    "0 <= start<sub>i</sub>, end<sub>i</sub> <= n - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 4, edges = [[0,1],[1,2],[1,3]], price = [2,2,10,6], trips = [[0,3],[2,1],[2,3]]",
                        "output": "23",
                        "explanation": "By halving the prices of nodes 0, 2, and 3, we get prices of 1, 2, 5, and 3 respectively. The path [0,1,3] costs 1 + 2 + 3 = 6. The path [2,1] costs 5 + 2 = 7. The path [2,1,3] costs 5 + 2 + 3 = 10. The total cost is 6 + 7 + 10 = 23. This is the minimum possible total cost."
                    },
                    {
                        "input": "n = 2, edges = [[0,1]], price = [2,2], trips = [[0,0]]",
                        "output": "1",
                        "explanation": "By halving the price of node 0, we get a price of 1.  The trip [0,0] then costs 1. This is the minimum possible total cost."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The final answer is the price[i] * freq[i], where freq[i] is the number of times node i was visited during the trip, and price[i] is the final price.",
            "To find freq[i] we will use dfs or bfs for each trip and update every node on the path start and end.",
            "Finally, to find the final price[i] we will use dynamic programming on the tree. Let dp(v, 0/1) denote the minimum total price with the node v\u2019s price being halved or not."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumTotalPrice(int n, vector<vector<int>>& edges, vector<int>& price,\n                        vector<vector<int>>& trips) {\n    vector<vector<int>> graph(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].push_back(v);\n      graph[v].push_back(u);\n    }\n\n    // count[i] := # times node i is traversed\n    vector<int> count(n);\n\n    for (const vector<int>& trip : trips) {\n      const int start = trip[0];\n      const int end = trip[1];\n      vector<int> path;\n      dfsCount(graph, start, /*prev=*/-1, end, count, path);\n    }\n\n    // dp[i][j] := min price sum for the i-th node with halved parent or not\n    dp.resize(n, vector<int>(2, -1));\n    return dfs(graph, 0, -1, price, count, false);\n  }\n\n private:\n  vector<vector<int>> dp;\n\n  void dfsCount(const vector<vector<int>>& graph, int u, int prev, int end,\n                vector<int>& count, vector<int>& path) {\n    path.push_back(u);\n    if (u == end) {\n      for (const int i : path)\n        count[i]++;\n      return;\n    }\n    for (const int v : graph[u])\n      if (v != prev)\n        dfsCount(graph, v, u, end, count, path);\n    path.pop_back();\n  }\n\n  int dfs(const vector<vector<int>>& graph, int u, int prev,\n          const vector<int>& price, const vector<int>& count,\n          int parentHalved) {\n    if (dp[u][parentHalved] != -1)\n      return dp[u][parentHalved];\n\n    int sumWithFullNode = price[u] * count[u];\n    for (const int v : graph[u])\n      if (v != prev)\n        sumWithFullNode += dfs(graph, v, u, price, count, false);\n\n    if (parentHalved)  // Can't halve this node if parent was halved.\n      return dp[u][parentHalved] = sumWithFullNode;\n\n    int sumWithHalvedNode = (price[u] / 2) * count[u];\n    for (const int v : graph[u])\n      if (v != prev)\n        sumWithHalvedNode += dfs(graph, v, u, price, count, true);\n\n    return dp[u][parentHalved] = min(sumWithFullNode, sumWithHalvedNode);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n  public int minimumTotalPrice(int n, int[][] edges, int[] price, int[][] trips) {\n    List<Integer>[] graph = new List[n];\n\n    for (int i = 0; i < n; i++)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].add(v);\n      graph[v].add(u);\n    }\n\n    // count[i] := # times node i is traversed\n    int[] count = new int[n];\n    for (int[] trip : trips) {\n      final int start = trip[0];\n      final int end = trip[1];\n      dfsCount(graph, start, -1, end, count, /*path=*/new ArrayList<>());\n    }\n\n    // dp[i][j] := min price sum for the i-th node with halved parent or not\n    dp = new Integer[n][2];\n    return dfs(graph, 0, -1, price, count, false);\n  }\n\n  private Integer[][] dp;\n\n  private void dfsCount(List<Integer>[] graph, int u, int prev, int end, int[] count,\n                        List<Integer> path) {\n    path.add(u);\n    if (u == end) {\n      for (final int i : path)\n        ++count[i];\n      return;\n    }\n    for (final int v : graph[u])\n      if (v != prev)\n        dfsCount(graph, v, u, end, count, path);\n    path.remove(path.size() - 1);\n  }\n\n  private int dfs(List<Integer>[] graph, int u, int prev, int[] price, int[] count,\n                  boolean parentHalved) {\n    if (dp[u][parentHalved ? 1 : 0] != null)\n      return dp[u][parentHalved ? 1 : 0];\n\n    int sumWithFullNode = price[u] * count[u];\n    for (final int v : graph[u])\n      if (v != prev)\n        sumWithFullNode += dfs(graph, v, u, price, count, false);\n\n    if (parentHalved) // Can't halve this node if parent was halved.\n      return dp[u][1] = sumWithFullNode;\n\n    int sumWithHalvedNode = (price[u] / 2) * count[u];\n    for (int v : graph[u])\n      if (v != prev)\n        sumWithHalvedNode += dfs(graph, v, u, price, count, true);\n\n    return dp[u][parentHalved ? 1 : 0] = Math.min(sumWithFullNode, sumWithHalvedNode);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumTotalPrice(self, n: int, edges: List[List[int]], price: List[int],\n                        trips: List[List[int]]) -> int:\n    graph = [[] for _ in range(n)]\n\n    for u, v in edges:\n      graph[u].append(v)\n      graph[v].append(u)\n\n    # count[i] := # times i is traversed\n    count = [0] * n\n\n    def dfsCount(u: int, prev: int, end: int, path: List[int]) -> None:\n      path.append(u)\n      if u == end:\n        for i in path:\n          count[i] += 1\n        return\n      for v in graph[u]:\n        if v != prev:\n          dfsCount(v, u, end,  path)\n      path.pop()\n\n    for start, end in trips:\n      dfsCount(start, -1, end, [])\n\n    @functools.lru_cache(None)\n    def dfs(u: int, prev: int, parentHalved: bool) -> int:\n      sumWithFullNode = price[u] * count[u]\n      for v in graph[u]:\n        if v != prev:\n          sumWithFullNode += dfs(v, u, False)\n\n      if parentHalved:  # Can't halve this node if parent was halved.\n        return sumWithFullNode\n\n      sumWithHalvedNode = (price[u] // 2) * count[u]\n      for v in graph[u]:\n        if v != prev:\n          sumWithHalvedNode += dfs(v, u, True)\n\n      return min(sumWithFullNode, sumWithHalvedNode)\n\n    return dfs(0, -1, False)\n",
                "lang_text": "py"
            }
        }
    }
}