{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2064",
            "title": "Minimized Maximum of Products Distributed to Any Store",
            "titleSlug": "minimized-maximum-of-products-distributed-to-any-store",
            "content": "<p>You are given an integer <code>n</code> indicating there are <code>n</code> specialty retail stores. There are <code>m</code> product types of varying amounts, which are given as a <strong>0-indexed</strong> integer array <code>quantities</code>, where <code>quantities[i]</code> represents the number of products of the <code>i<sup>th</sup></code> product type.</p>\n\n<p>You need to distribute <strong>all products</strong> to the retail stores following these rules:</p>\n\n<ul>\n\t<li>A store can only be given <strong>at most one product type</strong> but can be given <strong>any</strong> amount of it.</li>\n\t<li>After distribution, each store will have been given some number of products (possibly <code>0</code>). Let <code>x</code> represent the maximum number of products given to any store. You want <code>x</code> to be as small as possible, i.e., you want to <strong>minimize</strong> the <strong>maximum</strong> number of products that are given to any store.</li>\n</ul>\n\n<p>Return <em>the minimum possible</em> <code>x</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, quantities = [11,6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> One optimal way is:\n- The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3\n- The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3\nThe maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 7, quantities = [15,10,10]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> One optimal way is:\n- The 15 products of type 0 are distributed to the first three stores in these amounts: 5, 5, 5\n- The 10 products of type 1 are distributed to the next two stores in these amounts: 5, 5\n- The 10 products of type 2 are distributed to the last two stores in these amounts: 5, 5\nThe maximum number of products given to any store is max(5, 5, 5, 5, 5, 5, 5) = 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, quantities = [100000]\n<strong>Output:</strong> 100000\n<strong>Explanation:</strong> The only optimal way is:\n- The 100000 products of type 0 are distributed to the only store.\nThe maximum number of products given to any store is max(100000) = 100000.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == quantities.length</code></li>\n\t<li><code>1 &lt;= m &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= quantities[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 965,
            "dislikes": 35,
            "similarQuestions": "[{\"title\": \"Koko Eating Bananas\", \"titleSlug\": \"koko-eating-bananas\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Capacity To Ship Packages Within D Days\", \"titleSlug\": \"capacity-to-ship-packages-within-d-days\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Candies Allocated to K Children\", \"titleSlug\": \"maximum-candies-allocated-to-k-children\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find the Smallest Divisor Given a Threshold\", \"titleSlug\": \"find-the-smallest-divisor-given-a-threshold\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Magnetic Force Between Two Balls\", \"titleSlug\": \"magnetic-force-between-two-balls\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Limit of Balls in a Bag\", \"titleSlug\": \"minimum-limit-of-balls-in-a-bag\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Time to Complete Trips\", \"titleSlug\": \"minimum-time-to-complete-trips\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Robots Within Budget\", \"titleSlug\": \"maximum-number-of-robots-within-budget\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.1K\", \"totalSubmission\": \"48.4K\", \"totalAcceptedRaw\": 25060, \"totalSubmissionRaw\": 48412, \"acRate\": \"51.8%\"}",
            "hints": [
                "There exists a monotonic nature such that when x is smaller than some number, there will be no way to distribute, and when x is not smaller than that number, there will always be a way to distribute.",
                "If you are given a number k, where the number of products given to any store does not exceed k, could you determine if all products can be distributed?",
                "Implement a function canDistribute(k), which returns true if you can distribute all products such that any store will not be given more than k products, and returns false if you cannot. Use this function to binary search for the smallest possible k."
            ],
            "rephrased": {
                "body": "Given `n` specialty retail stores and `m` product types with varying amounts (represented by the `quantities` array), distribute all products to the stores. Each store can receive at most one product type, but any amount of it. The goal is to minimize the maximum number of products given to any store.",
                "constraints": [
                    "1 <= m <= n <= 10^5",
                    "1 <= quantities[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 6, quantities = [11,6]",
                        "output": "3",
                        "explanation": "One optimal distribution assigns quantities of 2, 3, 3, 3 from product type 0 to four stores, and quantities of 3, 3 from product type 1 to the remaining two stores. The maximum quantity assigned to any store is 3."
                    },
                    {
                        "input": "n = 7, quantities = [15,10,10]",
                        "output": "5",
                        "explanation": "One optimal distribution assigns quantities of 5, 5, 5 from product type 0 to three stores, 5, 5 from product type 1 to two stores, and 5, 5 from product type 2 to the last two stores. The maximum quantity assigned to any store is 5."
                    },
                    {
                        "input": "n = 1, quantities = [100000]",
                        "output": "100000",
                        "explanation": "The single store receives all 100,000 units of product type 0. The maximum quantity assigned to any store is 100,000."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "koko-eating-bananas",
                "title": "Koko Eating Bananas",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "capacity-to-ship-packages-within-d-days",
                "title": "Capacity To Ship Packages Within D Days",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-candies-allocated-to-k-children",
                "title": "Maximum Candies Allocated to K Children",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-the-smallest-divisor-given-a-threshold",
                "title": "Find the Smallest Divisor Given a Threshold",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "magnetic-force-between-two-balls",
                "title": "Magnetic Force Between Two Balls",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-limit-of-balls-in-a-bag",
                "title": "Minimum Limit of Balls in a Bag",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-time-to-complete-trips",
                "title": "Minimum Time to Complete Trips",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-robots-within-budget",
                "title": "Maximum Number of Robots Within Budget",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "There exists a monotonic nature such that when x is smaller than some number, there will be no way to distribute, and when x is not smaller than that number, there will always be a way to distribute.",
            "If you are given a number k, where the number of products given to any store does not exceed k, could you determine if all products can be distributed?",
            "Implement a function canDistribute(k), which returns true if you can distribute all products such that any store will not be given more than k products, and returns false if you cannot. Use this function to binary search for the smallest possible k."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimizedMaximum(int n, vector<int>& quantities) {\n    int l = 1;\n    int r = *max_element(quantities.begin(), quantities.end());\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (numStores(quantities, m) <= n)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n private:\n  int numStores(const vector<int>& quantities, int m) {\n    // ceil(q / m)\n    return accumulate(\n        quantities.begin(), quantities.end(), 0,\n        [&](int subtotal, int q) { return subtotal + (q - 1) / m + 1; });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimizedMaximum(int n, int[] quantities) {\n    int l = 1;\n    int r = Arrays.stream(quantities).max().getAsInt();\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (numStores(quantities, m) <= n)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n  private int numStores(int[] quantities, int m) {\n    // Math.ceil(q / m)\n    return Arrays.stream(quantities).reduce(0, (subtotal, q) -> subtotal + (q - 1) / m + 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimizedMaximum(self, n: int, quantities: List[int]) -> int:\n    l = 1\n    r = max(quantities)\n\n    def numStores(m: int) -> int:\n      return sum((q - 1) // m + 1 for q in quantities)\n\n    while l < r:\n      m = (l + r) // 2\n      if numStores(m) <= n:\n        r = m\n      else:\n        l = m + 1\n\n    return l\n",
                "lang_text": "py"
            }
        }
    }
}