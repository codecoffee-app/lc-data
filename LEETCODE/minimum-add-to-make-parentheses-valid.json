{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "921",
            "title": "Minimum Add to Make Parentheses Valid",
            "titleSlug": "minimum-add-to-make-parentheses-valid",
            "content": "<p>A parentheses string is valid if and only if:</p>\n\n<ul>\n\t<li>It is the empty string,</li>\n\t<li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid strings, or</li>\n\t<li>It can be written as <code>(A)</code>, where <code>A</code> is a valid string.</li>\n</ul>\n\n<p>You are given a parentheses string <code>s</code>. In one move, you can insert a parenthesis at any position of the string.</p>\n\n<ul>\n\t<li>For example, if <code>s = &quot;()))&quot;</code>, you can insert an opening parenthesis to be <code>&quot;(<strong>(</strong>)))&quot;</code> or a closing parenthesis to be <code>&quot;())<strong>)</strong>)&quot;</code>.</li>\n</ul>\n\n<p>Return <em>the minimum number of moves required to make </em><code>s</code><em> valid</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;())&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(((&quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;(&#39;</code> or <code>&#39;)&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3866,
            "dislikes": 184,
            "similarQuestions": "[{\"title\": \"Minimum Number of Swaps to Make the String Balanced\", \"titleSlug\": \"minimum-number-of-swaps-to-make-the-string-balanced\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"296.9K\", \"totalSubmission\": \"395.5K\", \"totalAcceptedRaw\": 296916, \"totalSubmissionRaw\": 395516, \"acRate\": \"75.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` consisting of only '(' and ')' characters, determine the minimum number of parenthesis insertions needed to make the string valid. A string is considered valid if:\n\n1.  It is empty.\n2.  It can be formed by concatenating two valid strings, `AB`.\n3.  It can be formed by enclosing a valid string in parentheses, `(A)`.\n\nYou can insert a parenthesis at any position in the string.",
                "constraints": [
                    "1 <= s.length <= 1000",
                    "s[i] is either '(' or ')'"
                ],
                "testcases": [
                    {
                        "input": "())",
                        "output": 1,
                        "explanation": "The string '())' requires one opening parenthesis to be inserted to become '()()', thus making it valid. Another valid string will be '(())'."
                    },
                    {
                        "input": "(((",
                        "output": 3,
                        "explanation": "The string '(((' requires three closing parentheses to be inserted to become '((()))', thus making it valid."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-swaps-to-make-the-string-balanced",
                "title": "Minimum Number of Swaps to Make the String Balanced",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minAddToMakeValid(string s) {\n    int l = 0;\n    int r = 0;\n\n    for (const char c : s)\n      if (c == '(') {\n        ++l;\n      } else {\n        if (l == 0)\n          ++r;\n        else\n          --l;\n      }\n\n    return l + r;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minAddToMakeValid(String s) {\n    int l = 0;\n    int r = 0;\n\n    for (final char c : s.toCharArray())\n      if (c == '(') {\n        ++l;\n      } else {\n        if (l == 0)\n          ++r;\n        else\n          --l;\n      }\n\n    return l + r;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minAddToMakeValid(self, s: str) -> int:\n    l = 0\n    r = 0\n\n    for c in s:\n      if c == '(':\n        l += 1\n      else:\n        if l == 0:\n          r += 1\n        else:\n          l -= 1\n\n    return l + r\n",
                "lang_text": "py"
            }
        }
    }
}