{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2457",
            "title": "Minimum Addition to Make Integer Beautiful",
            "titleSlug": "minimum-addition-to-make-integer-beautiful",
            "content": "<p>You are given two positive integers <code>n</code> and <code>target</code>.</p>\n\n<p>An integer is considered <strong>beautiful</strong> if the sum of its digits is less than or equal to <code>target</code>.</p>\n\n<p>Return the <em>minimum <strong>non-negative</strong> integer </em><code>x</code><em> such that </em><code>n + x</code><em> is beautiful</em>. The input will be generated such that it is always possible to make <code>n</code> beautiful.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 16, target = 6\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Initially n is 16 and its digit sum is 1 + 6 = 7. After adding 4, n becomes 20 and digit sum becomes 2 + 0 = 2. It can be shown that we can not make n beautiful with adding non-negative integer less than 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 467, target = 6\n<strong>Output:</strong> 33\n<strong>Explanation:</strong> Initially n is 467 and its digit sum is 4 + 6 + 7 = 17. After adding 33, n becomes 500 and digit sum becomes 5 + 0 + 0 = 5. It can be shown that we can not make n beautiful with adding non-negative integer less than 33.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, target = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Initially n is 1 and its digit sum is 1, which is already smaller than or equal to target.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>12</sup></code></li>\n\t<li><code>1 &lt;= target &lt;= 150</code></li>\n\t<li>The input will be generated such that it is always possible to make <code>n</code> beautiful.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 511,
            "dislikes": 23,
            "similarQuestions": "[{\"title\": \"Happy Number\", \"titleSlug\": \"happy-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.1K\", \"totalSubmission\": \"48.7K\", \"totalAcceptedRaw\": 18099, \"totalSubmissionRaw\": 48667, \"acRate\": \"37.2%\"}",
            "hints": [
                "Think about each digit independently.",
                "Turn the rightmost non-zero digit to zero until the digit sum is greater than target."
            ],
            "rephrased": {
                "body": "Given two positive integers `n` and `target`, an integer is considered **beautiful** if the sum of its digits is less than or equal to `target`.  Find the minimum non-negative integer `x` such that `n + x` is beautiful.  It is guaranteed that such an `x` always exists.",
                "constraints": [
                    "1 <= n <= 10^12",
                    "1 <= target <= 150",
                    "It is always possible to make `n` beautiful."
                ],
                "testcases": [
                    {
                        "input": "n = 16, target = 6",
                        "output": "4",
                        "explanation": "Initially, n = 16, and the digit sum is 1 + 6 = 7. Adding 4 to n results in 20, with a digit sum of 2 + 0 = 2, which is less than or equal to the target of 6. No smaller non-negative integer can be added to make the digit sum of n less than or equal to 6."
                    },
                    {
                        "input": "n = 467, target = 6",
                        "output": "33",
                        "explanation": "Initially, n = 467, and the digit sum is 4 + 6 + 7 = 17. Adding 33 to n results in 500, with a digit sum of 5 + 0 + 0 = 5, which is less than or equal to the target of 6.  It's the smallest non-negative integer addition to achieve this."
                    },
                    {
                        "input": "n = 1, target = 1",
                        "output": "0",
                        "explanation": "Initially, n = 1, and its digit sum is 1, which is already less than or equal to the target of 1. Thus, no addition is needed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "happy-number",
                "title": "Happy Number",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think about each digit independently.",
            "Turn the rightmost non-zero digit to zero until the digit sum is greater than target."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long makeIntegerBeautiful(long long n, int target) {\n    long long ans = 0;\n    long power = 1;\n\n    // E.g., n = 123. After tunning off the last bit by adding 7, n = 130,\n    // effectively, we can think n as 13. That's why we do n = (n / 10) + 1.\n    while (sum(n) > target) {\n      // Cost to turn off last digit.\n      ans += power * (10 - n % 10);\n      n = n / 10 + 1;\n      power *= 10;\n    }\n\n    return ans;\n  }\n\n private:\n  int sum(long long n) {\n    int res = 0;\n    while (n > 0) {\n      res += n % 10;\n      n /= 10;\n    }\n    return res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long makeIntegerBeautiful(long n, int target) {\n    long ans = 0;\n    long power = 1;\n\n    // E.g., n = 123. After tunning off the last bit by adding 7, n = 130,\n    // effectively, we can think n as 13. That's why we do n = (n / 10) + 1.\n    while (sum(n) > target) {\n      // Cost to turn off last digit.\n      ans += power * (10 - n % 10);\n      n = n / 10 + 1;\n      power *= 10;\n    }\n\n    return ans;\n  }\n\n  private int sum(long n) {\n    int res = 0;\n    while (n > 0) {\n      res += n % 10;\n      n /= 10;\n    }\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def makeIntegerBeautiful(self, n: int, target: int) -> int:\n    ans = 0\n    power = 1\n\n    # E.g., n = 123. After tunning off the last bit by adding 7, n = 130,\n    # effectively, we can think n as 13. That's why we do n = (n / 10) + 1.\n    while sum(map(int, str(n))) > target:\n      # Cost to turn off last digit.\n      ans += power * (10 - n % 10)\n      n = n // 10 + 1\n      power *= 10\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}