{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1703",
            "title": "Minimum Adjacent Swaps for K Consecutive Ones",
            "titleSlug": "minimum-adjacent-swaps-for-k-consecutive-ones",
            "content": "<p>You are given an integer array, <code>nums</code>, and an integer <code>k</code>. <code>nums</code> comprises of only <code>0</code>&#39;s and <code>1</code>&#39;s. In one move, you can choose two <strong>adjacent</strong> indices and swap their values.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of moves required so that </em><code>nums</code><em> has </em><code>k</code><em> <strong>consecutive</strong> </em><code>1</code><em>&#39;s</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,0,1,0,1], k = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In 1 move, nums could be [1,0,0,0,<u>1</u>,<u>1</u>] and have 2 consecutive 1&#39;s.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,0,0,0,0,1,1], k = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,<u>1</u>,<u>1</u>,<u>1</u>].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,0,1], k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> nums already has 2 consecutive 1&#39;s.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= k &lt;= sum(nums)</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 692,
            "dislikes": 23,
            "similarQuestions": "[{\"title\": \"Minimum Swaps to Group All 1's Together\", \"titleSlug\": \"minimum-swaps-to-group-all-1s-together\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Operations to Make Array Continuous\", \"titleSlug\": \"minimum-number-of-operations-to-make-array-continuous\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Adjacent Swaps to Make a Valid Array\", \"titleSlug\": \"minimum-adjacent-swaps-to-make-a-valid-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"10K\", \"totalSubmission\": \"23.6K\", \"totalAcceptedRaw\": 10000, \"totalSubmissionRaw\": 23580, \"acRate\": \"42.4%\"}",
            "hints": [
                "Choose k 1s and determine how many steps are required to move them into 1 group.",
                "Maintain a sliding window of k 1s, and maintain the steps required to group them.",
                "When you slide the window across, should you move the group to the right? Once you move the group to the right, it will never need to slide to the left again."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` consisting of 0s and 1s, and an integer `k`, determine the minimum number of adjacent swaps required to make `k` consecutive 1s in the array.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "nums[i] is 0 or 1",
                    "1 <= k <= sum(nums)"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,0,0,1,0,1], k = 2",
                        "output": "1",
                        "explanation": "By swapping the last '1' one position to the left, the array becomes [1,0,0,0,1,1], resulting in 2 consecutive 1s.  This requires only 1 move."
                    },
                    {
                        "input": "nums = [1,0,0,0,0,0,1,1], k = 3",
                        "output": "5",
                        "explanation": "Shifting the leftmost '1' five positions to the right results in the array [0,0,0,0,0,1,1,1], achieving 3 consecutive 1s. This is the minimum number of moves required."
                    },
                    {
                        "input": "nums = [1,1,0,1], k = 2",
                        "output": "0",
                        "explanation": "The array already has 2 consecutive 1s; therefore, no moves are required."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-swaps-to-group-all-1s-together",
                "title": "Minimum Swaps to Group All 1's Together",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-operations-to-make-array-continuous",
                "title": "Minimum Number of Operations to Make Array Continuous",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-adjacent-swaps-to-make-a-valid-array",
                "title": "Minimum Adjacent Swaps to Make a Valid Array",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Choose k 1s and determine how many steps are required to move them into 1 group.",
            "Maintain a sliding window of k 1s, and maintain the steps required to group them.",
            "When you slide the window across, should you move the group to the right? Once you move the group to the right, it will never need to slide to the left again."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minMoves(vector<int>& nums, int k) {\n    vector<int> ones;\n\n    for (int i = 0; i < nums.size(); ++i)\n      if (nums[i] == 1)\n        ones.push_back(i);\n\n    // Returns median index of [i..i + k)\n    auto getMedIndex = [&](int i) { return (i + (i + k - 1)) / 2; };\n\n    // Calculate the first group: window[0] = A[0..k)\n    const int median = ones[getMedIndex(0)];\n    int moves = 0;\n    for (int i = 0; i < k; ++i)\n      moves += abs(ones[i] - median);\n\n    int ans = moves;\n\n    for (int i = 1; i <= ones.size() - k; ++i) {\n      const int oldMedianIndex = ones[getMedIndex(i - 1)];\n      const int newMedianIndex = ones[getMedIndex(i)];\n      if (k & 1)\n        moves += newMedianIndex - oldMedianIndex;\n      moves -= newMedianIndex - ones[i - 1];\n      moves += ones[i + k - 1] - newMedianIndex;\n      ans = min(ans, moves);\n    }\n\n    auto nThSum = [&](int n) { return n * (n + 1) / 2; };\n    return ans - nThSum((k - 1) / 2) - nThSum(k / 2);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minMoves(int[] nums, int k) {\n    List<Integer> ones = new ArrayList<>();\n\n    for (int i = 0; i < nums.length; ++i)\n      if (nums[i] == 1)\n        ones.add(i);\n\n    final int median = ones.get(getMedIndex(0, k));\n    int moves = 0;\n    for (int i = 0; i < k; ++i)\n      moves += Math.abs(ones.get(i) - median);\n\n    int ans = moves;\n\n    for (int i = 1; i <= ones.size() - k; ++i) {\n      final int oldMedianIndex = ones.get(getMedIndex(i - 1, k));\n      final int newMedianIndex = ones.get(getMedIndex(i, k));\n      if (k % 2 == 1)\n        moves += newMedianIndex - oldMedianIndex;\n      moves -= newMedianIndex - ones.get(i - 1);\n      moves += ones.get(i + k - 1) - newMedianIndex;\n      ans = Math.min(ans, moves);\n    }\n\n    return ans - nThSum((k - 1) / 2) - nThSum(k / 2);\n  }\n\n  // Returns median index of [i..i + k)\n  private int getMedIndex(int i, int k) {\n    return (i + (i + k - 1)) / 2;\n  }\n\n  // Returns 1 + 2 + ... + n\n  private int nThSum(int n) {\n    return n * (n + 1) / 2;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}