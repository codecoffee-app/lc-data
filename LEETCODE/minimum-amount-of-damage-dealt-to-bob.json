{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3273",
            "title": "Minimum Amount of Damage Dealt to Bob",
            "titleSlug": "minimum-amount-of-damage-dealt-to-bob",
            "content": "<p>You are given an integer <code>power</code> and two integer arrays <code>damage</code> and <code>health</code>, both having length <code>n</code>.</p>\n\n<p>Bob has <code>n</code> enemies, where enemy <code>i</code> will deal Bob <code>damage[i]</code> <strong>points</strong> of damage per second while they are <em>alive</em> (i.e. <code>health[i] &gt; 0</code>).</p>\n\n<p>Every second, <strong>after</strong> the enemies deal damage to Bob, he chooses <strong>one</strong> of the enemies that is still <em>alive</em> and deals <code>power</code> points of damage to them.</p>\n\n<p>Determine the <strong>minimum</strong> total amount of damage points that will be dealt to Bob before <strong>all</strong> <code>n</code> enemies are <em>dead</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">power = 4, damage = [1,2,3,4], health = [4,5,6,8]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">39</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Attack enemy 3 in the first two seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is <code>10 + 10 = 20</code> points.</li>\n\t<li>Attack enemy 2 in the next two seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is <code>6 + 6 = 12</code> points.</li>\n\t<li>Attack enemy 0 in the next second, after which enemy 0 will go down, the number of damage points dealt to Bob is <code>3</code> points.</li>\n\t<li>Attack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is <code>2 + 2 = 4</code> points.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">power = 1, damage = [1,1,1,1], health = [1,2,3,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">20</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Attack enemy 0 in the first second, after which enemy 0 will go down, the number of damage points dealt to Bob is <code>4</code> points.</li>\n\t<li>Attack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is <code>3 + 3 = 6</code> points.</li>\n\t<li>Attack enemy 2 in the next three seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is <code>2 + 2 + 2 = 6</code> points.</li>\n\t<li>Attack enemy 3 in the next four seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is <code>1 + 1 + 1 + 1 = 4</code> points.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">power = 8, damage = [40], health = [59]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">320</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= power &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= n == damage.length == health.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= damage[i], health[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 140,
            "dislikes": 21,
            "similarQuestions": "[{\"title\": \"Minimum Time to Complete Trips\", \"titleSlug\": \"minimum-time-to-complete-trips\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Penalty for a Shop\", \"titleSlug\": \"minimum-penalty-for-a-shop\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.7K\", \"totalSubmission\": \"28.3K\", \"totalAcceptedRaw\": 10668, \"totalSubmissionRaw\": 28303, \"acRate\": \"37.7%\"}",
            "hints": [
                "Can we use sorting here along with a custom comparator?",
                "For any two enemies <code>i</code> and <code>j</code> with damages <code>damage[i]</code> and <code>damage[j]</code>, and time to take each of them down <code>t<sub>i</sub></code> and <code>t<sub>j</sub></code>, when is it better to choose enemy <code>i</code> over enemy <code>j</code> first?"
            ],
            "rephrased": {
                "body": "You are given an integer `power` and two integer arrays `damage` and `health`, both of length `n`. There are `n` enemies. Each enemy `i` deals `damage[i]` damage per second while alive (`health[i] > 0`). Every second, after the enemies deal damage, you can attack one alive enemy, dealing `power` damage to it. Determine the minimum total damage Bob receives before all enemies are defeated.",
                "constraints": [
                    "1 <= power <= 10^4",
                    "1 <= n == damage.length == health.length <= 10^5",
                    "1 <= damage[i], health[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "power = 4, damage = [1,2,3,4], health = [4,5,6,8]",
                        "output": "39",
                        "explanation": "An optimal strategy involves focusing on the enemy with damage 3 first (takes 2 attacks), then the enemy with damage 2 (takes 2 attacks), then the enemy with damage 1 (takes 1 attack), and finally the enemy with damage 4 (takes 2 attacks). The total damage received is (1+2+4)*2 + (1+2)*2 + 1*1 + 2*2 = 14 + 6 + 1 + 4 = 25 + 14 = 39."
                    },
                    {
                        "input": "power = 1, damage = [1,1,1,1], health = [1,2,3,4]",
                        "output": "20",
                        "explanation": "An optimal strategy involves attacking the enemies in ascending order of health. The total damage received is 4 + (3*2) + (2*3) + (1*4) = 4+6+6+4 = 20."
                    },
                    {
                        "input": "power = 8, damage = [40], health = [59]",
                        "output": "320",
                        "explanation": "There's only one enemy. It takes 8 damage to the enemy for 59/8 = 7.375-> 8 hits to kill it. So, the enemy attacks for 8 seconds. 8*40 = 320"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-time-to-complete-trips",
                "title": "Minimum Time to Complete Trips",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-penalty-for-a-shop",
                "title": "Minimum Penalty for a Shop",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we use sorting here along with a custom comparator?",
            "For any two enemies <code>i</code> and <code>j</code> with damages <code>damage[i]</code> and <code>damage[j]</code>, and time to take each of them down <code>t<sub>i</sub></code> and <code>t<sub>j</sub></code>, when is it better to choose enemy <code>i</code> over enemy <code>j</code> first?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Enemy {\n  int damage;\n  int timeTakenDown;\n};\n\nclass Solution {\n public:\n  long long minDamage(int power, vector<int>& damage, vector<int>& health) {\n    long ans = 0;\n    long sumDamage = accumulate(damage.begin(), damage.end(), 0L);\n    vector<Enemy> enemies;\n\n    for (int i = 0; i < damage.size(); ++i)\n      enemies.emplace_back(damage[i], (health[i] + power - 1) / power);\n\n    // It's better to take down the enemy i first if the damage dealt of taking\n    // down i first is less than the damage dealt of taking down j first. So,\n    //    damage[i] * t[i] + (t[i] + t[j]) * damage[j] <\n    //    damage[j] * t[j] + (t[i] + t[j]) * damage[i]\n    // => damage[i] * t[i] + damage[j] * t[i] + damage[j] * t[j] <\n    //    damage[j] * t[j] + damage[i] * t[j] + damage[i] * t[i]\n    // => damage[j] * t[i] < damage[i] * t[j]\n    // => damage[j] / t[j] < damage[i] / t[i]\n    ranges::sort(enemies, ranges::greater{}, [](const Enemy& e) {\n      return static_cast<double>(e.damage) / e.timeTakenDown;\n    });\n\n    for (const Enemy& enemy : enemies) {\n      ans += sumDamage * enemy.timeTakenDown;\n      sumDamage -= enemy.damage;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Enemy {\n  public int damage;\n  public int timeTakenDown;\n  public Enemy(int damage, int timeTakenDown) {\n    this.damage = damage;\n    this.timeTakenDown = timeTakenDown;\n  }\n}\n\nclass Solution {\n  public long minDamage(int power, int[] damage, int[] health) {\n    long ans = 0;\n    long sumDamage = Arrays.stream(damage).asLongStream().sum();\n    Enemy[] enemies = new Enemy[damage.length];\n\n    for (int i = 0; i < damage.length; ++i)\n      enemies[i] = new Enemy(damage[i], (health[i] + power - 1) / power);\n\n    // It's better to take down the enemy i first if the damage dealt of taking\n    // down i first is less than the damage dealt of taking down j first. So,\n    //    damage[i] * t[i] + (t[i] + t[j]) * damage[j] <\n    //    damage[j] * t[j] + (t[i] + t[j]) * damage[i]\n    // => damage[i] * t[i] + damage[j] * t[i] + damage[j] * t[j] <\n    //    damage[j] * t[j] + damage[i] * t[j] + damage[i] * t[i]\n    // => damage[j] * t[i] < damage[i] * t[j]\n    // => damage[j] / t[j] < damage[i] / t[i]\n    Arrays.sort(enemies,\n                (a, b)\n                    -> Double.compare((double) b.damage / b.timeTakenDown,\n                                      (double) a.damage / a.timeTakenDown));\n\n    for (final Enemy enemy : enemies) {\n      ans += sumDamage * enemy.timeTakenDown;\n      sumDamage -= enemy.damage;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from dataclasses import dataclass\n\n\n@dataclass(frozen=True)\nclass Enemy:\n  damage: int\n  timeTakenDown: int\n\n\nclass Solution:\n  def minDamage(self, power: int, damage: list[int], health: list[int]) -> int:\n    ans = 0\n    sumDamage = sum(damage)\n    enemies = [Enemy(d, (h + power - 1) // power)\n               for d, h in zip(damage, health)]\n\n    # It's better to take down the enemy i first if the damage dealt of taking\n    # down i first is less than the damage dealt of taking down j first. So,\n    #    damage[i] * t[i] + (t[i] + t[j]) * damage[j] <\n    #    damage[j] * t[j] + (t[i] + t[j]) * damage[i]\n    # => damage[i] * t[i] + damage[j] * t[i] + damage[j] * t[j] <\n    #    damage[j] * t[j] + damage[i] * t[j] + damage[i] * t[i]\n    # => damage[j] * t[i] < damage[i] * t[j]\n    # => damage[j] / t[j] < damage[i] / t[i]\n    enemies.sort(key=lambda x: -x.damage / x.timeTakenDown)\n\n    for enemy in enemies:\n      ans += sumDamage * enemy.timeTakenDown\n      sumDamage -= enemy.damage\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}