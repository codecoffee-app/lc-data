{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2391",
            "title": "Minimum Amount of Time to Collect Garbage",
            "titleSlug": "minimum-amount-of-time-to-collect-garbage",
            "content": "<p>You are given a <strong>0-indexed</strong> array of strings <code>garbage</code> where <code>garbage[i]</code> represents the assortment of garbage at the <code>i<sup>th</sup></code> house. <code>garbage[i]</code> consists only of the characters <code>&#39;M&#39;</code>, <code>&#39;P&#39;</code> and <code>&#39;G&#39;</code> representing one unit of metal, paper and glass garbage respectively. Picking up <strong>one</strong> unit of any type of garbage takes <code>1</code> minute.</p>\n\n<p>You are also given a <strong>0-indexed</strong> integer array <code>travel</code> where <code>travel[i]</code> is the number of minutes needed to go from house <code>i</code> to house <code>i + 1</code>.</p>\n\n<p>There are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house <code>0</code> and must visit each house <strong>in order</strong>; however, they do <strong>not</strong> need to visit every house.</p>\n\n<p>Only <strong>one</strong> garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks <strong>cannot</strong> do anything.</p>\n\n<p>Return<em> the <strong>minimum</strong> number of minutes needed to pick up all the garbage.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> garbage = [&quot;G&quot;,&quot;P&quot;,&quot;GP&quot;,&quot;GG&quot;], travel = [2,4,3]\n<strong>Output:</strong> 21\n<strong>Explanation:</strong>\nThe paper garbage truck:\n1. Travels from house 0 to house 1\n2. Collects the paper garbage at house 1\n3. Travels from house 1 to house 2\n4. Collects the paper garbage at house 2\nAltogether, it takes 8 minutes to pick up all the paper garbage.\nThe glass garbage truck:\n1. Collects the glass garbage at house 0\n2. Travels from house 0 to house 1\n3. Travels from house 1 to house 2\n4. Collects the glass garbage at house 2\n5. Travels from house 2 to house 3\n6. Collects the glass garbage at house 3\nAltogether, it takes 13 minutes to pick up all the glass garbage.\nSince there is no metal garbage, we do not need to consider the metal garbage truck.\nTherefore, it takes a total of 8 + 13 = 21 minutes to collect all the garbage.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> garbage = [&quot;MMM&quot;,&quot;PGM&quot;,&quot;GP&quot;], travel = [3,10]\n<strong>Output:</strong> 37\n<strong>Explanation:</strong>\nThe metal garbage truck takes 7 minutes to pick up all the metal garbage.\nThe paper garbage truck takes 15 minutes to pick up all the paper garbage.\nThe glass garbage truck takes 15 minutes to pick up all the glass garbage.\nIt takes a total of 7 + 15 + 15 = 37 minutes to collect all the garbage.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= garbage.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>garbage[i]</code> consists of only the letters <code>&#39;M&#39;</code>, <code>&#39;P&#39;</code>, and <code>&#39;G&#39;</code>.</li>\n\t<li><code>1 &lt;= garbage[i].length &lt;= 10</code></li>\n\t<li><code>travel.length == garbage.length - 1</code></li>\n\t<li><code>1 &lt;= travel[i] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1426,
            "dislikes": 219,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"118.1K\", \"totalSubmission\": \"137.1K\", \"totalAcceptedRaw\": 118102, \"totalSubmissionRaw\": 137149, \"acRate\": \"86.1%\"}",
            "hints": [
                "Where can we save time? By not visiting all the houses.",
                "For each type of garbage, find the house with the highest index that has at least 1 unit of this type of garbage."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed array of strings `garbage` where `garbage[i]` represents the assortment of garbage at the i-th house. `garbage[i]` consists only of the characters 'M', 'P' and 'G' representing one unit of metal, paper and glass garbage respectively. Picking up one unit of any type of garbage takes 1 minute.\n\nYou are also given a 0-indexed integer array `travel` where `travel[i]` is the number of minutes needed to go from house `i` to house `i + 1`.\n\nThere are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house 0 and must visit each house in order; however, they do not need to visit every house.\n\nOnly one garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks cannot do anything.\n\nReturn the minimum number of minutes needed to pick up all the garbage.",
                "constraints": [
                    "2 <= garbage.length <= 10^5",
                    "garbage[i] consists of only the letters 'M', 'P', and 'G'.",
                    "1 <= garbage[i].length <= 10",
                    "travel.length == garbage.length - 1",
                    "1 <= travel[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "garbage = [\"G\",\"P\",\"GP\",\"GG\"], travel = [2,4,3]",
                        "output": "21",
                        "explanation": "The paper truck travels to house 1, collects paper, travels to house 2, and collects paper.  Total time for paper is 2 + 1 + 4 + 1 = 8. The glass truck collects at house 0, travels to 1 and 2, collects at house 2, travels to 3, and collects at 3.  Total time is 1 + 2 + 4 + 1 + 3 + 2 = 13. The total time is 8+13=21"
                    },
                    {
                        "input": "garbage = [\"MMM\",\"PGM\",\"GP\"], travel = [3,10]",
                        "output": "37",
                        "explanation": "The metal truck takes 3 + 1 + 3 + 1 + 10 + 0 = 7 minutes for pickup and travel.\nThe paper truck takes 0 + 1 + 3 + 1 + 10 = 15 minutes\nThe glass truck takes 0 + 0 + 3+10 + 1 + 1 = 15 minutes\n Total 15+15+7=37"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Where can we save time? By not visiting all the houses.",
            "For each type of garbage, find the house with the highest index that has at least 1 unit of this type of garbage."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int garbageCollection(vector<string>& garbage, vector<int>& travel) {\n    vector<int> prefix(travel.size());\n    partial_sum(travel.begin(), travel.end(), prefix.begin());\n    const int timeM = getTime(garbage, prefix, 'M');\n    const int timeP = getTime(garbage, prefix, 'P');\n    const int timeG = getTime(garbage, prefix, 'G');\n    return timeM + timeP + timeG;\n  }\n\n private:\n  int getTime(const vector<string>& garbage, const vector<int>& prefix,\n              char c) {\n    int characterCount = 0;\n    int lastIndex = -1;\n    for (int i = 0; i < garbage.size(); ++i) {\n      const string& s = garbage[i];\n      if (any_of(s.begin(), s.end(), [c](const char g) { return g == c; }))\n        lastIndex = i;\n      characterCount += std::count(s.begin(), s.end(), c);\n    }\n    return characterCount + (lastIndex <= 0 ? 0 : prefix[lastIndex - 1]);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int garbageCollection(String[] garbage, int[] travel) {\n    int[] prefix = new int[travel.length];\n    prefix[0] = travel[0];\n    for (int i = 1; i < prefix.length; ++i)\n      prefix[i] += prefix[i - 1] + travel[i];\n    final int timeM = getTime(garbage, prefix, 'M');\n    final int timeP = getTime(garbage, prefix, 'P');\n    final int timeG = getTime(garbage, prefix, 'G');\n    return timeM + timeP + timeG;\n  }\n\n  private int getTime(String[] garbage, int[] prefix, char c) {\n    int characterCount = 0;\n    int lastIndex = -1;\n    for (int i = 0; i < garbage.length; ++i) {\n      final String s = garbage[i];\n      if (s.chars().anyMatch(g -> g == c))\n        lastIndex = i;\n      characterCount += (int) s.chars().filter(g -> g == c).count();\n    }\n    return characterCount + (lastIndex <= 0 ? 0 : prefix[lastIndex - 1]);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:\n    prefix = list(itertools.accumulate(travel))\n\n    def getTime(c: str) -> int:\n      characterCount = 0\n      lastIndex = -1\n      for i, s in enumerate(garbage):\n        if any(g == c for g in s):\n          lastIndex = i\n        characterCount += s.count(c)\n      return characterCount + (0 if lastIndex <= 0 else prefix[lastIndex - 1])\n\n    return getTime('M') + getTime('P') + getTime('G')\n",
                "lang_text": "py"
            }
        }
    }
}