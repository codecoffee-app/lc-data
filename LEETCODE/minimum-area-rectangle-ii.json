{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "963",
            "title": "Minimum Area Rectangle II",
            "titleSlug": "minimum-area-rectangle-ii",
            "content": "<p>You are given an array of points in the <strong>X-Y</strong> plane <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p>\n\n<p>Return <em>the minimum area of any rectangle formed from these points, with sides <strong>not necessarily parallel</strong> to the X and Y axes</em>. If there is not any such rectangle, return <code>0</code>.</p>\n\n<p>Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/21/1a.png\" style=\"width: 398px; height: 400px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,2],[2,1],[1,0],[0,1]]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/22/2.png\" style=\"width: 400px; height: 251px;\" />\n<pre>\n<strong>Input:</strong> points = [[0,1],[2,1],[1,1],[1,0],[2,0]]\n<strong>Output:</strong> 1.00000\n<strong>Explanation:</strong> The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/22/3.png\" style=\"width: 383px; height: 400px;\" />\n<pre>\n<strong>Input:</strong> points = [[0,3],[1,2],[3,1],[1,3],[2,1]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no possible rectangle to form from these points.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 50</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li>All the given points are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 355,
            "dislikes": 447,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Geometry",
                    "slug": "geometry"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.3K\", \"totalSubmission\": \"48.1K\", \"totalAcceptedRaw\": 26312, \"totalSubmissionRaw\": 48080, \"acRate\": \"54.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of unique points in the X-Y plane, determine the minimum area of any rectangle formed by these points. The sides of the rectangle do not necessarily need to be parallel to the X and Y axes. If no such rectangle can be formed, return 0. Your answer should be within 10<sup>-5</sup> of the actual answer.",
                "constraints": [
                    "1 <= points.length <= 50",
                    "points[i].length == 2",
                    "0 <= x<sub>i</sub>, y<sub>i</sub> <= 4 * 10<sup>4</sup>",
                    "All the given points are unique."
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[2,1],[1,0],[0,1]]",
                        "output": "2.00000",
                        "explanation": "The minimum area rectangle is formed by the points [1,2], [2,1], [1,0], and [0,1], with an area of 2."
                    },
                    {
                        "input": "[[0,1],[2,1],[1,1],[1,0],[2,0]]",
                        "output": "1.00000",
                        "explanation": "The minimum area rectangle is formed by the points [1,0], [1,1], [2,1], and [2,0], with an area of 1."
                    },
                    {
                        "input": "[[0,3],[1,2],[3,1],[1,3],[2,1]]",
                        "output": "0",
                        "explanation": "There is no possible rectangle to form from these points."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Geometry",
                "slug": "geometry"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  double minAreaFreeRect(vector<vector<int>>& points) {\n    long long ans = LLONG_MAX;\n    // For each A, B pair points, {hash(A, B): (ax, ay, bx, by)}\n    unordered_map<int, vector<tuple<int, int, int, int>>> centerToPoints;\n\n    for (const vector<int>& A : points)\n      for (const vector<int>& B : points) {\n        const int center = hash(A, B);\n        centerToPoints[center].emplace_back(A[0], A[1], B[0], B[1]);\n      }\n\n    // For all pair points \"that share the same center\"\n    for (const auto& [_, points] : centerToPoints)\n      for (const auto& [ax, ay, bx, by] : points)\n        for (const auto& [cx, cy, dx, dy] : points)\n          // AC is perpendicular to AD\n          // AC dot AD = (cx - ax, cy - ay) dot (dx - ax, dy - ay) == 0\n          if ((cx - ax) * (dx - ax) + (cy - ay) * (dy - ay) == 0) {\n            const long long squaredArea =\n                dist(ax, ay, cx, cy) * dist(ax, ay, dx, dy);\n            if (squaredArea > 0)\n              ans = min(ans, squaredArea);\n          }\n\n    return ans == LLONG_MAX ? 0 : sqrt(ans);\n  }\n\n private:\n  int hash(const vector<int>& p, const vector<int>& q) {\n    return ((long long)(p[0] + q[0]) << 16) + (p[1] + q[1]);\n  }\n\n  long long dist(int px, int py, int qx, int qy) {\n    return (px - qx) * (px - qx) + (py - qy) * (py - qy);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public double minAreaFreeRect(int[][] points) {\n    Long ans = Long.MAX_VALUE;\n    // For each A, B pair points, {hash(A, B): (ax, ay, bx, by)}\n    Map<Integer, List<int[]>> centerToPoints = new HashMap<>();\n\n    for (int[] A : points)\n      for (int[] B : points) {\n        int center = hash(A, B);\n        if (centerToPoints.get(center) == null)\n          centerToPoints.put(center, new ArrayList<>());\n        centerToPoints.get(center).add(new int[] {A[0], A[1], B[0], B[1]});\n      }\n\n    // For all pair points \"that share the same center\"\n    for (List<int[]> pointPairs : centerToPoints.values())\n      for (int[] ab : pointPairs)\n        for (int[] cd : pointPairs) {\n          final int ax = ab[0], ay = ab[1];\n          final int cx = cd[0], cy = cd[1];\n          final int dx = cd[2], dy = cd[3];\n          // AC is perpendicular to AD\n          // AC dot AD = (cx - ax, cy - ay) dot (dx - ax, dy - ay) == 0\n          if ((cx - ax) * (dx - ax) + (cy - ay) * (dy - ay) == 0) {\n            Long squaredArea = dist(ax, ay, cx, cy) * dist(ax, ay, dx, dy);\n            if (squaredArea > 0)\n              ans = Math.min(ans, squaredArea);\n          }\n        }\n\n    return ans == Long.MAX_VALUE ? 0 : Math.sqrt(ans);\n  }\n\n  private int hash(int[] p, int[] q) {\n    return ((p[0] + q[0]) << 16) + (p[1] + q[1]);\n  }\n\n  private Long dist(long px, long py, long qx, long qy) {\n    return (px - qx) * (px - qx) + (py - qy) * (py - qy);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minAreaFreeRect(self, points: List[List[int]]) -> float:\n    ans = math.inf\n    # For each A, B pair points, {hash(A, B): (ax, ay, bx, by)}\n    centerToPoints = collections.defaultdict(list)\n\n    for ax, ay in points:\n      for bx, by in points:\n        center = ((ax + bx) / 2, (ay + by) / 2)\n        centerToPoints[center].append((ax, ay, bx, by))\n\n    def dist(px: int, py: int, qx: int, qy: int) -> float:\n      return (px - qx)**2 + (py - qy)**2\n\n    # For all pair points \"that share the same center\"\n    for points in centerToPoints.values():\n      for ax, ay, _, _ in points:\n        for cx, cy, dx, dy in points:\n          # AC is perpendicular to AD\n          # AC dot AD = (cx - ax, cy - ay) dot (dx - ax, dy - ay) == 0\n          if (cx - ax) * (dx - ax) + (cy - ay) * (dy - ay) == 0:\n            squaredArea = dist(ax, ay, cx, cy) * dist(ax, ay, dx, dy)\n            if squaredArea > 0:\n              ans = min(ans, squaredArea)\n\n    return 0 if ans == math.inf else sqrt(ans)\n",
                "lang_text": "py"
            }
        }
    }
}