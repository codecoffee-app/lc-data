{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "939",
            "title": "Minimum Area Rectangle",
            "titleSlug": "minimum-area-rectangle",
            "content": "<p>You are given an array of points in the <strong>X-Y</strong> plane <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p>\n\n<p>Return <em>the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes</em>. If there is not any such rectangle, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/03/rec1.JPG\" style=\"width: 500px; height: 447px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[1,3],[3,1],[3,3],[2,2]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/03/rec2.JPG\" style=\"width: 500px; height: 477px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 500</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li>All the given points are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1866,
            "dislikes": 270,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Geometry",
                    "slug": "geometry"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"129.6K\", \"totalSubmission\": \"243.4K\", \"totalAcceptedRaw\": 129579, \"totalSubmissionRaw\": 243359, \"acRate\": \"53.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of points in the X-Y plane, `points`, where `points[i] = [x_i, y_i]`, find the minimum area of a rectangle formed from these points with sides parallel to the X and Y axes. If no such rectangle exists, return 0.",
                "constraints": [
                    "1 <= points.length <= 500",
                    "points[i].length == 2",
                    "0 <= x_i, y_i <= 4 * 10^4",
                    "All the given points are unique."
                ],
                "testcases": [
                    {
                        "input": "[[1,1],[1,3],[3,1],[3,3],[2,2]]",
                        "output": "4",
                        "explanation": null
                    },
                    {
                        "input": "[[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Geometry",
                "slug": "geometry"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minAreaRect(vector<vector<int>>& points) {\n    int ans = INT_MAX;\n    unordered_map<int, unordered_set<int>> xToYs;\n\n    for (const vector<int>& p : points)\n      xToYs[p[0]].insert(p[1]);\n\n    for (int i = 1; i < points.size(); ++i)\n      for (int j = 0; j < i; ++j) {\n        const vector<int>& p = points[i];\n        const vector<int>& q = points[j];\n        if (p[0] == q[0] || p[1] == q[1])\n          continue;\n        if (xToYs[p[0]].count(q[1]) && xToYs[q[0]].count(p[1]))\n          ans = min(ans, abs(p[0] - q[0]) * abs(p[1] - q[1]));\n      }\n\n    return ans == INT_MAX ? 0 : ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minAreaRect(int[][] points) {\n    int ans = Integer.MAX_VALUE;\n    Map<Integer, Set<Integer>> xToYs = new HashMap<>();\n\n    for (int[] p : points) {\n      xToYs.putIfAbsent(p[0], new HashSet<>());\n      xToYs.get(p[0]).add(p[1]);\n    }\n\n    for (int i = 1; i < points.length; ++i)\n      for (int j = 0; j < i; ++j) {\n        int[] p = points[i];\n        int[] q = points[j];\n        if (p[0] == q[0] || p[1] == q[1])\n          continue;\n        if (xToYs.get(p[0]).contains(q[1]) && xToYs.get(q[0]).contains(p[1]))\n          ans = Math.min(ans, Math.abs(p[0] - q[0]) * Math.abs(p[1] - q[1]));\n      }\n\n    return ans == Integer.MAX_VALUE ? 0 : ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minAreaRect(self, points: List[List[int]]) -> int:\n    ans = math.inf\n    xToYs = collections.defaultdict(set)\n\n    for x, y in points:\n      xToYs[x].add(y)\n\n    for i in range(len(points)):\n      for j in range(i):\n        x1, y1 = points[i]\n        x2, y2 = points[j]\n        if x1 == x2 or y1 == y2:\n          continue\n        if y2 in xToYs[x1] and y1 in xToYs[x2]:\n          ans = min(ans, abs(x1 - x2) * abs(y1 - y2))\n\n    return ans if ans < math.inf else 0\n",
                "lang_text": "py"
            }
        }
    }
}