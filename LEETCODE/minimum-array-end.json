{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3133",
            "title": "Minimum Array End",
            "titleSlug": "minimum-array-end",
            "content": "<p>You are given two integers <code>n</code> and <code>x</code>. You have to construct an array of <strong>positive</strong> integers <code>nums</code> of size <code>n</code> where for every <code>0 &lt;= i &lt; n - 1</code>, <code>nums[i + 1]</code> is <strong>greater than</strong> <code>nums[i]</code>, and the result of the bitwise <code>AND</code> operation between all elements of <code>nums</code> is <code>x</code>.</p>\n\n<p>Return the <strong>minimum</strong> possible value of <code>nums[n - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, x = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>nums</code> can be <code>[4,5,6]</code> and its last element is 6.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2, x = 7</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>nums</code> can be <code>[7,15]</code> and its last element is 15.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, x &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 190,
            "dislikes": 14,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.8K\", \"totalSubmission\": \"33.5K\", \"totalAcceptedRaw\": 12805, \"totalSubmissionRaw\": 33490, \"acRate\": \"38.2%\"}",
            "hints": [
                "Each element of the array should be obtained by \u201cmerging\u201d <code>x</code> and <code>v</code> where <code>v = 0, 1, 2, \u2026(n - 1)</code>.",
                "To merge <code>x</code> with another number <code>v</code>, keep the set bits of <code>x</code> untouched, for all the other bits, fill the set bits of <code>v</code> from right to left in order one by one.",
                "So the final answer is the \u201cmerge\u201d of <code>x</code> and <code>n - 1</code>."
            ],
            "rephrased": {
                "body": "Given two integers `n` and `x`, construct an array `nums` of `n` positive integers such that `nums[i+1] > nums[i]` for all `0 <= i < n-1`, and the bitwise AND of all elements in `nums` equals `x`. Find the minimum possible value of `nums[n-1]`.",
                "constraints": [
                    "1 <= n, x <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "n = 3, x = 4",
                        "output": "6",
                        "explanation": "One possible array satisfying the conditions is `[4, 5, 6]`. The bitwise AND of the elements is 4, and the last element is 6."
                    },
                    {
                        "input": "n = 2, x = 7",
                        "output": "15",
                        "explanation": "One possible array satisfying the conditions is `[7, 15]`. The bitwise AND of the elements is 7, and the last element is 15."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Each element of the array should be obtained by \u201cmerging\u201d <code>x</code> and <code>v</code> where <code>v = 0, 1, 2, \u2026(n - 1)</code>.",
            "To merge <code>x</code> with another number <code>v</code>, keep the set bits of <code>x</code> untouched, for all the other bits, fill the set bits of <code>v</code> from right to left in order one by one.",
            "So the final answer is the \u201cmerge\u201d of <code>x</code> and <code>n - 1</code>."
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minEnd(int n, int x) {\n    // Set x's 0s with (n - 1)'s LSb-to-MSb bits, preserving x's 1s. This\n    // operation increase x for (n - 1) iterations while preserving x's 1s.\n    const int kMaxBit = log2(n) + log2(x) + 2;\n    const long k = n - 1;\n    long ans = x;\n    int kBinaryIndex = 0;\n\n    for (int i = 0; i < kMaxBit; ++i) {\n      if ((ans >> i & 1) == 0) {\n        // Set x's 0 with k's bit if the running bit of k is 1.\n        if ((k >> kBinaryIndex & 1) == 1)\n          ans |= 1L << i;\n        ++kBinaryIndex;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minEnd(int n, int x) {\n    // Set x's 0s with (n - 1)'s LSb-to-MSb bits, preserving x's 1s. This\n    // operation increase x for (n - 1) iterations while preserving x's 1s.\n    final int kMaxBit = bitLength(n) + bitLength(x);\n    final long k = n - 1;\n    long ans = x;\n    int kBinaryIndex = 0;\n\n    for (int i = 0; i < kMaxBit; ++i) {\n      if ((ans >> i & 1) == 0) {\n        // Set x's 0 with k's bit if the running bit of k is 1.\n        if ((k >> kBinaryIndex & 1) == 1)\n          ans |= 1L << i;\n        ++kBinaryIndex;\n      }\n    }\n\n    return ans;\n  }\n\n  private int bitLength(int n) {\n    return 32 - Integer.numberOfLeadingZeros(n);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minEnd(self, n: int, x: int) -> int:\n    # Set x's 0s with (n - 1)'s LSb-to-MSb bits, preserving x's 1s. This\n    # operation increase x for (n - 1) iterations while preserving x's 1s.\n    kMaxBit = n.bit_length() + x.bit_length()\n    k = n - 1\n    kBinaryIndex = 0\n\n    for i in range(kMaxBit):\n      if x >> i & 1 == 0:\n        # Set x's 0 with k's bit if the running bit of k is 1.\n        if k >> kBinaryIndex & 1 == 1:\n          x |= 1 << i\n        kBinaryIndex += 1\n\n    return x\n",
                "lang_text": "py"
            }
        }
    }
}