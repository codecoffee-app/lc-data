{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2856",
            "title": "Minimum Array Length After Pair Removals",
            "titleSlug": "minimum-array-length-after-pair-removals",
            "content": "<p>Given an integer array <code>num</code> sorted in non-decreasing order.</p>\n\n<p>You can perform the following operation any number of times:</p>\n\n<ul>\n\t<li>Choose <strong>two</strong> indices, <code>i</code> and <code>j</code>, where <code>nums[i] &lt; nums[j]</code>.</li>\n\t<li>Then, remove the elements at indices <code>i</code> and <code>j</code> from <code>nums</code>. The remaining elements retain their original order, and the array is re-indexed.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> length of <code>nums</code> after applying the operation zero or more times.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/05/18/tcase1.gif\" style=\"width: 160px; height: 70px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,1,2,2,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/05/19/tcase2.gif\" style=\"width: 240px; height: 70px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1000000000,1000000000]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Since both numbers are equal, they cannot be removed.</p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,4,4,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/05/19/tcase3.gif\" style=\"width: 210px; height: 70px;\" /></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 351,
            "dislikes": 92,
            "similarQuestions": "[{\"title\": \"Find the Maximum Number of Marked Indices\", \"titleSlug\": \"find-the-maximum-number-of-marked-indices\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.8K\", \"totalSubmission\": \"99.6K\", \"totalAcceptedRaw\": 21755, \"totalSubmissionRaw\": 99643, \"acRate\": \"21.8%\"}",
            "hints": [
                "To minimize the length of the array, we should maximize the number of operations performed.",
                "To perform <code>k</code> operations, it is optimal to use the smallest <code>k</code> values and the largest <code>k</code> values in <code>nums</code>.",
                "What is the best way to make pairs from the smallest <code>k</code> values and the largest <code>k</code> values so it is possible to remove all the pairs?",
                "If we consider the smallest <code>k</code> values and the largest <code>k</code> values as two separate <strong>sorted 0-indexed</strong> arrays, <code>a</code> and <code>b</code>, It is optimal to pair <code>a[i]</code> and <code>b[i]</code>. So, a <code>k</code> is valid if <code>a[i] < b[i]</code> for all <code>i</code> in the range <code>[0, k - 1]</code>.",
                "The greatest possible valid <code>k</code> can be found using binary search.",
                "The answer is <code>nums.length - 2 * k</code>."
            ],
            "rephrased": {
                "body": "Given a non-decreasingly sorted integer array `nums`, you can perform the following operation any number of times:\n\nChoose two indices, `i` and `j`, where `nums[i] < nums[j]`. Remove the elements at indices `i` and `j` from `nums`. The remaining elements retain their original order, and the array is re-indexed.\n\nReturn the minimum possible length of `nums` after applying the operation zero or more times.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^9",
                    "nums is sorted in non-decreasing order."
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4]",
                        "output": "0",
                        "explanation": "It's possible to remove all elements by pairing elements such that the first is always smaller than the second. For example: (1,4), (2,3)"
                    },
                    {
                        "input": "[1,1,2,2,3,3]",
                        "output": "0",
                        "explanation": "It's possible to remove all elements by pairing elements such that the first is always smaller than the second. For example: (1,2), (1,2), (3,3)"
                    },
                    {
                        "input": "[1000000000,1000000000]",
                        "output": "2",
                        "explanation": "Since both numbers are equal, it's impossible to find i and j where nums[i] < nums[j], so no elements can be removed."
                    },
                    {
                        "input": "[2,3,4,4,4]",
                        "output": "1",
                        "explanation": "We can remove 2 and one of the 4s, leaving us with [3,4,4]. Then we can remove 3 and one of the 4s, leaving us with [4]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-the-maximum-number-of-marked-indices",
                "title": "Find the Maximum Number of Marked Indices",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "To minimize the length of the array, we should maximize the number of operations performed.",
            "To perform <code>k</code> operations, it is optimal to use the smallest <code>k</code> values and the largest <code>k</code> values in <code>nums</code>.",
            "What is the best way to make pairs from the smallest <code>k</code> values and the largest <code>k</code> values so it is possible to remove all the pairs?",
            "If we consider the smallest <code>k</code> values and the largest <code>k</code> values as two separate <strong>sorted 0-indexed</strong> arrays, <code>a</code> and <code>b</code>, It is optimal to pair <code>a[i]</code> and <code>b[i]</code>. So, a <code>k</code> is valid if <code>a[i] < b[i]</code> for all <code>i</code> in the range <code>[0, k - 1]</code>.",
            "The greatest possible valid <code>k</code> can be found using binary search.",
            "The answer is <code>nums.length - 2 * k</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minLengthAfterRemovals(vector<int>& nums) {\n    const int n = nums.size();\n    unordered_map<int, int> count;\n    int maxFreq = 0;\n\n    for (const int num : nums)\n      ++count[num];\n\n    for (const auto& [_, freq] : count)\n      maxFreq = max(maxFreq, freq);\n\n    // The num with max freq cancel all the other nums.\n    if (maxFreq <= n / 2)\n      return n % 2;\n    // The num with max freq cancel all the remaining nums.\n    return maxFreq - (n - maxFreq);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minLengthAfterRemovals(List<Integer> nums) {\n    final int n = nums.size();\n    Map<Integer, Integer> count = new HashMap<>();\n    int maxFreq = 0;\n\n    for (final int num : nums)\n      count.merge(num, 1, Integer::sum);\n\n    for (final int freq : count.values())\n      maxFreq = Math.max(maxFreq, freq);\n\n    // The num with max freq cancels all the other nums.\n    if (maxFreq <= n / 2)\n      return n % 2;\n    // The num with max freq cancels all the remaining nums.\n    return maxFreq - (n - maxFreq);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minLengthAfterRemovals(self, nums: List[int]) -> int:\n    n = len(nums)\n    count = collections.Counter(nums)\n    maxFreq = max(count.values())\n\n    # The num with max freq cancels all the other nums.\n    if maxFreq <= n / 2:\n      return n % 2\n    # The num with max freq cancels all the remaining nums.\n    return maxFreq - (n - maxFreq)\n",
                "lang_text": "py"
            }
        }
    }
}