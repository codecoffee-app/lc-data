{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "712",
            "title": "Minimum ASCII Delete Sum for Two Strings",
            "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
            "content": "<p>Given two strings <code>s1</code> and&nbsp;<code>s2</code>, return <em>the lowest <strong>ASCII</strong> sum of deleted characters to make two strings equal</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;sea&quot;, s2 = &quot;eat&quot;\n<strong>Output:</strong> 231\n<strong>Explanation:</strong> Deleting &quot;s&quot; from &quot;sea&quot; adds the ASCII value of &quot;s&quot; (115) to the sum.\nDeleting &quot;t&quot; from &quot;eat&quot; adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;delete&quot;, s2 = &quot;leet&quot;\n<strong>Output:</strong> 403\n<strong>Explanation:</strong> Deleting &quot;dee&quot; from &quot;delete&quot; to turn the string into &quot;let&quot;,\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting &quot;e&quot; from &quot;leet&quot; adds 101[e] to the sum.\nAt the end, both strings are equal to &quot;let&quot;, and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into &quot;lee&quot; or &quot;eet&quot;, we would get answers of 433 or 417, which are higher.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 1000</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3895,
            "dislikes": 103,
            "similarQuestions": "[{\"title\": \"Edit Distance\", \"titleSlug\": \"edit-distance\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Delete Operation for Two Strings\", \"titleSlug\": \"delete-operation-for-two-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"137.1K\", \"totalSubmission\": \"211K\", \"totalAcceptedRaw\": 137121, \"totalSubmissionRaw\": 211040, \"acRate\": \"65.0%\"}",
            "hints": [
                "Let dp(i, j) be the answer for inputs s1[i:] and s2[j:]."
            ],
            "rephrased": {
                "body": "Given two strings `s1` and `s2`, determine the minimum sum of ASCII values of characters that must be deleted from both strings to make them equal.",
                "constraints": [
                    "1 <= s1.length, s2.length <= 1000",
                    "s1 and s2 consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"sea\", s2 = \"eat\"",
                        "output": "231",
                        "explanation": "To make the strings equal, we can delete 's' from \"sea\" (ASCII value 115) and 't' from \"eat\" (ASCII value 116). The minimum sum is 115 + 116 = 231."
                    },
                    {
                        "input": "s1 = \"delete\", s2 = \"leet\"",
                        "output": "403",
                        "explanation": "To make the strings equal, we can delete \"dee\" from \"delete\" (100 + 101 + 101) and \"e\" from \"leet\" (101). The minimum sum is 100 + 101 + 101 + 101 = 403."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "edit-distance",
                "title": "Edit Distance",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-increasing-subsequence",
                "title": "Longest Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "delete-operation-for-two-strings",
                "title": "Delete Operation for Two Strings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let dp(i, j) be the answer for inputs s1[i:] and s2[j:]."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumDeleteSum(string s1, string s2) {\n    const int m = s1.length();\n    const int n = s2.length();\n    // dp[i][j] := min cost to make s1[0..i) and s2[0..j) equal\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1));\n\n    // Delete s1[i - 1]\n    for (int i = 1; i <= m; ++i)\n      dp[i][0] = dp[i - 1][0] + s1[i - 1];\n\n    // Delete s2[j - 1]\n    for (int j = 1; j <= n; ++j)\n      dp[0][j] = dp[0][j - 1] + s2[j - 1];\n\n    for (int i = 1; i <= m; ++i)\n      for (int j = 1; j <= n; ++j)\n        if (s1[i - 1] == s2[j - 1])\n          dp[i][j] = dp[i - 1][j - 1];\n        else\n          dp[i][j] = min(dp[i - 1][j] + s1[i - 1], dp[i][j - 1] + s2[j - 1]);\n\n    return dp[m][n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumDeleteSum(String s1, String s2) {\n    final int m = s1.length();\n    final int n = s2.length();\n    // dp[i][j] := min cost to make s1[0..i) and s2[0..j) equal\n    int[][] dp = new int[m + 1][n + 1];\n\n    // Delete s1.charAt(i - 1)\n    for (int i = 1; i <= m; ++i)\n      dp[i][0] = dp[i - 1][0] + s1.charAt(i - 1);\n\n    // Delete s2.charAt(j - 1)\n    for (int j = 1; j <= n; ++j)\n      dp[0][j] = dp[0][j - 1] + s2.charAt(j - 1);\n\n    for (int i = 1; i <= m; ++i)\n      for (int j = 1; j <= n; ++j)\n        if (s1.charAt(i - 1) == s2.charAt(j - 1))\n          dp[i][j] = dp[i - 1][j - 1];\n        else\n          dp[i][j] = Math.min(dp[i - 1][j] + s1.charAt(i - 1), dp[i][j - 1] + s2.charAt(j - 1));\n\n    return dp[m][n];\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}