{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2256",
            "title": "Minimum Average Difference",
            "titleSlug": "minimum-average-difference",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code>.</p>\n\n<p>The <strong>average difference</strong> of the index <code>i</code> is the <strong>absolute</strong> <strong>difference</strong> between the average of the <strong>first</strong> <code>i + 1</code> elements of <code>nums</code> and the average of the <strong>last</strong> <code>n - i - 1</code> elements. Both averages should be <strong>rounded down</strong> to the nearest integer.</p>\n\n<p>Return<em> the index with the <strong>minimum average difference</strong></em>. If there are multiple such indices, return the <strong>smallest</strong> one.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>The <strong>absolute difference</strong> of two numbers is the absolute value of their difference.</li>\n\t<li>The <strong>average</strong> of <code>n</code> elements is the <strong>sum</strong> of the <code>n</code> elements divided (<strong>integer division</strong>) by <code>n</code>.</li>\n\t<li>The average of <code>0</code> elements is considered to be <code>0</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,5,3,9,5,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n- The average difference of index 0 is: |2 / 1 - (5 + 3 + 9 + 5 + 3) / 5| = |2 / 1 - 25 / 5| = |2 - 5| = 3.\n- The average difference of index 1 is: |(2 + 5) / 2 - (3 + 9 + 5 + 3) / 4| = |7 / 2 - 20 / 4| = |3 - 5| = 2.\n- The average difference of index 2 is: |(2 + 5 + 3) / 3 - (9 + 5 + 3) / 3| = |10 / 3 - 17 / 3| = |3 - 5| = 2.\n- The average difference of index 3 is: |(2 + 5 + 3 + 9) / 4 - (5 + 3) / 2| = |19 / 4 - 8 / 2| = |4 - 4| = 0.\n- The average difference of index 4 is: |(2 + 5 + 3 + 9 + 5) / 5 - 3 / 1| = |24 / 5 - 3 / 1| = |4 - 3| = 1.\n- The average difference of index 5 is: |(2 + 5 + 3 + 9 + 5 + 3) / 6 - 0| = |27 / 6 - 0| = |4 - 0| = 4.\nThe average difference of index 3 is the minimum average difference so return 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nThe only index is 0 so return 0.\nThe average difference of index 0 is: |0 / 1 - 0| = |0 - 0| = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1462,
            "dislikes": 166,
            "similarQuestions": "[{\"title\": \"Split Array With Same Average\", \"titleSlug\": \"split-array-with-same-average\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Split Array\", \"titleSlug\": \"number-of-ways-to-split-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"79.9K\", \"totalSubmission\": \"185.7K\", \"totalAcceptedRaw\": 79887, \"totalSubmissionRaw\": 185723, \"acRate\": \"43.0%\"}",
            "hints": [
                "How can we use precalculation to efficiently calculate the average difference at an index?",
                "Create a prefix and/or suffix sum array."
            ],
            "rephrased": {
                "body": "Given a **0-indexed** integer array `nums` of length `n`, find the index with the minimum average difference. The average difference at index `i` is the absolute difference between the average of the first `i + 1` elements and the average of the last `n - i - 1` elements, both rounded down to the nearest integer. If multiple indices have the minimum average difference, return the smallest one. Note that the average of 0 elements is considered to be 0.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "0 <= nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2,5,3,9,5,3]",
                        "output": "3",
                        "explanation": "The average differences for each index are: \n- Index 0: |2 / 1 - (5 + 3 + 9 + 5 + 3) / 5| = |2 - 5| = 3.\n- Index 1: |(2 + 5) / 2 - (3 + 9 + 5 + 3) / 4| = |3 - 5| = 2.\n- Index 2: |(2 + 5 + 3) / 3 - (9 + 5 + 3) / 3| = |3 - 5| = 2.\n- Index 3: |(2 + 5 + 3 + 9) / 4 - (5 + 3) / 2| = |4 - 4| = 0.\n- Index 4: |(2 + 5 + 3 + 9 + 5) / 5 - 3 / 1| = |4 - 3| = 1.\n- Index 5: |(2 + 5 + 3 + 9 + 5 + 3) / 6 - 0| = |4 - 0| = 4.\nIndex 3 has the minimum average difference (0), so the output is 3."
                    },
                    {
                        "input": "[0]",
                        "output": "0",
                        "explanation": "The only index is 0. The average difference is |0 / 1 - 0| = 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "split-array-with-same-average",
                "title": "Split Array With Same Average",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-ways-to-split-array",
                "title": "Number of Ways to Split Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How can we use precalculation to efficiently calculate the average difference at an index?",
            "Create a prefix and/or suffix sum array."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumAverageDifference(vector<int>& nums) {\n    const int n = nums.size();\n    int ans = 0;\n    int minDiff = INT_MAX;\n    long prefix = 0;\n    long suffix = accumulate(nums.begin(), nums.end(), 0L);\n\n    for (int i = 0; i < nums.size(); ++i) {\n      prefix += nums[i];\n      suffix -= nums[i];\n      const int prefixAvg = prefix / (i + 1);\n      const int suffixAvg = (i == n - 1) ? 0 : suffix / (n - i - 1);\n      const int diff = abs(prefixAvg - suffixAvg);\n      if (diff < minDiff) {\n        ans = i;\n        minDiff = diff;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumAverageDifference(int[] nums) {\n    final int n = nums.length;\n    int ans = 0;\n    int minDiff = Integer.MAX_VALUE;\n    long prefix = 0;\n    long suffix = Arrays.stream(nums).asLongStream().sum();\n\n    for (int i = 0; i < nums.length; ++i) {\n      prefix += nums[i];\n      suffix -= nums[i];\n      final int prefixAvg = (int) (prefix / (i + 1));\n      final int suffixAvg = (i == n - 1) ? 0 : (int) (suffix / (n - i - 1));\n      final int diff = Math.abs(prefixAvg - suffixAvg);\n      if (diff < minDiff) {\n        ans = i;\n        minDiff = diff;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumAverageDifference(self, nums: List[int]) -> int:\n    n = len(nums)\n    ans = 0\n    minDiff = inf\n    prefix = 0\n    suffix = sum(nums)\n\n    for i, num in enumerate(nums):\n      prefix += num\n      suffix -= num\n      prefixAvg = prefix // (i + 1)\n      suffixAvg = 0 if i == n - 1 else suffix // (n - i - 1)\n      diff = abs(prefixAvg - suffixAvg)\n      if diff < minDiff:\n        ans = i\n        minDiff = diff\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}