{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3194",
            "title": "Minimum Average of Smallest and Largest Elements",
            "titleSlug": "minimum-average-of-smallest-and-largest-elements",
            "content": "<p>You have an array of floating point numbers <code>averages</code> which is initially empty. You are given an array <code>nums</code> of <code>n</code> integers where <code>n</code> is even.</p>\n\n<p>You repeat the following procedure <code>n / 2</code> times:</p>\n\n<ul>\n\t<li>Remove the <strong>smallest</strong> element, <code>minElement</code>, and the <strong>largest</strong> element <code>maxElement</code>,&nbsp;from <code>nums</code>.</li>\n\t<li>Add <code>(minElement + maxElement) / 2</code> to <code>averages</code>.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> element in <code>averages</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [7,8,3,4,15,13,4,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5.5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>step</th>\n\t\t\t<th>nums</th>\n\t\t\t<th>averages</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td>[7,8,3,4,15,13,4,1]</td>\n\t\t\t<td>[]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>[7,8,3,4,13,4]</td>\n\t\t\t<td>[8]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>[7,8,4,4]</td>\n\t\t\t<td>[8,8]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>[7,4]</td>\n\t\t\t<td>[8,8,6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>[]</td>\n\t\t\t<td>[8,8,6,5.5]</td>\n\t\t</tr>\n\t</tbody>\n</table>\nThe smallest element of averages, 5.5, is returned.</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,9,8,3,10,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5.5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>step</th>\n\t\t\t<th>nums</th>\n\t\t\t<th>averages</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td><span class=\"example-io\">[1,9,8,3,10,5]</span></td>\n\t\t\t<td>[]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td><span class=\"example-io\">[9,8,3,5]</span></td>\n\t\t\t<td>[5.5]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td><span class=\"example-io\">[8,5]</span></td>\n\t\t\t<td>[5.5,6]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>[]</td>\n\t\t\t<td>[5.5,6,6.5]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,7,8,9]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5.0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>step</th>\n\t\t\t<th>nums</th>\n\t\t\t<th>averages</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td><span class=\"example-io\">[1,2,3,7,8,9]</span></td>\n\t\t\t<td>[]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td><span class=\"example-io\">[2,3,7,8]</span></td>\n\t\t\t<td>[5]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td><span class=\"example-io\">[3,7]</span></td>\n\t\t\t<td>[5,5]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td><span class=\"example-io\">[]</span></td>\n\t\t\t<td>[5,5,5]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 50</code></li>\n\t<li><code>n</code> is even.</li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 28,
            "dislikes": 1,
            "similarQuestions": "[{\"title\": \"Number of Distinct Averages\", \"titleSlug\": \"number-of-distinct-averages\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [],
            "stats": "{\"totalAccepted\": \"31.6K\", \"totalSubmission\": \"38.2K\", \"totalAcceptedRaw\": 31646, \"totalSubmissionRaw\": 38209, \"acRate\": \"82.8%\"}",
            "hints": [
                "If <code>nums</code> is sorted, then the elements of <code>averages</code> are <code>(nums[i] + nums[n - i - 1]) / 2</code>  for all <code>i < n / 2</code>."
            ],
            "rephrased": {
                "body": "Given an array `nums` of `n` integers, where `n` is even, perform the following procedure `n / 2` times:\n\n1.  Remove the smallest element, `minElement`, and the largest element, `maxElement`, from `nums`.\n2.  Calculate the average of `minElement` and `maxElement`: `(minElement + maxElement) / 2`.\n3.  Append this average to a new array called `averages`.\n\nReturn the minimum element in the `averages` array.",
                "constraints": [
                    "2 <= n == nums.length <= 50",
                    "n is even.",
                    "1 <= nums[i] <= 50"
                ],
                "testcases": [
                    {
                        "input": "[7,8,3,4,15,13,4,1]",
                        "output": "5.5",
                        "explanation": "Initially, nums = [7,8,3,4,15,13,4,1] and averages = [].\nStep 1: minElement = 1, maxElement = 15. averages.append((1+15)/2) = 8. nums becomes [7,8,3,4,13,4].\nStep 2: minElement = 3, maxElement = 13. averages.append((3+13)/2) = 8. nums becomes [7,8,4,4].\nStep 3: minElement = 4, maxElement = 8. averages.append((4+8)/2) = 6. nums becomes [7,4].\nStep 4: minElement = 4, maxElement = 7. averages.append((4+7)/2) = 5.5. nums becomes [].\naverages = [8, 8, 6, 5.5]. The minimum value is 5.5."
                    },
                    {
                        "input": "[1,9,8,3,10,5]",
                        "output": "5.5",
                        "explanation": "Initially, nums = [1,9,8,3,10,5] and averages = [].\nStep 1: minElement = 1, maxElement = 10. averages.append((1+10)/2) = 5.5. nums becomes [9,8,3,5].\nStep 2: minElement = 3, maxElement = 9. averages.append((3+9)/2) = 6. nums becomes [8,5].\nStep 3: minElement = 5, maxElement = 8. averages.append((5+8)/2) = 6.5. nums becomes [].\naverages = [5.5, 6, 6.5]. The minimum value is 5.5."
                    },
                    {
                        "input": "[1,2,3,7,8,9]",
                        "output": "5.0",
                        "explanation": "Initially, nums = [1,2,3,7,8,9] and averages = [].\nStep 1: minElement = 1, maxElement = 9. averages.append((1+9)/2) = 5. nums becomes [2,3,7,8].\nStep 2: minElement = 2, maxElement = 8. averages.append((2+8)/2) = 5. nums becomes [3,7].\nStep 3: minElement = 3, maxElement = 7. averages.append((3+7)/2) = 5. nums becomes [].\naverages = [5, 5, 5]. The minimum value is 5.0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "number-of-distinct-averages",
                "title": "Number of Distinct Averages",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If <code>nums</code> is sorted, then the elements of <code>averages</code> are <code>(nums[i] + nums[n - i - 1]) / 2</code>  for all <code>i < n / 2</code>."
        ],
        "relatedTopics": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  double minimumAverage(vector<int>& nums) {\n    constexpr int kMax = 50;\n    double ans = kMax;\n    int i = 0;\n    int j = nums.size() - 1;\n\n    ranges::sort(nums);\n\n    while (i < j)\n      ans = min(ans, (nums[i++] + nums[j--]) / 2.0);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public double minimumAverage(int[] nums) {\n    final int kMax = 50;\n    double ans = kMax;\n    int i = 0;\n    int j = nums.length - 1;\n\n    Arrays.sort(nums);\n\n    while (i < j)\n      ans = Math.min(ans, (nums[i++] + nums[j--]) / 2.0);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumAverage(self, nums: list[int]) -> float:\n    nums.sort()\n    return min((nums[i] + nums[~i]) / 2\n               for i in range(len(nums) // 2 + 1))\n",
                "lang_text": "py"
            }
        }
    }
}