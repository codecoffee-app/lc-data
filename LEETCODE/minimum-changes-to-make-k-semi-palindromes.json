{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2911",
            "title": "Minimum Changes to Make K Semi-palindromes",
            "titleSlug": "minimum-changes-to-make-k-semi-palindromes",
            "content": "<p>Given a string <code>s</code> and an integer <code>k</code>, partition <code>s</code> into <code>k</code> <strong><span data-keyword=\"substring-nonempty\">substrings</span></strong> such that the letter changes needed to make each substring a <strong>semi-palindrome</strong>&nbsp;are minimized.</p>\n\n<p>Return the <em><strong>minimum</strong> number of letter changes</em> required<em>.</em></p>\n\n<p>A <strong>semi-palindrome</strong> is a special type of string that can be divided into <strong><span data-keyword=\"palindrome\">palindromes</span></strong> based on a repeating pattern. To check if a string is a semi-palindrome:\u200b</p>\n\n<ol>\n\t<li>Choose a positive divisor <code>d</code> of the string&#39;s length. <code>d</code> can range from <code>1</code> up to, but not including, the string&#39;s length. For a string of length <code>1</code>, it does not have a valid divisor as per this definition, since the only divisor is its length, which is not allowed.</li>\n\t<li>For a given divisor <code>d</code>, divide the string into groups where each group contains characters from the string that follow a repeating pattern of length <code>d</code>. Specifically, the first group consists of characters at positions <code>1</code>, <code>1 + d</code>, <code>1 + 2d</code>, and so on; the second group includes characters at positions <code>2</code>, <code>2 + d</code>, <code>2 + 2d</code>, etc.</li>\n\t<li>The string is considered a semi-palindrome if each of these groups forms a palindrome.</li>\n</ol>\n\n<p>Consider the string <code>&quot;abcabc&quot;</code>:</p>\n\n<ul>\n\t<li>The length of <code>&quot;abcabc&quot;</code> is <code>6</code>. Valid divisors are <code>1</code>, <code>2</code>, and <code>3</code>.</li>\n\t<li>For <code>d = 1</code>: The entire string <code>&quot;abcabc&quot;</code> forms one group. Not a palindrome.</li>\n\t<li>For <code>d = 2</code>:\n\t<ul>\n\t\t<li>Group 1 (positions <code>1, 3, 5</code>): <code>&quot;acb&quot;</code></li>\n\t\t<li>Group 2 (positions <code>2, 4, 6</code>): <code>&quot;bac&quot;</code></li>\n\t\t<li>Neither group forms a palindrome.</li>\n\t</ul>\n\t</li>\n\t<li>For <code>d = 3</code>:\n\t<ul>\n\t\t<li>Group 1 (positions <code>1, 4</code>): <code>&quot;aa&quot;</code></li>\n\t\t<li>Group 2 (positions <code>2, 5</code>): <code>&quot;bb&quot;</code></li>\n\t\t<li>Group 3 (positions <code>3, 6</code>): <code>&quot;cc&quot;</code></li>\n\t\t<li>All groups form palindromes. Therefore, <code>&quot;abcabc&quot;</code> is a semi-palindrome.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1: </strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> s = &quot;abcac&quot;, k = 2 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 1 </span></p>\n\n<p><strong>Explanation: </strong> Divide <code>s</code> into <code>&quot;ab&quot;</code> and <code>&quot;cac&quot;</code>. <code>&quot;cac&quot;</code> is already semi-palindrome. Change <code>&quot;ab&quot;</code> to <code>&quot;aa&quot;</code>, it becomes semi-palindrome with <code>d = 1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2: </strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> s = &quot;abcdef&quot;, k = 2 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 2 </span></p>\n\n<p><strong>Explanation: </strong> Divide <code>s</code> into substrings <code>&quot;abc&quot;</code> and <code>&quot;def&quot;</code>. Each&nbsp;needs one change to become semi-palindrome.</p>\n</div>\n\n<p><strong class=\"example\">Example 3: </strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> s = &quot;aabbaa&quot;, k = 3 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 0 </span></p>\n\n<p><strong>Explanation: </strong> Divide <code>s</code> into substrings <code>&quot;aa&quot;</code>, <code>&quot;bb&quot;</code> and <code>&quot;aa&quot;</code>.&nbsp;All are already semi-palindromes.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= k &lt;= s.length / 2</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 120,
            "dislikes": 101,
            "similarQuestions": "[{\"title\": \"Palindrome Partitioning III\", \"titleSlug\": \"palindrome-partitioning-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.7K\", \"totalSubmission\": \"10.3K\", \"totalAcceptedRaw\": 3697, \"totalSubmissionRaw\": 10323, \"acRate\": \"35.8%\"}",
            "hints": [
                "Define <code>dp[i][j]</code> as the minimum count of letter changes needed to split the suffix of string <code>s</code> starting from <code>s[i]</code> into <code>j</code> valid parts.",
                "We have <code>dp[i][j] = min(dp[x + 1][j - 1] + v[i][x])</code>. Here <code>v[i][x]</code> is the minimum number of letter changes to change substring <code>s[i..x]</code> into semi-palindrome.",
                "<code>v[i][j]</code> can be calculated separately by <b>brute-force</b>. We can create a table of <code>v[i][j]</code> independently to improve the complexity. Also note that semi-palindrome\u2019s length is at least <code>2</code>."
            ],
            "rephrased": {
                "body": "Given a string `s` and an integer `k`, the goal is to partition `s` into `k` non-empty substrings. The objective is to minimize the total number of character changes needed to transform each substring into a semi-palindrome.\n\nA semi-palindrome is a string that can be divided into palindromic groups based on a repeating pattern.  To determine if a string is a semi-palindrome, you iterate through divisors `d` of the string's length (where `d` is between 1 and the length of the string, exclusive).  For each divisor `d`, you create groups of characters based on the repeating pattern of length `d`.  Specifically, group `i` contains the characters at indices `i`, `i + d`, `i + 2d`, and so on (1-based indexing). If all groups are palindromes for any valid `d`, the string is a semi-palindrome.\n\nReturn the minimum number of character changes required.",
                "constraints": [
                    "2 <= s.length <= 200",
                    "1 <= k <= s.length / 2",
                    "s contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"abcac\", k = 2",
                        "output": "1",
                        "explanation": "The string `s` is divided into `ab` and `cac`. `cac` is already a semi-palindrome. By changing `ab` to `aa`, it becomes a semi-palindrome with d = 1. Therefore, only one change is required."
                    },
                    {
                        "input": "s = \"abcdef\", k = 2",
                        "output": "2",
                        "explanation": "The string `s` is divided into substrings `abc` and `def`. Each substring needs one change to become a semi-palindrome. `abc` can be changed to `aba` (1 change) and `def` can be changed to `ded` (1 change) to make each semi-palindrome."
                    },
                    {
                        "input": "s = \"aabbaa\", k = 3",
                        "output": "0",
                        "explanation": "The string `s` is divided into substrings `aa`, `bb`, and `aa`. All substrings are already semi-palindromes."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-partitioning-iii",
                "title": "Palindrome Partitioning III",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Define <code>dp[i][j]</code> as the minimum count of letter changes needed to split the suffix of string <code>s</code> starting from <code>s[i]</code> into <code>j</code> valid parts.",
            "We have <code>dp[i][j] = min(dp[x + 1][j - 1] + v[i][x])</code>. Here <code>v[i][x]</code> is the minimum number of letter changes to change substring <code>s[i..x]</code> into semi-palindrome.",
            "<code>v[i][j]</code> can be calculated separately by <b>brute-force</b>. We can create a table of <code>v[i][j]</code> independently to improve the complexity. Also note that semi-palindrome\u2019s length is at least <code>2</code>."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumChanges(string s, int k) {\n    const int n = s.length();\n    // factors[i] := factors of i\n    const vector<vector<int>> factors = getFactors(n);\n    // cost[i][j] := changes to make s[i..j] a semi-palindrome\n    const vector<vector<int>> cost = getCost(s, n, factors);\n    // dp[i][j] := the minimum changes to split s[i:] into j valid parts\n    vector<vector<int>> dp(n + 1, vector<int>(k + 1, n));\n\n    dp[n][0] = 0;\n\n    for (int i = n - 1; i >= 0; --i)\n      for (int j = 1; j <= k; ++j)\n        for (int l = i + 1; l < n; ++l)\n          dp[i][j] = min(dp[i][j], dp[l + 1][j - 1] + cost[i][l]);\n\n    return dp[0][k];\n  }\n\n private:\n  vector<vector<int>> getFactors(int n) {\n    vector<vector<int>> factors(n + 1);\n    for (int i = 1; i <= n; ++i)\n      factors[i].push_back(1);\n    for (int d = 2; d < n; ++d)\n      for (int i = d * 2; i <= n; i += d)\n        factors[i].push_back(d);\n    return factors;\n  }\n\n  vector<vector<int>> getCost(const string& s, int n,\n                              const vector<vector<int>>& factors) {\n    vector<vector<int>> cost(n, vector<int>(n));\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j) {\n        const int length = j - i + 1;\n        int minCost = length;\n        for (const int d : factors[length])\n          minCost = min(minCost, getCost(s, i, j, d));\n        cost[i][j] = minCost;\n      }\n    return cost;\n  }\n\n  // Returns the cost to make s[i..j] a semi-palindrome of `d`.\n  int getCost(const string& s, int i, int j, int d) {\n    int cost = 0;\n    for (int offset = 0; offset < d; ++offset) {\n      int l = i + offset;\n      int r = j - d + 1 + offset;\n      while (l < r) {\n        if (s[l] != s[r])\n          ++cost;\n        l += d;\n        r -= d;\n      }\n    }\n    return cost;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumChanges(String s, int k) {\n    final int n = s.length();\n    // factors[i] := factors of i\n    List<Integer>[] factors = getFactors(n);\n    // cost[i][j] := changes to make s[i..j] a semi-palindrome\n    int[][] cost = getCost(s, n, factors);\n    // dp[i][j] := the minimum changes to split s[i:] into j valid parts\n    int[][] dp = new int[n + 1][k + 1];\n\n    Arrays.stream(dp).forEach(A -> Arrays.fill(A, n));\n    dp[n][0] = 0;\n\n    for (int i = n - 1; i >= 0; --i)\n      for (int j = 1; j <= k; ++j)\n        for (int l = i + 1; l < n; ++l)\n          dp[i][j] = Math.min(dp[i][j], dp[l + 1][j - 1] + cost[i][l]);\n\n    return dp[0][k];\n  }\n\n  private List<Integer>[] getFactors(int n) {\n    List<Integer>[] factors = new List[n + 1];\n    for (int i = 1; i <= n; ++i)\n      factors[i] = new ArrayList<>(Arrays.asList(1));\n    for (int d = 2; d < n; ++d)\n      for (int i = d * 2; i <= n; i += d)\n        factors[i].add(d);\n    return factors;\n  }\n\n  private int[][] getCost(final String s, int n, List<Integer>[] factors) {\n    int[][] cost = new int[n][n];\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j) {\n        final int length = j - i + 1;\n        int minCost = length;\n        for (final int d : factors[length])\n          minCost = Math.min(minCost, getCost(s, i, j, d));\n        cost[i][j] = minCost;\n      }\n    return cost;\n  }\n\n  // Returns the cost to make s[i..j] a semi-palindrome of `d`.\n  private int getCost(final String s, int i, int j, int d) {\n    int cost = 0;\n    for (int offset = 0; offset < d; ++offset) {\n      int l = i + offset;\n      int r = j - d + 1 + offset;\n      while (l < r) {\n        if (s.charAt(l) != s.charAt(r))\n          ++cost;\n        l += d;\n        r -= d;\n      }\n    }\n    return cost;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumChanges(self, s: str, k: int) -> int:\n    n = len(s)\n    # factors[i] := factors of i\n    factors = self._getFactors(n)\n    # cost[i][j] := changes to make s[i..j] a semi-palindrome\n    cost = self._getCost(s, n, factors)\n    # dp[i][j] := the minimum changes to split s[i:] into j valid parts\n    dp = [[n] * (k + 1) for _ in range(n + 1)]\n\n    dp[n][0] = 0\n\n    for i in range(n - 1, -1, -1):\n      for j in range(1, k + 1):\n        for l in range(i + 1, n):\n          dp[i][j] = min(dp[i][j], dp[l + 1][j - 1] + cost[i][l])\n\n    return dp[0][k]\n\n  def _getFactors(self, n: int) -> List[List[int]]:\n    factors = [[1] for _ in range(n + 1)]\n    for d in range(2, n):\n      for i in range(d * 2, n + 1, d):\n        factors[i].append(d)\n    return factors\n\n  def _getCost(self, s: str, n: int, factors: List[List[int]]) -> List[List[int]]:\n    cost = [[0] * n for _ in range(n)]\n    for i in range(n):\n      for j in range(i + 1, n):\n        length = j - i + 1\n        minCost = length\n        for d in factors[length]:\n          minCost = min(minCost, self._getCostD(s, i, j, d))\n        cost[i][j] = minCost\n    return cost\n\n  def _getCostD(self, s: str, i: int, j: int, d: int) -> int:\n    \"\"\"Returns the cost to make s[i..j] a semi-palindrome of `d`.\"\"\"\n    cost = 0\n    for offset in range(d):\n      l = i + offset\n      r = j - d + 1 + offset\n      while l < r:\n        if s[l] != s[r]:\n          cost += 1\n        l += d\n        r -= d\n    return cost\n",
                "lang_text": "py"
            }
        }
    }
}