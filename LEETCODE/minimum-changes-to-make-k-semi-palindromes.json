{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2911",
            "title": "Minimum Changes to Make K Semi-palindromes",
            "titleSlug": "minimum-changes-to-make-k-semi-palindromes",
            "content": "<p>Given a string <code>s</code> and an integer <code>k</code>, partition <code>s</code> into <code>k</code> <strong><span data-keyword=\"substring-nonempty\">substrings</span></strong> such that the letter changes needed to make each substring a <strong>semi-palindrome</strong>&nbsp;are minimized.</p>\n\n<p>Return the <em><strong>minimum</strong> number of letter changes</em> required<em>.</em></p>\n\n<p>A <strong>semi-palindrome</strong> is a special type of string that can be divided into <strong><span data-keyword=\"palindrome\">palindromes</span></strong> based on a repeating pattern. To check if a string is a semi-palindrome:\u200b</p>\n\n<ol>\n\t<li>Choose a positive divisor <code>d</code> of the string&#39;s length. <code>d</code> can range from <code>1</code> up to, but not including, the string&#39;s length. For a string of length <code>1</code>, it does not have a valid divisor as per this definition, since the only divisor is its length, which is not allowed.</li>\n\t<li>For a given divisor <code>d</code>, divide the string into groups where each group contains characters from the string that follow a repeating pattern of length <code>d</code>. Specifically, the first group consists of characters at positions <code>1</code>, <code>1 + d</code>, <code>1 + 2d</code>, and so on; the second group includes characters at positions <code>2</code>, <code>2 + d</code>, <code>2 + 2d</code>, etc.</li>\n\t<li>The string is considered a semi-palindrome if each of these groups forms a palindrome.</li>\n</ol>\n\n<p>Consider the string <code>&quot;abcabc&quot;</code>:</p>\n\n<ul>\n\t<li>The length of <code>&quot;abcabc&quot;</code> is <code>6</code>. Valid divisors are <code>1</code>, <code>2</code>, and <code>3</code>.</li>\n\t<li>For <code>d = 1</code>: The entire string <code>&quot;abcabc&quot;</code> forms one group. Not a palindrome.</li>\n\t<li>For <code>d = 2</code>:\n\t<ul>\n\t\t<li>Group 1 (positions <code>1, 3, 5</code>): <code>&quot;acb&quot;</code></li>\n\t\t<li>Group 2 (positions <code>2, 4, 6</code>): <code>&quot;bac&quot;</code></li>\n\t\t<li>Neither group forms a palindrome.</li>\n\t</ul>\n\t</li>\n\t<li>For <code>d = 3</code>:\n\t<ul>\n\t\t<li>Group 1 (positions <code>1, 4</code>): <code>&quot;aa&quot;</code></li>\n\t\t<li>Group 2 (positions <code>2, 5</code>): <code>&quot;bb&quot;</code></li>\n\t\t<li>Group 3 (positions <code>3, 6</code>): <code>&quot;cc&quot;</code></li>\n\t\t<li>All groups form palindromes. Therefore, <code>&quot;abcabc&quot;</code> is a semi-palindrome.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1: </strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> s = &quot;abcac&quot;, k = 2 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 1 </span></p>\n\n<p><strong>Explanation: </strong> Divide <code>s</code> into <code>&quot;ab&quot;</code> and <code>&quot;cac&quot;</code>. <code>&quot;cac&quot;</code> is already semi-palindrome. Change <code>&quot;ab&quot;</code> to <code>&quot;aa&quot;</code>, it becomes semi-palindrome with <code>d = 1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2: </strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> s = &quot;abcdef&quot;, k = 2 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 2 </span></p>\n\n<p><strong>Explanation: </strong> Divide <code>s</code> into substrings <code>&quot;abc&quot;</code> and <code>&quot;def&quot;</code>. Each&nbsp;needs one change to become semi-palindrome.</p>\n</div>\n\n<p><strong class=\"example\">Example 3: </strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> s = &quot;aabbaa&quot;, k = 3 </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 0 </span></p>\n\n<p><strong>Explanation: </strong> Divide <code>s</code> into substrings <code>&quot;aa&quot;</code>, <code>&quot;bb&quot;</code> and <code>&quot;aa&quot;</code>.&nbsp;All are already semi-palindromes.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= k &lt;= s.length / 2</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 120,
            "dislikes": 101,
            "similarQuestions": "[{\"title\": \"Palindrome Partitioning III\", \"titleSlug\": \"palindrome-partitioning-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.7K\", \"totalSubmission\": \"10.3K\", \"totalAcceptedRaw\": 3697, \"totalSubmissionRaw\": 10323, \"acRate\": \"35.8%\"}",
            "hints": [
                "Define <code>dp[i][j]</code> as the minimum count of letter changes needed to split the suffix of string <code>s</code> starting from <code>s[i]</code> into <code>j</code> valid parts.",
                "We have <code>dp[i][j] = min(dp[x + 1][j - 1] + v[i][x])</code>. Here <code>v[i][x]</code> is the minimum number of letter changes to change substring <code>s[i..x]</code> into semi-palindrome.",
                "<code>v[i][j]</code> can be calculated separately by <b>brute-force</b>. We can create a table of <code>v[i][j]</code> independently to improve the complexity. Also note that semi-palindrome\u2019s length is at least <code>2</code>."
            ],
            "rephrased": {
                "body": "Given a string `s` and an integer `k`, the goal is to partition `s` into `k` non-empty substrings. The objective is to minimize the total number of character changes needed to transform each substring into a semi-palindrome.\n\nA semi-palindrome is a string that can be divided into palindromic groups based on a repeating pattern.  To determine if a string is a semi-palindrome, you iterate through divisors `d` of the string's length (where `d` is between 1 and the length of the string, exclusive).  For each divisor `d`, you create groups of characters based on the repeating pattern of length `d`.  Specifically, group `i` contains the characters at indices `i`, `i + d`, `i + 2d`, and so on (1-based indexing). If all groups are palindromes for any valid `d`, the string is a semi-palindrome.\n\nReturn the minimum number of character changes required.",
                "constraints": [
                    "2 <= s.length <= 200",
                    "1 <= k <= s.length / 2",
                    "s contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"abcac\", k = 2",
                        "output": "1",
                        "explanation": "The string `s` is divided into `ab` and `cac`. `cac` is already a semi-palindrome. By changing `ab` to `aa`, it becomes a semi-palindrome with d = 1. Therefore, only one change is required."
                    },
                    {
                        "input": "s = \"abcdef\", k = 2",
                        "output": "2",
                        "explanation": "The string `s` is divided into substrings `abc` and `def`. Each substring needs one change to become a semi-palindrome. `abc` can be changed to `aba` (1 change) and `def` can be changed to `ded` (1 change) to make each semi-palindrome."
                    },
                    {
                        "input": "s = \"aabbaa\", k = 3",
                        "output": "0",
                        "explanation": "The string `s` is divided into substrings `aa`, `bb`, and `aa`. All substrings are already semi-palindromes."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-partitioning-iii",
                "title": "Palindrome Partitioning III",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Define <code>dp[i][j]</code> as the minimum count of letter changes needed to split the suffix of string <code>s</code> starting from <code>s[i]</code> into <code>j</code> valid parts.",
            "We have <code>dp[i][j] = min(dp[x + 1][j - 1] + v[i][x])</code>. Here <code>v[i][x]</code> is the minimum number of letter changes to change substring <code>s[i..x]</code> into semi-palindrome.",
            "<code>v[i][j]</code> can be calculated separately by <b>brute-force</b>. We can create a table of <code>v[i][j]</code> independently to improve the complexity. Also note that semi-palindrome\u2019s length is at least <code>2</code>."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ]
    }
}