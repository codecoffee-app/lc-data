{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2260",
            "title": "Minimum Consecutive Cards to Pick Up",
            "titleSlug": "minimum-consecutive-cards-to-pick-up",
            "content": "<p>You are given an integer array <code>cards</code> where <code>cards[i]</code> represents the <strong>value</strong> of the <code>i<sup>th</sup></code> card. A pair of cards are <strong>matching</strong> if the cards have the <strong>same</strong> value.</p>\n\n<p>Return<em> the <strong>minimum</strong> number of <strong>consecutive</strong> cards you have to pick up to have a pair of <strong>matching</strong> cards among the picked cards.</em> If it is impossible to have matching cards, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cards = [3,4,2,3,4,7]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We can pick up the cards [3,4,2,3] which contain a matching pair of cards with value 3. Note that picking up the cards [4,2,3,4] is also optimal.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cards = [1,0,5,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no way to pick up a set of consecutive cards that contain a pair of matching cards.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= cards.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= cards[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 877,
            "dislikes": 28,
            "similarQuestions": "[{\"title\": \"Longest Substring Without Repeating Characters\", \"titleSlug\": \"longest-substring-without-repeating-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"58.1K\", \"totalSubmission\": \"114.5K\", \"totalAcceptedRaw\": 58123, \"totalSubmissionRaw\": 114468, \"acRate\": \"50.8%\"}",
            "hints": [
                "Iterate through the cards and store the location of the last occurrence of each number.",
                "What data structure could you use to get the last occurrence of a number in O(1) or O(log n)?"
            ],
            "rephrased": {
                "body": "Given an array of integers `cards`, where `cards[i]` represents the value of the i-th card, find the minimum number of consecutive cards you need to pick up to have a matching pair (cards with the same value) among the picked cards.",
                "constraints": [
                    "1 <= cards.length <= 10^5",
                    "0 <= cards[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[3,4,2,3,4,7]",
                        "output": "4",
                        "explanation": "The subarray [3,4,2,3] contains a matching pair of cards with the value 3. Picking up fewer consecutive cards does not result in a matching pair."
                    },
                    {
                        "input": "[1,0,5,3]",
                        "output": "-1",
                        "explanation": "There are no matching pairs of cards in the input array. Therefore, it is impossible to pick up a set of consecutive cards containing a matching pair."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-substring-without-repeating-characters",
                "title": "Longest Substring Without Repeating Characters",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Iterate through the cards and store the location of the last occurrence of each number.",
            "What data structure could you use to get the last occurrence of a number in O(1) or O(log n)?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumCardPickup(vector<int>& cards) {\n    int ans = INT_MAX;\n    unordered_map<int, int> lastSeen;\n\n    for (int i = 0; i < cards.size(); ++i) {\n      if (const auto it = lastSeen.find(cards[i]); it != lastSeen.cend())\n        ans = min(ans, i - it->second + 1);\n      lastSeen[cards[i]] = i;\n    }\n\n    return ans == INT_MAX ? -1 : ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumCardPickup(int[] cards) {\n    int ans = Integer.MAX_VALUE;\n    Map<Integer, Integer> lastSeen = new HashMap<>();\n\n    for (int i = 0; i < cards.length; ++i) {\n      if (lastSeen.containsKey(cards[i]))\n        ans = Math.min(ans, i - lastSeen.get(cards[i]) + 1);\n      lastSeen.put(cards[i], i);\n    }\n\n    return ans == Integer.MAX_VALUE ? -1 : ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumCardPickup(self, cards: List[int]) -> int:\n    ans = math.inf\n    lastSeen = {}\n\n    for i, card in enumerate(cards):\n      if card in lastSeen:\n        ans = min(ans, i - lastSeen[card] + 1)\n      lastSeen[card] = i\n\n    return -1 if ans == math.inf else ans\n",
                "lang_text": "py"
            }
        }
    }
}