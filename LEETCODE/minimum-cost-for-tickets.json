{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "983",
            "title": "Minimum Cost For Tickets",
            "titleSlug": "minimum-cost-for-tickets",
            "content": "<p>You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array <code>days</code>. Each day is an integer from <code>1</code> to <code>365</code>.</p>\n\n<p>Train tickets are sold in <strong>three different ways</strong>:</p>\n\n<ul>\n\t<li>a <strong>1-day</strong> pass is sold for <code>costs[0]</code> dollars,</li>\n\t<li>a <strong>7-day</strong> pass is sold for <code>costs[1]</code> dollars, and</li>\n\t<li>a <strong>30-day</strong> pass is sold for <code>costs[2]</code> dollars.</li>\n</ul>\n\n<p>The passes allow that many days of consecutive travel.</p>\n\n<ul>\n\t<li>For example, if we get a <strong>7-day</strong> pass on day <code>2</code>, then we can travel for <code>7</code> days: <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, and <code>8</code>.</li>\n</ul>\n\n<p>Return <em>the minimum number of dollars you need to travel every day in the given list of days</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> days = [1,4,6,7,8,20], costs = [2,7,15]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= days.length &lt;= 365</code></li>\n\t<li><code>1 &lt;= days[i] &lt;= 365</code></li>\n\t<li><code>days</code> is in strictly increasing order.</li>\n\t<li><code>costs.length == 3</code></li>\n\t<li><code>1 &lt;= costs[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7630,
            "dislikes": 139,
            "similarQuestions": "[{\"title\": \"Coin Change\", \"titleSlug\": \"coin-change\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Most Expensive Item That Can Not Be Bought\", \"titleSlug\": \"most-expensive-item-that-can-not-be-bought\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"272.5K\", \"totalSubmission\": \"416.2K\", \"totalAcceptedRaw\": 272452, \"totalSubmissionRaw\": 416185, \"acRate\": \"65.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are planning train travel for a year.  You are given an array `days` representing the days of the year you will be traveling. Each day is a number between 1 and 365 inclusive.  You have three options for purchasing train tickets:\n\n*   A 1-day pass costing `costs[0]` dollars.\n*   A 7-day pass costing `costs[1]` dollars.\n*   A 30-day pass costing `costs[2]` dollars.\n\nA pass allows for consecutive travel for the specified number of days. For example, a 7-day pass bought on day 2 covers days 2, 3, 4, 5, 6, 7, and 8. Determine the minimum cost to cover all travel days in the `days` array.",
                "constraints": [
                    "1 <= days.length <= 365",
                    "1 <= days[i] <= 365",
                    "`days` is in strictly increasing order.",
                    "costs.length == 3",
                    "1 <= costs[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "days = [1,4,6,7,8,20], costs = [2,7,15]",
                        "output": "11",
                        "explanation": "One possible solution is:\n* Buy a 1-day pass on day 1 for $2 (covers day 1).\n* Buy a 7-day pass on day 4 for $7 (covers days 4, 5, 6, 7, 8, 9, 10).\n* Buy a 1-day pass on day 20 for $2 (covers day 20).\nTotal cost: $2 + $7 + $2 = $11."
                    },
                    {
                        "input": "days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]",
                        "output": "17",
                        "explanation": "One possible solution is:\n* Buy a 30-day pass on day 1 for $15 (covers days 1-30).\n* Buy a 1-day pass on day 31 for $2 (covers day 31).\nTotal cost: $15 + $2 = $17."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "coin-change",
                "title": "Coin Change",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "most-expensive-item-that-can-not-be-bought",
                "title": "Most Expensive Item That Can Not Be Bought",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int mincostTickets(vector<int>& days, vector<int>& costs) {\n    int ans = 0;\n    queue<pair<int, int>> last7;\n    queue<pair<int, int>> last30;\n\n    for (int day : days) {\n      while (!last7.empty() && last7.front().first + 7 <= day)\n        last7.pop();\n      while (!last30.empty() && last30.front().first + 30 <= day)\n        last30.pop();\n      last7.emplace(day, ans + costs[1]);\n      last30.emplace(day, ans + costs[2]);\n      ans = min({ans + costs[0], last7.front().second, last30.front().second});\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int mincostTickets(int[] days, int[] costs) {\n    int ans = 0;\n    Queue<int[]> last7 = new ArrayDeque<>(); // [day, cost]\n    Queue<int[]> last30 = new ArrayDeque<>();\n\n    for (int day : days) {\n      while (!last7.isEmpty() && last7.peek()[0] + 7 <= day)\n        last7.poll();\n      while (!last30.isEmpty() && last30.peek()[0] + 30 <= day)\n        last30.poll();\n      last7.offer(new int[] {day, ans + costs[1]});\n      last30.offer(new int[] {day, ans + costs[2]});\n      ans = Math.min(ans + costs[0], Math.min(last7.peek()[1], last30.peek()[1]));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n    ans = 0\n    last7 = collections.deque()\n    last30 = collections.deque()\n\n    for day in days:\n      while last7 and last7[0][0] + 7 <= day:\n        last7.popleft()\n      while last30 and last30[0][0] + 30 <= day:\n        last30.popleft()\n      last7.append([day, ans + costs[1]])\n      last30.append([day, ans + costs[2]])\n      ans = min(ans + costs[0], last7[0][1], last30[0][1])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}