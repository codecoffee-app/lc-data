{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1896",
            "title": "Minimum Cost to Change the Final Value of Expression",
            "titleSlug": "minimum-cost-to-change-the-final-value-of-expression",
            "content": "<p>You are given a <strong>valid</strong> boolean expression as a string <code>expression</code> consisting of the characters <code>&#39;1&#39;</code>,<code>&#39;0&#39;</code>,<code>&#39;&amp;&#39;</code> (bitwise <strong>AND</strong> operator),<code>&#39;|&#39;</code> (bitwise <strong>OR</strong> operator),<code>&#39;(&#39;</code>, and <code>&#39;)&#39;</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;()1|1&quot;</code> and <code>&quot;(1)&amp;()&quot;</code> are <strong>not valid</strong> while <code>&quot;1&quot;</code>, <code>&quot;(((1))|(0))&quot;</code>, and <code>&quot;1|(0&amp;(1))&quot;</code> are <strong>valid</strong> expressions.</li>\n</ul>\n\n<p>Return<em> the <strong>minimum cost</strong> to change the final value of the expression</em>.</p>\n\n<ul>\n\t<li>For example, if <code>expression = &quot;1|1|(0&amp;0)&amp;1&quot;</code>, its <strong>value</strong> is <code>1|1|(0&amp;0)&amp;1 = 1|1|0&amp;1 = 1|0&amp;1 = 1&amp;1 = 1</code>. We want to apply operations so that the<strong> new</strong> expression evaluates to <code>0</code>.</li>\n</ul>\n\n<p>The <strong>cost</strong> of changing the final value of an expression is the <strong>number of operations</strong> performed on the expression. The types of <strong>operations</strong> are described as follows:</p>\n\n<ul>\n\t<li>Turn a <code>&#39;1&#39;</code> into a <code>&#39;0&#39;</code>.</li>\n\t<li>Turn a <code>&#39;0&#39;</code> into a <code>&#39;1&#39;</code>.</li>\n\t<li>Turn a <code>&#39;&amp;&#39;</code> into a <code>&#39;|&#39;</code>.</li>\n\t<li>Turn a <code>&#39;|&#39;</code> into a <code>&#39;&amp;&#39;</code>.</li>\n</ul>\n\n<p><strong>Note:</strong> <code>&#39;&amp;&#39;</code> does <strong>not</strong> take precedence over <code>&#39;|&#39;</code> in the <strong>order of calculation</strong>. Evaluate parentheses <strong>first</strong>, then in <strong>left-to-right</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;1&amp;(0|1)&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can turn &quot;1&amp;(0<u><strong>|</strong></u>1)&quot; into &quot;1&amp;(0<u><strong>&amp;</strong></u>1)&quot; by changing the &#39;|&#39; to a &#39;&amp;&#39; using 1 operation.\nThe new expression evaluates to 0. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(0&amp;0)&amp;(0&amp;0&amp;0)&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can turn &quot;(0<u><strong>&amp;0</strong></u>)<strong><u>&amp;</u></strong>(0&amp;0&amp;0)&quot; into &quot;(0<u><strong>|1</strong></u>)<u><strong>|</strong></u>(0&amp;0&amp;0)&quot; using 3 operations.\nThe new expression evaluates to 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(0|(1|0&amp;1))&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can turn &quot;(0|(<u><strong>1</strong></u>|0&amp;1))&quot; into &quot;(0|(<u><strong>0</strong></u>|0&amp;1))&quot; using 1 operation.\nThe new expression evaluates to 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>expression</code>&nbsp;only contains&nbsp;<code>&#39;1&#39;</code>,<code>&#39;0&#39;</code>,<code>&#39;&amp;&#39;</code>,<code>&#39;|&#39;</code>,<code>&#39;(&#39;</code>, and&nbsp;<code>&#39;)&#39;</code></li>\n\t<li>All parentheses&nbsp;are properly matched.</li>\n\t<li>There will be no empty parentheses (i.e:&nbsp;<code>&quot;()&quot;</code>&nbsp;is not a substring of&nbsp;<code>expression</code>).</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 229,
            "dislikes": 40,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.7K\", \"totalSubmission\": \"6.9K\", \"totalAcceptedRaw\": 3747, \"totalSubmissionRaw\": 6940, \"acRate\": \"54.0%\"}",
            "hints": [
                "How many possible states are there for a given expression?",
                "Is there a data structure that we can use to solve the problem optimally?"
            ],
            "rephrased": {
                "body": "Given a valid boolean expression string `expression` consisting of '1', '0', '&' (bitwise AND), '|' (bitwise OR), '(', and ')', determine the minimum cost to change the final value of the expression.\n\nThe cost is defined as the number of operations required to change the expression's final value. Allowed operations include:\n\n*   Changing a '1' to a '0'.\n*   Changing a '0' to a '1'.\n*   Changing an '&' to a '|'.\n*   Changing a '|' to an '&'.\n\nNote that '&' and '|' have equal precedence and are evaluated from left to right. Parentheses are evaluated first.",
                "constraints": [
                    "1 <= expression.length <= 10^5",
                    "expression only contains '1', '0', '&', '|', '(', and ')'",
                    "All parentheses are properly matched.",
                    "There will be no empty parentheses (i.e: \"()\" is not a substring of expression)."
                ],
                "testcases": [
                    {
                        "input": "\"1&(0|1)\"",
                        "output": "1",
                        "explanation": "Changing the '|' to a '&' transforms the expression to \"1&(0&1)\", resulting in a final value of 0.  This requires only one operation."
                    },
                    {
                        "input": "\"(0&0)&(0&0&0)\"",
                        "output": "3",
                        "explanation": "Changing the first '&' to '|' and changing a '0' to '1'  in both parenthesis groups yields \"(0|1)|(0&0&0)\". One other change to '|' will result in a value of 1. Specifically \"(0|1)|(0|1|1)\" using 3 operations."
                    },
                    {
                        "input": "\"(0|(1|0&1))\"",
                        "output": "1",
                        "explanation": "Changing the '1' within the inner parentheses to '0' results in \"(0|(0|0&1))\", which evaluates to 0, using only one operation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "How many possible states are there for a given expression?",
            "Is there a data structure that we can use to solve the problem optimally?"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stack",
                "slug": "stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperationsToFlip(string expression) {\n    // [(expression, cost to toggle the expression)]\n    stack<pair<char, int>> stack;\n    pair<char, int> lastPair;\n\n    for (const char e : expression) {\n      if (e == '(' || e == '&' || e == '|') {\n        // These aren't expressions, so the cost is meaningless.\n        stack.push({e, 0});\n        continue;\n      }\n      if (e == ')') {\n        lastPair = stack.top();\n        stack.pop();\n        stack.pop();  // Pop '('.\n      } else {        // e == '0' || e == '1'\n        // Store the '0' or '1'. The cost to change their values is just 1,\n        // whether it's changing '0' to '1' or '1' to '0'.\n        lastPair = {e, 1};\n      }\n      if (!stack.empty() &&\n          (stack.top().first == '&' || stack.top().first == '|')) {\n        const char op = stack.top().first;\n        stack.pop();\n        const auto [a, costA] = stack.top();\n        stack.pop();\n        const auto [b, costB] = lastPair;\n        // Determine the cost to toggle op(a, b).\n        if (op == '&') {\n          if (a == '0' && b == '0')\n            // Change '&' to '|' and a|b to '1'.\n            lastPair = {'0', 1 + min(costA, costB)};\n          else if (a == '0' && b == '1')\n            // Change '&' to '|'.\n            lastPair = {'0', 1};\n          else if (a == '1' && b == '0')\n            // Change '&' to '|'.\n            lastPair = {'0', 1};\n          else  // a == '1' and b == '1'\n            // Change a|b to '0'.\n            lastPair = {'1', min(costA, costB)};\n        } else {  // op == '|'\n          if (a == '0' && b == '0')\n            // Change a|b to '1'.\n            lastPair = {'0', min(costA, costB)};\n          else if (a == '0' && b == '1')\n            // Change '|' to '&'.\n            lastPair = {'1', 1};\n          else if (a == '1' && b == '0')\n            // Change '|' to '&'.\n            lastPair = {'1', 1};\n          else  // a == '1' and b == '1'\n            // Change '|' to '&' and a|b to '0'.\n            lastPair = {'1', 1 + min(costA, costB)};\n        }\n      }\n      stack.push(lastPair);\n    }\n\n    return stack.top().second;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperationsToFlip(String expression) {\n    Deque<Pair<Character, Integer>> stack = new ArrayDeque<>();\n    Pair<Character, Integer> lastPair = null;\n\n    for (final char e : expression.toCharArray()) {\n      if (e == '(' || e == '&' || e == '|') {\n        // These aren't expressions, so the cost is meaningless.\n        stack.push(new Pair<>(e, 0));\n        continue;\n      }\n      if (e == ')') {\n        lastPair = stack.pop();\n        stack.pop(); // Pop '('.\n      } else {       // e == '0' || e == '1'\n        // Store the '0' or '1'. The cost to change their values is just 1,\n        // whether it's changing '0' to '1' or '1' to '0'.\n        lastPair = new Pair<>(e, 1);\n      }\n      if (!stack.isEmpty() && (stack.peek().getKey() == '&' || stack.peek().getKey() == '|')) {\n        final char op = stack.pop().getKey();\n        final char a = stack.peek().getKey();\n        final int costA = stack.pop().getValue();\n        final char b = lastPair.getKey();\n        final int costB = lastPair.getValue();\n        // Determine the cost to toggle op(a, b).\n        if (op == '&') {\n          if (a == '0' && b == '0')\n            // Change '&' to '|' and a|b to '1'.\n            lastPair = new Pair<>('0', 1 + Math.min(costA, costB));\n          else if (a == '0' && b == '1')\n            // Change '&' to '|'.\n            lastPair = new Pair<>('0', 1);\n          else if (a == '1' && b == '0')\n            // Change '&' to '|'.\n            lastPair = new Pair<>('0', 1);\n          else // a == '1' and b == '1'\n            // Change a|b to '0'.\n            lastPair = new Pair<>('1', Math.min(costA, costB));\n        } else { // op == '|'\n          if (a == '0' && b == '0')\n            // Change a|b to '1'.\n            lastPair = new Pair<>('0', Math.min(costA, costB));\n          else if (a == '0' && b == '1')\n            // Change '|' to '&'.\n            lastPair = new Pair<>('1', 1);\n          else if (a == '1' && b == '0')\n            // Change '|' to '&'.\n            lastPair = new Pair<>('1', 1);\n          else // a == '1' and b == '1'\n            // Change '|' to '&' and a|b to '0'.\n            lastPair = new Pair<>('1', 1 + Math.min(costA, costB));\n        }\n      }\n      stack.push(lastPair);\n    }\n\n    return stack.peek().getValue();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperationsToFlip(self, expression: str) -> int:\n    stack = []  # [(expression, cost to toggle the expression)]\n\n    for e in expression:\n      if e in '(&|':\n        # These aren't expressions, so the cost is meaningless.\n        stack.append((e, 0))\n        continue\n      if e == ')':\n        lastPair = stack.pop()\n        stack.pop()  # Pop '('.\n      else:  # e == '0' or e == '1'\n        # Store the '0' or '1'. The cost to change their values is just 1,\n        # whether it's changing '0' to '1' or '1' to '0'.\n        lastPair = (e, 1)\n      if stack and stack[-1][0] in '&|':\n        op = stack.pop()[0]\n        a, costA = stack.pop()\n        b, costB = lastPair\n        # Determine the cost to toggle op(a, b).\n        if op == '&':\n          if a == '0' and b == '0':\n            # Change '&' to '|' and a|b to '1'.\n            lastPair = ('0', 1 + min(costA, costB))\n          elif a == '0' and b == '1':\n            # Change '&' to '|'.\n            lastPair = ('0', 1)\n          elif a == '1' and b == '0':\n            # Change '&' to '|'.\n            lastPair = ('0', 1)\n          else:  # a == '1' and b == '1'\n            # Change a|b to '0'.\n            lastPair = ('1', min(costA, costB))\n        else:  # op == '|'\n          if a == '0' and b == '0':\n            # Change a|b to '1'.\n            lastPair = ('0', min(costA, costB))\n          elif a == '0' and b == '1':\n            # Change '|' to '&'.\n            lastPair = ('1', 1)\n          elif a == '1' and b == '0':\n            # Change '|' to '&'.\n            lastPair = ('1', 1)\n          else:  # a == '1' and b == '1'\n            # Change '|' to '&' and a|b to '0'.\n            lastPair = ('1', 1 + min(costA, costB))\n      stack.append(lastPair)\n\n    return stack[-1][1]\n",
                "lang_text": "py"
            }
        }
    }
}