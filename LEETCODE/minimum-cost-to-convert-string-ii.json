{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2977",
            "title": "Minimum Cost to Convert String II",
            "titleSlug": "minimum-cost-to-convert-string-ii",
            "content": "<p>You are given two <strong>0-indexed</strong> strings <code>source</code> and <code>target</code>, both of length <code>n</code> and consisting of <strong>lowercase</strong> English characters. You are also given two <strong>0-indexed</strong> string arrays <code>original</code> and <code>changed</code>, and an integer array <code>cost</code>, where <code>cost[i]</code> represents the cost of converting the string <code>original[i]</code> to the string <code>changed[i]</code>.</p>\n\n<p>You start with the string <code>source</code>. In one operation, you can pick a <strong>substring</strong> <code>x</code> from the string, and change it to <code>y</code> at a cost of <code>z</code> <strong>if</strong> there exists <strong>any</strong> index <code>j</code> such that <code>cost[j] == z</code>, <code>original[j] == x</code>, and <code>changed[j] == y</code>. You are allowed to do <strong>any</strong> number of operations, but any pair of operations must satisfy <strong>either</strong> of these two conditions:</p>\n\n<ul>\n\t<li>The substrings picked in the operations are <code>source[a..b]</code> and <code>source[c..d]</code> with either <code>b &lt; c</code> <strong>or</strong> <code>d &lt; a</code>. In other words, the indices picked in both operations are <strong>disjoint</strong>.</li>\n\t<li>The substrings picked in the operations are <code>source[a..b]</code> and <code>source[c..d]</code> with <code>a == c</code> <strong>and</strong> <code>b == d</code>. In other words, the indices picked in both operations are <strong>identical</strong>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> cost to convert the string </em><code>source</code><em> to the string </em><code>target</code><em> using <strong>any</strong> number of operations</em>. <em>If it is impossible to convert</em> <code>source</code> <em>to</em> <code>target</code>,<em> return</em> <code>-1</code>.</p>\n\n<p><strong>Note</strong> that there may exist indices <code>i</code>, <code>j</code> such that <code>original[j] == original[i]</code> and <code>changed[j] == changed[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> source = &quot;abcd&quot;, target = &quot;acbe&quot;, original = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;e&quot;,&quot;d&quot;], changed = [&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;e&quot;,&quot;b&quot;,&quot;e&quot;], cost = [2,5,5,1,2,20]\n<strong>Output:</strong> 28\n<strong>Explanation:</strong> To convert &quot;abcd&quot; to &quot;acbe&quot;, do the following operations:\n- Change substring source[1..1] from &quot;b&quot; to &quot;c&quot; at a cost of 5.\n- Change substring source[2..2] from &quot;c&quot; to &quot;e&quot; at a cost of 1.\n- Change substring source[2..2] from &quot;e&quot; to &quot;b&quot; at a cost of 2.\n- Change substring source[3..3] from &quot;d&quot; to &quot;e&quot; at a cost of 20.\nThe total cost incurred is 5 + 1 + 2 + 20 = 28. \nIt can be shown that this is the minimum possible cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> source = &quot;abcdefgh&quot;, target = &quot;acdeeghh&quot;, original = [&quot;bcd&quot;,&quot;fgh&quot;,&quot;thh&quot;], changed = [&quot;cde&quot;,&quot;thh&quot;,&quot;ghh&quot;], cost = [1,3,5]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> To convert &quot;abcdefgh&quot; to &quot;acdeeghh&quot;, do the following operations:\n- Change substring source[1..3] from &quot;bcd&quot; to &quot;cde&quot; at a cost of 1.\n- Change substring source[5..7] from &quot;fgh&quot; to &quot;thh&quot; at a cost of 3. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation.\n- Change substring source[5..7] from &quot;thh&quot; to &quot;ghh&quot; at a cost of 5. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation, and identical with indices picked in the second operation.\nThe total cost incurred is 1 + 3 + 5 = 9.\nIt can be shown that this is the minimum possible cost.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> source = &quot;abcdefgh&quot;, target = &quot;addddddd&quot;, original = [&quot;bcd&quot;,&quot;defgh&quot;], changed = [&quot;ddd&quot;,&quot;ddddd&quot;], cost = [100,1578]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is impossible to convert &quot;abcdefgh&quot; to &quot;addddddd&quot;.\nIf you select substring source[1..3] as the first operation to change &quot;abcdefgh&quot; to &quot;adddefgh&quot;, you cannot select substring source[3..7] as the second operation because it has a common index, 3, with the first operation.\nIf you select substring source[3..7] as the first operation to change &quot;abcdefgh&quot; to &quot;abcddddd&quot;, you cannot select substring source[1..3] as the second operation because it has a common index, 3, with the first operation.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= source.length == target.length &lt;= 1000</code></li>\n\t<li><code>source</code>, <code>target</code> consist only of lowercase English characters.</li>\n\t<li><code>1 &lt;= cost.length == original.length == changed.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= original[i].length == changed[i].length &lt;= source.length</code></li>\n\t<li><code>original[i]</code>, <code>changed[i]</code> consist only of lowercase English characters.</li>\n\t<li><code>original[i] != changed[i]</code></li>\n\t<li><code>1 &lt;= cost[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 83,
            "dislikes": 69,
            "similarQuestions": "[{\"title\": \"Can Convert String in K Moves\", \"titleSlug\": \"can-convert-string-in-k-moves\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Moves to Convert String\", \"titleSlug\": \"minimum-moves-to-convert-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.2K\", \"totalSubmission\": \"17K\", \"totalAcceptedRaw\": 4154, \"totalSubmissionRaw\": 16959, \"acRate\": \"24.5%\"}",
            "hints": [
                "Give each unique string in <code>original</code> and <code>changed</code> arrays a unique id. There are at most <code>2 * m</code> unique strings in total where <code>m</code> is the length of the arrays. We can put them into a hash map to assign ids.",
                "We can pre-compute the smallest costs between all pairs of unique strings using Floyd Warshall algorithm in <code>O(m ^ 3)</code> time complexity.",
                "Let <code>dp[i]</code> be the smallest cost to change the first <code>i</code> characters (prefix) of <code>source</code> into <code>target</code>, leaving the suffix untouched.\r\nWe have <code>dp[0] = 0</code>.\r\n<code>dp[i] = min(\r\ndp[i - 1] if (source[i - 1] == target[i - 1]),\r\ndp[j-1] + cost[x][y] where x is the id of source[j..(i - 1)] and y is the id of target e[j..(i - 1)])\r\n)</code>.\r\nIf neither of the two conditions is satisfied, <code>dp[i] = infinity</code>.",
                "We can use Trie to check for the second condition in <code>O(1)</code>.",
                "The answer is <code>dp[n]</code> where <code>n</code> is <code>source.length</code>."
            ],
            "rephrased": {
                "body": "Given two 0-indexed strings `source` and `target` of length `n`, consisting of lowercase English characters, and two 0-indexed string arrays `original` and `changed` with an integer array `cost`. `cost[i]` represents the cost to convert `original[i]` to `changed[i]`. The goal is to convert `source` to `target` using substring replacements. A substring `x` can be changed to `y` for a cost `z` if there exists an index `j` where `cost[j] == z`, `original[j] == x`, and `changed[j] == y`.  Operations must have disjoint or identical substrings.",
                "constraints": [
                    "1 <= source.length == target.length <= 1000",
                    "source, target consist only of lowercase English characters.",
                    "1 <= cost.length == original.length == changed.length <= 100",
                    "1 <= original[i].length == changed[i].length <= source.length",
                    "original[i], changed[i] consist only of lowercase English characters.",
                    "original[i] != changed[i]",
                    "1 <= cost[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": {
                            "source": "abcd",
                            "target": "acbe",
                            "original": [
                                "a",
                                "b",
                                "c",
                                "c",
                                "e",
                                "d"
                            ],
                            "changed": [
                                "b",
                                "c",
                                "b",
                                "e",
                                "b",
                                "e"
                            ],
                            "cost": [
                                2,
                                5,
                                5,
                                1,
                                2,
                                20
                            ]
                        },
                        "output": 28,
                        "explanation": "The minimum cost to convert 'abcd' to 'acbe' is 28. This is achieved by changing 'b' to 'c' at index 1 (cost 5), 'c' to 'e' at index 2 (cost 1), 'e' to 'b' at index 2 (cost 2), and 'd' to 'e' at index 3 (cost 20). Total cost: 5 + 1 + 2 + 20 = 28."
                    },
                    {
                        "input": {
                            "source": "abcdefgh",
                            "target": "acdeeghh",
                            "original": [
                                "bcd",
                                "fgh",
                                "thh"
                            ],
                            "changed": [
                                "cde",
                                "thh",
                                "ghh"
                            ],
                            "cost": [
                                1,
                                3,
                                5
                            ]
                        },
                        "output": 9,
                        "explanation": "The minimum cost to convert 'abcdefgh' to 'acdeeghh' is 9. This involves changing 'bcd' to 'cde' (cost 1), 'fgh' to 'thh' (cost 3), and 'thh' to 'ghh' (cost 5)."
                    },
                    {
                        "input": {
                            "source": "abcdefgh",
                            "target": "addddddd",
                            "original": [
                                "bcd",
                                "defgh"
                            ],
                            "changed": [
                                "ddd",
                                "ddddd"
                            ],
                            "cost": [
                                100,
                                1578
                            ]
                        },
                        "output": -1,
                        "explanation": "It is impossible to convert 'abcdefgh' to 'addddddd' due to conflicting substring replacement requirements."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "can-convert-string-in-k-moves",
                "title": "Can Convert String in K Moves",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "minimum-moves-to-convert-string",
                "title": "Minimum Moves to Convert String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Give each unique string in <code>original</code> and <code>changed</code> arrays a unique id. There are at most <code>2 * m</code> unique strings in total where <code>m</code> is the length of the arrays. We can put them into a hash map to assign ids.",
            "We can pre-compute the smallest costs between all pairs of unique strings using Floyd Warshall algorithm in <code>O(m ^ 3)</code> time complexity.",
            "Let <code>dp[i]</code> be the smallest cost to change the first <code>i</code> characters (prefix) of <code>source</code> into <code>target</code>, leaving the suffix untouched.\r\nWe have <code>dp[0] = 0</code>.\r\n<code>dp[i] = min(\r\ndp[i - 1] if (source[i - 1] == target[i - 1]),\r\ndp[j-1] + cost[x][y] where x is the id of source[j..(i - 1)] and y is the id of target e[j..(i - 1)])\r\n)</code>.\r\nIf neither of the two conditions is satisfied, <code>dp[i] = infinity</code>.",
            "We can use Trie to check for the second condition in <code>O(1)</code>.",
            "The answer is <code>dp[n]</code> where <code>n</code> is <code>source.length</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumCost(string source, string target, vector<string>& original,\n                        vector<string>& changed, vector<int>& cost) {\n    const unordered_set<int> subLengths = getSubLengths(original);\n    const unordered_map<string, int> subToId = getSubToId(original, changed);\n    const int subCount = subToId.size();\n    // dist[u][v] := the minimum distance to change the substring with id u to\n    // the substring with id v\n    vector<vector<long long>> dist(subCount,\n                                   vector<long long>(subCount, LLONG_MAX));\n    // dp[i] := the minimum cost to change the first i letters of `source` into\n    // `target`, leaving the suffix untouched\n    vector<long long> dp(source.length() + 1, LLONG_MAX);\n\n    for (int i = 0; i < cost.size(); ++i) {\n      const int u = subToId.at(original[i]);\n      const int v = subToId.at(changed[i]);\n      dist[u][v] = min(dist[u][v], static_cast<long long>(cost[i]));\n    }\n\n    for (int k = 0; k < subCount; ++k)\n      for (int i = 0; i < subCount; ++i)\n        if (dist[i][k] < LLONG_MAX)\n          for (int j = 0; j < subCount; ++j)\n            if (dist[k][j] < LLONG_MAX)\n              dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);\n\n    dp[0] = 0;\n\n    for (int i = 0; i < source.length(); ++i) {\n      if (dp[i] == LLONG_MAX)\n        continue;\n      if (target[i] == source[i])\n        dp[i + 1] = min(dp[i + 1], dp[i]);\n      for (const int subLength : subLengths) {\n        if (i + subLength > source.length())\n          continue;\n        const string subSource = source.substr(i, subLength);\n        const string subTarget = target.substr(i, subLength);\n        if (!subToId.count(subSource) || !subToId.count(subTarget))\n          continue;\n        const int u = subToId.at(subSource);\n        const int v = subToId.at(subTarget);\n        if (dist[u][v] < LLONG_MAX)\n          dp[i + subLength] = min(dp[i + subLength], dp[i] + dist[u][v]);\n      }\n    }\n\n    return dp[source.length()] == LLONG_MAX ? -1 : dp[source.length()];\n  }\n\n private:\n  unordered_map<string, int> getSubToId(const vector<string>& original,\n                                        const vector<string>& changed) {\n    unordered_map<string, int> subToId;\n    for (const string& s : original)\n      if (!subToId.count(s))\n        subToId[s] = subToId.size();\n    for (const string& s : changed)\n      if (!subToId.count(s))\n        subToId[s] = subToId.size();\n    return subToId;\n  }\n\n  unordered_set<int> getSubLengths(const vector<string>& original) {\n    unordered_set<int> subLengths;\n    for (const string& s : original)\n      subLengths.insert(s.length());\n    return subLengths;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minimumCost(String source, String target, String[] original, String[] changed,\n                          int[] cost) {\n    Set<Integer> subLengths = getSubLengths(original);\n    Map<String, Integer> subToId = getSubToId(original, changed);\n    final int subCount = subToId.size();\n    // dist[u][v] := the minimum distance to change the substring with id u to\n    // the substring with id v\n    long[][] dist = new long[subCount][subCount];\n    Arrays.stream(dist).forEach(A -> Arrays.fill(A, Long.MAX_VALUE));\n    // dp[i] := the minimum cost to change the first i letters of `source` into\n    // `target`, leaving the suffix untouched\n    long[] dp = new long[source.length() + 1];\n    Arrays.fill(dp, Long.MAX_VALUE);\n\n    for (int i = 0; i < cost.length; ++i) {\n      final int u = subToId.get(original[i]);\n      final int v = subToId.get(changed[i]);\n      dist[u][v] = Math.min(dist[u][v], (long) cost[i]);\n    }\n\n    for (int k = 0; k < subCount; ++k)\n      for (int i = 0; i < subCount; ++i)\n        if (dist[i][k] < Long.MAX_VALUE)\n          for (int j = 0; j < subCount; ++j)\n            if (dist[k][j] < Long.MAX_VALUE)\n              dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);\n\n    dp[0] = 0;\n\n    for (int i = 0; i < source.length(); ++i) {\n      if (dp[i] == Long.MAX_VALUE)\n        continue;\n      if (target.charAt(i) == source.charAt(i))\n        dp[i + 1] = Math.min(dp[i + 1], dp[i]);\n      for (int subLength : subLengths) {\n        if (i + subLength > source.length())\n          continue;\n        String subSource = source.substring(i, i + subLength);\n        String subTarget = target.substring(i, i + subLength);\n        if (!subToId.containsKey(subSource) || !subToId.containsKey(subTarget))\n          continue;\n        final int u = subToId.get(subSource);\n        final int v = subToId.get(subTarget);\n        if (dist[u][v] < Long.MAX_VALUE)\n          dp[i + subLength] = Math.min(dp[i + subLength], dp[i] + dist[u][v]);\n      }\n    }\n\n    return dp[source.length()] == Long.MAX_VALUE ? -1 : dp[source.length()];\n  }\n\n  private Map<String, Integer> getSubToId(String[] original, String[] changed) {\n    Map<String, Integer> subToId = new HashMap<>();\n    for (final String s : original)\n      subToId.putIfAbsent(s, subToId.size());\n    for (final String s : changed)\n      subToId.putIfAbsent(s, subToId.size());\n    return subToId;\n  }\n\n  private Set<Integer> getSubLengths(String[] original) {\n    Set<Integer> subLengths = new HashSet<>();\n    for (final String s : original)\n      subLengths.add(s.length());\n    return subLengths;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n    subLengths = set(len(s) for s in original)\n    subToId = self._getSubToId(original, changed)\n    subCount = len(subToId)\n    # dist[u][v] := the minimum distance to change the substring with id u to\n    # the substring with id v\n    dist = [[math.inf for _ in range(subCount)] for _ in range(subCount)]\n    # dp[i] := the minimum cost to change the first i letters of `source` into\n    # `target`, leaving the suffix untouched\n    dp = [math.inf for _ in range(len(source) + 1)]\n\n    for a, b, c in zip(original, changed, cost):\n      u = subToId[a]\n      v = subToId[b]\n      dist[u][v] = min(dist[u][v], c)\n\n    for k in range(subCount):\n      for i in range(subCount):\n        if dist[i][k] < math.inf:\n          for j in range(subCount):\n            if dist[k][j] < math.inf:\n              dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    dp[0] = 0\n\n    for i, (s, t) in enumerate(zip(source, target)):\n      if dp[i] == math.inf:\n        continue\n      if s == t:\n        dp[i + 1] = min(dp[i + 1], dp[i])\n      for subLength in subLengths:\n        if i + subLength > len(source):\n          continue\n        subSource = source[i:i + subLength]\n        subTarget = target[i:i + subLength]\n        if subSource not in subToId or subTarget not in subToId:\n          continue\n        u = subToId[subSource]\n        v = subToId[subTarget]\n        if dist[u][v] != math.inf:\n          dp[i + subLength] = min(dp[i + subLength], dp[i] + dist[u][v])\n\n    return -1 if dp[len(source)] == math.inf else dp[len(source)]\n\n  def _getSubToId(self, original: str, changed: str) -> Dict[str, int]:\n    subToId = {}\n    for s in original + changed:\n      if s not in subToId:\n        subToId[s] = len(subToId)\n    return subToId\n",
                "lang_text": "py"
            }
        }
    }
}