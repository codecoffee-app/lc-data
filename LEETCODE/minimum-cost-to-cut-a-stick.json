{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1547",
            "title": "Minimum Cost to Cut a Stick",
            "titleSlug": "minimum-cost-to-cut-a-stick",
            "content": "<p>Given a wooden stick of length <code>n</code> units. The stick is labelled from <code>0</code> to <code>n</code>. For example, a stick of length <strong>6</strong> is labelled as follows:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/21/statement.jpg\" style=\"width: 521px; height: 111px;\" />\n<p>Given an integer array <code>cuts</code> where <code>cuts[i]</code> denotes a position you should perform a cut at.</p>\n\n<p>You should perform the cuts in order, you can change the order of the cuts as you wish.</p>\n\n<p>The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.</p>\n\n<p>Return <em>the minimum total cost</em> of the cuts.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/23/e1.jpg\" style=\"width: 350px; height: 284px;\" />\n<pre>\n<strong>Input:</strong> n = 7, cuts = [1,3,4,5]\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/21/e11.jpg\" style=\"width: 350px; height: 284px;\" />\nThe first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.\nRearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 9, cuts = [5,6,1,4,2]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> If you try the given cuts ordering the cost will be 25.\nThere are much ordering with total cost &lt;= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= cuts.length &lt;= min(n - 1, 100)</code></li>\n\t<li><code>1 &lt;= cuts[i] &lt;= n - 1</code></li>\n\t<li>All the integers in <code>cuts</code> array are <strong>distinct</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4030,
            "dislikes": 93,
            "similarQuestions": "[{\"title\": \"Number of Ways to Divide a Long Corridor\", \"titleSlug\": \"number-of-ways-to-divide-a-long-corridor\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"107.5K\", \"totalSubmission\": \"173.3K\", \"totalAcceptedRaw\": 107503, \"totalSubmissionRaw\": 173337, \"acRate\": \"62.0%\"}",
            "hints": [
                "Build a dp array where dp[i][j] is the minimum cost to achieve all the cuts between i and j.",
                "When you try to get the minimum cost between i and j, try all possible cuts k between them, dp[i][j] = min(dp[i][k] + dp[k][j]) + (j - i) for all possible cuts k between them."
            ],
            "rephrased": {
                "body": "You are given a wooden stick of length `n` units, labeled from 0 to `n`. You are also given an array `cuts` containing the positions where you need to cut the stick. The cuts can be performed in any order. The cost of a cut is equal to the length of the stick being cut. Your goal is to find the minimum total cost to cut the stick at all the given positions.",
                "constraints": [
                    "2 <= n <= 10^6",
                    "1 <= cuts.length <= min(n - 1, 100)",
                    "1 <= cuts[i] <= n - 1",
                    "All integers in `cuts` are distinct."
                ],
                "testcases": [
                    {
                        "input": "n = 7, cuts = [1,3,4,5]",
                        "output": "16",
                        "explanation": "One optimal order of cuts is [3, 5, 1, 4].  Cutting at position 3 costs 7. Cutting at position 5 costs 4 (length from 3 to 7). Cutting at position 1 costs 3 (length from 0 to 3). Cutting at position 4 costs 2 (length from 3 to 5 or 1 to 5 depending on prev. cut). The total cost is 7 + 4 + 3 + 2 = 16."
                    },
                    {
                        "input": "n = 9, cuts = [5,6,1,4,2]",
                        "output": "22",
                        "explanation": "One optimal order of cuts is [4, 6, 5, 2, 1]. This results in a total cost of 22."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-ways-to-divide-a-long-corridor",
                "title": "Number of Ways to Divide a Long Corridor",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Build a dp array where dp[i][j] is the minimum cost to achieve all the cuts between i and j.",
            "When you try to get the minimum cost between i and j, try all possible cuts k between them, dp[i][j] = min(dp[i][k] + dp[k][j]) + (j - i) for all possible cuts k between them."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minCost(int n, vector<int>& cuts) {\n    cuts.push_back(0);\n    cuts.push_back(n);\n    std::ranges::sort(cuts);\n\n    // dp[i][j] := minCost(cuts[i..j])\n    dp.resize(cuts.size(), vector<int>(cuts.size()));\n    return minCost(cuts, 0, cuts.size() - 1);\n  }\n\n private:\n  vector<vector<int>> dp;\n\n  int minCost(const vector<int>& cuts, int i, int j) {\n    if (j - i <= 1)\n      return 0;\n    if (dp[i][j] > 0)\n      return dp[i][j];\n\n    dp[i][j] = INT_MAX;\n\n    for (int k = i + 1; k < j; ++k)\n      dp[i][j] = min(dp[i][j], cuts[j] - cuts[i] + minCost(cuts, i, k) +\n                                   minCost(cuts, k, j));\n\n    return dp[i][j];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minCost(int n, int[] cuts) {\n    A = new int[cuts.length + 2];\n    System.arraycopy(cuts, 0, A, 1, cuts.length);\n    A[0] = 0;\n    A[A.length - 1] = n;\n\n    Arrays.sort(A);\n\n    // dp[i][j] := minCost(cuts[i..j])\n    dp = new int[A.length][A.length];\n    return minCost(0, A.length - 1);\n  }\n\n  private int[][] dp;\n  private int[] A;\n\n  private int minCost(int i, int j) {\n    if (j - i <= 1)\n      return 0;\n    if (dp[i][j] != 0)\n      return dp[i][j];\n\n    dp[i][j] = Integer.MAX_VALUE;\n\n    for (int k = i + 1; k < j; ++k)\n      dp[i][j] = Math.min(dp[i][j], A[j] - A[i] + minCost(i, k) + minCost(k, j));\n\n    return dp[i][j];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minCost(self, n: int, cuts: List[int]) -> int:\n    A = sorted([0] + cuts + [n])\n\n    @functools.lru_cache(None)\n    def dp(i, j):\n      if j - i <= 1:\n        return 0\n\n      return min(A[j] - A[i] + dp(i, k) + dp(k, j) for k in range(i + 1, j))\n\n    return dp(0, len(A) - 1)\n",
                "lang_text": "py"
            }
        }
    }
}