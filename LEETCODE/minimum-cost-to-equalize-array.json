{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3139",
            "title": "Minimum Cost to Equalize Array",
            "titleSlug": "minimum-cost-to-equalize-array",
            "content": "<p>You are given an integer array <code>nums</code> and two integers <code>cost1</code> and <code>cost2</code>. You are allowed to perform <strong>either</strong> of the following operations <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> from <code>nums</code> and <strong>increase</strong> <code>nums[i]</code> by <code>1</code> for a cost of <code>cost1</code>.</li>\n\t<li>Choose two <strong>different</strong> indices <code>i</code>, <code>j</code>, from <code>nums</code> and <strong>increase</strong> <code>nums[i]</code> and <code>nums[j]</code> by <code>1</code> for a cost of <code>cost2</code>.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> <strong>cost</strong> required to make all elements in the array <strong>equal</strong><em>. </em></p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,1], cost1 = 5, cost2 = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The following operations can be performed to make the values equal:</p>\n\n<ul>\n\t<li>Increase <code>nums[1]</code> by 1 for a cost of 5. <code>nums</code> becomes <code>[4,2]</code>.</li>\n\t<li>Increase <code>nums[1]</code> by 1 for a cost of 5. <code>nums</code> becomes <code>[4,3]</code>.</li>\n\t<li>Increase <code>nums[1]</code> by 1 for a cost of 5. <code>nums</code> becomes <code>[4,4]</code>.</li>\n</ul>\n\n<p>The total cost is 15.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,3,3,5], cost1 = 2, cost2 = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The following operations can be performed to make the values equal:</p>\n\n<ul>\n\t<li>Increase <code>nums[0]</code> and <code>nums[1]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[3,4,3,3,5]</code>.</li>\n\t<li>Increase <code>nums[0]</code> and <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[4,4,4,3,5]</code>.</li>\n\t<li>Increase <code>nums[0]</code> and <code>nums[3]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,4,4,4,5]</code>.</li>\n\t<li>Increase <code>nums[1]</code> and <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,5,4,5]</code>.</li>\n\t<li>Increase <code>nums[3]</code> by 1 for a cost of 2. <code>nums</code> becomes <code>[5,5,5,5,5]</code>.</li>\n</ul>\n\n<p>The total cost is 6.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,5,3], cost1 = 1, cost2 = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The following operations can be performed to make the values equal:</p>\n\n<ul>\n\t<li>Increase <code>nums[0]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[4,5,3]</code>.</li>\n\t<li>Increase <code>nums[0]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,3]</code>.</li>\n\t<li>Increase <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,4]</code>.</li>\n\t<li>Increase <code>nums[2]</code> by 1 for a cost of 1. <code>nums</code> becomes <code>[5,5,5]</code>.</li>\n</ul>\n\n<p>The total cost is 4.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= cost1 &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= cost2 &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 111,
            "dislikes": 19,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.6K\", \"totalSubmission\": \"22.6K\", \"totalAcceptedRaw\": 3577, \"totalSubmissionRaw\": 22558, \"acRate\": \"15.9%\"}",
            "hints": [
                "How can you determine the minimum cost if you know the maximum value in the array once all values are made equal?",
                "If <code>cost2 > cost1 * 2</code>, we should just use <code>cost1</code> to change all the values to the maximum one.",
                "Otherwise, it's optimal to choose the smallest two values and use <code>cost2</code> to increase both of them.",
                "Since the maximum value is known, calculate the required increases to equalize all values, instead of naively simulating the operations.",
                "There are not a lot of candidates for the maximum; we can try all of them and choose which uses the minimum number of operations."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and two integers `cost1` and `cost2`, determine the minimum cost to make all elements in the array equal. You can perform the following operations any number of times:\n\n*   Increase a single element `nums[i]` by 1 at a cost of `cost1`.\n*   Increase two different elements `nums[i]` and `nums[j]` by 1 at a cost of `cost2`.\n\nReturn the minimum cost required, modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= nums.length <= 10<sup>5</sup>",
                    "1 <= nums[i] <= 10<sup>6</sup>",
                    "1 <= cost1 <= 10<sup>6</sup>",
                    "1 <= cost2 <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [4,1], cost1 = 5, cost2 = 2",
                        "output": "15",
                        "explanation": "The optimal strategy is to increase nums[1] three times, each time increasing it by 1 with a cost of cost1 = 5. Therefore the total cost is 3 * 5 = 15."
                    },
                    {
                        "input": "nums = [2,3,3,3,5], cost1 = 2, cost2 = 1",
                        "output": "6",
                        "explanation": "One optimal approach is:\n1. Increase nums[0] and nums[1] by 1 (cost 1). nums becomes [3,4,3,3,5]\n2. Increase nums[0] and nums[2] by 1 (cost 1). nums becomes [4,4,4,3,5]\n3. Increase nums[0] and nums[3] by 1 (cost 1). nums becomes [5,4,4,4,5]\n4. Increase nums[1] and nums[2] by 1 (cost 1). nums becomes [5,5,5,4,5]\n5. Increase nums[3] by 1 (cost 2). nums becomes [5,5,5,5,5]\nThe total cost is 1+1+1+1+2 = 6."
                    },
                    {
                        "input": "nums = [3,5,3], cost1 = 1, cost2 = 3",
                        "output": "4",
                        "explanation": "The optimal strategy is:\n1. Increase nums[0] by 1 (cost 1). nums becomes [4,5,3]\n2. Increase nums[0] by 1 (cost 1). nums becomes [5,5,3]\n3. Increase nums[2] by 1 (cost 1). nums becomes [5,5,4]\n4. Increase nums[2] by 1 (cost 1). nums becomes [5,5,5]\nThe total cost is 1+1+1+1 = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "How can you determine the minimum cost if you know the maximum value in the array once all values are made equal?",
            "If <code>cost2 > cost1 * 2</code>, we should just use <code>cost1</code> to change all the values to the maximum one.",
            "Otherwise, it's optimal to choose the smallest two values and use <code>cost2</code> to increase both of them.",
            "Since the maximum value is known, calculate the required increases to equalize all values, instead of naively simulating the operations.",
            "There are not a lot of candidates for the maximum; we can try all of them and choose which uses the minimum number of operations."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minCostToEqualizeArray(vector<int>& nums, int cost1, int cost2) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = nums.size();\n    const int minNum = ranges::min(nums);\n    const int maxNum = ranges::max(nums);\n    const long sum = accumulate(nums.begin(), nums.end(), 0L);\n    long ans = LONG_MAX;\n\n    if (cost1 * 2 <= cost2 || n < 3) {\n      const long totalGap = 1L * maxNum * n - sum;\n      return (cost1 * totalGap) % kMod;\n    }\n\n    for (int target = maxNum; target < 2 * maxNum; ++target) {\n      const int maxGap = target - minNum;\n      const long totalGap = 1L * target * n - sum;\n      const long pairs = min(totalGap / 2, totalGap - maxGap);\n      ans = min(ans, cost1 * (totalGap - 2 * pairs) + cost2 * pairs);\n    }\n\n    return ans % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minCostToEqualizeArray(int[] nums, int cost1, int cost2) {\n    final int kMod = 1_000_000_007;\n    final int n = nums.length;\n    final int minNum = Arrays.stream(nums).min().getAsInt();\n    final int maxNum = Arrays.stream(nums).max().getAsInt();\n    final long sum = Arrays.stream(nums).asLongStream().sum();\n    long ans = Long.MAX_VALUE;\n\n    if (cost1 * 2 <= cost2 || n < 3) {\n      final long totalGap = 1L * maxNum * n - sum;\n      return (int) ((cost1 * totalGap) % kMod);\n    }\n\n    for (int target = maxNum; target < 2 * maxNum; ++target) {\n      final int maxGap = target - minNum;\n      final long totalGap = 1L * target * n - sum;\n      final long pairs = Math.min(totalGap / 2, totalGap - maxGap);\n      ans = Math.min(ans, cost1 * (totalGap - 2 * pairs) + cost2 * pairs);\n    }\n\n    return (int) (ans % kMod);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minCostToEqualizeArray(self, nums: List[int], cost1: int, cost2: int) -> int:\n    kMod = 1_000_000_007\n    n = len(nums)\n    minNum = min(nums)\n    maxNum = max(nums)\n    summ = sum(nums)\n\n    if cost1 * 2 <= cost2 or n < 3:\n      totalGap = maxNum * n - summ\n      return (cost1 * totalGap) % kMod\n\n    def getMinCost(target: int) -> int:\n      \"\"\"Returns the minimum cost to make all numbers equal to `target`.\"\"\"\n      maxGap = target - minNum\n      totalGap = target * n - summ\n      # Pair one shallowest number with one non-shallowest number, so the worst\n      # case is that we have `totalGap - maxGap` non-shallowest numbers to pair.\n      pairs = min(totalGap // 2, totalGap - maxGap)\n      return cost1 * (totalGap - 2 * pairs) + cost2 * pairs\n\n    return min(getMinCost(target)\n               for target in range(maxNum, 2 * maxNum)) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}