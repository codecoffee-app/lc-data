{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "857",
            "title": "Minimum Cost to Hire K Workers",
            "titleSlug": "minimum-cost-to-hire-k-workers",
            "content": "<p>There are <code>n</code> workers. You are given two integer arrays <code>quality</code> and <code>wage</code> where <code>quality[i]</code> is the quality of the <code>i<sup>th</sup></code> worker and <code>wage[i]</code> is the minimum wage expectation for the <code>i<sup>th</sup></code> worker.</p>\n\n<p>We want to hire exactly <code>k</code> workers to form a paid group. To hire a group of <code>k</code> workers, we must pay them according to the following rules:</p>\n\n<ol>\n\t<li>Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.</li>\n\t<li>Every worker in the paid group must be paid at least their minimum wage expectation.</li>\n</ol>\n\n<p>Given the integer <code>k</code>, return <em>the least amount of money needed to form a paid group satisfying the above conditions</em>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> quality = [10,20,5], wage = [70,50,30], k = 2\n<strong>Output:</strong> 105.00000\n<strong>Explanation:</strong> We pay 70 to 0<sup>th</sup> worker and 35 to 2<sup>nd</sup> worker.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3\n<strong>Output:</strong> 30.66667\n<strong>Explanation:</strong> We pay 4 to 0<sup>th</sup> worker, 13.33333 to 2<sup>nd</sup> and 3<sup>rd</sup> workers separately.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == quality.length == wage.length</code></li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= quality[i], wage[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2164,
            "dislikes": 279,
            "similarQuestions": "[{\"title\": \"Maximum Subsequence Score\", \"titleSlug\": \"maximum-subsequence-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"63.3K\", \"totalSubmission\": \"119.9K\", \"totalAcceptedRaw\": 63300, \"totalSubmissionRaw\": 119884, \"acRate\": \"52.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "You have `n` workers, each with a certain `quality` and a minimum `wage` expectation. Your task is to hire exactly `k` workers to form a paid group, adhering to these rules:\n\n1.  Workers in the group must be paid proportionally to their `quality` relative to the other workers in the group.\n2.  Each worker in the group must receive at least their minimum `wage` expectation.\n\nDetermine the minimum total cost required to form a paid group of `k` workers that satisfies both conditions.",
                "constraints": [
                    "`n == quality.length == wage.length`",
                    "`1 <= k <= n <= 10^4`",
                    "`1 <= quality[i], wage[i] <= 10^4`"
                ],
                "testcases": [
                    {
                        "input": "quality = [10,20,5], wage = [70,50,30], k = 2",
                        "output": "105.00000",
                        "explanation": "The least amount of money needed is achieved by paying 70 to the worker with quality 10 and 35 to the worker with quality 5. The ratio of their qualities is maintained (10:5 which simplifies to 2:1), and both workers receive at least their minimum wage."
                    },
                    {
                        "input": "quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3",
                        "output": "30.66667",
                        "explanation": "The minimum cost is achieved by selecting the worker with quality 3 and wage 4, and the two workers with quality 10 and wage 2. The cost would be 4 + (2/10)*3 + (2/10)*3.  Calculating the minimum wage ratio and selecting appropriate workers is key to solving this test case efficiently."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-subsequence-score",
                "title": "Maximum Subsequence Score",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int k) {\n    double ans = DBL_MAX;\n    int qualitySum = 0;\n    // (wagePerQuality, quality) sorted by wagePerQuality\n    vector<pair<double, int>> workers;\n    priority_queue<int> maxHeap;\n\n    for (int i = 0; i < quality.size(); ++i)\n      workers.emplace_back((double)wage[i] / quality[i], quality[i]);\n\n    std::ranges::sort(workers);\n\n    for (const auto& [wagePerQuality, q] : workers) {\n      maxHeap.push(q);\n      qualitySum += q;\n      if (maxHeap.size() > k)\n        qualitySum -= maxHeap.top(), maxHeap.pop();\n      if (maxHeap.size() == k)\n        ans = min(ans, qualitySum * wagePerQuality);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public double mincostToHireWorkers(int[] quality, int[] wage, int k) {\n    double ans = Double.MAX_VALUE;\n    int qualitySum = 0;\n    // (wagePerQuality, quality) sorted by wagePerQuality\n    Pair<Double, Integer>[] workers = new Pair[quality.length];\n    Queue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n    for (int i = 0; i < quality.length; ++i)\n      workers[i] = new Pair<>((double) wage[i] / quality[i], quality[i]);\n\n    Arrays.sort(workers, (a, b) -> Double.compare(a.getKey(), b.getKey()));\n\n    for (Pair<Double, Integer> worker : workers) {\n      final double wagePerQuality = worker.getKey();\n      final int q = worker.getValue();\n      maxHeap.offer(q);\n      qualitySum += q;\n      if (maxHeap.size() > k)\n        qualitySum -= maxHeap.poll();\n      if (maxHeap.size() == k)\n        ans = Math.min(ans, qualitySum * wagePerQuality);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:\n    ans = math.inf\n    qualitySum = 0\n    # (wagePerQuality, quality) sorted by wagePerQuality\n    workers = sorted((w / q, q) for q, w in zip(quality, wage))\n    maxHeap = []\n\n    for wagePerQuality, q in workers:\n      heapq.heappush(maxHeap, -q)\n      qualitySum += q\n      if len(maxHeap) > k:\n        qualitySum += heapq.heappop(maxHeap)\n      if len(maxHeap) == k:\n        ans = min(ans, qualitySum * wagePerQuality)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}