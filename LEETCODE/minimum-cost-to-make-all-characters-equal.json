{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2712",
            "title": "Minimum Cost to Make All Characters Equal",
            "titleSlug": "minimum-cost-to-make-all-characters-equal",
            "content": "<p>You are given a <strong>0-indexed</strong> binary string <code>s</code> of length <code>n</code> on which you can apply two types of operations:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> and invert all characters from&nbsp;index <code>0</code> to index <code>i</code>&nbsp;(both inclusive), with a cost of <code>i + 1</code></li>\n\t<li>Choose an index <code>i</code> and invert all characters&nbsp;from&nbsp;index <code>i</code> to index <code>n - 1</code>&nbsp;(both inclusive), with a cost of <code>n - i</code></li>\n</ul>\n\n<p>Return <em>the <strong>minimum cost </strong>to make all characters of the string <strong>equal</strong></em>.</p>\n\n<p><strong>Invert</strong> a character means&nbsp;if its value is &#39;0&#39; it becomes &#39;1&#39; and vice-versa.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0011&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Apply the second operation with <code>i = 2</code> to obtain <code>s = &quot;0000&quot; for a cost of 2</code>. It can be shown that 2 is the minimum cost to make all characters equal.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;010101&quot;\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Apply the first operation with i = 2 to obtain s = &quot;101101&quot; for a cost of 3.\nApply the first operation with i = 1 to obtain s = &quot;011101&quot; for a cost of 2. \nApply the first operation with i = 0 to obtain s = &quot;111101&quot; for a cost of 1. \nApply the second operation with i = 4 to obtain s = &quot;111110&quot; for a cost of 2.\nApply the second operation with i = 5 to obtain s = &quot;111111&quot; for a cost of 1. \nThe total cost to make all characters equal is 9. It can be shown that 9 is the minimum cost to make all characters equal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length == n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 497,
            "dislikes": 21,
            "similarQuestions": "[{\"title\": \"Flip String to Monotone Increasing\", \"titleSlug\": \"flip-string-to-monotone-increasing\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.7K\", \"totalSubmission\": \"31.1K\", \"totalAcceptedRaw\": 16658, \"totalSubmissionRaw\": 31068, \"acRate\": \"53.6%\"}",
            "hints": [
                "For every index i, calculate the number of operations required to make the prefix [0, i - 1] equal to the character at index i, denoted prefix[i].",
                "For every index i, calculate the number of operations required to make the suffix [i + 1, n - 1] equal to the character at index i, denoted suffix[i].",
                "The final string will contain at least one character that is left unchanged; Therefore, the answer is the minimum of prefix[i] + suffix[i] for every i in [0, n - 1]."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed binary string `s` of length `n`. You can perform two types of operations on it:\n\n1.  **Prefix Inversion:** Choose an index `i` and invert all characters from index 0 to `i` (inclusive). The cost of this operation is `i + 1`.\n2.  **Suffix Inversion:** Choose an index `i` and invert all characters from index `i` to `n - 1` (inclusive). The cost of this operation is `n - i`.\n\nInverting a character means changing '0' to '1' and vice versa.\n\nReturn the minimum cost required to make all characters of the string `s` equal.",
                "constraints": [
                    "1 <= s.length == n <= 10^5",
                    "s[i] is either '0' or '1'"
                ],
                "testcases": [
                    {
                        "input": "0011",
                        "output": "2",
                        "explanation": "Applying the suffix inversion operation with `i = 2` transforms `s` to \"0000\" at a cost of 2. This is the minimum cost to make all characters equal."
                    },
                    {
                        "input": "010101",
                        "output": "9",
                        "explanation": "One possible sequence of operations to make all characters equal is:\n\n1. Prefix Inversion with i = 2, s = \"101101\", cost = 3.\n2. Prefix Inversion with i = 1, s = \"011101\", cost = 2.\n3. Prefix Inversion with i = 0, s = \"111101\", cost = 1.\n4. Suffix Inversion with i = 4, s = \"111110\", cost = 2.\n5. Suffix Inversion with i = 5, s = \"111111\", cost = 1.\n\nThe total cost is 9. This is the minimum cost to achieve the goal."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "flip-string-to-monotone-increasing",
                "title": "Flip String to Monotone Increasing",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For every index i, calculate the number of operations required to make the prefix [0, i - 1] equal to the character at index i, denoted prefix[i].",
            "For every index i, calculate the number of operations required to make the suffix [i + 1, n - 1] equal to the character at index i, denoted suffix[i].",
            "The final string will contain at least one character that is left unchanged; Therefore, the answer is the minimum of prefix[i] + suffix[i] for every i in [0, n - 1]."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumCost(string s) {\n    const int n = s.length();\n    long long ans = 0;\n\n    for (int i = 1; i < n; ++i)\n      if (s[i] != s[i - 1])\n        // Invert s[0..i - 1] or s[i..n - 1].\n        ans += min(i, n - i);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minimumCost(String s) {\n    final int n = s.length();\n    long ans = 0;\n\n    for (int i = 1; i < n; ++i)\n      if (s.charAt(i) != s.charAt(i - 1))\n        // Invert s[0..i - 1] or s[i..n - 1].\n        ans += Math.min(i, n - i);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumCost(self, s: str) -> int:\n    n = len(s)\n    ans = 0\n\n    for i in range(1, n):\n      if s[i] != s[i - 1]:\n        # Invert s[0..i - 1] or s[i..n - 1].\n        ans += min(i, n - i)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}