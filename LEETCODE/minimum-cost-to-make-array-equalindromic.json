{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2967",
            "title": "Minimum Cost to Make Array Equalindromic",
            "titleSlug": "minimum-cost-to-make-array-equalindromic",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> having length <code>n</code>.</p>\n\n<p>You are allowed to perform a special move <strong>any</strong> number of times (<strong>including zero</strong>) on <code>nums</code>. In one <strong>special</strong> <strong>move</strong> you perform the following steps <strong>in order</strong>:</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the range <code>[0, n - 1]</code>, and a <strong>positive</strong> integer <code>x</code>.</li>\n\t<li>Add <code>|nums[i] - x|</code> to the total cost.</li>\n\t<li>Change the value of <code>nums[i]</code> to <code>x</code>.</li>\n</ul>\n\n<p>A <strong>palindromic number</strong> is a positive integer that remains the same when its digits are reversed. For example, <code>121</code>, <code>2552</code> and <code>65756</code> are palindromic numbers whereas <code>24</code>, <code>46</code>, <code>235</code> are not palindromic numbers.</p>\n\n<p>An array is considered <strong>equalindromic</strong> if all the elements in the array are equal to an integer <code>y</code>, where <code>y</code> is a <strong>palindromic number</strong> less than <code>10<sup>9</sup></code>.</p>\n\n<p>Return <em>an integer denoting the <strong>minimum</strong> possible total cost to make </em><code>nums</code><em> <strong>equalindromic</strong> by performing any number of special moves.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> We can make the array equalindromic by changing all elements to 3 which is a palindromic number. The cost of changing the array to [3,3,3,3,3] using 4 special moves is given by |1 - 3| + |2 - 3| + |4 - 3| + |5 - 3| = 6.\nIt can be shown that changing all elements to any palindromic number other than 3 cannot be achieved at a lower cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,12,13,14,15]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> We can make the array equalindromic by changing all elements to 11 which is a palindromic number. The cost of changing the array to [11,11,11,11,11] using 5 special moves is given by |10 - 11| + |12 - 11| + |13 - 11| + |14 - 11| + |15 - 11| = 11.\nIt can be shown that changing all elements to any palindromic number other than 11 cannot be achieved at a lower cost.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [22,33,22,33,22]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> We can make the array equalindromic by changing all elements to 22 which is a palindromic number. The cost of changing the array to [22,22,22,22,22] using 2 special moves is given by |33 - 22| + |33 - 22| = 22.\nIt can be shown that changing all elements to any palindromic number other than 22 cannot be achieved at a lower cost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 216,
            "dislikes": 86,
            "similarQuestions": "[{\"title\": \"Minimum Moves to Equal Array Elements II\", \"titleSlug\": \"minimum-moves-to-equal-array-elements-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Make Array Equal\", \"titleSlug\": \"minimum-cost-to-make-array-equal\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.4K\", \"totalSubmission\": \"56.4K\", \"totalAcceptedRaw\": 12411, \"totalSubmissionRaw\": 56422, \"acRate\": \"22.0%\"}",
            "hints": [
                "Find the median of <code>nums</code> after sorting it (if the length is even, we can select any number from the two in the middle). Let\u2019s call it <code>m</code>.",
                "Try the smallest palindromic number that is larger than or equal to <code>m</code> (if any) and the largest palindromic number that is smaller than or equal to <code>m</code> (if any). These two values are the candidate palindromic numbers for values of all indices.",
                "We can use math constructions to construct the two palindromic numbers in <code>O(log(m) / 2)</code> time or we can do it using brute-force by starting from m and checking smaller and larger values in <code>O(sqrt(10<sup>log(m)</sup>))</code>.",
                "It is also possible to just generate all palindromic numbers using recursion in <code>O(sqrt(10<sup>9</sup>log(10<sup>9</sup>))</code>."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` of length `n`, you can perform a special move any number of times. A special move involves selecting an index `i` and a positive integer `x`, adding `|nums[i] - x|` to the total cost, and changing `nums[i]` to `x`. The goal is to make `nums` equalindromic, meaning all elements are equal to a palindromic number less than 10<sup>9</sup>. A palindromic number reads the same forwards and backward (e.g., 121, 2552).  Return the minimum total cost to make `nums` equalindromic.",
                "constraints": [
                    "1 <= n <= 10<sup>5</sup>",
                    "1 <= nums[i] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4,5]",
                        "output": "6",
                        "explanation": "The array can be made equalindromic by changing all elements to 3, resulting in the array [3,3,3,3,3]. The total cost is |1 - 3| + |2 - 3| + |4 - 3| + |5 - 3| = 6. Choosing any other palindromic number would result in a higher cost."
                    },
                    {
                        "input": "[10,12,13,14,15]",
                        "output": "11",
                        "explanation": "The array can be made equalindromic by changing all elements to 11, resulting in the array [11,11,11,11,11]. The total cost is |10 - 11| + |12 - 11| + |13 - 11| + |14 - 11| + |15 - 11| = 11. Any other palindromic number gives a higher cost."
                    },
                    {
                        "input": "[22,33,22,33,22]",
                        "output": "22",
                        "explanation": "The array can be made equalindromic by changing all elements to 22, resulting in the array [22,22,22,22,22]. The total cost is |33 - 22| + |33 - 22| = 22. Other palindromic numbers will give more cost."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-moves-to-equal-array-elements-ii",
                "title": "Minimum Moves to Equal Array Elements II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-make-array-equal",
                "title": "Minimum Cost to Make Array Equal",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Find the median of <code>nums</code> after sorting it (if the length is even, we can select any number from the two in the middle). Let\u2019s call it <code>m</code>.",
            "Try the smallest palindromic number that is larger than or equal to <code>m</code> (if any) and the largest palindromic number that is smaller than or equal to <code>m</code> (if any). These two values are the candidate palindromic numbers for values of all indices.",
            "We can use math constructions to construct the two palindromic numbers in <code>O(log(m) / 2)</code> time or we can do it using brute-force by starting from m and checking smaller and larger values in <code>O(sqrt(10<sup>log(m)</sup>))</code>.",
            "It is also possible to just generate all palindromic numbers using recursion in <code>O(sqrt(10<sup>9</sup>log(10<sup>9</sup>))</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumCost(vector<int>& nums) {\n    ranges::sort(nums);\n    const int median = nums[nums.size() / 2];\n    const int nextPalindrome = getPalindrome(median, /*delta=*/1);\n    const int prevPalindrome = getPalindrome(median, /*delta=*/-1);\n    return min(cost(nums, nextPalindrome), cost(nums, prevPalindrome));\n  }\n\n private:\n  // Returns the cost to change all the numbers to `palindrome`.\n  long long cost(const vector<int>& nums, int palindrome) {\n    return accumulate(nums.begin(), nums.end(), 0LL,\n                      [palindrome](long long subtotal, int num) {\n      return subtotal + abs(palindrome - num);\n    });\n  }\n\n  // Returns the palindrome `p`, where p = num + a * delta and a > 0.\n  int getPalindrome(int num, int delta) {\n    while (!isPalindrome(num))\n      num += delta;\n    return num;\n  }\n\n  bool isPalindrome(int num) {\n    const string original = to_string(num);\n    const string reversed = {original.rbegin(), original.rend()};\n    return original == reversed;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minimumCost(int[] nums) {\n    Arrays.sort(nums);\n    final int median = nums[nums.length / 2];\n    final int nextPalindrome = getPalindrome(median, 1);\n    final int prevPalindrome = getPalindrome(median, -1);\n    return Math.min(cost(nums, nextPalindrome), cost(nums, prevPalindrome));\n  }\n\n  // Returns the cost to change all the numbers to `palindrome`.\n  private long cost(int[] nums, int palindrome) {\n    return Arrays.stream(nums).mapToLong(num -> Math.abs(palindrome - num)).sum();\n  }\n\n  // Returns the palindrome `p`, where p = num + a * delta and a > 0.\n  private int getPalindrome(int num, int delta) {\n    while (!isPalindrome(num))\n      num += delta;\n    return num;\n  }\n\n  private boolean isPalindrome(int num) {\n    final String original = Integer.toString(num);\n    final String reversed = new StringBuilder(original).reverse().toString();\n    return original.equals(reversed);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumCost(self, nums: List[int]) -> int:\n    nums.sort()\n    median = nums[len(nums) // 2]\n    nextPalindrome = self._getPalindrome(median, delta=1)\n    prevPalindrome = self._getPalindrome(median, delta=-1)\n    return min(self._cost(nums, nextPalindrome),\n               self._cost(nums, prevPalindrome))\n\n  def _cost(self, nums: List[int], palindrome: int) -> int:\n    \"\"\"Returns the cost to change all the numbers to `palindrome`.\"\"\"\n    return sum(abs(palindrome - num) for num in nums)\n\n  def _getPalindrome(self, num: int, delta: int) -> int:\n    \"\"\"Returns the palindrome `p`, where p = num + a * delta and a > 0.\"\"\"\n    while not self._isPalindrome(num):\n      num += delta\n    return num\n\n  def _isPalindrome(self, num: int) -> int:\n    original = str(num)\n    return original == original[::-1]\n",
                "lang_text": "py"
            }
        }
    }
}