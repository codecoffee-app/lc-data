{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1928",
            "title": "Minimum Cost to Reach Destination in Time",
            "titleSlug": "minimum-cost-to-reach-destination-in-time",
            "content": "<p>There is a country of <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code> where <strong>all the cities are connected</strong> by bi-directional roads. The roads are represented as a 2D integer array <code>edges</code> where <code>edges[i] = [x<sub>i</sub>, y<sub>i</sub>, time<sub>i</sub>]</code> denotes a road between cities <code>x<sub>i</sub></code> and <code>y<sub>i</sub></code> that takes <code>time<sub>i</sub></code> minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.</p>\n\n<p>Each time you pass through a city, you must pay a passing fee. This is represented as a <strong>0-indexed</strong> integer array <code>passingFees</code> of length <code>n</code> where <code>passingFees[j]</code> is the amount of dollars you must pay when you pass through city <code>j</code>.</p>\n\n<p>In the beginning, you are at city <code>0</code> and want to reach city <code>n - 1</code> in <code>maxTime</code><strong> minutes or less</strong>. The <strong>cost</strong> of your journey is the <strong>summation of passing fees</strong> for each city that you passed through at some moment of your journey (<strong>including</strong> the source and destination cities).</p>\n\n<p>Given <code>maxTime</code>, <code>edges</code>, and <code>passingFees</code>, return <em>the <strong>minimum cost</strong> to complete your journey, or </em><code>-1</code><em> if you cannot complete it within </em><code>maxTime</code><em> minutes</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/04/leetgraph1-1.png\" style=\"width: 371px; height: 171px;\" /></p>\n\n<pre>\n<strong>Input:</strong> maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The path to take is 0 -&gt; 1 -&gt; 2 -&gt; 5, which takes 30 minutes and has $11 worth of passing fees.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/04/copy-of-leetgraph1-1.png\" style=\"width: 371px; height: 171px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\n<strong>Output:</strong> 48\n<strong>Explanation:</strong> The path to take is 0 -&gt; 3 -&gt; 4 -&gt; 5, which takes 26 minutes and has $48 worth of passing fees.\nYou cannot take path 0 -&gt; 1 -&gt; 2 -&gt; 5 since it would take too long.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no way to reach city 5 from city 0 within 25 minutes.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= maxTime &lt;= 1000</code></li>\n\t<li><code>n == passingFees.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>n - 1 &lt;= edges.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= time<sub>i</sub> &lt;= 1000</code></li>\n\t<li><code>1 &lt;= passingFees[j] &lt;= 1000</code>&nbsp;</li>\n\t<li>The graph may contain multiple edges between two nodes.</li>\n\t<li>The graph does not contain self loops.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 753,
            "dislikes": 19,
            "similarQuestions": "[{\"title\": \"Maximum Cost of Trip With K Highways\", \"titleSlug\": \"maximum-cost-of-trip-with-k-highways\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Path Quality of a Graph\", \"titleSlug\": \"maximum-path-quality-of-a-graph\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Reach City With Discounts\", \"titleSlug\": \"minimum-cost-to-reach-city-with-discounts\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"17.5K\", \"totalSubmission\": \"46.1K\", \"totalAcceptedRaw\": 17455, \"totalSubmissionRaw\": 46126, \"acRate\": \"37.8%\"}",
            "hints": [
                "Consider a new graph where each node is one of the old nodes at a specific time. For example, node 0 at time 5.",
                "You need to find the shortest path in the new graph."
            ],
            "rephrased": {
                "body": "You are given a country with `n` cities (numbered 0 to `n-1`) connected by bi-directional roads. The `edges` array represents these roads, where each `edges[i] = [x_i, y_i, time_i]` indicates a road between cities `x_i` and `y_i` taking `time_i` minutes.  Multiple roads may exist between the same cities with varying travel times, but no road connects a city to itself.\n\nEach city has a passing fee, given by the 0-indexed `passingFees` array of length `n`, where `passingFees[j]` is the fee to pass through city `j`. \n\nYou start at city 0 and want to reach city `n-1` within a maximum time of `maxTime` minutes. The cost of your journey is the sum of the passing fees for each city you pass through, *including* the starting and ending cities.\n\nYour task is to find the minimum cost to complete the journey from city 0 to city `n-1` within `maxTime` minutes. If no such journey is possible, return -1.",
                "constraints": [
                    "1 <= maxTime <= 1000",
                    "n == passingFees.length",
                    "2 <= n <= 1000",
                    "n - 1 <= edges.length <= 1000",
                    "0 <= x_i, y_i <= n - 1",
                    "1 <= time_i <= 1000",
                    "1 <= passingFees[j] <= 1000",
                    "The graph may contain multiple edges between two nodes.",
                    "The graph does not contain self loops."
                ],
                "testcases": [
                    {
                        "input": "maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]",
                        "output": "11",
                        "explanation": "The optimal path is 0 -> 1 -> 2 -> 5, which takes 30 minutes and costs $11 (5 + 1 + 2 + 3)."
                    },
                    {
                        "input": "maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]",
                        "output": "48",
                        "explanation": "The optimal path is 0 -> 3 -> 4 -> 5, which takes 26 minutes and costs $48 (5 + 20 + 20 + 3). The path 0 -> 1 -> 2 -> 5 is too long."
                    },
                    {
                        "input": "maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]",
                        "output": "-1",
                        "explanation": "There is no path from city 0 to city 5 within 25 minutes."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-cost-of-trip-with-k-highways",
                "title": "Maximum Cost of Trip With K Highways",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-path-quality-of-a-graph",
                "title": "Maximum Path Quality of a Graph",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-cost-to-reach-city-with-discounts",
                "title": "Minimum Cost to Reach City With Discounts",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Consider a new graph where each node is one of the old nodes at a specific time. For example, node 0 at time 5.",
            "You need to find the shortest path in the new graph."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minCost(int maxTime, vector<vector<int>>& edges,\n              vector<int>& passingFees) {\n    const int n = passingFees.size();\n    vector<vector<pair<int, int>>> graph(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int w = edge[2];\n      graph[u].emplace_back(v, w);\n      graph[v].emplace_back(u, w);\n    }\n\n    return dijkstra(graph, 0, n - 1, maxTime, passingFees);\n  }\n\n private:\n  int dijkstra(const vector<vector<pair<int, int>>>& graph, int src, int dst,\n               int maxTime, const vector<int>& passingFees) {\n    // cost[i] := min cost to reach cities[i]\n    vector<int> cost(graph.size(), INT_MAX);\n    // dist[i] := min time to reach cities[i]\n    vector<int> dist(graph.size(), maxTime + 1);\n    using T = tuple<int, int, int>;  // (cost[u], dist[u], u)\n    priority_queue<T, vector<T>, greater<>> minHeap;\n\n    cost[src] = passingFees[src];\n    dist[src] = 0;\n    minHeap.emplace(cost[src], dist[src], src);\n\n    while (!minHeap.empty()) {\n      const auto [currCost, d, u] = minHeap.top();\n      minHeap.pop();\n      if (u == dst)\n        return cost[dst];\n      for (const auto& [v, w] : graph[u]) {\n        if (d + w > maxTime)\n          continue;\n        // Go from u -> v.\n        if (currCost + passingFees[v] < cost[v]) {\n          cost[v] = currCost + passingFees[v];\n          dist[v] = d + w;\n          minHeap.emplace(cost[v], dist[v], v);\n        } else if (d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.emplace(currCost + passingFees[v], dist[v], v);\n        }\n      }\n    }\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minCost(int maxTime, int[][] edges, int[] passingFees) {\n    final int n = passingFees.length;\n    List<Pair<Integer, Integer>>[] graph = new List[n];\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int t = edge[2];\n      graph[u].add(new Pair<>(v, t));\n      graph[v].add(new Pair<>(u, t));\n    }\n\n    return dijkstra(graph, 0, n - 1, maxTime, passingFees);\n  }\n\n  private int dijkstra(List<Pair<Integer, Integer>>[] graph, int src, int dst, int maxTime,\n                       int[] passingFees) {\n    int[] cost = new int[graph.length]; // cost[i] := min cost to reach cities[i]\n    int[] dist = new int[graph.length]; // dist[i] := min dist to reach cities[i]\n    Arrays.fill(cost, Integer.MAX_VALUE);\n    Arrays.fill(dist, maxTime + 1);\n    // (cost[u], dist[u], u)\n    Queue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n\n    cost[0] = passingFees[0];\n    dist[0] = 0;\n    minHeap.offer(new int[] {cost[src], dist[src], src});\n\n    while (!minHeap.isEmpty()) {\n      final int currCost = minHeap.peek()[0];\n      final int d = minHeap.peek()[1];\n      final int u = minHeap.poll()[2];\n      if (u == dst)\n        return cost[dst];\n      for (Pair<Integer, Integer> pair : graph[u]) {\n        final int v = pair.getKey();\n        final int w = pair.getValue();\n        if (d + w > maxTime)\n          continue;\n        // Go from x -> y\n        if (currCost + passingFees[v] < cost[v]) {\n          cost[v] = currCost + passingFees[v];\n          dist[v] = d + w;\n          minHeap.offer(new int[] {cost[v], dist[v], v});\n        } else if (d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.offer(new int[] {currCost + passingFees[v], dist[v], v});\n        }\n      }\n    }\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minCost(self, maxTime: int, edges: List[List[int]], passingFees: List[int]) -> int:\n    n = len(passingFees)\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    return self._dijkstra(graph, 0, n - 1, maxTime, passingFees)\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int, dst: int, maxTime: int, passingFees: List[int]) -> int:\n    # cost[i] := min cost to reach cities[i]\n    cost = [math.inf for _ in range(len(graph))]\n    # dist[i] := min time to reach cities[i]\n    dist = [maxTime + 1 for _ in range(len(graph))]\n\n    cost[src] = passingFees[src]\n    dist[src] = 0\n    minHeap = [(cost[src], dist[src], src)]  # (cost[u], dist[u], u)\n\n    while minHeap:\n      currCost, d, u = heapq.heappop(minHeap)\n      if u == dst:\n        return cost[dst]\n      for v, w in graph[u]:\n        if d + w > maxTime:\n          continue\n        # Go from u -> v.\n        if currCost + passingFees[v] < cost[v]:\n          cost[v] = currCost + passingFees[v]\n          dist[v] = d + w\n          heapq.heappush(minHeap, (cost[v], dist[v], v))\n        elif d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (currCost + passingFees[v], dist[v], v))\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}