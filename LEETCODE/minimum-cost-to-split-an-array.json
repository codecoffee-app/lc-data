{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2547",
            "title": "Minimum Cost to Split an Array",
            "titleSlug": "minimum-cost-to-split-an-array",
            "content": "<p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p>\n\n<p>Split the array into some number of non-empty subarrays. The <strong>cost</strong> of a split is the sum of the <strong>importance value</strong> of each subarray in the split.</p>\n\n<p>Let <code>trimmed(subarray)</code> be the version of the subarray where all numbers which appear only once are removed.</p>\n\n<ul>\n\t<li>For example, <code>trimmed([3,1,2,4,3,4]) = [3,4,3,4].</code></li>\n</ul>\n\n<p>The <strong>importance value</strong> of a subarray is <code>k + trimmed(subarray).length</code>.</p>\n\n<ul>\n\t<li>For example, if a subarray is <code>[1,2,3,3,3,4,4]</code>, then <font face=\"monospace\">trimmed(</font><code>[1,2,3,3,3,4,4]) = [3,3,3,4,4].</code>The importance value of this subarray will be <code>k + 5</code>.</li>\n</ul>\n\n<p>Return <em>the minimum possible cost of a split of </em><code>nums</code>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,2,1,3,3], k = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> We split nums to have two subarrays: [1,2], [1,2,1,3,3].\nThe importance value of [1,2] is 2 + (0) = 2.\nThe importance value of [1,2,1,3,3] is 2 + (2 + 2) = 6.\nThe cost of the split is 2 + 6 = 8. It can be shown that this is the minimum possible cost among all the possible splits.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,2,1], k = 2\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> We split nums to have two subarrays: [1,2], [1,2,1].\nThe importance value of [1,2] is 2 + (0) = 2.\nThe importance value of [1,2,1] is 2 + (2) = 4.\nThe cost of the split is 2 + 4 = 6. It can be shown that this is the minimum possible cost among all the possible splits.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,2,1], k = 5\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> We split nums to have one subarray: [1,2,1,2,1].\nThe importance value of [1,2,1,2,1] is 5 + (3 + 2) = 10.\nThe cost of the split is 10. It can be shown that this is the minimum possible cost among all the possible splits.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt; nums.length</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<style type=\"text/css\">.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0;\u00a0\n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n</style>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 406,
            "dislikes": 24,
            "similarQuestions": "[{\"title\": \"Coin Change\", \"titleSlug\": \"coin-change\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split Array Largest Sum\", \"titleSlug\": \"split-array-largest-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.6K\", \"totalSubmission\": \"27K\", \"totalAcceptedRaw\": 10583, \"totalSubmissionRaw\": 27047, \"acRate\": \"39.1%\"}",
            "hints": [
                "Let's denote dp[r] = minimum cost to partition the first r elements of nums. What would be the transitions of such dynamic programming?",
                "dp[r] = min(dp[l] + importance(nums[l..r])) over all 0 <= l < r. This already gives us an O(n^3) approach, as importance can be calculated in linear time, and there are a total of O(n^2) transitions.",
                "Can you think of a way to compute multiple importance values of related subarrays faster?",
                "importance(nums[l-1..r]) is either importance(nums[l..r]) if a new unique element is added, importance(nums[l..r]) + 1 if an old element that appeared at least twice is added, or importance(nums[l..r]) + 2, if a previously unique element is duplicated. This allows us to compute importance(nums[l..r]) for all 0 <= l < r in O(n) by keeping a frequency table and decreasing l from r-1 down to 0."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `k`, split the array into some number of non-empty subarrays. The cost of a split is the sum of the importance value of each subarray in the split.\n\nLet `trimmed(subarray)` be the version of the subarray where all numbers which appear only once are removed. The importance value of a subarray is `k + trimmed(subarray).length`.\n\nReturn the minimum possible cost of a split of `nums`.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "0 <= nums[i] < nums.length",
                    "1 <= k <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,1,2,1,3,3], k = 2",
                        "output": "8",
                        "explanation": "One optimal split is [1,2] and [1,2,1,3,3]. The importance value of [1,2] is 2 + 0 = 2. The importance value of [1,2,1,3,3] is 2 + 4 = 6. The total cost is 2 + 6 = 8."
                    },
                    {
                        "input": "nums = [1,2,1,2,1], k = 2",
                        "output": "6",
                        "explanation": "One optimal split is [1,2] and [1,2,1]. The importance value of [1,2] is 2 + 0 = 2. The importance value of [1,2,1] is 2 + 2 = 4. The total cost is 2 + 4 = 6."
                    },
                    {
                        "input": "nums = [1,2,1,2,1], k = 5",
                        "output": "10",
                        "explanation": "The optimal split is to have one subarray: [1,2,1,2,1]. The importance value of [1,2,1,2,1] is 5 + 5 = 10. The total cost is 10."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "coin-change",
                "title": "Coin Change",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "split-array-largest-sum",
                "title": "Split Array Largest Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let's denote dp[r] = minimum cost to partition the first r elements of nums. What would be the transitions of such dynamic programming?",
            "dp[r] = min(dp[l] + importance(nums[l..r])) over all 0 <= l < r. This already gives us an O(n^3) approach, as importance can be calculated in linear time, and there are a total of O(n^2) transitions.",
            "Can you think of a way to compute multiple importance values of related subarrays faster?",
            "importance(nums[l-1..r]) is either importance(nums[l..r]) if a new unique element is added, importance(nums[l..r]) + 1 if an old element that appeared at least twice is added, or importance(nums[l..r]) + 2, if a previously unique element is duplicated. This allows us to compute importance(nums[l..r]) for all 0 <= l < r in O(n) by keeping a frequency table and decreasing l from r-1 down to 0."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minCost(vector<int>& nums, int k) {\n    constexpr int kMax = 1001;\n    const int n = nums.size();\n    // trimmedLength[i][j] := trimmed(nums[i..j]).length\n    vector<vector<int>> trimmedLength(n, vector<int>(n));\n    // dp[i] := min cost to split nums[i:]\n    vector<int> dp(n + 1, INT_MAX / 2);\n\n    for (int i = 0; i < n; ++i) {\n      int length = 0;\n      vector<int> count(kMax);\n      for (int j = i; j < n; ++j) {\n        if (++count[nums[j]] == 2)\n          length += 2;\n        else if (count[nums[j]] > 2)\n          ++length;\n        trimmedLength[i][j] = length;\n      }\n    }\n\n    dp[n] = 0;\n\n    for (int i = n - 1; i >= 0; --i)\n      for (int j = i; j < n; ++j)\n        dp[i] = min(dp[i], k + trimmedLength[i][j] + dp[j + 1]);\n\n    return dp[0];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minCost(int[] nums, int k) {\n    final int kMax = 1001;\n    final int n = nums.length;\n    // trimmedLength[i][j] := trimmed(nums[i..j]).length\n    int[][] trimmedLength = new int[n][n];\n    // dp[i] := min cost to split nums[i:]\n    int[] dp = new int[n + 1];\n    Arrays.fill(dp, Integer.MAX_VALUE / 2);\n\n    for (int i = 0; i < n; ++i) {\n      int length = 0;\n      int[] count = new int[kMax];\n      for (int j = i; j < n; ++j) {\n        if (++count[nums[j]] == 2)\n          length += 2;\n        else if (count[nums[j]] > 2)\n          ++length;\n        trimmedLength[i][j] = length;\n      }\n    }\n\n    dp[n] = 0;\n\n    for (int i = n - 1; i >= 0; --i)\n      for (int j = i; j < n; ++j)\n        dp[i] = Math.min(dp[i], k + trimmedLength[i][j] + dp[j + 1]);\n\n    return dp[0];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minCost(self, nums: List[int], k: int) -> int:\n    kMax = 1001\n    n = len(nums)\n    # trimmedLength[i][j] := trimmed(nums[i..j]).length\n    trimmedLength = [[0] * n for _ in range(n)]\n    # dp[i] := min cost to split nums[i:]\n    dp = [math.inf] * n + [0]\n\n    for i in range(n):\n      length = 0\n      count = [0] * kMax\n      for j in range(i, n):\n        count[nums[j]] += 1\n        if count[nums[j]] == 2:\n          length += 2\n        elif count[nums[j]] > 2:\n          length += 1\n        trimmedLength[i][j] = length\n\n    dp[n] = 0\n\n    for i in range(n - 1, -1, -1):\n      for j in range(i, n):\n        dp[i] = min(dp[i], k + trimmedLength[i][j] + dp[j + 1])\n\n    return dp[0]\n",
                "lang_text": "py"
            }
        }
    }
}