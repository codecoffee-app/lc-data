{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1130",
            "title": "Minimum Cost Tree From Leaf Values",
            "titleSlug": "minimum-cost-tree-from-leaf-values",
            "content": "<p>Given an array <code>arr</code> of positive integers, consider all binary trees such that:</p>\n\n<ul>\n\t<li>Each node has either <code>0</code> or <code>2</code> children;</li>\n\t<li>The values of <code>arr</code> correspond to the values of each <strong>leaf</strong> in an in-order traversal of the tree.</li>\n\t<li>The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.</li>\n</ul>\n\n<p>Among all possible binary trees considered, return <em>the smallest possible sum of the values of each non-leaf node</em>. It is guaranteed this sum fits into a <strong>32-bit</strong> integer.</p>\n\n<p>A node is a <strong>leaf</strong> if and only if it has zero children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/10/tree1.jpg\" style=\"width: 500px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> arr = [6,2,4]\n<strong>Output:</strong> 32\n<strong>Explanation:</strong> There are two possible trees shown.\nThe first has a non-leaf node sum 36, and the second has non-leaf node sum 32.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/10/tree2.jpg\" style=\"width: 224px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> arr = [4,11]\n<strong>Output:</strong> 44\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= arr.length &lt;= 40</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 15</code></li>\n\t<li>It is guaranteed that the answer fits into a <strong>32-bit</strong> signed integer (i.e., it is less than 2<sup>31</sup>).</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4170,
            "dislikes": 265,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"93.9K\", \"totalSubmission\": \"138.2K\", \"totalAcceptedRaw\": 93861, \"totalSubmissionRaw\": 138160, \"acRate\": \"67.9%\"}",
            "hints": [
                "Do a DP, where dp(i, j) is the answer for the subarray arr[i]..arr[j].",
                "For each possible way to partition the subarray i <= k < j, the answer is max(arr[i]..arr[k]) * max(arr[k+1]..arr[j]) + dp(i, k) + dp(k+1, j)."
            ],
            "rephrased": {
                "body": "Given an array `arr` of positive integers representing the values of the leaves in an in-order traversal of a binary tree, where each internal node has either 0 or 2 children. The value of each internal node is the product of the largest leaf values in its left and right subtrees. Determine the smallest possible sum of the values of each internal node among all possible binary trees.",
                "constraints": [
                    "2 <= arr.length <= 40",
                    "1 <= arr[i] <= 15",
                    "The answer fits into a 32-bit signed integer (i.e., it is less than 2^31)."
                ],
                "testcases": [
                    {
                        "input": "[6,2,4]",
                        "output": "32",
                        "explanation": "There are two possible trees. The first has an internal node sum of 36, and the second has an internal node sum of 32. The minimum is 32."
                    },
                    {
                        "input": "[4,11]",
                        "output": "44",
                        "explanation": "The only possible tree has root value 4 * 11 = 44, so the sum of the internal nodes is 44."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Do a DP, where dp(i, j) is the answer for the subarray arr[i]..arr[j].",
            "For each possible way to partition the subarray i <= k < j, the answer is max(arr[i]..arr[k]) * max(arr[k+1]..arr[j]) + dp(i, k) + dp(k+1, j)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int mctFromLeafValues(vector<int>& arr) {\n    const int n = arr.size();\n    // dp[i][j] := min cost of arr[i..j]\n    vector<vector<int>> dp(n, vector<int>(n));\n    // maxVal[i][j] := max value of arr[i..j]\n    vector<vector<int>> maxVal(n, vector<int>(n));\n\n    for (int i = 0; i < n; ++i)\n      maxVal[i][i] = arr[i];\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        const int j = i + d;\n        maxVal[i][j] = max(maxVal[i][j - 1], maxVal[i + 1][j]);\n      }\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        const int j = i + d;\n        dp[i][j] = INT_MAX;\n        for (int k = i; k < j; ++k)\n          dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] +\n                                       maxVal[i][k] * maxVal[k + 1][j]);\n      }\n\n    return dp[0].back();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int mctFromLeafValues(int[] arr) {\n    final int n = arr.length;\n    // dp[i][j] := min cost of arr[i..j]\n    int[][] dp = new int[n][n];\n    // maxVal[i][j] := max value of arr[i..j]\n    int[][] maxVal = new int[n][n];\n\n    for (int i = 0; i < n; ++i)\n      maxVal[i][i] = arr[i];\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        final int j = i + d;\n        maxVal[i][j] = Math.max(maxVal[i][j - 1], maxVal[i + 1][j]);\n      }\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        final int j = i + d;\n        dp[i][j] = Integer.MAX_VALUE;\n        for (int k = i; k < j; ++k)\n          dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j] + maxVal[i][k] * maxVal[k + 1][j]);\n      }\n\n    return dp[0][n - 1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def mctFromLeafValues(self, arr: List[int]) -> int:\n    n = len(arr)\n    # dp[i][j] := min cost of arr[i..j]\n    dp = [[0] * n for _ in range(n)]\n    # maxVal[i][j] := max value of arr[i..j]\n    maxVal = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n      maxVal[i][i] = arr[i]\n\n    for d in range(1, n):\n      for i in range(n - d):\n        j = i + d\n        maxVal[i][j] = max(maxVal[i][j - 1], maxVal[i + 1][j])\n\n    for d in range(1, n):\n      for i in range(n - d):\n        j = i + d\n        dp[i][j] = math.inf\n        for k in range(i, j):\n          dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] +\n                         maxVal[i][k] * maxVal[k + 1][j])\n\n    return dp[0][-1]\n",
                "lang_text": "py"
            }
        }
    }
}