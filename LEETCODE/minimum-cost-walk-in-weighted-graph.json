{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3108",
            "title": "Minimum Cost Walk in Weighted Graph",
            "titleSlug": "minimum-cost-walk-in-weighted-graph",
            "content": "<p>There is an undirected weighted graph with <code>n</code> vertices labeled from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given the integer <code>n</code> and an array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>]</code> indicates that there is an edge between vertices <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> with a weight of <code>w<sub>i</sub></code>.</p>\n\n<p>A walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It&#39;s important to note that a walk may visit the same edge or vertex more than once.</p>\n\n<p>The <strong>cost</strong> of a walk starting at node <code>u</code> and ending at node <code>v</code> is defined as the bitwise <code>AND</code> of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is <code>w<sub>0</sub>, w<sub>1</sub>, w<sub>2</sub>, ..., w<sub>k</sub></code>, then the cost is calculated as <code>w<sub>0</sub> &amp; w<sub>1</sub> &amp; w<sub>2</sub> &amp; ... &amp; w<sub>k</sub></code>, where <code>&amp;</code> denotes the bitwise <code>AND</code> operator.</p>\n\n<p>You are also given a 2D array <code>query</code>, where <code>query[i] = [s<sub>i</sub>, t<sub>i</sub>]</code>. For each query, you need to find the minimum cost of the walk starting at vertex <code>s<sub>i</sub></code> and ending at vertex <code>t<sub>i</sub></code>. If there exists no such walk, the answer is <code>-1</code>.</p>\n\n<p>Return <em>the array </em><code>answer</code><em>, where </em><code>answer[i]</code><em> denotes the <strong>minimum</strong> cost of a walk for query </em><code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, edges = [[0,1,7],[1,3,7],[1,2,1]], query = [[0,3],[3,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/31/q4_example1-1.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 351px; height: 141px;\" />\n<p>To achieve the cost of 1 in the first query, we need to move on the following edges: <code>0-&gt;1</code> (weight 7), <code>1-&gt;2</code> (weight 1), <code>2-&gt;1</code> (weight 1), <code>1-&gt;3</code> (weight 7).</p>\n\n<p>In the second query, there is no walk between nodes 3 and 4, so the answer is -1.</p>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n</div>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0]</span></p>\n\n<p><strong>Explanation:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/31/q4_example2e.png\" style=\"padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem; width: 211px; height: 181px;\" />\n<p>To achieve the cost of 0 in the first query, we need to move on the following edges: <code>1-&gt;2</code> (weight 1), <code>2-&gt;1</code> (weight 6), <code>1-&gt;2</code> (weight 1).</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li><code>0 &lt;= w<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= query.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>query[i].length == 2</code></li>\n\t<li><code>0 &lt;= s<sub>i</sub>, t<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>s<sub>i</sub> !=&nbsp;t<sub>i</sub></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 167,
            "dislikes": 12,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.9K\", \"totalSubmission\": \"23.6K\", \"totalAcceptedRaw\": 10895, \"totalSubmissionRaw\": 23607, \"acRate\": \"46.2%\"}",
            "hints": [
                "The intended solution uses Disjoint Set Union.",
                "Notice that, if <code>u</code> and <code>v</code> are not connected then the answer is <code>-1</code>, otherwise we can use all the edges from the connected component where both belong to."
            ],
            "rephrased": {
                "body": "Given an undirected weighted graph with 'n' vertices labeled from 0 to n-1. You are given the integer 'n' and an array 'edges', where edges[i] = [u_i, v_i, w_i] indicates an edge between vertices u_i and v_i with weight w_i. A walk on the graph is a sequence of vertices and edges, starting and ending with a vertex. A walk can visit the same edge or vertex multiple times.  The cost of a walk from node 'u' to 'v' is the bitwise AND of the weights of all edges traversed during the walk.  You are given a 2D array 'query', where query[i] = [s_i, t_i]. For each query, find the minimum cost of a walk from vertex s_i to t_i. Return an array 'answer', where answer[i] is the minimum cost for query i. If no such walk exists, the answer is -1.",
                "constraints": [
                    "2 <= n <= 10^5",
                    "0 <= edges.length <= 10^5",
                    "edges[i].length == 3",
                    "0 <= u_i, v_i <= n - 1",
                    "u_i != v_i",
                    "0 <= w_i <= 10^5",
                    "1 <= query.length <= 10^5",
                    "query[i].length == 2",
                    "0 <= s_i, t_i <= n - 1",
                    "s_i != t_i"
                ],
                "testcases": [
                    {
                        "input": "n = 5, edges = [[0,1,7],[1,3,7],[1,2,1]], query = [[0,3],[3,4]]",
                        "output": "[1,-1]",
                        "explanation": "For the first query (0, 3), a walk 0->1 (weight 7), 1->2 (weight 1), 2->1 (weight 1), 1->3 (weight 7) results in a cost of 7 & 1 & 1 & 7 = 1.  For the second query (3, 4), there is no walk between nodes 3 and 4."
                    },
                    {
                        "input": "n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]]",
                        "output": "[0]",
                        "explanation": "For the first query (1, 2), a walk 1->2 (weight 1), 2->1 (weight 6), 1->2 (weight 1) results in a cost of 1 & 6 & 1 = 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The intended solution uses Disjoint Set Union.",
            "Notice that, if <code>u</code> and <code>v</code> are not connected then the answer is <code>-1</code>, otherwise we can use all the edges from the connected component where both belong to."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  // 2^17 - 1 is the minimum number in the form 2^x - 1 > 10^5.\n  UnionFind(int n) : id(n), rank(n), weight(n, (1 << 17) - 1) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v, int w) {\n    const int i = find(u);\n    const int j = find(v);\n    const int newWeight = weight[i] & weight[j] & w;\n    weight[i] = newWeight;\n    weight[j] = newWeight;\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  int getMinCost(int u, int v) {\n    if (u == v)\n      return 0;\n    const int i = find(u);\n    const int j = find(v);\n    return i == j ? weight[i] : -1;\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n  vector<int> weight;\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n};\n\nclass Solution {\n public:\n  vector<int> minimumCost(int n, vector<vector<int>>& edges,\n                          vector<vector<int>>& query) {\n    vector<int> ans;\n    UnionFind uf(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int w = edge[2];\n      uf.unionByRank(u, v, w);\n    }\n\n    for (const vector<int>& q : query) {\n      const int u = q[0];\n      const int v = q[1];\n      ans.push_back(uf.getMinCost(u, v));\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    weight = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n    // 2^17 - 1 is the minimum number in the form 2^x - 1 > 10^5.\n    Arrays.fill(weight, (1 << 17) - 1);\n  }\n\n  public void unionByRank(int u, int v, int w) {\n    final int i = find(u);\n    final int j = find(v);\n    final int newWeight = weight[i] & weight[j] & w;\n    weight[i] = newWeight;\n    weight[j] = newWeight;\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  public int getMinCost(int u, int v) {\n    if (u == v)\n      return 0;\n    final int i = find(u);\n    final int j = find(v);\n    return i == j ? weight[i] : -1;\n  }\n\n  private int[] id;\n  private int[] rank;\n  private int[] weight;\n\n  private int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n}\n\nclass Solution {\n  public int[] minimumCost(int n, int[][] edges, int[][] query) {\n    int[] ans = new int[query.length];\n    UnionFind uf = new UnionFind(n);\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int w = edge[2];\n      uf.unionByRank(u, v, w);\n    }\n\n    for (int i = 0; i < query.length; ++i) {\n      final int u = query[i][0];\n      final int v = query[i][1];\n      ans[i] = uf.getMinCost(u, v);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n    # 2^17 - 1 is the minimum number in the form 2^x - 1 > 10^5.\n    self.weight = [(1 << 17) - 1] * n\n\n  def unionByRank(self, u: int, v: int, w: int) -> None:\n    i = self._find(u)\n    j = self._find(v)\n    newWeight = self.weight[i] & self.weight[j] & w\n    self.weight[i] = newWeight\n    self.weight[j] = newWeight\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def getMinCost(self, u: int, v: int) -> int:\n    if u == v:\n      return 0\n    i = self._find(u)\n    j = self._find(v)\n    return self.weight[i] if i == j else -1\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def minimumCost(self, n: int, edges: List[List[int]], query: List[List[int]]) -> List[int]:\n    uf = UnionFind(n)\n\n    for u, v, w in edges:\n      uf.unionByRank(u, v, w)\n\n    return [uf.getMinCost(u, v) for u, v in query]\n",
                "lang_text": "py"
            }
        }
    }
}