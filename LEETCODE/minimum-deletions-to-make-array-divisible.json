{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2344",
            "title": "Minimum Deletions to Make Array Divisible",
            "titleSlug": "minimum-deletions-to-make-array-divisible",
            "content": "<p>You are given two positive integer arrays <code>nums</code> and <code>numsDivide</code>. You can delete any number of elements from <code>nums</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of deletions such that the <strong>smallest</strong> element in </em><code>nums</code><em> <strong>divides</strong> all the elements of </em><code>numsDivide</code>. If this is not possible, return <code>-1</code>.</p>\n\n<p>Note that an integer <code>x</code> divides <code>y</code> if <code>y % x == 0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThe smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsDivide.\nWe use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3].\nThe smallest element in [3,4,3] is 3, which divides all the elements of numsDivide.\nIt can be shown that 2 is the minimum number of deletions needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,3,6], numsDivide = [8,2,6,10]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> \nWe want the smallest element in nums to divide all the elements of numsDivide.\nThere is no way to delete elements from nums to allow this.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length, numsDivide.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], numsDivide[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 531,
            "dislikes": 124,
            "similarQuestions": "[{\"title\": \"Check If Array Pairs Are Divisible by k\", \"titleSlug\": \"check-if-array-pairs-are-divisible-by-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.9K\", \"totalSubmission\": \"46.1K\", \"totalAcceptedRaw\": 25909, \"totalSubmissionRaw\": 46119, \"acRate\": \"56.2%\"}",
            "hints": [
                "How can we find an integer x that divides all the elements of numsDivide?",
                "Will finding GCD (Greatest Common Divisor) help here?"
            ],
            "rephrased": {
                "body": "Given two positive integer arrays `nums` and `numsDivide`, determine the minimum number of deletions required from `nums` such that the smallest element remaining in `nums` divides all elements in `numsDivide`. If it's impossible to achieve this, return -1.",
                "constraints": [
                    "1 <= nums.length, numsDivide.length <= 10^5",
                    "1 <= nums[i], numsDivide[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]",
                        "output": "2",
                        "explanation": "Initially, the smallest element in `nums` is 2, which doesn't divide all elements in `numsDivide`. By deleting the two occurrences of 2 from `nums`, we get `nums` = [3, 4, 3]. Now, the smallest element is 3, and it divides all elements in `numsDivide`. Therefore, the minimum deletions needed is 2."
                    },
                    {
                        "input": "nums = [4,3,6], numsDivide = [8,2,6,10]",
                        "output": "-1",
                        "explanation": "There is no way to delete elements from `nums` such that the smallest element in the remaining `nums` divides all elements of `numsDivide`."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "check-if-array-pairs-are-divisible-by-k",
                "title": "Check If Array Pairs Are Divisible by k",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How can we find an integer x that divides all the elements of numsDivide?",
            "Will finding GCD (Greatest Common Divisor) help here?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& nums, vector<int>& numsDivide) {\n    const int gcd = getGCD(numsDivide);\n\n    std::ranges::sort(nums);\n\n    for (int i = 0; i < nums.size(); ++i)\n      if (gcd % nums[i] == 0)\n        return i;\n\n    return -1;\n  }\n\n private:\n  int getGCD(const vector<int>& nums) {\n    int gcd = nums[0];\n    for (const int num : nums)\n      gcd = __gcd(gcd, num);\n    return gcd;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int[] nums, int[] numsDivide) {\n    final int gcd = getGCD(numsDivide);\n\n    Arrays.sort(nums);\n\n    for (int i = 0; i < nums.length; ++i)\n      if (gcd % nums[i] == 0)\n        return i;\n\n    return -1;\n  }\n\n  private int getGCD(int[] nums) {\n    int g = nums[0];\n    for (final int num : nums)\n      g = gcd(g, num);\n    return g;\n  }\n\n  int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:\n    gcd = functools.reduce(math.gcd, numsDivide)\n\n    for i, num in enumerate(sorted(nums)):\n      if gcd % num == 0:\n        return i\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}