{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3085",
            "title": "Minimum Deletions to Make String K-Special",
            "titleSlug": "minimum-deletions-to-make-string-k-special",
            "content": "<p>You are given a string <code>word</code> and an integer <code>k</code>.</p>\n\n<p>We consider <code>word</code> to be <strong>k-special</strong> if <code>|freq(word[i]) - freq(word[j])| &lt;= k</code> for all indices <code>i</code> and <code>j</code> in the string.</p>\n\n<p>Here, <code>freq(x)</code> denotes the <span data-keyword=\"frequency-letter\">frequency</span> of the character <code>x</code> in <code>word</code>, and <code>|y|</code> denotes the absolute value of <code>y</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of characters you need to delete to make</em> <code>word</code> <strong><em>k-special</em></strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">word = &quot;aabcaba&quot;, k = 0</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">3</span></p>\n\n<p><strong>Explanation:</strong> We can make <code>word</code> <code>0</code>-special by deleting <code>2</code> occurrences of <code>&quot;a&quot;</code> and <code>1</code> occurrence of <code>&quot;c&quot;</code>. Therefore, <code>word</code> becomes equal to <code>&quot;baba&quot;</code> where <code>freq(&#39;a&#39;) == freq(&#39;b&#39;) == 2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">word = &quot;dabdcbdcdcd&quot;, k = 2</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">2</span></p>\n\n<p><strong>Explanation:</strong> We can make <code>word</code> <code>2</code>-special by deleting <code>1</code> occurrence of <code>&quot;a&quot;</code> and <code>1</code> occurrence of <code>&quot;d&quot;</code>. Therefore, <code>word</code> becomes equal to &quot;bdcbdcdcd&quot; where <code>freq(&#39;b&#39;) == 2</code>, <code>freq(&#39;c&#39;) == 3</code>, and <code>freq(&#39;d&#39;) == 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">word = &quot;aaabaaa&quot;, k = 2</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">1</span></p>\n\n<p><strong>Explanation:</strong> We can make <code>word</code> <code>2</code>-special by deleting <code>1</code> occurrence of <code>&quot;b&quot;</code>. Therefore, <code>word</code> becomes equal to <code>&quot;aaaaaa&quot;</code> where each letter&#39;s frequency is now uniformly <code>6</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 182,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Minimum Deletions to Make Character Frequencies Unique\", \"titleSlug\": \"minimum-deletions-to-make-character-frequencies-unique\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.6K\", \"totalSubmission\": \"42K\", \"totalAcceptedRaw\": 18613, \"totalSubmissionRaw\": 41987, \"acRate\": \"44.3%\"}",
            "hints": [
                "Count the frequency of each letter.",
                "Suppose we select several characters as the final answer, and let <code>x</code> be the character with the smallest frequency in the answer. It can be shown that out of the selected characters, the optimal solution will never delete an occurrence of character <code>x</code> to obtain the answer.",
                "We will fix a character <code>c</code> and assume that it will be the character with the smallest frequency in the answer. Suppose its frequency is <code>x</code>.",
                "Then, for every other character, we will count the number of occurrences that will be deleted. Suppose that the current character has <code>y</code> occurrences. <ol> <li>If y < x, we need to delete all of them.</li> <li> if y > x + k, we should delete y - x - k of such character.</li> <li> Otherwise we don\u2019t need to delete it.</li></ol>"
            ],
            "rephrased": {
                "body": "Given a string `word` and an integer `k`, determine the minimum number of characters that must be deleted from `word` to make it k-special. A string is considered k-special if the absolute difference between the frequencies of any two characters in the string is less than or equal to k.",
                "constraints": [
                    "1 <= word.length <= 10^5",
                    "0 <= k <= 10^5",
                    "word consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word = \"aabcaba\", k = 0",
                        "output": "3",
                        "explanation": "To make the word 0-special, we can delete two 'a's and one 'c', resulting in \"baba\" where freq('a') == freq('b') == 2."
                    },
                    {
                        "input": "word = \"dabdcbdcdcd\", k = 2",
                        "output": "2",
                        "explanation": "To make the word 2-special, we can delete one 'a' and one 'd', resulting in \"bdcbdcdcd\" where freq('b') == 2, freq('c') == 3, and freq('d') == 4."
                    },
                    {
                        "input": "word = \"aaabaaa\", k = 2",
                        "output": "1",
                        "explanation": "To make the word 2-special, we can delete the single 'b', resulting in \"aaaaaa\" where freq('a') == 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-deletions-to-make-character-frequencies-unique",
                "title": "Minimum Deletions to Make Character Frequencies Unique",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Count the frequency of each letter.",
            "Suppose we select several characters as the final answer, and let <code>x</code> be the character with the smallest frequency in the answer. It can be shown that out of the selected characters, the optimal solution will never delete an occurrence of character <code>x</code> to obtain the answer.",
            "We will fix a character <code>c</code> and assume that it will be the character with the smallest frequency in the answer. Suppose its frequency is <code>x</code>.",
            "Then, for every other character, we will count the number of occurrences that will be deleted. Suppose that the current character has <code>y</code> occurrences. <ol> <li>If y < x, we need to delete all of them.</li> <li> if y > x + k, we should delete y - x - k of such character.</li> <li> Otherwise we don\u2019t need to delete it.</li></ol>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumDeletions(string word, int k) {\n    int ans = INT_MAX;\n    vector<int> count(26);\n\n    for (const char c : word)\n      ++count[c - 'a'];\n\n    for (const int minFreq : count) {\n      int deletions = 0;\n      for (const int freq : count)\n        if (freq < minFreq)  // Delete all the letters with smaller frequency.\n          deletions += freq;\n        else  // Delete letters with exceeding frequency.\n          deletions += max(0, freq - (minFreq + k));\n      ans = min(ans, deletions);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumDeletions(String word, int k) {\n    int ans = Integer.MAX_VALUE;\n    int count[] = new int[26];\n\n    for (final char c : word.toCharArray())\n      ++count[c - 'a'];\n\n    for (final int minFreq : count) {\n      int deletions = 0;\n      for (final int freq : count)\n        if (freq < minFreq) // Delete all the letters with smaller frequency.\n          deletions += freq;\n        else // Delete letters with exceeding frequency.\n          deletions += Math.max(0, freq - (minFreq + k));\n      ans = Math.min(ans, deletions);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumDeletions(self, word: str, k: int) -> int:\n    ans = math.inf\n    count = collections.Counter(word)\n\n    for minFreq in count.values():\n      deletions = 0\n      for freq in count.values():\n        if freq < minFreq:\n          deletions += freq\n        else:\n          deletions += max(0, freq - (minFreq + k))\n      ans = min(ans, deletions)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}