{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2163",
            "title": "Minimum Difference in Sums After Removal of Elements",
            "titleSlug": "minimum-difference-in-sums-after-removal-of-elements",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> consisting of <code>3 * n</code> elements.</p>\n\n<p>You are allowed to remove any <strong>subsequence</strong> of elements of size <strong>exactly</strong> <code>n</code> from <code>nums</code>. The remaining <code>2 * n</code> elements will be divided into two <strong>equal</strong> parts:</p>\n\n<ul>\n\t<li>The first <code>n</code> elements belonging to the first part and their sum is <code>sum<sub>first</sub></code>.</li>\n\t<li>The next <code>n</code> elements belonging to the second part and their sum is <code>sum<sub>second</sub></code>.</li>\n</ul>\n\n<p>The <strong>difference in sums</strong> of the two parts is denoted as <code>sum<sub>first</sub> - sum<sub>second</sub></code>.</p>\n\n<ul>\n\t<li>For example, if <code>sum<sub>first</sub> = 3</code> and <code>sum<sub>second</sub> = 2</code>, their difference is <code>1</code>.</li>\n\t<li>Similarly, if <code>sum<sub>first</sub> = 2</code> and <code>sum<sub>second</sub> = 3</code>, their difference is <code>-1</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum difference</strong> possible between the sums of the two parts after the removal of </em><code>n</code><em> elements</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,2]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> Here, nums has 3 elements, so n = 1. \nThus we have to remove 1 element from nums and divide the array into two equal parts.\n- If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1.\n- If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1.\n- If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2.\nThe minimum difference between sums of the two parts is min(-1,1,2) = -1. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,9,5,8,1,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.\nIf we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12.\nTo obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1.\nIt can be shown that it is not possible to obtain a difference smaller than 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length == 3 * n</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 639,
            "dislikes": 14,
            "similarQuestions": "[{\"title\": \"Product of Array Except Self\", \"titleSlug\": \"product-of-array-except-self\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Subsequence of Length K With the Largest Sum\", \"titleSlug\": \"find-subsequence-of-length-k-with-the-largest-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.9K\", \"totalSubmission\": \"18.8K\", \"totalAcceptedRaw\": 8930, \"totalSubmissionRaw\": 18757, \"acRate\": \"47.6%\"}",
            "hints": [
                "The lowest possible difference can be obtained when the sum of the first n elements in the resultant array is minimum, and the sum of the next n elements is maximum.",
                "For every index i, think about how you can find the minimum possible sum of n elements with indices lesser or equal to i, if possible.",
                "Similarly, for every index i, try to find the maximum possible sum of n elements with indices greater or equal to i, if possible.",
                "Now for all indices, check if we can consider it as the partitioning index and hence find the answer."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` consisting of `3 * n` elements, you are allowed to remove any subsequence of elements of size exactly `n` from `nums`. The remaining `2 * n` elements will be divided into two equal parts: the first `n` elements (sum `sum_first`) and the next `n` elements (sum `sum_second`).  Return the minimum possible difference `sum_first - sum_second` after removing `n` elements.",
                "constraints": [
                    "nums.length == 3 * n",
                    "1 <= n <= 10^5",
                    "1 <= nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[3,1,2]",
                        "output": "-1",
                        "explanation": "Here, nums has 3 elements, so n = 1. We must remove 1 element from nums and divide the array into two equal parts.\n- Removing nums[0] = 3 yields [1,2]. The difference is 1 - 2 = -1.\n- Removing nums[1] = 1 yields [3,2]. The difference is 3 - 2 = 1.\n- Removing nums[2] = 2 yields [3,1]. The difference is 3 - 1 = 2.\nThe minimum difference is min(-1,1,2) = -1."
                    },
                    {
                        "input": "[7,9,5,8,1,3]",
                        "output": "1",
                        "explanation": "Here n = 2. We must remove 2 elements and divide the remaining array into two parts containing two elements each.\nRemoving nums[2] = 5 and nums[3] = 8 yields [7,9,1,3]. The difference is (7+9) - (1+3) = 12.\nRemoving nums[1] = 9 and nums[4] = 1 yields [7,5,8,3]. The difference is (7+5) - (8+3) = 1.\nIt can be shown that it is not possible to obtain a difference smaller than 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "product-of-array-except-self",
                "title": "Product of Array Except Self",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-subsequence-of-length-k-with-the-largest-sum",
                "title": "Find Subsequence of Length K With the Largest Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The lowest possible difference can be obtained when the sum of the first n elements in the resultant array is minimum, and the sum of the next n elements is maximum.",
            "For every index i, think about how you can find the minimum possible sum of n elements with indices lesser or equal to i, if possible.",
            "Similarly, for every index i, try to find the maximum possible sum of n elements with indices greater or equal to i, if possible.",
            "Now for all indices, check if we can consider it as the partitioning index and hence find the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumDifference(vector<int>& nums) {\n    const int n = nums.size() / 3;\n    long long ans = LLONG_MAX;\n    long long leftSum = 0;\n    long long rightSum = 0;\n    // Left part as small as possible\n    priority_queue<int> maxHeap;\n    // Right part as big as possible\n    priority_queue<int, vector<int>, greater<>> minHeap;\n    // minLeftSum[i] := min sum of n nums in nums[:i]\n    vector<long long> minLeftSum(nums.size());\n\n    for (int i = 0; i < 2 * n; ++i) {\n      maxHeap.push(nums[i]);\n      leftSum += nums[i];\n      if (maxHeap.size() == n + 1)\n        leftSum -= maxHeap.top(), maxHeap.pop();\n      if (maxHeap.size() == n)\n        minLeftSum[i] = leftSum;\n    }\n\n    for (int i = nums.size() - 1; i >= n; --i) {\n      minHeap.push(nums[i]);\n      rightSum += nums[i];\n      if (minHeap.size() == n + 1)\n        rightSum -= minHeap.top(), minHeap.pop();\n      if (minHeap.size() == n)\n        ans = min(ans, minLeftSum[i - 1] - rightSum);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minimumDifference(int[] nums) {\n    final int n = nums.length / 3;\n    long ans = Long.MAX_VALUE;\n    long leftSum = 0;\n    long rightSum = 0;\n    // Left part as small as possible\n    Queue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n    // Right part as big as possible\n    Queue<Integer> minHeap = new PriorityQueue<>();\n    // minLeftSum[i] := min sum of n nums in nums[:i]\n    long[] minLeftSum = new long[nums.length];\n\n    for (int i = 0; i < 2 * n; ++i) {\n      maxHeap.offer(nums[i]);\n      leftSum += nums[i];\n      if (maxHeap.size() == n + 1)\n        leftSum -= maxHeap.poll();\n      if (maxHeap.size() == n)\n        minLeftSum[i] = leftSum;\n    }\n\n    for (int i = nums.length - 1; i >= n; --i) {\n      minHeap.offer(nums[i]);\n      rightSum += nums[i];\n      if (minHeap.size() == n + 1)\n        rightSum -= minHeap.poll();\n      if (minHeap.size() == n)\n        ans = Math.min(ans, minLeftSum[i - 1] - rightSum);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumDifference(self, nums: List[int]) -> int:\n    n = len(nums) // 3\n    ans = math.inf\n    leftSum = 0\n    rightSum = 0\n    maxHeap = []  # Left part, as small as possible\n    minHeap = []  # Right part, as big as possible\n    # minLeftSum[i] := min sum of n nums in nums[:i]\n    minLeftSum = [0] * len(nums)\n\n    for i in range(2 * n):\n      heapq.heappush(maxHeap, -nums[i])\n      leftSum += nums[i]\n      if len(maxHeap) == n + 1:\n        leftSum += heapq.heappop(maxHeap)\n      if len(maxHeap) == n:\n        minLeftSum[i] = leftSum\n\n    for i in range(len(nums) - 1, n - 1, -1):\n      heapq.heappush(minHeap, nums[i])\n      rightSum += nums[i]\n      if len(minHeap) == n + 1:\n        rightSum -= heapq.heappop(minHeap)\n      if len(minHeap) == n:\n        ans = min(ans, minLeftSum[i - 1] - rightSum)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}