{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1335",
            "title": "Minimum Difficulty of a Job Schedule",
            "titleSlug": "minimum-difficulty-of-a-job-schedule",
            "content": "<p>You want to schedule a list of jobs in <code>d</code> days. Jobs are dependent (i.e To work on the <code>i<sup>th</sup></code> job, you have to finish all the jobs <code>j</code> where <code>0 &lt;= j &lt; i</code>).</p>\n\n<p>You have to finish <strong>at least</strong> one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the <code>d</code> days. The difficulty of a day is the maximum difficulty of a job done on that day.</p>\n\n<p>You are given an integer array <code>jobDifficulty</code> and an integer <code>d</code>. The difficulty of the <code>i<sup>th</sup></code> job is <code>jobDifficulty[i]</code>.</p>\n\n<p>Return <em>the minimum difficulty of a job schedule</em>. If you cannot find a schedule for the jobs return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/16/untitled.png\" style=\"width: 365px; height: 370px;\" />\n<pre>\n<strong>Input:</strong> jobDifficulty = [6,5,4,3,2,1], d = 2\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7 \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> jobDifficulty = [9,9,9], d = 4\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> jobDifficulty = [1,1,1], d = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The schedule is one job per day. total difficulty will be 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= jobDifficulty.length &lt;= 300</code></li>\n\t<li><code>0 &lt;= jobDifficulty[i] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= d &lt;= 10</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3325,
            "dislikes": 311,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"184.7K\", \"totalSubmission\": \"309.4K\", \"totalAcceptedRaw\": 184690, \"totalSubmissionRaw\": 309351, \"acRate\": \"59.7%\"}",
            "hints": [
                "Use DP. Try to cut the array into d non-empty sub-arrays. Try all possible cuts for the array.",
                "Use dp[i][j] where DP states are i the index of the last cut and j the number of remaining cuts. Complexity is O(n * n * d)."
            ],
            "rephrased": {
                "body": "Given a list of jobs with varying difficulties, schedule them over 'd' days. The jobs are dependent, meaning job 'i' can only be started after all jobs 'j' (0 <= j < i) are completed.  Each day, at least one job must be performed. The difficulty of a schedule is the sum of the maximum job difficulty for each day.  You are provided with an integer array 'jobDifficulty' where 'jobDifficulty[i]' represents the difficulty of the i-th job, and an integer 'd' representing the number of days available.\n\nDetermine the minimum difficulty of a valid job schedule. If a schedule is impossible, return -1.",
                "constraints": [
                    "1 <= jobDifficulty.length <= 300",
                    "0 <= jobDifficulty[i] <= 1000",
                    "1 <= d <= 10"
                ],
                "testcases": [
                    {
                        "input": "jobDifficulty = [6,5,4,3,2,1], d = 2",
                        "output": "7",
                        "explanation": "Schedule the first 5 jobs on day 1 (difficulty = 6) and the last job on day 2 (difficulty = 1). Total difficulty: 6 + 1 = 7"
                    },
                    {
                        "input": "jobDifficulty = [9,9,9], d = 4",
                        "output": "-1",
                        "explanation": "It's impossible to schedule the jobs with the given constraints because the number of days 'd' is greater than the number of jobs. You cannot complete at least one job each day."
                    },
                    {
                        "input": "jobDifficulty = [1,1,1], d = 3",
                        "output": "3",
                        "explanation": "Schedule one job per day. The total difficulty is 1 + 1 + 1 = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use DP. Try to cut the array into d non-empty sub-arrays. Try all possible cuts for the array.",
            "Use dp[i][j] where DP states are i the index of the last cut and j the number of remaining cuts. Complexity is O(n * n * d)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minDifficulty(vector<int>& jobDifficulty, int d) {\n    const int n = jobDifficulty.size();\n    if (n < d)\n      return -1;\n\n    // dp[i][k] := min difficulty to schedule the first i jobs in k days\n    vector<vector<int>> dp(n + 1, vector<int>(d + 1, INT_MAX / 2));\n    dp[0][0] = 0;\n\n    for (int i = 1; i <= n; ++i)\n      for (int k = 1; k <= d; ++k) {\n        int maxDifficulty = 0;                  // Max(job[j + 1..i])\n        for (int j = i - 1; j >= k - 1; --j) {  // 1-based\n          maxDifficulty = max(maxDifficulty, jobDifficulty[j]);  // 0-based\n          dp[i][k] = min(dp[i][k], dp[j][k - 1] + maxDifficulty);\n        }\n      }\n\n    return dp[n][d];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minDifficulty(int[] jobDifficulty, int d) {\n    final int n = jobDifficulty.length;\n    if (n < d)\n      return -1;\n\n    // dp[i][k] := min difficulty to schedule the first i jobs in k days\n    int[][] dp = new int[n + 1][d + 1];\n    Arrays.stream(dp).forEach(row -> Arrays.fill(row, Integer.MAX_VALUE / 2));\n    dp[0][0] = 0;\n\n    for (int i = 1; i <= n; ++i)\n      for (int k = 1; k <= d; ++k) {\n        int maxDifficulty = 0;                                       // Max(job[j + 1..i])\n        for (int j = i - 1; j >= k - 1; --j) {                       // 1-based\n          maxDifficulty = Math.max(maxDifficulty, jobDifficulty[j]); // 0-based\n          dp[i][k] = Math.min(dp[i][k], dp[j][k - 1] + maxDifficulty);\n        }\n      }\n\n    return dp[n][d];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:\n    n = len(jobDifficulty)\n    if d > n:\n      return -1\n\n    # dp[i][k] := min difficulty to schedule the first i jobs in k days\n    dp = [[math.inf] * (d + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n      for k in range(1, d + 1):\n        maxDifficulty = 0  # Max(job[j + 1..i])\n        for j in range(i - 1, k - 2, -1):  # 1-based\n          # 0-based\n          maxDifficulty = max(maxDifficulty, jobDifficulty[j])\n          dp[i][k] = min(dp[i][k], dp[j][k - 1] + maxDifficulty)\n\n    return dp[n][d]\n",
                "lang_text": "py"
            }
        }
    }
}