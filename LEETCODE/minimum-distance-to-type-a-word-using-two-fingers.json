{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1320",
            "title": "Minimum Distance to Type a Word Using Two Fingers",
            "titleSlug": "minimum-distance-to-type-a-word-using-two-fingers",
            "content": "<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/02/leetcode_keyboard.png\" style=\"width: 349px; height: 209px;\" />\n<p>You have a keyboard layout as shown above in the <strong>X-Y</strong> plane, where each English uppercase letter is located at some coordinate.</p>\n\n<ul>\n\t<li>For example, the letter <code>&#39;A&#39;</code> is located at coordinate <code>(0, 0)</code>, the letter <code>&#39;B&#39;</code> is located at coordinate <code>(0, 1)</code>, the letter <code>&#39;P&#39;</code> is located at coordinate <code>(2, 3)</code> and the letter <code>&#39;Z&#39;</code> is located at coordinate <code>(4, 1)</code>.</li>\n</ul>\n\n<p>Given the string <code>word</code>, return <em>the minimum total <strong>distance</strong> to type such string using only two fingers</em>.</p>\n\n<p>The <strong>distance</strong> between coordinates <code>(x<sub>1</sub>, y<sub>1</sub>)</code> and <code>(x<sub>2</sub>, y<sub>2</sub>)</code> is <code>|x<sub>1</sub> - x<sub>2</sub>| + |y<sub>1</sub> - y<sub>2</sub>|</code>.</p>\n\n<p><strong>Note</strong> that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;CAKE&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Using two fingers, one optimal way to type &quot;CAKE&quot; is: \nFinger 1 on letter &#39;C&#39; -&gt; cost = 0 \nFinger 1 on letter &#39;A&#39; -&gt; cost = Distance from letter &#39;C&#39; to letter &#39;A&#39; = 2 \nFinger 2 on letter &#39;K&#39; -&gt; cost = 0 \nFinger 2 on letter &#39;E&#39; -&gt; cost = Distance from letter &#39;K&#39; to letter &#39;E&#39; = 1 \nTotal distance = 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;HAPPY&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Using two fingers, one optimal way to type &quot;HAPPY&quot; is:\nFinger 1 on letter &#39;H&#39; -&gt; cost = 0\nFinger 1 on letter &#39;A&#39; -&gt; cost = Distance from letter &#39;H&#39; to letter &#39;A&#39; = 2\nFinger 2 on letter &#39;P&#39; -&gt; cost = 0\nFinger 2 on letter &#39;P&#39; -&gt; cost = Distance from letter &#39;P&#39; to letter &#39;P&#39; = 0\nFinger 1 on letter &#39;Y&#39; -&gt; cost = Distance from letter &#39;A&#39; to letter &#39;Y&#39; = 4\nTotal distance = 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= word.length &lt;= 300</code></li>\n\t<li><code>word</code> consists of uppercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 974,
            "dislikes": 35,
            "similarQuestions": "[{\"title\": \"Minimum Time to Type Word Using Special Typewriter\", \"titleSlug\": \"minimum-time-to-type-word-using-special-typewriter\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"30.1K\", \"totalSubmission\": \"50.9K\", \"totalAcceptedRaw\": 30106, \"totalSubmissionRaw\": 50852, \"acRate\": \"59.2%\"}",
            "hints": [
                "Use dynamic programming.",
                "dp[i][j][k]: smallest movements when you have one finger on i-th char and the other one on j-th char already having written k first characters from word."
            ],
            "rephrased": {
                "body": "Given a keyboard layout in the X-Y plane where each uppercase English letter has a coordinate (see image), find the minimum total distance to type a given string `word` using only two fingers. The distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|. The initial positions of your fingers are free and do not contribute to the total distance.",
                "constraints": [
                    "2 <= word.length <= 300",
                    "word consists of uppercase English letters."
                ],
                "testcases": [
                    {
                        "input": "CAKE",
                        "output": 3,
                        "explanation": "One optimal way to type \"CAKE\" is: Finger 1 on letter 'C' (cost = 0), Finger 1 on letter 'A' (cost = distance from 'C' to 'A' = 2), Finger 2 on letter 'K' (cost = 0), Finger 2 on letter 'E' (cost = distance from 'K' to 'E' = 1). Total distance = 3."
                    },
                    {
                        "input": "HAPPY",
                        "output": 6,
                        "explanation": "One optimal way to type \"HAPPY\" is: Finger 1 on letter 'H' (cost = 0), Finger 1 on letter 'A' (cost = distance from 'H' to 'A' = 2), Finger 2 on letter 'P' (cost = 0), Finger 2 on letter 'P' (cost = distance from 'P' to 'P' = 0), Finger 1 on letter 'Y' (cost = distance from 'A' to 'Y' = 4). Total distance = 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "minimum-time-to-type-word-using-special-typewriter",
                "title": "Minimum Time to Type Word Using Special Typewriter",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use dynamic programming.",
            "dp[i][j][k]: smallest movements when you have one finger on i-th char and the other one on j-th char already having written k first characters from word."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumDistance(string word) {\n    // dp[i][j][k] := min distance with left finger on i-th char and right\n    // Finger on j-th char that already have written k first words\n    dp.resize(27, vector<vector<int>>(27, vector<int>(word.length(), -1)));\n    return minimumDistance(word, 26, 26, 0);\n  }\n\n private:\n  vector<vector<vector<int>>> dp;\n\n  int minimumDistance(const string& word, int i, int j, int k) {\n    if (k == word.length())\n      return 0;\n    if (dp[i][j][k] != -1)\n      return dp[i][j][k];\n    const int next = word[k] - 'A';\n    const int moveLeft = dist(i, next) + minimumDistance(word, next, j, k + 1);\n    const int moveRight = dist(j, next) + minimumDistance(word, i, next, k + 1);\n    return dp[i][j][k] = min(moveLeft, moveRight);\n  }\n\n  int dist(int a, int b) {\n    if (a == 26)  // First hovering state\n      return 0;\n    const int x1 = a / 6;\n    const int y1 = a % 6;\n    const int x2 = b / 6;\n    const int y2 = b % 6;\n    return abs(x1 - x2) + abs(y1 - y2);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumDistance(String word) {\n    // dp[i][j][k] := min distance with left finger on i-th char and right\n    // Finger on j-th char that already have written k first words\n    dp = new Integer[27][27][word.length()];\n    return minimumDistance(word, 26, 26, 0);\n  }\n\n  private Integer[][][] dp;\n\n  private int minimumDistance(final String word, int i, int j, int k) {\n    if (k == word.length())\n      return 0;\n    if (dp[i][j][k] != null)\n      return dp[i][j][k];\n    final int next = word.charAt(k) - 'A';\n    final int moveLeft = dist(i, next) + minimumDistance(word, next, j, k + 1);\n    final int moveRight = dist(j, next) + minimumDistance(word, i, next, k + 1);\n    return dp[i][j][k] = Math.min(moveLeft, moveRight);\n  }\n\n  private int dist(int a, int b) {\n    if (a == 26) // First hovering state\n      return 0;\n    final int x1 = a / 6;\n    final int y1 = a % 6;\n    final int x2 = b / 6;\n    final int y2 = b % 6;\n    return Math.abs(x1 - x2) + Math.abs(y1 - y2);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumDistance(self, word: str) -> int:\n    def dist(a: int, b: int) -> int:\n      if a == 26:  # First hovering state\n        return 0\n      x1, y1 = a // 6, a % 6\n      x2, y2 = b // 6, b % 6\n      return abs(x1 - x2) + abs(y1 - y2)\n\n    # dp(i, j, k) := min distance with left finger on i-th char and right finger on j-th char\n    # That already have written k first words\n    @functools.lru_cache(None)\n    def dp(i: int, j: int, k: int) -> int:\n      if k == len(word):\n        return 0\n      nxt = ord(word[k]) - ord('A')\n      moveLeft = dist(i, nxt) + dp(nxt, j, k + 1)\n      moveRight = dist(j, nxt) + dp(i, nxt, k + 1)\n      return min(moveLeft, moveRight)\n\n    return dp(26, 26, 0)\n",
                "lang_text": "py"
            }
        }
    }
}