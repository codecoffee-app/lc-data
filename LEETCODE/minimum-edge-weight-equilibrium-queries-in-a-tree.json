{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2846",
            "title": "Minimum Edge Weight Equilibrium Queries in a Tree",
            "titleSlug": "minimum-edge-weight-equilibrium-queries-in-a-tree",
            "content": "<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> with weight <code>w<sub>i</sub></code> in the tree.</p>\n\n<p>You are also given a 2D integer array <code>queries</code> of length <code>m</code>, where <code>queries[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>. For each query, find the <strong>minimum number of operations</strong> required to make the weight of every edge on the path from <code>a<sub>i</sub></code> to <code>b<sub>i</sub></code> equal. In one operation, you can choose any edge of the tree and change its weight to any value.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>Queries are <strong>independent</strong> of each other, meaning that the tree returns to its <strong>initial state</strong> on each new query.</li>\n\t<li>The path from <code>a<sub>i</sub></code> to <code>b<sub>i</sub></code> is a sequence of <strong>distinct</strong> nodes starting with node <code>a<sub>i</sub></code> and ending with node <code>b<sub>i</sub></code> such that every two adjacent nodes in the sequence share an edge in the tree.</li>\n</ul>\n\n<p>Return <em>an array </em><code>answer</code><em> of length </em><code>m</code><em> where</em> <code>answer[i]</code> <em>is the answer to the</em> <code>i<sup>th</sup></code> <em>query.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/11/graph-6-1.png\" style=\"width: 339px; height: 344px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2]], queries = [[0,3],[3,6],[2,6],[0,6]]\n<strong>Output:</strong> [0,0,1,3]\n<strong>Explanation:</strong> In the first query, all the edges in the path from 0 to 3 have a weight of 1. Hence, the answer is 0.\nIn the second query, all the edges in the path from 3 to 6 have a weight of 2. Hence, the answer is 0.\nIn the third query, we change the weight of edge [2,3] to 2. After this operation, all the edges in the path from 2 to 6 have a weight of 2. Hence, the answer is 1.\nIn the fourth query, we change the weights of edges [0,1], [1,2] and [2,3] to 2. After these operations, all the edges in the path from 0 to 6 have a weight of 2. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from a<sub>i</sub> to b<sub>i</sub>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/11/graph-9-1.png\" style=\"width: 472px; height: 370px;\" />\n<pre>\n<strong>Input:</strong> n = 8, edges = [[1,2,6],[1,3,4],[2,4,6],[2,5,3],[3,6,6],[3,0,8],[7,0,2]], queries = [[4,6],[0,4],[6,5],[7,4]]\n<strong>Output:</strong> [1,2,2,3]\n<strong>Explanation:</strong> In the first query, we change the weight of edge [1,3] to 6. After this operation, all the edges in the path from 4 to 6 have a weight of 6. Hence, the answer is 1.\nIn the second query, we change the weight of edges [0,3] and [3,1] to 6. After these operations, all the edges in the path from 0 to 4 have a weight of 6. Hence, the answer is 2.\nIn the third query, we change the weight of edges [1,3] and [5,2] to 6. After these operations, all the edges in the path from 6 to 5 have a weight of 6. Hence, the answer is 2.\nIn the fourth query, we change the weights of edges [0,7], [0,3] and [1,3] to 6. After these operations, all the edges in the path from 7 to 4 have a weight of 6. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from a<sub>i</sub> to b<sub>i</sub>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; n</code></li>\n\t<li><code>1 &lt;= w<sub>i</sub> &lt;= 26</code></li>\n\t<li>The input is generated such that <code>edges</code> represents a valid tree.</li>\n\t<li><code>1 &lt;= queries.length == m &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 288,
            "dislikes": 7,
            "similarQuestions": "[{\"title\": \"Kth Ancestor of a Tree Node\", \"titleSlug\": \"kth-ancestor-of-a-tree-node\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Strongly Connected Component",
                    "slug": "strongly-connected-component"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.6K\", \"totalSubmission\": \"12.7K\", \"totalAcceptedRaw\": 5613, \"totalSubmissionRaw\": 12744, \"acRate\": \"44.0%\"}",
            "hints": [
                "Root the tree at any node.",
                "Define a 2D array <code>freq[node][weight]</code> which saves the frequency of each edge <code>weight</code> on the path from the root to each <code>node</code>.",
                "The frequency of edge weight <code>w</code> on the path from <code>a</code> to <code>b</code> is equal to <code>freq[a][w] + freq[b][w] - freq[lca(a,b)][w] * 2</code>, where <code>lca(a,b)</code> is the lowest common ancestor of <code>a</code> and <code>b</code> in the tree.",
                "<code>lca(a,b)</code> can be calculated using binary lifting algorithm or Tarjan algorithm."
            ],
            "rephrased": {
                "body": "Given an undirected tree with `n` nodes labeled from 0 to `n - 1`, and a 2D array `edges` where `edges[i] = [u_i, v_i, w_i]` represents an edge between nodes `u_i` and `v_i` with weight `w_i`.  You are also given a 2D array `queries` where `queries[i] = [a_i, b_i]`. For each query, determine the minimum number of operations needed to make the weight of every edge on the path from `a_i` to `b_i` equal. An operation involves changing the weight of any edge to any value.  Note that queries are independent, and the tree returns to its initial state for each query. Return an array `answer` where `answer[i]` is the answer to the i-th query.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "edges.length == n - 1",
                    "edges[i].length == 3",
                    "0 <= u_i, v_i < n",
                    "1 <= w_i <= 26",
                    "The input is generated such that edges represents a valid tree.",
                    "1 <= queries.length == m <= 2 * 10^4",
                    "queries[i].length == 2",
                    "0 <= a_i, b_i < n"
                ],
                "testcases": [
                    {
                        "input": "n = 7, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2]], queries = [[0,3],[3,6],[2,6],[0,6]]",
                        "output": "[0,0,1,3]",
                        "explanation": "Query [0,3]: All edges on the path from 0 to 3 have weight 1, so 0 operations are needed.\nQuery [3,6]: All edges on the path from 3 to 6 have weight 2, so 0 operations are needed.\nQuery [2,6]: Changing the weight of edge [2,3] to 2 equalizes the path from 2 to 6, requiring 1 operation.\nQuery [0,6]: Changing the weights of edges [0,1], [1,2], and [2,3] to 2 equalizes the path from 0 to 6, requiring 3 operations."
                    },
                    {
                        "input": "n = 8, edges = [[1,2,6],[1,3,4],[2,4,6],[2,5,3],[3,6,6],[3,0,8],[7,0,2]], queries = [[4,6],[0,4],[6,5],[7,4]]",
                        "output": "[1,2,2,3]",
                        "explanation": "Query [4,6]: Changing the weight of edge [1,3] to 6 equalizes the path from 4 to 6, requiring 1 operation.\nQuery [0,4]: Changing the weight of edges [0,3] and [3,1] to 6 equalizes the path from 0 to 4, requiring 2 operations.\nQuery [6,5]: Changing the weight of edges [1,3] and [5,2] to 6 equalizes the path from 6 to 5, requiring 2 operations.\nQuery [7,4]: Changing the weights of edges [0,7], [0,3], and [1,3] to 6 equalizes the path from 7 to 4, requiring 3 operations."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "kth-ancestor-of-a-tree-node",
                "title": "Kth Ancestor of a Tree Node",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Root the tree at any node.",
            "Define a 2D array <code>freq[node][weight]</code> which saves the frequency of each edge <code>weight</code> on the path from the root to each <code>node</code>.",
            "The frequency of edge weight <code>w</code> on the path from <code>a</code> to <code>b</code> is equal to <code>freq[a][w] + freq[b][w] - freq[lca(a,b)][w] * 2</code>, where <code>lca(a,b)</code> is the lowest common ancestor of <code>a</code> and <code>b</code> in the tree.",
            "<code>lca(a,b)</code> can be calculated using binary lifting algorithm or Tarjan algorithm."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Strongly Connected Component",
                "slug": "strongly-connected-component"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> minOperationsQueries(int n, vector<vector<int>>& edges,\n                                   vector<vector<int>>& queries) {\n    constexpr int kMax = 26;\n    const int m = log2(n) + 1;\n    vector<int> ans;\n    vector<vector<pair<int, int>>> graph(n);\n    // jump[i][j] := node you reach after jumping 2^j from i\n    vector<vector<int>> jump(n, vector<int>(m));\n    // count[i][j] := count of j from root to i, where 1 <= j <= 26\n    vector<vector<int>> count(n);\n    // depth[i] := depth of i\n    vector<int> depth(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int w = edge[2];\n      graph[u].emplace_back(v, w);\n      graph[v].emplace_back(u, w);\n    }\n\n    count[0] = vector<int>(kMax + 1);\n    dfs(graph, 0, /*prev=*/-1, 0, jump, count, depth);\n\n    // Binary lifting.\n    for (int j = 1; j < m; ++j)\n      for (int i = 0; i < n; ++i)\n        jump[i][j] = jump[jump[i][j - 1]][j - 1];\n\n    for (const vector<int>& query : queries) {\n      const int u = query[0];\n      const int v = query[1];\n      const int lca = getLCA(u, v, jump, depth);\n      // # of edges between (u, v).\n      const int numEdges = depth[u] + depth[v] - 2 * depth[lca];\n      // max frequency of edges between (u, v)\n      int maxFreq = 0;\n      for (int j = 1; j <= kMax; ++j)\n        maxFreq = max(maxFreq, count[u][j] + count[v][j] - 2 * count[lca][j]);\n      ans.push_back(numEdges - maxFreq);\n    }\n\n    return ans;\n  }\n\n private:\n  void dfs(const vector<vector<pair<int, int>>>& graph, int u, int prev, int d,\n           vector<vector<int>>& jump, vector<vector<int>>& count,\n           vector<int>& depth) {\n    if (prev != -1)\n      jump[u][0] = prev;\n    depth[u] = d;\n    for (const auto& [v, w] : graph[u]) {\n      if (v == prev)\n        continue;\n      // Inherit count from parent.\n      count[v] = count[u];\n      // Add one to this edge.\n      ++count[v][w];\n      dfs(graph, v, u, d + 1, jump, count, depth);\n    }\n  }\n\n  // Returns the lca(u, v) via binary lifting.\n  int getLCA(int u, int v, const vector<vector<int>>& jump,\n             const vector<int>& depth) {\n    // v is always deeper than u.\n    if (depth[u] > depth[v])\n      return getLCA(v, u, jump, depth);\n    // Jump v to the same height of u.\n    for (int j = 0; j < jump[0].size(); ++j)\n      if (depth[v] - depth[u] >> j & 1)\n        v = jump[v][j];\n    if (u == v)\n      return u;\n    // Jump u and v to the node right below the lca.\n    for (int j = jump[0].size() - 1; j >= 0; --j)\n      if (jump[u][j] != jump[v][j]) {\n        u = jump[u][j];\n        v = jump[v][j];\n      }\n    return jump[v][0];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] minOperationsQueries(int n, int[][] edges, int[][] queries) {\n    final int kMax = 26;\n    final int m = (int) (Math.log(n) / Math.log(2)) + 1;\n    int[] ans = new int[queries.length];\n    List<Pair<Integer, Integer>>[] graph = new List[n];\n    // jump[i][j] := node you reach after jumping 2^j from i\n    int[][] jump = new int[n][m];\n    // count[i][j] := count of j from root to i, where 1 <= j <= 26\n    int[][] count = new int[n][];\n    // depth[i] := depth of i\n    int[] depth = new int[n];\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int w = edge[2];\n      graph[u].add(new Pair<>(v, w));\n      graph[v].add(new Pair<>(u, w));\n    }\n\n    count[0] = new int[kMax + 1];\n    dfs(graph, 0, /*prev=*/-1, 0, jump, count, depth);\n\n    // Binary lifting.\n    for (int j = 1; j < m; ++j)\n      for (int i = 0; i < n; ++i)\n        jump[i][j] = jump[jump[i][j - 1]][j - 1];\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int u = queries[i][0];\n      final int v = queries[i][1];\n      final int lca = getLCA(u, v, jump, depth);\n      // # of edges between (u, v).\n      final int numEdges = depth[u] + depth[v] - 2 * depth[lca];\n      // max frequency of edges between (u, v)\n      int maxFreq = 0;\n      for (int j = 1; j <= kMax; ++j)\n        maxFreq = Math.max(maxFreq, count[u][j] + count[v][j] - 2 * count[lca][j]);\n      ans[i] = numEdges - maxFreq;\n    }\n\n    return ans;\n  }\n\n  private void dfs(List<Pair<Integer, Integer>>[] graph, int u, int prev, int d, int[][] jump,\n                   int[][] count, int[] depth) {\n    if (prev != -1)\n      jump[u][0] = prev;\n    depth[u] = d;\n    for (Pair<Integer, Integer> pair : graph[u]) {\n      final int v = pair.getKey();\n      final int w = pair.getValue();\n      if (v == prev)\n        continue;\n      // Inherit count from parent.\n      count[v] = count[u].clone();\n      // Add one to this edge.\n      ++count[v][w];\n      dfs(graph, v, u, d + 1, jump, count, depth);\n    }\n  }\n\n  // Returns the lca(u, v) via binary lifting.\n  private int getLCA(int u, int v, int[][] jump, int[] depth) {\n    // v is always deeper than u.\n    if (depth[u] > depth[v])\n      return getLCA(v, u, jump, depth);\n    // Jump v to the same height of u.\n    for (int j = 0; j < jump[0].length; ++j)\n      if ((depth[v] - depth[u] >> j & 1) == 1)\n        v = jump[v][j];\n    if (u == v)\n      return u;\n    // Jump u and v to the node right below the lca.\n    for (int j = jump[0].length - 1; j >= 0; --j)\n      if (jump[u][j] != jump[v][j]) {\n        u = jump[u][j];\n        v = jump[v][j];\n      }\n    return jump[v][0];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperationsQueries(self, n: int, edges: List[List[int]], queries: List[List[int]]) -> List[int]:\n    kMax = 26\n    m = int(math.log2(n)) + 1\n    ans = []\n    graph = [[] for _ in range(n)]\n    # jump[i][j] := node you reach after jumping 2^j from i\n    jump = [[0] * m for _ in range(n)]\n    # count[i][j] := count of j from root to i, where 1 <= j <= 26\n    count = [[] for _ in range(n)]\n    # depth[i] := depth of i\n    depth = [0] * n\n\n    for u, v, w in edges:\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    def dfs(u: int, prev: int, d: int):\n      if prev != -1:\n        jump[u][0] = prev\n      depth[u] = d\n      for v, w in graph[u]:\n        if v == prev:\n          continue\n        # Inherit count from parent.\n        count[v] = count[u][:]\n        # Add one to this edge.\n        count[v][w] += 1\n        dfs(v, u, d + 1)\n\n    count[0] = [0] * (kMax + 1)\n    dfs(0, -1, 0)\n\n    # Binary lifting.\n    for j in range(1, m):\n      for i in range(n):\n        jump[i][j] = jump[jump[i][j - 1]][j - 1]\n\n    def getLCA(u: int, v: int) -> int:\n      \"\"\"Returns the lca(u, v) via binary lifting.\"\"\"\n      # v is always deeper than u.\n      if depth[u] > depth[v]:\n        return getLCA(v, u)\n      # Jump v to the same height of u.\n      for j in range(m):\n        if depth[v] - depth[u] >> j & 1:\n          v = jump[v][j]\n      if u == v:\n        return u\n      # Jump u and v to the node right below the lca.\n      for j in range(m - 1, -1, -1):\n        if jump[u][j] != jump[v][j]:\n          u = jump[u][j]\n          v = jump[v][j]\n      return jump[v][0]\n\n    for u, v in queries:\n      lca = getLCA(u, v)\n      # number of edges between (u, v).\n      numEdges = depth[u] + depth[v] - 2 * depth[lca]\n      # max frequency of edges between (u, v)\n      maxFreq = max(count[u][j] + count[v][j] - 2 * count[lca][j]\n                    for j in range(1, kMax + 1))\n      ans.append(numEdges - maxFreq)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}