{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1289",
            "title": "Minimum Falling Path Sum II",
            "titleSlug": "minimum-falling-path-sum-ii",
            "content": "<p>Given an <code>n x n</code> integer matrix <code>grid</code>, return <em>the minimum sum of a <strong>falling path with non-zero shifts</strong></em>.</p>\n\n<p>A <strong>falling path with non-zero shifts</strong> is a choice of exactly one element from each row of <code>grid</code> such that no two elements chosen in adjacent rows are in the same column.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/10/falling-grid.jpg\" style=\"width: 244px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> \nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is&nbsp;[1,5,7], so the answer is&nbsp;13.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[7]]\n<strong>Output:</strong> 7\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>-99 &lt;= grid[i][j] &lt;= 99</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1577,
            "dislikes": 81,
            "similarQuestions": "[{\"title\": \"Minimum Falling Path Sum\", \"titleSlug\": \"minimum-falling-path-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"47.3K\", \"totalSubmission\": \"81.6K\", \"totalAcceptedRaw\": 47301, \"totalSubmissionRaw\": 81592, \"acRate\": \"58.0%\"}",
            "hints": [
                "Use dynamic programming.",
                "Let dp[i][j] be the answer for the first i rows such that column j is chosen from row i.",
                "Use the concept of cumulative array to optimize the complexity of the solution."
            ],
            "rephrased": {
                "body": "Given an `n x n` integer matrix `grid`, find the minimum sum of a falling path with non-zero shifts. A falling path with non-zero shifts consists of one element from each row of `grid` such that no two elements chosen in adjacent rows are in the same column.",
                "constraints": [
                    "`n == grid.length == grid[i].length`",
                    "`1 <= n <= 200`",
                    "`-99 <= grid[i][j] <= 99`"
                ],
                "testcases": [
                    {
                        "input": "[[1,2,3],[4,5,6],[7,8,9]]",
                        "output": "13",
                        "explanation": "The falling path with the smallest sum is [1,5,7], which has a sum of 13. Other possible falling paths are [1,5,9], [1,6,7], [1,6,8], [2,4,8], [2,4,9], [2,6,7], [2,6,8], [3,4,8], [3,4,9], [3,5,7], [3,5,9]."
                    },
                    {
                        "input": "[[7]]",
                        "output": "7",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-falling-path-sum",
                "title": "Minimum Falling Path Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use dynamic programming.",
            "Let dp[i][j] be the answer for the first i rows such that column j is chosen from row i.",
            "Use the concept of cumulative array to optimize the complexity of the solution."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minFallingPathSum(vector<vector<int>>& grid) {\n    const int n = grid.size();\n\n    for (int i = 1; i < n; ++i) {\n      const vector<pair<int, int>> twoMinNumAndIndexs =\n          getTwoMinNumAndIndexs(grid[i - 1]);\n      const auto& [firstMinNum, firstMinIndex] = twoMinNumAndIndexs[0];\n      const auto& [secondMinNum, _] = twoMinNumAndIndexs[1];\n      for (int j = 0; j < n; ++j)\n        if (j == firstMinIndex)\n          grid[i][j] += secondMinNum;\n        else\n          grid[i][j] += firstMinNum;\n    }\n\n    return *min_element(grid.back(.begin()), grid.back(.end()));\n  }\n\n private:\n  vector<pair<int, int>> getTwoMinNumAndIndexs(const vector<int>& A) {\n    vector<pair<int, int>> numAndIndexs;\n\n    for (int i = 0; i < A.size(); ++i)\n      numAndIndexs.emplace_back(A[i], i);\n\n    std::ranges::sort(numAndIndexs);\n    return {numAndIndexs[0], numAndIndexs[1]};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minFallingPathSum(int[][] grid) {\n    final int n = grid.length;\n\n    for (int i = 1; i < n; ++i) {\n      Pair<Integer, Integer>[] twoMinNumAndIndexs = getTwoMinNumAndIndexs(grid[i - 1]);\n      final int firstMinNum = twoMinNumAndIndexs[0].getKey();\n      final int firstMinIndex = twoMinNumAndIndexs[0].getValue();\n      final int secondMinNum = twoMinNumAndIndexs[1].getKey();\n      for (int j = 0; j < n; ++j)\n        if (j == firstMinIndex)\n          grid[i][j] += secondMinNum;\n        else\n          grid[i][j] += firstMinNum;\n    }\n\n    return Arrays.stream(grid[n - 1]).min().getAsInt();\n  }\n\n  private Pair<Integer, Integer>[] getTwoMinNumAndIndexs(int[] A) {\n    List<Pair<Integer, Integer>> numAndIndexs = new ArrayList<>();\n\n    for (int i = 0; i < A.length; ++i)\n      numAndIndexs.add(new Pair<>(A[i], i));\n\n    Collections.sort(numAndIndexs, (a, b) -> a.getKey() - b.getKey());\n    return new Pair[] {numAndIndexs.get(0), numAndIndexs.get(1)};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minFallingPathSum(self, grid: List[List[int]]) -> int:\n    n = len(grid)\n\n    for i in range(1, n):\n      (firstMinNum, firstMinIndex), (secondMinNum, _) = sorted(\n          {(a, i) for i, a in enumerate(grid[i - 1])})[:2]\n      for j in range(n):\n        if j == firstMinIndex:\n          grid[i][j] += secondMinNum\n        else:\n          grid[i][j] += firstMinNum\n\n    return min(grid[-1])\n",
                "lang_text": "py"
            }
        }
    }
}