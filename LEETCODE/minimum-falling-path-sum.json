{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "931",
            "title": "Minimum Falling Path Sum",
            "titleSlug": "minimum-falling-path-sum",
            "content": "<p>Given an <code>n x n</code> array of integers <code>matrix</code>, return <em>the <strong>minimum sum</strong> of any <strong>falling path</strong> through</em> <code>matrix</code>.</p>\n\n<p>A <strong>falling path</strong> starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position <code>(row, col)</code> will be <code>(row + 1, col - 1)</code>, <code>(row + 1, col)</code>, or <code>(row + 1, col + 1)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/03/failing1-grid.jpg\" style=\"width: 499px; height: 500px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[2,1,3],[6,5,4],[7,8,9]]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> There are two falling paths with a minimum sum as shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/03/failing2-grid.jpg\" style=\"width: 164px; height: 365px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[-19,57],[-40,-5]]\n<strong>Output:</strong> -59\n<strong>Explanation:</strong> The falling path with a minimum sum is shown.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5464,
            "dislikes": 133,
            "similarQuestions": "[{\"title\": \"Minimum Falling Path Sum II\", \"titleSlug\": \"minimum-falling-path-sum-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"296.1K\", \"totalSubmission\": \"456.5K\", \"totalAcceptedRaw\": 296108, \"totalSubmissionRaw\": 456469, \"acRate\": \"64.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an n x n integer matrix, find the minimum sum of any falling path through the matrix. A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).",
                "constraints": [
                    "n == matrix.length == matrix[i].length",
                    "1 <= n <= 100",
                    "-100 <= matrix[i][j] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[[2,1,3],[6,5,4],[7,8,9]]",
                        "output": "13",
                        "explanation": "The minimum sum of a falling path is 13. One such path is 2 -> 1 -> 7, and another is 2 -> 1 -> 8."
                    },
                    {
                        "input": "[[-19,57],[-40,-5]]",
                        "output": "-59",
                        "explanation": "The minimum sum of a falling path is -59, achieved by the path -19 -> -40."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-falling-path-sum-ii",
                "title": "Minimum Falling Path Sum II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minFallingPathSum(vector<vector<int>>& A) {\n    const int n = A.size();\n\n    for (int i = 1; i < n; ++i)\n      for (int j = 0; j < n; ++j) {\n        int mini = INT_MAX;\n        for (int k = max(0, j - 1); k < min(n, j + 2); ++k)\n          mini = min(mini, A[i - 1][k]);\n        A[i][j] += mini;\n      }\n\n    return *min_element(A[n - 1].begin(), A[n - 1].end());\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minFallingPathSum(int[][] A) {\n    final int n = A.length;\n\n    for (int i = 1; i < n; ++i)\n      for (int j = 0; j < n; ++j) {\n        int min = Integer.MAX_VALUE;\n        for (int k = Math.max(0, j - 1); k < Math.min(n, j + 2); ++k)\n          min = Math.min(min, A[i - 1][k]);\n        A[i][j] += min;\n      }\n\n    return Arrays.stream(A[n - 1]).min().getAsInt();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minFallingPathSum(self, A: List[List[int]]) -> int:\n    n = len(A)\n\n    for i in range(1, n):\n      for j in range(n):\n        mini = math.inf\n        for k in range(max(0, j - 1), min(n, j + 2)):\n          mini = min(mini, A[i - 1][k])\n        A[i][j] += mini\n\n    return min(A[-1])\n",
                "lang_text": "py"
            }
        }
    }
}