{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2477",
            "title": "Minimum Fuel Cost to Report to the Capital",
            "titleSlug": "minimum-fuel-cost-to-report-to-the-capital",
            "content": "<p>There is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code> and exactly <code>n - 1</code> roads. The capital city is city <code>0</code>. You are given a 2D integer array <code>roads</code> where <code>roads[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists a <strong>bidirectional road</strong> connecting cities <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p>There is a meeting for the representatives of each city. The meeting is in the capital city.</p>\n\n<p>There is a car in each city. You are given an integer <code>seats</code> that indicates the number of seats in each car.</p>\n\n<p>A representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel.</p>\n\n<p>Return <em>the minimum number of liters of fuel to reach the capital city</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/22/a4c380025e3ff0c379525e96a7d63a3.png\" style=\"width: 303px; height: 332px;\" />\n<pre>\n<strong>Input:</strong> roads = [[0,1],[0,2],[0,3]], seats = 5\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \n- Representative<sub>1</sub> goes directly to the capital with 1 liter of fuel.\n- Representative<sub>2</sub> goes directly to the capital with 1 liter of fuel.\n- Representative<sub>3</sub> goes directly to the capital with 1 liter of fuel.\nIt costs 3 liters of fuel at minimum. \nIt can be proven that 3 is the minimum number of liters of fuel needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/11/16/2.png\" style=\"width: 274px; height: 340px;\" />\n<pre>\n<strong>Input:</strong> roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> \n- Representative<sub>2</sub> goes directly to city 3 with 1 liter of fuel.\n- Representative<sub>2</sub> and representative<sub>3</sub> go together to city 1 with 1 liter of fuel.\n- Representative<sub>2</sub> and representative<sub>3</sub> go together to the capital with 1 liter of fuel.\n- Representative<sub>1</sub> goes directly to the capital with 1 liter of fuel.\n- Representative<sub>5</sub> goes directly to the capital with 1 liter of fuel.\n- Representative<sub>6</sub> goes directly to city 4 with 1 liter of fuel.\n- Representative<sub>4</sub> and representative<sub>6</sub> go together to the capital with 1 liter of fuel.\nIt costs 7 liters of fuel at minimum. \nIt can be proven that 7 is the minimum number of liters of fuel needed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/27/efcf7f7be6830b8763639cfd01b690a.png\" style=\"width: 108px; height: 86px;\" />\n<pre>\n<strong>Input:</strong> roads = [], seats = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No representatives need to travel to the capital city.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>roads.length == n - 1</code></li>\n\t<li><code>roads[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>roads</code> represents a valid tree.</li>\n\t<li><code>1 &lt;= seats &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2090,
            "dislikes": 81,
            "similarQuestions": "[{\"title\": \"Binary Tree Postorder Traversal\", \"titleSlug\": \"binary-tree-postorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"62.6K\", \"totalSubmission\": \"95.8K\", \"totalAcceptedRaw\": 62598, \"totalSubmissionRaw\": 95766, \"acRate\": \"65.4%\"}",
            "hints": [
                "Can you record the size of each subtree?",
                "If n people meet on the same node, what is the minimum number of cars needed?"
            ],
            "rephrased": {
                "body": "Given a tree-structured country with 'n' cities (0 to n-1) and 'n-1' roads, where city 0 is the capital. You are provided with a 2D array 'roads' representing bidirectional roads between cities. Each city has a car, and each car has 'seats' number of seats. Determine the minimum liters of fuel required for all representatives to reach the capital city (city 0), considering representatives can share cars.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "roads.length == n - 1",
                    "roads[i].length == 2",
                    "0 <= a_i, b_i < n",
                    "a_i != b_i",
                    "roads represents a valid tree.",
                    "1 <= seats <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "roads = [[0,1],[0,2],[0,3]], seats = 5",
                        "output": "3",
                        "explanation": "Representative 1 travels directly to the capital (1 liter). Representative 2 travels directly to the capital (1 liter). Representative 3 travels directly to the capital (1 liter). Total cost is 3 liters."
                    },
                    {
                        "input": "roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2",
                        "output": "7",
                        "explanation": "Representative 2 travels to city 3 (1 liter). Representatives 2 and 3 travel together to city 1 (1 liter). Representatives 2 and 3 travel together to the capital (1 liter). Representative 1 travels directly to the capital (1 liter). Representative 5 travels directly to the capital (1 liter). Representative 6 travels to city 4 (1 liter). Representatives 4 and 6 travel together to the capital (1 liter). Total cost is 7 liters."
                    },
                    {
                        "input": "roads = [], seats = 1",
                        "output": "0",
                        "explanation": "No representatives need to travel to the capital."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "binary-tree-postorder-traversal",
                "title": "Binary Tree Postorder Traversal",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can you record the size of each subtree?",
            "If n people meet on the same node, what is the minimum number of cars needed?"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumFuelCost(vector<vector<int>>& roads, int seats) {\n    long long ans = 0;\n    vector<vector<int>> tree(roads.size() + 1);\n\n    for (const vector<int>& road : roads) {\n      const int u = road[0];\n      const int v = road[1];\n      tree[u].push_back(v);\n      tree[v].push_back(u);\n    }\n\n    dfs(tree, 0, -1, seats, ans);\n    return ans;\n  }\n\n private:\n  int dfs(const vector<vector<int>>& tree, int u, int prev, int seats,\n          long long& ans) {\n    int people = 1;\n    for (const int v : tree[u]) {\n      if (v == prev)\n        continue;\n      people += dfs(tree, v, u, seats, ans);\n    }\n    if (u > 0)\n      // # of cars needed = ceil(people / seats)\n      ans += (people + seats - 1) / seats;\n    return people;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minimumFuelCost(int[][] roads, int seats) {\n    List<Integer>[] tree = new List[roads.length + 1];\n\n    for (int i = 0; i < tree.length; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int[] road : roads) {\n      final int u = road[0];\n      final int v = road[1];\n      tree[u].add(v);\n      tree[v].add(u);\n    }\n\n    dfs(tree, 0, -1, seats);\n    return ans;\n  }\n\n  private long ans = 0;\n\n  private int dfs(List<Integer>[] tree, int u, int prev, int seats) {\n    int people = 1;\n    for (final int v : tree[u]) {\n      if (v == prev)\n        continue;\n      people += dfs(tree, v, u, seats);\n    }\n    if (u > 0)\n      // # of cars needed = ceil(people / seats)\n      ans += (people + seats - 1) / seats;\n    return people;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:\n    ans = 0\n    tree = [[] for _ in range(len(roads) + 1)]\n\n    for u, v in roads:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    def dfs(u: int, prev: int) -> int:\n      nonlocal ans\n      people = 1\n      for v in tree[u]:\n        if v == prev:\n          continue\n        people += dfs(v, u)\n      if u > 0:\n        # number of cars needed\n        ans += int(math.ceil(people / seats))\n      return people\n\n    dfs(0, -1)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}