{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1954",
            "title": "Minimum Garden Perimeter to Collect Enough Apples",
            "titleSlug": "minimum-garden-perimeter-to-collect-enough-apples",
            "content": "<p>In a garden represented as an infinite 2D grid, there is an apple tree planted at <strong>every</strong> integer coordinate. The apple tree planted at an integer coordinate <code>(i, j)</code> has <code>|i| + |j|</code> apples growing on it.</p>\n\n<p>You will buy an axis-aligned <strong>square plot</strong> of land that is centered at <code>(0, 0)</code>.</p>\n\n<p>Given an integer <code>neededApples</code>, return <em>the <strong>minimum perimeter</strong> of a plot such that <strong>at least</strong></em><strong> </strong><code>neededApples</code> <em>apples are <strong>inside or on</strong> the perimeter of that plot</em>.</p>\n\n<p>The value of <code>|x|</code> is defined as:</p>\n\n<ul>\n\t<li><code>x</code> if <code>x &gt;= 0</code></li>\n\t<li><code>-x</code> if <code>x &lt; 0</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/08/30/1527_example_1_2.png\" style=\"width: 442px; height: 449px;\" />\n<pre>\n<strong>Input:</strong> neededApples = 1\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> neededApples = 13\n<strong>Output:</strong> 16\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> neededApples = 1000000000\n<strong>Output:</strong> 5040\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= neededApples &lt;= 10<sup>15</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 353,
            "dislikes": 86,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.6K\", \"totalSubmission\": \"29.1K\", \"totalAcceptedRaw\": 15608, \"totalSubmissionRaw\": 29054, \"acRate\": \"53.7%\"}",
            "hints": [
                "Find a formula for the number of apples inside a square with a side length L.",
                "Iterate over the possible lengths of the square until enough apples are collected."
            ],
            "rephrased": {
                "body": "Imagine an infinite 2D grid where apple trees grow at every integer coordinate. The tree at coordinate (i, j) yields |i| + |j| apples. You aim to buy a square plot of land, centered at (0, 0), and want to find the smallest perimeter that guarantees you collect at least `neededApples` apples, either inside or on the plot's boundary.  The absolute value |x| is x if x >= 0, and -x if x < 0.",
                "constraints": [
                    "1 <= neededApples <= 10^15"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "8",
                        "explanation": "A square plot of side length 1 does not contain any apples. A square plot of side length 2 has 12 apples inside. The perimeter is 2 * 4 = 8."
                    },
                    {
                        "input": "13",
                        "output": "16",
                        "explanation": null
                    },
                    {
                        "input": "1000000000",
                        "output": "5040",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Find a formula for the number of apples inside a square with a side length L.",
            "Iterate over the possible lengths of the square until enough apples are collected."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumPerimeter(long long neededApples) {\n    long long l = 1;\n    long long r = 100'000;  // \\sqrt [3] {10^{15}}\n\n    while (l < r) {\n      const long long m = (l + r) / 2;\n      if (numApples(m) >= neededApples)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l * 8;\n  }\n\n private:\n  // Returns the # of apples at k-th level.\n  //    k := the level making perimeter = 8k\n  // p(k) := # of apples at k-th level on the perimeter\n  // n(k) := # of apples at k-th level not no the perimeter\n  //\n  // p(1) =             1 + 2\n  // p(2) =         3 + 2 + 3 + 4\n  // p(3) =     5 + 4 + 3 + 4 + 5 + 6\n  // p(4) = 7 + 6 + 5 + 4 + 5 + 6 + 7 + 8\n  // p(k) = k + 2(k+1) + 2(k+2) + ... + 2(k+k-1) + 2k\n  //      = k + 2k^2 + 2*k(k-1)/2\n  //      = k + 2k^2 + k^2 - k = 3k^2\n  //\n  // n(k) = p(1) + p(2) + p(3) + ... + p(k)\n  //      = 3*1  + 3*4  + 3*9  + ... + 3*k^2\n  //      = 3 * (1 + 4 + 9 + ... + k^2)\n  //      = 3 * k(k+1)(2k+1)/6 = k(k+1)(2k+1)/2\n  // So, the # of apples at k-th level should be\n  //   k(k+1)(2k+1)/2 * 4 = 2k(k+1)(2k+1)\n  long long numApples(long long k) {\n    return 2 * k * (k + 1) * (2 * k + 1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minimumPerimeter(long neededApples) {\n    long l = 1;\n    long r = 100_000; // \\sqrt [3] {10^{15}}\n\n    while (l < r) {\n      final long m = (l + r) / 2;\n      if (numApples(m) >= neededApples)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l * 8;\n  }\n\n  // Returns the # of apples at k-th level.\n  //    k := the level making perimeter = 8k\n  // p(k) := # of apples at k-th level on the perimeter\n  // n(k) := # of apples at k-th level not no the perimeter\n  //\n  // p(1) =             1 + 2\n  // p(2) =         3 + 2 + 3 + 4\n  // p(3) =     5 + 4 + 3 + 4 + 5 + 6\n  // p(4) = 7 + 6 + 5 + 4 + 5 + 6 + 7 + 8\n  // p(k) = k + 2(k+1) + 2(k+2) + ... + 2(k+k-1) + 2k\n  //      = k + 2k^2 + 2k(k-1)/2\n  //      = k + 2k^2 + k^2 - k = 3k^2\n  //\n  // n(k) = p(1) + p(2) + p(3) + ... + p(k)\n  //      = 31  + 34  + 39  + ... + 3k^2\n  //      = 3 * (1 + 4 + 9 + ... + k^2)\n  //      = 3 * k(k+1)(2k+1)/6 = k(k+1)(2k+1)/2\n  // So, the # of apples at k-th level should be\n  //   k(k+1)(2k+1)/2 * 4 = 2k(k+1)(2k+1)\n  private long numApples(long k) {\n    return 2L * k * (k + 1) * (2 * k + 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumPerimeter(self, neededApples: int) -> int:\n    # Returns the # of apples at k-th level.\n    #    k := the level making perimeter = 8k\n    # p(k) := # of apples at k-th level on the perimeter\n    # n(k) := # of apples at k-th level not no the perimeter\n    #\n    # p(1) =             1 + 2\n    # p(2) =         3 + 2 + 3 + 4\n    # p(3) =     5 + 4 + 3 + 4 + 5 + 6\n    # p(4) = 7 + 6 + 5 + 4 + 5 + 6 + 7 + 8\n    # p(k) = k + 2(k+1) + 2(k+2) + ... + 2(k+k-1) + 2k\n    #      = k + 2k^2 + 2*k(k-1)//2\n    #      = k + 2k^2 + k^2 - k = 3k^2\n    #\n    # n(k) = p(1) + p(2) + p(3) + ... + p(k)\n    #      = 3*1  + 3*4  + 3*9  + ... + 3*k^2\n    #      = 3 * (1 + 4 + 9 + ... + k^2)\n    #      = 3 * k(k+1)(2k+1)//6 = k(k+1)(2k+1)//2\n    # So, the # of apples at k-th level should be\n    #   k(k+1)(2k+1)//2 * 4 = 2k(k+1)(2k+1)\n    def numApples(k: int) -> int:\n      return 2 * k * (k + 1) * (2 * k + 1)\n\n    return bisect.bisect_left(range(100_000), neededApples,\n                              key=lambda m: numApples(m)) * 8\n",
                "lang_text": "py"
            }
        }
    }
}