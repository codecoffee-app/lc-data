{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "310",
            "title": "Minimum Height Trees",
            "titleSlug": "minimum-height-trees",
            "content": "<p>A tree is an undirected graph in which any two vertices are connected by&nbsp;<i>exactly</i>&nbsp;one path. In other words, any connected graph without simple cycles is a tree.</p>\n\n<p>Given a tree of <code>n</code> nodes&nbsp;labelled from <code>0</code> to <code>n - 1</code>, and an array of&nbsp;<code>n - 1</code>&nbsp;<code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an undirected edge between the two nodes&nbsp;<code>a<sub>i</sub></code> and&nbsp;<code>b<sub>i</sub></code> in the tree,&nbsp;you can choose any node of the tree as the root. When you select a node <code>x</code> as the root, the result tree has height <code>h</code>. Among all possible rooted trees, those with minimum height (i.e. <code>min(h)</code>)&nbsp; are called <strong>minimum height trees</strong> (MHTs).</p>\n\n<p>Return <em>a list of all <strong>MHTs&#39;</strong> root labels</em>.&nbsp;You can return the answer in <strong>any order</strong>.</p>\n\n<p>The <strong>height</strong> of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e1.jpg\" style=\"width: 800px; height: 213px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[1,0],[1,2],[1,3]]\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e2.jpg\" style=\"width: 800px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\n<strong>Output:</strong> [3,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>All the pairs <code>(a<sub>i</sub>, b<sub>i</sub>)</code> are distinct.</li>\n\t<li>The given input is <strong>guaranteed</strong> to be a tree and there will be <strong>no repeated</strong> edges.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7321,
            "dislikes": 309,
            "similarQuestions": "[{\"title\": \"Course Schedule\", \"titleSlug\": \"course-schedule\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Course Schedule II\", \"titleSlug\": \"course-schedule-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Collect Coins in a Tree\", \"titleSlug\": \"collect-coins-in-a-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"275.8K\", \"totalSubmission\": \"711.3K\", \"totalAcceptedRaw\": 275814, \"totalSubmissionRaw\": 711339, \"acRate\": \"38.8%\"}",
            "hints": [
                "How many MHTs can a graph have at most?"
            ],
            "rephrased": {
                "body": "Given a tree of `n` nodes labeled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [a<sub>i</sub>, b<sub>i</sub>]` indicates an undirected edge between nodes `a<sub>i</sub>` and `b<sub>i</sub>`. Find all possible root nodes that result in a minimum height tree (MHT). Return a list of the labels of these root nodes. The height of a rooted tree is the number of edges on the longest path from the root to a leaf.",
                "constraints": [
                    "1 <= n <= 2 * 10<sup>4</sup>",
                    "edges.length == n - 1",
                    "0 <= a<sub>i</sub>, b<sub>i</sub> < n",
                    "a<sub>i</sub> != b<sub>i</sub>",
                    "All the pairs (a<sub>i</sub>, b<sub>i</sub>) are distinct.",
                    "The given input is guaranteed to be a tree and there will be no repeated edges."
                ],
                "testcases": [
                    {
                        "input": "n = 4, edges = [[1,0],[1,2],[1,3]]",
                        "output": "[1]",
                        "explanation": "When node 1 is chosen as the root, the height of the tree is 1, which is the minimum possible height. Therefore, node 1 is the only MHT root."
                    },
                    {
                        "input": "n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]",
                        "output": "[3,4]",
                        "explanation": "Nodes 3 and 4, when chosen as roots, produce trees with the minimum possible height."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "course-schedule",
                "title": "Course Schedule",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "course-schedule-ii",
                "title": "Course Schedule II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "collect-coins-in-a-tree",
                "title": "Collect Coins in a Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How many MHTs can a graph have at most?"
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n    if (n == 1 || edges.empty())\n      return {0};\n\n    vector<int> ans;\n    unordered_map<int, unordered_set<int>> graph;\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].insert(v);\n      graph[v].insert(u);\n    }\n\n    for (const auto& [label, children] : graph)\n      if (children.size() == 1)\n        ans.push_back(label);\n\n    while (n > 2) {\n      n -= ans.size();\n      vector<int> nextLeaves;\n      for (const int leaf : ans) {\n        const int u = *graph[leaf].begin();\n        graph[u].erase(leaf);\n        if (graph[u].size() == 1)\n          nextLeaves.push_back(u);\n      }\n      ans = nextLeaves;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n    if (n == 0 || edges.length == 0)\n      return new ArrayList<>(Arrays.asList(0));\n\n    List<Integer> ans = new ArrayList<>();\n    Map<Integer, Set<Integer>> graph = new HashMap<>();\n\n    for (int i = 0; i < n; ++i)\n      graph.put(i, new HashSet<>());\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph.get(u).add(v);\n      graph.get(v).add(u);\n    }\n\n    for (Map.Entry<Integer, Set<Integer>> entry : graph.entrySet()) {\n      final int label = entry.getKey();\n      Set<Integer> children = entry.getValue();\n      if (children.size() == 1)\n        ans.add(label);\n    }\n\n    while (n > 2) {\n      n -= ans.size();\n      List<Integer> nextLeaves = new ArrayList<>();\n      for (final int leaf : ans) {\n        final int u = (int) graph.get(leaf).iterator().next();\n        graph.get(u).remove(leaf);\n        if (graph.get(u).size() == 1)\n          nextLeaves.add(u);\n      }\n      ans = nextLeaves;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n    if n == 1 or not edges:\n      return [0]\n\n    ans = []\n    graph = collections.defaultdict(set)\n\n    for u, v in edges:\n      graph[u].add(v)\n      graph[v].add(u)\n\n    for label, children in graph.items():\n      if len(children) == 1:\n        ans.append(label)\n\n    while n > 2:\n      n -= len(ans)\n      nextLeaves = []\n      for leaf in ans:\n        u = next(iter(graph[leaf]))\n        graph[u].remove(leaf)\n        if len(graph[u]) == 1:\n          nextLeaves.append(u)\n      ans = nextLeaves\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}