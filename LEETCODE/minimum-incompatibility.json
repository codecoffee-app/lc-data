{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1681",
            "title": "Minimum Incompatibility",
            "titleSlug": "minimum-incompatibility",
            "content": "<p>You are given an integer array <code>nums</code>\u200b\u200b\u200b and an integer <code>k</code>. You are asked to distribute this array into <code>k</code> subsets of <strong>equal size</strong> such that there are no two equal elements in the same subset.</p>\n\n<p>A subset&#39;s <strong>incompatibility</strong> is the difference between the maximum and minimum elements in that array.</p>\n\n<p>Return <em>the <strong>minimum possible sum of incompatibilities</strong> of the </em><code>k</code> <em>subsets after distributing the array optimally, or return </em><code>-1</code><em> if it is not possible.</em></p>\n\n<p>A subset is a group integers that appear in the array with no particular order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,4], k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The optimal distribution of subsets is [1,2] and [1,4].\nThe incompatibility is (2-1) + (4-1) = 4.\nNote that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,3,8,1,3,1,2,2], k = 4\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].\nThe incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,3,3,6,3,3], k = 3\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 16</code></li>\n\t<li><code>nums.length</code> is divisible by <code>k</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= nums.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 267,
            "dislikes": 93,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.9K\", \"totalSubmission\": \"20.5K\", \"totalAcceptedRaw\": 7923, \"totalSubmissionRaw\": 20491, \"acRate\": \"38.7%\"}",
            "hints": [
                "The constraints are small enough for a backtrack solution but not any backtrack solution",
                "If we use a naive n^k don't you think it can be optimized"
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `k`, distribute `nums` into `k` subsets of equal size such that no subset contains duplicate elements. The incompatibility of a subset is the difference between its maximum and minimum elements. Return the minimum possible sum of incompatibilities of the `k` subsets after optimal distribution. If a valid distribution is impossible, return -1.",
                "constraints": [
                    "1 <= k <= nums.length <= 16",
                    "nums.length is divisible by k",
                    "1 <= nums[i] <= nums.length"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,1,4], k = 2",
                        "output": "4",
                        "explanation": "The optimal distribution is [1, 2] and [1, 4]. The incompatibility is (2 - 1) + (4 - 1) = 4. Distributing as [1, 1] and [2, 4] leads to a smaller sum but violates the no-duplicates rule."
                    },
                    {
                        "input": "nums = [6,3,8,1,3,1,2,2], k = 4",
                        "output": "6",
                        "explanation": "The optimal distribution is [1, 2], [2, 3], [6, 8], and [1, 3]. The incompatibility is (2 - 1) + (3 - 2) + (8 - 6) + (3 - 1) = 6."
                    },
                    {
                        "input": "nums = [5,3,3,6,3,3], k = 3",
                        "output": "-1",
                        "explanation": "It is impossible to distribute `nums` into 3 subsets where no subset contains duplicate elements because element '3' appears too many times."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The constraints are small enough for a backtrack solution but not any backtrack solution",
            "If we use a naive n^k don't you think it can be optimized"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumIncompatibility(vector<int>& nums, int k) {\n    constexpr int kMaxCompatibility = (16 - 1) * (16 / 2);\n    const int n = nums.size();\n    const int subsetSize = n / k;\n    const int maxMask = 1 << n;\n    const vector<int> incompatibilities =\n        getIncompatibilities(nums, subsetSize);\n    // dp[i] := min possible sum of incompatibilities of the subset of numbers\n    //          represented by the mask i\n    vector<int> dp(maxMask, kMaxCompatibility);\n    dp[0] = 0;\n\n    for (int mask = 1; mask < maxMask; ++mask) {\n      // # of 1s in `mask` isn't a multiple of `subsetSize`.\n      if (__builtin_popcount(mask) % subsetSize != 0)\n        continue;\n      // https://cp-algorithms.com/algebra/all-submasks.html\n      for (int submask = mask; submask > 0; submask = (submask - 1) & mask)\n        if (incompatibilities[submask] != -1)  // valid subset\n          dp[mask] =\n              min(dp[mask], dp[mask - submask] + incompatibilities[submask]);\n    }\n\n    return dp.back() == kMaxCompatibility ? -1 : dp.back();\n  }\n\n private:\n  static constexpr int kMaxNum = 16;\n\n  // Returns an incompatibilities array where\n  // * incompatibilities[i] := the incompatibility of the subset of numbers\n  //   represented by the mask i\n  // * incompatibilities[i] := -1 if # of 1s in the mask i is not `subsetSize`\n  vector<int> getIncompatibilities(const vector<int>& nums, int subsetSize) {\n    const int maxMask = 1 << nums.size();\n    vector<int> incompatibilities(maxMask, -1);\n    for (int mask = 0; mask < maxMask; ++mask)\n      if (__builtin_popcount(mask) == subsetSize &&\n          isUnique(nums, mask, subsetSize))\n        incompatibilities[mask] = getIncompatibility(nums, mask);\n    return incompatibilities;\n  }\n\n  // Returns true if the nums selected by the mask are unique.\n  //\n  // E.g., if we call isUnique(0b1010, 2, [1, 2, 1, 4]), the `used` variable\n  // will be 0b1, which only has one 1 (less than `subsetSize`). In this case,\n  // we should return false.\n  bool isUnique(const vector<int>& nums, int mask, int subsetSize) {\n    int used = 0;\n    for (int i = 0; i < nums.size(); ++i)\n      if (mask >> i & 1)\n        used |= 1 << nums[i];\n    return __builtin_popcount(used) == subsetSize;\n  }\n\n  // Returns the incompatibility of the selected nums represented by the `mask`.\n  int getIncompatibility(const vector<int>& nums, int mask) {\n    int mini = kMaxNum;\n    int maxi = 0;\n    for (int i = 0; i < nums.size(); ++i)\n      if (mask >> i & 1) {\n        maxi = max(maxi, nums[i]);\n        mini = min(mini, nums[i]);\n      }\n    return maxi - mini;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumIncompatibility(int[] nums, int k) {\n    final int kMaxCompatibility = (16 - 1) * (16 / 2);\n    final int n = nums.length;\n    final int subsetSize = n / k;\n    final int maxMask = 1 << n;\n    final int[] incompatibilities = getIncompatibilities(nums, subsetSize);\n    // dp[i] := min possible sum of incompatibilities of the subset of numbers\n    //          represented by the mask i\n    int[] dp = new int[maxMask];\n    Arrays.fill(dp, kMaxCompatibility);\n    dp[0] = 0;\n\n    for (int mask = 1; mask < maxMask; ++mask) {\n      // # of 1s in `mask` isn't a multiple of `subsetSize`.\n      if (Integer.bitCount(mask) % subsetSize != 0)\n        continue;\n      // https://cp-algorithms.com/algebra/all-submasks.html\n      for (int submask = mask; submask > 0; submask = (submask - 1) & mask)\n        if (incompatibilities[submask] != -1) // valid submask\n          dp[mask] = Math.min(dp[mask], dp[mask - submask] + incompatibilities[submask]);\n    }\n\n    return dp[maxMask - 1] == kMaxCompatibility ? -1 : dp[maxMask - 1];\n  }\n\n  private static final int kMaxNum = 16;\n\n  // Returns an incompatibilities array where\n  // * incompatibilities[i] := the incompatibility of the subset of numbers\n  //   represented by the mask i\n  // * incompatibilities[i] := -1 if # of 1s in the mask i is not `subsetSize`\n  private int[] getIncompatibilities(int[] nums, int subsetSize) {\n    final int maxMask = 1 << nums.length;\n    int[] incompatibilities = new int[maxMask];\n    Arrays.fill(incompatibilities, -1);\n    for (int mask = 0; mask < maxMask; ++mask)\n      if (Integer.bitCount(mask) == subsetSize && isUnique(nums, mask, subsetSize))\n        incompatibilities[mask] = getIncompatibility(nums, mask);\n    return incompatibilities;\n  }\n\n  // Returns true if the nums selected by the mask are unique.\n  //\n  // E.g., if we call isUnique(0b1010, 2, [1, 2, 1, 4]), the `used` variable\n  // will be 0b1, which only has one 1 (less than `subsetSize`). In this case,\n  // we should return false.\n  private boolean isUnique(int[] nums, int mask, int subsetSize) {\n    int used = 0;\n    for (int i = 0; i < nums.length; ++i)\n      if ((mask >> i & 1) == 1)\n        used |= 1 << nums[i];\n    return Integer.bitCount(used) == subsetSize;\n  }\n\n  // Returns the incompatibility of the selected nums represented by the `mask`.\n  private int getIncompatibility(int[] nums, int mask) {\n    int mini = kMaxNum;\n    int maxi = 0;\n    for (int i = 0; i < nums.length; ++i)\n      if ((mask >> i & 1) == 1) {\n        maxi = Math.max(maxi, nums[i]);\n        mini = Math.min(mini, nums[i]);\n      }\n    return maxi - mini;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def __init__(self):\n    self.kMaxNum = 16\n\n  def minimumIncompatibility(self, nums: List[int], k: int) -> int:\n    kMaxCompatibility = (16 - 1) * (16 // 2)\n    n = len(nums)\n    subsetSize = n // k\n    maxMask = 1 << n\n    incompatibilities = self._getIncompatibilities(nums, subsetSize)\n\n    # dp[i] := min possible sum of incompatibilities of the subset of numbers\n    #          represented by the mask i\n    dp = [kMaxCompatibility] * maxMask\n    dp[0] = 0\n\n    for mask in range(1, maxMask):\n      # Number of 1s in `mask` isn't a multiple of `subsetSize`.\n      if mask.bit_count() % subsetSize != 0:\n        continue\n      # https://cp-algorithms.com/algebra/all-submasks.html\n      submask = mask\n      while submask > 0:\n        if incompatibilities[submask] != -1:  # valid submask\n          dp[mask] = min(dp[mask], dp[mask - submask] +\n                         incompatibilities[submask])\n        submask = (submask - 1) & mask\n\n    return dp[-1] if dp[-1] != kMaxCompatibility else -1\n\n  def _getIncompatibilities(self, nums: List[int], subsetSize: int) -> List[int]:\n    \"\"\"\n    Returns an incompatibilities array where\n    * incompatibilities[i] is the incompatibility of the subset of numbers\n      represented by the mask i.\n    * incompatibilities[i] is -1 if the number of 1s in the mask i is not equal\n      to `subsetSize`.\n    \"\"\"\n    maxMask = 1 << len(nums)\n    incompatibilities = [-1] * maxMask\n    for mask in range(maxMask):\n      if mask.bit_count() == subsetSize and self._isUnique(nums, mask, subsetSize):\n        incompatibilities[mask] = self._getIncompatibility(nums, mask)\n    return incompatibilities\n\n  def _isUnique(self, nums: List[int], mask: int, subsetSize: int) -> bool:\n    \"\"\"\n    Returns True if the numbers selected by the mask are unique.\n    \"\"\"\n    used = 0\n    for i, num in enumerate(nums):\n      if mask >> i & 1:\n        used |= 1 << num\n    return used.bit_count() == subsetSize\n\n  def _getIncompatibility(self, nums: List[int], mask: int) -> int:\n    \"\"\"\n    Returns the incompatibility of the selected numbers represented by the `mask`.\n    \"\"\"\n    mini = self.kMaxNum\n    maxi = 0\n    for i, num in enumerate(nums):\n      if mask >> i & 1:\n        maxi = max(maxi, num)\n        mini = min(mini, num)\n    return maxi - mini\n",
                "lang_text": "py"
            }
        }
    }
}