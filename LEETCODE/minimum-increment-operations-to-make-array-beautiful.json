{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2919",
            "title": "Minimum Increment Operations to Make Array Beautiful",
            "titleSlug": "minimum-increment-operations-to-make-array-beautiful",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> having length <code>n</code>, and an integer <code>k</code>.</p>\n\n<p>You can perform the following <strong>increment</strong> operation <strong>any</strong> number of times (<strong>including zero</strong>):</p>\n\n<ul>\n\t<li>Choose an index <code>i</code> in the range <code>[0, n - 1]</code>, and increase <code>nums[i]</code> by <code>1</code>.</li>\n</ul>\n\n<p>An array is considered <strong>beautiful</strong> if, for any <strong>subarray</strong> with a size of <code>3</code> or <strong>more</strong>, its <strong>maximum</strong> element is <strong>greater than or equal</strong> to <code>k</code>.</p>\n\n<p>Return <em>an integer denoting the <strong>minimum</strong> number of increment operations needed to make </em><code>nums</code><em> <strong>beautiful</strong>.</em></p>\n\n<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,0,0,2], k = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can perform the following increment operations to make nums beautiful:\nChoose index i = 1 and increase nums[1] by 1 -&gt; [2,4,0,0,2].\nChoose index i = 4 and increase nums[4] by 1 -&gt; [2,4,0,0,3].\nChoose index i = 4 and increase nums[4] by 1 -&gt; [2,4,0,0,4].\nThe subarrays with a size of 3 or more are: [2,4,0], [4,0,0], [0,0,4], [2,4,0,0], [4,0,0,4], [2,4,0,0,4].\nIn all the subarrays, the maximum element is equal to k = 4, so nums is now beautiful.\nIt can be shown that nums cannot be made beautiful with fewer than 3 increment operations.\nHence, the answer is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,3,3], k = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can perform the following increment operations to make nums beautiful:\nChoose index i = 2 and increase nums[2] by 1 -&gt; [0,1,4,3].\nChoose index i = 2 and increase nums[2] by 1 -&gt; [0,1,5,3].\nThe subarrays with a size of 3 or more are: [0,1,5], [1,5,3], [0,1,5,3].\nIn all the subarrays, the maximum element is equal to k = 5, so nums is now beautiful.\nIt can be shown that nums cannot be made beautiful with fewer than 2 increment operations.\nHence, the answer is 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2], k = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The only subarray with a size of 3 or more in this example is [1,1,2].\nThe maximum element, 2, is already greater than k = 1, so we don&#39;t need any increment operation.\nHence, the answer is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n == nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 309,
            "dislikes": 20,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.2K\", \"totalSubmission\": \"38.7K\", \"totalAcceptedRaw\": 13236, \"totalSubmissionRaw\": 38700, \"acRate\": \"34.2%\"}",
            "hints": [
                "There needs to be at least one value among <code>3</code> consecutive values in the array that is greater than or equal to <code>k</code>.",
                "The problem can be solved using dynamic programming.",
                "Let <code>dp[i]</code> be the minimum number of increment operations required to make the subarray consisting of the first <code>i</code> values beautiful, while also having the value at <code>nums[i] >= k</code>.",
                "<code>dp[0] = max(0, k - nums[0])</code>, <code>dp[1] = max(0, k - nums[1])</code>, and <code>dp[2] = max(0, k - nums[2])</code>.",
                "<code>dp[i] = max(0, k - nums[i]) + min(dp[i - 1], dp[i - 2], dp[i - 3])</code> for <code>i</code> in the range <code>[3, n - 1]</code>.",
                "The answer to the problem is <code>min(dp[n - 1], dp[n - 2], dp[n - 3])</code>."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` of length `n` and an integer `k`, determine the minimum number of increment operations needed to make `nums` beautiful.  An increment operation consists of choosing an index `i` and increasing `nums[i]` by 1.  An array is considered beautiful if, for every subarray of size 3 or more, its maximum element is greater than or equal to `k`.",
                "constraints": [
                    "3 <= n == nums.length <= 10^5",
                    "0 <= nums[i] <= 10^9",
                    "0 <= k <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,3,0,0,2], k = 4",
                        "output": "3",
                        "explanation": "To make the array beautiful, we need to increment nums[1] to 4 and nums[4] twice to 4. The subarrays with size 3 or more ([2,4,0], [4,0,0], [0,0,4], [2,4,0,0], [4,0,0,4], [2,4,0,0,4]) then all have a maximum element >= 4. This requires 3 operations."
                    },
                    {
                        "input": "nums = [0,1,3,3], k = 5",
                        "output": "2",
                        "explanation": "To make the array beautiful, we need to increment nums[2] twice to 5.  The subarrays with size 3 or more ([0,1,5], [1,5,3], [0,1,5,3]) then all have a maximum element >= 5. This requires 2 operations."
                    },
                    {
                        "input": "nums = [1,1,2], k = 1",
                        "output": "0",
                        "explanation": "The array is already beautiful as the only subarray of size 3 or more, [1,1,2], has a maximum element (2) which is greater than k (1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "There needs to be at least one value among <code>3</code> consecutive values in the array that is greater than or equal to <code>k</code>.",
            "The problem can be solved using dynamic programming.",
            "Let <code>dp[i]</code> be the minimum number of increment operations required to make the subarray consisting of the first <code>i</code> values beautiful, while also having the value at <code>nums[i] >= k</code>.",
            "<code>dp[0] = max(0, k - nums[0])</code>, <code>dp[1] = max(0, k - nums[1])</code>, and <code>dp[2] = max(0, k - nums[2])</code>.",
            "<code>dp[i] = max(0, k - nums[i]) + min(dp[i - 1], dp[i - 2], dp[i - 3])</code> for <code>i</code> in the range <code>[3, n - 1]</code>.",
            "The answer to the problem is <code>min(dp[n - 1], dp[n - 2], dp[n - 3])</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ]
    }
}