{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "945",
            "title": "Minimum Increment to Make Array Unique",
            "titleSlug": "minimum-increment-to-make-array-unique",
            "content": "<p>You are given an integer array <code>nums</code>. In one move, you can pick an index <code>i</code> where <code>0 &lt;= i &lt; nums.length</code> and increment <code>nums[i]</code> by <code>1</code>.</p>\n\n<p>Return <em>the minimum number of moves to make every value in </em><code>nums</code><em> <strong>unique</strong></em>.</p>\n\n<p>The test cases are generated so that the answer fits in a 32-bit integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> After 1 move, the array could be [1, 2, 3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,2,1,7]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1752,
            "dislikes": 54,
            "similarQuestions": "[{\"title\": \"Maximum Product After K Increments\", \"titleSlug\": \"maximum-product-after-k-increments\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"84.3K\", \"totalSubmission\": \"161.7K\", \"totalAcceptedRaw\": 84348, \"totalSubmissionRaw\": 161652, \"acRate\": \"52.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, determine the minimum number of moves required to make all values in `nums` unique. A move consists of selecting an index `i` (where `0 <= i < nums.length`) and incrementing `nums[i]` by 1.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "0 <= nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1,2,2]",
                        "output": "1",
                        "explanation": "To make the array unique, increment the last '2' to '3', resulting in [1, 2, 3]. This requires 1 move."
                    },
                    {
                        "input": "[3,2,1,2,1,7]",
                        "output": "6",
                        "explanation": "One possible unique array after 6 moves is [3, 4, 1, 2, 5, 7]. It can be proven that achieving unique values with fewer than 6 moves is impossible."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-product-after-k-increments",
                "title": "Maximum Product After K Increments",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minIncrementForUnique(vector<int>& nums) {\n    int ans = 0;\n    int minAvailable = 0;\n\n    std::ranges::sort(nums);\n\n    for (const int num : nums) {\n      ans += max(minAvailable - num, 0);\n      minAvailable = max(minAvailable, num) + 1;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minIncrementForUnique(int[] nums) {\n    int ans = 0;\n    int minAvailable = 0;\n\n    Arrays.sort(nums);\n\n    for (final int num : nums) {\n      ans += Math.max(minAvailable - num, 0);\n      minAvailable = Math.max(minAvailable, num) + 1;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minIncrementForUnique(self, nums: List[int]) -> int:\n    ans = 0\n    minAvailable = 0\n\n    for num in sorted(nums):\n      ans += max(minAvailable - num, 0)\n      minAvailable = max(minAvailable, num) + 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}