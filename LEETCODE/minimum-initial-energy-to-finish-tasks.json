{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1665",
            "title": "Minimum Initial Energy to Finish Tasks",
            "titleSlug": "minimum-initial-energy-to-finish-tasks",
            "content": "<p>You are given an array <code>tasks</code> where <code>tasks[i] = [actual<sub>i</sub>, minimum<sub>i</sub>]</code>:</p>\n\n<ul>\n\t<li><code>actual<sub>i</sub></code> is the actual amount of energy you <strong>spend to finish</strong> the <code>i<sup>th</sup></code> task.</li>\n\t<li><code>minimum<sub>i</sub></code> is the minimum amount of energy you <strong>require to begin</strong> the <code>i<sup>th</sup></code> task.</li>\n</ul>\n\n<p>For example, if the task is <code>[10, 12]</code> and your current energy is <code>11</code>, you cannot start this task. However, if your current energy is <code>13</code>, you can complete this task, and your energy will be <code>3</code> after finishing it.</p>\n\n<p>You can finish the tasks in <strong>any order</strong> you like.</p>\n\n<p>Return <em>the <strong>minimum</strong> initial amount of energy you will need</em> <em>to finish all the tasks</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [[1,2],[2,4],[4,8]]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong>\nStarting with 8 energy, we finish the tasks in the following order:\n    - 3rd task. Now energy = 8 - 4 = 4.\n    - 2nd task. Now energy = 4 - 2 = 2.\n    - 1st task. Now energy = 2 - 1 = 1.\nNotice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]\n<strong>Output:</strong> 32\n<strong>Explanation:</strong>\nStarting with 32 energy, we finish the tasks in the following order:\n    - 1st task. Now energy = 32 - 1 = 31.\n    - 2nd task. Now energy = 31 - 2 = 29.\n    - 3rd task. Now energy = 29 - 10 = 19.\n    - 4th task. Now energy = 19 - 10 = 9.\n    - 5th task. Now energy = 9 - 8 = 1.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]\n<strong>Output:</strong> 27\n<strong>Explanation:</strong>\nStarting with 27 energy, we finish the tasks in the following order:\n    - 5th task. Now energy = 27 - 5 = 22.\n    - 2nd task. Now energy = 22 - 2 = 20.\n    - 3rd task. Now energy = 20 - 3 = 17.\n    - 1st task. Now energy = 17 - 1 = 16.\n    - 4th task. Now energy = 16 - 4 = 12.\n    - 6th task. Now energy = 12 - 6 = 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= actual<sub>\u200bi</sub>&nbsp;&lt;= minimum<sub>i</sub>&nbsp;&lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 557,
            "dislikes": 34,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.2K\", \"totalSubmission\": \"28.3K\", \"totalAcceptedRaw\": 16162, \"totalSubmissionRaw\": 28262, \"acRate\": \"57.2%\"}",
            "hints": [
                "We can easily figure that the f(x) : does x solve this array is monotonic so binary Search is doable",
                "Figure a sorting pattern"
            ],
            "rephrased": {
                "body": "You are given an array `tasks` where `tasks[i] = [actual_i, minimum_i]`:\n\n* `actual_i` is the amount of energy you spend to finish the i-th task.\n* `minimum_i` is the minimum amount of energy you require to begin the i-th task.\n\nYou can finish the tasks in any order you like.\n\nReturn the minimum initial amount of energy you will need to finish all the tasks.",
                "constraints": [
                    "1 <= tasks.length <= 10^5",
                    "1 <= actual_i <= minimum_i <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[2,4],[4,8]]",
                        "output": "8",
                        "explanation": "The minimum initial energy required is 8. An optimal task execution order is: task 3, task 2, task 1."
                    },
                    {
                        "input": "[[1,3],[2,4],[10,11],[10,12],[8,9]]",
                        "output": "32",
                        "explanation": "The minimum initial energy required is 32. An optimal task execution order is: task 1, task 2, task 3, task 4, task 5."
                    },
                    {
                        "input": "[[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]",
                        "output": "27",
                        "explanation": "The minimum initial energy required is 27. An optimal task execution order is: task 5, task 2, task 3, task 1, task 4, task 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "We can easily figure that the f(x) : does x solve this array is monotonic so binary Search is doable",
            "Figure a sorting pattern"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumEffort(vector<vector<int>>& tasks) {\n    int ans = 0;\n    int prevSaved = 0;\n\n    sort(tasks.begin(), tasks.end(),\n         [](const vector<int>& a, const vector<int>& b) {\n      return a[1] - a[0] > b[1] - b[0];\n    });\n\n    for (const vector<int>& task : tasks) {\n      const int actual = task[0];\n      const int minimum = task[1];\n      if (prevSaved < minimum) {\n        ans += minimum - prevSaved;\n        prevSaved = minimum - actual;\n      } else {\n        prevSaved -= actual;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumEffort(int[][] tasks) {\n    int ans = 0;\n    int prevSaved = 0;\n\n    Arrays.sort(tasks, (a, b) -> (b[1] - b[0]) - (a[1] - a[0]));\n\n    for (int[] task : tasks) {\n      final int actual = task[0];\n      final int minimum = task[1];\n      if (prevSaved < minimum) {\n        ans += minimum - prevSaved;\n        prevSaved = minimum - actual;\n      } else {\n        prevSaved -= actual;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumEffort(self, tasks: List[List[int]]) -> int:\n    ans = 0\n    prevSaved = 0\n\n    for actual, minimum in sorted(tasks, key=lambda x: x[0] - x[1]):\n      if prevSaved < minimum:\n        ans += minimum - prevSaved\n        prevSaved = minimum - actual\n      else:\n        prevSaved -= actual\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}