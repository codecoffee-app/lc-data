{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1312",
            "title": "Minimum Insertion Steps to Make a String Palindrome",
            "titleSlug": "minimum-insertion-steps-to-make-a-string-palindrome",
            "content": "<p>Given a string <code>s</code>. In one step you can insert any character at any index of the string.</p>\n\n<p>Return <em>the minimum number of steps</em> to make <code>s</code>&nbsp;palindrome.</p>\n\n<p>A&nbsp;<b>Palindrome String</b>&nbsp;is one that reads the same backward as well as forward.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;zzazz&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The string &quot;zzazz&quot; is already palindrome we do not need any insertions.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;mbadm&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> String can be &quot;mbdadbm&quot; or &quot;mdbabdm&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Inserting 5 characters the string becomes &quot;leetcodocteel&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4796,
            "dislikes": 61,
            "similarQuestions": "[{\"title\": \"Minimum Number of Moves to Make Palindrome\", \"titleSlug\": \"minimum-number-of-moves-to-make-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"149.6K\", \"totalSubmission\": \"213.7K\", \"totalAcceptedRaw\": 149592, \"totalSubmissionRaw\": 213672, \"acRate\": \"70.0%\"}",
            "hints": [
                "Is dynamic programming suitable for this problem ?",
                "If we know the longest palindromic sub-sequence is x and the length of the string is n then, what is the answer to this problem? It is n - x as we need n - x insertions to make the remaining characters also palindrome."
            ],
            "rephrased": {
                "body": "Given a string `s`, determine the minimum number of character insertions required to transform it into a palindrome. You can insert any character at any index in the string. A palindrome is a string that reads the same forwards and backward.",
                "constraints": [
                    "1 <= s.length <= 500",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "zzazz",
                        "output": 0,
                        "explanation": "The string 'zzazz' is already a palindrome, so no insertions are needed."
                    },
                    {
                        "input": "mbadm",
                        "output": 2,
                        "explanation": "Two possible palindromes after insertion are 'mbdadbm' and 'mdbabdm'. Therefore, two insertions are needed."
                    },
                    {
                        "input": "leetcode",
                        "output": 5,
                        "explanation": "One possible palindrome after insertion is 'leetcodocteel'.  Five insertions are needed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-moves-to-make-palindrome",
                "title": "Minimum Number of Moves to Make Palindrome",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Is dynamic programming suitable for this problem ?",
            "If we know the longest palindromic sub-sequence is x and the length of the string is n then, what is the answer to this problem? It is n - x as we need n - x insertions to make the remaining characters also palindrome."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minInsertions(string s) {\n    return s.length() - longestPalindromeSubseq(s);\n  }\n\n private:\n  // Same as 516. Longest Palindromic Subsequence\n  int longestPalindromeSubseq(const string& s) {\n    const int n = s.length();\n    // dp[i][j] := LPS's length in s[i..j]\n    vector<vector<int>> dp(n, vector<int>(n));\n\n    for (int i = 0; i < n; ++i)\n      dp[i][i] = 1;\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        const int j = i + d;\n        if (s[i] == s[j])\n          dp[i][j] = 2 + dp[i + 1][j - 1];\n        else\n          dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n      }\n\n    return dp[0][n - 1];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minInsertions(String s) {\n    return s.length() - longestPalindromeSubseq(s);\n  }\n\n  // Same as 516. Longest Palindromic Subsequence\n  public int longestPalindromeSubseq(String s) {\n    final int n = s.length();\n    // dp[i][j] := LPS's length in s[i..j]\n    int[][] dp = new int[n][n];\n\n    for (int i = 0; i < n; ++i)\n      dp[i][i] = 1;\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        final int j = i + d;\n        if (s.charAt(i) == s.charAt(j))\n          dp[i][j] = 2 + dp[i + 1][j - 1];\n        else\n          dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n\n    return dp[0][n - 1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minInsertions(self, s: str) -> int:\n    return len(s) - self._longestPalindromeSubseq(s)\n\n  # Same as 516. Longest Palindromic Subsequence\n  def _longestPalindromeSubseq(self, s: str) -> int:\n    n = len(s)\n    # dp[i][j] := LPS's length in s[i..j]\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n      dp[i][i] = 1\n\n    for d in range(1, n):\n      for i in range(n - d):\n        j = i + d\n        if s[i] == s[j]:\n          dp[i][j] = 2 + dp[i + 1][j - 1]\n        else:\n          dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n",
                "lang_text": "py"
            }
        }
    }
}