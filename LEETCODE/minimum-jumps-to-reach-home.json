{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1654",
            "title": "Minimum Jumps to Reach Home",
            "titleSlug": "minimum-jumps-to-reach-home",
            "content": "<p>A certain bug&#39;s home is on the x-axis at position <code>x</code>. Help them get there from position <code>0</code>.</p>\n\n<p>The bug jumps according to the following rules:</p>\n\n<ul>\n\t<li>It can jump exactly <code>a</code> positions <strong>forward</strong> (to the right).</li>\n\t<li>It can jump exactly <code>b</code> positions <strong>backward</strong> (to the left).</li>\n\t<li>It cannot jump backward twice in a row.</li>\n\t<li>It cannot jump to any <code>forbidden</code> positions.</li>\n</ul>\n\n<p>The bug may jump forward <strong>beyond</strong> its home, but it <strong>cannot jump</strong> to positions numbered with <strong>negative</strong> integers.</p>\n\n<p>Given an array of integers <code>forbidden</code>, where <code>forbidden[i]</code> means that the bug cannot jump to the position <code>forbidden[i]</code>, and integers <code>a</code>, <code>b</code>, and <code>x</code>, return <em>the minimum number of jumps needed for the bug to reach its home</em>. If there is no possible sequence of jumps that lands the bug on position <code>x</code>, return <code>-1.</code></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 3 jumps forward (0 -&gt; 3 -&gt; 6 -&gt; 9) will get the bug home.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One jump forward (0 -&gt; 16) then one jump backward (16 -&gt; 7) will get the bug home.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= forbidden.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= a, b, forbidden[i] &lt;= 2000</code></li>\n\t<li><code>0 &lt;= x &lt;= 2000</code></li>\n\t<li>All the elements in <code>forbidden</code> are distinct.</li>\n\t<li>Position <code>x</code> is not forbidden.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1438,
            "dislikes": 259,
            "similarQuestions": "[{\"title\": \"Reachable Nodes With Restrictions\", \"titleSlug\": \"reachable-nodes-with-restrictions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Jumps to Reach the Last Index\", \"titleSlug\": \"maximum-number-of-jumps-to-reach-the-last-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"40.5K\", \"totalSubmission\": \"138.1K\", \"totalAcceptedRaw\": 40502, \"totalSubmissionRaw\": 138055, \"acRate\": \"29.3%\"}",
            "hints": [
                "Think of the line as a graph",
                "to handle the no double back jumps condition you can handle it by holding the state of your previous jump"
            ],
            "rephrased": {
                "body": "A bug starts at position 0 on the x-axis and wants to reach position `x`.  The bug can jump `a` positions forward (right) or `b` positions backward (left). The bug cannot jump backward twice in a row and cannot land on any forbidden positions. The bug can jump forward beyond `x`, but cannot jump to negative positions. Find the minimum number of jumps to reach `x`.",
                "constraints": [
                    "1 <= forbidden.length <= 1000",
                    "1 <= a, b, forbidden[i] <= 2000",
                    "0 <= x <= 2000",
                    "All the elements in forbidden are distinct.",
                    "Position x is not forbidden."
                ],
                "testcases": [
                    {
                        "input": "forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9",
                        "output": "3",
                        "explanation": "The bug can reach its home with three forward jumps: 0 -> 3 -> 6 -> 9."
                    },
                    {
                        "input": "forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11",
                        "output": "-1",
                        "explanation": "It is impossible for the bug to reach its home given the forbidden positions and jump lengths."
                    },
                    {
                        "input": "forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7",
                        "output": "2",
                        "explanation": "The bug can reach its home with one forward and one backward jump: 0 -> 16 -> 7."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "reachable-nodes-with-restrictions",
                "title": "Reachable Nodes With Restrictions",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-jumps-to-reach-the-last-index",
                "title": "Maximum Number of Jumps to Reach the Last Index",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think of the line as a graph",
            "to handle the no double back jumps condition you can handle it by holding the state of your previous jump"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "enum class Direction { kForward, kBackward };\n\nclass Solution {\n public:\n  int minimumJumps(vector<int>& forbidden, int a, int b, int x) {\n    int furthest = x + a + b;\n    unordered_set<int> seenForward;\n    unordered_set<int> seenBackward;\n\n    for (const int pos : forbidden) {\n      seenForward.insert(pos);\n      seenBackward.insert(pos);\n      furthest = max(furthest, pos + a + b);\n    }\n\n    // (direction, position)\n    queue<pair<Direction, int>> q{{{Direction::kForward, 0}}};\n\n    for (int ans = 0; !q.empty(); ++ans)\n      for (int sz = q.size(); sz > 0; --sz) {\n        const auto [dir, pos] = q.front();\n        q.pop();\n        if (pos == x)\n          return ans;\n        const int forward = pos + a;\n        const int backward = pos - b;\n        if (forward <= furthest && seenForward.insert(forward).second)\n          q.emplace(Direction::kForward, forward);\n        // It cannot jump backward twice in a row.\n        if (dir == Direction::kForward && backward >= 0 &&\n            seenBackward.insert(backward).second)\n          q.emplace(Direction::kBackward, backward);\n      }\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "enum Direction { kForward, kBackward }\n\nclass Solution {\n  public int minimumJumps(int[] forbidden, int a, int b, int x) {\n    int furthest = x + a + b;\n    Set<Integer> seenForward = new HashSet<>();\n    Set<Integer> seenBackward = new HashSet<>();\n\n    for (final int pos : forbidden) {\n      seenForward.add(pos);\n      seenBackward.add(pos);\n      furthest = Math.max(furthest, pos + a + b);\n    }\n\n    // (direction, position)\n    Queue<Pair<Direction, Integer>> q =\n        new ArrayDeque<>(Arrays.asList(new Pair<>(Direction.kForward, 0)));\n\n    for (int ans = 0; !q.isEmpty(); ++ans)\n      for (int sz = q.size(); sz > 0; --sz) {\n        Direction dir = q.peek().getKey();\n        final int pos = q.poll().getValue();\n        if (pos == x)\n          return ans;\n        final int forward = pos + a;\n        final int backward = pos - b;\n        if (forward <= furthest && seenForward.add(forward))\n          q.offer(new Pair<>(Direction.kForward, forward));\n        // It cannot jump backward twice in a row.\n        if (dir == Direction.kForward && backward >= 0 && seenBackward.add(backward))\n          q.offer(new Pair<>(Direction.kBackward, backward));\n      }\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from enum import Enum\n\n\nclass Direction(Enum):\n  kForward = 0\n  kBackward = 1\n\n\nclass Solution:\n  def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:\n    furthest = max(x + a + b, max(pos + a + b for pos in forbidden))\n    seenForward = {pos for pos in forbidden}\n    seenBackward = {pos for pos in forbidden}\n\n    # (direction, position)\n    q = collections.deque([(Direction.kForward, 0)])\n\n    ans = 0\n    while q:\n      for _ in range(len(q)):\n        dir, pos = q.popleft()\n        if pos == x:\n          return ans\n        forward = pos + a\n        backward = pos - b\n        if forward <= furthest and forward not in seenForward:\n          seenForward.add(forward)\n          q.append((Direction.kForward, forward))\n        # It cannot jump backward twice in a row.\n        if dir == Direction.kForward and backward >= 0 and backward not in seenBackward:\n          seenBackward.add(backward)\n          q.append((Direction.kBackward, backward))\n      ans += 1\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}