{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3138",
            "title": "Minimum Length of Anagram Concatenation",
            "titleSlug": "minimum-length-of-anagram-concatenation",
            "content": "<p>You are given a string <code>s</code>, which is known to be a concatenation of <strong>anagrams</strong> of some string <code>t</code>.</p>\n\n<p>Return the <strong>minimum</strong> possible length of the string <code>t</code>.</p>\n\n<p>An <strong>anagram</strong> is formed by rearranging the letters of a string. For example, &quot;aab&quot;, &quot;aba&quot;, and, &quot;baa&quot; are anagrams of &quot;aab&quot;.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abba&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>One possible string <code>t</code> could be <code>&quot;ba&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;cdef&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>One possible string <code>t</code> could be <code>&quot;cdef&quot;</code>, notice that <code>t</code> can be equal to <code>s</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consist only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 162,
            "dislikes": 90,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.5K\", \"totalSubmission\": \"62.5K\", \"totalAcceptedRaw\": 26549, \"totalSubmissionRaw\": 62507, \"acRate\": \"42.5%\"}",
            "hints": [
                "The answer should be a divisor of <code>s.length</code>.",
                "Check each candidate naively."
            ],
            "rephrased": {
                "body": "Given a string `s` which is formed by concatenating anagrams of some string `t`, determine the minimum possible length of `t`. An anagram is a rearrangement of the letters of a string.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "abba",
                        "output": "2",
                        "explanation": "One possible string `t` could be `ba`. The string 'abba' is a concatenation of the anagrams 'ba' and 'ab'."
                    },
                    {
                        "input": "cdef",
                        "output": "4",
                        "explanation": "One possible string `t` could be `cdef`. In this case, `t` can be equal to `s`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The answer should be a divisor of <code>s.length</code>.",
            "Check each candidate naively."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minAnagramLength(string s) {\n    const int n = s.length();\n    for (int k = 1; k <= n; ++k)\n      if (n % k == 0 && canFormAnagram(s, k))\n        return k;\n    return n;\n  }\n\n private:\n  // Returns true if we can concatenate an anagram of length k to s.\n  bool canFormAnagram(const string& s, int k) {\n    const int n = s.length();\n    vector<int> anagramCount(26);\n    vector<int> runningCount(26);\n    for (int i = 0; i < k; ++i)\n      ++anagramCount[s[i] - 'a'];\n    for (int i = k; i < n; ++i) {\n      ++runningCount[s[i] - 'a'];\n      if (i % k == k - 1) {\n        if (runningCount != anagramCount)\n          return false;\n        fill(runningCount.begin(), runningCount.end(), 0);\n      }\n    }\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minAnagramLength(String s) {\n    final int n = s.length();\n    for (int k = 1; k <= n; ++k)\n      if (n % k == 0 && canFormAnagram(s, k))\n        return k;\n    return n;\n  }\n\n  // Returns true if we can concatenate an anagram of length k to s.\n  private boolean canFormAnagram(String s, int k) {\n    final int n = s.length();\n    int[] anagramCount = new int[26];\n    int[] runningCount = new int[26];\n    for (int i = 0; i < k; ++i)\n      ++anagramCount[s.charAt(i) - 'a'];\n    for (int i = k; i < n; ++i) {\n      ++runningCount[s.charAt(i) - 'a'];\n      if (i % k == k - 1) {\n        if (!Arrays.equals(runningCount, anagramCount))\n          return false;\n        Arrays.fill(runningCount, 0);\n      }\n    }\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minAnagramLength(self, s: str) -> int:\n    n = len(s)\n    for k in range(1, n + 1):\n      if n % k == 0 and self._canFormAnagram(s, k):\n        return k\n    return n\n\n  def _canFormAnagram(self, s: str, k: int) -> bool:\n    \"\"\"Returns True if we can concatenate an anagram of length k to s.\"\"\"\n    anagramCount = collections.Counter(s[:k])\n    return all(collections.Counter(s[i:i + k]) == anagramCount\n               for i in range(k, len(s), k))\n",
                "lang_text": "py"
            }
        }
    }
}