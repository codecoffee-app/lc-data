{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1750",
            "title": "Minimum Length of String After Deleting Similar Ends",
            "titleSlug": "minimum-length-of-string-after-deleting-similar-ends",
            "content": "<p>Given a string <code>s</code> consisting only of characters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code>. You are asked to apply the following algorithm on the string any number of times:</p>\n\n<ol>\n\t<li>Pick a <strong>non-empty</strong> prefix from the string <code>s</code> where all the characters in the prefix are equal.</li>\n\t<li>Pick a <strong>non-empty</strong> suffix from the string <code>s</code> where all the characters in this suffix are equal.</li>\n\t<li>The prefix and the suffix should not intersect at any index.</li>\n\t<li>The characters from the prefix and suffix must be the same.</li>\n\t<li>Delete both the prefix and the suffix.</li>\n</ol>\n\n<p>Return <em>the <strong>minimum length</strong> of </em><code>s</code> <em>after performing the above operation any number of times (possibly zero times)</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ca&quot;\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>You can&#39;t remove any characters, so the string stays as is.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cabaabac&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> An optimal sequence of operations is:\n- Take prefix = &quot;c&quot; and suffix = &quot;c&quot; and remove them, s = &quot;abaaba&quot;.\n- Take prefix = &quot;a&quot; and suffix = &quot;a&quot; and remove them, s = &quot;baab&quot;.\n- Take prefix = &quot;b&quot; and suffix = &quot;b&quot; and remove them, s = &quot;aa&quot;.\n- Take prefix = &quot;a&quot; and suffix = &quot;a&quot; and remove them, s = &quot;&quot;.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabccabba&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> An optimal sequence of operations is:\n- Take prefix = &quot;aa&quot; and suffix = &quot;a&quot; and remove them, s = &quot;bccabb&quot;.\n- Take prefix = &quot;b&quot; and suffix = &quot;bb&quot; and remove them, s = &quot;cca&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> only consists of characters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 459,
            "dislikes": 30,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.1K\", \"totalSubmission\": \"49.3K\", \"totalAcceptedRaw\": 22084, \"totalSubmissionRaw\": 49301, \"acRate\": \"44.8%\"}",
            "hints": [
                "If both ends have distinct characters, no more operations can be made. Otherwise, the only operation is to remove all of the same characters from both ends. We will do this as many times as we can.",
                "Note that if the length is equal 1 the answer is 1"
            ],
            "rephrased": {
                "body": "Given a string `s` containing only the characters 'a', 'b', and 'c', you can perform the following operations repeatedly:\n\n1.  Select a non-empty prefix of `s` where all characters in the prefix are identical.\n2.  Select a non-empty suffix of `s` where all characters in the suffix are identical.\n3.  The prefix and suffix must not overlap.\n4.  The characters in the prefix and suffix must be the same.\n5.  Remove both the prefix and the suffix.\n\nDetermine the minimum possible length of `s` after performing these operations any number of times.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s only consists of characters 'a', 'b', and 'c'."
                ],
                "testcases": [
                    {
                        "input": "ca",
                        "output": 2,
                        "explanation": "No characters can be removed, so the string remains unchanged."
                    },
                    {
                        "input": "cabaabac",
                        "output": 0,
                        "explanation": "An optimal sequence of operations is:\n- Remove prefix \"c\" and suffix \"c\", resulting in s = \"abaaba\".\n- Remove prefix \"a\" and suffix \"a\", resulting in s = \"baab\".\n- Remove prefix \"b\" and suffix \"b\", resulting in s = \"aa\".\n- Remove prefix \"a\" and suffix \"a\", resulting in s = \"\"."
                    },
                    {
                        "input": "aabccabba",
                        "output": 3,
                        "explanation": "An optimal sequence of operations is:\n- Remove prefix \"aa\" and suffix \"a\", resulting in s = \"bccabb\".\n- Remove prefix \"b\" and suffix \"bb\", resulting in s = \"cca\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "If both ends have distinct characters, no more operations can be made. Otherwise, the only operation is to remove all of the same characters from both ends. We will do this as many times as we can.",
            "Note that if the length is equal 1 the answer is 1"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ]
    }
}