{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "462",
            "title": "Minimum Moves to Equal Array Elements II",
            "titleSlug": "minimum-moves-to-equal-array-elements-ii",
            "content": "<p>Given an integer array <code>nums</code> of size <code>n</code>, return <em>the minimum number of moves required to make all array elements equal</em>.</p>\n\n<p>In one move, you can increment or decrement an element of the array by <code>1</code>.</p>\n\n<p>Test cases are designed so that the answer will fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nOnly two moves are needed (remember each move increments or decrements one element):\n[<u>1</u>,2,3]  =&gt;  [2,2,<u>3</u>]  =&gt;  [2,2,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,10,2,9]\n<strong>Output:</strong> 16\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3260,
            "dislikes": 120,
            "similarQuestions": "[{\"title\": \"Best Meeting Point\", \"titleSlug\": \"best-meeting-point\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Moves to Equal Array Elements\", \"titleSlug\": \"minimum-moves-to-equal-array-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make a Uni-Value Grid\", \"titleSlug\": \"minimum-operations-to-make-a-uni-value-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Removing Minimum Number of Magic Beans\", \"titleSlug\": \"removing-minimum-number-of-magic-beans\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Make Array Equal\", \"titleSlug\": \"minimum-cost-to-make-array-equal\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make All Array Elements Equal\", \"titleSlug\": \"minimum-operations-to-make-all-array-elements-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Make Array Equalindromic\", \"titleSlug\": \"minimum-cost-to-make-array-equalindromic\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"172.8K\", \"totalSubmission\": \"288.3K\", \"totalAcceptedRaw\": 172813, \"totalSubmissionRaw\": 288274, \"acRate\": \"59.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` of size `n`, determine the minimum number of moves required to equalize all array elements. In a single move, any element can be incremented or decremented by 1.",
                "constraints": [
                    "n == nums.length",
                    "1 <= nums.length <= 10^5",
                    "-10^9 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3]",
                        "output": "2",
                        "explanation": "The array can be equalized to [2, 2, 2] in two moves. One possible sequence of moves is: [1, 2, 3] -> [2, 2, 3] -> [2, 2, 2]."
                    },
                    {
                        "input": "[1,10,2,9]",
                        "output": "16",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "best-meeting-point",
                "title": "Best Meeting Point",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-moves-to-equal-array-elements",
                "title": "Minimum Moves to Equal Array Elements",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-make-a-uni-value-grid",
                "title": "Minimum Operations to Make a Uni-Value Grid",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "removing-minimum-number-of-magic-beans",
                "title": "Removing Minimum Number of Magic Beans",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-make-array-equal",
                "title": "Minimum Cost to Make Array Equal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-make-all-array-elements-equal",
                "title": "Minimum Operations to Make All Array Elements Equal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-cost-to-make-array-equalindromic",
                "title": "Minimum Cost to Make Array Equalindromic",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minMoves2(vector<int>& nums) {\n    const int n = nums.size();\n    nth_element(nums.begin(), nums.begin() + n / 2, nums.end());\n    const int median = nums[n / 2];\n    return accumulate(nums.begin(), nums.end(), 0,\n                      [&](int a, int b) { return a + abs(b - median); });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minMoves2(int[] nums) {\n    final int n = nums.length;\n    final int median = quickSelect(nums, 0, n - 1, (n + 1) / 2);\n    int ans = 0;\n\n    for (final int num : nums)\n      ans += Math.abs(num - median);\n\n    return ans;\n  }\n\n  private int quickSelect(int[] nums, int l, int r, int k) {\n    final int randIndex = new Random().nextInt(r - l + 1) + l;\n    swap(nums, randIndex, r);\n    final int pivot = nums[r];\n\n    int nextSwapped = l;\n    for (int i = l; i < r; ++i)\n      if (nums[i] <= pivot)\n        swap(nums, nextSwapped++, i);\n    swap(nums, nextSwapped, r);\n\n    final int count = nextSwapped - l + 1;\n    if (count == k)\n      return nums[nextSwapped];\n    if (count > k)\n      return quickSelect(nums, l, nextSwapped - 1, k);\n    return quickSelect(nums, nextSwapped + 1, r, k - count);\n  }\n\n  private void swap(int[] nums, int i, int j) {\n    final int temp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = temp;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "import statistics\n\n\nclass Solution:\n  def minMoves2(self, nums: List[int]) -> int:\n    median = int(statistics.median(nums))\n    return sum(abs(num - median) for num in nums)\n",
                "lang_text": "py"
            }
        }
    }
}