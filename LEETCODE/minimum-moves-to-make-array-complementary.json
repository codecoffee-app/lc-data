{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1674",
            "title": "Minimum Moves to Make Array Complementary",
            "titleSlug": "minimum-moves-to-make-array-complementary",
            "content": "<p>You are given an integer array <code>nums</code> of <strong>even</strong> length <code>n</code> and an integer <code>limit</code>. In one move, you can replace any integer from <code>nums</code> with another integer between <code>1</code> and <code>limit</code>, inclusive.</p>\n\n<p>The array <code>nums</code> is <strong>complementary</strong> if for all indices <code>i</code> (<strong>0-indexed</strong>), <code>nums[i] + nums[n - 1 - i]</code> equals the same number. For example, the array <code>[1,2,3,4]</code> is complementary because for all indices <code>i</code>, <code>nums[i] + nums[n - 1 - i] = 5</code>.</p>\n\n<p>Return the <em><strong>minimum</strong> number of moves required to make </em><code>nums</code><em> <strong>complementary</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,4,3], limit = 4\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In 1 move, you can change nums to [1,2,<u>2</u>,3] (underlined elements are changed).\nnums[0] + nums[3] = 1 + 3 = 4.\nnums[1] + nums[2] = 2 + 2 = 4.\nnums[2] + nums[1] = 2 + 2 = 4.\nnums[3] + nums[0] = 3 + 1 = 4.\nTherefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,1], limit = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In 2 moves, you can change nums to [<u>2</u>,2,2,<u>2</u>]. You cannot change any number to 3 since 3 &gt; limit.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,2], limit = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> nums is already complementary.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>2 &lt;= n&nbsp;&lt;=&nbsp;10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i]&nbsp;&lt;= limit &lt;=&nbsp;10<sup>5</sup></code></li>\n\t<li><code>n</code> is even.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 628,
            "dislikes": 74,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.3K\", \"totalSubmission\": \"21.2K\", \"totalAcceptedRaw\": 8276, \"totalSubmissionRaw\": 21153, \"acRate\": \"39.1%\"}",
            "hints": [
                "Given a target sum x, each pair of nums[i] and nums[n-1-i] would either need 0, 1, or 2 modifications.",
                "Can you find the optimal target sum x value such that the sum of modifications is minimized?",
                "Create a difference array to efficiently sum all the modifications."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` of even length `n` and an integer `limit`, determine the minimum number of moves required to make `nums` complementary. In one move, you can replace any element of `nums` with an integer between 1 and `limit` (inclusive). An array is considered complementary if for all indices `i` (0-indexed), the sum `nums[i] + nums[n - 1 - i]` is equal to the same constant value.",
                "constraints": [
                    "n == nums.length",
                    "2 <= n <= 10^5",
                    "1 <= nums[i] <= limit <= 10^5",
                    "n is even"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,4,3], limit = 4",
                        "output": "1",
                        "explanation": "By changing nums to [1,2,2,3], we make it complementary.  nums[0] + nums[3] = 1 + 3 = 4 and nums[1] + nums[2] = 2 + 2 = 4. All other pairs sum to 4 as well."
                    },
                    {
                        "input": "nums = [1,2,2,1], limit = 2",
                        "output": "2",
                        "explanation": "By changing nums to [2,2,2,2], we make it complementary. Since all numbers must be between 1 and limit inclusive, we cannot change any number to a value greater than 2."
                    },
                    {
                        "input": "nums = [1,2,1,2], limit = 2",
                        "output": "0",
                        "explanation": "The array is already complementary because nums[0] + nums[3] = 1+2 = 3 and nums[1] + nums[2] = 2+1 = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Given a target sum x, each pair of nums[i] and nums[n-1-i] would either need 0, 1, or 2 modifications.",
            "Can you find the optimal target sum x value such that the sum of modifications is minimized?",
            "Create a difference array to efficiently sum all the modifications."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minMoves(vector<int>& nums, int limit) {\n    const int n = nums.size();\n    int ans = n;\n    // delta[i] := # of moves needed when target goes from i - 1 to i\n    vector<int> delta(limit * 2 + 2);\n\n    for (int i = 0; i < n / 2; ++i) {\n      const int a = nums[i];\n      const int b = nums[n - 1 - i];\n      --delta[min(a, b) + 1];\n      --delta[a + b];\n      ++delta[a + b + 1];\n      ++delta[max(a, b) + limit + 1];\n    }\n\n    // Initially, we need `moves` when the target is 2.\n    for (int i = 2, moves = n; i <= limit * 2; ++i) {\n      moves += delta[i];\n      ans = min(ans, moves);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minMoves(int[] nums, int limit) {\n    final int n = nums.length;\n    int ans = n;\n    // delta[i] := # of moves needed when target goes from i - 1 to i\n    int[] delta = new int[limit * 2 + 2];\n\n    for (int i = 0; i < n / 2; ++i) {\n      final int a = nums[i];\n      final int b = nums[n - 1 - i];\n      --delta[Math.min(a, b) + 1];\n      --delta[a + b];\n      ++delta[a + b + 1];\n      ++delta[Math.max(a, b) + limit + 1];\n    }\n\n    // Initially, we need `moves` when the target is 2.\n    for (int i = 2, moves = n; i <= limit * 2; ++i) {\n      moves += delta[i];\n      ans = Math.min(ans, moves);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minMoves(self, nums: List[int], limit: int) -> int:\n    n = len(nums)\n    ans = n\n    # delta[i] := # of moves needed when target goes from i - 1 to i\n    delta = [0] * (limit * 2 + 2)\n\n    for i in range(n // 2):\n      a = nums[i]\n      b = nums[n - 1 - i]\n      delta[min(a, b) + 1] -= 1\n      delta[a + b] -= 1\n      delta[a + b + 1] += 1\n      delta[max(a, b) + limit + 1] += 1\n\n    # Initially, we need `moves` when the target is 2.\n    moves = n\n    for i in range(2, limit * 2 + 1):\n      moves += delta[i]\n      ans = min(ans, moves)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}