{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1263",
            "title": "Minimum Moves to Move a Box to Their Target Location",
            "titleSlug": "minimum-moves-to-move-a-box-to-their-target-location",
            "content": "<p>A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.</p>\n\n<p>The game is represented by an <code>m x n</code> grid of characters <code>grid</code> where each element is a wall, floor, or box.</p>\n\n<p>Your task is to move the box <code>&#39;B&#39;</code> to the target position <code>&#39;T&#39;</code> under the following rules:</p>\n\n<ul>\n\t<li>The character <code>&#39;S&#39;</code> represents the player. The player can move up, down, left, right in <code>grid</code> if it is a floor (empty cell).</li>\n\t<li>The character <code>&#39;.&#39;</code> represents the floor which means a free cell to walk.</li>\n\t<li>The character<font face=\"monospace\">&nbsp;</font><code>&#39;#&#39;</code><font face=\"monospace\">&nbsp;</font>represents the wall which means an obstacle (impossible to walk there).</li>\n\t<li>There is only one box <code>&#39;B&#39;</code> and one target cell <code>&#39;T&#39;</code> in the <code>grid</code>.</li>\n\t<li>The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a <strong>push</strong>.</li>\n\t<li>The player cannot walk through the box.</li>\n</ul>\n\n<p>Return <em>the minimum number of <strong>pushes</strong> to move the box to the target</em>. If there is no way to reach the target, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/06/sample_1_1620.png\" style=\"width: 500px; height: 335px;\" />\n<pre>\n<strong>Input:</strong> grid = [[&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;T&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;#&quot;,&quot;#&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;S&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We return only the number of times the box is pushed.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;T&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;S&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;]]\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;T&quot;,&quot;.&quot;,&quot;.&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;#&quot;,&quot;B&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;S&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> push the box down, left, left, up and up.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 20</code></li>\n\t<li><code>grid</code> contains only characters <code>&#39;.&#39;</code>, <code>&#39;#&#39;</code>, <code>&#39;S&#39;</code>, <code>&#39;T&#39;</code>, or <code>&#39;B&#39;</code>.</li>\n\t<li>There is only one character <code>&#39;S&#39;</code>, <code>&#39;B&#39;</code>, and <code>&#39;T&#39;</code> in the <code>grid</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 833,
            "dislikes": 56,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.2K\", \"totalSubmission\": \"55.4K\", \"totalAcceptedRaw\": 27191, \"totalSubmissionRaw\": 55423, \"acRate\": \"49.1%\"}",
            "hints": [
                "We represent the search state as (player_row, player_col, box_row, box_col).",
                "You need to count only the number of pushes. Then inside of your BFS check if the box could be pushed (in any direction) given the current position of the player."
            ],
            "rephrased": {
                "body": "In the storekeeper game, your goal is to move a box ('B') to a target location ('T') within a warehouse represented by an m x n grid. The grid contains walls ('#'), floors ('.'), the player ('S'), the box ('B'), and the target ('T').  The player can move freely on the floor but cannot walk through walls or the box. The box can only be moved by standing next to it and pushing it into an adjacent free cell.  Return the minimum number of pushes required to move the box to the target. If it's impossible to reach the target, return -1.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 20",
                    "grid contains only characters '.', '#', 'S', 'T', or 'B'.",
                    "There is only one character 'S', 'B', and 'T' in the grid."
                ],
                "testcases": [
                    {
                        "input": "grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n               [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]",
                        "output": "3",
                        "explanation": "The box can be moved to the target with 3 pushes."
                    },
                    {
                        "input": "grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]",
                        "output": "-1",
                        "explanation": "It is impossible to move the box to the target location."
                    },
                    {
                        "input": "grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\".\",\".\",\"#\",\"#\"],\n               [\"#\",\".\",\"#\",\"B\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]",
                        "output": "5",
                        "explanation": "The box can be moved to the target with the sequence of pushes: down, left, left, up and up which is 5 pushes"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "We represent the search state as (player_row, player_col, box_row, box_col).",
            "You need to count only the number of pushes. Then inside of your BFS check if the box could be pushed (in any direction) given the current position of the player."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minPushBox(vector<vector<char>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    vector<int> box;\n    vector<int> player;\n    vector<int> target;\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] == 'B')\n          box = {i, j};\n        else if (grid[i][j] == 'S')\n          player = {i, j};\n        else if (grid[i][j] == 'T')\n          target = {i, j};\n\n    int ans = 0;\n    // (boxX, boxY, playerX, playerY)\n    queue<tuple<int, int, int, int>> q{\n        {{box[0], box[1], player[0], player[1]}}};\n    vector<vector<vector<vector<bool>>>> seen(\n        m, vector<vector<vector<bool>>>(\n               n, vector<vector<bool>>(m, vector<bool>(n))));\n    seen[box[0]][box[1]][player[0]][player[1]] = true;\n\n    while (!q.empty()) {\n      for (int sz = q.size(); sz > 0; --sz) {\n        const auto [boxX, boxY, playerX, playerY] = q.front();\n        q.pop();\n        if (boxX == target[0] && boxY == target[1])\n          return ans;\n        for (int k = 0; k < 4; ++k) {\n          const int nextBoxX = boxX + dirs[k];\n          const int nextBoxY = boxY + dirs[k + 1];\n          if (isInvalid(grid, nextBoxX, nextBoxY))\n            continue;\n          if (seen[nextBoxX][nextBoxY][boxX][boxY])\n            continue;\n          const int fromX = boxX + dirs[(k + 2) % 4];\n          const int fromY = boxY + dirs[(k + 3) % 4];\n          if (isInvalid(grid, fromX, fromY))\n            continue;\n          if (canGoTo(grid, playerX, playerY, fromX, fromY, boxX, boxY)) {\n            seen[nextBoxX][nextBoxY][boxX][boxY] = true;\n            q.emplace(nextBoxX, nextBoxY, boxX, boxY);\n          }\n        }\n      }\n      ++ans;\n    }\n\n    return -1;\n  }\n\n private:\n  const vector<int> dirs{0, 1, 0, -1, 0};\n\n  // Returns true if (playerX, playerY) can go to (fromX, fromY).\n  bool canGoTo(const vector<vector<char>>& grid, int playerX, int playerY,\n               int fromX, int fromY, int boxX, int boxY) {\n    queue<pair<int, int>> q{{{playerX, playerY}}};\n    vector<vector<bool>> seen(grid.size(), vector<bool>(grid[0].size()));\n    seen[playerX][playerY] = true;\n\n    while (!q.empty()) {\n      const auto [i, j] = q.front();\n      q.pop();\n      if (i == fromX && j == fromY)\n        return true;\n      for (int k = 0; k < 4; ++k) {\n        const int x = i + dirs[k];\n        const int y = j + dirs[k + 1];\n        if (isInvalid(grid, x, y))\n          continue;\n        if (seen[x][y])\n          continue;\n        if (x == boxX && y == boxY)\n          continue;\n        q.emplace(x, y);\n        seen[x][y] = true;\n      }\n    }\n\n    return false;\n  }\n\n  bool isInvalid(const vector<vector<char>>& grid, int playerX, int playerY) {\n    return playerX < 0 || playerX == grid.size() || playerY < 0 ||\n           playerY == grid[0].size() || grid[playerX][playerY] == '#';\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minPushBox(char[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    int[] box = {-1, -1};\n    int[] player = {-1, -1};\n    int[] target = {-1, -1};\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] == 'B')\n          box = new int[] {i, j};\n        else if (grid[i][j] == 'S')\n          player = new int[] {i, j};\n        else if (grid[i][j] == 'T')\n          target = new int[] {i, j};\n\n    int ans = 0;\n    // (boxX, boxY, playerX, playerY)\n    Queue<int[]> q =\n        new ArrayDeque<>(Arrays.asList(new int[] {box[0], box[1], player[0], player[1]}));\n    boolean[][][][] seen = new boolean[m][n][m][n];\n    seen[box[0]][box[1]][player[0]][player[1]] = true;\n\n    while (!q.isEmpty()) {\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int boxX = q.peek()[0];\n        final int boxY = q.peek()[1];\n        final int playerX = q.peek()[2];\n        final int playerY = q.poll()[3];\n        if (boxX == target[0] && boxY == target[1])\n          return ans;\n        for (int k = 0; k < 4; ++k) {\n          final int nextBoxX = boxX + dirs[k];\n          final int nextBoxY = boxY + dirs[k + 1];\n          if (isInvalid(grid, nextBoxX, nextBoxY))\n            continue;\n          if (seen[nextBoxX][nextBoxY][boxX][boxY])\n            continue;\n          final int fromX = boxX + dirs[(k + 2) % 4];\n          final int fromY = boxY + dirs[(k + 3) % 4];\n          if (isInvalid(grid, fromX, fromY))\n            continue;\n          if (canGoTo(grid, playerX, playerY, fromX, fromY, boxX, boxY)) {\n            seen[nextBoxX][nextBoxY][boxX][boxY] = true;\n            q.offer(new int[] {nextBoxX, nextBoxY, boxX, boxY});\n          }\n        }\n      }\n      ++ans;\n    }\n\n    return -1;\n  }\n\n  private static final int[] dirs = {0, 1, 0, -1, 0};\n\n  // Returns true if (playerX, playerY) can go to (fromX, fromY).\n  private boolean canGoTo(char[][] grid, int playerX, int playerY, int fromX, int fromY, int boxX,\n                          int boxY) {\n    Queue<Pair<Integer, Integer>> q = new ArrayDeque<>(Arrays.asList(new Pair<>(playerX, playerY)));\n    boolean[][] seen = new boolean[grid.length][grid[0].length];\n    seen[playerX][playerY] = true;\n\n    while (!q.isEmpty()) {\n      final int i = q.peek().getKey();\n      final int j = q.poll().getValue();\n      if (i == fromX && j == fromY)\n        return true;\n      for (int k = 0; k < 4; ++k) {\n        final int x = i + dirs[k];\n        final int y = j + dirs[k + 1];\n        if (isInvalid(grid, x, y))\n          continue;\n        if (seen[x][y])\n          continue;\n        if (x == boxX && y == boxY)\n          continue;\n        q.offer(new Pair<>(x, y));\n        seen[x][y] = true;\n      }\n    }\n\n    return false;\n  }\n\n  private boolean isInvalid(char[][] grid, int playerX, int playerY) {\n    return playerX < 0 || playerX == grid.length || playerY < 0 || playerY == grid[0].length ||\n        grid[playerX][playerY] == '#';\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minPushBox(self, grid: List[List[chr]]) -> int:\n    dirs = [0, 1, 0, -1, 0]\n    m = len(grid)\n    n = len(grid[0])\n\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] == 'B':\n          box = (i, j)\n        elif grid[i][j] == 'S':\n          player = (i, j)\n        elif grid[i][j] == 'T':\n          target = (i, j)\n\n    def isInvalid(playerX: int, playerY: int) -> bool:\n      return playerX < 0 or playerX == m or playerY < 0 or playerY == n \\\n          or grid[playerX][playerY] == '#'\n\n    # Returns true if (playerX, playerY) can go to (fromX, fromY).\n    def canGoTo(playerX: int, playerY: int, fromX: int, fromY: int, boxX: int, boxY: int) -> bool:\n      q = collections.deque([(playerX, playerY)])\n      seen = {(playerX, playerY)}\n\n      while q:\n        i, j = q.popleft()\n        if i == fromX and j == fromY:\n          return True\n        for k in range(4):\n          x = i + dirs[k]\n          y = j + dirs[k + 1]\n          if isInvalid(x, y):\n            continue\n          if (x, y) in seen:\n            continue\n          if x == boxX and y == boxY:\n            continue\n          q.append((x, y))\n          seen.add((x, y))\n\n      return False\n\n    ans = 0\n    # (boxX, boxY, playerX, playerY)\n    q = collections.deque([(box[0], box[1], player[0], player[1])])\n    seen = {(box[0], box[1], player[0], player[1])}\n\n    while q:\n      for _ in range(len(q)):\n        boxX, boxY, playerX, playerY = q.popleft()\n        if boxX == target[0] and boxY == target[1]:\n          return ans\n        for k in range(4):\n          nextBoxX = boxX + dirs[k]\n          nextBoxY = boxY + dirs[k + 1]\n          if isInvalid(nextBoxX, nextBoxY):\n            continue\n          if (nextBoxX, nextBoxY, boxX, boxY) in seen:\n            continue\n          fromX = boxX + dirs[(k + 2) % 4]\n          fromY = boxY + dirs[(k + 3) % 4]\n          if isInvalid(fromX, fromY):\n            continue\n          if canGoTo(playerX, playerY, fromX, fromY, boxX, boxY):\n            q.append((nextBoxX, nextBoxY, boxX, boxY))\n            seen.add((nextBoxX, nextBoxY, boxX, boxY))\n      ans += 1\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}