{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1210",
            "title": "Minimum Moves to Reach Target with Rotations",
            "titleSlug": "minimum-moves-to-reach-target-with-rotations",
            "content": "<p>In an&nbsp;<code>n*n</code>&nbsp;grid, there is a snake that spans 2 cells and starts moving from the top left corner at <code>(0, 0)</code> and <code>(0, 1)</code>. The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at&nbsp;<code>(n-1, n-2)</code>&nbsp;and&nbsp;<code>(n-1, n-1)</code>.</p>\n\n<p>In one move the snake can:</p>\n\n<ul>\n\t<li>Move one cell to the right&nbsp;if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.</li>\n\t<li>Move down one cell&nbsp;if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.</li>\n\t<li>Rotate clockwise if it&#39;s in a horizontal position and the two cells under it are both empty. In that case the snake moves from&nbsp;<code>(r, c)</code>&nbsp;and&nbsp;<code>(r, c+1)</code>&nbsp;to&nbsp;<code>(r, c)</code>&nbsp;and&nbsp;<code>(r+1, c)</code>.<br />\n\t<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/24/image-2.png\" style=\"width: 300px; height: 134px;\" /></li>\n\t<li>Rotate counterclockwise&nbsp;if it&#39;s in a vertical position and the two cells to its right are both empty. In that case the snake moves from&nbsp;<code>(r, c)</code>&nbsp;and&nbsp;<code>(r+1, c)</code>&nbsp;to&nbsp;<code>(r, c)</code>&nbsp;and&nbsp;<code>(r, c+1)</code>.<br />\n\t<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/24/image-1.png\" style=\"width: 300px; height: 121px;\" /></li>\n</ul>\n\n<p>Return the minimum number of moves to reach the target.</p>\n\n<p>If there is no way to reach the target, return&nbsp;<code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/24/image.png\" style=\"width: 400px; height: 439px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,0,0,0,0,1],\n               [1,1,0,0,1,0],\n&nbsp;              [0,0,0,0,1,1],\n&nbsp;              [0,0,1,0,1,0],\n&nbsp;              [0,1,1,0,0,0],\n&nbsp;              [0,1,1,0,0,0]]\n<strong>Output:</strong> 11\n<strong>Explanation:\n</strong>One possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,0,1,1,1,1],\n&nbsp;              [0,0,0,0,1,1],\n&nbsp;              [1,1,0,0,0,1],\n&nbsp;              [1,1,1,0,0,1],\n&nbsp;              [1,1,1,0,0,1],\n&nbsp;              [1,1,1,0,0,0]]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>\n\t<li>It is guaranteed that the snake starts at empty cells.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 266,
            "dislikes": 68,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.1K\", \"totalSubmission\": \"18.3K\", \"totalAcceptedRaw\": 9053, \"totalSubmissionRaw\": 18313, \"acRate\": \"49.4%\"}",
            "hints": [
                "Use BFS to find the answer.",
                "The state of the BFS is the position (x, y) along with a binary value that specifies if the position is horizontal or vertical."
            ],
            "rephrased": {
                "body": "Given an n*n grid, a snake of length 2 starts at the top-left corner (0, 0) and (0, 1). The grid contains empty cells (0) and blocked cells (1). The goal is to move the snake to the bottom-right corner (n-1, n-2) and (n-1, n-1) using the following moves:\n\n*   Move right: If the cell to the right is empty.\n*   Move down: If the cell below is empty.\n*   Rotate clockwise (horizontal to vertical): If the snake is horizontal and both cells directly below the snake are empty.\n*   Rotate counterclockwise (vertical to horizontal): If the snake is vertical and both cells to the right are empty.\n\nDetermine the minimum number of moves required for the snake to reach the target. Return -1 if it's impossible to reach the target.",
                "constraints": [
                    "2 <= n <= 100",
                    "0 <= grid[i][j] <= 1",
                    "The snake starts at empty cells."
                ],
                "testcases": [
                    {
                        "input": "grid = [[0,0,0,0,0,1],\n               [1,1,0,0,1,0],\n               [0,0,0,0,1,1],\n               [0,0,1,0,1,0],\n               [0,1,1,0,0,0],\n               [0,1,1,0,0,0]]",
                        "output": "11",
                        "explanation": "One possible solution involves moving right twice, rotating clockwise, moving right once, moving down four times, rotating counterclockwise, moving right once, and then moving down once."
                    },
                    {
                        "input": "grid = [[0,0,1,1,1,1],\n               [0,0,0,0,1,1],\n               [1,1,0,0,0,1],\n               [1,1,1,0,0,1],\n               [1,1,1,0,0,1],\n               [1,1,1,0,0,0]]",
                        "output": "9",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use BFS to find the answer.",
            "The state of the BFS is the position (x, y) along with a binary value that specifies if the position is horizontal or vertical."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "enum class Pos { kHorizontal, kVertical };\n\nclass Solution {\n public:\n  int minimumMoves(vector<vector<int>>& grid) {\n    const int n = grid.size();\n    int ans = 0;\n    // State of (x, y, pos)\n    // Pos := 0 (horizontal) / 1 (vertical)\n    queue<tuple<int, int, Pos>> q{{{0, 0, Pos::kHorizontal}}};\n    vector<vector<vector<bool>>> seen(n,\n                                      vector<vector<bool>>(n, vector<bool>(2)));\n    seen[0][0][static_cast<int>(Pos::kHorizontal)] = true;\n\n    auto canMoveRight = [&](int x, int y, Pos pos) -> bool {\n      if (pos == Pos::kHorizontal)\n        return y + 2 < n && !grid[x][y + 2];\n      return y + 1 < n && !grid[x][y + 1] && !grid[x + 1][y + 1];\n    };\n\n    auto canMoveDown = [&](int x, int y, Pos pos) -> bool {\n      if (pos == Pos::kVertical)\n        return x + 2 < n && !grid[x + 2][y];\n      return x + 1 < n && !grid[x + 1][y] && !grid[x + 1][y + 1];\n    };\n\n    auto canRotateClockwise = [&](int x, int y, Pos pos) -> bool {\n      return pos == Pos::kHorizontal && x + 1 < n && !grid[x + 1][y + 1] &&\n             !grid[x + 1][y];\n    };\n\n    auto canRotateCounterclockwise = [&](int x, int y, Pos pos) -> bool {\n      return pos == Pos::kVertical && y + 1 < n && !grid[x + 1][y + 1] &&\n             !grid[x][y + 1];\n    };\n\n    while (!q.empty()) {\n      for (int sz = q.size(); sz > 0; --sz) {\n        const auto [x, y, pos] = q.front();\n        q.pop();\n        if (x == n - 1 && y == n - 2 && pos == Pos::kHorizontal)\n          return ans;\n        if (canMoveRight(x, y, pos) && !seen[x][y + 1][static_cast<int>(pos)]) {\n          q.emplace(x, y + 1, pos);\n          seen[x][y + 1][static_cast<int>(pos)] = true;\n        }\n        if (canMoveDown(x, y, pos) && !seen[x + 1][y][static_cast<int>(pos)]) {\n          q.emplace(x + 1, y, pos);\n          seen[x + 1][y][static_cast<int>(pos)] = true;\n        }\n        const Pos newPos =\n            pos == Pos::kHorizontal ? Pos::kVertical : Pos::kHorizontal;\n        if ((canRotateClockwise(x, y, pos) ||\n             canRotateCounterclockwise(x, y, pos)) &&\n            !seen[x][y][static_cast<int>(newPos)]) {\n          q.emplace(x, y, newPos);\n          seen[x][y][static_cast<int>(newPos)] = true;\n        }\n      }\n      ++ans;\n    }\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "enum Pos { kHorizontal, kVertical }\n\nclass Solution {\n  public int minimumMoves(int[][] grid) {\n    final int n = grid.length;\n    int ans = 0;\n    // State of (x, y, pos)\n    // Pos := 0 (horizontal) / 1 (vertical)\n    Queue<int[]> q = new ArrayDeque<>(Arrays.asList(new int[] {0, 0, Pos.kHorizontal.ordinal()}));\n    boolean[][][] seen = new boolean[n][n][2];\n    seen[0][0][Pos.kHorizontal.ordinal()] = true;\n\n    while (!q.isEmpty()) {\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int x = q.peek()[0];\n        final int y = q.peek()[1];\n        final int pos = q.poll()[2];\n        if (x == n - 1 && y == n - 2 && pos == Pos.kHorizontal.ordinal())\n          return ans;\n        if (canMoveRight(grid, x, y, pos) && !seen[x][y + 1][pos]) {\n          q.offer(new int[] {x, y + 1, pos});\n          seen[x][y + 1][pos] = true;\n        }\n        if (canMoveDown(grid, x, y, pos) && !seen[x + 1][y][pos]) {\n          q.offer(new int[] {x + 1, y, pos});\n          seen[x + 1][y][pos] = true;\n        }\n        final int newPos =\n            pos == Pos.kHorizontal.ordinal() ? Pos.kVertical.ordinal() : Pos.kHorizontal.ordinal();\n        if ((canRotateClockwise(grid, x, y, pos) || canRotateCounterclockwise(grid, x, y, pos)) &&\n            !seen[x][y][newPos]) {\n          q.offer(new int[] {x, y, newPos});\n          seen[x][y][newPos] = true;\n        }\n      }\n      ++ans;\n    }\n\n    return -1;\n  }\n\n  private boolean canMoveRight(int[][] grid, int x, int y, int pos) {\n    if (pos == Pos.kHorizontal.ordinal())\n      return y + 2 < grid.length && grid[x][y + 2] == 0;\n    return y + 1 < grid.length && grid[x][y + 1] == 0 && grid[x + 1][y + 1] == 0;\n  }\n\n  private boolean canMoveDown(int[][] grid, int x, int y, int pos) {\n    if (pos == Pos.kVertical.ordinal())\n      return x + 2 < grid.length && grid[x + 2][y] == 0;\n    return x + 1 < grid.length && grid[x + 1][y] == 0 && grid[x + 1][y + 1] == 0;\n  };\n\n  private boolean canRotateClockwise(int[][] grid, int x, int y, int pos) {\n    return pos == Pos.kHorizontal.ordinal() && x + 1 < grid.length && grid[x + 1][y + 1] == 0 &&\n        grid[x + 1][y] == 0;\n  };\n\n  private boolean canRotateCounterclockwise(int[][] grid, int x, int y, int pos) {\n    return pos == Pos.kVertical.ordinal() && y + 1 < grid.length && grid[x + 1][y + 1] == 0 &&\n        grid[x][y + 1] == 0;\n  };\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from enum import IntEnum\n\n\nclass Pos(IntEnum):\n  kHorizontal = 0\n  kVertical = 1\n\n\nclass Solution:\n  def minimumMoves(self, grid: List[List[int]]) -> int:\n    n = len(grid)\n    ans = 0\n    # State of (x, y, pos)\n    # Pos := 0 (horizontal) // 1 (vertical)\n    q = collections.deque([(0, 0, Pos.kHorizontal)])\n    seen = {(0, 0, Pos.kHorizontal)}\n\n    def canMoveRight(x: int, y: int, pos: Pos) -> bool:\n      if pos == Pos.kHorizontal:\n        return y + 2 < n and not grid[x][y + 2]\n      return y + 1 < n and not grid[x][y + 1] and not grid[x + 1][y + 1]\n\n    def canMoveDown(x: int, y: int, pos: Pos) -> bool:\n      if pos == Pos.kVertical:\n        return x + 2 < n and not grid[x + 2][y]\n      return x + 1 < n and not grid[x + 1][y] and not grid[x + 1][y + 1]\n\n    def canRotateClockwise(x: int, y: int, pos: Pos) -> bool:\n      return pos == Pos.kHorizontal and x + 1 < n and \\\n          not grid[x + 1][y + 1] and not grid[x + 1][y]\n\n    def canRotateCounterclockwise(x: int, y: int, pos: Pos) -> bool:\n      return pos == Pos.kVertical and y + 1 < n and \\\n          not grid[x + 1][y + 1] and not grid[x][y + 1]\n\n    while q:\n      for _ in range(len(q)):\n        x, y, pos = q.popleft()\n        if x == n - 1 and y == n - 2 and pos == Pos.kHorizontal:\n          return ans\n        if canMoveRight(x, y, pos) and (x, y + 1, pos) not in seen:\n          q.append((x, y + 1, pos))\n          seen.add((x, y + 1, pos))\n        if canMoveDown(x, y, pos) and (x + 1, y, pos) not in seen:\n          q.append((x + 1, y, pos))\n          seen.add((x + 1, y, pos))\n        newPos = Pos.kVertical if pos == Pos.kHorizontal else Pos.kHorizontal\n        if (canRotateClockwise(x, y, pos) or canRotateCounterclockwise(x, y, pos)) and \\\n                (x, y, newPos) not in seen:\n          q.append((x, y, newPos))\n          seen.add((x, y, newPos))\n      ans += 1\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}