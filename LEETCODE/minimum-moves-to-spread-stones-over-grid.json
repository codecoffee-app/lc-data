{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2850",
            "title": "Minimum Moves to Spread Stones Over Grid",
            "titleSlug": "minimum-moves-to-spread-stones-over-grid",
            "content": "<p>You are given a <strong>0-indexed</strong> 2D integer matrix <code>grid</code> of size <code>3 * 3</code>, representing the number of stones in each cell. The grid contains exactly <code>9</code> stones, and there can be <strong>multiple</strong> stones in a single cell.</p>\n\n<p>In one move, you can move a single stone from its current cell to any other cell if the two cells share a side.</p>\n\n<p>Return <em>the <strong>minimum number of moves</strong> required to place one stone in each cell</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/23/example1-3.svg\" style=\"width: 401px; height: 281px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,1,0],[1,1,1],[1,2,1]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> One possible sequence of moves to place one stone in each cell is: \n1- Move one stone from cell (2,1) to cell (2,2).\n2- Move one stone from cell (2,2) to cell (1,2).\n3- Move one stone from cell (1,2) to cell (0,2).\nIn total, it takes 3 moves to place one stone in each cell of the grid.\nIt can be shown that 3 is the minimum number of moves required to place one stone in each cell.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/23/example2-2.svg\" style=\"width: 401px; height: 281px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,3,0],[1,0,0],[1,0,3]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One possible sequence of moves to place one stone in each cell is:\n1- Move one stone from cell (0,1) to cell (0,2).\n2- Move one stone from cell (0,1) to cell (1,1).\n3- Move one stone from cell (2,2) to cell (1,2).\n4- Move one stone from cell (2,2) to cell (2,1).\nIn total, it takes 4 moves to place one stone in each cell of the grid.\nIt can be shown that 4 is the minimum number of moves required to place one stone in each cell.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>grid.length == grid[i].length == 3</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 9</code></li>\n\t<li>Sum of <code>grid</code> is equal to <code>9</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 490,
            "dislikes": 69,
            "similarQuestions": "[{\"title\": \"Minimum Number of Operations to Move All Balls to Each Box\", \"titleSlug\": \"minimum-number-of-operations-to-move-all-balls-to-each-box\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Operations to Make X and Y Equal\", \"titleSlug\": \"minimum-number-of-operations-to-make-x-and-y-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.2K\", \"totalSubmission\": \"48.1K\", \"totalAcceptedRaw\": 21212, \"totalSubmissionRaw\": 48103, \"acRate\": \"44.1%\"}",
            "hints": [
                "There are at most <code>4</code> cells with more than one stone.",
                "Let <code>a</code> be the number of cells containing more than one stone, and <code>b</code> be the number of cells containing no stones. <code></code>. <code>b^a \u2264 6561</code>. Use this fact to come up with a bruteforce.",
                "For all empty cells, bruteforce over all possible cells from which a stone can come. Note that a stone will always come from a cell containing at least 2 stones."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed 2D integer matrix `grid` of size 3 * 3, representing the number of stones in each cell. The grid contains exactly 9 stones, and there can be multiple stones in a single cell.\n\nIn one move, you can move a single stone from its current cell to any other cell if the two cells share a side.\n\nReturn the minimum number of moves required to place one stone in each cell.",
                "constraints": [
                    "grid.length == grid[i].length == 3",
                    "0 <= grid[i][j] <= 9",
                    "Sum of `grid` is equal to `9`."
                ],
                "testcases": [
                    {
                        "input": "[[1,1,0],[1,1,1],[1,2,1]]",
                        "output": "3",
                        "explanation": "The minimum number of moves to place one stone in each cell is 3. This can be achieved by moving stones from cells with more than one stone to cells that are empty, ensuring adjacent movements."
                    },
                    {
                        "input": "[[1,3,0],[1,0,0],[1,0,3]]",
                        "output": "4",
                        "explanation": "The minimum number of moves to place one stone in each cell is 4. Similar to the first example, stones are moved from overpopulated cells to empty ones, considering only adjacent movements."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
                "title": "Minimum Number of Operations to Move All Balls to Each Box",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-operations-to-make-x-and-y-equal",
                "title": "Minimum Number of Operations to Make X and Y Equal",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "There are at most <code>4</code> cells with more than one stone.",
            "Let <code>a</code> be the number of cells containing more than one stone, and <code>b</code> be the number of cells containing no stones. <code></code>. <code>b^a \u2264 6561</code>. Use this fact to come up with a bruteforce.",
            "For all empty cells, bruteforce over all possible cells from which a stone can come. Note that a stone will always come from a cell containing at least 2 stones."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumMoves(vector<vector<int>>& grid) {\n    const int zeroCount = accumulate(grid.begin(), grid.end(), 0,\n                                     [](int subtotal, const vector<int>& row) {\n      return subtotal + count(row.begin(), row.end(), 0);\n    });\n    if (zeroCount == 0)\n      return 0;\n\n    int ans = INT_MAX;\n\n    for (int i = 0; i < 3; ++i)\n      for (int j = 0; j < 3; ++j)\n        if (grid[i][j] == 0)\n          for (int x = 0; x < 3; ++x)\n            for (int y = 0; y < 3; ++y)\n              // Move a stone at (x, y) to (i, j)\n              if (grid[x][y] > 1) {\n                --grid[x][y];\n                ++grid[i][j];\n                ans = min(ans, abs(x - i) + abs(y - j) + minimumMoves(grid));\n                ++grid[x][y];\n                --grid[i][j];\n              }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumMoves(int[][] grid) {\n    int zeroCount = 0;\n    for (int[] row : grid)\n      for (int cell : row)\n        if (cell == 0)\n          ++zeroCount;\n    if (zeroCount == 0)\n      return 0;\n\n    int ans = Integer.MAX_VALUE;\n\n    for (int i = 0; i < 3; ++i)\n      for (int j = 0; j < 3; ++j)\n        if (grid[i][j] == 0)\n          for (int x = 0; x < 3; ++x)\n            for (int y = 0; y < 3; ++y)\n              if (grid[x][y] > 1) {\n                --grid[x][y];\n                ++grid[i][j];\n                ans = Math.min(ans, Math.abs(x - i) + Math.abs(y - j) + minimumMoves(grid));\n                ++grid[x][y];\n                --grid[i][j];\n              }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumMoves(self, grid: List[List[int]]) -> int:\n    if sum(row.count(0) for row in grid) == 0:\n      return 0\n\n    ans = math.inf\n\n    for i in range(3):\n      for j in range(3):\n        if grid[i][j] == 0:\n          for x in range(3):\n            for y in range(3):\n              if grid[x][y] > 1:\n                grid[x][y] -= 1\n                grid[i][j] += 1\n                ans = min(ans, abs(x - i) + abs(y - j) + self.minimumMoves(grid))\n                grid[x][y] += 1\n                grid[i][j] -= 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}