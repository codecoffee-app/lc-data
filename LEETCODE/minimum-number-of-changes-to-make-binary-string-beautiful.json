{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2914",
            "title": "Minimum Number of Changes to Make Binary String Beautiful",
            "titleSlug": "minimum-number-of-changes-to-make-binary-string-beautiful",
            "content": "<p>You are given a <strong>0-indexed</strong> binary string <code>s</code> having an even length.</p>\n\n<p>A string is <strong>beautiful</strong> if it&#39;s possible to partition it into one or more substrings such that:</p>\n\n<ul>\n\t<li>Each substring has an <strong>even length</strong>.</li>\n\t<li>Each substring contains <strong>only</strong> <code>1</code>&#39;s or <strong>only</strong> <code>0</code>&#39;s.</li>\n</ul>\n\n<p>You can change any character in <code>s</code> to <code>0</code> or <code>1</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of changes required to make the string </em><code>s</code> <em>beautiful</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1001&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We change s[1] to 1 and s[3] to 0 to get string &quot;1100&quot;.\nIt can be seen that the string &quot;1100&quot; is beautiful because we can partition it into &quot;11|00&quot;.\nIt can be proven that 2 is the minimum number of changes needed to make the string beautiful.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;10&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We change s[1] to 1 to get string &quot;11&quot;.\nIt can be seen that the string &quot;11&quot; is beautiful because we can partition it into &quot;11&quot;.\nIt can be proven that 1 is the minimum number of changes needed to make the string beautiful.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0000&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We don&#39;t need to make any changes as the string &quot;0000&quot; is beautiful already.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> has an even length.</li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 139,
            "dislikes": 14,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.5K\", \"totalSubmission\": \"30.9K\", \"totalAcceptedRaw\": 18457, \"totalSubmissionRaw\": 30918, \"acRate\": \"59.7%\"}",
            "hints": [
                "For any valid partition, since each part consists of an even number of the same characters, we can further partition each part into lengths of exactly <code>2</code>.",
                "After noticing the first hint, we can decompose the whole string into disjoint blocks of size <code>2</code> and find the minimum number of changes required to make those blocks beautiful."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed binary string `s` of even length. A string is considered beautiful if it can be partitioned into one or more substrings, where each substring has an even length and consists of either only 1s or only 0s. You can change any character in `s` to either 0 or 1.  Return the minimum number of changes required to make the string `s` beautiful.",
                "constraints": [
                    "2 <= s.length <= 10^5",
                    "s.length is even.",
                    "s[i] is either '0' or '1'."
                ],
                "testcases": [
                    {
                        "input": "1001",
                        "output": "2",
                        "explanation": "By changing s[1] to 1 and s[3] to 0, we obtain the string \"1100\", which is beautiful because it can be partitioned into \"11|00\".  Two changes are the minimum required to achieve a beautiful string."
                    },
                    {
                        "input": "10",
                        "output": "1",
                        "explanation": "By changing s[1] to 1, we obtain the string \"11\", which is beautiful because it can be partitioned into \"11\". One change is the minimum required."
                    },
                    {
                        "input": "0000",
                        "output": "0",
                        "explanation": "The string \"0000\" is already beautiful, as it can be partitioned into \"00|00\" or \"0000\". No changes are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For any valid partition, since each part consists of an even number of the same characters, we can further partition each part into lengths of exactly <code>2</code>.",
            "After noticing the first hint, we can decompose the whole string into disjoint blocks of size <code>2</code> and find the minimum number of changes required to make those blocks beautiful."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            }
        ]
    }
}