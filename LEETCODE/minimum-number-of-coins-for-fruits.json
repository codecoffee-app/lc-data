{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2944",
            "title": "Minimum Number of Coins for Fruits",
            "titleSlug": "minimum-number-of-coins-for-fruits",
            "content": "<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> denotes the number of coins needed to purchase the <code>i<sup>th</sup></code> fruit.</p>\n\n<p>The fruit market has the following reward for each fruit:</p>\n\n<ul>\n\t<li>If you purchase the <code>i<sup>th</sup></code> fruit at <code>prices[i]</code> coins, you can get any number of the next <code>(i + 1)</code> fruits for free.</li>\n</ul>\n\n<p><strong>Note</strong> that even if you <strong>can</strong> take fruit <code>j</code> for free, you can still purchase it for <code>prices[j]</code> coins to receive its reward.</p>\n\n<p>Return the <strong>minimum</strong> number of coins needed to acquire all the fruits.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">prices = [3,1,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Purchase the 1<sup>st</sup> fruit with <code>prices[0] = 3</code> coins, you are allowed to take the 2<sup>nd</sup> fruit for free.</li>\n\t<li>Purchase the 2<sup>nd</sup> fruit with <code>prices[1] = 1</code> coin, you are allowed to take the 3<sup>rd</sup> fruit for free.</li>\n\t<li>Take the 3<sup>rd</sup> fruit for free.</li>\n</ul>\n\n<p>Note that even though you could take the 2<sup>nd</sup> fruit for free as a reward of buying 1<sup>st</sup> fruit, you purchase it to receive its reward, which is more optimal.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">prices = [1,10,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Purchase the 1<sup>st</sup> fruit with <code>prices[0] = 1</code> coin, you are allowed to take the 2<sup>nd</sup> fruit for free.</li>\n\t<li>Take the 2<sup>nd</sup> fruit for free.</li>\n\t<li>Purchase the 3<sup>rd</sup> fruit for <code>prices[2] = 1</code> coin, you are allowed to take the 4<sup>th</sup> fruit for free.</li>\n\t<li>Take the 4<sup>t</sup><sup>h</sup> fruit for free.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">prices = [26,18,6,12,49,7,45,45]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">39</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Purchase the 1<sup>st</sup> fruit with <code>prices[0] = 26</code> coin, you are allowed to take the 2<sup>nd</sup> fruit for free.</li>\n\t<li>Take the 2<sup>nd</sup> fruit for free.</li>\n\t<li>Purchase the 3<sup>rd</sup> fruit for <code>prices[2] = 6</code> coin, you are allowed to take the 4<sup>th</sup>, 5<sup>th</sup> and 6<sup>th</sup> (the next three) fruits for free.</li>\n\t<li>Take the 4<sup>t</sup><sup>h</sup> fruit for free.</li>\n\t<li>Take the 5<sup>t</sup><sup>h</sup> fruit for free.</li>\n\t<li>Purchase the 6<sup>th</sup> fruit with <code>prices[5] = 7</code> coin, you are allowed to take the 8<sup>th</sup> and 9<sup>th</sup> fruit for free.</li>\n\t<li>Take the 7<sup>t</sup><sup>h</sup> fruit for free.</li>\n\t<li>Take the 8<sup>t</sup><sup>h</sup> fruit for free.</li>\n</ul>\n\n<p>Note that even though you could take the 6<sup>th</sup> fruit for free as a reward of buying 3<sup>rd</sup> fruit, you purchase it to receive its reward, which is more optimal.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= prices[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 228,
            "dislikes": 43,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Monotonic Queue",
                    "slug": "monotonic-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.5K\", \"totalSubmission\": \"32.3K\", \"totalAcceptedRaw\": 14523, \"totalSubmissionRaw\": 32342, \"acRate\": \"44.9%\"}",
            "hints": [
                "The intended solution uses Dynamic Programming.",
                "Let <code>dp[i]</code> denote the minimum number of coins, such that we bought <code>i<sup>th</sup></code>\u00a0fruit and acquired all the fruits in the range <code>[i...n]</code>.",
                "<code>dp[i] = min(dp[i], dp[j] + prices[i]) </code>, where <code>j</code> is in the range <code>[i + 1, i + 1 + i]</code>."
            ],
            "rephrased": {
                "body": "Given an integer array `prices` where `prices[i]` represents the cost in coins to purchase the i-th fruit, determine the minimum number of coins required to acquire all fruits.  Purchasing fruit `i` at cost `prices[i]` allows you to obtain the next `(i + 1)` fruits for free. You can still choose to purchase any fruit `j` for `prices[j]` coins, even if you are entitled to take it for free, to receive its reward.",
                "constraints": [
                    "1 <= prices.length <= 1000",
                    "1 <= prices[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[3,1,2]",
                        "output": "4",
                        "explanation": "Buy the first fruit for 3 coins, which allows you to take the second fruit for free. Buy the second fruit for 1 coin, allowing you to take the third fruit for free. Taking the third fruit for free results in a total cost of 3 + 1 = 4 coins."
                    },
                    {
                        "input": "[1,10,1,1]",
                        "output": "2",
                        "explanation": "Buy the first fruit for 1 coin, allowing you to take the second fruit for free. Take the second fruit for free. Buy the third fruit for 1 coin, allowing you to take the fourth fruit for free. Take the fourth fruit for free. Total cost is 1 + 1 = 2 coins."
                    },
                    {
                        "input": "[26,18,6,12,49,7,45,45]",
                        "output": "39",
                        "explanation": "Buy the first fruit for 26 coins, allowing you to take the second fruit for free. Take the second fruit for free. Buy the third fruit for 6 coins, allowing you to take the fourth, fifth and sixth fruits for free. Take the fourth and fifth fruits for free. Buy the sixth fruit for 7 coins, allowing you to take the seventh and eighth fruits for free. Take the seventh and eighth fruits for free. Total cost is 26 + 6 + 7 = 39 coins."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The intended solution uses Dynamic Programming.",
            "Let <code>dp[i]</code> denote the minimum number of coins, such that we bought <code>i<sup>th</sup></code>\u00a0fruit and acquired all the fruits in the range <code>[i...n]</code>.",
            "<code>dp[i] = min(dp[i], dp[j] + prices[i]) </code>, where <code>j</code> is in the range <code>[i + 1, i + 1 + i]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Monotonic Queue",
                "slug": "monotonic-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumCoins(vector<int>& prices) {\n    const int n = prices.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[n] = 0;\n\n    for (int i = n - 1; i >= 0; --i)\n      for (int j = i + 1; j <= min((i + 1) * 2, n); ++j)\n        dp[i] = min(dp[i], prices[i] + dp[j]);\n\n    return dp[0];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumCoins(int[] prices) {\n    final int n = prices.length;\n    int[] dp = new int[n + 1];\n    Arrays.fill(dp, Integer.MAX_VALUE);\n    dp[n] = 0;\n\n    for (int i = n - 1; i >= 0; --i)\n      for (int j = i + 1; j <= Math.min((i + 1) * 2, n); ++j)\n        dp[i] = Math.min(dp[i], prices[i] + dp[j]);\n\n    return dp[0];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumCoins(self, prices: List[int]) -> int:\n    n = len(prices)\n    # Convert to 0-indexed for easy computation.\n    # dp[i] := the minimum number of coins to acquire fruits[i:]\n    dp = [math.inf] * n + [0]\n\n    for i in range(n - 1, -1, -1):\n      # Convert back to 1-indexed.\n      for j in range(i + 1, min((i + 1) * 2 + 1, n + 1)):\n        dp[i] = min(dp[i], prices[i] + dp[j])\n\n    return dp[0]\n",
                "lang_text": "py"
            }
        }
    }
}