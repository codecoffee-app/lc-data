{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1568",
            "title": "Minimum Number of Days to Disconnect Island",
            "titleSlug": "minimum-number-of-days-to-disconnect-island",
            "content": "<p>You are given an <code>m x n</code> binary grid <code>grid</code> where <code>1</code> represents land and <code>0</code> represents water. An <strong>island</strong> is a maximal <strong>4-directionally</strong> (horizontal or vertical) connected group of <code>1</code>&#39;s.</p>\n\n<p>The grid is said to be <strong>connected</strong> if we have <strong>exactly one island</strong>, otherwise is said <strong>disconnected</strong>.</p>\n\n<p>In one day, we are allowed to change <strong>any </strong>single land cell <code>(1)</code> into a water cell <code>(0)</code>.</p>\n\n<p>Return <em>the minimum number of days to disconnect the grid</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/24/land1.jpg\" style=\"width: 500px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]\n\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We need at least 2 days to get a disconnected grid.\nChange land grid[1][1] and grid[0][2] to water and get 2 disconnected island.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/24/land2.jpg\" style=\"width: 404px; height: 85px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Grid of full water is also disconnected ([[1,1]] -&gt; [[0,0]]), 0 islands.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 30</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 665,
            "dislikes": 146,
            "similarQuestions": "[{\"title\": \"Disconnect Path in a Binary Matrix by at Most One Flip\", \"titleSlug\": \"disconnect-path-in-a-binary-matrix-by-at-most-one-flip\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Strongly Connected Component",
                    "slug": "strongly-connected-component"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.7K\", \"totalSubmission\": \"28.1K\", \"totalAcceptedRaw\": 12725, \"totalSubmissionRaw\": 28125, \"acRate\": \"45.2%\"}",
            "hints": [
                "Return 0 if the grid is already disconnected.",
                "Return 1 if changing a single land to water disconnect the island.",
                "Otherwise return 2.",
                "We can disconnect the grid within at most 2 days."
            ],
            "rephrased": {
                "body": "Given an `m x n` binary grid `grid` where `1` represents land and `0` represents water. An island is a maximal 4-directionally (horizontal or vertical) connected group of 1's. The grid is considered connected if there is exactly one island; otherwise, it's disconnected.\n\nIn a single day, you can change any single land cell (1) into a water cell (0).\n\nDetermine the minimum number of days required to disconnect the grid.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 30",
                    "grid[i][j] is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[[0,1,1,0],[0,1,1,0],[0,0,0,0]]",
                        "output": "2",
                        "explanation": "The grid can be disconnected in 2 days.  Changing grid[0][2] and grid[1][1] to water creates two disconnected islands."
                    },
                    {
                        "input": "[[1,1]]",
                        "output": "2",
                        "explanation": "The grid can be disconnected in 2 days.  Converting both land cells to water results in a grid with no islands, which is considered disconnected."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
                "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Return 0 if the grid is already disconnected.",
            "Return 1 if changing a single land to water disconnect the island.",
            "Otherwise return 2.",
            "We can disconnect the grid within at most 2 days."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Strongly Connected Component",
                "slug": "strongly-connected-component"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minDays(vector<vector<int>>& grid) {\n    if (disconnected(grid))\n      return 0;\n\n    // Try to remove 1 land.\n    for (int i = 0; i < grid.size(); ++i)\n      for (int j = 0; j < grid[0].size(); ++j)\n        if (grid[i][j] == 1) {\n          grid[i][j] = 0;\n          if (disconnected(grid))\n            return 1;\n          grid[i][j] = 1;\n        }\n\n    // Remove 2 lands.\n    return 2;\n  }\n\n private:\n  const vector<int> dirs{0, 1, 0, -1, 0};\n\n  bool disconnected(const vector<vector<int>>& grid) {\n    int islandsCount = 0;\n    vector<vector<bool>> seen(grid.size(), vector<bool>(grid[0].size()));\n    for (int i = 0; i < grid.size(); ++i)\n      for (int j = 0; j < grid[0].size(); ++j) {\n        if (grid[i][j] == 0 || seen[i][j])\n          continue;\n        if (++islandsCount > 1)\n          return true;\n        dfs(grid, i, j, seen);\n      }\n    return islandsCount != 1;\n  }\n\n  void dfs(const vector<vector<int>>& grid, int i, int j,\n           vector<vector<bool>>& seen) {\n    seen[i][j] = true;\n    for (int k = 0; k < 4; ++k) {\n      const int x = i + dirs[k];\n      const int y = j + dirs[k + 1];\n      if (x < 0 || x == grid.size() || y < 0 || y == grid[0].size())\n        continue;\n      if (grid[x][y] == 0 || seen[x][y])\n        continue;\n      dfs(grid, x, y, seen);\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minDays(int[][] grid) {\n    if (disconnected(grid))\n      return 0;\n\n    // Try to remove 1 land.\n    for (int i = 0; i < grid.length; ++i)\n      for (int j = 0; j < grid[0].length; ++j)\n        if (grid[i][j] == 1) {\n          grid[i][j] = 0;\n          if (disconnected(grid))\n            return 1;\n          grid[i][j] = 1;\n        }\n\n    // Remove 2 lands.\n    return 2;\n  }\n\n  private final int[] dirs = {0, 1, 0, -1, 0};\n\n  private boolean disconnected(int[][] grid) {\n    int islandsCount = 0;\n    boolean[][] seen = new boolean[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length; ++i)\n      for (int j = 0; j < grid[0].length; ++j) {\n        if (grid[i][j] == 0 || seen[i][j])\n          continue;\n        if (++islandsCount > 1)\n          return true;\n        dfs(grid, i, j, seen);\n      }\n\n    return islandsCount != 1;\n  }\n\n  private void dfs(int[][] grid, int i, int j, boolean[][] seen) {\n    seen[i][j] = true;\n    for (int k = 0; k < 4; ++k) {\n      int x = i + dirs[k];\n      int y = j + dirs[k + 1];\n      if (x < 0 || x == grid.length || y < 0 || y == grid[0].length)\n        continue;\n      if (grid[x][y] == 0 || seen[x][y])\n        continue;\n      dfs(grid, x, y, seen);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minDays(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    dirs = [0, 1, 0, -1, 0]\n\n    def dfs(grid: List[List[int]], i: int, j: int, seen: Set[Tuple[int, int]]):\n      seen.add((i, j))\n      for k in range(4):\n        x = i + dirs[k]\n        y = j + dirs[k + 1]\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if grid[x][y] == 0 or (x, y) in seen:\n          continue\n        dfs(grid, x, y, seen)\n\n    def disconnected(grid: List[List[int]]) -> bool:\n      islandsCount = 0\n      seen = set()\n      for i in range(m):\n        for j in range(n):\n          if grid[i][j] == 0 or (i, j) in seen:\n            continue\n          if islandsCount > 1:\n            return True\n          islandsCount += 1\n          dfs(grid, i, j, seen)\n      return islandsCount != 1\n\n    if disconnected(grid):\n      return 0\n\n    # Try to remove 1 land.\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] == 1:\n          grid[i][j] = 0\n          if disconnected(grid):\n            return 1\n          grid[i][j] = 1\n\n    # Remove 2 lands.\n    return 2\n",
                "lang_text": "py"
            }
        }
    }
}