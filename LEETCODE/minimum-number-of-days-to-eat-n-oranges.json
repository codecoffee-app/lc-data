{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1553",
            "title": "Minimum Number of Days to Eat N Oranges",
            "titleSlug": "minimum-number-of-days-to-eat-n-oranges",
            "content": "<p>There are <code>n</code> oranges in the kitchen and you decided to eat some of these oranges every day as follows:</p>\n\n<ul>\n\t<li>Eat one orange.</li>\n\t<li>If the number of remaining oranges <code>n</code> is divisible by <code>2</code> then you can eat <code>n / 2</code> oranges.</li>\n\t<li>If the number of remaining oranges <code>n</code> is divisible by <code>3</code> then you can eat <code>2 * (n / 3)</code> oranges.</li>\n</ul>\n\n<p>You can only choose one of the actions per day.</p>\n\n<p>Given the integer <code>n</code>, return <em>the minimum number of days to eat</em> <code>n</code> <em>oranges</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> You have 10 oranges.\nDay 1: Eat 1 orange,  10 - 1 = 9.  \nDay 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\nDay 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. \nDay 4: Eat the last orange  1 - 1  = 0.\nYou need at least 4 days to eat the 10 oranges.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You have 6 oranges.\nDay 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\nDay 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\nDay 3: Eat the last orange  1 - 1  = 0.\nYou need at least 3 days to eat the 6 oranges.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 955,
            "dislikes": 56,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"33.5K\", \"totalSubmission\": \"95.5K\", \"totalAcceptedRaw\": 33477, \"totalSubmissionRaw\": 95525, \"acRate\": \"35.0%\"}",
            "hints": [
                "In each step, choose between 2 options:\r\nminOranges = 1 + min( (n%2) + f(n/2), (n%3) + f(n/3) )\r\nwhere f(n) is the minimum number of days to eat n oranges."
            ],
            "rephrased": {
                "body": "Given 'n' oranges, find the minimum number of days to eat all oranges. Each day, you can:\n\n1. Eat one orange.\n2. If 'n' is divisible by 2, eat n/2 oranges.\n3. If 'n' is divisible by 3, eat 2*(n/3) oranges.",
                "constraints": [
                    "1 <= n <= 2 * 10^9"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "4",
                        "explanation": "Day 1: Eat 1 orange (10 -> 9). Day 2: Eat 6 oranges (9 -> 3). Day 3: Eat 2 oranges (3 -> 1). Day 4: Eat 1 orange (1 -> 0)."
                    },
                    {
                        "input": "6",
                        "output": "3",
                        "explanation": "Day 1: Eat 3 oranges (6 -> 3). Day 2: Eat 2 oranges (3 -> 1). Day 3: Eat 1 orange (1 -> 0)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "In each step, choose between 2 options:\r\nminOranges = 1 + min( (n%2) + f(n/2), (n%3) + f(n/3) )\r\nwhere f(n) is the minimum number of days to eat n oranges."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minDays(int n) {\n    if (n <= 1)\n      return n;\n    if (const auto it = dp.find(n); it != dp.cend())\n      return it->second;\n    return dp[n] = 1 + min(minDays(n / 3) + n % 3,  //\n                           minDays(n / 2) + n % 2);\n  }\n\n private:\n  unordered_map<int, int> dp;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minDays(int n) {\n    if (n <= 1)\n      return n;\n    if (dp.containsKey(n))\n      return dp.get(n);\n\n    final int res = 1 + Math.min(minDays(n / 3) + n % 3, //\n                                 minDays(n / 2) + n % 2);\n    dp.put(n, res);\n    return res;\n  }\n\n  private Map<Integer, Integer> dp = new HashMap<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  @functools.lru_cache(None)\n  def minDays(self, n: int) -> int:\n    if n <= 1:\n      return n\n    return 1 + min(self.minDays(n // 3) + n % 3,\n                   self.minDays(n // 2) + n % 2)\n",
                "lang_text": "py"
            }
        }
    }
}