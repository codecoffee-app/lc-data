{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1482",
            "title": "Minimum Number of Days to Make m Bouquets",
            "titleSlug": "minimum-number-of-days-to-make-m-bouquets",
            "content": "<p>You are given an integer array <code>bloomDay</code>, an integer <code>m</code> and an integer <code>k</code>.</p>\n\n<p>You want to make <code>m</code> bouquets. To make a bouquet, you need to use <code>k</code> <strong>adjacent flowers</strong> from the garden.</p>\n\n<p>The garden consists of <code>n</code> flowers, the <code>i<sup>th</sup></code> flower will bloom in the <code>bloomDay[i]</code> and then can be used in <strong>exactly one</strong> bouquet.</p>\n\n<p>Return <em>the minimum number of days you need to wait to be able to make </em><code>m</code><em> bouquets from the garden</em>. If it is impossible to make m bouquets return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> bloomDay = [1,10,3,10,2], m = 3, k = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.\nWe need 3 bouquets each should contain 1 flower.\nAfter day 1: [x, _, _, _, _]   // we can only make one bouquet.\nAfter day 2: [x, _, _, _, x]   // we can only make two bouquets.\nAfter day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> bloomDay = [1,10,3,10,2], m = 3, k = 2\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> We need 2 bouquets each should have 3 flowers.\nHere is the garden after the 7 and 12 days:\nAfter day 7: [x, x, x, x, _, x, x]\nWe can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\nAfter day 12: [x, x, x, x, x, x, x]\nIt is obvious that we can make two bouquets in different ways.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>bloomDay.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= bloomDay[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3485,
            "dislikes": 90,
            "similarQuestions": "[{\"title\": \"Maximize the Confusion of an Exam\", \"titleSlug\": \"maximize-the-confusion-of-an-exam\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Earliest Possible Day of Full Bloom\", \"titleSlug\": \"earliest-possible-day-of-full-bloom\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"95.9K\", \"totalSubmission\": \"184.6K\", \"totalAcceptedRaw\": 95937, \"totalSubmissionRaw\": 184550, \"acRate\": \"52.0%\"}",
            "hints": [
                "If we can make m or more bouquets at day x, then we can still make m or more bouquets at any day y > x.",
                "We can check easily if we can make enough bouquets at day x if we can get group adjacent flowers at day x."
            ],
            "rephrased": {
                "body": "Given an integer array `bloomDay` representing the days each flower blooms, an integer `m` representing the number of bouquets needed, and an integer `k` representing the number of adjacent flowers required for each bouquet, determine the minimum number of days required to make `m` bouquets. If it's impossible to make `m` bouquets, return -1.",
                "constraints": [
                    "bloomDay.length == n",
                    "1 <= n <= 10^5",
                    "1 <= bloomDay[i] <= 10^9",
                    "1 <= m <= 10^6",
                    "1 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "bloomDay = [1,10,3,10,2], m = 3, k = 1",
                        "output": "3",
                        "explanation": "After 1 day, only the first flower blooms. After 2 days, the first and last flowers bloom. After 3 days, the first, third and last flowers bloom, allowing for 3 bouquets of size 1."
                    },
                    {
                        "input": "bloomDay = [1,10,3,10,2], m = 3, k = 2",
                        "output": "-1",
                        "explanation": "To create 3 bouquets each requiring 2 adjacent flowers, a total of 6 flowers are needed.  The garden only has 5 flowers, making it impossible to fulfill the requirements."
                    },
                    {
                        "input": "bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3",
                        "output": "12",
                        "explanation": "After 7 days, the bloomDay is [7,7,7,7,12,7,7]. One bouquet of size 3 can be made from the first three flowers. However, the last three blooming flowers are not adjacent to form another bouquet. Only after 12 days all the flowers have bloomed, allowing two bouquets of size 3 to be made."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximize-the-confusion-of-an-exam",
                "title": "Maximize the Confusion of an Exam",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "earliest-possible-day-of-full-bloom",
                "title": "Earliest Possible Day of Full Bloom",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If we can make m or more bouquets at day x, then we can still make m or more bouquets at any day y > x.",
            "We can check easily if we can make enough bouquets at day x if we can get group adjacent flowers at day x."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minDays(vector<int>& bloomDay, int m, int k) {\n    if (bloomDay.size() < static_cast<long>(m) * k)\n      return -1;\n\n    int l = *min_element(bloomDay.begin(), bloomDay.end());\n    int r = *max_element(bloomDay.begin(), bloomDay.end());\n\n    while (l < r) {\n      const int mid = (l + r) / 2;\n      if (getBouquetCount(bloomDay, k, mid) >= m)\n        r = mid;\n      else\n        l = mid + 1;\n    }\n\n    return l;\n  }\n\n private:\n  // Returns # of bouquet (k flowers needed) can be made after `waitingDays`.\n  int getBouquetCount(const vector<int>& bloomDay, int k, int waitingDays) {\n    int bouquetCount = 0;\n    int requiredFlowers = k;\n    for (const int day : bloomDay)\n      if (day > waitingDays) {\n        // Reset `requiredFlowers` since there was not enough adjacent flowers.\n        requiredFlowers = k;\n      } else if (--requiredFlowers == 0) {\n        // Use k adjacent flowers to make a bouquet.\n        ++bouquetCount;\n        requiredFlowers = k;\n      }\n    return bouquetCount;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minDays(int[] bloomDay, int m, int k) {\n    if (bloomDay.length < (long) m * k)\n      return -1;\n\n    int l = Arrays.stream(bloomDay).min().getAsInt();\n    int r = Arrays.stream(bloomDay).max().getAsInt();\n\n    while (l < r) {\n      final int mid = (l + r) / 2;\n      if (getBouquetCount(bloomDay, k, mid) >= m)\n        r = mid;\n      else\n        l = mid + 1;\n    }\n\n    return l;\n  }\n\n  // Returns # of bouquet (k flowers needed) can be made after `waitingDays`.\n  private int getBouquetCount(int[] bloomDay, int k, int waitingDays) {\n    int bouquetCount = 0;\n    int requiredFlowers = k;\n    for (final int day : bloomDay)\n      if (day > waitingDays) {\n        // Reset `requiredFlowers` since there was not enough adjacent flowers.\n        requiredFlowers = k;\n      } else if (--requiredFlowers == 0) {\n        // Use k adjacent flowers to make a bouquet.\n        ++bouquetCount;\n        requiredFlowers = k;\n      }\n    return bouquetCount;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minDays(self, bloomDay: List[int], m: int, k: int) -> int:\n    if len(bloomDay) < m * k:\n      return -1\n\n    # Returns # of bouquet (k flowers needed) can be made after `waitingDays`.\n    def getBouquetCount(waitingDays: int) -> int:\n      bouquetCount = 0\n      requiredFlowers = k\n      for day in bloomDay:\n        if day > waitingDays:\n          # Reset `requiredFlowers` since there was not enough adjacent flowers.\n          requiredFlowers = k\n        else:\n          requiredFlowers -= 1\n          if requiredFlowers == 0:\n            # Use k adjacent flowers to make a bouquet.\n            bouquetCount += 1\n            requiredFlowers = k\n      return bouquetCount\n\n    l = min(bloomDay)\n    r = max(bloomDay)\n\n    while l < r:\n      mid = (l + r) // 2\n      if getBouquetCount(mid) >= m:\n        r = mid\n      else:\n        l = mid + 1\n\n    return l\n",
                "lang_text": "py"
            }
        }
    }
}