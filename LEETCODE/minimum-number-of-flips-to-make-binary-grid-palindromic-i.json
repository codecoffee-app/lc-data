{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3239",
            "title": "Minimum Number of Flips to Make Binary Grid Palindromic I",
            "titleSlug": "minimum-number-of-flips-to-make-binary-grid-palindromic-i",
            "content": "<p>You are given an <code>m x n</code> binary matrix <code>grid</code>.</p>\n\n<p>A row or column is considered <strong>palindromic</strong> if its values read the same forward and backward.</p>\n\n<p>You can <strong>flip</strong> any number of cells in <code>grid</code> from <code>0</code> to <code>1</code>, or from <code>1</code> to <code>0</code>.</p>\n\n<p>Return the <strong>minimum</strong> number of cells that need to be flipped to make <strong>either</strong> all rows <strong>palindromic</strong> or all columns <strong>palindromic</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0,0],[0,0,0],[0,0,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/07/07/screenshot-from-2024-07-08-00-20-10.png\" style=\"width: 420px; height: 108px;\" /></p>\n\n<p>Flipping the highlighted cells makes all the rows palindromic.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = </span>[[0,1],[0,1],[0,0]]</p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/07/07/screenshot-from-2024-07-08-00-31-23.png\" style=\"width: 300px; height: 100px;\" /></p>\n\n<p>Flipping the highlighted cell makes all the columns palindromic.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1],[0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All rows are already palindromic.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 60,
            "dislikes": 6,
            "similarQuestions": "[{\"title\": \"Minimum Number of Moves to Make Palindrome\", \"titleSlug\": \"minimum-number-of-moves-to-make-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"32.4K\", \"totalSubmission\": \"41.5K\", \"totalAcceptedRaw\": 32440, \"totalSubmissionRaw\": 41450, \"acRate\": \"78.3%\"}",
            "hints": [
                "We need to perform the operation only when the equivalent element of <code>i</code> from the back is not equal."
            ],
            "rephrased": {
                "body": "Given an m x n binary matrix `grid`, determine the minimum number of cell flips needed to make either all rows or all columns palindromic. A row or column is considered palindromic if its values read the same forwards and backward. You can flip any number of cells in `grid` from 0 to 1, or from 1 to 0.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m * n <= 2 * 10^5",
                    "0 <= grid[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[[1,0,0],[0,0,0],[0,0,1]]",
                        "output": "2",
                        "explanation": "Flipping the appropriate cells makes all the rows palindromic, requiring a minimum of 2 flips."
                    },
                    {
                        "input": "[[0,1],[0,1],[0,0]]",
                        "output": "1",
                        "explanation": "Flipping the appropriate cell makes all the columns palindromic, requiring a minimum of 1 flip."
                    },
                    {
                        "input": "[[1],[0]]",
                        "output": "0",
                        "explanation": "All rows are already palindromic, so no flips are needed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-moves-to-make-palindrome",
                "title": "Minimum Number of Moves to Make Palindrome",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We need to perform the operation only when the equivalent element of <code>i</code> from the back is not equal."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minFlips(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    int rowFlips = 0;\n    int colFlips = 0;\n\n    for (const vector<int>& row : grid)\n      for (int i = 0; i < n / 2; ++i)\n        if (row[i] != row[n - 1 - i])\n          ++rowFlips;\n\n    for (int j = 0; j < n; ++j)\n      for (int i = 0; i < m / 2; ++i)\n        if (grid[i][j] != grid[m - 1 - i][j])\n          ++colFlips;\n\n    return min(rowFlips, colFlips);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minFlips(int[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    int rowFlips = 0;\n    int colFlips = 0;\n\n    for (int[] row : grid)\n      for (int i = 0; i < n / 2; ++i)\n        if (row[i] != row[n - 1 - i])\n          ++rowFlips;\n\n    for (int j = 0; j < n; ++j)\n      for (int i = 0; i < m / 2; ++i)\n        if (grid[i][j] != grid[m - 1 - i][j])\n          ++colFlips;\n\n    return Math.min(rowFlips, colFlips);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minFlips(self, grid: list[list[int]]) -> int:\n    rowFlips = sum(row[i] != row[-1 - i]\n                   for row in grid for i in range(len(row) // 2))\n    colFlips = sum(col[i] != col[-1 - i] for col in zip(*grid)\n                   for i in range(len(col) // 2))\n    return min(rowFlips, colFlips)\n",
                "lang_text": "py"
            }
        }
    }
}