{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3240",
            "title": "Minimum Number of Flips to Make Binary Grid Palindromic II",
            "titleSlug": "minimum-number-of-flips-to-make-binary-grid-palindromic-ii",
            "content": "<p>You are given an <code>m x n</code> binary matrix <code>grid</code>.</p>\n\n<p>A row or column is considered <strong>palindromic</strong> if its values read the same forward and backward.</p>\n\n<p>You can <strong>flip</strong> any number of cells in <code>grid</code> from <code>0</code> to <code>1</code>, or from <code>1</code> to <code>0</code>.</p>\n\n<p>Return the <strong>minimum</strong> number of cells that need to be flipped to make <strong>all</strong> rows and columns <strong>palindromic</strong>, and the total number of <code>1</code>&#39;s in <code>grid</code> <strong>divisible</strong> by <code>4</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0,0],[0,1,0],[0,0,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2024/08/01/image.png\" style=\"width: 400px; height: 105px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[0,1],[0,1],[0,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/07/08/screenshot-from-2024-07-09-01-37-48.png\" style=\"width: 300px; height: 104px;\" /></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1],[1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/01/screenshot-from-2024-08-01-23-05-26.png\" style=\"width: 200px; height: 70px;\" /></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 117,
            "dislikes": 48,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.6K\", \"totalSubmission\": \"41.3K\", \"totalAcceptedRaw\": 9583, \"totalSubmissionRaw\": 41341, \"acRate\": \"23.2%\"}",
            "hints": [
                "For each <code>(x, y)</code>, find <code>(m - 1 - x, y)</code>, <code>(m - 1 - x, n - 1 - y)</code>, and <code>(x, n - 1 - y)</code>; they should be the same.",
                "Note that we need to specially handle the middle row (column) if the number of rows (columns) is odd."
            ],
            "rephrased": {
                "body": "Given an m x n binary matrix grid. A row or column is considered palindromic if its values read the same forward and backward. You can flip any number of cells in grid from 0 to 1, or from 1 to 0. Return the minimum number of cells that need to be flipped to make all rows and columns palindromic, and the total number of 1's in grid divisible by 4.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m * n <= 2 * 10^5",
                    "0 <= grid[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[[1,0,0],[0,1,0],[0,0,1]]",
                        "output": "3",
                        "explanation": "The minimum number of flips required is 3 to make all rows and columns palindromic, and to have a total number of 1s divisible by 4."
                    },
                    {
                        "input": "[[0,1],[0,1],[0,0]]",
                        "output": "2",
                        "explanation": "The minimum number of flips required is 2 to make all rows and columns palindromic, and to have a total number of 1s divisible by 4."
                    },
                    {
                        "input": "[[1],[1]]",
                        "output": "2",
                        "explanation": "The minimum number of flips required is 2 to make all rows and columns palindromic, and to have a total number of 1s divisible by 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For each <code>(x, y)</code>, find <code>(m - 1 - x, y)</code>, <code>(m - 1 - x, n - 1 - y)</code>, and <code>(x, n - 1 - y)</code>; they should be the same.",
            "Note that we need to specially handle the middle row (column) if the number of rows (columns) is odd."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minFlips(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    int ans = 0;\n    int middleOnes = 0;\n    int mismatchedPairs = 0;\n\n    // Handle top-left, top-right, bottom-left, bottom-right cells.\n    for (int i = 0; i < m / 2; ++i)\n      for (int j = 0; j < n / 2; ++j) {\n        const int ones = grid[i][j] + grid[i][n - 1 - j] + grid[m - 1 - i][j] +\n                         grid[m - 1 - i][n - 1 - j];\n        ans += min(ones, 4 - ones);\n      }\n\n    // Handle the middle row if the number of m is odd.\n    if (m % 2 == 1)\n      for (int j = 0; j < n / 2; ++j) {\n        const int leftCell = grid[m / 2][j];\n        const int rightCell = grid[m / 2][n - 1 - j];\n        mismatchedPairs += leftCell ^ rightCell;\n        middleOnes += leftCell + rightCell;\n      }\n\n    // Handle the middle column if the number of columns is odd.\n    if (n % 2 == 1)\n      for (int i = 0; i < m / 2; ++i) {\n        const int topCell = grid[i][n / 2];\n        const int bottomCell = grid[m - 1 - i][n / 2];\n        mismatchedPairs += topCell ^ bottomCell;\n        middleOnes += topCell + bottomCell;\n      }\n\n    if (mismatchedPairs == 0) {\n      // Since there's no mismatched pairs, middleOnes % 4 must be 0 or 2.\n      if (middleOnes % 4 == 2)\n        ans += 2;  // Flip two 1s to 0s.\n    } else {\n      // Flip every mismatched pair 01 to 00 or 11. It doesn't matter.\n      ans += mismatchedPairs;\n    }\n\n    // Handle the center cell if both dimensions are odd.\n    if (m % 2 == 1 && n % 2 == 1)\n      ans += grid[m / 2][n / 2];\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minFlips(int[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    int ans = 0;\n    int middleOnes = 0;\n    int mismatchedPairs = 0;\n\n    // Handle top-left, top-right, bottom-left, bottom-right cells.\n    for (int i = 0; i < m / 2; ++i) {\n      for (int j = 0; j < n / 2; ++j) {\n        final int ones =\n            grid[i][j] + grid[i][n - 1 - j] + grid[m - 1 - i][j] + grid[m - 1 - i][n - 1 - j];\n        ans += Math.min(ones, 4 - ones);\n      }\n    }\n\n    // Handle the middle row if the number of m is odd.\n    if (m % 2 == 1)\n      for (int j = 0; j < n / 2; ++j) {\n        final int leftCell = grid[m / 2][j];\n        final int rightCell = grid[m / 2][n - 1 - j];\n        mismatchedPairs += leftCell ^ rightCell;\n        middleOnes += leftCell + rightCell;\n      }\n\n    // Handle the middle column if the number of columns is odd.\n    if (n % 2 == 1)\n      for (int i = 0; i < m / 2; ++i) {\n        final int topCell = grid[i][n / 2];\n        final int bottomCell = grid[m - 1 - i][n / 2];\n        mismatchedPairs += topCell ^ bottomCell;\n        middleOnes += topCell + bottomCell;\n      }\n\n    if (mismatchedPairs == 0) {\n      // Since there's no mismatched pairs, middleOnes % 4 must be 0 or 2.\n      if (middleOnes % 4 == 2)\n        ans += 2; // Flip two 1s to 0s.\n    } else {\n      // Flip every mismatched pair 01 to 00 or 11. It doesn't matter.\n      ans += mismatchedPairs;\n    }\n\n    // Handle the center cell if both dimensions are odd.\n    if (m % 2 == 1 && n % 2 == 1)\n      ans += grid[m / 2][n / 2];\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minFlips(self, grid: list[list[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    ans = 0\n    middleOnes = 0\n    mismatchedPairs = 0\n\n    # Handle top-left, top-right, bottom-left, bottom-right cells.\n    for i in range(m // 2):\n      for j in range(n // 2):\n        ones = (grid[i][j] + grid[i][n - 1 - j] +\n                grid[m - 1 - i][j] + grid[m - 1 - i][n - 1 - j])\n        ans += min(ones, 4 - ones)\n\n    # Handle the middle row if the number of m is odd.\n    if m % 2 == 1:\n      for j in range(n // 2):\n        leftCell = grid[m // 2][j]\n        rightCell = grid[m // 2][n - 1 - j]\n        mismatchedPairs += leftCell ^ rightCell\n        middleOnes += leftCell + rightCell\n\n    # Handle the middle column if the number of columns is odd.\n    if n % 2 == 1:\n      for i in range(m // 2):\n        topCell = grid[i][n // 2]\n        bottomCell = grid[m - 1 - i][n // 2]\n        mismatchedPairs += topCell ^ bottomCell\n        middleOnes += topCell + bottomCell\n\n    if mismatchedPairs == 0:\n      # Since there's no mismatched pairs, middleOnes % 4 must be 0 or 2.\n      if middleOnes % 4 == 2:\n        ans += 2  # Flip two 1s to 0s.\n    else:\n      # Flip every mismatched pair 01 to 00 or 11. It doesn't matter.\n      ans += mismatchedPairs\n\n    # Handle the center cell if both dimensions are odd.\n    if m % 2 == 1 and n % 2 == 1:\n      ans += grid[m // 2][n // 2]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}