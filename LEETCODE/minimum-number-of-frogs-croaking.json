{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1419",
            "title": "Minimum Number of Frogs Croaking",
            "titleSlug": "minimum-number-of-frogs-croaking",
            "content": "<p>You are given the string <code>croakOfFrogs</code>, which represents a combination of the string <code>&quot;croak&quot;</code> from different frogs, that is, multiple frogs can croak at the same time, so multiple <code>&quot;croak&quot;</code> are mixed.</p>\n\n<p><em>Return the minimum number of </em>different<em> frogs to finish all the croaks in the given string.</em></p>\n\n<p>A valid <code>&quot;croak&quot;</code> means a frog is printing five letters <code>&#39;c&#39;</code>, <code>&#39;r&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;a&#39;</code>, and <code>&#39;k&#39;</code> <strong>sequentially</strong>. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid <code>&quot;croak&quot;</code> return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> croakOfFrogs = &quot;croakcroak&quot;\n<strong>Output:</strong> 1 \n<strong>Explanation:</strong> One frog yelling &quot;croak<strong>&quot;</strong> twice.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> croakOfFrogs = &quot;crcoakroak&quot;\n<strong>Output:</strong> 2 \n<strong>Explanation:</strong> The minimum number of frogs is two. \nThe first frog could yell &quot;<strong>cr</strong>c<strong>oak</strong>roak&quot;.\nThe second frog could yell later &quot;cr<strong>c</strong>oak<strong>roak</strong>&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> croakOfFrogs = &quot;croakcrook&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The given string is an invalid combination of &quot;croak<strong>&quot;</strong> from different frogs.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= croakOfFrogs.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>croakOfFrogs</code> is either <code>&#39;c&#39;</code>, <code>&#39;r&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;a&#39;</code>, or <code>&#39;k&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 992,
            "dislikes": 80,
            "similarQuestions": "[{\"title\": \"Divide Intervals Into Minimum Number of Groups\", \"titleSlug\": \"divide-intervals-into-minimum-number-of-groups\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"44.9K\", \"totalSubmission\": \"89.4K\", \"totalAcceptedRaw\": 44855, \"totalSubmissionRaw\": 89381, \"acRate\": \"50.2%\"}",
            "hints": [
                "keep the frequency of all characters from \"croak\" using a hashmap.",
                "For each character in the given string, greedily match it to a possible \"croak\"."
            ],
            "rephrased": {
                "body": "Given a string `croakOfFrogs` representing a combination of \"croak\" sequences from different frogs, determine the minimum number of distinct frogs required to complete all the croaks in the string. Frogs can croak concurrently, resulting in a mixed \"croak\" sequence.\n\nA valid \"croak\" consists of the letters 'c', 'r', 'o', 'a', and 'k' appearing in that order. Each frog must complete all five letters to finish a croak. If the input string is not a valid combination of \"croak\" sequences, return -1.",
                "constraints": [
                    "1 <= croakOfFrogs.length <= 10^5",
                    "croakOfFrogs consists only of the characters 'c', 'r', 'o', 'a', or 'k'."
                ],
                "testcases": [
                    {
                        "input": "croakcroak",
                        "output": 1,
                        "explanation": "One frog completes two \"croak\" sequences in succession."
                    },
                    {
                        "input": "crcoakroak",
                        "output": 2,
                        "explanation": "Two frogs are required. The first frog croaks \"cr[c]oak[roak]\" and the second frog croaks \"[cr]coakroak\" where the brackets indicate the 1st frog croaks first"
                    },
                    {
                        "input": "croakcrook",
                        "output": -1,
                        "explanation": "The input string contains an invalid combination of characters and is not a valid sequence of \"croak\" sounds."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "divide-intervals-into-minimum-number-of-groups",
                "title": "Divide Intervals Into Minimum Number of Groups",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "keep the frequency of all characters from \"croak\" using a hashmap.",
            "For each character in the given string, greedily match it to a possible \"croak\"."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minNumberOfFrogs(string croakOfFrogs) {\n    const string kCroak = \"croak\";\n    int ans = 0;\n    int frogs = 0;\n    vector<int> count(5);\n\n    for (const char c : croakOfFrogs) {\n      ++count[kCroak.find(c)];\n      for (int i = 1; i < 5; ++i)\n        if (count[i] > count[i - 1])\n          return -1;\n      if (c == 'c')\n        ++frogs;\n      else if (c == 'k')\n        --frogs;\n      ans = max(ans, frogs);\n    }\n\n    return frogs == 0 ? ans : -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minNumberOfFrogs(String croakOfFrogs) {\n    final String kCroak = \"croak\";\n    int ans = 0;\n    int frogs = 0;\n    int[] count = new int[5];\n\n    for (final char c : croakOfFrogs.toCharArray()) {\n      ++count[kCroak.indexOf(c)];\n      for (int i = 1; i < 5; ++i)\n        if (count[i] > count[i - 1])\n          return -1;\n      if (c == 'c')\n        ++frogs;\n      else if (c == 'k')\n        --frogs;\n      ans = Math.max(ans, frogs);\n    }\n\n    return frogs == 0 ? ans : -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n    kCroak = 'croak'\n    ans = 0\n    frogs = 0\n    count = [0] * 5\n\n    for c in croakOfFrogs:\n      count[kCroak.index(c)] += 1\n      if any(count[i] > count[i - 1] for i in range(1, 5)):\n        return -1\n      if c == 'c':\n        frogs += 1\n      elif c == 'k':\n        frogs -= 1\n      ans = max(ans, frogs)\n\n    return ans if frogs == 0 else -1\n",
                "lang_text": "py"
            }
        }
    }
}