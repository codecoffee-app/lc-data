{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2910",
            "title": "Minimum Number of Groups to Create a Valid Assignment",
            "titleSlug": "minimum-number-of-groups-to-create-a-valid-assignment",
            "content": "<p>You are given a collection of numbered <code>balls</code>&nbsp;and instructed to sort them into boxes for a nearly balanced distribution. There are two rules you must follow:</p>\n\n<ul>\n\t<li>Balls with the same&nbsp;box must have the same value. But, if you have more than one ball with the same number, you can put them in different boxes.</li>\n\t<li>The biggest box can only have one more ball than the smallest box.</li>\n</ul>\n\n<p>\u200bReturn the <em>fewest number of boxes</em> to sort these balls following these rules.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1: </strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> balls = [3,2,3,2,3] </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 2 </span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can sort <code>balls</code> into boxes as follows:</p>\n\n<ul>\n\t<li><code>[3,3,3]</code></li>\n\t<li><code>[2,2]</code></li>\n</ul>\n\n<p>The size difference between the two boxes doesn&#39;t exceed one.</p>\n</div>\n\n<p><strong class=\"example\">Example 2: </strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> balls = [10,10,10,3,1,1] </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> 4 </span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can sort <code>balls</code> into boxes as follows:</p>\n\n<ul>\n</ul>\n\n<ul>\n\t<li><code>[10]</code></li>\n\t<li><code>[10,10]</code></li>\n\t<li><code>[3]</code></li>\n\t<li><code>[1,1]</code></li>\n</ul>\n\n<p>You can&#39;t use fewer than four boxes while still following the rules. For example, putting all three balls numbered 10 in one box would break the rule about the maximum size difference between boxes.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 367,
            "dislikes": 175,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.2K\", \"totalSubmission\": \"48.8K\", \"totalAcceptedRaw\": 12233, \"totalSubmissionRaw\": 48796, \"acRate\": \"25.1%\"}",
            "hints": [
                "Calculate the frequency of each number.",
                "For each <code>x</code> in the range <code>[1, minimum_frequency]</code>, try to create groups with either <code>x</code> or <code>x + 1</code> indices assigned to them while minimizing the total number of groups.",
                "For each distinct number, using its frequency, check that all its occurrences can be assigned to groups of size <code>x</code> or <code>x + 1</code> while minimizing the number of groups used.",
                "To get the minimum number of groups needed for a number having frequency <code>f</code> to be assigned to groups of size <code>x</code> or <code>x + 1</code>, let <code>a = f / (x + 1)</code> and <code>b = f % (x + 1)</code>. <ul> <li>If <code>b == 0</code>, then we can simply create <code>a</code> groups of size <code>x + 1</code>.</li> <li>If <code>x - b <= a</code>, we can have <code>a - (x - b)</code> groups of size <code>x + 1</code> and <code>x - b + 1</code> groups of size <code>x</code>. So, in total, we have <code>a + 1</code> groups.</li> <li>Otherwise, it's impossible.</li> </ul>",
                "The minimum number of groups needed for some <code>x</code> is the total minimized number of groups needed for each distinct number.",
                "The answer is the minimum number of groups needed for each <code>x</code> in the range <code>[1, minimum_frequency]</code>."
            ],
            "rephrased": {
                "body": "You are given a collection of numbered balls and instructed to sort them into boxes for a nearly balanced distribution. There are two rules you must follow:\n\n*   Balls within the same box must have the same value. However, balls with the same number can be placed in different boxes.\n*   The largest box can contain at most one more ball than the smallest box.\n\nReturn the fewest number of boxes required to sort these balls while adhering to the specified rules.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[3,2,3,2,3]",
                        "output": "2",
                        "explanation": "We can sort the balls into boxes as follows:\n[3,3,3]\n[2,2]\nThe size difference between the two boxes does not exceed one."
                    },
                    {
                        "input": "[10,10,10,3,1,1]",
                        "output": "4",
                        "explanation": "We can sort the balls into boxes as follows:\n[10]\n[10,10]\n[3]\n[1,1]\nIt is not possible to use fewer than four boxes while still following the rules. For example, placing all three balls numbered 10 in a single box would violate the maximum size difference constraint."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Calculate the frequency of each number.",
            "For each <code>x</code> in the range <code>[1, minimum_frequency]</code>, try to create groups with either <code>x</code> or <code>x + 1</code> indices assigned to them while minimizing the total number of groups.",
            "For each distinct number, using its frequency, check that all its occurrences can be assigned to groups of size <code>x</code> or <code>x + 1</code> while minimizing the number of groups used.",
            "To get the minimum number of groups needed for a number having frequency <code>f</code> to be assigned to groups of size <code>x</code> or <code>x + 1</code>, let <code>a = f / (x + 1)</code> and <code>b = f % (x + 1)</code>. <ul> <li>If <code>b == 0</code>, then we can simply create <code>a</code> groups of size <code>x + 1</code>.</li> <li>If <code>x - b <= a</code>, we can have <code>a - (x - b)</code> groups of size <code>x + 1</code> and <code>x - b + 1</code> groups of size <code>x</code>. So, in total, we have <code>a + 1</code> groups.</li> <li>Otherwise, it's impossible.</li> </ul>",
            "The minimum number of groups needed for some <code>x</code> is the total minimized number of groups needed for each distinct number.",
            "The answer is the minimum number of groups needed for each <code>x</code> in the range <code>[1, minimum_frequency]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minGroupsForValidAssignment(vector<int>& nums) {\n    unordered_map<int, int> count;\n    int minFreq = nums.size();\n\n    for (const int num : nums)\n      ++count[num];\n\n    for (const auto& [_, freq] : count)\n      minFreq = min(minFreq, freq);\n\n    for (int groupSize = minFreq; groupSize >= 1; --groupSize) {\n      const int numGroups = getNumGroups(count, groupSize);\n      if (numGroups > 0)\n        return numGroups;\n    }\n\n    throw;\n  }\n\n private:\n  // Returns the number of groups if each group's size is `groupSize` or\n  // `groupSize + 1`.\n  int getNumGroups(unordered_map<int, int>& count, int groupSize) {\n    int numGroups = 0;\n    for (const auto& [_, freq] : count) {\n      const int a = freq / (groupSize + 1);\n      const int b = freq % (groupSize + 1);\n      if (b == 0) {\n        numGroups += a;\n      } else if (groupSize - b <= a) {\n        // Assign 1 number from `groupSize - b` out of `a` groups to this group,\n        // so we'll have `a - (groupSize - b)` groups of size `groupSize + 1`\n        // and `groupSize - b + 1` groups of size `groupSize`. In total, we have\n        // `a + 1` groups.\n        numGroups += a + 1;\n      } else {\n        return 0;\n      }\n    }\n    return numGroups;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minGroupsForValidAssignment(int[] nums) {\n    Map<Integer, Integer> count = new HashMap<>();\n    int minFreq = nums.length;\n\n    for (final int num : nums)\n      count.merge(num, 1, Integer::sum);\n\n    for (final int freq : count.values())\n      minFreq = Math.min(minFreq, freq);\n\n    for (int groupSize = minFreq; groupSize >= 1; --groupSize) {\n      final int numGroups = getNumGroups(count, groupSize);\n      if (numGroups > 0)\n        return numGroups;\n    }\n\n    throw new IllegalArgumentException();\n  }\n\n  // Returns the number of groups if each group's size is `groupSize` or\n  // `groupSize + 1`.\n  private int getNumGroups(Map<Integer, Integer> count, int groupSize) {\n    int numGroups = 0;\n    for (final int freq : count.values()) {\n      final int a = freq / (groupSize + 1);\n      final int b = freq % (groupSize + 1);\n      if (b == 0) {\n        numGroups += a;\n      } else if (groupSize - b <= a) {\n        // Assign 1 number from `groupSize - b` out of `a` groups to this group,\n        // so we'll have `a - (groupSize - b)` groups of size `groupSize + 1`\n        // and `groupSize - b + 1` groups of size `groupSize`. In total, we have\n        // `a + 1` groups.\n        numGroups += a + 1;\n      } else {\n        return 0;\n      }\n    }\n    return numGroups;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minGroupsForValidAssignment(self, nums: List[int]) -> int:\n    count = collections.Counter(nums)\n    minFreq = min(count.values())\n\n    for groupSize in range(minFreq, 0, -1):\n      numGroups = self.getNumGroups(count, groupSize)\n      if numGroups > 0:\n        return numGroups\n\n    raise ValueError(\"Invalid argument\")\n\n  def getNumGroups(self, count: Dict[int, int], groupSize: int) -> int:\n    \"\"\"Returns the number of groups if each group's size is `groupSize` or `groupSize + 1`.\"\"\"\n    numGroups = 0\n    for freq in count.values():\n      a = freq // (groupSize + 1)\n      b = freq % (groupSize + 1)\n      if b == 0:\n        # Assign 1 number from `groupSize - b` out of `a` groups to this group,\n        # so we'll have `a - (groupSize - b)` groups of size `groupSize + 1`\n        # and `groupSize - b + 1` groups of size `groupSize`. In total, we have\n        # `a + 1` groups.\n        numGroups += a\n      elif groupSize - b <= a:\n        numGroups += a + 1\n      else:\n        return 0\n    return numGroups\n",
                "lang_text": "py"
            }
        }
    }
}