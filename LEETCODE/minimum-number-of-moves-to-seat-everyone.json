{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2037",
            "title": "Minimum Number of Moves to Seat Everyone",
            "titleSlug": "minimum-number-of-moves-to-seat-everyone",
            "content": "<p>There are <code>n</code> seats and <code>n</code> students in a room. You are given an array <code>seats</code> of length <code>n</code>, where <code>seats[i]</code> is the position of the <code>i<sup>th</sup></code> seat. You are also given the array <code>students</code> of length <code>n</code>, where <code>students[j]</code> is the position of the <code>j<sup>th</sup></code> student.</p>\n\n<p>You may perform the following move any number of times:</p>\n\n<ul>\n\t<li>Increase or decrease the position of the <code>i<sup>th</sup></code> student by <code>1</code> (i.e., moving the <code>i<sup>th</sup></code> student from position&nbsp;<code>x</code>&nbsp;to <code>x + 1</code> or <code>x - 1</code>)</li>\n</ul>\n\n<p>Return <em>the <strong>minimum number of moves</strong> required to move each student to a seat</em><em> such that no two students are in the same seat.</em></p>\n\n<p>Note that there may be <strong>multiple</strong> seats or students in the <strong>same </strong>position at the beginning.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> seats = [3,1,5], students = [2,7,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The students are moved as follows:\n- The first student is moved from from position 2 to position 1 using 1 move.\n- The second student is moved from from position 7 to position 5 using 2 moves.\n- The third student is moved from from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> seats = [4,1,5,9], students = [1,3,2,6]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The students are moved as follows:\n- The first student is not moved.\n- The second student is moved from from position 3 to position 4 using 1 move.\n- The third student is moved from from position 2 to position 5 using 3 moves.\n- The fourth student is moved from from position 6 to position 9 using 3 moves.\nIn total, 0 + 1 + 3 + 3 = 7 moves were used.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> seats = [2,2,6,6], students = [1,3,2,6]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Note that there are two seats at position 2 and two seats at position 6.\nThe students are moved as follows:\n- The first student is moved from from position 1 to position 2 using 1 move.\n- The second student is moved from from position 3 to position 6 using 3 moves.\n- The third student is not moved.\n- The fourth student is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == seats.length == students.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= seats[i], students[j] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 742,
            "dislikes": 143,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"61.2K\", \"totalSubmission\": \"75K\", \"totalAcceptedRaw\": 61237, \"totalSubmissionRaw\": 75025, \"acRate\": \"81.6%\"}",
            "hints": [
                "Can we sort the arrays to help solve the problem?",
                "Can we greedily match each student to a seat?",
                "The smallest positioned student will go to the smallest positioned chair, and then the next smallest positioned student will go to the next smallest positioned chair, and so on."
            ],
            "rephrased": {
                "body": "Given `n` seats and `n` students in a room, where `seats[i]` represents the position of the `i<sup>th</sup>` seat and `students[j]` represents the position of the `j<sup>th</sup>` student. The goal is to determine the minimum number of moves required to assign each student to a seat such that no two students occupy the same seat. A move consists of increasing or decreasing a student's position by 1.  Multiple seats or students can initially be at the same position.",
                "constraints": [
                    "n == seats.length == students.length",
                    "1 <= n <= 100",
                    "1 <= seats[i], students[j] <= 100"
                ],
                "testcases": [
                    {
                        "input": "seats = [3,1,5], students = [2,7,4]",
                        "output": "4",
                        "explanation": "Optimal moves: Student at position 2 moves to seat at position 1 (1 move). Student at position 7 moves to seat at position 5 (2 moves). Student at position 4 moves to seat at position 3 (1 move). Total moves: 1 + 2 + 1 = 4."
                    },
                    {
                        "input": "seats = [4,1,5,9], students = [1,3,2,6]",
                        "output": "7",
                        "explanation": "Optimal moves: Student at position 1 stays at position 1 (0 moves). Student at position 3 moves to seat at position 4 (1 move). Student at position 2 moves to seat at position 5 (3 moves). Student at position 6 moves to seat at position 9 (3 moves). Total moves: 0 + 1 + 3 + 3 = 7."
                    },
                    {
                        "input": "seats = [2,2,6,6], students = [1,3,2,6]",
                        "output": "4",
                        "explanation": "Optimal moves: Student at position 1 moves to seat at position 2 (1 move). Student at position 3 moves to seat at position 6 (3 moves). Student at position 2 does not move to position 2 (0 move). Student at position 6 does not move to position 6 (0 move). Total moves: 1 + 3 + 0 + 0 = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can we sort the arrays to help solve the problem?",
            "Can we greedily match each student to a seat?",
            "The smallest positioned student will go to the smallest positioned chair, and then the next smallest positioned student will go to the next smallest positioned chair, and so on."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minMovesToSeat(vector<int>& seats, vector<int>& students) {\n    int ans = 0;\n\n    std::ranges::sort(seats);\n    std::ranges::sort(students);\n\n    for (int i = 0; i < seats.size(); ++i)\n      ans += abs(seats[i] - students[i]);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minMovesToSeat(int[] seats, int[] students) {\n    int res = 0;\n\n    Arrays.sort(seats);\n    Arrays.sort(students);\n\n    for (int i = 0; i < seats.length; ++i)\n      res += Math.abs(seats[i] - students[i]);\n\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:\n    return sum(abs(seat - student) for seat, student in zip(sorted(seats), sorted(students)))\n",
                "lang_text": "py"
            }
        }
    }
}