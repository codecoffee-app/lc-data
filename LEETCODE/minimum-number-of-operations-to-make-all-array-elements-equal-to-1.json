{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2654",
            "title": "Minimum Number of Operations to Make All Array Elements Equal to 1",
            "titleSlug": "minimum-number-of-operations-to-make-all-array-elements-equal-to-1",
            "content": "<p>You are given a <strong>0-indexed</strong>&nbsp;array <code>nums</code> consisiting of <strong>positive</strong> integers. You can do the following operation on the array <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Select an index <code>i</code> such that <code>0 &lt;= i &lt; n - 1</code> and replace either of&nbsp;<code>nums[i]</code> or <code>nums[i+1]</code> with their gcd value.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of operations to make all elements of </em><code>nums</code><em> equal to </em><code>1</code>. If it is impossible, return <code>-1</code>.</p>\n\n<p>The gcd of two integers is the greatest common divisor of the two integers.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,6,3,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We can do the following operations:\n- Choose index i = 2 and replace nums[2] with gcd(3,4) = 1. Now we have nums = [2,6,1,4].\n- Choose index i = 1 and replace nums[1] with gcd(6,1) = 1. Now we have nums = [2,1,1,4].\n- Choose index i = 0 and replace nums[0] with gcd(2,1) = 1. Now we have nums = [1,1,1,4].\n- Choose index i = 2 and replace nums[3] with gcd(1,4) = 1. Now we have nums = [1,1,1,1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,10,6,14]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It can be shown that it is impossible to make all the elements equal to 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow-up:</b></p>\n\n<p>The <code>O(n)</code> time complexity&nbsp;solution works, but could you find an <code>O(1)</code> constant time complexity solution?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 367,
            "dislikes": 14,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.6K\", \"totalSubmission\": \"33.3K\", \"totalAcceptedRaw\": 11566, \"totalSubmissionRaw\": 33304, \"acRate\": \"34.7%\"}",
            "hints": [
                "Note that if you have at least one occurrence of 1 in the array, then you can make all the other elements equal to 1 with one operation each.",
                "Try finding the shortest subarray with a gcd equal to 1."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` consisting of positive integers, you can perform the following operation any number of times:\n\nSelect an index `i` such that `0 <= i < n - 1` and replace either `nums[i]` or `nums[i+1]` with their greatest common divisor (GCD).\n\nReturn the minimum number of operations needed to make all elements of `nums` equal to 1. If it is impossible, return -1.",
                "constraints": [
                    "2 <= nums.length <= 50",
                    "1 <= nums[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2,6,3,4]",
                        "output": "4",
                        "explanation": "We can perform the following operations:\n1. Choose index i = 2 and replace nums[2] with gcd(3,4) = 1. Now we have nums = [2,6,1,4].\n2. Choose index i = 1 and replace nums[1] with gcd(6,1) = 1. Now we have nums = [2,1,1,4].\n3. Choose index i = 0 and replace nums[0] with gcd(2,1) = 1. Now we have nums = [1,1,1,4].\n4. Choose index i = 2 and replace nums[3] with gcd(1,4) = 1. Now we have nums = [1,1,1,1]."
                    },
                    {
                        "input": "[2,10,6,14]",
                        "output": "-1",
                        "explanation": "It is impossible to make all the elements equal to 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Note that if you have at least one occurrence of 1 in the array, then you can make all the other elements equal to 1 with one operation each.",
            "Try finding the shortest subarray with a gcd equal to 1."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& nums) {\n    const int n = nums.size();\n    const int ones = count(nums.begin(), nums.end(), 1);\n    if (ones > 0)\n      return n - ones;\n\n    // ops to make the shortest subarray with a gcd == 1\n    int minOps = INT_MAX;\n\n    for (int i = 0; i < n; ++i) {\n      int g = nums[i];\n      for (int j = i + 1; j < n; ++j) {\n        g = __gcd(g, nums[j]);\n        if (g == 1) {  // gcd(nums[i..j]) == 1\n          minOps = min(minOps, j - i);\n          break;\n        }\n      }\n    }\n\n    // After making the shortest subarray with `minOps`, need additional n - 1\n    // ops to make other nums to 1.\n    return minOps == INT_MAX ? -1 : minOps + n - 1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int[] nums) {\n    final int n = nums.length;\n    final int ones = (int) Arrays.stream(nums).filter(num -> num == 1).count();\n    if (ones > 0)\n      return n - ones;\n\n    // ops to make the shortest subarray with a gcd == 1\n    int minOps = Integer.MAX_VALUE;\n\n    for (int i = 0; i < n; ++i) {\n      int g = nums[i];\n      for (int j = i + 1; j < n; ++j) {\n        g = gcd(g, nums[j]);\n        if (g == 1) { // gcd(nums[i..j]) == 1\n          minOps = Math.min(minOps, j - i);\n          break;\n        }\n      }\n    }\n\n    // After making the shortest subarray with `minOps`, need additional n - 1\n    // ops to make other nums to 1.\n    return minOps == Integer.MAX_VALUE ? -1 : minOps + n - 1;\n  }\n\n  private int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums: List[int]) -> int:\n    n = len(nums)\n    ones = nums.count(1)\n    if ones > 0:\n      return n - ones\n\n    # ops to make the shortest subarray with a gcd == 1\n    minOps = math.inf\n\n    for i, g in enumerate(nums):\n      for j in range(i + 1, n):\n        g = math.gcd(g, nums[j])\n        if g == 1:   # gcd(nums[i..j]:== 1\n          minOps = min(minOps, j - i)\n          break\n\n    # After making the shortest subarray with `minOps`, need additional n - 1\n    # ops to make other nums to 1.\n    return -1 if minOps == math.inf else minOps + n - 1\n",
                "lang_text": "py"
            }
        }
    }
}