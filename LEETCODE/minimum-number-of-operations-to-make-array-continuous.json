{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2009",
            "title": "Minimum Number of Operations to Make Array Continuous",
            "titleSlug": "minimum-number-of-operations-to-make-array-continuous",
            "content": "<p>You are given an integer array <code>nums</code>. In one operation, you can replace <strong>any</strong> element in <code>nums</code> with <strong>any</strong> integer.</p>\n\n<p><code>nums</code> is considered <strong>continuous</strong> if both of the following conditions are fulfilled:</p>\n\n<ul>\n\t<li>All elements in <code>nums</code> are <strong>unique</strong>.</li>\n\t<li>The difference between the <strong>maximum</strong> element and the <strong>minimum</strong> element in <code>nums</code> equals <code>nums.length - 1</code>.</li>\n</ul>\n\n<p>For example, <code>nums = [4, 2, 5, 3]</code> is <strong>continuous</strong>, but <code>nums = [1, 2, 3, 5, 6]</code> is <strong>not continuous</strong>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations to make </em><code>nums</code><em> </em><strong><em>continuous</em></strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,5,3]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>&nbsp;nums is already continuous.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,5,6]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>&nbsp;One possible solution is to change the last element to 4.\nThe resulting array is [1,2,3,5,4], which is continuous.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,10,100,1000]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>&nbsp;One possible solution is to:\n- Change the second element to 2.\n- Change the third element to 3.\n- Change the fourth element to 4.\nThe resulting array is [1,2,3,4], which is continuous.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1795,
            "dislikes": 46,
            "similarQuestions": "[{\"title\": \"Longest Repeating Character Replacement\", \"titleSlug\": \"longest-repeating-character-replacement\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Continuous Subarray Sum\", \"titleSlug\": \"continuous-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Moving Stones Until Consecutive II\", \"titleSlug\": \"moving-stones-until-consecutive-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum One Bit Operations to Make Integers Zero\", \"titleSlug\": \"minimum-one-bit-operations-to-make-integers-zero\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Adjacent Swaps for K Consecutive Ones\", \"titleSlug\": \"minimum-adjacent-swaps-for-k-consecutive-ones\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"70.4K\", \"totalSubmission\": \"131.9K\", \"totalAcceptedRaw\": 70417, \"totalSubmissionRaw\": 131880, \"acRate\": \"53.4%\"}",
            "hints": [
                "Sort the array.",
                "For every index do a binary search to get the possible right end of the window and calculate the possible answer."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, you can replace any element in `nums` with any integer in a single operation. The goal is to determine the minimum number of operations required to make `nums` continuous.\n\nAn array `nums` is considered continuous if it satisfies the following conditions:\n\n1.  All elements in `nums` are unique.\n2.  The difference between the maximum and minimum element in `nums` equals `nums.length - 1`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[4,2,5,3]",
                        "output": "0",
                        "explanation": "The input array is already continuous."
                    },
                    {
                        "input": "[1,2,3,5,6]",
                        "output": "1",
                        "explanation": "One possible solution is to change the last element to 4.  The resulting array is [1,2,3,5,4], which is continuous."
                    },
                    {
                        "input": "[1,10,100,1000]",
                        "output": "3",
                        "explanation": "One possible solution is to change the second element to 2, the third to 3, and the fourth to 4. The resulting array is [1,2,3,4], which is continuous."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-repeating-character-replacement",
                "title": "Longest Repeating Character Replacement",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "continuous-subarray-sum",
                "title": "Continuous Subarray Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "moving-stones-until-consecutive-ii",
                "title": "Moving Stones Until Consecutive II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-one-bit-operations-to-make-integers-zero",
                "title": "Minimum One Bit Operations to Make Integers Zero",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-adjacent-swaps-for-k-consecutive-ones",
                "title": "Minimum Adjacent Swaps for K Consecutive Ones",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort the array.",
            "For every index do a binary search to get the possible right end of the window and calculate the possible answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& nums) {\n    const int n = nums.size();\n    int ans = n;\n\n    std::ranges::sort(nums);\n    nums.erase(unique(nums.begin(), nums.end()), nums.end());\n\n    for (int i = 0; i < nums.size(); ++i) {\n      const int start = nums[i];\n      const int end = start + n - 1;\n      const int index = firstGreater(nums, end);\n      const int uniqueLength = index - i;\n      ans = min(ans, n - uniqueLength);\n    }\n\n    return ans;\n  }\n\n private:\n  int firstGreater(const vector<int>& nums, int target) {\n    return upper_bound(nums.begin(), nums.end(), target) - nums.begin();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int[] nums) {\n    final int n = nums.length;\n    int ans = n;\n\n    Arrays.sort(nums);\n    nums = Arrays.stream(nums).distinct().toArray();\n\n    for (int i = 0; i < nums.length; ++i) {\n      final int start = nums[i];\n      final int end = start + n - 1;\n      final int index = firstGreater(nums, end);\n      final int uniqueLength = index - i;\n      ans = Math.min(ans, n - uniqueLength);\n    }\n\n    return ans;\n  }\n\n  private int firstGreater(int[] nums, int target) {\n    int l = 0;\n    int r = nums.length;\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (nums[m] > target)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums: List[int]) -> int:\n    n = len(nums)\n    ans = n\n    nums = sorted(set(nums))\n\n    for i, start in enumerate(nums):\n      end = start + n - 1\n      index = bisect_right(nums, end)\n      uniqueLength = index - i\n      ans = min(ans, n - uniqueLength)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}