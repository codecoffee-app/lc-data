{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2870",
            "title": "Minimum Number of Operations to Make Array Empty",
            "titleSlug": "minimum-number-of-operations-to-make-array-empty",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of positive integers.</p>\n\n<p>There are two types of operations that you can apply on the array <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Choose <strong>two</strong> elements with <strong>equal</strong> values and <strong>delete</strong> them from the array.</li>\n\t<li>Choose <strong>three</strong> elements with <strong>equal</strong> values and <strong>delete</strong> them from the array.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of operations required to make the array empty, or </em><code>-1</code><em> if it is not possible</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,3,2,2,4,2,3,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We can apply the following operations to make the array empty:\n- Apply the first operation on the elements at indices 0 and 3. The resulting array is nums = [3,3,2,4,2,3,4].\n- Apply the first operation on the elements at indices 2 and 4. The resulting array is nums = [3,3,4,3,4].\n- Apply the second operation on the elements at indices 0, 1, and 3. The resulting array is nums = [4,4].\n- Apply the first operation on the elements at indices 0 and 1. The resulting array is nums = [].\nIt can be shown that we cannot make the array empty in less than 4 operations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,2,2,3,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is impossible to empty the array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1371,
            "dislikes": 66,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"177.5K\", \"totalSubmission\": \"286.5K\", \"totalAcceptedRaw\": 177515, \"totalSubmissionRaw\": 286473, \"acRate\": \"62.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` of positive integers, determine the minimum number of operations required to empty the array. You can perform the following operations any number of times:\n\n*   Choose two elements with equal values and delete them from the array.\n*   Choose three elements with equal values and delete them from the array.\n\nReturn the minimum number of operations, or -1 if it's impossible to empty the array.",
                "constraints": [
                    "2 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2,3,3,2,2,4,2,3,4]",
                        "output": "4",
                        "explanation": "The array can be emptied in 4 operations:\n1. Remove two 2s: [3,3,2,4,2,3,4]\n2. Remove two 2s: [3,3,4,3,4]\n3. Remove three 3s: [4,4]\n4. Remove two 4s: []"
                    },
                    {
                        "input": "[2,1,2,2,3,3]",
                        "output": "-1",
                        "explanation": "It is impossible to empty the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& nums) {\n    int ans = 0;\n    unordered_map<int, int> count;\n\n    for (const int num : nums)\n      ++count[num];\n\n    for (const auto& [_, freq] : count) {\n      // If freq == 3k, need k ops.\n      // If freq == 3k + 1 = 3*(k - 1) + 2*2, need k + 1 ops.\n      // If freq == 3k + 2, need k + 1 ops.\n      if (freq == 1)\n        return -1;\n      ans += (freq + 2) / 3;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int[] nums) {\n    int ans = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (final int num : nums)\n      count.merge(num, 1, Integer::sum);\n\n    for (final int freq : count.values()) {\n      // If freq == 3k, need k ops.\n      // If freq == 3k + 1 = 3*(k - 1) + 2*2, need k + 1 ops.\n      // If freq == 3k + 2, need k + 1 ops.\n      if (freq == 1)\n        return -1;\n      ans += (freq + 2) / 3;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums: List[int]) -> int:\n    count = collections.Counter(nums)\n    if 1 in count.values():\n      return -1\n    return sum((freq + 2) // 3 for freq in count.values())\n",
                "lang_text": "py"
            }
        }
    }
}