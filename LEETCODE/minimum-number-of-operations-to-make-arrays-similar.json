{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2449",
            "title": "Minimum Number of Operations to Make Arrays Similar",
            "titleSlug": "minimum-number-of-operations-to-make-arrays-similar",
            "content": "<p>You are given two positive integer arrays <code>nums</code> and <code>target</code>, of the same length.</p>\n\n<p>In one operation, you can choose any two <strong>distinct</strong> indices <code>i</code> and <code>j</code> where <code>0 &lt;= i, j &lt; nums.length</code> and:</p>\n\n<ul>\n\t<li>set <code>nums[i] = nums[i] + 2</code> and</li>\n\t<li>set <code>nums[j] = nums[j] - 2</code>.</li>\n</ul>\n\n<p>Two arrays are considered to be <strong>similar</strong> if the frequency of each element is the same.</p>\n\n<p>Return <em>the minimum number of operations required to make </em><code>nums</code><em> similar to </em><code>target</code>. The test cases are generated such that <code>nums</code> can always be similar to <code>target</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [8,12,6], target = [2,14,10]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> It is possible to make nums similar to target in two operations:\n- Choose i = 0 and j = 2, nums = [10,12,4].\n- Choose i = 1 and j = 2, nums = [10,14,2].\nIt can be shown that 2 is the minimum number of operations needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,5], target = [4,1,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can make nums similar to target in one operation:\n- Choose i = 1 and j = 2, nums = [1,4,3].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,1,1], target = [1,1,1,1,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The array nums is already similiar to target.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length == target.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], target[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>It is possible to make <code>nums</code> similar to <code>target</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 401,
            "dislikes": 12,
            "similarQuestions": "[{\"title\": \"Minimum Operations to Make Array Equal\", \"titleSlug\": \"minimum-operations-to-make-array-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make Array Equal II\", \"titleSlug\": \"minimum-operations-to-make-array-equal-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Rearranging Fruits\", \"titleSlug\": \"rearranging-fruits\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.3K\", \"totalSubmission\": \"18.2K\", \"totalAcceptedRaw\": 11285, \"totalSubmissionRaw\": 18229, \"acRate\": \"61.9%\"}",
            "hints": [
                "Solve for even and odd numbers separately.",
                "Greedily match smallest even element from nums to smallest even element from target, then similarly next smallest element and so on.",
                "Similarly, match odd elements too."
            ],
            "rephrased": {
                "body": "Given two positive integer arrays, `nums` and `target`, of the same length, determine the minimum number of operations required to make `nums` similar to `target`. Two arrays are considered similar if the frequency of each element is the same. In one operation, you can select two distinct indices `i` and `j` and increment `nums[i]` by 2 while decrementing `nums[j]` by 2.",
                "constraints": [
                    "n == nums.length == target.length",
                    "1 <= n <= 10^5",
                    "1 <= nums[i], target[i] <= 10^6",
                    "It is possible to make `nums` similar to `target`."
                ],
                "testcases": [
                    {
                        "input": "nums = [8,12,6], target = [2,14,10]",
                        "output": "2",
                        "explanation": "We can transform nums to target in 2 operations. First, increment nums[0] and decrement nums[2], resulting in nums = [10, 12, 4].  Then, increment nums[1] and decrement nums[2], resulting in nums = [10, 14, 2]."
                    },
                    {
                        "input": "nums = [1,2,5], target = [4,1,3]",
                        "output": "1",
                        "explanation": "We can transform nums to target in one operation by incrementing nums[1] and decrementing nums[2], resulting in nums = [1,4,3]."
                    },
                    {
                        "input": "nums = [1,1,1,1,1], target = [1,1,1,1,1]",
                        "output": "0",
                        "explanation": "The arrays are already similar, requiring no operations."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-make-array-equal",
                "title": "Minimum Operations to Make Array Equal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-make-array-equal-ii",
                "title": "Minimum Operations to Make Array Equal II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "rearranging-fruits",
                "title": "Rearranging Fruits",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Solve for even and odd numbers separately.",
            "Greedily match smallest even element from nums to smallest even element from target, then similarly next smallest element and so on.",
            "Similarly, match odd elements too."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long makeSimilar(vector<int>& nums, vector<int>& target) {\n    long long ans = 0;\n    vector<vector<int>> A(2);  // A[0] := even nums, A[1] := odd nums\n    vector<vector<int>> B(2);  // B[0] := even target, B[1] := odd nums\n\n    for (const int num : nums)\n      A[num % 2].push_back(num);\n\n    for (const int num : target)\n      B[num % 2].push_back(num);\n\n    std::ranges::sort(A[0]);\n    std::ranges::sort(A[1]);\n    std::ranges::sort(B[0]);\n    std::ranges::sort(B[1]);\n\n    for (int i = 0; i < 2; ++i)\n      for (int j = 0; j < A[i].size(); ++j)\n        ans += abs(A[i][j] - B[i][j]) / 2;\n\n    return ans / 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long makeSimilar(int[] nums, int[] target) {\n    long ans = 0;\n    // A[0] := even nums, A[1] := odd nums\n    List<Integer>[] A = new List[] {new ArrayList<>(), new ArrayList<>()};\n    // B[0] := even target, B[1] := odd nums\n    List<Integer>[] B = new List[] {new ArrayList<>(), new ArrayList<>()};\n\n    for (final int num : nums)\n      A[num % 2].add(num);\n\n    for (final int num : target)\n      B[num % 2].add(num);\n\n    Collections.sort(A[0]);\n    Collections.sort(A[1]);\n    Collections.sort(B[0]);\n    Collections.sort(B[1]);\n\n    for (int i = 0; i < 2; ++i)\n      for (int j = 0; j < A[i].size(); ++j)\n        ans += Math.abs(A[i].get(j) - B[i].get(j)) / 2;\n\n    return ans / 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def makeSimilar(self, nums: List[int], target: List[int]) -> int:\n    nums.sort(key=lambda x: (x & 1, x))\n    target.sort(key=lambda x: (x & 1, x))\n    return sum(abs(a - b) for a, b in zip(nums, target)) // 4\n",
                "lang_text": "py"
            }
        }
    }
}