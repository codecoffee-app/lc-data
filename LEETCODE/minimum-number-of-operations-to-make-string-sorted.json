{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1830",
            "title": "Minimum Number of Operations to Make String Sorted",
            "titleSlug": "minimum-number-of-operations-to-make-string-sorted",
            "content": "<p>You are given a string <code>s</code> (<strong>0-indexed</strong>)\u200b\u200b\u200b\u200b\u200b\u200b. You are asked to perform the following operation on <code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b until you get a sorted string:</p>\n\n<ol>\n\t<li>Find <strong>the largest index</strong> <code>i</code> such that <code>1 &lt;= i &lt; s.length</code> and <code>s[i] &lt; s[i - 1]</code>.</li>\n\t<li>Find <strong>the largest index</strong> <code>j</code> such that <code>i &lt;= j &lt; s.length</code> and <code>s[k] &lt; s[i - 1]</code> for all the possible values of <code>k</code> in the range <code>[i, j]</code> inclusive.</li>\n\t<li>Swap the two characters at indices <code>i - 1</code>\u200b\u200b\u200b\u200b and <code>j</code>\u200b\u200b\u200b\u200b\u200b.</li>\n\t<li>Reverse the suffix starting at index <code>i</code>\u200b\u200b\u200b\u200b\u200b\u200b.</li>\n</ol>\n\n<p>Return <em>the number of operations needed to make the string sorted.</em> Since the answer can be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cba&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The simulation goes as follows:\nOperation 1: i=2, j=2. Swap s[1] and s[2] to get s=&quot;cab&quot;, then reverse the suffix starting at 2. Now, s=&quot;cab&quot;.\nOperation 2: i=1, j=2. Swap s[0] and s[2] to get s=&quot;bac&quot;, then reverse the suffix starting at 1. Now, s=&quot;bca&quot;.\nOperation 3: i=2, j=2. Swap s[1] and s[2] to get s=&quot;bac&quot;, then reverse the suffix starting at 2. Now, s=&quot;bac&quot;.\nOperation 4: i=1, j=1. Swap s[0] and s[1] to get s=&quot;abc&quot;, then reverse the suffix starting at 1. Now, s=&quot;acb&quot;.\nOperation 5: i=2, j=2. Swap s[1] and s[2] to get s=&quot;abc&quot;, then reverse the suffix starting at 2. Now, s=&quot;abc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabaa&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The simulation goes as follows:\nOperation 1: i=3, j=4. Swap s[2] and s[4] to get s=&quot;aaaab&quot;, then reverse the substring starting at 3. Now, s=&quot;aaaba&quot;.\nOperation 2: i=4, j=4. Swap s[3] and s[4] to get s=&quot;aaaab&quot;, then reverse the substring starting at 4. Now, s=&quot;aaaab&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3000</code></li>\n\t<li><code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 173,
            "dislikes": 124,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.6K\", \"totalSubmission\": \"7.3K\", \"totalAcceptedRaw\": 3607, \"totalSubmissionRaw\": 7284, \"acRate\": \"49.5%\"}",
            "hints": [
                "Note that the operations given describe getting the previous permutation of s",
                "To solve this problem you need to solve every suffix separately"
            ],
            "rephrased": {
                "body": "Given a 0-indexed string `s`, you need to sort it using a series of operations. Each operation involves these steps:\n\n1.  Find the largest index `i` (1 <= i < s.length) such that `s[i] < s[i - 1]`.\n2.  Find the largest index `j` (i <= j < s.length) such that `s[k] < s[i - 1]` for all `k` in the range `[i, j]`.\n3.  Swap the characters at indices `i - 1` and `j`.\n4.  Reverse the suffix of the string starting at index `i`.\n\nReturn the total number of operations required to sort the string, modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= s.length <= 3000",
                    "s consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "cba",
                        "output": "5",
                        "explanation": "The string transforms as follows:\n\n1. \"cba\" -> i=2, j=2 -> Swap s[1] and s[2] -> \"cab\" -> Reverse suffix from 2 -> \"cab\"\n2. \"cab\" -> i=1, j=2 -> Swap s[0] and s[2] -> \"bac\" -> Reverse suffix from 1 -> \"bca\"\n3. \"bca\" -> i=2, j=2 -> Swap s[1] and s[2] -> \"bac\" -> Reverse suffix from 2 -> \"bac\"\n4. \"bac\" -> i=1, j=1 -> Swap s[0] and s[1] -> \"abc\" -> Reverse suffix from 1 -> \"acb\"\n5. \"acb\" -> i=2, j=2 -> Swap s[1] and s[2] -> \"abc\" -> Reverse suffix from 2 -> \"abc\""
                    },
                    {
                        "input": "aabaa",
                        "output": "2",
                        "explanation": "The string transforms as follows:\n\n1. \"aabaa\" -> i=3, j=4 -> Swap s[2] and s[4] -> \"aaaab\" -> Reverse suffix from 3 -> \"aaaba\"\n2. \"aaaba\" -> i=4, j=4 -> Swap s[3] and s[4] -> \"aaaab\" -> Reverse suffix from 4 -> \"aaaab\""
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Note that the operations given describe getting the previous permutation of s",
            "To solve this problem you need to solve every suffix separately"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int makeStringSorted(string s) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = s.length();\n    const auto [fact, invFact] = getFactAndInvFact(n, kMod);\n    int ans = 0;\n    vector<int> count(26);\n\n    for (int i = n - 1; i >= 0; --i) {\n      const int order = s[i] - 'a';\n      ++count[order];\n      long perm = accumulate(count.begin(), count.begin() + order, 0) *\n                  fact[n - 1 - i] % kMod;\n      for (int j = 0; j < 26; ++j)\n        perm = perm * invFact[count[j]] % kMod;\n      ans = (ans + perm) % kMod;\n    }\n\n    return ans;\n  }\n\n private:\n  pair<vector<long>, vector<long>> getFactAndInvFact(int n, int kMod) {\n    vector<long> fact(n + 1);\n    vector<long> invFact(n + 1);\n    vector<long> inv(n + 1);\n    fact[0] = invFact[0] = 1;\n    inv[0] = inv[1] = 1;\n    for (int i = 1; i <= n; ++i) {\n      if (i >= 2)\n        inv[i] = kMod - kMod / i * inv[kMod % i] % kMod;\n      fact[i] = fact[i - 1] * i % kMod;\n      invFact[i] = invFact[i - 1] * inv[i] % kMod;\n    }\n    return {fact, invFact};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int makeStringSorted(String s) {\n    final int kMod = 1_000_000_007;\n    final int n = s.length();\n    final long[][] factAndInvFact = getFactAndInvFact(n, kMod);\n    final long[] fact = factAndInvFact[0];\n    final long[] invFact = factAndInvFact[1];\n    int ans = 0;\n    int[] count = new int[26];\n\n    for (int i = n - 1; i >= 0; --i) {\n      final int order = s.charAt(i) - 'a';\n      ++count[order];\n      long perm = Arrays.stream(count, 0, order).sum() * fact[n - 1 - i] % kMod;\n      for (int j = 0; j < 26; ++j)\n        perm = perm * invFact[count[j]] % kMod;\n      ans += perm;\n      ans %= kMod;\n    }\n\n    return ans;\n  }\n\n  private long[][] getFactAndInvFact(int n, int kMod) {\n    long[] fact = new long[n + 1];\n    long[] invFact = new long[n + 1];\n    long[] inv = new long[n + 1];\n    fact[0] = invFact[0] = 1;\n    inv[0] = inv[1] = 1;\n    for (int i = 1; i <= n; ++i) {\n      if (i >= 2)\n        inv[i] = kMod - kMod / i * inv[kMod % i] % kMod;\n      fact[i] = fact[i - 1] * i % kMod;\n      invFact[i] = invFact[i - 1] * inv[i] % kMod;\n    }\n    return new long[][] {fact, invFact};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def makeStringSorted(self, s: str) -> int:\n    kMod = 1_000_000_007\n    ans = 0\n    count = [0] * 26\n\n    @functools.lru_cache(None)\n    def fact(i: int) -> int:\n      return 1 if i <= 1 else i * fact(i - 1) % kMod\n\n    @functools.lru_cache(None)\n    def inv(i: int) -> int:\n      return pow(i, kMod - 2, kMod)\n\n    for i, c in enumerate(reversed(s)):\n      order = ord(c) - ord('a')\n      count[order] += 1\n      # count[:order] := s[i] can be any character smaller than c\n      # fact(i) := s[i + 1..n - 1] can be any sequence of characters\n      perm = sum(count[:order]) * fact(i)\n      for j in range(26):\n        perm = perm * inv(fact(count[j])) % kMod\n      ans = (ans + perm) % kMod\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}