{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3137",
            "title": "Minimum Number of Operations to Make Word K-Periodic",
            "titleSlug": "minimum-number-of-operations-to-make-word-k-periodic",
            "content": "<p>You are given a string <code>word</code> of size <code>n</code>, and an integer <code>k</code> such that <code>k</code> divides <code>n</code>.</p>\n\n<p>In one operation, you can pick any two indices <code>i</code> and <code>j</code>, that are divisible by <code>k</code>, then replace the <span data-keyword=\"substring\">substring</span> of length <code>k</code> starting at <code>i</code> with the substring of length <code>k</code> starting at <code>j</code>. That is, replace the substring <code>word[i..i + k - 1]</code> with the substring <code>word[j..j + k - 1]</code>.<!-- notionvc: 49ac84f7-0724-452a-ab43-0c5e53f1db33 --></p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations required to make</em> <code>word</code> <em><strong>k-periodic</strong></em>.</p>\n\n<p>We say that <code>word</code> is <strong>k-periodic</strong> if there is some string <code>s</code> of length <code>k</code> such that <code>word</code> can be obtained by concatenating <code>s</code> an arbitrary number of times. For example, if <code>word == &ldquo;ababab&rdquo;</code>, then <code>word</code> is 2-periodic for <code>s = &quot;ab&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">word = &quot;leetcodeleet&quot;, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\nfont-family: Menlo,sans-serif;\nfont-size: 0.85rem;\n\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a 4-periodic string by picking i = 4 and j = 0. After this operation, word becomes equal to &quot;leetleetleet&quot;.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">word = &quot;</span>leetcoleet<span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">&quot;, k = 2</span></p>\n\n<p><strong>Output:</strong> 3</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can obtain a 2-periodic string by applying the operations in the table below.</p>\n\n<table border=\"1\" bordercolor=\"#ccc\" cellpadding=\"5\" cellspacing=\"0\" height=\"146\" style=\"border-collapse:collapse; text-align: center; vertical-align: middle;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>i</th>\n\t\t\t<th>j</th>\n\t\t\t<th>word</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">2</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetcoleet</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">4</td>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetetleet</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px 15px;\">6</td>\n\t\t\t<td style=\"padding: 5px 15px;\">0</td>\n\t\t\t<td style=\"padding: 5px 15px;\">etetetetet</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</div>\n\n<div id=\"gtx-trans\" style=\"position: absolute; left: 107px; top: 238.5px;\">\n<div class=\"gtx-trans-icon\">&nbsp;</div>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n\t<li><code>k</code> divides <code>word.length</code>.</li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 108,
            "dislikes": 12,
            "similarQuestions": "[{\"title\": \"Maximum Repeating Substring\", \"titleSlug\": \"maximum-repeating-substring\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.8K\", \"totalSubmission\": \"35.7K\", \"totalAcceptedRaw\": 22750, \"totalSubmissionRaw\": 35736, \"acRate\": \"63.7%\"}",
            "hints": [
                "Calculate the frequency of each substring of length <code>k</code> that starts at an index that is divisible by <code>k</code>.",
                "The period of the final string will be the substring with the highest frequency."
            ],
            "rephrased": {
                "body": "Given a string `word` of length `n` and an integer `k` such that `k` divides `n`. You can perform operations where you pick two indices `i` and `j` that are divisible by `k`, and replace the substring of length `k` starting at `i` with the substring of length `k` starting at `j`. The goal is to find the minimum number of operations required to make `word` k-periodic. A string is k-periodic if it can be formed by concatenating a string `s` of length `k` multiple times.",
                "constraints": [
                    "1 <= n == word.length <= 10^5",
                    "1 <= k <= word.length",
                    "k divides word.length",
                    "word consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word = \"leetcodeleet\", k = 4",
                        "output": "1",
                        "explanation": "We can obtain a 4-periodic string by replacing the substring at index 4 with the substring at index 0. After this operation, word becomes equal to \"leetleetleet\"."
                    },
                    {
                        "input": "word = \"leetcoleet\", k = 2",
                        "output": "3",
                        "explanation": "We can obtain a 2-periodic string by applying three replacement operations as described in the problem statement."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-repeating-substring",
                "title": "Maximum Repeating Substring",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Calculate the frequency of each substring of length <code>k</code> that starts at an index that is divisible by <code>k</code>.",
            "The period of the final string will be the substring with the highest frequency."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumOperationsToMakeKPeriodic(string word, int k) {\n    unordered_map<string, int> count;\n    int maxFreq = 0;\n\n    for (int i = 0; i < word.length(); i += k)\n      ++count[word.substr(i, k)];\n\n    for (const auto& [_, freq] : count)\n      maxFreq = max(maxFreq, freq);\n\n    return word.length() / k - maxFreq;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumOperationsToMakeKPeriodic(String word, int k) {\n    Map<String, Integer> count = new HashMap<>();\n\n    for (int i = 0; i < word.length(); i += k)\n      count.merge(word.substring(i, i + k), 1, Integer::sum);\n\n    final int maxFreq = count.values().stream().max(Integer::compare).orElse(0);\n    return word.length() / k - maxFreq;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumOperationsToMakeKPeriodic(self, word: str, k: int) -> int:\n    count = collections.Counter(word[i:i + k] for i in range(0, len(word), k))\n    return len(word) // k - max(count.values())\n",
                "lang_text": "py"
            }
        }
    }
}