{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3122",
            "title": "Minimum Number of Operations to Satisfy Conditions",
            "titleSlug": "minimum-number-of-operations-to-satisfy-conditions",
            "content": "<p>You are given a 2D matrix <code>grid</code> of size <code>m x n</code>. In one <strong>operation</strong>, you can change the value of <strong>any</strong> cell to <strong>any</strong> non-negative number. You need to perform some <strong>operations</strong> such that each cell <code>grid[i][j]</code> is:</p>\n\n<ul>\n\t<li>Equal to the cell below it, i.e. <code>grid[i][j] == grid[i + 1][j]</code> (if it exists).</li>\n\t<li>Different from the cell to its right, i.e. <code>grid[i][j] != grid[i][j + 1]</code> (if it exists).</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> number of operations needed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,0,2],[1,0,2]]</span></p>\n\n<p><strong>Output:</strong> 0</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/04/15/examplechanged.png\" style=\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n\n<p>All the cells in the matrix already satisfy the properties.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,1,1],[0,0,0]]</span></p>\n\n<p><strong>Output:</strong> 3</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/27/example21.png\" style=\"width: 254px; height: 186px;padding: 10px; background: #fff; border-radius: .5rem;\" /></strong></p>\n\n<p>The matrix becomes <code>[[1,0,1],[1,0,1]]</code> which satisfies the properties, by doing these 3 operations:</p>\n\n<ul>\n\t<li>Change <code>grid[1][0]</code> to 1.</li>\n\t<li>Change <code>grid[0][1]</code> to 0.</li>\n\t<li>Change <code>grid[1][2]</code> to 1.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1],[2],[3]]</span></p>\n\n<p><strong>Output:</strong> 2</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/31/changed.png\" style=\"width: 86px; height: 277px;padding: 10px; background: #fff; border-radius: .5rem;\" /></p>\n\n<p>There is a single column. We can change the value to 1 in each cell using 2 operations.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 9</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 204,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"Candy\", \"titleSlug\": \"candy\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Distribute Candies\", \"titleSlug\": \"distribute-candies\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost of Buying Candies With Discount\", \"titleSlug\": \"minimum-cost-of-buying-candies-with-discount\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.6K\", \"totalSubmission\": \"32.5K\", \"totalAcceptedRaw\": 13579, \"totalSubmissionRaw\": 32452, \"acRate\": \"41.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a 2D matrix `grid` of size `m x n`, determine the minimum number of operations needed to satisfy the following conditions:\n\n*   Each cell `grid[i][j]` must be equal to the cell below it, i.e., `grid[i][j] == grid[i + 1][j]` (if it exists).\n*   Each cell `grid[i][j]` must be different from the cell to its right, i.e., `grid[i][j] != grid[i][j + 1]` (if it exists).\n\nIn one operation, you can change the value of any cell to any non-negative number.",
                "constraints": [
                    "1 <= n, m <= 1000",
                    "0 <= grid[i][j] <= 9"
                ],
                "testcases": [
                    {
                        "input": "[[1,0,2],[1,0,2]]",
                        "output": "0",
                        "explanation": "The matrix already satisfies the required conditions, so no operations are needed."
                    },
                    {
                        "input": "[[1,1,1],[0,0,0]]",
                        "output": "3",
                        "explanation": "The matrix can be transformed to `[[1,0,1],[1,0,1]]` by changing `grid[1][0]` to 1, `grid[0][1]` to 0, and `grid[1][2]` to 1. This requires 3 operations."
                    },
                    {
                        "input": "[[1],[2],[3]]",
                        "output": "2",
                        "explanation": "For a single column, we need to make all the values in the column equal. In this case, we can change the value to 1 in each cell using 2 operations."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "candy",
                "title": "Candy",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "distribute-candies",
                "title": "Distribute Candies",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "minimum-cost-of-buying-candies-with-discount",
                "title": "Minimum Cost of Buying Candies With Discount",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumOperations(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    vector<vector<int>> count(n, vector<int>(10));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        ++count[j][grid[i][j]];\n\n    vector<vector<int>> mem(n, vector<int>(10, -1));\n    return minimumOperations(count, 0, 0, m, mem);\n  }\n\n private:\n  // Returns the number of minimum operations needed to make grid[:][j..n)\n  // satisfy the conditions, where the (j - 1)-th column is filled with `prev`.\n  int minimumOperations(const vector<vector<int>>& count, int j, int prev,\n                        int m, vector<vector<int>>& mem) {\n    if (j == count.size())\n      return 0;\n    if (mem[j][prev] != -1)\n      return mem[j][prev];\n\n    int res = INT_MAX;\n\n    for (int num = 0; num < 10; ++num)\n      if (j == 0 || num != prev)\n        res = min(res, m - count[j][num] +\n                           minimumOperations(count, j + 1, num, m, mem));\n\n    return mem[j][prev] = res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumOperations(int[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    int[][] count = new int[n][10];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        ++count[j][grid[i][j]];\n\n    Integer[][] mem = new Integer[n][10];\n    return minimumOperations(count, 0, 0, m, mem);\n  }\n\n  // Returns the number of minimum operations needed to make grid[:][j..n)\n  // satisfy the conditions, where the (j - 1)-th column is filled with `prev`.\n  private int minimumOperations(int[][] count, int j, int prev, int m, Integer[][] mem) {\n    if (j == count.length)\n      return 0;\n    if (mem[j][prev] != null)\n      return mem[j][prev];\n\n    int res = Integer.MAX_VALUE;\n\n    for (int num = 0; num < 10; ++num)\n      if (j == 0 || num != prev)\n        res = Math.min(res, m - count[j][num] + minimumOperations(count, j + 1, num, m, mem));\n\n    return mem[j][prev] = res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumOperations(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    count = [[0] * 10 for _ in range(n)]\n\n    for row in grid:\n      for j, num in enumerate(row):\n        count[j][num] += 1\n\n    @functools.lru_cache(None)\n    def dp(i: int, prev: int) -> int:\n      \"\"\"\n      Returns the number of minimum operations needed to make grid[:][j..n)\n      satisfy the conditions, where the (j - 1)-th column is filled with `prev`.\n      \"\"\"\n      if i == n:\n        return 0\n\n      res = math.inf\n\n      for num in range(10):\n        if i == 0 or num != prev:\n          res = min(res, m - count[i][num] + dp(i + 1, num))\n\n      return res\n\n    return dp(0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}