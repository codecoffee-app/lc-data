{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2471",
            "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
            "titleSlug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level",
            "content": "<p>You are given the <code>root</code> of a binary tree with <strong>unique values</strong>.</p>\n\n<p>In one operation, you can choose any two nodes <strong>at the same level</strong> and swap their values.</p>\n\n<p>Return <em>the minimum number of operations needed to make the values at each level sorted in a <strong>strictly increasing order</strong></em>.</p>\n\n<p>The <strong>level</strong> of a node is the number of edges along the path between it and the root node<em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/09/18/image-20220918174006-2.png\" style=\"width: 500px; height: 324px;\" />\n<pre>\n<strong>Input:</strong> root = [1,4,3,7,6,8,5,null,null,null,null,9,null,10]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n- Swap 4 and 3. The 2<sup>nd</sup> level becomes [3,4].\n- Swap 7 and 5. The 3<sup>rd</sup> level becomes [5,6,8,7].\n- Swap 8 and 7. The 3<sup>rd</sup> level becomes [5,6,7,8].\nWe used 3 operations so return 3.\nIt can be proven that 3 is the minimum number of operations needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/09/18/image-20220918174026-3.png\" style=\"width: 400px; height: 303px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,2,7,6,5,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n- Swap 3 and 2. The 2<sup>nd</sup> level becomes [2,3].\n- Swap 7 and 4. The 3<sup>rd</sup> level becomes [4,6,5,7].\n- Swap 6 and 5. The 3<sup>rd</sup> level becomes [4,5,6,7].\nWe used 3 operations so return 3.\nIt can be proven that 3 is the minimum number of operations needed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/09/18/image-20220918174052-4.png\" style=\"width: 400px; height: 274px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,6]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Each level is already sorted in increasing order so return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li>All the values of the tree are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 596,
            "dislikes": 13,
            "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Cycle in a Graph\", \"titleSlug\": \"longest-cycle-in-a-graph\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"19.5K\", \"totalSubmission\": \"31.4K\", \"totalAcceptedRaw\": 19482, \"totalSubmissionRaw\": 31415, \"acRate\": \"62.0%\"}",
            "hints": [
                "We can group the values level by level and solve each group independently.",
                "Do BFS to group the value level by level.",
                "Find the minimum number of swaps to sort the array of each level.",
                "While iterating over the array, check the current element, and if not in the correct index, replace that element with the index of the element which should have come."
            ],
            "rephrased": {
                "body": "Given the root of a binary tree with unique values, determine the minimum number of operations required to sort the values at each level in strictly increasing order.  An operation consists of swapping the values of any two nodes at the same level. The level of a node is defined as the number of edges along the path between it and the root node.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 10<sup>5</sup>].",
                    "1 <= Node.val <= 10<sup>5</sup>",
                    "All the values of the tree are unique."
                ],
                "testcases": [
                    {
                        "input": "[1,4,3,7,6,8,5,null,null,null,null,9,null,10]",
                        "output": "3",
                        "explanation": "The minimum number of swaps required to sort each level is 3. Specifically, swap 4 and 3 at level 2, and swap 7 and 5, then 8 and 7 at level 3."
                    },
                    {
                        "input": "[1,3,2,7,6,5,4]",
                        "output": "3",
                        "explanation": "The minimum number of swaps required to sort each level is 3. Swap 3 and 2 at level 2, and swap 7 and 4, then 6 and 5 at level 3."
                    },
                    {
                        "input": "[1,2,3,4,5,6]",
                        "output": "0",
                        "explanation": "Each level is already sorted in increasing order, so no swaps are needed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "binary-tree-level-order-traversal",
                "title": "Binary Tree Level Order Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-cycle-in-a-graph",
                "title": "Longest Cycle in a Graph",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can group the values level by level and solve each group independently.",
            "Do BFS to group the value level by level.",
            "Find the minimum number of swaps to sort the array of each level.",
            "While iterating over the array, check the current element, and if not in the correct index, replace that element with the index of the element which should have come."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumOperations(TreeNode* root) {\n    int ans = 0;\n    queue<TreeNode*> q{{root}};\n\n    // E.g. vals = [7, 6, 8, 5]\n    // [2, 1, 3, 0]: Initial ids based on the order of vals.\n    // [3, 1, 2, 0]: Swap 2 with 3, so 2 is in the right place (i == ids[i]).\n    // [0, 1, 2, 3]: Swap 3 with 0, so 3 is in the right place.\n    while (!q.empty()) {\n      vector<int> vals;\n      vector<int> ids(q.size());\n      for (int sz = q.size(); sz > 0; --sz) {\n        TreeNode* node = q.front();\n        q.pop();\n        vals.push_back(node->val);\n        if (node->left != nullptr)\n          q.push(node->left);\n        if (node->right != nullptr)\n          q.push(node->right);\n      }\n      iota(ids.begin(), ids.end(), 0);\n      sort(ids.begin(), ids.end(),\n           [&vals](int i, int j) { return vals[i] < vals[j]; });\n      for (int i = 0; i < ids.size(); ++i)\n        for (; ids[i] != i; ++ans)\n          swap(ids[i], ids[ids[i]]);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumOperations(TreeNode root) {\n    int ans = 0;\n    Queue<TreeNode> q = new LinkedList<>(Arrays.asList(root));\n\n    // E.g. vals = [7, 6, 8, 5]\n    // [2, 1, 3, 0]: Initial ids based on the order of vals.\n    // [3, 1, 2, 0]: Swap 2 with 3, so 2 is in the right place (i == ids[i]).\n    // [0, 1, 2, 3]: Swap 3 with 0, so 3 is in the right place.\n    while (!q.isEmpty()) {\n      List<Integer> vals = new ArrayList<>();\n      List<Integer> ids = new ArrayList<>();\n      for (int sz = q.size(); sz > 0; --sz) {\n        TreeNode node = q.poll();\n        vals.add(node.val);\n        if (node.left != null)\n          q.offer(node.left);\n        if (node.right != null)\n          q.offer(node.right);\n      }\n      for (int i = 0; i < vals.size(); ++i)\n        ids.add(i);\n      Collections.sort(ids, (i, j) -> vals.get(i) - vals.get(j));\n      for (int i = 0; i < ids.size(); ++i)\n        for (; ids.get(i) != i; ++ans)\n          swap(ids, i, ids.get(i));\n    }\n\n    return ans;\n  }\n\n  private void swap(List<Integer> ids, int i, int j) {\n    final int temp = ids.get(i);\n    ids.set(i, ids.get(j));\n    ids.set(j, temp);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumOperations(self, root: Optional[TreeNode]) -> int:\n    ans = 0\n    q = collections.deque([root])\n\n    # E.g. vals = [7, 6, 8, 5]\n    # [2, 1, 3, 0]: Initial ids based on the order of vals.\n    # [3, 1, 2, 0]: Swap 2 with 3, so 2 is in the right place (i == ids[i]).\n    # [0, 1, 2, 3]: Swap 3 with 0, so 3 is in the right place.\n    while q:\n      vals = []\n      for _ in range(len(q)):\n        node = q.popleft()\n        vals.append(node.val)\n        if node.left:\n          q.append(node.left)\n        if node.right:\n          q.append(node.right)\n      # O(n^2logn), which is not great and leads to TLE.\n      ids = [sorted(vals).index(val) for val in vals]\n      for i in range(len(ids)):\n        while ids[i] != i:\n          j = ids[i]\n          ids[i] = ids[j]\n          ids[j] = j\n          ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}