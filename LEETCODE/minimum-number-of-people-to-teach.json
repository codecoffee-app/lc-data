{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1733",
            "title": "Minimum Number of People to Teach",
            "titleSlug": "minimum-number-of-people-to-teach",
            "content": "<p>On a social network consisting of <code>m</code> users and some friendships between users, two users can communicate with each other if they know a common language.</p>\n\n<p>You are given an integer <code>n</code>, an array <code>languages</code>, and an array <code>friendships</code> where:</p>\n\n<ul>\n\t<li>There are <code>n</code> languages numbered <code>1</code> through <code>n</code>,</li>\n\t<li><code>languages[i]</code> is the set of languages the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code>\u200b\u200b\u200b\u200b user knows, and</li>\n\t<li><code>friendships[i] = [u<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>\u200b\u200b\u200b, v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>]</code> denotes a friendship between the users <code>u<sup>\u200b\u200b\u200b\u200b\u200b</sup><sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub></code>\u200b\u200b\u200b\u200b\u200b and <code>v<sub>i</sub></code>.</li>\n</ul>\n\n<p>You can choose <strong>one</strong> language and teach it to some users so that all friends can communicate with each other. Return <i data-stringify-type=\"italic\">the</i> <i><strong>minimum</strong> </i><i data-stringify-type=\"italic\">number of users you need to teach.</i></p>\nNote that friendships are not transitive, meaning if <code>x</code> is a friend of <code>y</code> and <code>y</code> is a friend of <code>z</code>, this doesn&#39;t guarantee that <code>x</code> is a friend of <code>z</code>.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You can either teach user 1 the second language or user 2 the first language.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Teach the third language to users 1 and 3, yielding two users to teach.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 500</code></li>\n\t<li><code>languages.length == m</code></li>\n\t<li><code>1 &lt;= m &lt;= 500</code></li>\n\t<li><code>1 &lt;= languages[i].length &lt;= n</code></li>\n\t<li><code>1 &lt;= languages[i][j] &lt;= n</code></li>\n\t<li><code>1 &lt;= u<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub> &lt; v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub> &lt;= languages.length</code></li>\n\t<li><code>1 &lt;= friendships.length &lt;= 500</code></li>\n\t<li>All tuples <code>(u<sub>\u200b\u200b\u200b\u200b\u200bi, </sub>v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>)</code> are unique</li>\n\t<li><code>languages[i]</code> contains only unique values</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 197,
            "dislikes": 382,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.6K\", \"totalSubmission\": \"20.5K\", \"totalAcceptedRaw\": 8616, \"totalSubmissionRaw\": 20524, \"acRate\": \"42.0%\"}",
            "hints": [
                "You can just use brute force and find out for each language the number of users you need to teach",
                "Note that a user can appear in multiple friendships but you need to teach that user only once"
            ],
            "rephrased": {
                "body": "Given a social network of `m` users with friendships, where users can communicate if they share a common language, determine the minimum number of users to teach a single language to so that all friends can communicate. You are given `n` languages, a list `languages` where `languages[i]` is the set of languages the i-th user knows, and a list `friendships` where `friendships[i] = [u_i, v_i]` denotes a friendship between users `u_i` and `v_i`.  Friendships are not transitive.",
                "constraints": [
                    "2 <= n <= 500",
                    "languages.length == m",
                    "1 <= m <= 500",
                    "1 <= languages[i].length <= n",
                    "1 <= languages[i][j] <= n",
                    "1 <= u_i < v_i <= languages.length",
                    "1 <= friendships.length <= 500",
                    "All tuples (u_i, v_i) are unique",
                    "languages[i] contains only unique values"
                ],
                "testcases": [
                    {
                        "input": "n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]",
                        "output": "1",
                        "explanation": "We can teach user 1 the second language or user 2 the first language. Either of these options results in all friends being able to communicate, and only requires teaching one user."
                    },
                    {
                        "input": "n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]",
                        "output": "2",
                        "explanation": "Teach the third language to users 1 and 3, yielding two users to teach."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "You can just use brute force and find out for each language the number of users you need to teach",
            "Note that a user can appear in multiple friendships but you need to teach that user only once"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumTeachings(int n, vector<vector<int>>& languages,\n                       vector<vector<int>>& friendships) {\n    vector<unordered_set<int>> languageSets;\n    unordered_set<int> needTeach;\n    unordered_map<int, int> languageCount;\n\n    for (const vector<int>& language : languages)\n      languageSets.push_back({language.begin(), language.end()});\n\n    // Find friends that can't communicate.\n    for (const vector<int>& friendship : friendships) {\n      const int u = friendship[0] - 1;\n      const int v = friendship[1] - 1;\n      if (cantTalk(languageSets, u, v)) {\n        needTeach.insert(u);\n        needTeach.insert(v);\n      }\n    }\n\n    // Find the most popular language.\n    for (const int u : needTeach)\n      for (const int language : languageSets[u])\n        ++languageCount[language];\n\n    // Teach the most popular language to people who don't understand.\n    int maxCount = 0;\n    for (const auto& [_, freq] : languageCount)\n      maxCount = max(maxCount, freq);\n\n    return needTeach.size() - maxCount;\n  }\n\n private:\n  // Returns true if u can't talk with v.\n  bool cantTalk(const vector<unordered_set<int>>& languageSets, int u, int v) {\n    for (const int language : languageSets[u])\n      if (languageSets[v].count(language))\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumTeachings(int n, int[][] languages, int[][] friendships) {\n    List<Set<Integer>> languageSets = new ArrayList<>();\n    Set<Integer> needTeach = new HashSet<>();\n    Map<Integer, Integer> languageCount = new HashMap<>();\n\n    for (int[] language : languages)\n      languageSets.add(new HashSet<>(Arrays.stream(language).boxed().toList()));\n\n    // Find friends that can't communicate.\n    for (int[] friendship : friendships) {\n      final int u = friendship[0] - 1;\n      final int v = friendship[1] - 1;\n      if (cantTalk(languageSets, u, v)) {\n        needTeach.add(u);\n        needTeach.add(v);\n      }\n    }\n\n    // Find the most popular language.\n    for (int u : needTeach)\n      for (final int language : languageSets.get(u))\n        languageCount.merge(language, 1, Integer::sum);\n\n    // Teach the most popular language to people who don't understand.\n    int maxCount = 0;\n    for (int freq : languageCount.values())\n      maxCount = Math.max(maxCount, freq);\n\n    return needTeach.size() - maxCount;\n  }\n\n  // Returns true if u can't talk with v.\n  private boolean cantTalk(List<Set<Integer>> languageSets, int u, int v) {\n    for (int language : languageSets.get(u))\n      if (languageSets.get(v).contains(language))\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumTeachings(self, n: int, languages: List[List[int]], friendships: List[List[int]]) -> int:\n    languageSets = [set(languages) for languages in languages]\n    needTeach = set()\n    languageCount = collections.Counter()\n\n    # Find friends that can't communicate.\n    for u, v in friendships:\n      if not languageSets[u - 1] & languageSets[v - 1]:\n        needTeach.add(u - 1)\n        needTeach.add(v - 1)\n\n    # Find the most popular language.\n    for u in needTeach:\n      for language in languageSets[u]:\n        languageCount[language] += 1\n\n    # Teach the most popular language to people don't understand.\n    return len(needTeach) - max(languageCount.values(), default=0)\n",
                "lang_text": "py"
            }
        }
    }
}