{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3016",
            "title": "Minimum Number of Pushes to Type Word II",
            "titleSlug": "minimum-number-of-pushes-to-type-word-ii",
            "content": "<p>You are given a string <code>word</code> containing lowercase English letters.</p>\n\n<p>Telephone keypads have keys mapped with <strong>distinct</strong> collections of lowercase English letters, which can be used to form words by pushing them. For example, the key <code>2</code> is mapped with <code>[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</code>, we need to push the key one time to type <code>&quot;a&quot;</code>, two times to type <code>&quot;b&quot;</code>, and three times to type <code>&quot;c&quot;</code> <em>.</em></p>\n\n<p>It is allowed to remap the keys numbered <code>2</code> to <code>9</code> to <strong>distinct</strong> collections of letters. The keys can be remapped to <strong>any</strong> amount of letters, but each letter <strong>must</strong> be mapped to <strong>exactly</strong> one key. You need to find the <strong>minimum</strong> number of times the keys will be pushed to type the string <code>word</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of pushes needed to type </em><code>word</code> <em>after remapping the keys</em>.</p>\n\n<p>An example mapping of letters to keys on a telephone keypad is given below. Note that <code>1</code>, <code>*</code>, <code>#</code>, and <code>0</code> do <strong>not</strong> map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypaddesc.png\" style=\"width: 329px; height: 313px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypadv1e1.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;abcde&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;a&quot; -&gt; one push on key 2\n&quot;b&quot; -&gt; one push on key 3\n&quot;c&quot; -&gt; one push on key 4\n&quot;d&quot; -&gt; one push on key 5\n&quot;e&quot; -&gt; one push on key 6\nTotal cost is 1 + 1 + 1 + 1 + 1 = 5.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/26/keypadv2e2.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;xyzxyzxyzxyz&quot;\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;x&quot; -&gt; one push on key 2\n&quot;y&quot; -&gt; one push on key 3\n&quot;z&quot; -&gt; one push on key 4\nTotal cost is 1 * 4 + 1 * 4 + 1 * 4 = 12\nIt can be shown that no other mapping can provide a lower cost.\nNote that the key 9 is not mapped to any letter: it is not necessary to map letters to every key, but to map all the letters.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/27/keypadv2.png\" style=\"width: 329px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> word = &quot;aabbccddeeffgghhiiiiii&quot;\n<strong>Output:</strong> 24\n<strong>Explanation:</strong> The remapped keypad given in the image provides the minimum cost.\n&quot;a&quot; -&gt; one push on key 2\n&quot;b&quot; -&gt; one push on key 3\n&quot;c&quot; -&gt; one push on key 4\n&quot;d&quot; -&gt; one push on key 5\n&quot;e&quot; -&gt; one push on key 6\n&quot;f&quot; -&gt; one push on key 7\n&quot;g&quot; -&gt; one push on key 8\n&quot;h&quot; -&gt; two pushes on key 9\n&quot;i&quot; -&gt; one push on key 9\nTotal cost is 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 1 * 2 + 2 * 2 + 6 * 1 = 24.\nIt can be shown that no other mapping can provide a lower cost.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 137,
            "dislikes": 5,
            "similarQuestions": "[{\"title\": \"Letter Combinations of a Phone Number\", \"titleSlug\": \"letter-combinations-of-a-phone-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.2K\", \"totalSubmission\": \"32.9K\", \"totalAcceptedRaw\": 23174, \"totalSubmissionRaw\": 32859, \"acRate\": \"70.5%\"}",
            "hints": [
                "We have 8 keys in total. We can type 8 characters with one push each, 8 different characters with two pushes each, and so on.",
                "The optimal way is to map letters to keys evenly.",
                "Sort the letters by frequencies in the word in non-increasing order."
            ],
            "rephrased": {
                "body": "Given a string `word` containing lowercase English letters, determine the minimum number of key presses required to type the word on a telephone keypad after optimally remapping the letters to the keys numbered 2 through 9. Each key can be remapped to any number of letters, but each letter must be mapped to exactly one key.  The number of presses needed for a letter corresponds to its position within the collection of letters mapped to a particular key (e.g., the first letter mapped to a key requires one press, the second requires two presses, etc.).",
                "constraints": [
                    "1 <= word.length <= 10^5",
                    "word consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "abcde",
                        "output": "5",
                        "explanation": "Remapping each letter to a distinct key (2-6) results in each letter requiring only one press.  Therefore, the total cost is 1 + 1 + 1 + 1 + 1 = 5. This is the optimal mapping."
                    },
                    {
                        "input": "xyzxyzxyzxyz",
                        "output": "12",
                        "explanation": "Remapping 'x', 'y', and 'z' to distinct keys (2-4) yields the minimum cost. Each letter appears four times, and each requires one press. So, the total cost is 1 * 4 + 1 * 4 + 1 * 4 = 12. "
                    },
                    {
                        "input": "aabbccddeeffgghhiiiiii",
                        "output": "24",
                        "explanation": "The optimal mapping involves assigning 'a' through 'g' to keys 2-8, 'h' to be the second letter on key 9 and 'i' to the first letter on key 9. The cost becomes 1*2 + 1*2 + 1*2 + 1*2 + 1*2 + 1*2 + 1*2 + 2*2 + 6*1 = 24."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "letter-combinations-of-a-phone-number",
                "title": "Letter Combinations of a Phone Number",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We have 8 keys in total. We can type 8 characters with one push each, 8 different characters with two pushes each, and so on.",
            "The optimal way is to map letters to keys evenly.",
            "Sort the letters by frequencies in the word in non-increasing order."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 3014. Minimum Number of Pushes to Type Word I\n  int minimumPushes(string word) {\n    int ans = 0;\n    vector<int> count(26);\n\n    for (const char c : word)\n      ++count[c - 'a'];\n\n    ranges::sort(count, greater<>());\n\n    for (int i = 0; i < 26; ++i)\n      ans += count[i] * (i / 8 + 1);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Same as 3014. Minimum Number of Pushes to Type Word I\n  public int minimumPushes(String word) {\n    int ans = 0;\n    int[] count = new int[26];\n\n    for (final char c : word.toCharArray())\n      ++count[c - 'a'];\n\n    Arrays.sort(count);\n\n    for (int i = 0; i < 26; ++i)\n      ans += count[26 - i - 1] * (i / 8 + 1);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 3014. Minimum Number of Pushes to Type Word I\n  def minimumPushes(self, word: str) -> int:\n    freqs = sorted(collections.Counter(word).values(), reverse=True)\n    return sum(freq * (i // 8 + 1) for i, freq in enumerate(freqs))\n",
                "lang_text": "py"
            }
        }
    }
}