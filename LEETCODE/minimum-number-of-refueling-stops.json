{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "871",
            "title": "Minimum Number of Refueling Stops",
            "titleSlug": "minimum-number-of-refueling-stops",
            "content": "<p>A car travels from a starting position to a destination which is <code>target</code> miles east of the starting position.</p>\n\n<p>There are gas stations along the way. The gas stations are represented as an array <code>stations</code> where <code>stations[i] = [position<sub>i</sub>, fuel<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> gas station is <code>position<sub>i</sub></code> miles east of the starting position and has <code>fuel<sub>i</sub></code> liters of gas.</p>\n\n<p>The car starts with an infinite tank of gas, which initially has <code>startFuel</code> liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.</p>\n\n<p>Return <em>the minimum number of refueling stops the car must make in order to reach its destination</em>. If it cannot reach the destination, return <code>-1</code>.</p>\n\n<p>Note that if the car reaches a gas station with <code>0</code> fuel left, the car can still refuel there. If the car reaches the destination with <code>0</code> fuel left, it is still considered to have arrived.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 1, startFuel = 1, stations = []\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We can reach the target without refueling.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 100, startFuel = 1, stations = [[10,100]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> We can not reach the target (or even the first gas station).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target, startFuel &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= stations.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= position<sub>i</sub> &lt; position<sub>i+1</sub> &lt; target</code></li>\n\t<li><code>1 &lt;= fuel<sub>i</sub> &lt; 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4532,
            "dislikes": 81,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"130.4K\", \"totalSubmission\": \"327.1K\", \"totalAcceptedRaw\": 130403, \"totalSubmissionRaw\": 327081, \"acRate\": \"39.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "A car needs to travel from a starting point to a destination located `target` miles east. Along the route, there are gas stations represented by the `stations` array, where `stations[i] = [position_i, fuel_i]` indicates the i-th gas station is at `position_i` miles east of the start and provides `fuel_i` liters of gas. The car begins with `startFuel` liters and consumes one liter per mile. At each gas station, the car can refuel completely. Determine the minimum number of refueling stops required to reach the destination. If the destination is unreachable, return -1.",
                "constraints": [
                    "1 <= target, startFuel <= 10^9",
                    "0 <= stations.length <= 500",
                    "1 <= position_i < position_{i+1} < target",
                    "1 <= fuel_i <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "target = 1, startFuel = 1, stations = []",
                        "output": "0",
                        "explanation": "The target is reachable with the initial fuel; no refueling is needed."
                    },
                    {
                        "input": "target = 100, startFuel = 1, stations = [[10,100]]",
                        "output": "-1",
                        "explanation": "The car cannot reach the first gas station or the target with the initial fuel."
                    },
                    {
                        "input": "target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]",
                        "output": "2",
                        "explanation": "The car starts with 10 fuel. It drives to station 1 at position 10 (fuel: 0), refills to 60. Then it drives to station 2 at position 20(fuel: 50), Then it drives to station 3 at position 30(fuel: 40), Then it drives to station 4 at position 60 (fuel: 10) and refills to 50. Finally it drives to the target which is 100 from position 60 (fuel: 10), so only two refills are needed"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {\n    // dp[i] := farthest position we can reach w/ i refuels\n    vector<long> dp(stations.size() + 1);\n    dp[0] = startFuel;\n\n    for (int i = 0; i < stations.size(); ++i)\n      for (int j = i + 1; j > 0; --j)\n        if (dp[j - 1] >=\n            stations[i][0])  // With j - 1 refuels, we can reach stations[i][0]\n          dp[j] = max(dp[j], dp[j - 1] + stations[i][1]);\n\n    for (int i = 0; i < dp.size(); ++i)\n      if (dp[i] >= target)\n        return i;\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minRefuelStops(int target, int startFuel, int[][] stations) {\n    // dp[i] := farthest position we can reach w/ i refuels\n    long dp[] = new long[stations.length + 1];\n    dp[0] = startFuel;\n\n    for (int i = 0; i < stations.length; ++i)\n      for (int j = i + 1; j > 0; --j)\n        if (dp[j - 1] >= stations[i][0]) // With j - 1 refuels, we can reach stations[i][0]\n          dp[j] = Math.max(dp[j], dp[j - 1] + stations[i][1]);\n\n    for (int i = 0; i < dp.length; ++i)\n      if (dp[i] >= target)\n        return i;\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:\n    # dp[i] := farthest position we can reach w / i refuels\n    dp = [startFuel] + [0] * len(stations)\n\n    for i, station in enumerate(stations):\n      for j in range(i + 1, 0, -1):\n        if dp[j - 1] >= station[0]:  # With j - 1 refuels, we can reach stations[i][0]\n          dp[j] = max(dp[j], dp[j - 1] + station[1])\n\n    for i, d in enumerate(dp):\n      if d >= target:\n        return i\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}