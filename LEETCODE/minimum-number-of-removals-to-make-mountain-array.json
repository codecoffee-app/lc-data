{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1671",
            "title": "Minimum Number of Removals to Make Mountain Array",
            "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
            "content": "<p>You may recall that an array <code>arr</code> is a <strong>mountain array</strong> if and only if:</p>\n\n<ul>\n\t<li><code>arr.length &gt;= 3</code></li>\n\t<li>There exists some index <code>i</code> (<strong>0-indexed</strong>) with <code>0 &lt; i &lt; arr.length - 1</code> such that:\n\t<ul>\n\t\t<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li>\n\t\t<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Given an integer array <code>nums</code>\u200b\u200b\u200b, return <em>the <strong>minimum</strong> number of elements to remove to make </em><code>nums<em>\u200b\u200b\u200b</em></code><em> </em><em>a <strong>mountain array</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The array itself is a mountain array so we do not need to remove any elements.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,1,5,6,2,3,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>It is guaranteed that you can make a mountain array out of <code>nums</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1522,
            "dislikes": 20,
            "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Mountain in Array\", \"titleSlug\": \"longest-mountain-in-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Peak Index in a Mountain Array\", \"titleSlug\": \"peak-index-in-a-mountain-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Valid Mountain Array\", \"titleSlug\": \"valid-mountain-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find in Mountain Array\", \"titleSlug\": \"find-in-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Beautiful Towers II\", \"titleSlug\": \"beautiful-towers-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Beautiful Towers I\", \"titleSlug\": \"beautiful-towers-i\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.1K\", \"totalSubmission\": \"65.2K\", \"totalAcceptedRaw\": 27139, \"totalSubmissionRaw\": 65191, \"acRate\": \"41.6%\"}",
            "hints": [
                "Think the opposite direction instead of minimum elements to remove the maximum mountain subsequence",
                "Think of LIS it's kind of close"
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, determine the minimum number of elements to remove in order to transform `nums` into a mountain array. A mountain array satisfies the following conditions:\n\n1.  Its length is at least 3.\n2.  There exists an index `i` (0-indexed) such that:\n    *   `0 < i < nums.length - 1`\n    *   The elements before `i` are strictly increasing: `nums[0] < nums[1] < ... < nums[i - 1] < nums[i]`\n    *   The elements after `i` are strictly decreasing: `nums[i] > nums[i + 1] > ... > nums[nums.length - 1]`",
                "constraints": [
                    "3 <= nums.length <= 1000",
                    "1 <= nums[i] <= 10^9",
                    "It is guaranteed that you can make a mountain array out of `nums`."
                ],
                "testcases": [
                    {
                        "input": "[1,3,1]",
                        "output": "0",
                        "explanation": "The array is already a mountain array, so no elements need to be removed."
                    },
                    {
                        "input": "[2,1,1,5,6,2,3,1]",
                        "output": "3",
                        "explanation": "Removing the elements at indices 0, 1, and 5 results in the mountain array [1,5,6,3,1]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-increasing-subsequence",
                "title": "Longest Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-mountain-in-array",
                "title": "Longest Mountain in Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "peak-index-in-a-mountain-array",
                "title": "Peak Index in a Mountain Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "valid-mountain-array",
                "title": "Valid Mountain Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-in-mountain-array",
                "title": "Find in Mountain Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "beautiful-towers-ii",
                "title": "Beautiful Towers II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "beautiful-towers-i",
                "title": "Beautiful Towers I",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think the opposite direction instead of minimum elements to remove the maximum mountain subsequence",
            "Think of LIS it's kind of close"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumMountainRemovals(vector<int>& nums) {\n    vector<int> l = lengthOfLIS(nums);\n    vector<int> r = reversed(lengthOfLIS(reversed(nums)));\n    int maxMountainSeq = 0;\n\n    for (int i = 0; i < nums.size(); ++i)\n      if (l[i] > 1 && r[i] > 1)\n        maxMountainSeq = max(maxMountainSeq, l[i] + r[i] - 1);\n\n    return nums.size() - maxMountainSeq;\n  }\n\n private:\n  vector<int> lengthOfLIS(vector<int> nums) {\n    // tail[i] := the min tail of all increasing subseqs having length i + 1\n    // It's easy to see that tail must be an increasing array.\n    vector<int> tail;\n    // dp[i] := length of LIS ending at nums[i]\n    vector<int> dp;\n\n    for (const int num : nums) {\n      if (tail.empty() || num > tail.back())\n        tail.push_back(num);\n      else\n        tail[firstGreaterEqual(tail, num)] = num;\n      dp.push_back(tail.size());\n    }\n\n    return dp;\n  }\n\n  int firstGreaterEqual(const vector<int>& A, int target) {\n    return lower_bound(A.begin(), A.end(), target) - A.begin();\n  }\n\n  vector<int> reversed(const vector<int>& nums) {\n    return {nums.rbegin(), nums.rend()};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumMountainRemovals(int[] nums) {\n    int[] l = lengthOfLIS(nums);\n    int[] r = reversed(lengthOfLIS(reversed(nums)));\n    int maxMountainSeq = 0;\n\n    for (int i = 0; i < nums.length; ++i)\n      if (l[i] > 1 && r[i] > 1)\n        maxMountainSeq = Math.max(maxMountainSeq, l[i] + r[i] - 1);\n\n    return nums.length - maxMountainSeq;\n  }\n\n  private int[] lengthOfLIS(int[] nums) {\n    // tail[i] := the min tail of all increasing subseqs with length i + 1\n    // It's easy to see that tail must be an increasing array.\n    List<Integer> tail = new ArrayList<>();\n    // dp[i] := length of LIS ending at nums[i]\n    int[] dp = new int[nums.length];\n\n    for (int i = 0; i < nums.length; ++i) {\n      final int num = nums[i];\n      if (tail.isEmpty() || num > tail.get(tail.size() - 1))\n        tail.add(num);\n      else\n        tail.set(firstGreaterEqual(tail, num), num);\n      dp[i] = tail.size();\n    }\n\n    return dp;\n  }\n\n  private int firstGreaterEqual(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n\n  private int[] reversed(int[] nums) {\n    int[] A = nums.clone();\n    int l = 0;\n    int r = nums.length - 1;\n\n    while (l < r)\n      swap(A, l++, r--);\n\n    return A;\n  }\n\n  private void swap(int[] A, int i, int j) {\n    final int temp = A[i];\n    A[i] = A[j];\n    A[j] = temp;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumMountainRemovals(self, nums: List[int]) -> int:\n    left = self._lengthOfLIS(nums)\n    right = self._lengthOfLIS(nums[::-1])[::-1]\n    maxMountainSeq = 0\n\n    for l, r in zip(left, right):\n      if l > 1 and r > 1:\n        maxMountainSeq = max(maxMountainSeq, l + r - 1)\n\n    return len(nums) - maxMountainSeq\n\n  def _lengthOfLIS(self, nums: List[int]) -> List[int]:\n    # tail[i] := the min tail of all increasing subseqs having length i + 1\n    # It's easy to see that tail must be an increasing array.\n    tail = []\n    # dp[i] := length of LIS ending at nums[i]\n    dp = []\n\n    for num in nums:\n      if not tail or num > tail[-1]:\n        tail.append(num)\n      else:\n        tail[bisect.bisect_left(tail, num)] = num\n      dp.append(len(tail))\n\n    return dp\n",
                "lang_text": "py"
            }
        }
    }
}