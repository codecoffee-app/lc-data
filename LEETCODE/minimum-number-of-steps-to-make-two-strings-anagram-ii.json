{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2186",
            "title": "Minimum Number of Steps to Make Two Strings Anagram II",
            "titleSlug": "minimum-number-of-steps-to-make-two-strings-anagram-ii",
            "content": "<p>You are given two strings <code>s</code> and <code>t</code>. In one step, you can append <strong>any character</strong> to either <code>s</code> or <code>t</code>.</p>\n\n<p>Return <em>the minimum number of steps to make </em><code>s</code><em> and </em><code>t</code><em> <strong>anagrams</strong> of each other.</em></p>\n\n<p>An <strong>anagram</strong> of a string is a string that contains the same characters with a different (or the same) ordering.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;<strong><u>lee</u></strong>tco<u><strong>de</strong></u>&quot;, t = &quot;co<u><strong>a</strong></u>t<u><strong>s</strong></u>&quot;\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> \n- In 2 steps, we can append the letters in &quot;as&quot; onto s = &quot;leetcode&quot;, forming s = &quot;leetcode<strong><u>as</u></strong>&quot;.\n- In 5 steps, we can append the letters in &quot;leede&quot; onto t = &quot;coats&quot;, forming t = &quot;coats<u><strong>leede</strong></u>&quot;.\n&quot;leetcodeas&quot; and &quot;coatsleede&quot; are now anagrams of each other.\nWe used a total of 2 + 5 = 7 steps.\nIt can be shown that there is no way to make them anagrams of each other with less than 7 steps.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;night&quot;, t = &quot;thing&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The given strings are already anagrams of each other. Thus, we do not need any further steps.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 526,
            "dislikes": 19,
            "similarQuestions": "[{\"title\": \"Minimum Number of Steps to Make Two Strings Anagram\", \"titleSlug\": \"minimum-number-of-steps-to-make-two-strings-anagram\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"37K\", \"totalSubmission\": \"51.4K\", \"totalAcceptedRaw\": 36957, \"totalSubmissionRaw\": 51353, \"acRate\": \"72.0%\"}",
            "hints": [
                "Notice that for anagrams, the order of the letters is irrelevant.",
                "For each letter, we can count its frequency in s and t.",
                "For each letter, its contribution to the answer is the absolute difference between its frequency in s and t."
            ],
            "rephrased": {
                "body": "Given two strings `s` and `t`, determine the minimum number of steps required to make them anagrams of each other. In one step, you can append any lowercase English letter to either `s` or `t`.  An anagram is a string formed by rearranging the characters of another string, using all the original characters exactly once.",
                "constraints": [
                    "1 <= s.length, t.length <= 2 * 10^5",
                    "s and t consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"leetcode\", t = \"coats\"",
                        "output": "7",
                        "explanation": "To make 'leetcode' and 'coats' anagrams, we need to add 'a' and 's' to 'leetcode' (2 steps) and 'l', 'e', 'e', 'd', 'e' to 'coats' (5 steps).  This results in anagrams like 'leetcodeas' and 'coatsleede'. Total steps: 2 + 5 = 7."
                    },
                    {
                        "input": "s = \"night\", t = \"thing\"",
                        "output": "0",
                        "explanation": "The strings 'night' and 'thing' are already anagrams of each other, so no steps are needed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-steps-to-make-two-strings-anagram",
                "title": "Minimum Number of Steps to Make Two Strings Anagram",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Notice that for anagrams, the order of the letters is irrelevant.",
            "For each letter, we can count its frequency in s and t.",
            "For each letter, its contribution to the answer is the absolute difference between its frequency in s and t."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSteps(string s, string t) {\n    vector<int> count(26);\n\n    for (const char c : s)\n      ++count[c - 'a'];\n\n    for (const char c : t)\n      --count[c - 'a'];\n\n    return accumulate(count.begin(), count.end(), 0,\n                      [](int res, int c) { return res + abs(c); });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSteps(String s, String t) {\n    int[] count = new int[26];\n    s.chars().forEach(c -> ++count[c - 'a']);\n    t.chars().forEach(c -> --count[c - 'a']);\n    return Arrays.stream(count).map(Math::abs).sum();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSteps(self, s: str, t: str) -> int:\n    count = collections.Counter(s)\n    count.subtract(collections.Counter(t))\n    return sum([abs(c) for c in count.values()])\n",
                "lang_text": "py"
            }
        }
    }
}