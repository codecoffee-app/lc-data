{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1864",
            "title": "Minimum Number of Swaps to Make the Binary String Alternating",
            "titleSlug": "minimum-number-of-swaps-to-make-the-binary-string-alternating",
            "content": "<p>Given a binary string <code>s</code>, return <em>the <strong>minimum</strong> number of character swaps to make it <strong>alternating</strong>, or </em><code>-1</code><em> if it is impossible.</em></p>\n\n<p>The string is called <strong>alternating</strong> if no two adjacent characters are equal. For example, the strings <code>&quot;010&quot;</code> and <code>&quot;1010&quot;</code> are alternating, while the string <code>&quot;0100&quot;</code> is not.</p>\n\n<p>Any two characters may be swapped, even if they are&nbsp;<strong>not adjacent</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;111000&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Swap positions 1 and 4: &quot;1<u>1</u>10<u>0</u>0&quot; -&gt; &quot;1<u>0</u>10<u>1</u>0&quot;\nThe string is now alternating.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;010&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The string is already alternating, no swaps are needed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1110&quot;\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 563,
            "dislikes": 35,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.1K\", \"totalSubmission\": \"58.3K\", \"totalAcceptedRaw\": 25116, \"totalSubmissionRaw\": 58349, \"acRate\": \"43.0%\"}",
            "hints": [
                "Think about all valid strings of length n.",
                "Try to count the mismatched positions with each valid string of length n."
            ],
            "rephrased": {
                "body": "Given a binary string `s`, determine the minimum number of character swaps required to transform it into an alternating string (where no two adjacent characters are equal). If it's impossible to create an alternating string, return -1. Any two characters can be swapped, regardless of their positions.",
                "constraints": [
                    "1 <= s.length <= 1000",
                    "s[i] is either '0' or '1'."
                ],
                "testcases": [
                    {
                        "input": "111000",
                        "output": 1,
                        "explanation": "By swapping the characters at indices 1 and 4, the string becomes '101010', which is an alternating string."
                    },
                    {
                        "input": "010",
                        "output": 0,
                        "explanation": "The string is already alternating, so no swaps are needed."
                    },
                    {
                        "input": "1110",
                        "output": -1,
                        "explanation": "It is impossible to make this string alternating by swapping characters."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Think about all valid strings of length n.",
            "Try to count the mismatched positions with each valid string of length n."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSwaps(string s) {\n    const int ones = count(s.begin(), s.end(), '1');\n    const int zeros = s.length() - ones;\n    if (abs(ones - zeros) > 1)\n      return -1;\n    if (ones > zeros)\n      return countSwaps(s, '1');\n    if (zeros > ones)\n      return countSwaps(s, '0');\n    return min(countSwaps(s, '1'), countSwaps(s, '0'));\n  }\n\n private:\n  int countSwaps(const string& s, char curr) {\n    int swaps = 0;\n    for (const char c : s) {\n      if (c != curr)\n        ++swaps;\n      curr ^= 1;\n    }\n    return swaps / 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSwaps(String s) {\n    final int ones = (int) s.chars().filter(c -> c == '1').count();\n    final int zeros = s.length() - ones;\n    if (Math.abs(ones - zeros) > 1)\n      return -1;\n    if (ones > zeros)\n      return countSwaps(s, '1');\n    if (zeros > ones)\n      return countSwaps(s, '0');\n    return Math.min(countSwaps(s, '1'), countSwaps(s, '0'));\n  }\n\n  private int countSwaps(final String s, char curr) {\n    int swaps = 0;\n    for (final char c : s.toCharArray()) {\n      if (c != curr)\n        ++swaps;\n      curr ^= 1;\n    }\n    return swaps / 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSwaps(self, s: str) -> int:\n    ones = s.count('1')\n    zeros = len(s) - ones\n    if abs(ones - zeros) > 1:\n      return -1\n\n    def countSwaps(curr: str) -> int:\n      swaps = 0\n      for c in s:\n        if c != curr:\n          swaps += 1\n        curr = chr(ord(curr) ^ 1)\n      return swaps // 2\n\n    if ones > zeros:\n      return countSwaps('1')\n    if zeros > ones:\n      return countSwaps('0')\n    return min(countSwaps('1'), countSwaps('0'))\n",
                "lang_text": "py"
            }
        }
    }
}