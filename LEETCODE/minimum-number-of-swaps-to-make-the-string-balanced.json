{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1963",
            "title": "Minimum Number of Swaps to Make the String Balanced",
            "titleSlug": "minimum-number-of-swaps-to-make-the-string-balanced",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code> of <strong>even</strong> length <code>n</code>. The string consists of <strong>exactly</strong> <code>n / 2</code> opening brackets <code>&#39;[&#39;</code> and <code>n / 2</code> closing brackets <code>&#39;]&#39;</code>.</p>\n\n<p>A string is called <strong>balanced</strong> if and only if:</p>\n\n<ul>\n\t<li>It is the empty string, or</li>\n\t<li>It can be written as <code>AB</code>, where both <code>A</code> and <code>B</code> are <strong>balanced</strong> strings, or</li>\n\t<li>It can be written as <code>[C]</code>, where <code>C</code> is a <strong>balanced</strong> string.</li>\n</ul>\n\n<p>You may swap the brackets at <strong>any</strong> two indices <strong>any</strong> number of times.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of swaps to make </em><code>s</code> <em><strong>balanced</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;][][&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You can make the string balanced by swapping index 0 with index 3.\nThe resulting string is &quot;[[]]&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;]]][[[&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You can do the following to make the string balanced:\n- Swap index 0 with index 4. s = &quot;[]][][&quot;.\n- Swap index 1 with index 5. s = &quot;[[][]]&quot;.\nThe resulting string is &quot;[[][]]&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;[]&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The string is already balanced.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == s.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>6</sup></code></li>\n\t<li><code>n</code> is even.</li>\n\t<li><code>s[i]</code> is either <code>&#39;[&#39; </code>or <code>&#39;]&#39;</code>.</li>\n\t<li>The number of opening brackets <code>&#39;[&#39;</code> equals <code>n / 2</code>, and the number of closing brackets <code>&#39;]&#39;</code> equals <code>n / 2</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1677,
            "dislikes": 63,
            "similarQuestions": "[{\"title\": \"Remove Invalid Parentheses\", \"titleSlug\": \"remove-invalid-parentheses\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Add to Make Parentheses Valid\", \"titleSlug\": \"minimum-add-to-make-parentheses-valid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Remove to Make Valid Parentheses\", \"titleSlug\": \"minimum-remove-to-make-valid-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Insertions to Balance a Parentheses String\", \"titleSlug\": \"minimum-insertions-to-balance-a-parentheses-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"60.6K\", \"totalSubmission\": \"85.8K\", \"totalAcceptedRaw\": 60599, \"totalSubmissionRaw\": 85843, \"acRate\": \"70.6%\"}",
            "hints": [
                "Iterate over the string and keep track of the number of opening and closing brackets on each step.",
                "If the number of closing brackets is ever larger, you need to make a swap.",
                "Swap it with the opening bracket closest to the end of s."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string `s` of even length `n` consisting of exactly `n / 2` opening brackets '[' and `n / 2` closing brackets ']', determine the minimum number of swaps required to make `s` balanced.\n\nA string is considered balanced if:\n\n1.  It is the empty string, or\n2.  It can be written as `AB`, where both `A` and `B` are balanced strings, or\n3.  It can be written as `[C]`, where `C` is a balanced string.\n\nYou can swap the brackets at any two indices any number of times.",
                "constraints": [
                    "n == s.length",
                    "2 <= n <= 10^6",
                    "n is even.",
                    "s[i] is either '[' or ']'.",
                    "The number of opening brackets '[' equals n / 2, and the number of closing brackets ']' equals n / 2."
                ],
                "testcases": [
                    {
                        "input": "][][",
                        "output": 1,
                        "explanation": "The string can be balanced by swapping the bracket at index 0 with the bracket at index 3, resulting in the balanced string \"[[]]\"."
                    },
                    {
                        "input": "]]][[[",
                        "output": 2,
                        "explanation": "The string can be balanced with the following swaps:\n- Swap index 0 with index 4. s becomes \"[]][][\".\n- Swap index 1 with index 5. s becomes \"[[][]]\".\nThe resulting string is \"[[][]]\"."
                    },
                    {
                        "input": "[]",
                        "output": 0,
                        "explanation": "The string is already balanced."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "remove-invalid-parentheses",
                "title": "Remove Invalid Parentheses",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-add-to-make-parentheses-valid",
                "title": "Minimum Add to Make Parentheses Valid",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-remove-to-make-valid-parentheses",
                "title": "Minimum Remove to Make Valid Parentheses",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-insertions-to-balance-a-parentheses-string",
                "title": "Minimum Insertions to Balance a Parentheses String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Iterate over the string and keep track of the number of opening and closing brackets on each step.",
            "If the number of closing brackets is ever larger, you need to make a swap.",
            "Swap it with the opening bracket closest to the end of s."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSwaps(string s) {\n    // Cancel out all the matched pairs, then we'll be left with \"]]]..[[[\".\n    // The answer is ceil(# of unmatched pairs / 2).\n    int unmatched = 0;\n\n    for (const char c : s)\n      if (c == '[')\n        ++unmatched;\n      else if (unmatched > 0)  // c == ']' and there's a match.\n        --unmatched;\n\n    return (unmatched + 1) / 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSwaps(String s) {\n    // Cancel out all the matched pairs, then we'll be left with \"]]]..[[[\".\n    // The answer is ceil(# of unmatched pairs / 2).\n    int unmatched = 0;\n\n    for (final char c : s.toCharArray())\n      if (c == '[')\n        ++unmatched;\n      else if (unmatched > 0) // c == ']' and there's a match.\n        --unmatched;\n\n    return (unmatched + 1) / 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSwaps(self, s: str) -> int:\n    # Cancel out all the matched pairs, then we'll be left with ']]]..[[['.\n    # The answer is ceil(# of unmatched pairs // 2).\n    unmatched = 0\n\n    for c in s:\n      if c == '[':\n        unmatched += 1\n      elif unmatched > 0:  # c == ']' and there's a match.\n        unmatched -= 1\n\n    return (unmatched + 1) // 2\n",
                "lang_text": "py"
            }
        }
    }
}