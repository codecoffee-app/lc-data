{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3291",
            "title": "Minimum Number of Valid Strings to Form Target I",
            "titleSlug": "minimum-number-of-valid-strings-to-form-target-i",
            "content": "<p>You are given an array of strings <code>words</code> and a string <code>target</code>.</p>\n\n<p>A string <code>x</code> is called <strong>valid</strong> if <code>x</code> is a <span data-keyword=\"string-prefix\">prefix</span> of <strong>any</strong> string in <code>words</code>.</p>\n\n<p>Return the <strong>minimum</strong> number of <strong>valid</strong> strings that can be <em>concatenated</em> to form <code>target</code>. If it is <strong>not</strong> possible to form <code>target</code>, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">words = [&quot;abc&quot;,&quot;aaaaa&quot;,&quot;bcdef&quot;], target = &quot;aabcdabc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The target string can be formed by concatenating:</p>\n\n<ul>\n\t<li>Prefix of length 2 of <code>words[1]</code>, i.e. <code>&quot;aa&quot;</code>.</li>\n\t<li>Prefix of length 3 of <code>words[2]</code>, i.e. <code>&quot;bcd&quot;</code>.</li>\n\t<li>Prefix of length 3 of <code>words[0]</code>, i.e. <code>&quot;abc&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">words = [&quot;abababab&quot;,&quot;ab&quot;], target = &quot;ababaababa&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The target string can be formed by concatenating:</p>\n\n<ul>\n\t<li>Prefix of length 5 of <code>words[0]</code>, i.e. <code>&quot;ababa&quot;</code>.</li>\n\t<li>Prefix of length 5 of <code>words[0]</code>, i.e. <code>&quot;ababa&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">words = [&quot;abcdef&quot;], target = &quot;xyz&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li>The input is generated such that <code>sum(words[i].length) &lt;= 10<sup>5</sup></code>.</li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n\t<li><code>1 &lt;= target.length &lt;= 5 * 10<sup>3</sup></code></li>\n\t<li><code>target</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 126,
            "dislikes": 10,
            "similarQuestions": "[{\"title\": \"Minimum Cost to Convert String II\", \"titleSlug\": \"minimum-cost-to-convert-string-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Construct String with Minimum Cost\", \"titleSlug\": \"construct-string-with-minimum-cost\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.6K\", \"totalSubmission\": \"53.1K\", \"totalAcceptedRaw\": 9631, \"totalSubmissionRaw\": 53079, \"acRate\": \"18.1%\"}",
            "hints": [
                "Let <code>dp[i]</code> be the minimum cost to form the prefix of length <code>i</code> of <code>target</code>.",
                "If <code>target[(i + 1)..j]</code> matches any prefix, update the range <code>dp[(i + 1)..j]</code> to minimum between original value and <code>dp[i] + 1</code>.",
                "Use a Trie to check prefix matching."
            ],
            "rephrased": {
                "body": "Given an array of strings `words` and a string `target`, find the minimum number of valid strings that can be concatenated to form `target`. A string `x` is considered valid if it is a prefix of any string in `words`. If it's impossible to form `target`, return -1.",
                "constraints": [
                    "1 <= words.length <= 100",
                    "1 <= words[i].length <= 5 * 10^3",
                    "The input is generated such that sum(words[i].length) <= 10^5",
                    "words[i] consists only of lowercase English letters.",
                    "1 <= target.length <= 5 * 10^3",
                    "target consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "words = [\"abc\",\"aaaaa\",\"bcdef\"], target = \"aabcdabc\"",
                        "output": "3",
                        "explanation": "The target can be formed by concatenating the following prefixes: \"aa\" (from \"aaaaa\"), \"bcd\" (from \"bcdef\"), and \"abc\" (from \"abc\")."
                    },
                    {
                        "input": "words = [\"abababab\",\"ab\"], target = \"ababaababa\"",
                        "output": "2",
                        "explanation": "The target can be formed by concatenating \"ababa\" (prefix of \"abababab\") twice."
                    },
                    {
                        "input": "words = [\"abcdef\"], target = \"xyz\"",
                        "output": "-1",
                        "explanation": "It is impossible to form the target string \"xyz\" using prefixes from the given words array."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-convert-string-ii",
                "title": "Minimum Cost to Convert String II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "construct-string-with-minimum-cost",
                "title": "Construct String with Minimum Cost",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>dp[i]</code> be the minimum cost to form the prefix of length <code>i</code> of <code>target</code>.",
            "If <code>target[(i + 1)..j]</code> matches any prefix, update the range <code>dp[(i + 1)..j]</code> to minimum between original value and <code>dp[i] + 1</code>.",
            "Use a Trie to check prefix matching."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minValidStrings(vector<string>& words, string target) {\n    int ans = 0;\n    int unmatchedPrefix = target.length();\n    vector<vector<int>> lpsList;\n\n    for (const string& word : words)\n      lpsList.push_back(getLPS(word + '#' + target));\n\n    while (unmatchedPrefix > 0) {\n      // Greedily choose the word that has the longest suffix match with the\n      // remaining unmatched prefix.\n      int maxMatchSuffix = 0;\n      for (int i = 0; i < words.size(); ++i)\n        maxMatchSuffix = max(maxMatchSuffix,\n                             lpsList[i][words[i].length() + unmatchedPrefix]);\n      if (maxMatchSuffix == 0)\n        return -1;\n      ++ans;\n      unmatchedPrefix -= maxMatchSuffix;\n    }\n\n    return ans;\n  }\n\n private:\n  // Returns the lps array, where lps[i] is the length of the longest prefix of\n  // pattern[0..i] which is also a suffix of this substring.\n  vector<int> getLPS(const string& pattern) {\n    vector<int> lps(pattern.length());\n    for (int i = 1, j = 0; i < pattern.length(); ++i) {\n      while (j > 0 && pattern[j] != pattern[i])\n        j = lps[j - 1];\n      if (pattern[i] == pattern[j])\n        lps[i] = ++j;\n    }\n    return lps;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minValidStrings(String[] words, String target) {\n    int ans = 0;\n    int unmatchedPrefix = target.length();\n    int[][] lpsList = new int[words.length][];\n\n    for (int i = 0; i < words.length; ++i)\n      lpsList[i] = getLPS(words[i] + '#' + target);\n\n    while (unmatchedPrefix > 0) {\n      // Greedily choose the word that has the longest suffix match with the\n      // remaining unmatched prefix.\n      int maxMatchSuffix = 0;\n      for (int i = 0; i < words.length; ++i)\n        maxMatchSuffix = Math.max(maxMatchSuffix, lpsList[i][words[i].length() + unmatchedPrefix]);\n      if (maxMatchSuffix == 0)\n        return -1;\n      ++ans;\n      unmatchedPrefix -= maxMatchSuffix;\n    }\n\n    return ans;\n  }\n\n  // Returns the lps array, where lps[i] is the length of the longest prefix of\n  // pattern[0..i] which is also a suffix of this substring.\n  private int[] getLPS(final String pattern) {\n    int[] lps = new int[pattern.length()];\n    for (int i = 1, j = 0; i < pattern.length(); ++i) {\n      while (j > 0 && pattern.charAt(j) != pattern.charAt(i))\n        j = lps[j - 1];\n      if (pattern.charAt(i) == pattern.charAt(j))\n        lps[i] = ++j;\n    }\n    return lps;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minValidStrings(self, words: list[str], target: str) -> int:\n    ans = 0\n    unmatchedPrefix = len(target)\n    lpsList = [self._getLPS(word + '#' + target) for word in words]\n\n    while unmatchedPrefix > 0:\n      # Greedily choose the word that has the longest suffix match with the\n      # remaining unmatched prefix.\n      maxMatchSuffix = 0\n      for lps, word in zip(lpsList, words):\n        maxMatchSuffix = max(maxMatchSuffix, lps[len(word) + unmatchedPrefix])\n      if maxMatchSuffix == 0:\n        return -1\n      ans += 1\n      unmatchedPrefix -= maxMatchSuffix\n\n    return ans\n\n  def _getLPS(self, pattern: str) -> list[int]:\n    \"\"\"\n    Returns the lps array, where lps[i] is the length of the longest prefix of\n    pattern[0..i] which is also a suffix of this substring.\n    \"\"\"\n    lps = [0] * len(pattern)\n    j = 0\n    for i in range(1, len(pattern)):\n      while j > 0 and pattern[j] != pattern[i]:\n        j = lps[j - 1]\n      if pattern[i] == pattern[j]:\n        lps[i] = j + 1\n        j += 1\n    return lps\n",
                "lang_text": "py"
            }
        }
    }
}