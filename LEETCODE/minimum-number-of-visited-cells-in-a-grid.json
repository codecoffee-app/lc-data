{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2617",
            "title": "Minimum Number of Visited Cells in a Grid",
            "titleSlug": "minimum-number-of-visited-cells-in-a-grid",
            "content": "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> integer matrix <code>grid</code>. Your initial position is at the <strong>top-left</strong> cell <code>(0, 0)</code>.</p>\n\n<p>Starting from the cell <code>(i, j)</code>, you can move to one of the following cells:</p>\n\n<ul>\n\t<li>Cells <code>(i, k)</code> with <code>j &lt; k &lt;= grid[i][j] + j</code> (rightward movement), or</li>\n\t<li>Cells <code>(k, j)</code> with <code>i &lt; k &lt;= grid[i][j] + i</code> (downward movement).</li>\n</ul>\n\n<p>Return <em>the minimum number of cells you need to visit to reach the <strong>bottom-right</strong> cell</em> <code>(m - 1, n - 1)</code>. If there is no valid path, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/25/ex1.png\" style=\"width: 271px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The image above shows one of the paths that visits exactly 4 cells.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/25/ex2.png\" style=\"width: 271px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>The image above shows one of the paths that visits exactly 3 cells.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/26/ex3.png\" style=\"width: 181px; height: 81px;\" />\n<pre>\n<strong>Input:</strong> grid = [[2,1,0],[1,0,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It can be proven that no path exists.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt; m * n</code></li>\n\t<li><code>grid[m - 1][n - 1] == 0</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 347,
            "dislikes": 27,
            "similarQuestions": "[{\"title\": \"Jump Game II\", \"titleSlug\": \"jump-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Jump Game\", \"titleSlug\": \"jump-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.5K\", \"totalSubmission\": \"30.2K\", \"totalAcceptedRaw\": 7471, \"totalSubmissionRaw\": 30227, \"acRate\": \"24.7%\"}",
            "hints": [
                "For each cell (i,j), it is critical to find out the minimum number of steps to reach (i,j), denoted dis[i][j], quickly, given the tight constraint.",
                "Calculate dis[i][j] going left to right, top to bottom.",
                "Suppose we want to calculate dis[i][j], keep track of a priority queue that stores (dis[i][k], i, k) for all k \u2264 j, and another priority queue that stores (dis[k][j], k, j) for all k \u2264 i."
            ],
            "rephrased": {
                "body": "Given a 0-indexed m x n integer matrix `grid`, find the minimum number of cells needed to visit to reach the bottom-right cell (m - 1, n - 1) starting from the top-left cell (0, 0).  From cell (i, j), you can move right to cells (i, k) where j < k <= grid[i][j] + j, or down to cells (k, j) where i < k <= grid[i][j] + i. If no valid path exists, return -1.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 10^5",
                    "1 <= m * n <= 10^5",
                    "0 <= grid[i][j] < m * n",
                    "grid[m - 1][n - 1] == 0"
                ],
                "testcases": [
                    {
                        "input": "[[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]",
                        "output": "4",
                        "explanation": "One possible path to the bottom-right cell with the minimum number of cells visited is of length 4."
                    },
                    {
                        "input": "[[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]",
                        "output": "3",
                        "explanation": "One possible path to the bottom-right cell with the minimum number of cells visited is of length 3."
                    },
                    {
                        "input": "[[2,1,0],[1,0,0]]",
                        "output": "-1",
                        "explanation": "There is no valid path from the top-left cell to the bottom-right cell."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-ii",
                "title": "Jump Game II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game",
                "title": "Jump Game",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each cell (i,j), it is critical to find out the minimum number of steps to reach (i,j), denoted dis[i][j], quickly, given the tight constraint.",
            "Calculate dis[i][j] going left to right, top to bottom.",
            "Suppose we want to calculate dis[i][j], keep track of a priority queue that stores (dis[i][k], i, k) for all k \u2264 j, and another priority queue that stores (dis[k][j], k, j) for all k \u2264 i."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "template <typename T>\nclass RangeQuery {\n public:\n  virtual void update(int index, int val);\n  virtual T query(int i, int j);\n\n private:\n  virtual T merge(T a, T b);\n\n protected:\n  int left(int treeIndex) {\n    return 2 * treeIndex + 1;\n  }\n\n  int right(int treeIndex) {\n    return 2 * treeIndex + 2;\n  }\n};\n\nclass SegmentTree : RangeQuery<int> {\n public:\n  explicit SegmentTree(int n, int kInf) : n(n), kInf(kInf), tree(4 * n, kInf) {}\n\n  // Updates nums[i] to val equivalently.\n  void update(int i, int val) override {\n    update(0, 0, n - 1, i, val);\n  }\n\n  // Returns min(nums[i..j]).\n  int query(int i, int j) override {\n    return query(0, 0, n - 1, i, j);\n  }\n\n private:\n  const int n;       // size of the input array\n  const int kInf;    // invalid value\n  vector<int> tree;  // segment tree\n\n  void update(int treeIndex, int lo, int hi, int i, int val) {\n    if (lo == i && hi == i) {\n      tree[treeIndex] = val;\n      return;\n    }\n    const int mid = (lo + hi) / 2;\n    const int leftTreeIndex = left(treeIndex);\n    const int rightTreeIndex = right(treeIndex);\n    if (i <= mid)\n      update(leftTreeIndex, lo, mid, i, val);\n    else\n      update(rightTreeIndex, mid + 1, hi, i, val);\n    tree[treeIndex] = merge(tree[leftTreeIndex], tree[rightTreeIndex]);\n  }\n\n  int query(int treeIndex, int lo, int hi, int i, int j) {\n    // [lo, hi] lies completely inside [i, j].\n    if (i <= lo && hi <= j)\n      return tree[treeIndex];\n    // [lo, hi] lies completely outside [i, j].\n    if (j < lo || hi < i)\n      return kInf;\n    const int mid = (lo + hi) / 2;\n    return merge(query(left(treeIndex), lo, mid, i, j),\n                 query(right(treeIndex), mid + 1, hi, i, j));\n  }\n\n  // Merges the result of left node and right node.\n  int merge(int a, int b) override {\n    return min(a, b);\n  }\n};\n\nclass Solution {\n public:\n  int minimumVisitedCells(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    const int kInf = (m + n) * 2 - 1;\n    vector<SegmentTree> rows(m, SegmentTree(n, kInf));\n    vector<SegmentTree> cols(n, SegmentTree(m, kInf));\n\n    // The min # cells to visit (m - 1, n - 1) from (m - 1, n - 1) is 1.\n    rows[m - 1].update(n - 1, 1);\n    cols[n - 1].update(m - 1, 1);\n\n    for (int i = m - 1; i >= 0; --i)\n      for (int j = n - 1; j >= 0; --j) {\n        // There's no k s.t. j < k <= 0 + j.\n        // There's no k s.t. i < k <= 0 + i.\n        if (grid[i][j] == 0)\n          continue;\n        const int moveRight = rows[i].query(j + 1, grid[i][j] + j);\n        const int moveDown = cols[j].query(i + 1, grid[i][j] + i);\n        const int minMove = min(kInf, min(moveRight, moveDown) + 1);\n        rows[i].update(j, minMove);\n        cols[j].update(i, minMove);\n      }\n\n    const int res = rows[0].query(0, 0);\n    return res == kInf ? -1 : res;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}