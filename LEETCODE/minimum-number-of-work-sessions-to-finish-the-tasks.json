{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1986",
            "title": "Minimum Number of Work Sessions to Finish the Tasks",
            "titleSlug": "minimum-number-of-work-sessions-to-finish-the-tasks",
            "content": "<p>There are <code>n</code> tasks assigned to you. The task times are represented as an integer array <code>tasks</code> of length <code>n</code>, where the <code>i<sup>th</sup></code> task takes <code>tasks[i]</code> hours to finish. A <strong>work session</strong> is when you work for <strong>at most</strong> <code>sessionTime</code> consecutive hours and then take a break.</p>\n\n<p>You should finish the given tasks in a way that satisfies the following conditions:</p>\n\n<ul>\n\t<li>If you start a task in a work session, you must complete it in the <strong>same</strong> work session.</li>\n\t<li>You can start a new task <strong>immediately</strong> after finishing the previous one.</li>\n\t<li>You may complete the tasks in <strong>any order</strong>.</li>\n</ul>\n\n<p>Given <code>tasks</code> and <code>sessionTime</code>, return <em>the <strong>minimum</strong> number of <strong>work sessions</strong> needed to finish all the tasks following the conditions above.</em></p>\n\n<p>The tests are generated such that <code>sessionTime</code> is <strong>greater</strong> than or <strong>equal</strong> to the <strong>maximum</strong> element in <code>tasks[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [1,2,3], sessionTime = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You can finish the tasks in two work sessions.\n- First work session: finish the first and the second tasks in 1 + 2 = 3 hours.\n- Second work session: finish the third task in 3 hours.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [3,1,3,1,1], sessionTime = 8\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You can finish the tasks in two work sessions.\n- First work session: finish all the tasks except the last one in 3 + 1 + 3 + 1 = 8 hours.\n- Second work session: finish the last task in 1 hour.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [1,2,3,4,5], sessionTime = 15\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You can finish all the tasks in one work session.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == tasks.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 14</code></li>\n\t<li><code>1 &lt;= tasks[i] &lt;= 10</code></li>\n\t<li><code>max(tasks[i]) &lt;= sessionTime &lt;= 15</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1056,
            "dislikes": 65,
            "similarQuestions": "[{\"title\": \"Smallest Sufficient Team\", \"titleSlug\": \"smallest-sufficient-team\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Fair Distribution of Cookies\", \"titleSlug\": \"fair-distribution-of-cookies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Minimum Time to Finish All Jobs\", \"titleSlug\": \"find-minimum-time-to-finish-all-jobs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Minimum Time to Finish All Jobs II\", \"titleSlug\": \"find-minimum-time-to-finish-all-jobs-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.8K\", \"totalSubmission\": \"71.8K\", \"totalAcceptedRaw\": 23809, \"totalSubmissionRaw\": 71783, \"acRate\": \"33.2%\"}",
            "hints": [
                "Try all possible ways of assignment.",
                "If we can store the assignments in form of a state then we can reuse that state and solve the problem in a faster way."
            ],
            "rephrased": {
                "body": "Given an array `tasks` of length `n`, where `tasks[i]` represents the time in hours to complete the i-th task. A work session can last for at most `sessionTime` hours.  You must complete a task within the work session you start it in, and you can start a new task immediately after finishing the previous one. Tasks can be completed in any order.  Determine the minimum number of work sessions required to finish all tasks.",
                "constraints": [
                    "n == tasks.length",
                    "1 <= n <= 14",
                    "1 <= tasks[i] <= 10",
                    "max(tasks[i]) <= sessionTime <= 15"
                ],
                "testcases": [
                    {
                        "input": "tasks = [1,2,3], sessionTime = 3",
                        "output": "2",
                        "explanation": "One possible solution is to finish the first and second tasks in the first session (1 + 2 = 3 hours), and the third task in the second session (3 hours)."
                    },
                    {
                        "input": "tasks = [3,1,3,1,1], sessionTime = 8",
                        "output": "2",
                        "explanation": "One possible solution is to complete the first four tasks in the first session (3 + 1 + 3 + 1 = 8 hours) and the last task in the second session (1 hour)."
                    },
                    {
                        "input": "tasks = [1,2,3,4,5], sessionTime = 15",
                        "output": "1",
                        "explanation": "All tasks can be completed within a single work session (1 + 2 + 3 + 4 + 5 = 15 hours)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "smallest-sufficient-team",
                "title": "Smallest Sufficient Team",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "fair-distribution-of-cookies",
                "title": "Fair Distribution of Cookies",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-minimum-time-to-finish-all-jobs",
                "title": "Find Minimum Time to Finish All Jobs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-minimum-time-to-finish-all-jobs-ii",
                "title": "Find Minimum Time to Finish All Jobs II",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Try all possible ways of assignment.",
            "If we can store the assignments in form of a state then we can reuse that state and solve the problem in a faster way."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSessions(vector<int>& tasks, int sessionTime) {\n    for (int numSessions = 1; numSessions <= tasks.size(); ++numSessions)\n      if (dfs(tasks, 0, vector<int>(numSessions), sessionTime))\n        return numSessions;\n    throw;\n  }\n\n  // Returns true if we can assign tasks[s:] to `sessions`. Note that `sessions`\n  // may be occupied by some tasks.\n  bool dfs(const vector<int>& tasks, int s, vector<int>&& sessions,\n           const int& sessionTime) {\n    if (s == tasks.size())\n      return true;\n\n    for (int& session : sessions) {\n      // Can't assign tasks[s] to this session.\n      if (session + tasks[s] > sessionTime)\n        continue;\n      // Assign tasks[s] to this session.\n      session += tasks[s];\n      if (dfs(tasks, s + 1, move(sessions), sessionTime))\n        return true;\n      // Backtracking.\n      session -= tasks[s];\n      // If it's the first time we assign tasks[s] to this session. Then, future\n      // `session`s can't satisfy either.\n      if (session == 0)\n        return false;\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSessions(int[] tasks, int sessionTime) {\n    for (int numSessions = 1; numSessions <= tasks.length; ++numSessions)\n      if (dfs(tasks, 0, new int[numSessions], sessionTime))\n        return numSessions;\n    throw new IllegalArgumentException();\n  }\n\n  // Returns true if we can assign tasks[s:] to `sessions`. Note that `sessions`\n  // may be occupied by some tasks.\n  private boolean dfs(int[] tasks, int s, int[] sessions, int sessionTime) {\n    if (s == tasks.length)\n      return true;\n\n    for (int i = 0; i < sessions.length; ++i) {\n      // Can't assign tasks[s] to this session.\n      if (sessions[i] + tasks[s] > sessionTime)\n        continue;\n      // Assign tasks[s] to this session.\n      sessions[i] += tasks[s];\n      if (dfs(tasks, s + 1, sessions, sessionTime))\n        return true;\n      // Backtracking.\n      sessions[i] -= tasks[s];\n      // If it's the first time we assign tasks[s] to this session. Then, future\n      // `session`s can't satisfy either.\n      if (sessions[i] == 0)\n        return false;\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSessions(self, tasks: List[int], sessionTime: int) -> int:\n    # Returns True if we can assign tasks[s:] to `sessions`. Note that `sessions`\n    # may be occupied by some tasks.\n    def dfs(s: int, sessions: List[int]) -> bool:\n      if s == len(tasks):\n        return True\n\n      for i, session in enumerate(sessions):\n        # Can't assign tasks[s] to this session.\n        if session + tasks[s] > sessionTime:\n          continue\n        # Assign tasks[s] to this session.\n        sessions[i] += tasks[s]\n        if dfs(s + 1, sessions):\n          return True\n        # Backtracking.\n        sessions[i] -= tasks[s]\n        # If it's the first time we assign tasks[s] to this session. Then, future\n        # `session`s can't satisfy either.\n        if sessions[i] == 0:\n          return False\n\n      return False\n\n    for numSessions in range(1, len(tasks) + 1):\n      if dfs(0, [0] * numSessions):\n        return numSessions\n",
                "lang_text": "py"
            }
        }
    }
}