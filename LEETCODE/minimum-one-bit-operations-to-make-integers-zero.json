{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1611",
            "title": "Minimum One Bit Operations to Make Integers Zero",
            "titleSlug": "minimum-one-bit-operations-to-make-integers-zero",
            "content": "<p>Given an integer <code>n</code>, you must transform it into <code>0</code> using the following operations any number of times:</p>\n\n<ul>\n\t<li>Change the rightmost (<code>0<sup>th</sup></code>) bit in the binary representation of <code>n</code>.</li>\n\t<li>Change the <code>i<sup>th</sup></code> bit in the binary representation of <code>n</code> if the <code>(i-1)<sup>th</sup></code> bit is set to <code>1</code> and the <code>(i-2)<sup>th</sup></code> through <code>0<sup>th</sup></code> bits are set to <code>0</code>.</li>\n</ul>\n\n<p>Return <em>the minimum number of operations to transform </em><code>n</code><em> into </em><code>0</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The binary representation of 3 is &quot;11&quot;.\n&quot;<u>1</u>1&quot; -&gt; &quot;<u>0</u>1&quot; with the 2<sup>nd</sup> operation since the 0<sup>th</sup> bit is 1.\n&quot;0<u>1</u>&quot; -&gt; &quot;0<u>0</u>&quot; with the 1<sup>st</sup> operation.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The binary representation of 6 is &quot;110&quot;.\n&quot;<u>1</u>10&quot; -&gt; &quot;<u>0</u>10&quot; with the 2<sup>nd</sup> operation since the 1<sup>st</sup> bit is 1 and 0<sup>th</sup> through 0<sup>th</sup> bits are 0.\n&quot;01<u>0</u>&quot; -&gt; &quot;01<u>1</u>&quot; with the 1<sup>st</sup> operation.\n&quot;0<u>1</u>1&quot; -&gt; &quot;0<u>0</u>1&quot; with the 2<sup>nd</sup> operation since the 0<sup>th</sup> bit is 1.\n&quot;00<u>1</u>&quot; -&gt; &quot;00<u>0</u>&quot; with the 1<sup>st</sup> operation.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 873,
            "dislikes": 972,
            "similarQuestions": "[{\"title\": \"Minimum Number of Operations to Make Array Continuous\", \"titleSlug\": \"minimum-number-of-operations-to-make-array-continuous\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Apply Bitwise Operations to Make Strings Equal\", \"titleSlug\": \"apply-bitwise-operations-to-make-strings-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"55.6K\", \"totalSubmission\": \"74.4K\", \"totalAcceptedRaw\": 55624, \"totalSubmissionRaw\": 74442, \"acRate\": \"74.7%\"}",
            "hints": [
                "The fastest way to convert n to zero is to remove all set bits starting from the leftmost one. Try some simple examples to learn the rule of how many steps are needed to remove one set bit.",
                "consider n=2^k case first, then solve for all n."
            ],
            "rephrased": {
                "body": "Given an integer 'n', determine the minimum number of operations required to transform it to 0. The allowed operations are:\n\n1.  Flip the rightmost bit (0th bit) in the binary representation of 'n'.\n2.  Flip the ith bit if the (i-1)th bit is 1 and all bits from (i-2)th down to the 0th bit are 0.",
                "constraints": [
                    "0 <= n <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "2",
                        "explanation": "The binary representation of 3 is '11'.\n'11' -> '01' (Operation 2, since the 0th bit is 1).\n'01' -> '00' (Operation 1)."
                    },
                    {
                        "input": "6",
                        "output": "4",
                        "explanation": "The binary representation of 6 is '110'.\n'110' -> '010' (Operation 2, since the 1st bit is 1 and the 0th bit is 0).\n'010' -> '011' (Operation 1).\n'011' -> '001' (Operation 2, since the 0th bit is 1).\n'001' -> '000' (Operation 1)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-operations-to-make-array-continuous",
                "title": "Minimum Number of Operations to Make Array Continuous",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "apply-bitwise-operations-to-make-strings-equal",
                "title": "Apply Bitwise Operations to Make Strings Equal",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The fastest way to convert n to zero is to remove all set bits starting from the leftmost one. Try some simple examples to learn the rule of how many steps are needed to remove one set bit.",
            "consider n=2^k case first, then solve for all n."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumOneBitOperations(int n) {\n    // Observation 1: E.g. n = 2^2\n    //        100 (2^2 needs 2^3 - 1 ops)\n    // op1 -> 101\n    // op2 -> 111\n    // op1 -> 110\n    // op2 -> 010 (2^1 needs 2^2 - 1 ops)\n    // op1 -> 011\n    // op2 -> 001 (2^0 needs 2^1 - 1 ops)\n    // op1 -> 000\n    //\n    // So 2^k needs 2^(k + 1) - 1 ops. Note this is reversible, i.e., 0 -> 2^k\n    // also takes 2^(k + 1) - 1 ops.\n\n    // E.g. n = 1XXX, our first goal is to change 1XXX -> 1100.\n    //   - If the second bit is 1, you only need to consider the cost of turning\n    //     the last 2 bits to 0.\n    //   - If the second bit is 0, you need to add up the cost of flipping the\n    //     second bit from 0 to 1.\n    // XOR determines the cost minimumOneBitOperations(1XXX^1100) accordingly.\n    // Then, 1100 -> 0100 needs 1 op. Finally, 0100 -> 0 needs 2^3 - 1 ops.\n    if (n == 0)\n      return 0;\n    // x is the largest 2^k <= n.\n    // x | x >> 1 -> x >> 1 needs 1 op.\n    //     x >> 1 -> 0      needs x = 2^k - 1 ops.\n    int x = 1;\n    while (x * 2 <= n)\n      x <<= 1;\n    return minimumOneBitOperations(n ^ (x | x >> 1)) + 1 + x - 1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumOneBitOperations(int n) {\n    // Observation 1: E.g. n = 2^2\n    //        100 (2^2 needs 2^3 - 1 ops)\n    // op1 -> 101\n    // op2 -> 111\n    // op1 -> 110\n    // op2 -> 010 (2^1 needs 2^2 - 1 ops)\n    // op1 -> 011\n    // op2 -> 001 (2^0 needs 2^1 - 1 ops)\n    // op1 -> 000\n    //\n    // So 2^k needs 2^(k + 1) - 1 ops. Note this is reversible, i.e., 0 -> 2^k\n    // also takes 2^(k + 1) - 1 ops.\n\n    // E.g. n = 1XXX, our first goal is to change 1XXX -> 1100.\n    //   - If the second bit is 1, you only need to consider the cost of turning\n    //     the last 2 bits to 0.\n    //   - If the second bit is 0, you need to add up the cost of flipping the\n    //     second bit from 0 to 1.\n    // XOR determines the cost minimumOneBitOperations(1XXX^1100) accordingly.\n    // Then, 1100 -> 0100 needs 1 op. Finally, 0100 -> 0 needs 2^3 - 1 ops.\n    if (n == 0)\n      return 0;\n    // x is the largest 2^k <= n.\n    // x | x >> 1 -> x >> 1 needs 1 op.\n    //     x >> 1 -> 0      needs x = 2^k - 1 ops.\n    int x = 1;\n    while (x * 2 <= n)\n      x <<= 1;\n    return minimumOneBitOperations(n ^ (x | x >> 1)) + 1 + x - 1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumOneBitOperations(self, n: int) -> int:\n    # Observation 1: E.g. n = 2^2\n    #        100 (2^2 needs 2^3 - 1 ops)\n    # op1 -> 101\n    # op2 -> 111\n    # op1 -> 110\n    # op2 -> 010 (2^1 needs 2^2 - 1 ops)\n    # op1 -> 011\n    # op2 -> 001 (2^0 needs 2^1 - 1 ops)\n    # op1 -> 000\n    #\n    # So 2^k needs 2^(k + 1) - 1 ops. Note this is reversible, i.e., 0 -> 2^k\n    # also takes 2^(k + 1) - 1 ops.\n\n    # E.g. n = 1XXX, our first goal is to change 1XXX -> 1100.\n    #   - If the second bit is 1, you only need to consider the cost of turning\n    #     the last 2 bits to 0.\n    #   - If the second bit is 0, you need to add up the cost of flipping the\n    #     second bit from 0 to 1.\n    # XOR determines the cost minimumOneBitOperations(1XXX^1100) accordingly.\n    # Then, 1100 -> 0100 needs 1 op. Finally, 0100 -> 0 needs 2^3 - 1 ops.\n    if n == 0:\n      return 0\n    # x is the largest 2^k <= n.\n    # x | x >> 1 -> x >> 1 needs 1 op.\n    #     x >> 1 -> 0      needs x = 2^k - 1 ops.\n    x = 1 << n.bit_length() - 1\n    return self.minimumOneBitOperations(n ^ (x | x >> 1)) + 1 + x - 1\n",
                "lang_text": "py"
            }
        }
    }
}