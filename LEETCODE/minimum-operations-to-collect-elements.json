{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2869",
            "title": "Minimum Operations to Collect Elements",
            "titleSlug": "minimum-operations-to-collect-elements",
            "content": "<p>You are given an array <code>nums</code> of positive integers and an integer <code>k</code>.</p>\n\n<p>In one operation, you can remove the last element of the array and add it to your collection.</p>\n\n<p>Return <em>the <strong>minimum number of operations</strong> needed to collect elements</em> <code>1, 2, ..., k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,5,4,2], k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> After 4 operations, we collect elements 2, 4, 5, and 1, in this order. Our collection contains elements 1 and 2. Hence, the answer is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,5,4,2], k = 5\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> After 5 operations, we collect elements 2, 4, 5, 1, and 3, in this order. Our collection contains elements 1 through 5. Hence, the answer is 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,5,3,1], k = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> After 4 operations, we collect elements 1, 3, 5, and 2, in this order. Our collection contains elements 1 through 3. Hence, the answer is 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= nums.length</code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n\t<li>The input is generated such that you can collect elements <code>1, 2, ..., k</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 163,
            "dislikes": 17,
            "similarQuestions": "[{\"title\": \"Build an Array With Stack Operations\", \"titleSlug\": \"build-an-array-with-stack-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"34.7K\", \"totalSubmission\": \"57.8K\", \"totalAcceptedRaw\": 34696, \"totalSubmissionRaw\": 57823, \"acRate\": \"60.0%\"}",
            "hints": [
                "Use an occurrence array.",
                "Iterate over the elements in reverse order.",
                "If the current element <code>nums[i]</code> is not marked in the occurrence array and <code>nums[i] &lt;= k</code>, mark <code>nums[i]</code>.",
                "Keep track of how many integers you have marked.",
                "Return the current index as soon as the number of marked integers becomes equal to <code>k</code>."
            ],
            "rephrased": {
                "body": "Given an array `nums` of positive integers and an integer `k`, determine the minimum number of operations required to collect all elements from 1 to `k`. In each operation, you can remove the last element of `nums` and add it to your collection.",
                "constraints": [
                    "1 <= nums.length <= 50",
                    "1 <= nums[i] <= nums.length",
                    "1 <= k <= nums.length",
                    "It is guaranteed that you can collect elements 1, 2, ..., k."
                ],
                "testcases": [
                    {
                        "input": "nums = [3,1,5,4,2], k = 2",
                        "output": "4",
                        "explanation": "We need to perform 4 operations to collect the elements 2, 4, 5, and 1. After these operations, our collection will contain elements 1 and 2, satisfying the condition of having elements 1 to k (which is 2 in this case)."
                    },
                    {
                        "input": "nums = [3,1,5,4,2], k = 5",
                        "output": "5",
                        "explanation": "We need to perform 5 operations to collect elements 2, 4, 5, 1, and 3. This results in a collection containing elements 1, 2, 3, 4, and 5, fulfilling the requirement of having elements 1 to k (which is 5)."
                    },
                    {
                        "input": "nums = [3,2,5,3,1], k = 3",
                        "output": "4",
                        "explanation": "We need to perform 4 operations to collect elements 1, 3, 5, and 2. This results in a collection containing 1, 2 and 3, thus covering all numbers from 1 to k (which is 3)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "build-an-array-with-stack-operations",
                "title": "Build an Array With Stack Operations",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use an occurrence array.",
            "Iterate over the elements in reverse order.",
            "If the current element <code>nums[i]</code> is not marked in the occurrence array and <code>nums[i] &lt;= k</code>, mark <code>nums[i]</code>.",
            "Keep track of how many integers you have marked.",
            "Return the current index as soon as the number of marked integers becomes equal to <code>k</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& nums, int k) {\n    unordered_set<int> seen;\n\n    for (int i = nums.size() - 1; i >= 0; --i) {\n      if (nums[i] > k)\n        continue;\n      seen.insert(nums[i]);\n      if (seen.size() == k)\n        return nums.size() - i;\n    }\n\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(List<Integer> nums, int k) {\n    Set<Integer> seen = new HashSet<>();\n\n    for (int i = nums.size() - 1; i >= 0; --i) {\n      if (nums.get(i) > k)\n        continue;\n      seen.add(nums.get(i));\n      if (seen.size() == k)\n        return nums.size() - i;\n    }\n\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums: List[int], k: int) -> int:\n    seen = set()\n\n    for i, num in enumerate(reversed(nums)):\n      if num > k:\n        continue\n      seen.add(num)\n      if len(seen) == k:\n        return i + 1\n",
                "lang_text": "py"
            }
        }
    }
}