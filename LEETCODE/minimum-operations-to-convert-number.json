{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2059",
            "title": "Minimum Operations to Convert Number",
            "titleSlug": "minimum-operations-to-convert-number",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> containing <strong>distinct</strong> numbers, an integer <code>start</code>, and an integer <code>goal</code>. There is an integer <code>x</code> that is initially set to <code>start</code>, and you want to perform operations on <code>x</code> such that it is converted to <code>goal</code>. You can perform the following operation repeatedly on the number <code>x</code>:</p>\n\n<p>If <code>0 &lt;= x &lt;= 1000</code>, then for any index <code>i</code> in the array (<code>0 &lt;= i &lt; nums.length</code>), you can set <code>x</code> to any of the following:</p>\n\n<ul>\n\t<li><code>x + nums[i]</code></li>\n\t<li><code>x - nums[i]</code></li>\n\t<li><code>x ^ nums[i]</code> (bitwise-XOR)</li>\n</ul>\n\n<p>Note that you can use each <code>nums[i]</code> any number of times in any order. Operations that set <code>x</code> to be out of the range <code>0 &lt;= x &lt;= 1000</code> are valid, but no more operations can be done afterward.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed to convert </em><code>x = start</code><em> into </em><code>goal</code><em>, and </em><code>-1</code><em> if it is not possible</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,12], start = 2, goal = 12\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can go from 2 &rarr; 14 &rarr; 12 with the following 2 operations.\n- 2 + 12 = 14\n- 14 - 2 = 12\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,5,7], start = 0, goal = -4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can go from 0 &rarr; 3 &rarr; -4 with the following 2 operations. \n- 0 + 3 = 3\n- 3 - 7 = -4\nNote that the last operation sets x out of the range 0 &lt;= x &lt;= 1000, which is valid.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,8,16], start = 0, goal = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no way to convert 0 into 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i], goal &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= start &lt;= 1000</code></li>\n\t<li><code>start != goal</code></li>\n\t<li>All the integers in <code>nums</code> are distinct.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 619,
            "dislikes": 33,
            "similarQuestions": "[{\"title\": \"Minimum Operations to Reduce X to Zero\", \"titleSlug\": \"minimum-operations-to-reduce-x-to-zero\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.3K\", \"totalSubmission\": \"31.4K\", \"totalAcceptedRaw\": 15261, \"totalSubmissionRaw\": 31407, \"acRate\": \"48.6%\"}",
            "hints": [
                "Once x drops below 0 or goes above 1000, is it possible to continue performing operations on x?",
                "How can you use BFS to find the minimum operations?"
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` containing distinct numbers, an integer `start`, and an integer `goal`, find the minimum number of operations needed to convert `start` into `goal`.  You begin with `x = start` and can repeatedly apply the following operations as long as `0 <= x <= 1000`:\n\n*   `x + nums[i]`\n*   `x - nums[i]`\n*   `x ^ nums[i]` (bitwise-XOR)\n\nfor any index `i` in `nums` (0 <= i < nums.length).  Each `nums[i]` can be used any number of times and in any order.\n\nOperations that cause `x` to fall outside the range `0 <= x <= 1000` are valid, but no further operations are allowed after this point.\n\nReturn the minimum number of operations required to transform `start` to `goal`. Return -1 if it's not possible.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "-10^9 <= nums[i], goal <= 10^9",
                    "0 <= start <= 1000",
                    "start != goal",
                    "All the integers in nums are distinct."
                ],
                "testcases": [
                    {
                        "input": "nums = [2,4,12], start = 2, goal = 12",
                        "output": "2",
                        "explanation": "One possible solution is to perform two operations: first 2 + 12 = 14, then 14 - 2 = 12."
                    },
                    {
                        "input": "nums = [3,5,7], start = 0, goal = -4",
                        "output": "2",
                        "explanation": "One possible solution is to perform two operations: first 0 + 3 = 3, then 3 - 7 = -4. Note that the final value of x is outside the range [0, 1000]."
                    },
                    {
                        "input": "nums = [2,8,16], start = 0, goal = 1",
                        "output": "-1",
                        "explanation": "There is no sequence of operations that can transform 0 to 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-reduce-x-to-zero",
                "title": "Minimum Operations to Reduce X to Zero",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Once x drops below 0 or goes above 1000, is it possible to continue performing operations on x?",
            "How can you use BFS to find the minimum operations?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumOperations(vector<int>& nums, int start, int goal) {\n    int ans = 0;\n    queue<int> q{{start}};\n    vector<bool> seen(1001);\n    seen[start] = true;\n\n    while (!q.empty()) {\n      ++ans;\n      for (int sz = q.size(); sz > 0; --sz) {\n        const int x = q.front();\n        q.pop();\n        for (const int num : nums) {\n          for (const int res : {x + num, x - num, x ^ num}) {\n            if (res == goal)\n              return ans;\n            if (res < 0 || res > 1000 || seen[res])\n              continue;\n            seen[res] = true;\n            q.push(res);\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumOperations(int[] nums, int start, int goal) {\n    int ans = 0;\n    Queue<Integer> q = new ArrayDeque<>(Arrays.asList(start));\n    boolean[] seen = new boolean[1001];\n    seen[start] = true;\n\n    while (!q.isEmpty()) {\n      ++ans;\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int x = q.poll();\n        for (final int num : nums) {\n          for (final int res : new int[] {x + num, x - num, x ^ num}) {\n            if (res == goal)\n              return ans;\n            if (res < 0 || res > 1000 || seen[res])\n              continue;\n            seen[res] = true;\n            q.offer(res);\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumOperations(self, nums: List[int], start: int, goal: int) -> int:\n    ans = 0\n    q = collections.deque([start])\n    seen = {start}\n\n    while q:\n      ans += 1\n      for _ in range(len(q)):\n        x = q.popleft()\n        for num in nums:\n          for res in (x + num, x - num, x ^ num):\n            if res == goal:\n              return ans\n            if res < 0 or res > 1000 or res in seen:\n              continue\n            seen.add(res)\n            q.append(res)\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}