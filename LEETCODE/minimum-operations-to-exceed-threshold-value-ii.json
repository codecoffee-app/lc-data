{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3066",
            "title": "Minimum Operations to Exceed Threshold Value II",
            "titleSlug": "minimum-operations-to-exceed-threshold-value-ii",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, and an integer <code>k</code>.</p>\n\n<p>In one operation, you will:</p>\n\n<ul>\n\t<li>Take the two smallest integers <code>x</code> and <code>y</code> in <code>nums</code>.</li>\n\t<li>Remove <code>x</code> and <code>y</code> from <code>nums</code>.</li>\n\t<li>Add <code>min(x, y) * 2 + max(x, y)</code> anywhere in the array.</li>\n</ul>\n\n<p><strong>Note</strong> that you can only apply the described operation if <code>nums</code> contains at least two elements.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed so that all elements of the array are greater than or equal to</em> <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,11,10,1,3], k = 10\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In the first operation, we remove elements 1 and 2, then add 1 * 2 + 2 to nums. nums becomes equal to [4, 11, 10, 3].\nIn the second operation, we remove elements 3 and 4, then add 3 * 2 + 4 to nums. nums becomes equal to [10, 11, 10].\nAt this stage, all the elements of nums are greater than or equal to 10 so we can stop.\nIt can be shown that 2 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2,4,9], k = 20\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> After one operation, nums becomes equal to [2, 4, 9, 3].\nAfter two operations, nums becomes equal to [7, 4, 9].\nAfter three operations, nums becomes equal to [15, 9].\nAfter four operations, nums becomes equal to [33].\nAt this stage, all the elements of nums are greater than 20 so we can stop.\nIt can be shown that 4 is the minimum number of operations needed so that all elements of the array are greater than or equal to 20.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li>The input is generated such that an answer always exists. That is, there exists some sequence of operations after which all elements of the array are greater than or equal to <code>k</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 80,
            "dislikes": 6,
            "similarQuestions": "[{\"title\": \"Minimum Operations to Halve Array Sum\", \"titleSlug\": \"minimum-operations-to-halve-array-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"27K\", \"totalSubmission\": \"98.8K\", \"totalAcceptedRaw\": 27030, \"totalSubmissionRaw\": 98781, \"acRate\": \"27.4%\"}",
            "hints": [
                "Use priority queue to keep track of minimum elements.",
                "Remove the minimum two elements, perform the operation, and insert the resulting number into the priority queue."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` and an integer `k`, you can perform the following operation as long as `nums` contains at least two elements:\n\n1.  Find the two smallest integers, `x` and `y`, in `nums`.\n2.  Remove `x` and `y` from `nums`.\n3.  Add `min(x, y) * 2 + max(x, y)` back into `nums`.\n\nReturn the minimum number of operations required to make all elements in `nums` greater than or equal to `k`.",
                "constraints": [
                    "2 <= nums.length <= 2 * 10^5",
                    "1 <= nums[i] <= 10^9",
                    "1 <= k <= 10^9",
                    "An answer always exists."
                ],
                "testcases": [
                    {
                        "input": "nums = [2,11,10,1,3], k = 10",
                        "output": "2",
                        "explanation": "First, remove 1 and 2 and add (1 * 2 + 2 = 4) to nums: nums = [4, 11, 10, 3]. Next, remove 3 and 4 and add (3 * 2 + 4 = 10) to nums: nums = [10, 11, 10]. Now all elements are greater than or equal to 10."
                    },
                    {
                        "input": "nums = [1,1,2,4,9], k = 20",
                        "output": "4",
                        "explanation": "After one operation: nums = [2, 4, 9, 3]. After two operations: nums = [7, 4, 9]. After three operations: nums = [15, 9]. After four operations: nums = [33]. Now all elements are greater than or equal to 20."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-halve-array-sum",
                "title": "Minimum Operations to Halve Array Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use priority queue to keep track of minimum elements.",
            "Remove the minimum two elements, perform the operation, and insert the resulting number into the priority queue."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& nums, int k) {\n    int ans = 0;\n    priority_queue<long long, vector<long long>, greater<>> minHeap;\n\n    for (const int num : nums)\n      minHeap.push(num);\n\n    while (minHeap.size() > 1 && minHeap.top() < k) {\n      const int x = minHeap.top();\n      minHeap.pop();\n      const int y = minHeap.top();\n      minHeap.pop();\n      minHeap.push(min(x, y) * 2LL + max(x, y));\n      ++ans;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int[] nums, int k) {\n    int ans = 0;\n    Queue<Long> minHeap = new PriorityQueue<>();\n\n    for (final int num : nums)\n      minHeap.add((long) num);\n\n    while (minHeap.size() > 1 && minHeap.peek() < k) {\n      final long x = minHeap.poll();\n      final long y = minHeap.poll();\n      minHeap.add(Math.min(x, y) * 2 + Math.max(x, y));\n      ++ans;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums: List[int], k: int) -> int:\n    ans = 0\n    minHeap = nums.copy()\n    heapq.heapify(minHeap)\n\n    while len(minHeap) > 1 and minHeap[0] < k:\n      x = heapq.heappop(minHeap)\n      y = heapq.heappop(minHeap)\n      heapq.heappush(minHeap, min(x, y) * 2 + max(x, y))\n      ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}