{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2835",
            "title": "Minimum Operations to Form Subsequence With Target Sum",
            "titleSlug": "minimum-operations-to-form-subsequence-with-target-sum",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of <strong>non-negative</strong> powers of <code>2</code>, and an integer <code>target</code>.</p>\n\n<p>In one operation, you must apply the following changes to the array:</p>\n\n<ul>\n\t<li>Choose any element of the array <code>nums[i]</code> such that <code>nums[i] &gt; 1</code>.</li>\n\t<li>Remove <code>nums[i]</code> from the array.</li>\n\t<li>Add <strong>two</strong> occurrences of <code>nums[i] / 2</code> to the <strong>end</strong> of <code>nums</code>.</li>\n</ul>\n\n<p>Return the <em><strong>minimum number of operations</strong> you need to perform so that </em><code>nums</code><em> contains a <strong>subsequence</strong> whose elements sum to</em> <code>target</code>. If it is impossible to obtain such a subsequence, return <code>-1</code>.</p>\n\n<p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,8], target = 7\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In the first operation, we choose element nums[2]. The array becomes equal to nums = [1,2,4,4].\nAt this stage, nums contains the subsequence [1,2,4] which sums up to 7.\nIt can be shown that there is no shorter sequence of operations that results in a subsequnce that sums up to 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,32,1,2], target = 12\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In the first operation, we choose element nums[1]. The array becomes equal to nums = [1,1,2,16,16].\nIn the second operation, we choose element nums[3]. The array becomes equal to nums = [1,1,2,16,8,8]\nAt this stage, nums contains the subsequence [1,1,2,8] which sums up to 12.\nIt can be shown that there is no shorter sequence of operations that results in a subsequence that sums up to 12.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,32,1], target = 35\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It can be shown that no sequence of operations results in a subsequence that sums up to 35.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 2<sup>30</sup></code></li>\n\t<li><code>nums</code> consists only of non-negative powers of two.</li>\n\t<li><code>1 &lt;= target &lt; 2<sup>31</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 516,
            "dislikes": 126,
            "similarQuestions": "[{\"title\": \"Number of Subsequences That Satisfy the Given Sum Condition\", \"titleSlug\": \"number-of-subsequences-that-satisfy-the-given-sum-condition\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Closest Subsequence Sum\", \"titleSlug\": \"closest-subsequence-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.8K\", \"totalSubmission\": \"36.5K\", \"totalAcceptedRaw\": 11775, \"totalSubmissionRaw\": 36499, \"acRate\": \"32.3%\"}",
            "hints": [
                "<div class=\"_1l1MA\">if <code>target > sum(nums[i]) </code>, return <code>-1</code>. Otherwise, an answer exists</div>",
                "<div class=\"_1l1MA\">Solve the problem for each set bit of <code>target</code>, independently, from least significant to most significant bit. </div>",
                "<div class=\"_1l1MA\">For each set <code>bit</code> of <code>target</code> from least to most significant, let <code>X = sum(nums[i])</code> for <code>nums[i] <= 2^bit</code>.</div>",
                "<div class=\"_1l1MA\">\r\nif <code>X >= 2^bit</code>, repeatedly select the maximum <code>nums[i]</code> such that <code>nums[i]<=2^bit</code> that has not been selected yet, until the sum of selected elements equals <code>2^bit</code>. The selected <code>nums[i]</code> will be part of the subsequence whose elements sum to target, so those elements can not be selected again.\r\n</div>",
                "<div class=\"_1l1MA\">Otherwise, select the smallest <code>nums[i]</code> such that <code>nums[i] > 2^bit</code>, delete <code>nums[i]</code> and add two occurences of <code>nums[i]/2</code>. Without moving to the next <code>bit</code>, go back to the step in hint 3.</div>"
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` consisting of non-negative powers of 2, and an integer `target`, determine the minimum number of operations required to obtain a subsequence of `nums` that sums to `target`.  An operation involves choosing an element `nums[i]` greater than 1, removing it from `nums`, and adding two occurrences of `nums[i] / 2` to the end of `nums`.  If it's impossible to obtain such a subsequence, return -1.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "1 <= nums[i] <= 2<sup>30</sup>",
                    "`nums` consists only of non-negative powers of two.",
                    "1 <= target < 2<sup>31</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,8], target = 7",
                        "output": "1",
                        "explanation": "One operation is performed on the element 8. The array becomes [1, 2, 4, 4]. The subsequence [1, 2, 4] sums to 7."
                    },
                    {
                        "input": "nums = [1,32,1,2], target = 12",
                        "output": "2",
                        "explanation": "One possible sequence of operations: First, operate on 32, resulting in [1, 1, 2, 16, 16].  Then operate on the first 16, resulting in [1, 1, 2, 16, 8, 8].  The subsequence [1, 1, 2, 8] sums to 12."
                    },
                    {
                        "input": "nums = [1,32,1], target = 35",
                        "output": "-1",
                        "explanation": "It is impossible to obtain a subsequence that sums to 35 using the given operations."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
                "title": "Number of Subsequences That Satisfy the Given Sum Condition",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "closest-subsequence-sum",
                "title": "Closest Subsequence Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "<div class=\"_1l1MA\">if <code>target > sum(nums[i]) </code>, return <code>-1</code>. Otherwise, an answer exists</div>",
            "<div class=\"_1l1MA\">Solve the problem for each set bit of <code>target</code>, independently, from least significant to most significant bit. </div>",
            "<div class=\"_1l1MA\">For each set <code>bit</code> of <code>target</code> from least to most significant, let <code>X = sum(nums[i])</code> for <code>nums[i] <= 2^bit</code>.</div>",
            "<div class=\"_1l1MA\">\r\nif <code>X >= 2^bit</code>, repeatedly select the maximum <code>nums[i]</code> such that <code>nums[i]<=2^bit</code> that has not been selected yet, until the sum of selected elements equals <code>2^bit</code>. The selected <code>nums[i]</code> will be part of the subsequence whose elements sum to target, so those elements can not be selected again.\r\n</div>",
            "<div class=\"_1l1MA\">Otherwise, select the smallest <code>nums[i]</code> such that <code>nums[i] > 2^bit</code>, delete <code>nums[i]</code> and add two occurences of <code>nums[i]/2</code>. Without moving to the next <code>bit</code>, go back to the step in hint 3.</div>"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& nums, int target) {\n    constexpr int kNoMissingBit = 31;\n    constexpr int maxBit = 31;\n    int ans = 0;\n    int minMissingBit = kNoMissingBit;\n    // count[i] := number of occurrences of 2^i\n    vector<int> count(maxBit + 1);\n\n    for (const int num : nums)\n      ++count[static_cast<int>(log2(num))];\n\n    for (int bit = 0; bit < maxBit; ++bit) {\n      // Check if `bit` is in the target.\n      if (target >> bit & 1) {\n        // If there are available bits, use one bit.\n        if (count[bit] > 0)\n          --count[bit];\n        else\n          minMissingBit = min(minMissingBit, bit);\n      }\n      // If we previously missed a bit and there are available bits.\n      if (minMissingBit != kNoMissingBit && count[bit] > 0) {\n        --count[bit];\n        // Calculate the operations to break `bit` into `minMissingBit`.\n        ans += bit - minMissingBit;\n        minMissingBit = kNoMissingBit;\n      }\n      // Combining smaller numbers costs nothing.\n      count[bit + 1] += count[bit] / 2;\n    }\n\n    // Check if all target bits have been covered, otherwise return -1.\n    return minMissingBit == kNoMissingBit ? ans : -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public int minOperations(List<Integer> nums, int target) {\n    final int kNoMissingBit = 31;\n    final int maxBit = 31;\n    int ans = 0;\n    int minMissingBit = kNoMissingBit;\n    // count[i] := number of occurrences of 2^i\n    int[] count = new int[maxBit + 1];\n\n    for (final int num : nums)\n      ++count[(int) (Math.log(num) / Math.log(2))];\n\n    for (int bit = 0; bit < maxBit; ++bit) {\n      // Check if `bit` is in the target.\n      if ((target >> bit & 1) == 1) {\n        // If there are available bits, use one bit.\n        if (count[bit] > 0)\n          --count[bit];\n        else\n          minMissingBit = Math.min(minMissingBit, bit);\n      }\n      // If we previously missed a bit and there are available bits.\n      if (minMissingBit != kNoMissingBit && count[bit] > 0) {\n        --count[bit];\n        // Calculate the operations to break `bit` into `minMissingBit`.\n        ans += bit - minMissingBit;\n        minMissingBit = kNoMissingBit; // Set it to an invalid value.\n      }\n      // Combining smaller numbers costs nothing.\n      count[bit + 1] += count[bit] / 2;\n    }\n\n    // Check if all target bits have been covered, otherwise return -1.\n    return minMissingBit == kNoMissingBit ? ans : -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums: List[int], target: int) -> int:\n    kNoMissingBit = 31\n    maxBit = 31\n    ans = 0\n    minMissingBit = kNoMissingBit\n    # count[i] := number of occurrences of 2^i\n    count = collections.Counter(int(math.log2(num)) for num in nums)\n\n    for bit in range(maxBit):\n      # Check if `bit` is in the target.\n      if target >> bit & 1:\n        # If there are available bits, use one bit.\n        if count[bit] > 0:\n          count[bit] -= 1\n        else:\n          minMissingBit = min(minMissingBit, bit)\n      # If we previously missed a bit and there are available bits.\n      if minMissingBit != kNoMissingBit and count[bit] > 0:\n        count[bit] -= 1\n        # Calculate the operations to break `bit` into `minMissingBit`.\n        ans += bit - minMissingBit\n        minMissingBit = kNoMissingBit  # Set it to an invalid value.\n      # Combining smaller numbers costs nothing.\n      count[bit + 1] += count[bit] // 2\n\n    # Check if all target bits have been covered, otherwise return -1.\n    return ans if minMissingBit == maxBit else -1\n",
                "lang_text": "py"
            }
        }
    }
}