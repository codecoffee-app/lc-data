{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2208",
            "title": "Minimum Operations to Halve Array Sum",
            "titleSlug": "minimum-operations-to-halve-array-sum",
            "content": "<p>You are given an array <code>nums</code> of positive integers. In one operation, you can choose <strong>any</strong> number from <code>nums</code> and reduce it to <strong>exactly</strong> half the number. (Note that you may choose this reduced number in future operations.)</p>\n\n<p>Return<em> the <strong>minimum</strong> number of operations to reduce the sum of </em><code>nums</code><em> by <strong>at least</strong> half.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,19,8,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The initial sum of nums is equal to 5 + 19 + 8 + 1 = 33.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 19 and reduce it to 9.5.\nPick the number 9.5 and reduce it to 4.75.\nPick the number 8 and reduce it to 4.\nThe final array is [5, 4.75, 4, 1] with a total sum of 5 + 4.75 + 4 + 1 = 14.75. \nThe sum of nums has been reduced by 33 - 14.75 = 18.25, which is at least half of the initial sum, 18.25 &gt;= 33/2 = 16.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,8,20]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The initial sum of nums is equal to 3 + 8 + 20 = 31.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 20 and reduce it to 10.\nPick the number 10 and reduce it to 5.\nPick the number 3 and reduce it to 1.5.\nThe final array is [1.5, 8, 5] with a total sum of 1.5 + 8 + 5 = 14.5. \nThe sum of nums has been reduced by 31 - 14.5 = 16.5, which is at least half of the initial sum, 16.5 &gt;= 31/2 = 15.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 563,
            "dislikes": 27,
            "similarQuestions": "[{\"title\": \"Remove Stones to Minimize the Total\", \"titleSlug\": \"remove-stones-to-minimize-the-total\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"26K\", \"totalSubmission\": \"56.4K\", \"totalAcceptedRaw\": 25971, \"totalSubmissionRaw\": 56429, \"acRate\": \"46.0%\"}",
            "hints": [
                "It is always optimal to halve the largest element.",
                "What data structure allows for an efficient query of the maximum element?",
                "Use a heap or priority queue to maintain the current elements."
            ],
            "rephrased": {
                "body": "Given an array `nums` of positive integers, determine the minimum number of operations needed to reduce the sum of `nums` by at least half. In each operation, you can select any number from `nums` and reduce it to exactly half its value. You can choose the reduced number in future operations.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "[5,19,8,1]",
                        "output": "3",
                        "explanation": "The initial sum is 33. We need to reduce the sum by at least 16.5. One way to achieve this in 3 operations is:\n1. Reduce 19 to 9.5.\n2. Reduce 9.5 to 4.75.\n3. Reduce 8 to 4.\nThe sum is now 5 + 4.75 + 4 + 1 = 14.75. The reduction is 33 - 14.75 = 18.25, which is greater than or equal to 16.5."
                    },
                    {
                        "input": "[3,8,20]",
                        "output": "3",
                        "explanation": "The initial sum is 31. We need to reduce the sum by at least 15.5. One way to achieve this in 3 operations is:\n1. Reduce 20 to 10.\n2. Reduce 10 to 5.\n3. Reduce 3 to 1.5.\nThe sum is now 1.5 + 8 + 5 = 14.5. The reduction is 31 - 14.5 = 16.5, which is greater than or equal to 15.5."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "remove-stones-to-minimize-the-total",
                "title": "Remove Stones to Minimize the Total",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "It is always optimal to halve the largest element.",
            "What data structure allows for an efficient query of the maximum element?",
            "Use a heap or priority queue to maintain the current elements."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int halveArray(vector<int>& nums) {\n    const double halfSum = accumulate(nums.begin(), nums.end(), 0.) / 2;\n    int ans = 0;\n    double runningSum = 0;\n    priority_queue<double> maxHeap{nums.begin(), nums.end()};\n\n    while (runningSum < halfSum) {\n      const double maxValue = maxHeap.top() / 2;\n      runningSum += maxValue, maxHeap.pop();\n      maxHeap.push(maxValue);\n      ++ans;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int halveArray(int[] nums) {\n    final double halfSum = Arrays.stream(nums).asDoubleStream().sum() / 2;\n    int ans = 0;\n    double runningSum = 0;\n    Queue<Double> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n    for (final double num : nums)\n      maxHeap.offer(num);\n\n    while (runningSum < halfSum) {\n      final double maxValue = maxHeap.poll() / 2;\n      runningSum += maxValue;\n      maxHeap.offer(maxValue);\n      ++ans;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def halveArray(self, nums: List[int]) -> int:\n    halfSum = sum(nums) / 2\n    ans = 0\n    runningSum = 0.0\n    maxHeap = [-num for num in nums]\n\n    heapq.heapify(maxHeap)\n\n    while runningSum < halfSum:\n      maxValue = -heapq.heappop(maxHeap) / 2\n      runningSum += maxValue\n      heapq.heappush(maxHeap, -maxValue)\n      ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}