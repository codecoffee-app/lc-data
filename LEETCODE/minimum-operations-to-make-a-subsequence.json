{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1713",
            "title": "Minimum Operations to Make a Subsequence",
            "titleSlug": "minimum-operations-to-make-a-subsequence",
            "content": "<p>You are given an array <code>target</code> that consists of <strong>distinct</strong> integers and another integer array <code>arr</code> that <strong>can</strong> have duplicates.</p>\n\n<p>In one operation, you can insert any integer at any position in <code>arr</code>. For example, if <code>arr = [1,4,1,2]</code>, you can add <code>3</code> in the middle and make it <code>[1,4,<u>3</u>,1,2]</code>. Note that you can insert the integer at the very beginning or end of the array.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed to make </em><code>target</code><em> a <strong>subsequence</strong> of </em><code>arr</code><em>.</em></p>\n\n<p>A <strong>subsequence</strong> of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements&#39; relative order. For example, <code>[2,7,4]</code> is a subsequence of <code>[4,<u>2</u>,3,<u>7</u>,2,1,<u>4</u>]</code> (the underlined elements), while <code>[2,4,2]</code> is not.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = [5,1,3], <code>arr</code> = [9,4,2,3,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You can add 5 and 1 in such a way that makes <code>arr</code> = [<u>5</u>,9,4,<u>1</u>,2,3,4], then target will be a subsequence of <code>arr</code>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = [6,4,8,1,3,2], <code>arr</code> = [4,7,6,2,3,8,6,1]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target.length, arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= target[i], arr[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>target</code> contains no duplicates.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 655,
            "dislikes": 10,
            "similarQuestions": "[{\"title\": \"Append Characters to String to Make Subsequence\", \"titleSlug\": \"append-characters-to-string-to-make-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.6K\", \"totalSubmission\": \"21.9K\", \"totalAcceptedRaw\": 10597, \"totalSubmissionRaw\": 21937, \"acRate\": \"48.3%\"}",
            "hints": [
                "The problem can be reduced to computing Longest Common Subsequence between both arrays.",
                "Since one of the arrays has distinct elements, we can consider that these elements describe an arrangement of numbers, and we can replace each element in the other array with the index it appeared at in the first array.",
                "Then the problem is converted to finding Longest Increasing Subsequence in the second array, which can be done in O(n log n)."
            ],
            "rephrased": {
                "body": "Given a target array of distinct integers and an array `arr` that may contain duplicates, determine the minimum number of insertions needed in `arr` to make `target` a subsequence of `arr`.  In a single operation, you can insert any integer at any position in `arr`.",
                "constraints": [
                    "1 <= target.length, arr.length <= 10^5",
                    "1 <= target[i], arr[i] <= 10^9",
                    "target contains no duplicates."
                ],
                "testcases": [
                    {
                        "input": "target = [5,1,3], arr = [9,4,2,3,4]",
                        "output": "2",
                        "explanation": "We need to insert 5 and 1 into arr to make target a subsequence.  For example, arr can become [5, 9, 4, 1, 2, 3, 4]. Then [5, 1, 3] is a subsequence of the modified arr."
                    },
                    {
                        "input": "target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "append-characters-to-string-to-make-subsequence",
                "title": "Append Characters to String to Make Subsequence",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The problem can be reduced to computing Longest Common Subsequence between both arrays.",
            "Since one of the arrays has distinct elements, we can consider that these elements describe an arrangement of numbers, and we can replace each element in the other array with the index it appeared at in the first array.",
            "Then the problem is converted to finding Longest Increasing Subsequence in the second array, which can be done in O(n log n)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& target, vector<int>& arr) {\n    vector<int> indices;\n    unordered_map<int, int> numToIndex;\n\n    for (int i = 0; i < target.size(); ++i)\n      numToIndex[target[i]] = i;\n\n    for (const int a : arr)\n      if (const auto it = numToIndex.find(a); it != numToIndex.end())\n        indices.push_back(it->second);\n\n    return target.size() - lengthOfLIS(indices);\n  }\n\n private:\n  // Same as 300. Longest Increasing Subsequence\n  int lengthOfLIS(vector<int>& nums) {\n    // tail[i] := the min tail of all increasing subseqs having length i + 1\n    // It's easy to see that tail must be an increasing array.\n    vector<int> tail;\n\n    for (const int num : nums)\n      if (tail.empty() || num > tail.back())\n        tail.push_back(num);\n      else\n        tail[firstGreaterEqual(tail, num)] = num;\n\n    return tail.size();\n  }\n\n private:\n  int firstGreaterEqual(const vector<int>& A, int target) {\n    return lower_bound(A.begin(), A.end(), target) - A.begin();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int[] target, int[] arr) {\n    List<Integer> indices = new ArrayList<>();\n    Map<Integer, Integer> numToIndex = new HashMap<>();\n\n    for (int i = 0; i < target.length; ++i)\n      numToIndex.put(target[i], i);\n\n    for (final int a : arr)\n      if (numToIndex.containsKey(a))\n        indices.add(numToIndex.get(a));\n\n    return target.length - lengthOfLIS(indices);\n  }\n\n  // Same as 300. Longest Increasing Subsequence\n  private int lengthOfLIS(List<Integer> nums) {\n    // tail[i] := the min tail of all increasing subseqs with length i + 1\n    // It's easy to see that tail must be an increasing array.\n    List<Integer> tail = new ArrayList<>();\n\n    for (final int num : nums)\n      if (tail.isEmpty() || num > tail.get(tail.size() - 1))\n        tail.add(num);\n      else\n        tail.set(firstGreaterEqual(tail, num), num);\n\n    return tail.size();\n  }\n\n  private int firstGreaterEqual(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, target: List[int], arr: List[int]) -> int:\n    indices = []\n    numToIndex = {num: i for i, num in enumerate(target)}\n\n    for a in arr:\n      if a in numToIndex:\n        indices.append(numToIndex[a])\n\n    return len(target) - self._lengthOfLIS(indices)\n\n  # Same as 300. Longest Increasing Subsequence\n  def _lengthOfLIS(self, nums: List[int]) -> int:\n    # tail[i] := the min tail of all increasing subseqs having length i + 1\n    # It's easy to see that tail must be an increasing array.\n    tail = []\n\n    for num in nums:\n      if not tail or num > tail[-1]:\n        tail.append(num)\n      else:\n        tail[bisect.bisect_left(tail, num)] = num\n\n    return len(tail)\n",
                "lang_text": "py"
            }
        }
    }
}