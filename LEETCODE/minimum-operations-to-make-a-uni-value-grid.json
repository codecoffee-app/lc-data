{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2033",
            "title": "Minimum Operations to Make a Uni-Value Grid",
            "titleSlug": "minimum-operations-to-make-a-uni-value-grid",
            "content": "<p>You are given a 2D integer <code>grid</code> of size <code>m x n</code> and an integer <code>x</code>. In one operation, you can <strong>add</strong> <code>x</code> to or <strong>subtract</strong> <code>x</code> from any element in the <code>grid</code>.</p>\n\n<p>A <strong>uni-value grid</strong> is a grid where all the elements of it are equal.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations to make the grid <strong>uni-value</strong></em>. If it is not possible, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/21/gridtxt.png\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> grid = [[2,4],[6,8]], x = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We can make every element equal to 4 by doing the following: \n- Add x to 2 once.\n- Subtract x from 6 once.\n- Subtract x from 8 twice.\nA total of 4 operations were used.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/21/gridtxt-1.png\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,5],[2,3]], x = 1\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> We can make every element equal to 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/21/gridtxt-2.png\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2],[3,4]], x = 2\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is impossible to make every element equal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= x, grid[i][j] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 527,
            "dislikes": 40,
            "similarQuestions": "[{\"title\": \"Minimum Moves to Equal Array Elements II\", \"titleSlug\": \"minimum-moves-to-equal-array-elements-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.4K\", \"totalSubmission\": \"40.5K\", \"totalAcceptedRaw\": 21409, \"totalSubmissionRaw\": 40488, \"acRate\": \"52.9%\"}",
            "hints": [
                "Is it possible to make two integers a and b equal if they have different remainders dividing by x?",
                "If it is possible, which number should you select to minimize the number of operations?",
                "What if the elements are sorted?"
            ],
            "rephrased": {
                "body": "Given a 2D integer grid of size m x n and an integer x, you can add or subtract x from any element in the grid in one operation. The goal is to find the minimum number of operations to make the grid a uni-value grid, where all elements are equal. Return the minimum number of operations, or -1 if it's not possible.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 10^5",
                    "1 <= m * n <= 10^5",
                    "1 <= x, grid[i][j] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "grid = [[2,4],[6,8]], x = 2",
                        "output": "4",
                        "explanation": "We can make every element equal to 4 by performing the following operations:\n- Add x to 2 once (2 + 2 = 4).\n- Subtract x from 6 once (6 - 2 = 4).\n- Subtract x from 8 twice (8 - 2 - 2 = 4).\nA total of 4 operations are used."
                    },
                    {
                        "input": "grid = [[1,5],[2,3]], x = 1",
                        "output": "5",
                        "explanation": "We can make every element equal to 3 by performing the following operations:\n- Add x to 1 twice (1 + 1 + 1 = 3).\n- Subtract x from 5 twice (5 - 1 - 1 = 3).\n- Subtract x from 2 once (2 - (-1) = 3).\nTotal of 5 operations"
                    },
                    {
                        "input": "grid = [[1,2],[3,4]], x = 2",
                        "output": "-1",
                        "explanation": "It is impossible to make every element equal using only addition or subtraction of multiples of 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-moves-to-equal-array-elements-ii",
                "title": "Minimum Moves to Equal Array Elements II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Is it possible to make two integers a and b equal if they have different remainders dividing by x?",
            "If it is possible, which number should you select to minimize the number of operations?",
            "What if the elements are sorted?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<vector<int>>& grid, int x) {\n    vector<int> A;\n    for (const vector<int>& row : grid)\n      A.insert(A.end(), row.begin(), row.end());\n    if (any_of(A.begin(), A.end(), [&](int a) { return (a - A[0]) % x; }))\n      return -1;\n\n    int ans = 0;\n\n    nth_element(A.begin(), A.begin() + A.size() / 2, A.end());\n\n    for (const int a : A)\n      ans += abs(a - A[A.size() / 2]) / x;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int[][] grid, int x) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n\n    int[] A = new int[m * n];\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        A[i * n + j] = grid[i][j];\n    if (Arrays.stream(A).anyMatch(a -> (a - A[0]) % x != 0))\n      return -1;\n\n    int ans = 0;\n\n    Arrays.sort(A);\n\n    for (final int a : A)\n      ans += Math.abs(a - A[A.length / 2]) / x;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, grid: List[List[int]], x: int) -> int:\n    A = sorted([a for row in grid for a in row])\n    if any((a - A[0]) % x for a in A):\n      return -1\n\n    ans = 0\n\n    for a in A:\n      ans += abs(a - A[len(A) // 2]) // x\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}