{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2602",
            "title": "Minimum Operations to Make All Array Elements Equal",
            "titleSlug": "minimum-operations-to-make-all-array-elements-equal",
            "content": "<p>You are given an array <code>nums</code> consisting of positive integers.</p>\n\n<p>You are also given an integer array <code>queries</code> of size <code>m</code>. For the <code>i<sup>th</sup></code> query, you want to make all of the elements of <code>nums</code> equal to<code> queries[i]</code>. You can perform the following operation on the array <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li><strong>Increase</strong> or <strong>decrease</strong> an element of the array by <code>1</code>.</li>\n</ul>\n\n<p>Return <em>an array </em><code>answer</code><em> of size </em><code>m</code><em> where </em><code>answer[i]</code><em> is the <strong>minimum</strong> number of operations to make all elements of </em><code>nums</code><em> equal to </em><code>queries[i]</code>.</p>\n\n<p><strong>Note</strong> that after each query the array is reset to its original state.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,6,8], queries = [1,5]\n<strong>Output:</strong> [14,10]\n<strong>Explanation:</strong> For the first query we can do the following operations:\n- Decrease nums[0] 2 times, so that nums = [1,1,6,8].\n- Decrease nums[2] 5 times, so that nums = [1,1,1,8].\n- Decrease nums[3] 7 times, so that nums = [1,1,1,1].\nSo the total number of operations for the first query is 2 + 5 + 7 = 14.\nFor the second query we can do the following operations:\n- Increase nums[0] 2 times, so that nums = [5,1,6,8].\n- Increase nums[1] 4 times, so that nums = [5,5,6,8].\n- Decrease nums[2] 1 time, so that nums = [5,5,5,8].\n- Decrease nums[3] 3 times, so that nums = [5,5,5,5].\nSo the total number of operations for the second query is 2 + 4 + 1 + 3 = 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,9,6,3], queries = [10]\n<strong>Output:</strong> [20]\n<strong>Explanation:</strong> We can increase each value in the array to 10. The total number of operations will be 8 + 1 + 4 + 7 = 20.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>m == queries.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], queries[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 634,
            "dislikes": 16,
            "similarQuestions": "[{\"title\": \"Minimum Moves to Equal Array Elements II\", \"titleSlug\": \"minimum-moves-to-equal-array-elements-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Make Array Equal\", \"titleSlug\": \"minimum-cost-to-make-array-equal\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Sum of Distances\", \"titleSlug\": \"sum-of-distances\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.1K\", \"totalSubmission\": \"43.5K\", \"totalAcceptedRaw\": 15114, \"totalSubmissionRaw\": 43524, \"acRate\": \"34.7%\"}",
            "hints": [
                "For each query, you should decrease all elements greater than queries[i] and increase all elements less than queries[i].",
                "The answer is the sum of absolute differences between queries[i] and every element of the array. How do you calculate that optimally?"
            ],
            "rephrased": {
                "body": "Given an array `nums` of positive integers and an integer array `queries`, for each query `queries[i]`, determine the minimum number of operations required to make all elements of `nums` equal to `queries[i]`.  You can increase or decrease any element of `nums` by 1 in a single operation. After each query, the array `nums` is reset to its original state.",
                "constraints": [
                    "n == nums.length",
                    "m == queries.length",
                    "1 <= n, m <= 10^5",
                    "1 <= nums[i], queries[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "{nums: [3,1,6,8], queries: [1,5]}",
                        "output": "[14,10]",
                        "explanation": "For the first query (1), the minimum operations are achieved by decreasing 3 to 1 (2 operations), decreasing 6 to 1 (5 operations), and decreasing 8 to 1 (7 operations), totaling 14 operations. For the second query (5), the minimum operations are achieved by decreasing 6 to 5 (1 operation), decreasing 8 to 5 (3 operations), increasing 1 to 5 (4 operations), and increasing 3 to 5 (2 operations), totaling 10 operations."
                    },
                    {
                        "input": "{nums: [2,9,6,3], queries: [10]}",
                        "output": "[20]",
                        "explanation": "To make all elements equal to 10, we increase 2 by 8, 9 by 1, 6 by 4, and 3 by 7. The total operations are 8 + 1 + 4 + 7 = 20."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-moves-to-equal-array-elements-ii",
                "title": "Minimum Moves to Equal Array Elements II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-make-array-equal",
                "title": "Minimum Cost to Make Array Equal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "sum-of-distances",
                "title": "Sum of Distances",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each query, you should decrease all elements greater than queries[i] and increase all elements less than queries[i].",
            "The answer is the sum of absolute differences between queries[i] and every element of the array. How do you calculate that optimally?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<long long> minOperations(vector<int>& nums, vector<int>& queries) {\n    const int n = nums.size();\n    vector<long long> ans;\n    vector<long long> prefix{0};\n\n    std::ranges::sort(nums);\n\n    for (int i = 0; i < n; ++i)\n      prefix.push_back(prefix.back() + nums[i]);\n\n    for (const long long query : queries) {\n      const int i = upper_bound(nums.begin(), nums.end(), query) - nums.begin();\n      // Since nums[0:i] <= query, nums[i:] > query, we should\n      // - increase each num in nums[0:i] to `query` and\n      // - decrease each num in nums[i:] to `query`.\n      const long long inc = query * i - prefix[i];\n      const long long dec = prefix[n] - prefix[i] - query * (n - i);\n      ans.push_back(inc + dec);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Long> minOperations(int[] nums, int[] queries) {\n    final int n = nums.length;\n    List<Long> ans = new ArrayList<>();\n    long[] prefix = new long[n + 1];\n\n    Arrays.sort(nums);\n\n    for (int i = 0; i < n; ++i)\n      prefix[i + 1] = prefix[i] + nums[i];\n\n    for (final int query : queries) {\n      int i = Arrays.binarySearch(nums, query);\n      if (i < 0)\n        i = -i - 1;\n\n      // Since nums[0:i] <= query, nums[i:] > query, we should\n      // - increase each num in nums[0:i] to `query` and\n      // - decrease each num in nums[i:] to `query`.\n      final long inc = (long) query * i - prefix[i];\n      final long dec = prefix[n] - prefix[i] - (long) query * (n - i);\n      ans.add(inc + dec);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums: List[int], queries: List[int]) -> List[int]:\n    n = len(nums)\n    nums.sort()\n    prefix = [0] + list(itertools.accumulate(nums))\n    splits = [(query, bisect.bisect_right(nums, query)) for query in queries]\n    return [(query * i - prefix[i]) +\n            (prefix[-1] - prefix[i] - query * (n - i))\n            for query, i in splits]\n",
                "lang_text": "py"
            }
        }
    }
}