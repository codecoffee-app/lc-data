{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2541",
            "title": "Minimum Operations to Make Array Equal II",
            "titleSlug": "minimum-operations-to-make-array-equal-ii",
            "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> of equal length <code>n</code> and an integer <code>k</code>. You can perform the following operation on <code>nums1</code>:</p>\n\n<ul>\n\t<li>Choose two indexes <code>i</code> and <code>j</code> and increment <code>nums1[i]</code> by <code>k</code> and decrement <code>nums1[j]</code> by <code>k</code>. In other words, <code>nums1[i] = nums1[i] + k</code> and <code>nums1[j] = nums1[j] - k</code>.</li>\n</ul>\n\n<p><code>nums1</code> is said to be <strong>equal</strong> to <code>nums2</code> if for all indices <code>i</code> such that <code>0 &lt;= i &lt; n</code>, <code>nums1[i] == nums2[i]</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations required to make </em><code>nums1</code><em> equal to </em><code>nums2</code>. If it is impossible to make them equal, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In 2 operations, we can transform nums1 to nums2.\n1<sup>st</sup> operation: i = 2, j = 0. After applying the operation, nums1 = [1,3,4,4].\n2<sup>nd</sup> operation: i = 2, j = 3. After applying the operation, nums1 = [1,3,7,1].\nOne can prove that it is impossible to make arrays equal in fewer operations.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It can be proved that it is impossible to make the two arrays equal.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 387,
            "dislikes": 24,
            "similarQuestions": "[{\"title\": \"Minimum Operations to Make Array Equal\", \"titleSlug\": \"minimum-operations-to-make-array-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Operations to Make Arrays Similar\", \"titleSlug\": \"minimum-number-of-operations-to-make-arrays-similar\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.2K\", \"totalSubmission\": \"65.1K\", \"totalAcceptedRaw\": 20232, \"totalSubmissionRaw\": 65074, \"acRate\": \"31.1%\"}",
            "hints": [
                "What are the cases for which we cannot make nums1 == nums2?",
                "For minimum moves, if nums1[i] < nums2[i], then we should never decrement nums1[i]. \r\nIf nums1[i] > nums2[i], then we should never increment nums1[i]."
            ],
            "rephrased": {
                "body": "Given two integer arrays `nums1` and `nums2` of equal length `n`, and an integer `k`. You can perform the following operation on `nums1`:\n\nChoose two indices `i` and `j` and increment `nums1[i]` by `k` and decrement `nums1[j]` by `k`.  That is, `nums1[i] = nums1[i] + k` and `nums1[j] = nums1[j] - k`.\n\nThe goal is to make `nums1` equal to `nums2`.  Two arrays are considered equal if `nums1[i] == nums2[i]` for all `i` from 0 to `n-1`.\n\nReturn the minimum number of operations required to make `nums1` equal to `nums2`. If it is impossible to make them equal, return `-1`.",
                "constraints": [
                    "`n == nums1.length == nums2.length`",
                    "`2 <= n <= 10^5`",
                    "`0 <= nums1[i], nums2[j] <= 10^9`",
                    "`0 <= k <= 10^5`"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3",
                        "output": "2",
                        "explanation": "In the first operation, increment nums1[2] by 3 and decrement nums1[0] by 3, resulting in nums1 = [1, 3, 4, 4].  In the second operation, increment nums1[2] by 3 and decrement nums1[3] by 3, resulting in nums1 = [1, 3, 7, 1].  It's impossible to make the arrays equal in fewer operations."
                    },
                    {
                        "input": "nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1",
                        "output": "-1",
                        "explanation": "It is impossible to make the two arrays equal using the given operation."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-make-array-equal",
                "title": "Minimum Operations to Make Array Equal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-operations-to-make-arrays-similar",
                "title": "Minimum Number of Operations to Make Arrays Similar",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What are the cases for which we cannot make nums1 == nums2?",
            "For minimum moves, if nums1[i] < nums2[i], then we should never decrement nums1[i]. \r\nIf nums1[i] > nums2[i], then we should never increment nums1[i]."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minOperations(vector<int>& nums1, vector<int>& nums2, int k) {\n    if (k == 0)\n      return nums1 == nums2 ? 0 : -1;\n\n    long long ans = 0;\n    long long opsDiff = 0;  // # of increments - # of decrements\n\n    for (int i = 0; i < nums1.size(); ++i) {\n      const int diff = nums1[i] - nums2[i];\n      if (diff == 0)\n        continue;\n      if (diff % k != 0)\n        return -1;\n      const int ops = diff / k;\n      opsDiff += ops;\n      ans += abs(ops);\n    }\n\n    return opsDiff == 0 ? ans / 2 : -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minOperations(int[] nums1, int[] nums2, int k) {\n    if (k == 0)\n      return Arrays.equals(nums1, nums2) ? 0 : -1;\n\n    long ans = 0;\n    long opsDiff = 0; // # of increments - # of decrements\n\n    for (int i = 0; i < nums1.length; ++i) {\n      final int diff = nums1[i] - nums2[i];\n      if (diff == 0)\n        continue;\n      if (diff % k != 0)\n        return -1;\n      final int ops = diff / k;\n      opsDiff += ops;\n      ans += Math.abs(ops);\n    }\n\n    return opsDiff == 0 ? ans / 2 : -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums1: List[int], nums2: List[int], k: int) -> int:\n    if k == 0:\n      return 0 if nums1 == nums2 else -1\n\n    ans = 0\n    opsDiff = 0  # number of increments - number of decrements\n\n    for num1, num2 in zip(nums1, nums2):\n      diff = num1 - num2\n      if diff == 0:\n        continue\n      if diff % k != 0:\n        return -1\n      ops = diff // k\n      opsDiff += ops\n      ans += abs(ops)\n\n    return ans // 2 if opsDiff == 0 else -1\n",
                "lang_text": "py"
            }
        }
    }
}