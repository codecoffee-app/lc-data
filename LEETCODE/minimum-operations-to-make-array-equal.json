{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1551",
            "title": "Minimum Operations to Make Array Equal",
            "titleSlug": "minimum-operations-to-make-array-equal",
            "content": "<p>You have an array <code>arr</code> of length <code>n</code> where <code>arr[i] = (2 * i) + 1</code> for all valid values of <code>i</code> (i.e.,&nbsp;<code>0 &lt;= i &lt; n</code>).</p>\n\n<p>In one operation, you can select two indices <code>x</code> and <code>y</code> where <code>0 &lt;= x, y &lt; n</code> and subtract <code>1</code> from <code>arr[x]</code> and add <code>1</code> to <code>arr[y]</code> (i.e., perform <code>arr[x] -=1 </code>and <code>arr[y] += 1</code>). The goal is to make all the elements of the array <strong>equal</strong>. It is <strong>guaranteed</strong> that all the elements of the array can be made equal using some operations.</p>\n\n<p>Given an integer <code>n</code>, the length of the array, return <em>the minimum number of operations</em> needed to make all the elements of arr equal.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1398,
            "dislikes": 173,
            "similarQuestions": "[{\"title\": \"Minimum Number of Operations to Make Arrays Similar\", \"titleSlug\": \"minimum-number-of-operations-to-make-arrays-similar\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make Array Equal II\", \"titleSlug\": \"minimum-operations-to-make-array-equal-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                }
            ],
            "stats": "{\"totalAccepted\": \"91.7K\", \"totalSubmission\": \"111.9K\", \"totalAcceptedRaw\": 91747, \"totalSubmissionRaw\": 111858, \"acRate\": \"82.0%\"}",
            "hints": [
                "Build the array arr using the given formula, define target = sum(arr) / n",
                "What is the number of operations needed to convert arr so that all elements equal target ?"
            ],
            "rephrased": {
                "body": "You are given an array `arr` of length `n`, where `arr[i] = (2 * i) + 1` for `0 <= i < n`. In a single operation, you can select two indices `x` and `y` (`0 <= x, y < n`) and decrement `arr[x]` by 1 while incrementing `arr[y]` by 1.  Your goal is to determine the minimum number of operations required to make all elements of the array equal. It's guaranteed that a solution exists.",
                "constraints": [
                    "1 <= n <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "n = 3",
                        "output": "2",
                        "explanation": "The initial array is arr = [1, 3, 5].\n1. Choose x = 2 and y = 0: arr becomes [2, 3, 4].\n2. Choose x = 2 and y = 0: arr becomes [3, 3, 3].\nTherefore, the minimum number of operations is 2."
                    },
                    {
                        "input": "n = 6",
                        "output": "9",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-operations-to-make-arrays-similar",
                "title": "Minimum Number of Operations to Make Arrays Similar",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-make-array-equal-ii",
                "title": "Minimum Operations to Make Array Equal II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Build the array arr using the given formula, define target = sum(arr) / n",
            "What is the number of operations needed to convert arr so that all elements equal target ?"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(int n) {\n    //     median := median of arr\n    //   diffs[i] := median - arr[i] where i <= i <= n / 2\n    //        ans := sum(diffs)\n    // E.g.\n    // n = 5, arr = [1, 3, 5, 7, 9], diffs = [4, 2]\n    //        ans = (4 + 2) * 2 / 2 = 6\n    // n = 6, arr = [1, 3, 5, 7, 9, 11], diffs = [5, 3, 1]\n    //        ans = (5 + 1) * 3 / 2 = 9\n    const int halfSize = n / 2;\n    const int median = (arr(n) + arr(1)) / 2;\n    const int firstDiff = median - arr(1);\n    const int lastDiff = median - arr(halfSize);\n    return (firstDiff + lastDiff) * halfSize / 2;\n  }\n\n private:\n  // Return i-th element of arr, where 1 <= i <= n.\n  int arr(int i) {\n    return (i - 1) * 2 + 1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int n) {\n    //     median := median of arr\n    //   diffs[i] := median - arr[i] where i <= i <= n / 2\n    //        ans := sum(diffs)\n    // E.g.\n    // n = 5, arr = [1, 3, 5, 7, 9], diffs = [4, 2]\n    //        ans = (4 + 2) * 2 / 2 = 6\n    // n = 6, arr = [1, 3, 5, 7, 9, 11], diffs = [5, 3, 1]\n    //        ans = (5 + 1) * 3 / 2 = 9\n    final int halfSize = n / 2;\n    final int median = (arr(n) + arr(1)) / 2;\n    final int firstDiff = median - arr(1);\n    final int lastDiff = median - arr(halfSize);\n    return (firstDiff + lastDiff) * halfSize / 2;\n  }\n\n  // Return i-th element of arr, where 1 <= i <= n.\n  private int arr(int i) {\n    return (i - 1) * 2 + 1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, n: int) -> int:\n    # Return i-th element of arr, where 1 <= i <= n.\n    def arr(self, i: int) -> int:\n      return (i - 1) * 2 + 1\n\n    #     median := median of arr\n    #   diffs[i] := median - arr[i] where i <= i <= n // 2\n    #        ans := sum(diffs)\n    # E.g.\n    # n = 5, arr = [1, 3, 5, 7, 9], diffs = [4, 2]\n    #        ans = (4 + 2) * 2 // 2 = 6\n    # n = 6, arr = [1, 3, 5, 7, 9, 11], diffs = [5, 3, 1]\n    #        ans = (5 + 1) * 3 // 2 = 9\n    halfSize = n // 2\n    median = (arr(n) + arr(1)) // 2\n    firstDiff = median - arr(1)\n    lastDiff = median - arr(halfSize)\n    return (firstDiff + lastDiff) * halfSize // 2\n",
                "lang_text": "py"
            }
        }
    }
}