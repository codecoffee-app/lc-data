{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1827",
            "title": "Minimum Operations to Make the Array Increasing",
            "titleSlug": "minimum-operations-to-make-the-array-increasing",
            "content": "<p>You are given an integer array <code>nums</code> (<strong>0-indexed</strong>). In one operation, you can choose an element of the array and increment it by <code>1</code>.</p>\r\n\r\n<ul>\r\n\t<li>For example, if <code>nums = [1,2,3]</code>, you can choose to increment <code>nums[1]</code> to make <code>nums = [1,<u><b>3</b></u>,3]</code>.</li>\r\n</ul>\r\n\r\n<p>Return <em>the <strong>minimum</strong> number of operations needed to make</em> <code>nums</code> <em><strong>strictly</strong> <strong>increasing</strong>.</em></p>\r\n\r\n<p>An array <code>nums</code> is <strong>strictly increasing</strong> if <code>nums[i] &lt; nums[i+1]</code> for all <code>0 &lt;= i &lt; nums.length - 1</code>. An array of length <code>1</code> is trivially strictly increasing.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1,1,1]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> You can do the following operations:\r\n1) Increment nums[2], so nums becomes [1,1,<u><strong>2</strong></u>].\r\n2) Increment nums[1], so nums becomes [1,<u><strong>2</strong></u>,2].\r\n3) Increment nums[2], so nums becomes [1,2,<u><strong>3</strong></u>].\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1,5,2,4,1]\r\n<strong>Output:</strong> 14\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [8]\r\n<strong>Output:</strong> 0\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\r\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1167,
            "dislikes": 55,
            "similarQuestions": "[{\"title\": \"Make Array Non-decreasing or Non-increasing\", \"titleSlug\": \"make-array-non-decreasing-or-non-increasing\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Product After K Increments\", \"titleSlug\": \"maximum-product-after-k-increments\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Replacements to Sort the Array\", \"titleSlug\": \"minimum-replacements-to-sort-the-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"83.8K\", \"totalSubmission\": \"106.2K\", \"totalAcceptedRaw\": 83815, \"totalSubmissionRaw\": 106176, \"acRate\": \"78.9%\"}",
            "hints": [
                "nums[i+1] must be at least equal to nums[i] + 1.",
                "Think greedily. You don't have to increase nums[i+1] beyond nums[i]+1.",
                "Iterate on i and set nums[i] = max(nums[i-1]+1, nums[i]) ."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` (0-indexed), determine the minimum number of operations needed to make `nums` strictly increasing. In one operation, you can choose an element of the array and increment it by 1. A strictly increasing array `nums` satisfies the condition `nums[i] < nums[i+1]` for all `0 <= i < nums.length - 1`. An array of length 1 is trivially strictly increasing.",
                "constraints": [
                    "1 <= nums.length <= 5000",
                    "1 <= nums[i] <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "[1,1,1]",
                        "output": "3",
                        "explanation": "To make the array strictly increasing, we need to perform the following operations:\n1) Increment nums[2] to 2: [1, 1, 2]\n2) Increment nums[1] to 2: [1, 2, 2]\n3) Increment nums[2] to 3: [1, 2, 3]"
                    },
                    {
                        "input": "[1,5,2,4,1]",
                        "output": "14",
                        "explanation": null
                    },
                    {
                        "input": "[8]",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "make-array-non-decreasing-or-non-increasing",
                "title": "Make Array Non-decreasing or Non-increasing",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-product-after-k-increments",
                "title": "Maximum Product After K Increments",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-replacements-to-sort-the-array",
                "title": "Minimum Replacements to Sort the Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "nums[i+1] must be at least equal to nums[i] + 1.",
            "Think greedily. You don't have to increase nums[i+1] beyond nums[i]+1.",
            "Iterate on i and set nums[i] = max(nums[i-1]+1, nums[i]) ."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& nums) {\n    int ans = 0;\n    int last = 0;\n\n    for (const int num : nums) {\n      ans += max(0, last - num + 1);\n      last = max(num, last + 1);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int[] nums) {\n    int ans = 0;\n    int last = 0;\n\n    for (final int num : nums) {\n      ans += Math.max(0, last - num + 1);\n      last = Math.max(num, last + 1);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums: List[int]) -> int:\n    ans = 0\n    last = 0\n\n    for num in nums:\n      ans += max(0, last - num + 1)\n      last = max(num, last + 1)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}