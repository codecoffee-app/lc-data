{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2934",
            "title": "Minimum Operations to Maximize Last Elements in Arrays",
            "titleSlug": "minimum-operations-to-maximize-last-elements-in-arrays",
            "content": "<p>You are given two <strong>0-indexed</strong> integer arrays, <code>nums1</code> and <code>nums2</code>, both having length <code>n</code>.</p>\n\n<p>You are allowed to perform a series of <strong>operations</strong> (<strong>possibly none</strong>).</p>\n\n<p>In an operation, you select an index <code>i</code> in the range <code>[0, n - 1]</code> and <strong>swap</strong> the values of <code>nums1[i]</code> and <code>nums2[i]</code>.</p>\n\n<p>Your task is to find the <strong>minimum</strong> number of operations required to satisfy the following conditions:</p>\n\n<ul>\n\t<li><code>nums1[n - 1]</code> is equal to the <strong>maximum value</strong> among all elements of <code>nums1</code>, i.e., <code>nums1[n - 1] = max(nums1[0], nums1[1], ..., nums1[n - 1])</code>.</li>\n\t<li><code>nums2[n - 1]</code> is equal to the <strong>maximum</strong> <strong>value</strong> among all elements of <code>nums2</code>, i.e., <code>nums2[n - 1] = max(nums2[0], nums2[1], ..., nums2[n - 1])</code>.</li>\n</ul>\n\n<p>Return <em>an integer denoting the <strong>minimum</strong> number of operations needed to meet <strong>both</strong> conditions</em>, <em>or </em><code>-1</code><em> if it is <strong>impossible</strong> to satisfy both conditions.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,7], nums2 = [4,5,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In this example, an operation can be performed using index i = 2.\nWhen nums1[2] and nums2[2] are swapped, nums1 becomes [1,2,3] and nums2 becomes [4,5,7].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 1.\nSo, the answer is 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example, the following operations can be performed:\nFirst operation using index i = 4.\nWhen nums1[4] and nums2[4] are swapped, nums1 becomes [2,3,4,5,4], and nums2 becomes [8,8,4,4,9].\nAnother operation using index i = 3.\nWhen nums1[3] and nums2[3] are swapped, nums1 becomes [2,3,4,4,4], and nums2 becomes [8,8,4,5,9].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 2.\nSo, the answer is 2.   \n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,5,4], nums2 = [2,5,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> In this example, it is not possible to satisfy both conditions. \nSo, the answer is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums1.length == nums2.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums1[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= nums2[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 179,
            "dislikes": 15,
            "similarQuestions": "[{\"title\": \"Minimum Swaps To Make Sequences Increasing\", \"titleSlug\": \"minimum-swaps-to-make-sequences-increasing\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.8K\", \"totalSubmission\": \"26.4K\", \"totalAcceptedRaw\": 11837, \"totalSubmissionRaw\": 26428, \"acRate\": \"44.8%\"}",
            "hints": [
                "Consider how to calculate the minimum number of operations when <code>nums1[n - 1]</code> and <code>nums2[n - 1]</code> are fixed (they are not swapped).",
                "For each index <code>i</code>, there are only <code>3</code> possibilities: <ul>\r\n<li><code>nums1[i] <= nums1[n - 1] && nums2[i] <= nums2[n - 1]</code>. We don't need to swap them.</li>\r\n<li><code>nums1[i] <= nums2[n - 1] && nums2[i] <= nums1[n - 1]</code>. We have to swap them.</li>\r\n<li>Otherwise, there is no solution.</li>\r\n</ul>",
                "There are <code>2</code> cases to determine the minimum number of operations: <ul>\r\n<li>The first case is the number of indices that need to be swapped when <code>nums1[n - 1]</code> and <code>nums2[n - 1]</code> are fixed.</li>\r\n<li>The second case is <code>1 +</code> the number of indices that need to be swapped when <code>nums1[n - 1]</code> and <code>nums2[n - 1]</code> are swapped.</li>\r\n</ul>",
                "The answer is the minimum of both cases or <code>-1</code> if there is no solution in either case."
            ],
            "rephrased": {
                "body": "You are given two 0-indexed integer arrays, `nums1` and `nums2`, both of length `n`. You can perform a series of operations where you select an index `i` in the range `[0, n - 1]` and swap the values of `nums1[i]` and `nums2[i]`.  The goal is to find the minimum number of operations required such that `nums1[n - 1]` is the maximum value in `nums1` and `nums2[n - 1]` is the maximum value in `nums2`. Return the minimum number of operations, or -1 if it's impossible to satisfy both conditions.",
                "constraints": [
                    "1 <= n == nums1.length == nums2.length <= 1000",
                    "1 <= nums1[i] <= 10<sup>9</sup>",
                    "1 <= nums2[i] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [1,2,7], nums2 = [4,5,3]",
                        "output": "1",
                        "explanation": "By swapping nums1[2] and nums2[2], nums1 becomes [1, 2, 3] and nums2 becomes [4, 5, 7]. Both conditions are then satisfied with one operation."
                    },
                    {
                        "input": "nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4]",
                        "output": "2",
                        "explanation": "Swapping nums1[4] and nums2[4] makes nums1 = [2, 3, 4, 5, 4] and nums2 = [8, 8, 4, 4, 9]. Then swapping nums1[3] and nums2[3] makes nums1 = [2, 3, 4, 4, 4] and nums2 = [8, 8, 4, 5, 9]. This requires two operations."
                    },
                    {
                        "input": "nums1 = [1,5,4], nums2 = [2,5,3]",
                        "output": "-1",
                        "explanation": "It is impossible to satisfy both conditions by swapping elements."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-swaps-to-make-sequences-increasing",
                "title": "Minimum Swaps To Make Sequences Increasing",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Consider how to calculate the minimum number of operations when <code>nums1[n - 1]</code> and <code>nums2[n - 1]</code> are fixed (they are not swapped).",
            "For each index <code>i</code>, there are only <code>3</code> possibilities: <ul>\r\n<li><code>nums1[i] <= nums1[n - 1] && nums2[i] <= nums2[n - 1]</code>. We don't need to swap them.</li>\r\n<li><code>nums1[i] <= nums2[n - 1] && nums2[i] <= nums1[n - 1]</code>. We have to swap them.</li>\r\n<li>Otherwise, there is no solution.</li>\r\n</ul>",
            "There are <code>2</code> cases to determine the minimum number of operations: <ul>\r\n<li>The first case is the number of indices that need to be swapped when <code>nums1[n - 1]</code> and <code>nums2[n - 1]</code> are fixed.</li>\r\n<li>The second case is <code>1 +</code> the number of indices that need to be swapped when <code>nums1[n - 1]</code> and <code>nums2[n - 1]</code> are swapped.</li>\r\n</ul>",
            "The answer is the minimum of both cases or <code>-1</code> if there is no solution in either case."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& nums1, vector<int>& nums2) {\n    const int n = nums1.size();\n    const int mini = min(nums1.back(), nums2.back());\n    const int maxi = max(nums1.back(), nums2.back());\n    // the number of the minimum operations, where nums1[n - 1] is not swapped\n    // with nums2[n - 1]\n    int dp1 = 0;\n    // the number of the minimum operations, where nums1[n - 1] is swapped with\n    // nums2[n - 1]\n    int dp2 = 0;\n\n    for (int i = 0; i < n; ++i) {\n      const int a = nums1[i];\n      const int b = nums2[i];\n      if (min(a, b) > mini)\n        return -1;\n      if (max(a, b) > maxi)\n        return -1;\n      if (a > nums1.back() || b > nums2.back())\n        ++dp1;\n      if (a > nums2.back() || b > nums1.back())\n        ++dp2;\n    }\n\n    return min(dp1, dp2);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int[] nums1, int[] nums2) {\n    final int n = nums1.length;\n    final int min = Math.min(nums1[n - 1], nums2[n - 1]);\n    final int max = Math.max(nums1[n - 1], nums2[n - 1]);\n    // the number of the minimum operations, where nums1[n - 1] is not swapped\n    // with nums2[n - 1]\n    int dp1 = 0;\n    // the number of the minimum operations, where nums1[n - 1] is swapped with\n    // nums2[n - 1]\n    int dp2 = 0;\n\n    for (int i = 0; i < n; ++i) {\n      final int a = nums1[i];\n      final int b = nums2[i];\n      if (Math.min(a, b) > min)\n        return -1;\n      if (Math.max(a, b) > max)\n        return -1;\n      if (a > nums1[n - 1] || b > nums2[n - 1])\n        ++dp1;\n      if (a > nums2[n - 1] || b > nums1[n - 1])\n        ++dp2;\n    }\n\n    return Math.min(dp1, dp2);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    mini = min(nums1[-1], nums2[-1])\n    maxi = max(nums1[-1], nums2[-1])\n    # the number of the minimum operations, where nums1[n - 1] is not swapped\n    # with nums2[n - 1]\n    dp1 = 0\n    # the number of the minimum operations, where nums1[n - 1] is swapped with\n    # nums2[n - 1]\n    dp2 = 0\n\n    for a, b in zip(nums1, nums2):\n      if min(a, b) > mini:\n        return -1\n      if max(a, b) > maxi:\n        return -1\n      if a > nums1[-1] or b > nums2[-1]:\n        dp1 += 1\n      if a > nums2[-1] or b > nums1[-1]:\n        dp2 += 1\n\n    return min(dp1, dp2)\n",
                "lang_text": "py"
            }
        }
    }
}