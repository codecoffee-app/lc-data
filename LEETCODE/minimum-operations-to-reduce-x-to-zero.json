{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1658",
            "title": "Minimum Operations to Reduce X to Zero",
            "titleSlug": "minimum-operations-to-reduce-x-to-zero",
            "content": "<p>You are given an integer array <code>nums</code> and an integer <code>x</code>. In one operation, you can either remove the leftmost or the rightmost element from the array <code>nums</code> and subtract its value from <code>x</code>. Note that this <strong>modifies</strong> the array for future operations.</p>\n\n<p>Return <em>the <strong>minimum number</strong> of operations to reduce </em><code>x</code> <em>to <strong>exactly</strong></em> <code>0</code> <em>if it is possible</em><em>, otherwise, return </em><code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,4,2,3], x = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The optimal solution is to remove the last two elements to reduce x to zero.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,6,7,8,9], x = 4\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,20,1,1,3], x = 10\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= x &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5311,
            "dislikes": 113,
            "similarQuestions": "[{\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarray Sum Equals K\", \"titleSlug\": \"subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Convert Number\", \"titleSlug\": \"minimum-operations-to-convert-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Removing Minimum Number of Magic Beans\", \"titleSlug\": \"removing-minimum-number-of-magic-beans\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make the Integer Zero\", \"titleSlug\": \"minimum-operations-to-make-the-integer-zero\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"181.7K\", \"totalSubmission\": \"457.2K\", \"totalAcceptedRaw\": 181668, \"totalSubmissionRaw\": 457160, \"acRate\": \"39.7%\"}",
            "hints": [
                "Think in reverse; instead of finding the minimum prefix + suffix, find the maximum subarray.",
                "Finding the maximum subarray is standard and can be done greedily."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `x`, you can perform operations where you remove either the leftmost or rightmost element of `nums` and subtract its value from `x`.  Each operation modifies the `nums` array.  Find the minimum number of operations required to reduce `x` to exactly 0. If it's not possible, return -1.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^4",
                    "1 <= x <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,1,4,2,3], x = 5",
                        "output": "2",
                        "explanation": "The optimal solution involves removing the last two elements (2 and 3) from the right side of the array. This requires 2 operations and reduces x to 0 (5 - 2 - 3 = 0)."
                    },
                    {
                        "input": "nums = [5,6,7,8,9], x = 4",
                        "output": "-1",
                        "explanation": "It is impossible to reduce x to 0 by removing elements from either end of the array."
                    },
                    {
                        "input": "nums = [3,2,20,1,1,3], x = 10",
                        "output": "5",
                        "explanation": "The optimal solution involves removing the last three elements (1, 1, and 3) from the right and the first two elements (3 and 2) from the left. This requires 5 operations and reduces x to 0 (10 - 3 - 2 - 3 - 1 - 1 = 0)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-size-subarray-sum",
                "title": "Minimum Size Subarray Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "subarray-sum-equals-k",
                "title": "Subarray Sum Equals K",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-convert-number",
                "title": "Minimum Operations to Convert Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "removing-minimum-number-of-magic-beans",
                "title": "Removing Minimum Number of Magic Beans",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-make-the-integer-zero",
                "title": "Minimum Operations to Make the Integer Zero",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think in reverse; instead of finding the minimum prefix + suffix, find the maximum subarray.",
            "Finding the maximum subarray is standard and can be done greedily."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minOperations(vector<int>& nums, int x) {\n    const int targetSum = accumulate(nums.begin(), nums.end(), 0) - x;\n    if (targetSum == 0)\n      return nums.size();\n    const int maxLen = maxSubArrayLen(nums, targetSum);\n    return maxLen == -1 ? -1 : nums.size() - maxLen;\n  }\n\n private:\n  // Same as 325. Maximum Size Subarray Sum Equals k\n  int maxSubArrayLen(vector<int>& nums, int k) {\n    int res = -1;\n    int prefix = 0;\n    unordered_map<int, int> prefixToIndex{{0, -1}};\n\n    for (int i = 0; i < nums.size(); ++i) {\n      prefix += nums[i];\n      const int target = prefix - k;\n      if (const auto it = prefixToIndex.find(target);\n          it != prefixToIndex.cend())\n        res = max(res, i - it->second);\n      // No need to check the existence of the prefix since it's unique.\n      prefixToIndex[prefix] = i;\n    }\n\n    return res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minOperations(int[] nums, int x) {\n    final int targetSum = Arrays.stream(nums).sum() - x;\n    if (targetSum == 0)\n      return nums.length;\n    final int maxLen = maxSubArrayLen(nums, targetSum);\n    return maxLen == -1 ? -1 : nums.length - maxLen;\n  }\n\n  // Same as 325. Maximum Size Subarray Sum Equals k\n  private int maxSubArrayLen(int[] nums, int k) {\n    int res = -1;\n    int prefix = 0;\n    Map<Integer, Integer> prefixToIndex = new HashMap<>();\n    prefixToIndex.put(0, -1);\n\n    for (int i = 0; i < nums.length; ++i) {\n      prefix += nums[i];\n      final int target = prefix - k;\n      if (prefixToIndex.containsKey(target))\n        res = Math.max(res, i - prefixToIndex.get(target));\n      // No need to check the existence of the prefix since it's unique.\n      prefixToIndex.put(prefix, i);\n    }\n\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minOperations(self, nums: List[int], x: int) -> int:\n    targetSum = sum(nums) - x\n    if targetSum == 0:\n      return len(nums)\n    maxLen = self._maxSubArrayLen(nums, targetSum)\n    return -1 if maxLen == -1 else len(nums) - maxLen\n\n  # Same as 325. Maximum Size Subarray Sum Equals k\n  def _maxSubArrayLen(self, nums: List[int], k: int) -> int:\n    res = -1\n    prefix = 0\n    prefixToIndex = {0: -1}\n\n    for i, num in enumerate(nums):\n      prefix += num\n      target = prefix - k\n      if target in prefixToIndex:\n        res = max(res, i - prefixToIndex[target])\n      # No need to check the existence of the prefix since it's unique.\n      prefixToIndex[prefix] = i\n\n    return res\n",
                "lang_text": "py"
            }
        }
    }
}