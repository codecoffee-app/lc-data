{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3071",
            "title": "Minimum Operations to Write the Letter Y on a Grid",
            "titleSlug": "minimum-operations-to-write-the-letter-y-on-a-grid",
            "content": "<p>You are given a <strong>0-indexed</strong> <code>n x n</code> grid where <code>n</code> is odd, and <code>grid[r][c]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</p>\n\n<p>We say that a cell belongs to the Letter <strong>Y</strong> if it belongs to one of the following:</p>\n\n<ul>\n\t<li>The diagonal starting at the top-left cell and ending at the center cell of the grid.</li>\n\t<li>The diagonal starting at the top-right cell and ending at the center cell of the grid.</li>\n\t<li>The vertical line starting at the center cell and ending at the bottom border of the grid.</li>\n</ul>\n\n<p>The Letter <strong>Y</strong> is written on the grid if and only if:</p>\n\n<ul>\n\t<li>All values at cells belonging to the Y are equal.</li>\n\t<li>All values at cells not belonging to the Y are equal.</li>\n\t<li>The values at cells belonging to the Y are different from the values at cells not belonging to the Y.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed to write the letter Y on the grid given that in one operation you can change the value at any cell to</em> <code>0</code><em>,</em> <code>1</code><em>,</em> <em>or</em> <code>2</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/22/y2.png\" style=\"width: 461px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2,2],[1,1,0],[0,1,0]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 1 while those that do not belong to Y are equal to 0.\nIt can be shown that 3 is the minimum number of operations needed to write Y on the grid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/01/22/y3.png\" style=\"width: 701px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,0,1,0],[2,1,0,1,2],[2,2,2,0,1],[2,2,2,2,2],[2,1,2,2,2]]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> We can write Y on the grid by applying the changes highlighted in blue in the image above. After the operations, all cells that belong to Y, denoted in bold, have the same value of 0 while those that do not belong to Y are equal to 2. \nIt can be shown that 12 is the minimum number of operations needed to write Y on the grid.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 49 </code></li>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 2</code></li>\n\t<li><code>n</code> is odd.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 86,
            "dislikes": 20,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.3K\", \"totalSubmission\": \"26.2K\", \"totalAcceptedRaw\": 16287, \"totalSubmissionRaw\": 26243, \"acRate\": \"62.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given a 0-indexed n x n grid where n is odd, and grid[r][c] is 0, 1, or 2.  A cell belongs to the Letter Y if it belongs to one of the following: The diagonal starting at the top-left cell and ending at the center cell of the grid; The diagonal starting at the top-right cell and ending at the center cell of the grid; The vertical line starting at the center cell and ending at the bottom border of the grid. The Letter Y is written on the grid if and only if: All values at cells belonging to the Y are equal; All values at cells not belonging to the Y are equal; The values at cells belonging to the Y are different from the values at cells not belonging to the Y.  Return the minimum number of operations needed to write the letter Y on the grid given that in one operation you can change the value at any cell to 0, 1, or 2.",
                "constraints": [
                    "3 <= n <= 49",
                    "n == grid.length == grid[i].length",
                    "0 <= grid[i][j] <= 2",
                    "n is odd"
                ],
                "testcases": [
                    {
                        "input": "[[1,2,2],[1,1,0],[0,1,0]]",
                        "output": "3",
                        "explanation": "To write the letter Y, we need to change some cell values. In this case, 3 changes are needed to make all cells belonging to Y have the same value (1) and all other cells have a different value (0)."
                    },
                    {
                        "input": "[[0,1,0,1,0],[2,1,0,1,2],[2,2,2,0,1],[2,2,2,2,2],[2,1,2,2,2]]",
                        "output": "12",
                        "explanation": "To write the letter Y, we need to change some cell values. In this case, 12 changes are needed to make all cells belonging to Y have the same value (0) and all other cells have a different value (2)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumOperationsToWriteY(vector<vector<int>>& grid) {\n    return min({getOperations(grid, 0, 1), getOperations(grid, 0, 2),\n                getOperations(grid, 1, 0), getOperations(grid, 1, 2),\n                getOperations(grid, 2, 0), getOperations(grid, 2, 1)});\n  }\n\n private:\n  // Returns the number of operations to turn Y into a and non-Y into b.\n  int getOperations(const vector<vector<int>>& grid, int a, int b) {\n    const int n = grid.size();\n    const int mid = n / 2;\n    int operations = 0;\n    for (int i = 0; i < n; ++i)\n      for (int j = 0; j < n; ++j)\n        // For the 'Y' pattern, before the midpoint, check the diagonal and\n        // anti-diagonal. After the midpoint, check the middle column.\n        if ((i < mid && (i == j || i + j == n - 1)) || (i >= mid && j == mid)) {\n          if (grid[i][j] != a)\n            ++operations;\n        } else if (grid[i][j] != b) {\n          ++operations;\n        }\n    return operations;\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumOperationsToWriteY(int[][] grid) {\n    return Math.min(Math.min(Math.min(getOperations(grid, 0, 1), getOperations(grid, 0, 2)),\n                             Math.min(getOperations(grid, 1, 0), getOperations(grid, 1, 2))),\n                    Math.min(getOperations(grid, 2, 0), getOperations(grid, 2, 1)));\n  }\n\n  // Returns the number of operations to turn Y into a and non-Y into b.\n  private int getOperations(int[][] grid, int a, int b) {\n    final int n = grid.length;\n    final int mid = n / 2;\n    int operations = 0;\n    for (int i = 0; i < n; i++)\n      for (int j = 0; j < n; j++)\n        // For the 'Y' pattern, before the midpoint, check the diagonal and\n        // anti-diagonal. After the midpoint, check the middle column.\n        if ((i < mid && (i == j || i + j == n - 1)) || (i >= mid && j == mid)) {\n          if (grid[i][j] != a)\n            ++operations;\n        } else if (grid[i][j] != b) {\n          ++operations;\n        }\n    return operations;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumOperationsToWriteY(self, grid: List[List[int]]) -> int:\n    n = len(grid)\n    mid = n // 2\n\n    def getOperations(a: int, b: int) -> int:\n      \"\"\"Returns the number of operations to turn Y into a and non-Y into b.\"\"\"\n      operations = 0\n      for i, row in enumerate(grid):\n        for j, num in enumerate(row):\n          # For the 'Y' pattern, before the midpoint, check the diagonal and\n          # anti-diagonal. After the midpoint, check the middle column.\n          if (i < mid and (i == j or i + j == n - 1)) or i >= mid and j == mid:\n            if num != a:\n              operations += 1\n          elif num != b:\n            operations += 1\n      return operations\n\n    return min(getOperations(0, 1), getOperations(0, 2),\n               getOperations(1, 0), getOperations(1, 2),\n               getOperations(2, 0), getOperations(2, 1))\n",
                "lang_text": "py"
            }
        }
    }
}