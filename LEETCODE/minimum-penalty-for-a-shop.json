{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2483",
            "title": "Minimum Penalty for a Shop",
            "titleSlug": "minimum-penalty-for-a-shop",
            "content": "<p>You are given the customer visit log of a shop represented by a <strong>0-indexed</strong> string <code>customers</code> consisting only of characters <code>&#39;N&#39;</code> and <code>&#39;Y&#39;</code>:</p>\n\n<ul>\n\t<li>if the <code>i<sup>th</sup></code> character is <code>&#39;Y&#39;</code>, it means that customers come at the <code>i<sup>th</sup></code> hour</li>\n\t<li>whereas <code>&#39;N&#39;</code> indicates that no customers come at the <code>i<sup>th</sup></code> hour.</li>\n</ul>\n\n<p>If the shop closes at the <code>j<sup>th</sup></code> hour (<code>0 &lt;= j &lt;= n</code>), the <strong>penalty</strong> is calculated as follows:</p>\n\n<ul>\n\t<li>For every hour when the shop is open and no customers come, the penalty increases by <code>1</code>.</li>\n\t<li>For every hour when the shop is closed and customers come, the penalty increases by <code>1</code>.</li>\n</ul>\n\n<p>Return<em> the <strong>earliest</strong> hour at which the shop must be closed to incur a <strong>minimum</strong> penalty.</em></p>\n\n<p><strong>Note</strong> that if a shop closes at the <code>j<sup>th</sup></code> hour, it means the shop is closed at the hour <code>j</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> customers = &quot;YYNY&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \n- Closing the shop at the 0<sup>th</sup> hour incurs in 1+1+0+1 = 3 penalty.\n- Closing the shop at the 1<sup>st</sup> hour incurs in 0+1+0+1 = 2 penalty.\n- Closing the shop at the 2<sup>nd</sup> hour incurs in 0+0+0+1 = 1 penalty.\n- Closing the shop at the 3<sup>rd</sup> hour incurs in 0+0+1+1 = 2 penalty.\n- Closing the shop at the 4<sup>th</sup> hour incurs in 0+0+1+0 = 1 penalty.\nClosing the shop at 2<sup>nd</sup> or 4<sup>th</sup> hour gives a minimum penalty. Since 2 is earlier, the optimal closing time is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> customers = &quot;NNNNN&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> It is best to close the shop at the 0<sup>th</sup> hour as no customers arrive.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> customers = &quot;YYYY&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> It is best to close the shop at the 4<sup>th</sup> hour as customers arrive at each hour.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= customers.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>customers</code> consists only of characters <code>&#39;Y&#39;</code> and <code>&#39;N&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1825,
            "dislikes": 90,
            "similarQuestions": "[{\"title\": \"Grid Game\", \"titleSlug\": \"grid-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"94.6K\", \"totalSubmission\": \"140.1K\", \"totalAcceptedRaw\": 94610, \"totalSubmissionRaw\": 140101, \"acRate\": \"67.5%\"}",
            "hints": [
                "At any index, the penalty is the sum of prefix count of \u2018N\u2019 and suffix count of \u2018Y\u2019.",
                "Enumerate all indices and find the minimum such value."
            ],
            "rephrased": {
                "body": "You are given a string `customers` representing the customer visit log of a shop. 'Y' indicates customers came at that hour, and 'N' indicates no customers came.  The penalty for closing the shop at hour `j` (0 <= j <= n, where n is the length of `customers`) is calculated as: 1 for each open hour with no customers, and 1 for each closed hour with customers. Return the earliest hour to close the shop to minimize the penalty.",
                "constraints": [
                    "1 <= customers.length <= 10^5",
                    "customers consists only of characters 'Y' and 'N'."
                ],
                "testcases": [
                    {
                        "input": "YYNY",
                        "output": "2",
                        "explanation": "Closing at hour 0: penalty = 3.\nClosing at hour 1: penalty = 2.\nClosing at hour 2: penalty = 1.\nClosing at hour 3: penalty = 2.\nClosing at hour 4: penalty = 1.\nMinimum penalty is 1, and the earliest hour is 2."
                    },
                    {
                        "input": "NNNNN",
                        "output": "0",
                        "explanation": "It's best to close at the 0th hour as no customers arrive at any time.  Closing at any other time will result in a penalty."
                    },
                    {
                        "input": "YYYY",
                        "output": "4",
                        "explanation": "Since customers arrive every hour, it's best to close at the 4th hour (end) to avoid penalties for closed hours with customers."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "grid-game",
                "title": "Grid Game",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "At any index, the penalty is the sum of prefix count of \u2018N\u2019 and suffix count of \u2018Y\u2019.",
            "Enumerate all indices and find the minimum such value."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int bestClosingTime(string customers) {\n    // Instead of computing the minimum penalty, we can compute the max profit.\n    int ans = 0;\n    int profit = 0;\n    int maxProfit = 0;\n\n    for (int i = 0; i < customers.length(); ++i) {\n      profit += customers[i] == 'Y' ? 1 : -1;\n      if (profit > maxProfit) {\n        maxProfit = profit;\n        ans = i + 1;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int bestClosingTime(String customers) {\n    // Instead of computing the minimum penalty, we can compute the max profit.\n    int ans = 0;\n    int profit = 0;\n    int maxProfit = 0;\n\n    for (int i = 0; i < customers.length(); ++i) {\n      profit += customers.charAt(i) == 'Y' ? 1 : -1;\n      if (profit > maxProfit) {\n        maxProfit = profit;\n        ans = i + 1;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def bestClosingTime(self, customers: str) -> int:\n    # Instead of computing the minimum penalty, we can compute the max profit.\n    ans = 0\n    profit = 0\n    maxProfit = 0\n\n    for i, customer in enumerate(customers):\n      profit += 1 if customer == 'Y' else -1\n      if profit > maxProfit:\n        maxProfit = profit\n        ans = i + 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}