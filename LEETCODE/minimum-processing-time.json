{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2895",
            "title": "Minimum Processing Time",
            "titleSlug": "minimum-processing-time",
            "content": "<p>You have a certain number of processors, each having 4 cores. The number of tasks to be executed is four times the number of processors. Each task must be assigned to a unique core, and each core can only be used once.</p>\n\n<p>You are given an array <code>processorTime</code> representing the time each processor becomes available and an array <code>tasks</code> representing how long each task takes to complete. Return the&nbsp;<em>minimum</em> time needed to complete all tasks.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">16</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Assign the tasks at indices 4, 5, 6, 7 to the first processor which becomes available at <code>time = 8</code>, and the tasks at indices 0, 1, 2, 3 to the second processor which becomes available at <code>time = 10</code>.&nbsp;</p>\n\n<p>The time taken by the first processor to finish the execution of all tasks is&nbsp;<code>max(8 + 8, 8 + 7, 8 + 4, 8 + 5) = 16</code>.</p>\n\n<p>The time taken by the second processor to finish the execution of all tasks is&nbsp;<code>max(10 + 2, 10 + 2, 10 + 3, 10 + 1) = 13</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">23</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Assign the tasks at indices 1, 4, 5, 6 to the first processor and the others to the second processor.</p>\n\n<p>The time taken by the first processor to finish the execution of all tasks is <code>max(10 + 3, 10 + 5, 10 + 8, 10 + 4) = 18</code>.</p>\n\n<p>The time taken by the second processor to finish the execution of all tasks is <code>max(20 + 2, 20 + 1, 20 + 2, 20 + 3) = 23</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == processorTime.length &lt;= 25000</code></li>\n\t<li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= processorTime[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= tasks[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>tasks.length == 4 * n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 250,
            "dislikes": 43,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"31.7K\", \"totalSubmission\": \"46.1K\", \"totalAcceptedRaw\": 31723, \"totalSubmissionRaw\": 46103, \"acRate\": \"68.8%\"}",
            "hints": [
                "It\u2019s optimal to make the processor with earlier process time run 4 longer tasks.****",
                "The largest <code>processTime[i] + tasks[j]</code> (when matched) is the answer."
            ],
            "rephrased": {
                "body": "You have a set of processors, each equipped with 4 cores. The number of tasks to be executed is four times the number of processors. Each task must be assigned to a unique core, and each core can only execute one task. Given the availability times of the processors and the execution times of the tasks, determine the minimum time required to complete all tasks.",
                "constraints": [
                    "1 <= n == processorTime.length <= 25000",
                    "1 <= tasks.length <= 10^5",
                    "0 <= processorTime[i] <= 10^9",
                    "1 <= tasks[i] <= 10^9",
                    "tasks.length == 4 * n"
                ],
                "testcases": [
                    {
                        "input": "processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5]",
                        "output": "16",
                        "explanation": "Assign tasks with durations 8, 7, 4, and 5 to the processor available at time 8. Assign tasks with durations 2, 2, 3, and 1 to the processor available at time 10. The maximum completion time for the first processor is max(8+8, 8+7, 8+4, 8+5) = 16. The maximum completion time for the second processor is max(10+2, 10+2, 10+3, 10+1) = 13. The overall minimum completion time is max(16, 13) = 16."
                    },
                    {
                        "input": "processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3]",
                        "output": "23",
                        "explanation": "Assign tasks with durations 3, 5, 8, and 4 to the processor available at time 10. Assign tasks with durations 2, 3, 1, and 2 to the processor available at time 20. The maximum completion time for the first processor is max(10+3, 10+5, 10+8, 10+4) = 18. The maximum completion time for the second processor is max(20+2, 20+3, 20+1, 20+2) = 23. The overall minimum completion time is max(18, 23) = 23."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "It\u2019s optimal to make the processor with earlier process time run 4 longer tasks.****",
            "The largest <code>processTime[i] + tasks[j]</code> (when matched) is the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minProcessingTime(vector<int>& processorTime, vector<int>& tasks) {\n    int ans = 0;\n    std::ranges::sort(processorTime);\n    std::ranges::sort(tasks, greater<>());\n\n    // It's optimal to run each 4 longer tasks with smaller processor time.\n    // Therefore, for each processor, take the maximum of the sum of the\n    // processor time and the largest assigned tasks[i].\n    for (int i = 0; i < processorTime.size(); ++i)\n      ans = max(ans, processorTime[i] + tasks[i * 4]);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minProcessingTime(List<Integer> processorTime, List<Integer> tasks) {\n    int ans = 0;\n    Collections.sort(processorTime);\n    Collections.sort(tasks, Collections.reverseOrder());\n\n    // It's optimal to run each 4 longer tasks with smaller processor time.\n    // Therefore, for each processor, take the maximum of the sum of the\n    // processor time and the largest assigned tasks[i].\n    for (int i = 0; i < processorTime.size(); ++i)\n      ans = Math.max(ans, processorTime.get(i) + tasks.get(i * 4));\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minProcessingTime(self, processorTime: List[int], tasks: List[int]) -> int:\n    return max(time + task\n               for (time, task) in zip(sorted(processorTime), sorted(tasks)[::-4]))\n",
                "lang_text": "py"
            }
        }
    }
}