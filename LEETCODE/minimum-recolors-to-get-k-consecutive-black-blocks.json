{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2379",
            "title": "Minimum Recolors to Get K Consecutive Black Blocks",
            "titleSlug": "minimum-recolors-to-get-k-consecutive-black-blocks",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>blocks</code> of length <code>n</code>, where <code>blocks[i]</code> is either <code>&#39;W&#39;</code> or <code>&#39;B&#39;</code>, representing the color of the <code>i<sup>th</sup></code> block. The characters <code>&#39;W&#39;</code> and <code>&#39;B&#39;</code> denote the colors white and black, respectively.</p>\n\n<p>You are also given an integer <code>k</code>, which is the desired number of <strong>consecutive</strong> black blocks.</p>\n\n<p>In one operation, you can <strong>recolor</strong> a white block such that it becomes a black block.</p>\n\n<p>Return<em> the <strong>minimum</strong> number of operations needed such that there is at least <strong>one</strong> occurrence of </em><code>k</code><em> consecutive black blocks.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> blocks = &quot;WBBWWBBWBW&quot;, k = 7\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nOne way to achieve 7 consecutive black blocks is to recolor the 0th, 3rd, and 4th blocks\nso that blocks = &quot;BBBBBBBWBW&quot;. \nIt can be shown that there is no way to achieve 7 consecutive black blocks in less than 3 operations.\nTherefore, we return 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> blocks = &quot;WBWBBBW&quot;, k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nNo changes need to be made, since 2 consecutive black blocks already exist.\nTherefore, we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == blocks.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>blocks[i]</code> is either <code>&#39;W&#39;</code> or <code>&#39;B&#39;</code>.</li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 681,
            "dislikes": 19,
            "similarQuestions": "[{\"title\": \"Max Consecutive Ones III\", \"titleSlug\": \"max-consecutive-ones-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Points You Can Obtain from Cards\", \"titleSlug\": \"maximum-points-you-can-obtain-from-cards\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Vowels in a Substring of Given Length\", \"titleSlug\": \"maximum-number-of-vowels-in-a-substring-of-given-length\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"45.4K\", \"totalSubmission\": \"77.8K\", \"totalAcceptedRaw\": 45385, \"totalSubmissionRaw\": 77806, \"acRate\": \"58.3%\"}",
            "hints": [
                "Iterate through all possible consecutive substrings of k characters.",
                "Find the number of changes for each substring to make all blocks black, and return the minimum of these."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string `blocks` of length `n`, where `blocks[i]` is either 'W' or 'B' representing white or black blocks respectively. You are also given an integer `k`, representing the desired number of consecutive black blocks.  In one operation, you can recolor a white block to black.  Return the minimum number of operations needed to have at least one occurrence of `k` consecutive black blocks.",
                "constraints": [
                    "n == blocks.length",
                    "1 <= n <= 100",
                    "blocks[i] is either 'W' or 'B'.",
                    "1 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "blocks = \"WBBWWBBWBW\", k = 7",
                        "output": "3",
                        "explanation": "To achieve 7 consecutive black blocks, recolor the 0th, 3rd, and 4th blocks.  It requires at least 3 operations."
                    },
                    {
                        "input": "blocks = \"WBWBBBW\", k = 2",
                        "output": "0",
                        "explanation": "No changes are needed as 2 consecutive black blocks already exist."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "max-consecutive-ones-iii",
                "title": "Max Consecutive Ones III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-points-you-can-obtain-from-cards",
                "title": "Maximum Points You Can Obtain from Cards",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-vowels-in-a-substring-of-given-length",
                "title": "Maximum Number of Vowels in a Substring of Given Length",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Iterate through all possible consecutive substrings of k characters.",
            "Find the number of changes for each substring to make all blocks black, and return the minimum of these."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumRecolors(string blocks, int k) {\n    int countB = 0;\n    int maxCountB = 0;\n\n    for (int i = 0; i < blocks.length(); ++i) {\n      if (blocks[i] == 'B')\n        ++countB;\n      if (i >= k && blocks[i - k] == 'B')\n        --countB;\n      maxCountB = max(maxCountB, countB);\n    }\n\n    return k - maxCountB;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumRecolors(String blocks, int k) {\n    int countB = 0;\n    int maxCountB = 0;\n\n    for (int i = 0; i < blocks.length(); ++i) {\n      if (blocks.charAt(i) == 'B')\n        ++countB;\n      if (i >= k && blocks.charAt(i - k) == 'B')\n        --countB;\n      maxCountB = Math.max(maxCountB, countB);\n    }\n\n    return k - maxCountB;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumRecolors(self, blocks: str, k: int) -> int:\n    countB = 0\n    maxCountB = 0\n\n    for i, block in enumerate(blocks):\n      if block == 'B':\n        countB += 1\n      if i >= k and blocks[i - k] == 'B':\n        countB -= 1\n      maxCountB = max(maxCountB, countB)\n\n    return k - maxCountB\n",
                "lang_text": "py"
            }
        }
    }
}