{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3111",
            "title": "Minimum Rectangles to Cover Points",
            "titleSlug": "minimum-rectangles-to-cover-points",
            "content": "<p>You are given a 2D integer array <code>points</code>, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>. You are also given an integer <code>w</code>. Your task is to <strong>cover</strong> <strong>all</strong> the given points with rectangles.</p>\n\n<p>Each rectangle has its lower end at some point <code>(x<sub>1</sub>, 0)</code> and its upper end at some point <code>(x<sub>2</sub>, y<sub>2</sub>)</code>, where <code>x<sub>1</sub> &lt;= x<sub>2</sub></code>, <code>y<sub>2</sub> &gt;= 0</code>, and the condition <code>x<sub>2</sub> - x<sub>1</sub> &lt;= w</code> <strong>must</strong> be satisfied for each rectangle.</p>\n\n<p>A point is considered covered by a rectangle if it lies within or on the boundary of the rectangle.</p>\n\n<p>Return an integer denoting the <strong>minimum</strong> number of rectangles needed so that each point is covered by <strong>at least one</strong> rectangle<em>.</em></p>\n\n<p><strong>Note:</strong> A point may be covered by more than one rectangle.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-33-05.png\" style=\"width: 205px; height: 300px;\" /></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">points = [[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]], w = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">2</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The image above shows one possible placement of rectangles to cover the points:</p>\n\n<ul>\n\t<li>A rectangle with a lower end at <code>(1, 0)</code> and its upper end at <code>(2, 8)</code></li>\n\t<li>A rectangle with a lower end at <code>(3, 0)</code> and its upper end at <code>(4, 8)</code></li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-18-59-12.png\" style=\"width: 260px; height: 250px;\" /></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], w = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">3</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The image above shows one possible placement of rectangles to cover the points:</p>\n\n<ul>\n\t<li>A rectangle with a lower end at <code>(0, 0)</code> and its upper end at <code>(2, 2)</code></li>\n\t<li>A rectangle with a lower end at <code>(3, 0)</code> and its upper end at <code>(5, 5)</code></li>\n\t<li>A rectangle with a lower end at <code>(6, 0)</code> and its upper end at <code>(6, 6)</code></li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-24-03.png\" style=\"height: 150px; width: 127px;\" /></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">points = [[2,3],[1,2]], w = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">2</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p>The image above shows one possible placement of rectangles to cover the points:</p>\n\n<ul>\n\t<li>A rectangle with a lower end at <code>(1, 0)</code> and its upper end at <code>(1, 2)</code></li>\n\t<li>A rectangle with a lower end at <code>(2, 0)</code> and its upper end at <code>(2, 3)</code></li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub> == points[i][0] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= y<sub>i</sub> == points[i][1] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= w &lt;= 10<sup>9</sup></code></li>\n\t<li>All pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are distinct.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 82,
            "dislikes": 3,
            "similarQuestions": "[{\"title\": \"Minimum Area Rectangle\", \"titleSlug\": \"minimum-area-rectangle\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Closest Points to Origin\", \"titleSlug\": \"k-closest-points-to-origin\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.7K\", \"totalSubmission\": \"38.3K\", \"totalAcceptedRaw\": 24731, \"totalSubmissionRaw\": 38308, \"acRate\": \"64.6%\"}",
            "hints": [
                "The <code>y</code> values don't matter; only the <code>x</code> values matter.",
                "Sort all the points by <code>x<sub>i</sub></code>.",
                "Each time, select the smallest <code>x</code> value, <code>x<sub>0</sub></code>, from the unselected points, and then select all the points with <code>x</code> values not larger than <code>x<sub>0</sub> + w</code>."
            ],
            "rephrased": {
                "body": "You are given a 2D integer array `points`, where `points[i] = [x_i, y_i]`. You are also given an integer `w`. Your task is to **cover** **all** the given points with rectangles.\n\nEach rectangle has its lower end at some point `(x_1, 0)` and its upper end at some point `(x_2, y_2)`, where `x_1 <= x_2`, `y_2 >= 0`, and the condition `x_2 - x_1 <= w` **must** be satisfied for each rectangle.\n\nA point is considered covered by a rectangle if it lies within or on the boundary of the rectangle.\n\nReturn an integer denoting the **minimum** number of rectangles needed so that each point is covered by **at least one** rectangle.\n\n**Note:** A point may be covered by more than one rectangle.",
                "constraints": [
                    "1 <= points.length <= 10^5",
                    "points[i].length == 2",
                    "0 <= x_i == points[i][0] <= 10^9",
                    "0 <= y_i == points[i][1] <= 10^9",
                    "0 <= w <= 10^9",
                    "All pairs (x_i, y_i) are distinct."
                ],
                "testcases": [
                    {
                        "input": "points = [[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]], w = 1",
                        "output": "2",
                        "explanation": "One possible placement of rectangles to cover the points includes a rectangle with a lower end at (1, 0) and its upper end at (2, 8), and another with a lower end at (3, 0) and its upper end at (4, 8)."
                    },
                    {
                        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], w = 2",
                        "output": "3",
                        "explanation": "One possible placement of rectangles includes one with a lower end at (0, 0) and its upper end at (2, 2), one with a lower end at (3, 0) and its upper end at (5, 5), and another with a lower end at (6, 0) and its upper end at (6, 6)."
                    },
                    {
                        "input": "points = [[2,3],[1,2]], w = 0",
                        "output": "2",
                        "explanation": "One possible placement of rectangles includes one with a lower end at (1, 0) and its upper end at (1, 2), and another with a lower end at (2, 0) and its upper end at (2, 3)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-area-rectangle",
                "title": "Minimum Area Rectangle",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "k-closest-points-to-origin",
                "title": "K Closest Points to Origin",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The <code>y</code> values don't matter; only the <code>x</code> values matter.",
            "Sort all the points by <code>x<sub>i</sub></code>.",
            "Each time, select the smallest <code>x</code> value, <code>x<sub>0</sub></code>, from the unselected points, and then select all the points with <code>x</code> values not larger than <code>x<sub>0</sub> + w</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ]
    }
}