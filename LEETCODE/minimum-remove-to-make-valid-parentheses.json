{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1249",
            "title": "Minimum Remove to Make Valid Parentheses",
            "titleSlug": "minimum-remove-to-make-valid-parentheses",
            "content": "<p>Given a string <font face=\"monospace\">s</font> of <code>&#39;(&#39;</code> , <code>&#39;)&#39;</code> and lowercase English characters.</p>\n\n<p>Your task is to remove the minimum number of parentheses ( <code>&#39;(&#39;</code> or <code>&#39;)&#39;</code>, in any positions ) so that the resulting <em>parentheses string</em> is valid and return <strong>any</strong> valid string.</p>\n\n<p>Formally, a <em>parentheses string</em> is valid if and only if:</p>\n\n<ul>\n\t<li>It is the empty string, contains only lowercase characters, or</li>\n\t<li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid strings, or</li>\n\t<li>It can be written as <code>(A)</code>, where <code>A</code> is a valid string.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;lee(t(c)o)de)&quot;\n<strong>Output:</strong> &quot;lee(t(c)o)de&quot;\n<strong>Explanation:</strong> &quot;lee(t(co)de)&quot; , &quot;lee(t(c)ode)&quot; would also be accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a)b(c)d&quot;\n<strong>Output:</strong> &quot;ab(c)d&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;))((&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> An empty string is also valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either<code>&#39;(&#39;</code> , <code>&#39;)&#39;</code>, or lowercase English letter<code>.</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6049,
            "dislikes": 111,
            "similarQuestions": "[{\"title\": \"Minimum Number of Swaps to Make the String Balanced\", \"titleSlug\": \"minimum-number-of-swaps-to-make-the-string-balanced\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check if a Parentheses String Can Be Valid\", \"titleSlug\": \"check-if-a-parentheses-string-can-be-valid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"549.9K\", \"totalSubmission\": \"824.2K\", \"totalAcceptedRaw\": 549937, \"totalSubmissionRaw\": 824187, \"acRate\": \"66.7%\"}",
            "hints": [
                "Each prefix of a balanced parentheses has a number of open parentheses greater or equal than closed parentheses, similar idea with each suffix.",
                "Check the array from left to right, remove characters that do not meet the property mentioned above, same idea in backward way."
            ],
            "rephrased": {
                "body": "Given a string `s` consisting of '(' , ')' and lowercase English characters, remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid. Return any valid string.\n\nA parentheses string is valid if:\n\n1.  It is the empty string, contains only lowercase characters, or\n2.  It can be written as `AB` (A concatenated with B), where A and B are valid strings, or\n3.  It can be written as `(A)`, where A is a valid string.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s[i] is either '(', ')', or a lowercase English letter."
                ],
                "testcases": [
                    {
                        "input": "lee(t(c)o)de)",
                        "output": "lee(t(c)o)de",
                        "explanation": "Other valid outputs include \"lee(t(co)de)\" and \"lee(t(c)ode)\"."
                    },
                    {
                        "input": "a)b(c)d",
                        "output": "ab(c)d",
                        "explanation": null
                    },
                    {
                        "input": "))((",
                        "output": "",
                        "explanation": "An empty string is also a valid output."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-swaps-to-make-the-string-balanced",
                "title": "Minimum Number of Swaps to Make the String Balanced",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "check-if-a-parentheses-string-can-be-valid",
                "title": "Check if a Parentheses String Can Be Valid",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Each prefix of a balanced parentheses has a number of open parentheses greater or equal than closed parentheses, similar idea with each suffix.",
            "Check the array from left to right, remove characters that do not meet the property mentioned above, same idea in backward way."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string minRemoveToMakeValid(string s) {\n    stack<int> stack;  // Unpaired '(' indices\n\n    for (int i = 0; i < s.length(); ++i)\n      if (s[i] == '(') {\n        stack.push(i);  // Record unpaired '(' index\n      } else if (s[i] == ')') {\n        if (stack.empty())\n          s[i] = '*';  // Mark unpaired ')' as '*'\n        else\n          stack.pop();  // Find a pair!\n      }\n\n    // Mark unpaired '(' as '*'\n    while (!stack.empty())\n      s[stack.top()] = '*', stack.pop();\n\n    s.erase(remove(s.begin(), s.end(), '*'), s.end());\n    return s;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String minRemoveToMakeValid(String s) {\n    Deque<Integer> stack = new ArrayDeque<>(); // Unpaired '(' indices\n    StringBuilder sb = new StringBuilder(s);\n\n    for (int i = 0; i < s.length(); ++i)\n      if (sb.charAt(i) == '(') {\n        stack.push(i); // Record unpaired '(' index\n      } else if (sb.charAt(i) == ')') {\n        if (stack.isEmpty())\n          sb.setCharAt(i, '#'); // Mark unpaired ')' as '#'\n        else\n          stack.pop(); // Find a pair!\n      }\n\n    // Mark unpaired '(' as '#'\n    while (!stack.isEmpty())\n      sb.setCharAt(stack.pop(), '#');\n\n    return sb.toString().replaceAll(\"#\", \"\");\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minRemoveToMakeValid(self, s: str) -> str:\n    stack = []  # Unpaired '(' indices\n    chars = [c for c in s]\n\n    for i, c in enumerate(chars):\n      if c == '(':\n        stack.append(i)  # Record unpaired '(' index\n      elif c == ')':\n        if stack:\n          stack.pop()  # Find a pair\n        else:\n          chars[i] = '*'  # Mark unpaired ')' as '*'\n\n    # Mark unpaired '(' as '*'\n    while stack:\n      chars[stack.pop()] = '*'\n\n    return ''.join(chars).replace('*', '')\n",
                "lang_text": "py"
            }
        }
    }
}