{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2244",
            "title": "Minimum Rounds to Complete All Tasks",
            "titleSlug": "minimum-rounds-to-complete-all-tasks",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>tasks</code>, where <code>tasks[i]</code> represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the <strong>same difficulty level</strong>.</p>\n\n<p>Return <em>the <strong>minimum</strong> rounds required to complete all the tasks, or </em><code>-1</code><em> if it is not possible to complete all the tasks.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [2,2,3,3,2,4,4,4,4,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> To complete all the tasks, a possible plan is:\n- In the first round, you complete 3 tasks of difficulty level 2. \n- In the second round, you complete 2 tasks of difficulty level 3. \n- In the third round, you complete 3 tasks of difficulty level 4. \n- In the fourth round, you complete 2 tasks of difficulty level 4.  \nIt can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [2,3,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= tasks[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2677,
            "dislikes": 78,
            "similarQuestions": "[{\"title\": \"Climbing Stairs\", \"titleSlug\": \"climbing-stairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Odd String Difference\", \"titleSlug\": \"odd-string-difference\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"143K\", \"totalSubmission\": \"228K\", \"totalAcceptedRaw\": 143035, \"totalSubmissionRaw\": 227976, \"acRate\": \"62.7%\"}",
            "hints": [
                "Which data structure can you use to store the number of tasks of each difficulty level?",
                "For any particular difficulty level, what can be the optimal strategy to complete the tasks using minimum rounds?",
                "When can we not complete all tasks of a difficulty level?"
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `tasks`, where `tasks[i]` represents the difficulty level of a task, determine the minimum number of rounds required to complete all tasks. In each round, you can complete either 2 or 3 tasks of the *same* difficulty level. If it's impossible to complete all tasks, return -1.",
                "constraints": [
                    "1 <= tasks.length <= 10^5",
                    "1 <= tasks[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[2,2,3,3,2,4,4,4,4,4]",
                        "output": "4",
                        "explanation": "One possible solution is:\n- Round 1: Complete 3 tasks of difficulty level 2.\n- Round 2: Complete 2 tasks of difficulty level 3.\n- Round 3: Complete 3 tasks of difficulty level 4.\n- Round 4: Complete 2 tasks of difficulty level 4."
                    },
                    {
                        "input": "[2,3,3]",
                        "output": "-1",
                        "explanation": "There is only 1 task of difficulty level 2. Since you must complete 2 or 3 tasks of the same difficulty in each round, it's impossible to complete all tasks."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "climbing-stairs",
                "title": "Climbing Stairs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "odd-string-difference",
                "title": "Odd String Difference",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Which data structure can you use to store the number of tasks of each difficulty level?",
            "For any particular difficulty level, what can be the optimal strategy to complete the tasks using minimum rounds?",
            "When can we not complete all tasks of a difficulty level?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumRounds(vector<int>& tasks) {\n    int ans = 0;\n    unordered_map<int, int> count;\n\n    for (const int task : tasks)\n      ++count[task];\n\n    // Freq = 1 -> impossible\n    // Freq = 2 -> needs 1 round\n    // Freq = 3 -> needs 1 round\n    // Freq = 3k                           -> needs k rounds\n    // Freq = 3k + 1 = 3 * (k - 1) + 2 * 2 -> needs k + 1 rounds\n    // Freq = 3k + 2 = 3 * k       + 2 * 1 -> needs k + 1 rounds\n    for (const auto& [_, freq] : count)\n      if (freq == 1)\n        return -1;\n      else\n        ans += (freq + 2) / 3;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumRounds(int[] tasks) {\n    int ans = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (final int task : tasks)\n      count.merge(task, 1, Integer::sum);\n\n    // Freq = 1 -> impossible\n    // Freq = 2 -> needs 1 round\n    // Freq = 3 -> needs 1 round\n    // Freq = 3k                           -> needs k rounds\n    // Freq = 3k + 1 = 3 * (k - 1) + 2 * 2 -> needs k + 1 rounds\n    // Freq = 3k + 2 = 3 * k       + 2 * 1 -> needs k + 1 rounds\n    for (final int freq : count.values())\n      if (freq == 1)\n        return -1;\n      else\n        ans += (freq + 2) / 3;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumRounds(self, tasks: List[int]) -> int:\n    freqs = collections.Counter(tasks).values()\n    return -1 if 1 in freqs else sum((f + 2) // 3 for f in freqs)\n",
                "lang_text": "py"
            }
        }
    }
}