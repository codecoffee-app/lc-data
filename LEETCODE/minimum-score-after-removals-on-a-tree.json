{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2322",
            "title": "Minimum Score After Removals on a Tree",
            "titleSlug": "minimum-score-after-removals-on-a-tree",
            "content": "<p>There is an undirected connected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> edges.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code> where <code>nums[i]</code> represents the value of the <code>i<sup>th</sup></code> node. You are also given a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>Remove two <strong>distinct</strong> edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:</p>\n\n<ol>\n\t<li>Get the XOR of all the values of the nodes for <strong>each</strong> of the three components respectively.</li>\n\t<li>The <strong>difference</strong> between the <strong>largest</strong> XOR value and the <strong>smallest</strong> XOR value is the <strong>score</strong> of the pair.</li>\n</ol>\n\n<ul>\n\t<li>For example, say the three components have the node values: <code>[4,5,7]</code>, <code>[1,9]</code>, and <code>[3,3,3]</code>. The three XOR values are <code>4 ^ 5 ^ 7 = <u><strong>6</strong></u></code>, <code>1 ^ 9 = <u><strong>8</strong></u></code>, and <code>3 ^ 3 ^ 3 = <u><strong>3</strong></u></code>. The largest XOR value is <code>8</code> and the smallest XOR value is <code>3</code>. The score is then <code>8 - 3 = 5</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> score of any possible pair of edge removals on the given tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/03/ex1drawio.png\" style=\"width: 193px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The diagram above shows a way to make a pair of removals.\n- The 1<sup>st</sup> component has nodes [1,3,4] with values [5,4,11]. Its XOR value is 5 ^ 4 ^ 11 = 10.\n- The 2<sup>nd</sup> component has node [0] with value [1]. Its XOR value is 1 = 1.\n- The 3<sup>rd</sup> component has node [2] with value [5]. Its XOR value is 5 = 5.\nThe score is the difference between the largest and smallest XOR value which is 10 - 1 = 9.\nIt can be shown that no other pair of removals will obtain a smaller score than 9.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/03/ex2drawio.png\" style=\"width: 287px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The diagram above shows a way to make a pair of removals.\n- The 1<sup>st</sup> component has nodes [3,4] with values [4,4]. Its XOR value is 4 ^ 4 = 0.\n- The 2<sup>nd</sup> component has nodes [1,0] with values [5,5]. Its XOR value is 5 ^ 5 = 0.\n- The 3<sup>rd</sup> component has nodes [2,5] with values [2,2]. Its XOR value is 2 ^ 2 = 0.\nThe score is the difference between the largest and smallest XOR value which is 0 - 0 = 0.\nWe cannot obtain a smaller score than 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>8</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 436,
            "dislikes": 14,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.7K\", \"totalSubmission\": \"12.9K\", \"totalAcceptedRaw\": 6715, \"totalSubmissionRaw\": 12916, \"acRate\": \"52.0%\"}",
            "hints": [
                "Consider iterating over the first edge to remove, and then doing some precalculations on the 2 resulting connected components.",
                "Will calculating the XOR of each subtree help?"
            ],
            "rephrased": {
                "body": "Given an undirected connected tree with `n` nodes (labeled 0 to `n - 1`) and `n - 1` edges, your task is to remove two distinct edges to split the tree into three connected components. You are provided with `nums`, an array of length `n` where `nums[i]` is the value of the i-th node, and `edges`, a 2D array representing the tree's edges. The goal is to find the minimum possible difference between the largest and smallest XOR values of the three resulting components after removing two edges.",
                "constraints": [
                    "n == nums.length",
                    "3 <= n <= 1000",
                    "1 <= nums[i] <= 10^8",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= a_i, b_i < n",
                    "a_i != b_i",
                    "edges represents a valid tree."
                ],
                "testcases": [
                    {
                        "input": "nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]",
                        "output": "9",
                        "explanation": "Removing the edges (1,2) and (3,4) results in three components: [0,1,3,4], [2]. The XOR values are 10, 1, and 5.  The difference between the largest (10) and smallest (1) XOR values is 9.  This is the minimum score possible."
                    },
                    {
                        "input": "nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]",
                        "output": "0",
                        "explanation": "Removing the edges (0,1) and (5,2) results in three components: [1,3,4], [0], and [2,5]. The XOR values are 0, 0, and 0.  The difference between the largest and smallest XOR values is 0.  This is the minimum score possible."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Consider iterating over the first edge to remove, and then doing some precalculations on the 2 resulting connected components.",
            "Will calculating the XOR of each subtree help?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumScore(vector<int>& nums, vector<vector<int>>& edges) {\n    const int n = nums.size();\n    const int xors = reduce(nums.begin(), nums.end(), 0, bit_xor());\n    vector<int> subXors(nums);\n    vector<vector<int>> tree(n);\n    vector<unordered_set<int>> children(n);\n\n    for (int i = 0; i < n; ++i)\n      children[i].insert(i);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      tree[u].push_back(v);\n      tree[v].push_back(u);\n    }\n\n    dfs(tree, 0, -1, subXors, children);\n\n    int ans = INT_MAX;\n\n    for (int i = 0; i < edges.size(); ++i) {\n      int a = edges[i][0];\n      int b = edges[i][1];\n      if (children[a].count(b))\n        swap(a, b);\n      for (int j = 0; j < i; ++j) {\n        int c = edges[j][0];\n        int d = edges[j][1];\n        if (children[c].count(d))\n          swap(c, d);\n        vector<int> cands;\n        if (a != c && children[a].count(c))\n          cands = {subXors[c], subXors[a] ^ subXors[c], xors ^ subXors[a]};\n        else if (a != c && children[c].count(a))\n          cands = {subXors[a], subXors[c] ^ subXors[a], xors ^ subXors[c]};\n        else\n          cands = {subXors[a], subXors[c], xors ^ subXors[a] ^ subXors[c]};\n        ans = min(ans, *max_element(cands.begin(), cands.end()) -\n                           *min_element(cands.begin(), cands.end()));\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  pair<int, unordered_set<int>> dfs(const vector<vector<int>>& tree, int u,\n                                    int parent, vector<int>& subXors,\n                                    vector<unordered_set<int>>& children) {\n    for (const int v : tree[u]) {\n      if (v == parent)\n        continue;\n      const auto& [vXor, vChildren] = dfs(tree, v, u, subXors, children);\n      subXors[u] ^= vXor;\n      children[u].insert(vChildren.begin(), vChildren.end());\n    }\n    return {subXors[u], children[u]};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumScore(int[] nums, int[][] edges) {\n    final int n = nums.length;\n    final int xors = getXors(nums);\n    int[] subXors = nums.clone();\n    List<Integer>[] tree = new List[n];\n    Set<Integer>[] children = new Set[n];\n\n    for (int i = 0; i < n; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int i = 0; i < n; ++i)\n      children[i] = new HashSet<>(Arrays.asList(i));\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      tree[u].add(v);\n      tree[v].add(u);\n    }\n\n    dfs(tree, 0, -1, subXors, children);\n\n    int ans = Integer.MAX_VALUE;\n\n    for (int i = 0; i < edges.length; ++i) {\n      int a = edges[i][0];\n      int b = edges[i][1];\n      if (children[a].contains(b)) {\n        final int temp = a;\n        a = b;\n        b = a;\n      }\n      for (int j = 0; j < i; ++j) {\n        int c = edges[j][0];\n        int d = edges[j][1];\n        if (children[c].contains(d)) {\n          final int temp = c;\n          c = d;\n          d = temp;\n        }\n        int[] cands;\n        if (a != c && children[a].contains(c))\n          cands = new int[] {subXors[c], subXors[a] ^ subXors[c], xors ^ subXors[a]};\n        else if (a != c && children[c].contains(a))\n          cands = new int[] {subXors[a], subXors[c] ^ subXors[a], xors ^ subXors[c]};\n        else\n          cands = new int[] {subXors[a], subXors[c], xors ^ subXors[a] ^ subXors[c]};\n        ans = Math.min(ans, Arrays.stream(cands).max().getAsInt() -\n                                Arrays.stream(cands).min().getAsInt());\n      }\n    }\n\n    return ans;\n  }\n\n  private Pair<Integer, Set<Integer>> dfs(List<Integer>[] tree, int u, int parent, int[] subXors,\n                                          Set<Integer>[] children) {\n    for (final int v : tree[u]) {\n      if (v == parent)\n        continue;\n      final Pair<Integer, Set<Integer>> pair = dfs(tree, v, u, subXors, children);\n      final int vXor = pair.getKey();\n      final Set<Integer> vChildren = pair.getValue();\n      subXors[u] ^= vXor;\n      for (final int child : vChildren)\n        children[u].add(child);\n    }\n    return new Pair<>(subXors[u], children[u]);\n  }\n\n  private int getXors(int[] nums) {\n    int xors = 0;\n    for (final int num : nums)\n      xors ^= num;\n    return xors;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumScore(self, nums: List[int], edges: List[List[int]]) -> int:\n    n = len(nums)\n    xors = functools.reduce(lambda x, y: x ^ y, nums)\n    subXors = nums[:]\n    tree = [[] for _ in range(n)]\n    children = [{i} for i in range(n)]\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    def dfs(u: int, parent: int) -> Tuple[int, Set[int]]:\n      for v in tree[u]:\n        if v == parent:\n          continue\n        vXor, vChildren = dfs(v, u)\n        subXors[u] ^= vXor\n        children[u] |= vChildren\n      return subXors[u], children[u]\n\n    dfs(0, -1)\n\n    ans = math.inf\n    for i in range(len(edges)):\n      a, b = edges[i]\n      if b in children[a]:\n        a, b = b, a\n      for j in range(i):\n        c, d = edges[j]\n        if d in children[c]:\n          c, d = d, c\n\n        if c in children[a] and a != c:\n          cands = [subXors[c], subXors[a] ^ subXors[c], xors ^ subXors[a]]\n        elif a in children[c] and a != c:\n          cands = [subXors[a], subXors[c] ^ subXors[a], xors ^ subXors[c]]\n        else:\n          cands = [subXors[a], subXors[c], xors ^ subXors[a] ^ subXors[c]]\n        ans = min(ans, max(cands) - min(cands))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}