{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2492",
            "title": "Minimum Score of a Path Between Two Cities",
            "titleSlug": "minimum-score-of-a-path-between-two-cities",
            "content": "<p>You are given a positive integer <code>n</code> representing <code>n</code> cities numbered from <code>1</code> to <code>n</code>. You are also given a <strong>2D</strong> array <code>roads</code> where <code>roads[i] = [a<sub>i</sub>, b<sub>i</sub>, distance<sub>i</sub>]</code> indicates that there is a <strong>bidirectional </strong>road between cities <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> with a distance equal to <code>distance<sub>i</sub></code>. The cities graph is not necessarily connected.</p>\n\n<p>The <strong>score</strong> of a path between two cities is defined as the <strong>minimum </strong>distance of a road in this path.</p>\n\n<p>Return <em>the <strong>minimum </strong>possible score of a path between cities </em><code>1</code><em> and </em><code>n</code>.</p>\n\n<p><strong>Note</strong>:</p>\n\n<ul>\n\t<li>A path is a sequence of roads between two cities.</li>\n\t<li>It is allowed for a path to contain the same road <strong>multiple</strong> times, and you can visit cities <code>1</code> and <code>n</code> multiple times along the path.</li>\n\t<li>The test cases are generated such that there is <strong>at least</strong> one path between <code>1</code> and <code>n</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/12/graph11.png\" style=\"width: 190px; height: 231px;\" />\n<pre>\n<strong>Input:</strong> n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The path from city 1 to 4 with the minimum score is: 1 -&gt; 2 -&gt; 4. The score of this path is min(9,5) = 5.\nIt can be shown that no other path has less score.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/12/graph22.png\" style=\"width: 190px; height: 231px;\" />\n<pre>\n<strong>Input:</strong> n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The path from city 1 to 4 with the minimum score is: 1 -&gt; 2 -&gt; 1 -&gt; 3 -&gt; 4. The score of this path is min(2,2,4,7) = 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= roads.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>roads[i].length == 3</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>1 &lt;= distance<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>There are no repeated edges.</li>\n\t<li>There is at least one path between <code>1</code> and <code>n</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1718,
            "dislikes": 287,
            "similarQuestions": "[{\"title\": \"Checking Existence of Edge Length Limited Paths\", \"titleSlug\": \"checking-existence-of-edge-length-limited-paths\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Checking Existence of Edge Length Limited Paths II\", \"titleSlug\": \"checking-existence-of-edge-length-limited-paths-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"79.7K\", \"totalSubmission\": \"138.4K\", \"totalAcceptedRaw\": 79671, \"totalSubmissionRaw\": 138418, \"acRate\": \"57.6%\"}",
            "hints": [
                "Can you solve the problem if the whole graph is connected?",
                "Notice that if the graph is connected, you can always use any edge of the graph in your path.",
                "How to solve the general problem in a similar way? Remove all the nodes that are not connected to 1 and n, then apply the previous solution in the new graph."
            ],
            "rephrased": {
                "body": "Given `n` cities numbered from 1 to `n` and a list of bidirectional roads connecting them, find the minimum possible score of a path between cities 1 and `n`. The score of a path is defined as the minimum distance of any road in that path.  You are given a 2D array `roads` where `roads[i] = [a_i, b_i, distance_i]` indicates a road between cities `a_i` and `b_i` with distance `distance_i`. The cities graph is not necessarily connected, but there is guaranteed to be at least one path between cities 1 and `n`. A path may contain the same road multiple times, and cities 1 and `n` can be visited multiple times.",
                "constraints": [
                    "2 <= n <= 10^5",
                    "1 <= roads.length <= 10^5",
                    "roads[i].length == 3",
                    "1 <= a_i, b_i <= n",
                    "a_i != b_i",
                    "1 <= distance_i <= 10^4",
                    "There are no repeated edges.",
                    "There is at least one path between 1 and n."
                ],
                "testcases": [
                    {
                        "input": "n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]",
                        "output": "5",
                        "explanation": "The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 4. The score of this path is min(9,5) = 5. It can be shown that no other path has a smaller score."
                    },
                    {
                        "input": "n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]]",
                        "output": "2",
                        "explanation": "The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 1 -> 3 -> 4. The score of this path is min(2,2,4,7) = 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "checking-existence-of-edge-length-limited-paths",
                "title": "Checking Existence of Edge Length Limited Paths",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "checking-existence-of-edge-length-limited-paths-ii",
                "title": "Checking Existence of Edge Length Limited Paths II",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Can you solve the problem if the whole graph is connected?",
            "Notice that if the graph is connected, you can always use any edge of the graph in your path.",
            "How to solve the general problem in a similar way? Remove all the nodes that are not connected to 1 and n, then apply the previous solution in the new graph."
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minScore(int n, vector<vector<int>>& roads) {\n    int ans = INT_MAX;\n    vector<vector<pair<int, int>>> graph(n);  // graph[u] := [(v, distance)]\n    queue<int> q{{0}};\n    vector<bool> seen(n);\n    seen[0] = true;\n\n    for (const vector<int>& r : roads) {\n      const int u = r[0] - 1;\n      const int v = r[1] - 1;\n      const int distance = r[2];\n      graph[u].emplace_back(v, distance);\n      graph[v].emplace_back(u, distance);\n    }\n\n    while (!q.empty()) {\n      const int u = q.front();\n      q.pop();\n      for (const auto& [v, d] : graph[u]) {\n        ans = min(ans, d);\n        if (seen[v])\n          continue;\n        q.push(v);\n        seen[v] = true;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minScore(int n, int[][] roads) {\n    int ans = Integer.MAX_VALUE;\n    List<Pair<Integer, Integer>>[] graph = new List[n]; // graph[u] := [(v, distance)]\n    Queue<Integer> q = new ArrayDeque<>(Arrays.asList(0));\n    boolean[] seen = new boolean[n];\n    seen[0] = true;\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (final int[] r : roads) {\n      final int u = r[0] - 1;\n      final int v = r[1] - 1;\n      final int distance = r[2];\n      graph[u].add(new Pair<>(v, distance));\n      graph[v].add(new Pair<>(u, distance));\n    }\n\n    while (!q.isEmpty()) {\n      final int u = q.poll();\n      for (Pair<Integer, Integer> pair : graph[u]) {\n        final int v = pair.getKey();\n        final int d = pair.getValue();\n        ans = Math.min(ans, d);\n        if (seen[v])\n          continue;\n        q.offer(v);\n        seen[v] = true;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minScore(self, n: int, roads: List[List[int]]) -> int:\n    ans = math.inf\n    graph = [[] for _ in range(n + 1)]  # graph[u] := [(v, distance)]\n    q = collections.deque([1])\n    seen = {1}\n\n    for u, v, distance in roads:\n      graph[u].append((v, distance))\n      graph[v].append((u, distance))\n\n    while q:\n      u = q.popleft()\n      for v, d in graph[u]:\n        ans = min(ans, d)\n        if v in seen:\n          continue\n        q.append(v)\n        seen.add(v)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}