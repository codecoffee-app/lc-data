{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1039",
            "title": "Minimum Score Triangulation of Polygon",
            "titleSlug": "minimum-score-triangulation-of-polygon",
            "content": "<p>You have a convex <code>n</code>-sided polygon where each vertex has an integer value. You are given an integer array <code>values</code> where <code>values[i]</code> is the value of the <code>i<sup>th</sup></code> vertex (i.e., <strong>clockwise order</strong>).</p>\n\n<p>You will <strong>triangulate</strong> the polygon into <code>n - 2</code> triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all <code>n - 2</code> triangles in the triangulation.</p>\n\n<p>Return <em>the smallest possible total score that you can achieve with some triangulation of the polygon</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/shape1.jpg\" style=\"width: 201px; height: 133px;\" />\n<pre>\n<strong>Input:</strong> values = [1,2,3]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The polygon is already triangulated, and the score of the only triangle is 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/shape2.jpg\" style=\"width: 446px; height: 163px;\" />\n<pre>\n<strong>Input:</strong> values = [3,7,4,5]\n<strong>Output:</strong> 144\n<strong>Explanation:</strong> There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.\nThe minimum score is 144.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/shape3.jpg\" style=\"width: 207px; height: 163px;\" />\n<pre>\n<strong>Input:</strong> values = [1,3,1,4,1,5]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == values.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= values[i] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1756,
            "dislikes": 163,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"44.6K\", \"totalSubmission\": \"76.5K\", \"totalAcceptedRaw\": 44590, \"totalSubmissionRaw\": 76538, \"acRate\": \"58.3%\"}",
            "hints": [
                "Without loss of generality, there is a triangle that uses adjacent vertices A[0] and A[N-1] (where N = A.length).  Depending on your choice K of it, this breaks down the triangulation into two subproblems A[1:K] and A[K+1:N-1]."
            ],
            "rephrased": {
                "body": "Given a convex n-sided polygon with integer values at each vertex, represented by the integer array `values` (clockwise order), triangulate the polygon into n-2 triangles.  The value of each triangle is the product of its vertices, and the total score is the sum of these triangle values.\n\nDetermine the smallest possible total score achievable through triangulation.",
                "constraints": [
                    "n == values.length",
                    "3 <= n <= 50",
                    "1 <= values[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "values = [1,2,3]",
                        "output": "6",
                        "explanation": "The polygon is already triangulated, and the score of the only triangle is 1 * 2 * 3 = 6."
                    },
                    {
                        "input": "values = [3,7,4,5]",
                        "output": "144",
                        "explanation": "There are two triangulations. One has a score of 3*7*5 + 4*5*7 = 245. The other has a score of 3*4*5 + 3*4*7 = 144. The minimum score is 144."
                    },
                    {
                        "input": "values = [1,3,1,4,1,5]",
                        "output": "13",
                        "explanation": "The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 3+4+5+1 = 13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Without loss of generality, there is a triangle that uses adjacent vertices A[0] and A[N-1] (where N = A.length).  Depending on your choice K of it, this breaks down the triangulation into two subproblems A[1:K] and A[K+1:N-1]."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minScoreTriangulation(vector<int>& values) {\n    const int n = values.size();\n    vector<vector<int>> dp(n, vector<int>(n));\n\n    for (int j = 2; j < n; ++j)\n      for (int i = j - 2; i >= 0; --i) {\n        dp[i][j] = INT_MAX;\n        for (int k = i + 1; k < j; ++k)\n          dp[i][j] =\n              min(dp[i][j],\n                  dp[i][k] + values[i] * values[k] * values[j] + dp[k][j]);\n      }\n\n    return dp[0][n - 1];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minScoreTriangulation(int[] values) {\n    final int n = values.length;\n    int[][] dp = new int[n][n];\n\n    for (int j = 2; j < n; ++j)\n      for (int i = j - 2; i >= 0; --i) {\n        dp[i][j] = Integer.MAX_VALUE;\n        for (int k = i + 1; k < j; ++k)\n          dp[i][j] = Math.min(dp[i][j], dp[i][k] + values[i] * values[k] * values[j] + dp[k][j]);\n      }\n\n    return dp[0][n - 1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minScoreTriangulation(self, values: List[int]) -> int:\n    n = len(values)\n    dp = [[0] * n for _ in range(n)]\n\n    for j in range(2, n):\n      for i in range(j - 2, -1, -1):\n        dp[i][j] = math.inf\n        for k in range(i + 1, j):\n          dp[i][j] = min(dp[i][j],\n                         dp[i][k] + values[i] * values[k] * values[j] + dp[k][j])\n\n    return dp[0][n - 1]\n",
                "lang_text": "py"
            }
        }
    }
}