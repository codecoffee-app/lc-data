{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2808",
            "title": "Minimum Seconds to Equalize a Circular Array",
            "titleSlug": "minimum-seconds-to-equalize-a-circular-array",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> containing <code>n</code> integers.</p>\n\n<p>At each second, you perform the following operation on the array:</p>\n\n<ul>\n\t<li>For every index <code>i</code> in the range <code>[0, n - 1]</code>, replace <code>nums[i]</code> with either <code>nums[i]</code>, <code>nums[(i - 1 + n) % n]</code>, or <code>nums[(i + 1) % n]</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that all the elements get replaced simultaneously.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of seconds needed to make all elements in the array</em> <code>nums</code> <em>equal</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can equalize the array in 1 second in the following way:\n- At 1<sup>st</sup> second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2].\nIt can be proven that 1 second is the minimum amount of seconds needed for equalizing the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,3,3,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can equalize the array in 2 seconds in the following way:\n- At 1<sup>st</sup> second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3].\n- At 2<sup>nd</sup> second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3].\nIt can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,5,5,5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We don&#39;t need to perform any operations as all elements in the initial array are the same.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 508,
            "dislikes": 30,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.2K\", \"totalSubmission\": \"56.8K\", \"totalAcceptedRaw\": 15156, \"totalSubmissionRaw\": 56783, \"acRate\": \"26.7%\"}",
            "hints": [
                "For every possible x - the final value of the array, calculate the number of seconds needed to make all elements equal to x.",
                "Notice that if you take two consecutive occurrences (i, j) of x, then the number of operations to make segment [i + 1, j - 1] equal to x is floor((j - i) / 2)"
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` containing `n` integers, determine the minimum number of seconds required to make all elements in the array equal.  In each second, every element `nums[i]` can be replaced by itself, its left neighbor `nums[(i - 1 + n) % n]`, or its right neighbor `nums[(i + 1) % n]`. All replacements happen simultaneously.",
                "constraints": [
                    "1 <= n == nums.length <= 10^5",
                    "1 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1,2,1,2]",
                        "output": "1",
                        "explanation": "The array can be equalized in 1 second by replacing each element. For instance, at the 1st second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2]. This is the minimum time needed."
                    },
                    {
                        "input": "[2,1,3,3,2]",
                        "output": "2",
                        "explanation": "The array can be equalized in 2 seconds.  At the 1st second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3].  At the 2nd second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3]."
                    },
                    {
                        "input": "[5,5,5,5]",
                        "output": "0",
                        "explanation": "No operations are needed since all elements are already equal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For every possible x - the final value of the array, calculate the number of seconds needed to make all elements equal to x.",
            "Notice that if you take two consecutive occurrences (i, j) of x, then the number of operations to make segment [i + 1, j - 1] equal to x is floor((j - i) / 2)"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumSeconds(vector<int>& nums) {\n    const int n = nums.size();\n    int ans = n;\n    unordered_map<int, vector<int>> numToIndices;\n\n    for (int i = 0; i < n; ++i)\n      numToIndices[nums[i]].push_back(i);\n\n    for (const auto& [_, indices] : numToIndices) {\n      int seconds = getSeconds(indices.front() + n, indices.back());\n      for (int i = 1; i < indices.size(); ++i)\n        seconds = max(seconds, getSeconds(indices[i], indices[i - 1]));\n      ans = min(ans, seconds);\n    }\n\n    return ans;\n  }\n\n private:\n  // Returns the number of seconds require to make nums[i..j] the same.\n  int getSeconds(int i, int j) {\n    return (i - j) / 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumSeconds(List<Integer> nums) {\n    int n = nums.size();\n    int ans = n;\n    Map<Integer, List<Integer>> numToIndices = new HashMap<>();\n\n    for (int i = 0; i < n; ++i) {\n      numToIndices.putIfAbsent(nums.get(i), new ArrayList<>());\n      numToIndices.get(nums.get(i)).add(i);\n    }\n\n    for (List<Integer> indices : numToIndices.values()) {\n      int seconds = getSeconds(indices.get(0) + n, indices.get(indices.size() - 1));\n      for (int i = 1; i < indices.size(); ++i)\n        seconds = Math.max(seconds, getSeconds(indices.get(i), indices.get(i - 1)));\n      ans = Math.min(ans, seconds);\n    }\n\n    return ans;\n  }\n\n  // Returns the number of seconds required to make nums[i..j] the same.\n  private int getSeconds(int i, int j) {\n    return (i - j) / 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumSeconds(self, nums: List[int]) -> int:\n    n = len(nums)\n    ans = n\n    numToIndices = collections.defaultdict(list)\n\n    for i, num in enumerate(nums):\n      numToIndices[num].append(i)\n\n    def getSeconds(i: int, j: int) -> int:\n      \"\"\"Returns the number of seconds required to make nums[i..j] the same.\"\"\"\n      return (i - j) // 2\n\n    for indices in numToIndices.values():\n      seconds = getSeconds(indices[0] + n, indices[-1])\n      for i in range(1, len(indices)):\n        seconds = max(seconds, getSeconds(indices[i], indices[i - 1]))\n      ans = min(ans, seconds)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}