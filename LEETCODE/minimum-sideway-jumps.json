{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1824",
            "title": "Minimum Sideway Jumps",
            "titleSlug": "minimum-sideway-jumps",
            "content": "<p>There is a <strong>3 lane road</strong> of length <code>n</code> that consists of <code>n + 1</code> <strong>points</strong> labeled from <code>0</code> to <code>n</code>. A frog <strong>starts</strong> at point <code>0</code> in the <strong>second </strong>lane<strong> </strong>and wants to jump to point <code>n</code>. However, there could be obstacles along the way.</p>\n\n<p>You are given an array <code>obstacles</code> of length <code>n + 1</code> where each <code>obstacles[i]</code> (<strong>ranging from 0 to 3</strong>) describes an obstacle on the lane <code>obstacles[i]</code> at point <code>i</code>. If <code>obstacles[i] == 0</code>, there are no obstacles at point <code>i</code>. There will be <strong>at most one</strong> obstacle in the 3 lanes at each point.</p>\n\n<ul>\n\t<li>For example, if <code>obstacles[2] == 1</code>, then there is an obstacle on lane 1 at point 2.</li>\n</ul>\n\n<p>The frog can only travel from point <code>i</code> to point <code>i + 1</code> on the same lane if there is not an obstacle on the lane at point <code>i + 1</code>. To avoid obstacles, the frog can also perform a <strong>side jump</strong> to jump to <strong>another</strong> lane (even if they are not adjacent) at the <strong>same</strong> point if there is no obstacle on the new lane.</p>\n\n<ul>\n\t<li>For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.</li>\n</ul>\n\n<p>Return<em> the <strong>minimum number of side jumps</strong> the frog needs to reach <strong>any lane</strong> at point n starting from lane <code>2</code> at point 0.</em></p>\n\n<p><strong>Note:</strong> There will be no obstacles on points <code>0</code> and <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex1.png\" style=\"width: 500px; height: 244px;\" />\n<pre>\n<strong>Input:</strong> obstacles = [0,1,2,3,0]\n<strong>Output:</strong> 2 \n<strong>Explanation:</strong> The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\nNote that the frog can jump over obstacles only when making side jumps (as shown at point 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex2.png\" style=\"width: 500px; height: 196px;\" />\n<pre>\n<strong>Input:</strong> obstacles = [0,1,1,3,3,0]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no obstacles on lane 2. No side jumps are required.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex3.png\" style=\"width: 500px; height: 196px;\" />\n<pre>\n<strong>Input:</strong> obstacles = [0,2,1,0,3,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The optimal solution is shown by the arrows above. There are 2 side jumps.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>obstacles.length == n + 1</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= obstacles[i] &lt;= 3</code></li>\n\t<li><code>obstacles[0] == obstacles[n] == 0</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1140,
            "dislikes": 46,
            "similarQuestions": "[{\"title\": \"Frog Jump\", \"titleSlug\": \"frog-jump\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"36.8K\", \"totalSubmission\": \"73.8K\", \"totalAcceptedRaw\": 36767, \"totalSubmissionRaw\": 73753, \"acRate\": \"49.9%\"}",
            "hints": [
                "At a given point, there are only 3 possible states for where the frog can be.",
                "Check all the ways to move from one point to the next and update the minimum side jumps for each lane."
            ],
            "rephrased": {
                "body": "A frog starts at lane 2, point 0 of a 3-lane road of length 'n'. The goal is to reach point 'n' on any lane with the minimum number of side jumps. Obstacles are present on certain lanes at certain points. The frog can move forward one point on the same lane if no obstacle is present.  It can also perform side jumps to any other lane at the same point, even if the lanes are not adjacent, as long as there's no obstacle on the target lane. Given an array 'obstacles' where obstacles[i] indicates the lane with an obstacle at point 'i' (0 means no obstacle), determine the minimum side jumps required.",
                "constraints": [
                    "obstacles.length == n + 1",
                    "1 <= n <= 5 * 10^5",
                    "0 <= obstacles[i] <= 3",
                    "obstacles[0] == obstacles[n] == 0"
                ],
                "testcases": [
                    {
                        "input": "[0,1,2,3,0]",
                        "output": "2",
                        "explanation": "The frog starts at lane 2, point 0. It moves to point 1. At point 2, the frog jumps from lane 2 to lane 3 (1 side jump) and then to lane 1(2 side jumps). it jumps to lane 3( 1 side jump) to avoid obstacle 3. Finally, it moves to point 4 on lane 3 to reach the end. The optimal path involves 2 side jumps."
                    },
                    {
                        "input": "[0,1,1,3,3,0]",
                        "output": "0",
                        "explanation": "Since there are no obstacles on lane 2, the frog can move straight from point 0 to point 5 without any side jumps."
                    },
                    {
                        "input": "[0,2,1,0,3,0]",
                        "output": "2",
                        "explanation": "The frog starts on lane 2. At point 1, it encounters an obstacle on lane 2, forcing a side jump to either lane 1 or lane 3. Suppose it jumps to lane 3 (1 jump). Then at point 2, it has to jump to lane 1. The obstacles array is [0,2,1,0,3,0], which implies that there is an obstacle at index = 1, lane = 2, index = 2 lane = 1. Hence it needs to jump to lane 3 to avoid the obstacles at index 1, then needs to jump again to lane 1. At point 4 the frog avoids obstacle 3 by travelling on lane 1. the total jumps are hence 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "frog-jump",
                "title": "Frog Jump",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "At a given point, there are only 3 possible states for where the frog can be.",
            "Check all the ways to move from one point to the next and update the minimum side jumps for each lane."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSideJumps(vector<int>& obstacles) {\n    constexpr int kInf = 1e6;\n\n    // dp[i] := min jump to reach lane i\n    vector<int> dp{kInf, 1, 0, 1};\n\n    for (const int obstacle : obstacles) {\n      if (obstacle > 0)\n        dp[obstacle] = kInf;\n      for (int i = 1; i <= 3; ++i)  // Current\n        if (i != obstacle)\n          for (int j = 1; j <= 3; ++j)  // Prev\n            dp[i] = min({dp[i], dp[j] + (i == j ? 0 : 1)});\n    }\n\n    return *min_element(dp.begin(), dp.end());\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSideJumps(int[] obstacles) {\n    final int kInf = (int) 1e6;\n\n    // dp[i] := min jump to reach lane i\n    int[] dp = {kInf, 1, 0, 1};\n\n    for (final int obstacle : obstacles) {\n      if (obstacle > 0)\n        dp[obstacle] = kInf;\n      for (int i = 1; i <= 3; ++i) // Current\n        if (i != obstacle)\n          for (int j = 1; j <= 3; ++j) // Prev\n            dp[i] = Math.min(dp[i], dp[j] + (i == j ? 0 : 1));\n    }\n\n    return Arrays.stream(dp).min().getAsInt();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSideJumps(self, obstacles: List[int]) -> int:\n    kInf = 1e6\n\n    # dp[i] := min jump to reach lane i\n    dp = [kInf, 1, 0, 1]\n\n    for obstacle in obstacles:\n      print(dp)\n      if obstacle > 0:\n        dp[obstacle] = kInf\n      for i in range(1, 4):  # Current\n        if i != obstacle:\n          for j in range(1, 4):  # Prev\n            dp[i] = min(dp[i], dp[j] + (0 if i == j else 1))\n\n    return min(dp)\n",
                "lang_text": "py"
            }
        }
    }
}