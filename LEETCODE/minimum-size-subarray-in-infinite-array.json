{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2875",
            "title": "Minimum Size Subarray in Infinite Array",
            "titleSlug": "minimum-size-subarray-in-infinite-array",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> and an integer <code>target</code>.</p>\n\n<p>A <strong>0-indexed</strong> array <code>infinite_nums</code> is generated by infinitely appending the elements of <code>nums</code> to itself.</p>\n\n<p>Return <em>the length of the <strong>shortest</strong> subarray of the array </em><code>infinite_nums</code><em> with a sum equal to </em><code>target</code><em>.</em> If there is no such subarray return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], target = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example infinite_nums = [1,2,3,1,2,3,1,2,...].\nThe subarray in the range [1,2], has the sum equal to target = 5 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,2,3], target = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example infinite_nums = [1,1,1,2,3,1,1,1,2,3,1,1,...].\nThe subarray in the range [4,5], has the sum equal to target = 4 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,6,8], target = 3\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> In this example infinite_nums = [2,4,6,8,2,4,6,8,...].\nIt can be proven that there is no subarray with sum equal to target = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 361,
            "dislikes": 25,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.8K\", \"totalSubmission\": \"61.2K\", \"totalAcceptedRaw\": 18822, \"totalSubmissionRaw\": 61151, \"acRate\": \"30.8%\"}",
            "hints": [
                "Notice that, <code>target</code> is either: A subarray of <code>nums</code>, or <code>prefix_sum[i]</code> + <code> k * sum(nums) </code> + <code>suffix_sum[j]</code> for some <code>i, j, k</code>.",
                "You can solve the problem for those two separate cases using hash map and prefix sums."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` and an integer `target`, consider an infinite array `infinite_nums` created by repeatedly appending `nums` to itself. Find the length of the shortest subarray within `infinite_nums` whose sum equals `target`. If no such subarray exists, return -1.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^5",
                    "1 <= target <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3], target = 5",
                        "output": "2",
                        "explanation": "The subarray [2, 3] (starting at index 1 in `nums`) sums to 5 and has a length of 2. This is the shortest subarray in the infinite array that satisfies the condition."
                    },
                    {
                        "input": "nums = [1,1,1,2,3], target = 4",
                        "output": "2",
                        "explanation": "The subarray [1, 3] (starting at index 4 in `nums`) sums to 4 and has a length of 2. This is the shortest subarray in the infinite array that satisfies the condition."
                    },
                    {
                        "input": "nums = [2,4,6,8], target = 3",
                        "output": "-1",
                        "explanation": "There is no subarray within the infinite array that sums to 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Notice that, <code>target</code> is either: A subarray of <code>nums</code>, or <code>prefix_sum[i]</code> + <code> k * sum(nums) </code> + <code>suffix_sum[j]</code> for some <code>i, j, k</code>.",
            "You can solve the problem for those two separate cases using hash map and prefix sums."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSizeSubarray(vector<int>& nums, int target) {\n    const long sum = accumulate(nums.begin(), nums.end(), 0L);\n    const int n = nums.size();\n    const int remainingTarget = target % sum;\n    const int repeatLength = (target / sum) * n;\n    if (remainingTarget == 0)\n      return repeatLength;\n\n    int suffixPlusPrefixLength = n;\n    long prefix = 0;\n    unordered_map<long, int> prefixToIndex{{0, -1}};\n\n    for (int i = 0; i < 2 * n; ++i) {\n      prefix += nums[i % n];\n      if (const auto it = prefixToIndex.find(prefix - remainingTarget);\n          it != prefixToIndex.cend())\n        suffixPlusPrefixLength = min(suffixPlusPrefixLength, i - it->second);\n      prefixToIndex[prefix] = i;\n    }\n\n    return suffixPlusPrefixLength == n ? -1\n                                       : suffixPlusPrefixLength + repeatLength;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSizeSubarray(int[] nums, int target) {\n    final long sum = Arrays.stream(nums).asLongStream().sum();\n    final int n = nums.length;\n    final int remainingTarget = (int) (target % sum);\n    final int repeatLength = (int) (target / sum) * n;\n    if (remainingTarget == 0)\n      return repeatLength;\n\n    int suffixPlusPrefixLength = n;\n    long prefix = 0;\n    HashMap<Long, Integer> prefixToIndex = new HashMap<>();\n    prefixToIndex.put(0L, -1);\n\n    for (int i = 0; i < 2 * n; ++i) {\n      prefix += nums[i % n];\n      if (prefixToIndex.containsKey(prefix - remainingTarget))\n        suffixPlusPrefixLength =\n            Math.min(suffixPlusPrefixLength, i - prefixToIndex.get(prefix - remainingTarget));\n      prefixToIndex.put(prefix, i);\n    }\n\n    return suffixPlusPrefixLength == n ? -1 : repeatLength + suffixPlusPrefixLength;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSizeSubarray(self, nums: List[int], target: int) -> int:\n    summ = sum(nums)\n    n = len(nums)\n    remainingTarget = target % summ\n    repeatLength = (target // summ) * n\n    if remainingTarget == 0:\n      return repeatLength\n\n    suffixPlusPrefixLength = n\n    prefix = 0\n    prefixToIndex = {0: -1}\n\n    for i in range(2 * n):\n      prefix += nums[i % n]\n      if prefix - remainingTarget in prefixToIndex:\n        suffixPlusPrefixLength = min(\n            suffixPlusPrefixLength,\n            i - prefixToIndex[prefix - remainingTarget])\n      prefixToIndex[prefix] = i\n\n    return -1 if suffixPlusPrefixLength == n else suffixPlusPrefixLength + repeatLength\n",
                "lang_text": "py"
            }
        }
    }
}