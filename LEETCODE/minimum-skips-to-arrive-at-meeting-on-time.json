{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1883",
            "title": "Minimum Skips to Arrive at Meeting On Time",
            "titleSlug": "minimum-skips-to-arrive-at-meeting-on-time",
            "content": "<p>You are given an integer <code>hoursBefore</code>, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through <code>n</code> roads. The road lengths are given as an integer array <code>dist</code> of length <code>n</code>, where <code>dist[i]</code> describes the length of the <code>i<sup>th</sup></code> road in <strong>kilometers</strong>. In addition, you are given an integer <code>speed</code>, which is the speed (in <strong>km/h</strong>) you will travel at.</p>\n\n<p>After you travel road <code>i</code>, you must rest and wait for the <strong>next integer hour</strong> before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting.</p>\n\n<ul>\n\t<li>For example, if traveling a road takes <code>1.4</code> hours, you must wait until the <code>2</code> hour mark before traveling the next road. If traveling a road takes exactly&nbsp;<code>2</code>&nbsp;hours, you do not need to wait.</li>\n</ul>\n\n<p>However, you are allowed to <strong>skip</strong> some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks.</p>\n\n<ul>\n\t<li>For example, suppose traveling the first road takes <code>1.4</code> hours and traveling the second road takes <code>0.6</code> hours. Skipping the rest after the first road will mean you finish traveling the second road right at the <code>2</code> hour mark, letting you start traveling the third road immediately.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum number of skips required</strong> to arrive at the meeting on time, or</em> <code>-1</code><em> if it is<strong> impossible</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [1,3,2], speed = 4, hoursBefore = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nWithout skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours.\nYou can skip the first rest to arrive in ((1/4 + <u>0</u>) + (3/4 + 0)) + (2/4) = 1.5 hours.\nNote that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [7,3,5,5], speed = 2, hoursBefore = 10\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nWithout skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.\nYou can skip the first and third rest to arrive in ((7/2 + <u>0</u>) + (3/2 + 0)) + ((5/2 + <u>0</u>) + (5/2)) = 10 hours.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [7,3,5,5], speed = 1, hoursBefore = 10\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is impossible to arrive at the meeting on time even if you skip all the rests.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == dist.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= dist[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= speed &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= hoursBefore &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 324,
            "dislikes": 49,
            "similarQuestions": "[{\"title\": \"Minimum Speed to Arrive on Time\", \"titleSlug\": \"minimum-speed-to-arrive-on-time\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Time to Finish the Race\", \"titleSlug\": \"minimum-time-to-finish-the-race\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.4K\", \"totalSubmission\": \"17.1K\", \"totalAcceptedRaw\": 6415, \"totalSubmissionRaw\": 17053, \"acRate\": \"37.6%\"}",
            "hints": [
                "Is there something you can keep track of from one road to another?",
                "How would knowing the start time for each state help us solve the problem?"
            ],
            "rephrased": {
                "body": "Given an array `dist` representing the lengths of `n` roads in kilometers, an integer `speed` representing your traveling speed in km/h, and an integer `hoursBefore` representing the total time you have to reach the meeting. You must travel each road in order. After traveling each road (except the last), you must wait for the next integer hour before starting the next road. You can skip rests to arrive on time. Return the minimum number of skips required to arrive at the meeting on time. Return -1 if it's impossible to arrive on time.",
                "constraints": [
                    "n == dist.length",
                    "1 <= n <= 1000",
                    "1 <= dist[i] <= 10^5",
                    "1 <= speed <= 10^6",
                    "1 <= hoursBefore <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "dist = [1,3,2], speed = 4, hoursBefore = 2",
                        "output": "1",
                        "explanation": "Without skipping any rests, the total travel time is (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours. By skipping the first rest, the travel time becomes ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours, which is within the allowed time."
                    },
                    {
                        "input": "dist = [7,3,5,5], speed = 2, hoursBefore = 10",
                        "output": "2",
                        "explanation": "Without skipping any rests, the total travel time is (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours. By skipping the first and third rests, the travel time becomes ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours, which is within the allowed time."
                    },
                    {
                        "input": "dist = [7,3,5,5], speed = 1, hoursBefore = 10",
                        "output": "-1",
                        "explanation": "It is impossible to arrive at the meeting on time even if you skip all the rests."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-speed-to-arrive-on-time",
                "title": "Minimum Speed to Arrive on Time",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-time-to-finish-the-race",
                "title": "Minimum Time to Finish the Race",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Is there something you can keep track of from one road to another?",
            "How would knowing the start time for each state help us solve the problem?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSkips(vector<int>& dist, int speed, int hoursBefore) {\n    constexpr double kInf = 1e7;\n    constexpr double kEps = 1e-9;\n    const int n = dist.size();\n    // dp[i][j] := min time w/ prev i-th road and j skips\n    vector<vector<double>> dp(n + 1, vector<double>(n + 1, kInf));\n    dp[0][0] = 0;\n\n    for (int i = 1; i <= n; ++i) {\n      const double d = dist[i - 1];\n      dp[i][0] = ceil(dp[i - 1][0] + d / speed - kEps);\n      for (int j = 1; j <= i; ++j)\n        dp[i][j] = min(dp[i - 1][j - 1] + d / speed,\n                       ceil(dp[i - 1][j] + d / speed - kEps));\n    }\n\n    for (int j = 0; j <= n; ++j)\n      if (dp[n][j] <= hoursBefore)\n        return j;\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSkips(int[] dist, int speed, int hoursBefore) {\n    final double kInf = 1e7;\n    final double kEps = 1e-9;\n    final int n = dist.length;\n    // dp[i][j] := min time w/ prev i-th road and j skips\n    double[][] dp = new double[n + 1][n + 1];\n    Arrays.stream(dp).forEach(A -> Arrays.fill(A, kInf));\n    dp[0][0] = 0;\n\n    for (int i = 1; i <= n; ++i) {\n      final double d = dist[i - 1];\n      dp[i][0] = Math.ceil(dp[i - 1][0] + d / speed - kEps);\n      for (int j = 1; j <= i; ++j)\n        dp[i][j] =\n            Math.min(dp[i - 1][j - 1] + d / speed, Math.ceil(dp[i - 1][j] + d / speed - kEps));\n    }\n\n    for (int j = 0; j <= n; ++j)\n      if (dp[n][j] <= hoursBefore)\n        return j;\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSkips(self, dist: List[int], speed: int, hoursBefore: int) -> int:\n    kInf = 10**7\n    kEps = 1e-9\n    n = len(dist)\n    # dp[i][j] := min time w/ prev i-th road and j skips\n    dp = [[kInf] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i, d in enumerate(dist, 1):\n      dp[i][0] = math.ceil(dp[i - 1][0] + d / speed - kEps)\n      for j in range(1, i + 1):\n        dp[i][j] = min(dp[i - 1][j - 1] + d / speed,\n                       math.ceil(dp[i - 1][j] + d / speed - kEps))\n\n    for j, time in enumerate(dp[-1]):\n      if time <= hoursBefore:\n        return j\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}