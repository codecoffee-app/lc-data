{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1889",
            "title": "Minimum Space Wasted From Packaging",
            "titleSlug": "minimum-space-wasted-from-packaging",
            "content": "<p>You have <code>n</code> packages that you are trying to place in boxes, <strong>one package in each box</strong>. There are <code>m</code> suppliers that each produce boxes of <strong>different sizes</strong> (with infinite supply). A package can be placed in a box if the size of the package is <strong>less than or equal to</strong> the size of the box.</p>\n\n<p>The package sizes are given as an integer array <code>packages</code>, where <code>packages[i]</code> is the <strong>size</strong> of the <code>i<sup>th</sup></code> package. The suppliers are given as a 2D integer array <code>boxes</code>, where <code>boxes[j]</code> is an array of <strong>box sizes</strong> that the <code>j<sup>th</sup></code> supplier produces.</p>\n\n<p>You want to choose a <strong>single supplier</strong> and use boxes from them such that the <strong>total wasted space </strong>is <strong>minimized</strong>. For each package in a box, we define the space <strong>wasted</strong> to be <code>size of the box - size of the package</code>. The <strong>total wasted space</strong> is the sum of the space wasted in <strong>all</strong> the boxes.</p>\n\n<ul>\n\t<li>For example, if you have to fit packages with sizes <code>[2,3,5]</code> and the supplier offers boxes of sizes <code>[4,8]</code>, you can fit the packages of size-<code>2</code> and size-<code>3</code> into two boxes of size-<code>4</code> and the package with size-<code>5</code> into a box of size-<code>8</code>. This would result in a waste of <code>(4-2) + (4-3) + (8-5) = 6</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum total wasted space</strong> by choosing the box supplier <strong>optimally</strong>, or </em><code>-1</code> <i>if it is <strong>impossible</strong> to fit all the packages inside boxes. </i>Since the answer may be <strong>large</strong>, return it <strong>modulo </strong><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> packages = [2,3,5], boxes = [[4,8],[2,8]]\n<strong>Output:</strong> 6\n<strong>Explanation</strong>: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.\nThe total waste is (4-2) + (4-3) + (8-5) = 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no box that the package of size 5 can fit in.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.\nThe total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == packages.length</code></li>\n\t<li><code>m == boxes.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= packages[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= boxes[j].length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= boxes[j][k] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>sum(boxes[j].length) &lt;= 10<sup>5</sup></code></li>\n\t<li>The elements in <code>boxes[j]</code> are <strong>distinct</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 389,
            "dislikes": 34,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.1K\", \"totalSubmission\": \"38.3K\", \"totalAcceptedRaw\": 12088, \"totalSubmissionRaw\": 38300, \"acRate\": \"31.6%\"}",
            "hints": [
                "Given a fixed size box, is there a way to quickly query which packages (i.e., count and sizes) should end up in that box size?",
                "Do we have to order the boxes a certain way to allow us to answer the query quickly?"
            ],
            "rephrased": {
                "body": "You are given `n` packages with sizes `packages[i]` and `m` suppliers with boxes of sizes `boxes[j]`. Each package must be placed in a box from a single supplier. The goal is to minimize the total wasted space (box size - package size). Return the minimum total wasted space modulo 10^9 + 7, or -1 if it's impossible to fit all packages.",
                "constraints": [
                    "`n == packages.length`",
                    "`m == boxes.length`",
                    "`1 <= n <= 10^5`",
                    "`1 <= m <= 10^5`",
                    "`1 <= packages[i] <= 10^5`",
                    "`1 <= boxes[j].length <= 10^5`",
                    "`1 <= boxes[j][k] <= 10^5`",
                    "`sum(boxes[j].length) <= 10^5`",
                    "The elements in `boxes[j]` are distinct."
                ],
                "testcases": [
                    {
                        "input": "packages = [2,3,5], boxes = [[4,8],[2,8]]",
                        "output": "6",
                        "explanation": "The optimal choice is the first supplier. Use two size-4 boxes and one size-8 box. The total waste is (4-2) + (4-3) + (8-5) = 6."
                    },
                    {
                        "input": "packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]",
                        "output": "-1",
                        "explanation": "There is no box that the package of size 5 can fit in."
                    },
                    {
                        "input": "packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]",
                        "output": "9",
                        "explanation": "The optimal choice is the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes. The total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Given a fixed size box, is there a way to quickly query which packages (i.e., count and sizes) should end up in that box size?",
            "Do we have to order the boxes a certain way to allow us to answer the query quickly?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minWastedSpace(vector<int>& packages, vector<vector<int>>& boxes) {\n    constexpr int kMod = 1'000'000'007;\n    constexpr long kInf = 1e11;\n    const long packagesSum = accumulate(packages.begin(), packages.end(), 0L);\n    long minBoxesSum = kInf;\n\n    std::ranges::sort(packages);\n\n    for (vector<int>& box : boxes) {\n      std::ranges::sort(box);\n      if (box.back() < packages.back())\n        continue;\n      long accu = 0;\n      long i = 0;\n      for (const int b : box) {\n        const long j = firstGreaterEqual(packages, b + 1);\n        accu += b * (j - i);\n        i = j;\n      }\n      minBoxesSum = min(minBoxesSum, accu);\n    }\n\n    return minBoxesSum == kInf ? -1 : (minBoxesSum - packagesSum) % kMod;\n  }\n\n private:\n  int firstGreaterEqual(const vector<int>& A, int target) {\n    return lower_bound(A.begin(), A.end(), target) - A.begin();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minWastedSpace(int[] packages, int[][] boxes) {\n    final int kMod = 1_000_000_007;\n    final long kInf = (long) 1e11;\n    final long packagesSum = Arrays.stream(packages).mapToLong(p -> p).sum();\n    long minBoxesSum = kInf;\n\n    Arrays.sort(packages);\n\n    for (int[] box : boxes) {\n      Arrays.sort(box);\n      if (box[box.length - 1] < packages[packages.length - 1])\n        continue;\n      long accu = 0;\n      long i = 0;\n      for (final int b : box) {\n        final long j = firstGreaterEqual(packages, b + 1);\n        accu += b * (j - i);\n        i = j;\n      }\n      minBoxesSum = Math.min(minBoxesSum, accu);\n    }\n\n    return minBoxesSum == kInf ? -1 : (int) ((minBoxesSum - packagesSum) % kMod);\n  }\n\n  private int firstGreaterEqual(int[] A, int target) {\n    int l = 0;\n    int r = A.length;\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A[m] >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minWastedSpace(self, packages: List[int], boxes: List[List[int]]) -> int:\n    ans = math.inf\n\n    packages.sort()\n\n    for box in boxes:\n      box.sort()\n      if box[-1] < packages[-1]:\n        continue\n      accu = 0\n      i = 0\n      for b in box:\n        j = bisect.bisect(packages, b, i)\n        accu += b * (j - i)\n        i = j\n      ans = min(ans, accu)\n\n    return -1 if ans == math.inf else (ans - sum(packages)) % int(1e9 + 7)\n",
                "lang_text": "py"
            }
        }
    }
}