{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1870",
            "title": "Minimum Speed to Arrive on Time",
            "titleSlug": "minimum-speed-to-arrive-on-time",
            "content": "<p>You are given a floating-point number <code>hour</code>, representing the amount of time you have to reach the office. To commute to the office, you must take <code>n</code> trains in sequential order. You are also given an integer array <code>dist</code> of length <code>n</code>, where <code>dist[i]</code> describes the distance (in kilometers) of the <code>i<sup>th</sup></code> train ride.</p>\n\n<p>Each train can only depart at an integer hour, so you may need to wait in between each train ride.</p>\n\n<ul>\n\t<li>For example, if the <code>1<sup>st</sup></code> train ride takes <code>1.5</code> hours, you must wait for an additional <code>0.5</code> hours before you can depart on the <code>2<sup>nd</sup></code> train ride at the 2 hour mark.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum positive integer</strong> speed <strong>(in kilometers per hour)</strong> that all the trains must travel at for you to reach the office on time, or </em><code>-1</code><em> if it is impossible to be on time</em>.</p>\n\n<p>Tests are generated such that the answer will not exceed <code>10<sup>7</sup></code> and <code>hour</code> will have <strong>at most two digits after the decimal point</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [1,3,2], hour = 6\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>At speed 1:\n- The first train ride takes 1/1 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.\n- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.\n- You will arrive at exactly the 6 hour mark.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [1,3,2], hour = 2.7\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>At speed 3:\n- The first train ride takes 1/3 = 0.33333 hours.\n- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.\n- You will arrive at the 2.66667 hour mark.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> dist = [1,3,2], hour = 1.9\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is impossible because the earliest the third train can depart is at the 2 hour mark.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == dist.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= dist[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= hour &lt;= 10<sup>9</sup></code></li>\n\t<li>There will be at most two digits after the decimal point in <code>hour</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2240,
            "dislikes": 268,
            "similarQuestions": "[{\"title\": \"Maximum Candies Allocated to K Children\", \"titleSlug\": \"maximum-candies-allocated-to-k-children\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Skips to Arrive at Meeting On Time\", \"titleSlug\": \"minimum-skips-to-arrive-at-meeting-on-time\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Time to Complete Trips\", \"titleSlug\": \"minimum-time-to-complete-trips\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"The Latest Time to Catch a Bus\", \"titleSlug\": \"the-latest-time-to-catch-a-bus\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimize Maximum of Array\", \"titleSlug\": \"minimize-maximum-of-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"95.9K\", \"totalSubmission\": \"205.3K\", \"totalAcceptedRaw\": 95923, \"totalSubmissionRaw\": 205299, \"acRate\": \"46.7%\"}",
            "hints": [
                "Given the speed the trains are traveling at, can you find the total time it takes for you to arrive?",
                "Is there a cutoff where any speeds larger will always allow you to arrive on time?"
            ],
            "rephrased": {
                "body": "You need to travel to the office using `n` trains sequentially. Given a floating-point number `hour` representing the total time available for the commute, and an integer array `dist` of length `n` where `dist[i]` is the distance of the i-th train ride, find the minimum positive integer speed (in kilometers per hour) such that you can reach the office on time. Each train departs only at integer hours, potentially requiring waiting time between rides. If it's impossible to reach the office on time, return -1.",
                "constraints": [
                    "n == dist.length",
                    "1 <= n <= 10^5",
                    "1 <= dist[i] <= 10^5",
                    "1 <= hour <= 10^9",
                    "hour has at most two digits after the decimal point"
                ],
                "testcases": [
                    {
                        "input": "dist = [1,3,2], hour = 6",
                        "output": "1",
                        "explanation": "With a speed of 1:\n- Train 1: 1/1 = 1 hour. Depart at hour 1.\n- Train 2: 3/1 = 3 hours. Depart at hour 4.\n- Train 3: 2/1 = 2 hours. Arrive at hour 6."
                    },
                    {
                        "input": "dist = [1,3,2], hour = 2.7",
                        "output": "3",
                        "explanation": "With a speed of 3:\n- Train 1: 1/3 = 0.33333 hours. Wait until hour 1 to depart.\n- Train 2: 3/3 = 1 hour. Depart at hour 2.\n- Train 3: 2/3 = 0.66667 hours. Arrive at hour 2.66667."
                    },
                    {
                        "input": "dist = [1,3,2], hour = 1.9",
                        "output": "-1",
                        "explanation": "The earliest the third train can depart is at the 2 hour mark, which exceeds the allowed travel time."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-candies-allocated-to-k-children",
                "title": "Maximum Candies Allocated to K Children",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-skips-to-arrive-at-meeting-on-time",
                "title": "Minimum Skips to Arrive at Meeting On Time",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-time-to-complete-trips",
                "title": "Minimum Time to Complete Trips",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "the-latest-time-to-catch-a-bus",
                "title": "The Latest Time to Catch a Bus",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimize-maximum-of-array",
                "title": "Minimize Maximum of Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Given the speed the trains are traveling at, can you find the total time it takes for you to arrive?",
            "Is there a cutoff where any speeds larger will always allow you to arrive on time?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSpeedOnTime(vector<int>& dist, double hour) {\n    int ans = -1;\n    int l = 1;\n    int r = 1e7;\n\n    while (l <= r) {\n      const int m = (l + r) / 2;\n      if (time(dist, hour, m) > hour) {\n        l = m + 1;\n      } else {\n        ans = m;\n        r = m - 1;\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  double time(const vector<int>& dist, double hour, int speed) {\n    double sum = 0;\n    for (int i = 0; i < dist.size() - 1; ++i)\n      sum += ceil((double)dist[i] / speed);\n    return sum + (double)dist.back() / speed;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSpeedOnTime(int[] dist, double hour) {\n    int ans = -1;\n    int l = 1;\n    int r = (int) 1e7;\n\n    while (l <= r) {\n      final int m = (l + r) / 2;\n      if (time(dist, hour, m) > hour) {\n        l = m + 1;\n      } else {\n        ans = m;\n        r = m - 1;\n      }\n    }\n\n    return ans;\n  }\n\n  private double time(int[] dist, double hour, int speed) {\n    double sum = 0;\n    for (int i = 0; i < dist.length - 1; ++i)\n      sum += Math.ceil((double) dist[i] / speed);\n    return sum + (double) dist[dist.length - 1] / speed;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSpeedOnTime(self, dist: List[int], hour: float) -> int:\n    ans = -1\n    l = 1\n    r = int(1e7)\n\n    def time(speed: int) -> float:\n      summ = 0\n      for i in range(len(dist) - 1):\n        summ += math.ceil(dist[i] / speed)\n      return summ + dist[-1] / speed\n\n    while l <= r:\n      m = (l + r) // 2\n      if time(m) > hour:\n        l = m + 1\n      else:\n        ans = m\n        r = m - 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}