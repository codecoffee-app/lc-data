{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2696",
            "title": "Minimum String Length After Removing Substrings",
            "titleSlug": "minimum-string-length-after-removing-substrings",
            "content": "<p>You are given a string <code>s</code> consisting only of <strong>uppercase</strong> English letters.</p>\n\n<p>You can apply some operations to this string where, in one operation, you can remove <strong>any</strong> occurrence of one of the substrings <code>&quot;AB&quot;</code> or <code>&quot;CD&quot;</code> from <code>s</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible length of the resulting string that you can obtain</em>.</p>\n\n<p><strong>Note</strong> that the string concatenates after removing the substring and could produce new <code>&quot;AB&quot;</code> or <code>&quot;CD&quot;</code> substrings.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ABFCACDB&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can do the following operations:\n- Remove the substring &quot;<u>AB</u>FCACDB&quot;, so s = &quot;FCACDB&quot;.\n- Remove the substring &quot;FCA<u>CD</u>B&quot;, so s = &quot;FCAB&quot;.\n- Remove the substring &quot;FC<u>AB</u>&quot;, so s = &quot;FC&quot;.\nSo the resulting length of the string is 2.\nIt can be shown that it is the minimum length that we can obtain.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ACBBD&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> We cannot do any operations on the string so the length remains the same.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code>&nbsp;consists only of uppercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 355,
            "dislikes": 9,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.3K\", \"totalSubmission\": \"56K\", \"totalAcceptedRaw\": 38286, \"totalSubmissionRaw\": 55998, \"acRate\": \"68.4%\"}",
            "hints": [
                "Can we use brute force to solve the problem?",
                "Repeatedly traverse the string to find and remove the substrings \u201cAB\u201d and \u201cCD\u201d until no more occurrences exist."
            ],
            "rephrased": {
                "body": "Given a string `s` consisting only of uppercase English letters, you can perform operations to minimize its length. In each operation, you can remove any occurrence of the substrings \"AB\" or \"CD\" from `s`. Return the minimum possible length of the resulting string after applying these operations. Note that after removing a substring, the string is concatenated, potentially creating new \"AB\" or \"CD\" substrings.",
                "constraints": [
                    "1 <= s.length <= 100",
                    "s consists only of uppercase English letters."
                ],
                "testcases": [
                    {
                        "input": "ABFCACDB",
                        "output": "2",
                        "explanation": "The string can be reduced as follows:\n1. Remove \"AB\" from \"ABFCACDB\" resulting in \"FCACDB\".\n2. Remove \"CD\" from \"FCACDB\" resulting in \"FCAB\".\n3. Remove \"AB\" from \"FCAB\" resulting in \"FC\".\nThe minimum possible length is 2."
                    },
                    {
                        "input": "ACBBD",
                        "output": "5",
                        "explanation": "No operations can be performed on the string \"ACBBD\" as it does not contain \"AB\" or \"CD\" as substrings. Therefore, the length remains 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can we use brute force to solve the problem?",
            "Repeatedly traverse the string to find and remove the substrings \u201cAB\u201d and \u201cCD\u201d until no more occurrences exist."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minLength(string s) {\n    stack<char> stack;\n\n    for (const char c : s)\n      if (c == 'B' && match(stack, 'A'))\n        stack.pop();\n      else if (c == 'D' && match(stack, 'C'))\n        stack.pop();\n      else\n        stack.push(c);\n\n    return stack.size();\n  }\n\n private:\n  bool match(const stack<char>& stack, int c) {\n    return !stack.empty() && stack.top() == c;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minLength(String s) {\n    Deque<Character> stack = new ArrayDeque<>();\n\n    for (final char c : s.toCharArray())\n      if (c == 'B' && match(stack, 'A'))\n        stack.pop();\n      else if (c == 'D' && match(stack, 'C'))\n        stack.pop();\n      else\n        stack.push(c);\n\n    return stack.size();\n  }\n\n  private boolean match(Deque<Character> stack, char c) {\n    return !stack.isEmpty() && stack.peek() == c;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minLength(self, s: str) -> int:\n    stack = []\n\n    def match(c: str) -> bool:\n      return stack and stack[-1] == c\n\n    for c in s:\n      if c == 'B' and match('A'):\n        stack.pop()\n      elif c == 'D' and match('C'):\n        stack.pop()\n      else:\n        stack.append(c)\n\n    return len(stack)\n",
                "lang_text": "py"
            }
        }
    }
}