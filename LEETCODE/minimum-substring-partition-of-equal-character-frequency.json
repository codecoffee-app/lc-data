{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3144",
            "title": "Minimum Substring Partition of Equal Character Frequency",
            "titleSlug": "minimum-substring-partition-of-equal-character-frequency",
            "content": "<p>Given a string <code>s</code>, you need to partition it into one or more <strong>balanced</strong> <span data-keyword=\"substring\">substrings</span>. For example, if <code>s == &quot;ababcc&quot;</code> then <code>(&quot;abab&quot;, &quot;c&quot;, &quot;c&quot;)</code>, <code>(&quot;ab&quot;, &quot;abc&quot;, &quot;c&quot;)</code>, and <code>(&quot;ababcc&quot;)</code> are all valid partitions, but <code>(&quot;a&quot;, <strong>&quot;bab&quot;</strong>, &quot;cc&quot;)</code>, <code>(<strong>&quot;aba&quot;</strong>, &quot;bc&quot;, &quot;c&quot;)</code>, and <code>(&quot;ab&quot;, <strong>&quot;abcc&quot;</strong>)</code> are not. The unbalanced substrings are bolded.</p>\n\n<p>Return the <strong>minimum</strong> number of substrings that you can partition <code>s</code> into.</p>\n\n<p><strong>Note:</strong> A <strong>balanced</strong> string is a string where each character in the string occurs the same number of times.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;fabccddg&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can partition the string <code>s</code> into 3 substrings in one of the following ways: <code>(&quot;fab, &quot;ccdd&quot;, &quot;g&quot;)</code>, or <code>(&quot;fabc&quot;, &quot;cd&quot;, &quot;dg&quot;)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abababaccddb&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can partition the string <code>s</code> into 2 substrings like so: <code>(&quot;abab&quot;, &quot;abaccddb&quot;)</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists only of English lowercase letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 111,
            "dislikes": 27,
            "similarQuestions": "[{\"title\": \"Partition Array for Maximum Sum\", \"titleSlug\": \"partition-array-for-maximum-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Partition String Into Minimum Beautiful Substrings\", \"titleSlug\": \"partition-string-into-minimum-beautiful-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"12K\", \"totalSubmission\": \"29.2K\", \"totalAcceptedRaw\": 11998, \"totalSubmissionRaw\": 29217, \"acRate\": \"41.1%\"}",
            "hints": [
                "Let <code>dp[i]</code> be the minimum number of partitions for the prefix ending at index <code>i + 1</code>.",
                "<code>dp[i]</code> can be calculated as the <code>min(dp[j])</code> over all <code>j</code> such that <code>j < i</code> and <code>word[j+1\u2026i]</code> is valid."
            ],
            "rephrased": {
                "body": "Given a string `s`, partition it into one or more balanced substrings. A balanced string is one where each character appears the same number of times.  The goal is to find the *minimum* number of substrings you can partition `s` into, where each substring is balanced.",
                "constraints": [
                    "1 <= s.length <= 1000",
                    "s consists only of English lowercase letters."
                ],
                "testcases": [
                    {
                        "input": "fabccddg",
                        "output": "3",
                        "explanation": "The string can be partitioned into 3 balanced substrings: (\"fab\", \"ccdd\", \"g\"). Alternatively, (\"fabc\", \"cd\", \"dg\") also gives a valid partition of 3 balanced substrings."
                    },
                    {
                        "input": "abababaccddb",
                        "output": "2",
                        "explanation": "The string can be partitioned into 2 balanced substrings: (\"abab\", \"abaccddb\")."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "partition-array-for-maximum-sum",
                "title": "Partition Array for Maximum Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "partition-string-into-minimum-beautiful-substrings",
                "title": "Partition String Into Minimum Beautiful Substrings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>dp[i]</code> be the minimum number of partitions for the prefix ending at index <code>i + 1</code>.",
            "<code>dp[i]</code> can be calculated as the <code>min(dp[j])</code> over all <code>j</code> such that <code>j < i</code> and <code>word[j+1\u2026i]</code> is valid."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumSubstringsInPartition(string s) {\n    const int n = s.length();\n    // dp[i] := the minimum number of substrings in s[0..i]\n    vector<int> dp(n, n);\n\n    for (int i = 0; i < n; ++i) {\n      vector<int> count(26);\n      for (int j = i; j >= 0; --j) {\n        ++count[s[j] - 'a'];\n        if (isBalanced(count))  // word[j..i] is balanced.\n          dp[i] = j > 0 ? min(dp[i], 1 + dp[j - 1]) : 1;\n      }\n    }\n\n    return dp.back();\n  }\n\n private:\n  static constexpr int kMax = 1001;\n\n  // Returns true if all non-zero frequencies are the same.\n  bool isBalanced(const vector<int>& count) {\n    int minfreq = kMax;\n    int maxfreq = 0;\n    for (const int freq : count)\n      if (freq > 0) {\n        minfreq = min(minfreq, freq);\n        maxfreq = max(maxfreq, freq);\n      }\n    return minfreq == maxfreq;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumSubstringsInPartition(String s) {\n    final int n = s.length();\n    // dp[i] := the minimum number of substrings in s[0..i]\n    int[] dp = new int[n];\n    Arrays.fill(dp, n);\n\n    for (int i = 0; i < n; ++i) {\n      int[] count = new int[26];\n      for (int j = i; j >= 0; --j) {\n        ++count[s.charAt(j) - 'a'];\n        if (isBalanced(count)) // word[j..i] is balanced.\n          dp[i] = j > 0 ? Math.min(dp[i], 1 + dp[j - 1]) : 1;\n      }\n    }\n\n    return dp[n - 1];\n  }\n\n  private static final int kMax = 1001;\n\n  // Returns true if all non-zero frequencies are the same.\n  private boolean isBalanced(int[] count) {\n    int minfreq = kMax;\n    int maxfreq = 0;\n    for (final int freq : count)\n      if (freq > 0) {\n        minfreq = Math.min(minfreq, freq);\n        maxfreq = Math.max(maxfreq, freq);\n      }\n    return minfreq == maxfreq;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumSubstringsInPartition(self, s: str) -> int:\n    n = len(s)\n    # dp[i] := the minimum number of substrings in s[0..i]\n    dp = [n] * n\n\n    for i in range(n):\n      count = collections.Counter()\n      for j in range(i, -1, -1):\n        count[s[j]] += 1\n        # word[j..i] is balanced.\n        if min(count.values()) == max(count.values()):\n          dp[i] = min(dp[i], 1 + dp[j - 1] if j > 0 else 1)\n\n    return dp[-1]\n",
                "lang_text": "py"
            }
        }
    }
}