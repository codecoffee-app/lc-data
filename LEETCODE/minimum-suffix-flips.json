{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1529",
            "title": "Minimum Suffix Flips",
            "titleSlug": "minimum-suffix-flips",
            "content": "<p>You are given a <strong>0-indexed</strong> binary string <code>target</code> of length <code>n</code>. You have another binary string <code>s</code> of length <code>n</code> that is initially set to all zeros. You want to make <code>s</code> equal to <code>target</code>.</p>\n\n<p>In one operation, you can pick an index <code>i</code> where <code>0 &lt;= i &lt; n</code> and flip all bits in the <strong>inclusive</strong> range <code>[i, n - 1]</code>. Flip means changing <code>&#39;0&#39;</code> to <code>&#39;1&#39;</code> and <code>&#39;1&#39;</code> to <code>&#39;0&#39;</code>.</p>\n\n<p>Return <em>the minimum number of operations needed to make </em><code>s</code><em> equal to </em><code>target</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = &quot;10111&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Initially, s = &quot;00000&quot;.\nChoose index i = 2: &quot;00<u>000</u>&quot; -&gt; &quot;00<u>111</u>&quot;\nChoose index i = 0: &quot;<u>00111</u>&quot; -&gt; &quot;<u>11000</u>&quot;\nChoose index i = 1: &quot;1<u>1000</u>&quot; -&gt; &quot;1<u>0111</u>&quot;\nWe need at least 3 flip operations to form target.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = &quot;101&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Initially, s = &quot;000&quot;.\nChoose index i = 0: &quot;<u>000</u>&quot; -&gt; &quot;<u>111</u>&quot;\nChoose index i = 1: &quot;1<u>11</u>&quot; -&gt; &quot;1<u>00</u>&quot;\nChoose index i = 2: &quot;10<u>0</u>&quot; -&gt; &quot;10<u>1</u>&quot;\nWe need at least 3 flip operations to form target.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = &quot;00000&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> We do not need any operations since the initial s already equals target.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == target.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>target[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 976,
            "dislikes": 39,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"47.4K\", \"totalSubmission\": \"65.2K\", \"totalAcceptedRaw\": 47436, \"totalSubmissionRaw\": 65164, \"acRate\": \"72.8%\"}",
            "hints": [
                "Consider a strategy where the choice of bulb with number i is increasing. In such a strategy, you no longer need to worry about bulbs that have been set to the left."
            ],
            "rephrased": {
                "body": "Given a 0-indexed binary string `target` of length `n`, and another binary string `s` of length `n` initially set to all zeros. The goal is to transform `s` into `target` using a series of flip operations. In each operation, select an index `i` (0 <= i < n) and flip all bits in the inclusive range `[i, n - 1]`. Flipping a bit means changing '0' to '1' and '1' to '0'. Determine the minimum number of flip operations required to make `s` equal to `target`.",
                "constraints": [
                    "n == target.length",
                    "1 <= n <= 10^5",
                    "target[i] is either '0' or '1'."
                ],
                "testcases": [
                    {
                        "input": "target = \"10111\"",
                        "output": "3",
                        "explanation": "Initially, s = \"00000\".\nOperation 1: Choose index i = 2: \"00000\" -> \"00111\"\nOperation 2: Choose index i = 0: \"00111\" -> \"11000\"\nOperation 3: Choose index i = 1: \"11000\" -> \"10111\"\nTherefore, the minimum number of operations needed is 3."
                    },
                    {
                        "input": "target = \"101\"",
                        "output": "3",
                        "explanation": "Initially, s = \"000\".\nOperation 1: Choose index i = 0: \"000\" -> \"111\"\nOperation 2: Choose index i = 1: \"111\" -> \"100\"\nOperation 3: Choose index i = 2: \"100\" -> \"101\"\nTherefore, the minimum number of operations needed is 3."
                    },
                    {
                        "input": "target = \"00000\"",
                        "output": "0",
                        "explanation": "Since the initial string `s` (all zeros) is already equal to `target`, no operations are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Consider a strategy where the choice of bulb with number i is increasing. In such a strategy, you no longer need to worry about bulbs that have been set to the left."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minFlips(string target) {\n    int ans = 0;\n    int state = 0;\n\n    for (const char c : target)\n      if (c - '0' != state) {\n        state = c - '0';\n        ++ans;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minFlips(String target) {\n    int ans = 0;\n    int state = 0;\n\n    for (final char c : target.toCharArray())\n      if (c - '0' != state) {\n        state = c - '0';\n        ++ans;\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}