{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2908",
            "title": "Minimum Sum of Mountain Triplets I",
            "titleSlug": "minimum-sum-of-mountain-triplets-i",
            "content": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> of integers.</p>\n\n<p>A triplet of indices <code>(i, j, k)</code> is a <strong>mountain</strong> if:</p>\n\n<ul>\n\t<li><code>i &lt; j &lt; k</code></li>\n\t<li><code>nums[i] &lt; nums[j]</code> and <code>nums[k] &lt; nums[j]</code></li>\n</ul>\n\n<p>Return <em>the <strong>minimum possible sum</strong> of a mountain triplet of</em> <code>nums</code>. <em>If no such triplet exists, return</em> <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [8,6,1,5,3]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Triplet (2, 3, 4) is a mountain triplet of sum 9 since: \n- 2 &lt; 3 &lt; 4\n- nums[2] &lt; nums[3] and nums[4] &lt; nums[3]\nAnd the sum of this triplet is nums[2] + nums[3] + nums[4] = 9. It can be shown that there are no mountain triplets with a sum of less than 9.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,8,7,10,2]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> Triplet (1, 3, 5) is a mountain triplet of sum 13 since: \n- 1 &lt; 3 &lt; 5\n- nums[1] &lt; nums[3] and nums[5] &lt; nums[3]\nAnd the sum of this triplet is nums[1] + nums[3] + nums[5] = 13. It can be shown that there are no mountain triplets with a sum of less than 13.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,5,4,3,4,5]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It can be shown that there are no mountain triplets in nums.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 150,
            "dislikes": 8,
            "similarQuestions": "[{\"title\": \"3Sum\", \"titleSlug\": \"3sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Arithmetic Triplets\", \"titleSlug\": \"number-of-arithmetic-triplets\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Value of an Ordered Triplet I\", \"titleSlug\": \"maximum-value-of-an-ordered-triplet-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                }
            ],
            "stats": "{\"totalAccepted\": \"33.1K\", \"totalSubmission\": \"51.1K\", \"totalAcceptedRaw\": 33084, \"totalSubmissionRaw\": 51126, \"acRate\": \"64.7%\"}",
            "hints": [
                "Bruteforce over all possible triplets."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` of integers, find a mountain triplet. A triplet of indices (i, j, k) is considered a mountain if i < j < k, `nums[i]` < `nums[j]`, and `nums[k]` < `nums[j]`. Return the minimum possible sum of a mountain triplet in `nums`. If no such triplet exists, return -1.",
                "constraints": [
                    "3 <= nums.length <= 50",
                    "1 <= nums[i] <= 50"
                ],
                "testcases": [
                    {
                        "input": "[8,6,1,5,3]",
                        "output": "9",
                        "explanation": "The triplet (2, 3, 4) forms a mountain since 2 < 3 < 4, nums[2] (1) < nums[3] (5), and nums[4] (3) < nums[3] (5). The sum of this triplet is 1 + 5 + 3 = 9. No other mountain triplet has a smaller sum."
                    },
                    {
                        "input": "[5,4,8,7,10,2]",
                        "output": "13",
                        "explanation": "The triplet (1, 3, 5) forms a mountain since 1 < 3 < 5, nums[1] (4) < nums[3] (7), and nums[5] (2) < nums[3] (7). The sum of this triplet is 4 + 7 + 2 = 13. No other mountain triplet has a smaller sum."
                    },
                    {
                        "input": "[6,5,4,3,4,5]",
                        "output": "-1",
                        "explanation": "There are no mountain triplets present in nums."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "3sum",
                "title": "3Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "number-of-arithmetic-triplets",
                "title": "Number of Arithmetic Triplets",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-value-of-an-ordered-triplet-i",
                "title": "Maximum Value of an Ordered Triplet I",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Bruteforce over all possible triplets."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumSum(vector<int>& nums) {\n    const int n = nums.size();\n    int ans = INT_MAX;\n    vector<int> minPrefix(n);\n    vector<int> minSuffix(n);\n\n    partial_sum(nums.begin(), nums.end(), minPrefix.begin(),\n                [](int x, int y) { return min(x, y); });\n    partial_sum(nums.rbegin(), nums.rend(), minSuffix.begin(),\n                [](int x, int y) { return min(x, y); });\n    reverse(minSuffix.begin(), minSuffix.end());\n\n    for (int i = 0; i < n; ++i)\n      if (nums[i] > minPrefix[i] && nums[i] > minSuffix[i])\n        ans = min(ans, nums[i] + minPrefix[i] + minSuffix[i]);\n\n    return ans == INT_MAX ? -1 : ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumSum(int[] nums) {\n    final int n = nums.length;\n    int ans = Integer.MAX_VALUE;\n    int[] minPrefix = new int[n];\n    int[] minSuffix = new int[n];\n\n    minPrefix[0] = nums[0];\n    minSuffix[n - 1] = nums[n - 1];\n\n    for (int i = 1; i < n; ++i)\n      minPrefix[i] = Math.min(minPrefix[i - 1], nums[i]);\n\n    for (int i = n - 2; i >= 0; --i)\n      minSuffix[i] = Math.min(minSuffix[i + 1], nums[i]);\n\n    for (int i = 0; i < n; ++i)\n      if (nums[i] > minPrefix[i] && nums[i] > minSuffix[i])\n        ans = Math.min(ans, nums[i] + minPrefix[i] + minSuffix[i]);\n\n    return ans == Integer.MAX_VALUE ? -1 : ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 2908. Minimum Sum of Mountain Triplets I\n  def minimumSum(self, nums: List[int]) -> int:\n    ans = math.inf\n    minPrefix = list(itertools.accumulate(nums, min))\n    minSuffix = list(itertools.accumulate(reversed(nums), min))[::-1]\n\n    for i, num in enumerate(nums):\n      if num > minPrefix[i] and num > minSuffix[i]:\n        ans = min(ans, num + minPrefix[i] + minSuffix[i])\n\n    return -1 if ans == math.inf else ans\n",
                "lang_text": "py"
            }
        }
    }
}