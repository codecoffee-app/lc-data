{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2333",
            "title": "Minimum Sum of Squared Difference",
            "titleSlug": "minimum-sum-of-squared-difference",
            "content": "<p>You are given two positive <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, both of length <code>n</code>.</p>\n\n<p>The <strong>sum of squared difference</strong> of arrays <code>nums1</code> and <code>nums2</code> is defined as the <strong>sum</strong> of <code>(nums1[i] - nums2[i])<sup>2</sup></code> for each <code>0 &lt;= i &lt; n</code>.</p>\n\n<p>You are also given two positive integers <code>k1</code> and <code>k2</code>. You can modify any of the elements of <code>nums1</code> by <code>+1</code> or <code>-1</code> at most <code>k1</code> times. Similarly, you can modify any of the elements of <code>nums2</code> by <code>+1</code> or <code>-1</code> at most <code>k2</code> times.</p>\n\n<p>Return <em>the minimum <strong>sum of squared difference</strong> after modifying array </em><code>nums1</code><em> at most </em><code>k1</code><em> times and modifying array </em><code>nums2</code><em> at most </em><code>k2</code><em> times</em>.</p>\n\n<p><strong>Note</strong>: You are allowed to modify the array elements to become <strong>negative</strong> integers.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0\n<strong>Output:</strong> 579\n<strong>Explanation:</strong> The elements in nums1 and nums2 cannot be modified because k1 = 0 and k2 = 0. \nThe sum of square difference will be: (1 - 2)<sup>2 </sup>+ (2 - 10)<sup>2 </sup>+ (3 - 20)<sup>2 </sup>+ (4 - 19)<sup>2</sup>&nbsp;= 579.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1\n<strong>Output:</strong> 43\n<strong>Explanation:</strong> One way to obtain the minimum sum of square difference is: \n- Increase nums1[0] once.\n- Increase nums2[2] once.\nThe minimum of the sum of square difference will be: \n(2 - 5)<sup>2 </sup>+ (4 - 8)<sup>2 </sup>+ (10 - 7)<sup>2 </sup>+ (12 - 9)<sup>2</sup>&nbsp;= 43.\nNote that, there are other ways to obtain the minimum of the sum of square difference, but there is no way to obtain a sum smaller than 43.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= k1, k2 &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 603,
            "dislikes": 36,
            "similarQuestions": "[{\"title\": \"Minimum Absolute Sum Difference\", \"titleSlug\": \"minimum-absolute-sum-difference\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Partition Array Into Two Arrays to Minimize Sum Difference\", \"titleSlug\": \"partition-array-into-two-arrays-to-minimize-sum-difference\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.1K\", \"totalSubmission\": \"51.5K\", \"totalAcceptedRaw\": 13094, \"totalSubmissionRaw\": 51531, \"acRate\": \"25.4%\"}",
            "hints": [
                "There is no difference between the purpose of k1 and k2. Adding +1 to one element in nums1 is same as performing -1 to one element in nums2, and vice versa.",
                "Reduce the sum of squared difference greedily. One operation of k should use the index that has the current maximum difference.",
                "Binary search the maximum difference for the final result."
            ],
            "rephrased": {
                "body": "Given two positive 0-indexed integer arrays `nums1` and `nums2`, both of length `n`, and two positive integers `k1` and `k2`, find the minimum sum of squared difference after modifying array `nums1` at most `k1` times and modifying array `nums2` at most `k2` times.  Modifications can be either +1 or -1.  The sum of squared difference of arrays `nums1` and `nums2` is defined as the sum of `(nums1[i] - nums2[i])^2` for each `0 <= i < n`. Note that you are allowed to modify the array elements to become negative integers.",
                "constraints": [
                    "n == nums1.length == nums2.length",
                    "1 <= n <= 10^5",
                    "0 <= nums1[i], nums2[i] <= 10^5",
                    "0 <= k1, k2 <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0",
                        "output": "579",
                        "explanation": "Since k1 and k2 are 0, the arrays cannot be modified. The sum of squared differences is (1 - 2)^2 + (2 - 10)^2 + (3 - 20)^2 + (4 - 19)^2 = 1 + 64 + 289 + 225 = 579."
                    },
                    {
                        "input": "nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1",
                        "output": "43",
                        "explanation": "One possible way to achieve the minimum sum of squared differences is to increase nums1[0] by 1 and increase nums2[2] by 1.  This results in nums1 = [2, 4, 10, 12] and nums2 = [5, 8, 7, 9].  The sum of squared differences is then (2 - 5)^2 + (4 - 8)^2 + (10 - 7)^2 + (12 - 9)^2 = 9 + 16 + 9 + 9 = 43."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-absolute-sum-difference",
                "title": "Minimum Absolute Sum Difference",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "partition-array-into-two-arrays-to-minimize-sum-difference",
                "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "There is no difference between the purpose of k1 and k2. Adding +1 to one element in nums1 is same as performing -1 to one element in nums2, and vice versa.",
            "Reduce the sum of squared difference greedily. One operation of k should use the index that has the current maximum difference.",
            "Binary search the maximum difference for the final result."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minSumSquareDiff(vector<int>& nums1, vector<int>& nums2, int k1,\n                             int k2) {\n    const vector<int> diff = getDiff(nums1, nums2);\n    int k = k1 + k2;\n    if (accumulate(diff.begin(), diff.end(), 0LL) <= k)\n      return 0;\n\n    unordered_map<int, int> count;\n    priority_queue<pair<int, int>> maxHeap;  // (num, freq)\n\n    for (const int d : diff)\n      if (d != 0)\n        ++count[d];\n\n    for (const auto& [num, freq] : count)\n      maxHeap.emplace(num, freq);\n\n    while (k > 0) {\n      const auto [maxNum, maxNumFreq] = maxHeap.top();\n      maxHeap.pop();\n      // Buck decrease in this turn\n      const int numDecreased = min(k, maxNumFreq);\n      k -= numDecreased;\n      if (maxNumFreq > numDecreased)\n        maxHeap.emplace(maxNum, maxNumFreq - numDecreased);\n      if (!maxHeap.empty() && maxHeap.top().first + 1 == maxNum) {\n        const auto [secondMaxNum, secondMaxNumFreq] = maxHeap.top();\n        maxHeap.pop();\n        maxHeap.emplace(secondMaxNum, secondMaxNumFreq + numDecreased);\n      } else if (maxNum > 1) {\n        maxHeap.emplace(maxNum - 1, numDecreased);\n      }\n    }\n\n    long long ans = 0;\n    while (!maxHeap.empty()) {\n      const auto [num, freq] = maxHeap.top();\n      maxHeap.pop();\n      ans += static_cast<long long>(num) * num * freq;\n    }\n\n    return ans;\n  }\n\n private:\n  vector<int> getDiff(const vector<int>& nums1, const vector<int>& nums2) {\n    vector<int> diff;\n    for (int i = 0; i < nums1.size(); ++i)\n      diff.push_back(abs(nums1[i] - nums2[i]));\n    return diff;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minSumSquareDiff(int[] nums1, int[] nums2, int k1, int k2) {\n    int[] diff = getDiff(nums1, nums2);\n    int k = k1 + k2;\n    if (Arrays.stream(diff).asLongStream().sum() <= k)\n      return 0;\n\n    Map<Integer, Integer> count = new HashMap<>();\n    // (num, freq)\n    Queue<Pair<Integer, Integer>> maxHeap = new PriorityQueue<>((a, b) -> b.getKey() - a.getKey());\n\n    for (final int d : diff)\n      if (d != 0)\n        count.merge(d, 1, Integer::sum);\n\n    for (Map.Entry<Integer, Integer> entry : count.entrySet())\n      maxHeap.offer(new Pair<>(entry.getKey(), entry.getValue()));\n\n    while (k > 0) {\n      Pair<Integer, Integer> pair = maxHeap.poll();\n      final int maxNum = pair.getKey();\n      final int maxNumFreq = pair.getValue();\n      // Buck decrease in this turn\n      final int numDecreased = Math.min(k, maxNumFreq);\n      k -= numDecreased;\n      if (maxNumFreq > numDecreased)\n        maxHeap.offer(new Pair<>(maxNum, maxNumFreq - numDecreased));\n      if (!maxHeap.isEmpty() && maxHeap.peek().getKey() + 1 == maxNum) {\n        Pair<Integer, Integer> secondNode = maxHeap.poll();\n        final int secondMaxNum = secondNode.getKey();\n        final int secondMaxNumFreq = secondNode.getValue();\n        maxHeap.offer(new Pair<>(secondMaxNum, secondMaxNumFreq + numDecreased));\n      } else if (maxNum > 1) {\n        maxHeap.offer(new Pair<>(maxNum - 1, numDecreased));\n      }\n    }\n\n    long ans = 0;\n    while (!maxHeap.isEmpty()) {\n      Pair<Integer, Integer> pair = maxHeap.poll();\n      final int num = pair.getKey();\n      final int freq = pair.getValue();\n      ans += (long) num * num * freq;\n    }\n\n    return ans;\n  }\n\n  private int[] getDiff(int[] nums1, int[] nums2) {\n    int[] diff = new int[nums1.length];\n    for (int i = 0; i < nums1.length; ++i)\n      diff[i] = Math.abs(nums1[i] - nums2[i]);\n    return diff;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}