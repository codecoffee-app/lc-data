{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3117",
            "title": "Minimum Sum of Values by Dividing Array",
            "titleSlug": "minimum-sum-of-values-by-dividing-array",
            "content": "<p>You are given two arrays <code>nums</code> and <code>andValues</code> of length <code>n</code> and <code>m</code> respectively.</p>\n\n<p>The <strong>value</strong> of an array is equal to the <strong>last</strong> element of that array.</p>\n\n<p>You have to divide <code>nums</code> into <code>m</code> <strong>disjoint contiguous</strong> <span data-keyword=\"subarray-nonempty\">subarrays</span> such that for the <code>i<sup>th</sup></code> subarray <code>[l<sub>i</sub>, r<sub>i</sub>]</code>, the bitwise <code>AND</code> of the subarray elements is equal to <code>andValues[i]</code>, in other words, <code>nums[l<sub>i</sub>] &amp; nums[l<sub>i</sub> + 1] &amp; ... &amp; nums[r<sub>i</sub>] == andValues[i]</code> for all <code>1 &lt;= i &lt;= m</code>, where <code>&amp;</code> represents the bitwise <code>AND</code> operator.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible sum of the <strong>values</strong> of the </em><code>m</code><em> subarrays </em><code>nums</code><em> is divided into</em>. <em>If it is not possible to divide </em><code>nums</code><em> into </em><code>m</code><em> subarrays satisfying these conditions, return</em> <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,4,3,3,2], andValues = [0,3,3,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only possible way to divide <code>nums</code> is:</p>\n\n<ol>\n\t<li><code>[1,4]</code> as <code>1 &amp; 4 == 0</code>.</li>\n\t<li><code>[3]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n\t<li><code>[3]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n\t<li><code>[2]</code> as the bitwise <code>AND</code> of a single element subarray is that element itself.</li>\n</ol>\n\n<p>The sum of the values for these subarrays is <code>4 + 3 + 3 + 2 = 12</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,5,7,7,7,5], andValues = [0,7,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">17</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are three ways to divide <code>nums</code>:</p>\n\n<ol>\n\t<li><code>[[2,3,5],[7,7,7],[5]]</code> with the sum of the values <code>5 + 7 + 5 == 17</code>.</li>\n\t<li><code>[[2,3,5,7],[7,7],[5]]</code> with the sum of the values <code>7 + 7 + 5 == 19</code>.</li>\n\t<li><code>[[2,3,5,7,7],[7],[5]]</code> with the sum of the values <code>7 + 7 + 5 == 19</code>.</li>\n</ol>\n\n<p>The minimum possible sum of the values is <code>17</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4], andValues = [2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The bitwise <code>AND</code> of the entire array <code>nums</code> is <code>0</code>. As there is no possible way to divide <code>nums</code> into a single subarray to have the bitwise <code>AND</code> of elements <code>2</code>, return <code>-1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m == andValues.length &lt;= min(n, 10)</code></li>\n\t<li><code>1 &lt;= nums[i] &lt; 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= andValues[j] &lt; 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 101,
            "dislikes": 4,
            "similarQuestions": "[{\"title\": \"Minimum Cost to Split an Array\", \"titleSlug\": \"minimum-cost-to-split-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Split With Minimum Sum\", \"titleSlug\": \"split-with-minimum-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Subarray With Bitwise OR Closest to K\", \"titleSlug\": \"find-subarray-with-bitwise-or-closest-to-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.2K\", \"totalSubmission\": \"15.2K\", \"totalAcceptedRaw\": 4231, \"totalSubmissionRaw\": 15154, \"acRate\": \"27.9%\"}",
            "hints": [
                "Let <code>dp[i][j]</code> be the optimal answer to split  <code>nums[0..(i - 1)]</code> into the first <code>j</code> andValues.",
                "<code>dp[i][j] = min(dp[(i - z)][j - 1]) + nums[i - 1]</code> over all <code>x <= z <= y</code> and <code>dp[0][0] = 0</code>, where <code>x</code> and <code>y</code> are the longest and shortest subarrays ending with <code>nums[i - 1]</code> and the bitwise-and of all the values in it is <code>andValues[j - 1]</code>.",
                "The answer is <code>dp[n][m]</code>.",
                "To calculate <code>x</code> and <code>y</code>, we can use binary search (or sliding window). Note that the more values we have, the smaller the <code>AND</code> value is.",
                "To calculate the result, we need to support RMQ (range minimum query). Segment tree is one way to do it in <code>O(log(n))</code>. But we can use Monotonic Queue since the ranges are indeed \u201csliding to right\u201d which can be reduced to the classical minimum value in sliding window problem, for a <code>O(n)</code> solution."
            ],
            "rephrased": {
                "body": "Given two arrays, `nums` of length `n` and `andValues` of length `m`, divide `nums` into `m` disjoint contiguous subarrays. The bitwise AND of the elements in the i-th subarray must equal `andValues[i]` for all `1 <= i <= m`. Return the minimum possible sum of the values of the `m` subarrays, where the value of a subarray is the last element of the subarray. If it's impossible to divide `nums` into `m` subarrays satisfying the conditions, return -1.",
                "constraints": [
                    "1 <= n == nums.length <= 10^4",
                    "1 <= m == andValues.length <= min(n, 10)",
                    "1 <= nums[i] < 10^5",
                    "0 <= andValues[j] < 10^5"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,4,3,3,2], andValues = [0,3,3,2]",
                        "output": "12",
                        "explanation": "The only possible division is [[1,4],[3],[3],[2]].  1 & 4 == 0, and the bitwise AND of a single element subarray is the element itself. The sum of the values is 4 + 3 + 3 + 2 = 12."
                    },
                    {
                        "input": "nums = [2,3,5,7,7,7,5], andValues = [0,7,5]",
                        "output": "17",
                        "explanation": "Possible divisions include [[2,3,5],[7,7,7],[5]] (sum 5+7+5 = 17), [[2,3,5,7],[7,7],[5]] (sum 7+7+5 = 19), and [[2,3,5,7,7],[7],[5]] (sum 7+7+5 = 19). The minimum sum is 17."
                    },
                    {
                        "input": "nums = [1,2,3,4], andValues = [2]",
                        "output": "-1",
                        "explanation": "The bitwise AND of the entire array nums is 0. There is no way to divide nums into a single subarray with a bitwise AND of 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-split-an-array",
                "title": "Minimum Cost to Split an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "split-with-minimum-sum",
                "title": "Split With Minimum Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-subarray-with-bitwise-or-closest-to-k",
                "title": "Find Subarray With Bitwise OR Closest to K",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Let <code>dp[i][j]</code> be the optimal answer to split  <code>nums[0..(i - 1)]</code> into the first <code>j</code> andValues.",
            "<code>dp[i][j] = min(dp[(i - z)][j - 1]) + nums[i - 1]</code> over all <code>x <= z <= y</code> and <code>dp[0][0] = 0</code>, where <code>x</code> and <code>y</code> are the longest and shortest subarrays ending with <code>nums[i - 1]</code> and the bitwise-and of all the values in it is <code>andValues[j - 1]</code>.",
            "The answer is <code>dp[n][m]</code>.",
            "To calculate <code>x</code> and <code>y</code>, we can use binary search (or sliding window). Note that the more values we have, the smaller the <code>AND</code> value is.",
            "To calculate the result, we need to support RMQ (range minimum query). Segment tree is one way to do it in <code>O(log(n))</code>. But we can use Monotonic Queue since the ranges are indeed \u201csliding to right\u201d which can be reduced to the classical minimum value in sliding window problem, for a <code>O(n)</code> solution."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Queue",
                "slug": "queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumValueSum(vector<int>& nums, vector<int>& andValues) {\n    vector<vector<unordered_map<int, int>>> mem(\n        nums.size(), vector<unordered_map<int, int>>(andValues.size()));\n    const int ans = minimumValueSum(nums, andValues, 0, 0, kAllMask, mem);\n    return ans == kInf ? -1 : ans;\n  }\n\n private:\n  static constexpr int kInf = 1'000'000'000;\n  static constexpr int kAllMask = (1 << 17) - 1;\n\n  // Returns the minimum value sum of nums[i..n) and andValues[j..m), where\n  // `mask` is the running value of the current subarray.\n  int minimumValueSum(const vector<int>& nums, const vector<int>& andValues,\n                      int i, int j, int mask,\n                      vector<vector<unordered_map<int, int>>>& mem) {\n    if (i == nums.size() && j == andValues.size())\n      return 0;\n    if (i == nums.size() || j == andValues.size())\n      return kInf;\n    if (const auto it = mem[i][j].find(mask); it != mem[i][j].cend())\n      return it->second;\n    mask &= nums[i];\n    if (mask < andValues[j])\n      return mem[i][j][mask] = kInf;\n    if (mask == andValues[j])\n      // Case 1: Keep going.\n      // Case 2: End the subarray here and pick nums[i], then fresh start.\n      return mem[i][j][mask] =\n                 min(minimumValueSum(nums, andValues, i + 1, j, mask, mem),\n                     nums[i] + minimumValueSum(nums, andValues, i + 1, j + 1,\n                                               kAllMask, mem));\n    // Keep going.\n    return mem[i][j][mask] =\n               minimumValueSum(nums, andValues, i + 1, j, mask, mem);\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumValueSum(int[] nums, int[] andValues) {\n    Map<Integer, Integer>[][] mem = new Map[nums.length][andValues.length];\n    Arrays.stream(mem).forEach(row -> Arrays.setAll(row, j -> new HashMap<>()));\n    final int ans = minimumValueSum(nums, andValues, 0, 0, kAllMask, mem);\n    return ans == kInf ? -1 : ans;\n  }\n\n  private static final int kInf = 1_000_000_000;\n  private static final int kAllMask = (1 << 17) - 1;\n\n  // Returns the minimum value sum of nums[i..n) and andValues[j..m), where\n  // `mask` is the running value of the current subarray.\n  private int minimumValueSum(int[] nums, int[] andValues, int i, int j, int mask,\n                              Map<Integer, Integer>[][] mem) {\n    if (i == nums.length && j == andValues.length)\n      return 0;\n    if (i == nums.length || j == andValues.length)\n      return kInf;\n    if (mem[i][j].containsKey(mask))\n      return mem[i][j].get(mask);\n    mask &= nums[i];\n    if (mask < andValues[j]) {\n      mem[i][j].put(mask, kInf);\n      return kInf;\n    }\n    if (mask == andValues[j]) {\n      // Case 1: Keep going.\n      // Case 2: End the subarray here and pick nums[i], then fresh start.\n      final int res =\n          Math.min(minimumValueSum(nums, andValues, i + 1, j, mask, mem),\n                   nums[i] + minimumValueSum(nums, andValues, i + 1, j + 1, kAllMask, mem));\n      mem[i][j].put(mask, res);\n      return res;\n    }\n    // Keep going.\n    final int res = minimumValueSum(nums, andValues, i + 1, j, mask, mem);\n    mem[i][j].put(mask, res);\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumValueSum(self, nums: List[int], andValues: List[int]) -> int:\n    n = len(nums)\n    m = len(andValues)\n\n    @functools.lru_cache(None)\n    def dp(i: int, j: int, mask: int) -> int:\n      \"\"\"\n      Returns the minimum value sum of nums[i..n) and andValues[j..m), where\n      `mask` is the running value of the current subarray.\n      \"\"\"\n      if i == n and j == m:\n        return 0\n      if i == n or j == m:\n        return math.inf\n      mask &= nums[i]\n      if mask < andValues[j]:\n        return math.inf\n      if mask == andValues[j]:\n        # Case 1: Keep going.\n        # Case 2: End the subarray here and pick nums[i], then fresh start.\n        return min(dp(i + 1, j, mask),\n                   nums[i] + dp(i + 1, j + 1, -1))\n      return dp(i + 1, j, mask)  # Keep going.\n\n    ans = dp(0, 0, -1)\n    return ans if ans < math.inf else -1\n",
                "lang_text": "py"
            }
        }
    }
}