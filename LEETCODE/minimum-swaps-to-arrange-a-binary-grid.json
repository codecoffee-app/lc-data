{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1536",
            "title": "Minimum Swaps to Arrange a Binary Grid",
            "titleSlug": "minimum-swaps-to-arrange-a-binary-grid",
            "content": "<p>Given an <code>n x n</code> binary <code>grid</code>, in one step you can choose two <strong>adjacent rows</strong> of the grid and swap them.</p>\n\n<p>A grid is said to be <strong>valid</strong> if all the cells above the main diagonal are <strong>zeros</strong>.</p>\n\n<p>Return <em>the minimum number of steps</em> needed to make the grid valid, or <strong>-1</strong> if the grid cannot be valid.</p>\n\n<p>The main diagonal of a grid is the diagonal that starts at cell <code>(1, 1)</code> and ends at cell <code>(n, n)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/28/fw.jpg\" style=\"width: 750px; height: 141px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0,1],[1,1,0],[1,0,0]]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/16/e2.jpg\" style=\"width: 270px; height: 270px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> All rows are similar, swaps have no effect on the grid.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/16/e3.jpg\" style=\"width: 200px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,0,0],[1,1,0],[1,1,1]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length</code> <code>== grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 549,
            "dislikes": 69,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.1K\", \"totalSubmission\": \"30.2K\", \"totalAcceptedRaw\": 14064, \"totalSubmissionRaw\": 30199, \"acRate\": \"46.6%\"}",
            "hints": [
                "For each row of the grid calculate the most right 1 in the grid in the array maxRight.",
                "To check if there exist answer, sort maxRight and check if maxRight[i] \u2264 i for all possible i's.",
                "If there exist an answer, simulate the swaps."
            ],
            "rephrased": {
                "body": "Given an n x n binary grid, determine the minimum number of adjacent row swaps required to make the grid valid. A grid is considered valid if all cells above the main diagonal are zeros. If it is not possible to make the grid valid, return -1.",
                "constraints": [
                    "n == grid.length == grid[i].length",
                    "1 <= n <= 200",
                    "grid[i][j] is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[[0,0,1],[1,1,0],[1,0,0]]",
                        "output": "3",
                        "explanation": "The minimum number of adjacent row swaps needed to achieve a valid grid is 3."
                    },
                    {
                        "input": "[[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]",
                        "output": "-1",
                        "explanation": "Since all rows are identical, no amount of swapping will result in a valid grid."
                    },
                    {
                        "input": "[[1,0,0],[1,1,0],[1,1,1]]",
                        "output": "0",
                        "explanation": "The given grid is already valid, so no swaps are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For each row of the grid calculate the most right 1 in the grid in the array maxRight.",
            "To check if there exist answer, sort maxRight and check if maxRight[i] \u2264 i for all possible i's.",
            "If there exist an answer, simulate the swaps."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSwaps(vector<vector<int>>& grid) {\n    const int n = grid.size();\n    int ans = 0;\n    // suffixZeros[i] := # of suffix zeros in i-th row\n    vector<int> suffixZeros;\n\n    for (const vector<int> row : grid) {\n      const auto itLastOne = find(row.rbegin(), row.rend(), 1);\n      const int suffixZeroCount = distance(row.rbegin(), itLastOne);\n      suffixZeros.push_back(suffixZeroCount);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      const int neededZeros = n - i - 1;\n      // Get the first row w/ suffix zeros >= `neededZeros` in suffixZeros[i:].\n      const auto it = find_if(suffixZeros.begin() + i, suffixZeros.end(),\n                              [&](int count) { return count >= neededZeros; });\n      if (it == suffixZeros.end())\n        return -1;\n      const int j = distance(suffixZeros.begin(), it);\n      // Move rows[j] to rows[i].\n      for (int k = j; k > i; --k)\n        suffixZeros[k] = suffixZeros[k - 1];\n      ans += j - i;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSwaps(int[][] grid) {\n    final int n = grid.length;\n    int ans = 0;\n    // suffixZeros[i] := # of suffix zeros in i-th row\n    int[] suffixZeros = new int[n];\n\n    for (int i = 0; i < grid.length; ++i)\n      suffixZeros[i] = getSuffixZeroCount(grid[i]);\n\n    for (int i = 0; i < n; ++i) {\n      final int neededZeros = n - i - 1;\n      // Get the first row w/ suffix zeros >= `neededZeros` in suffixZeros[i:].\n      final int j = getFirstRowWithEnoughZeros(suffixZeros, i, neededZeros);\n      if (j == -1)\n        return -1;\n      // Move rows[j] to rows[i].\n      for (int k = j; k > i; --k)\n        suffixZeros[k] = suffixZeros[k - 1];\n      ans += j - i;\n    }\n\n    return ans;\n  }\n\n  private int getSuffixZeroCount(int[] row) {\n    for (int i = row.length - 1; i >= 0; --i)\n      if (row[i] == 1)\n        return row.length - i - 1;\n    return row.length;\n  }\n\n  // Returns first row that has suffix zeros > `neededZeros` in suffixZeros[i:].\n  private int getFirstRowWithEnoughZeros(int[] suffixZeros, int i, int neededZeros) {\n    for (int j = i; j < suffixZeros.length; ++j)\n      if (suffixZeros[j] >= neededZeros)\n        return j;\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSwaps(self, grid: List[List[int]]) -> int:\n    n = len(grid)\n    ans = 0\n    # suffixZeros[i] := # of suffix zeros in i-th row\n    suffixZeros = [n if 1 not in row else row[::-1].index(1) for row in grid]\n\n    for i in range(n):\n      neededZeros = n - i - 1\n      # Get the first row w/ suffix zeros >= `neededZeros` in suffixZeros[i:].\n      j = next((j for j in range(i, n) if suffixZeros[j] >= neededZeros), -1)\n      if j == -1:\n        return -1\n      # Move rows[j] to rows[i].\n      for k in range(j, i, -1):\n        suffixZeros[k] = suffixZeros[k - 1]\n      ans += j - i\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}