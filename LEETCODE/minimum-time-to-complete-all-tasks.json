{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2589",
            "title": "Minimum Time to Complete All Tasks",
            "titleSlug": "minimum-time-to-complete-all-tasks",
            "content": "<p>There is a computer that can run an unlimited number of tasks <strong>at the same time</strong>. You are given a 2D integer array <code>tasks</code> where <code>tasks[i] = [start<sub>i</sub>, end<sub>i</sub>, duration<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> task should run for a total of <code>duration<sub>i</sub></code> seconds (not necessarily continuous) within the <strong>inclusive</strong> time range <code>[start<sub>i</sub>, end<sub>i</sub>]</code>.</p>\n\n<p>You may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.</p>\n\n<p>Return <em>the minimum time during which the computer should be turned on to complete all tasks</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [[2,3,1],[4,5,1],[1,5,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \n- The first task can be run in the inclusive time range [2, 2].\n- The second task can be run in the inclusive time range [5, 5].\n- The third task can be run in the two inclusive time ranges [2, 2] and [5, 5].\nThe computer will be on for a total of 2 seconds.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [[1,3,2],[2,5,3],[5,6,2]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \n- The first task can be run in the inclusive time range [2, 3].\n- The second task can be run in the inclusive time ranges [2, 3] and [5, 5].\n- The third task can be run in the two inclusive time range [5, 6].\nThe computer will be on for a total of 4 seconds.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tasks.length &lt;= 2000</code></li>\n\t<li><code>tasks[i].length == 3</code></li>\n\t<li><code>1 &lt;= start<sub>i</sub>, end<sub>i</sub> &lt;= 2000</code></li>\n\t<li><code>1 &lt;= duration<sub>i</sub> &lt;= end<sub>i</sub> - start<sub>i</sub> + 1 </code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 402,
            "dislikes": 15,
            "similarQuestions": "[{\"title\": \"Single-Threaded CPU\", \"titleSlug\": \"single-threaded-cpu\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.1K\", \"totalSubmission\": \"21.6K\", \"totalAcceptedRaw\": 8076, \"totalSubmissionRaw\": 21589, \"acRate\": \"37.4%\"}",
            "hints": [
                "Sort the tasks in ascending order of end time",
                "Since there are only up to 2000 time points to consider, you can check them one by one",
                "It is always beneficial to run the task as late as possible so that later tasks can run simultaneously."
            ],
            "rephrased": {
                "body": "Given a list of tasks, where each task has a start time, end time, and duration, determine the minimum amount of time the computer needs to be turned on to complete all tasks. The computer can run an unlimited number of tasks simultaneously and can be turned on/off as needed. Each task must run for its specified duration within its given time range.",
                "constraints": [
                    "1 <= tasks.length <= 2000",
                    "tasks[i].length == 3",
                    "1 <= start_i, end_i <= 2000",
                    "1 <= duration_i <= end_i - start_i + 1"
                ],
                "testcases": [
                    {
                        "input": "[[2,3,1],[4,5,1],[1,5,2]]",
                        "output": "2",
                        "explanation": "The first task can be completed at time 2. The second task can be completed at time 5. The third task can be completed at times 2 and 5. Therefore, the computer needs to be on for 2 seconds."
                    },
                    {
                        "input": "[[1,3,2],[2,5,3],[5,6,2]]",
                        "output": "4",
                        "explanation": "The first task can be completed at times 2 and 3. The second task can be completed at times 2, 3, and 5. The third task can be completed at times 5 and 6. Therefore, the computer needs to be on for 4 seconds."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "single-threaded-cpu",
                "title": "Single-Threaded CPU",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort the tasks in ascending order of end time",
            "Since there are only up to 2000 time points to consider, you can check them one by one",
            "It is always beneficial to run the task as late as possible so that later tasks can run simultaneously."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findMinimumTime(vector<vector<int>>& tasks) {\n    constexpr int kMax = 2000;\n    vector<bool> running(kMax + 1);\n\n    // Sort tasks by end.\n    sort(\n        tasks.begin(), tasks.end(),\n        [](const vector<int>& a, const vector<int>& b) { return a[1] < b[1]; });\n\n    for (const vector<int>& task : tasks) {\n      const int start = task[0];\n      const int end = task[1];\n      const int duration = task[2];\n      int neededDuration = duration - count(running.begin() + start,\n                                            running.begin() + end + 1, true);\n      // Greedily run the task as late as possible so that later tasks can run\n      // simultaneously.\n      for (int i = end; neededDuration > 0; --i) {\n        if (!running[i]) {\n          running[i] = true;\n          --neededDuration;\n        }\n      }\n    }\n\n    return count(running.begin(), running.end(), true);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findMinimumTime(int[][] tasks) {\n    final int kMax = 2000;\n    boolean[] running = new boolean[kMax + 1];\n\n    // Sort tasks by end.\n    Arrays.sort(tasks, (a, b) -> a[1] - b[1]);\n\n    for (int[] task : tasks) {\n      final int start = task[0];\n      final int end = task[1];\n      final int duration = task[2];\n      int neededDuration = duration;\n      for (int i = start; i <= end; ++i)\n        if (running[i])\n          --neededDuration;\n      // Greedily run the task as late as possible so that later tasks can run\n      // simultaneously.\n      for (int i = end; neededDuration > 0; --i) {\n        if (!running[i]) {\n          running[i] = true;\n          --neededDuration;\n        }\n      }\n    }\n\n    return (int) IntStream.range(0, running.length)\n        .mapToObj(i -> running[i])\n        .filter(r -> r)\n        .count();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMinimumTime(self, tasks: List[List[int]]) -> int:\n    kMax = 2000\n    running = [False] * (kMax + 1)\n\n    # Sort tasks by end.\n    for start, end, duration in sorted(tasks, key=lambda x: x[1]):\n      neededDuration = duration - \\\n          sum(running[i] for i in range(start, end + 1))\n      # Greedily run the task as late as possible so that later tasks can run\n      # simultaneously.\n      i = end\n      while neededDuration > 0:\n        if not running[i]:\n          running[i] = True\n          neededDuration -= 1\n        i -= 1\n\n    return sum(running)\n",
                "lang_text": "py"
            }
        }
    }
}