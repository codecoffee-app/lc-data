{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2187",
            "title": "Minimum Time to Complete Trips",
            "titleSlug": "minimum-time-to-complete-trips",
            "content": "<p>You are given an array <code>time</code> where <code>time[i]</code> denotes the time taken by the <code>i<sup>th</sup></code> bus to complete <strong>one trip</strong>.</p>\n\n<p>Each bus can make multiple trips <strong>successively</strong>; that is, the next trip can start <strong>immediately after</strong> completing the current trip. Also, each bus operates <strong>independently</strong>; that is, the trips of one bus do not influence the trips of any other bus.</p>\n\n<p>You are also given an integer <code>totalTrips</code>, which denotes the number of trips all buses should make <strong>in total</strong>. Return <em>the <strong>minimum time</strong> required for all buses to complete <strong>at least</strong> </em><code>totalTrips</code><em> trips</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> time = [1,2,3], totalTrips = 5\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n- At time t = 1, the number of trips completed by each bus are [1,0,0]. \n  The total number of trips completed is 1 + 0 + 0 = 1.\n- At time t = 2, the number of trips completed by each bus are [2,1,0]. \n  The total number of trips completed is 2 + 1 + 0 = 3.\n- At time t = 3, the number of trips completed by each bus are [3,1,1]. \n  The total number of trips completed is 3 + 1 + 1 = 5.\nSo the minimum time needed for all buses to complete at least 5 trips is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> time = [2], totalTrips = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nThere is only one bus, and it will complete its first trip at t = 2.\nSo the minimum time needed to complete 1 trip is 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= time.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= time[i], totalTrips &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2699,
            "dislikes": 171,
            "similarQuestions": "[{\"title\": \"Maximum Candies Allocated to K Children\", \"titleSlug\": \"maximum-candies-allocated-to-k-children\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Speed to Arrive on Time\", \"titleSlug\": \"minimum-speed-to-arrive-on-time\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimized Maximum of Products Distributed to Any Store\", \"titleSlug\": \"minimized-maximum-of-products-distributed-to-any-store\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Running Time of N Computers\", \"titleSlug\": \"maximum-running-time-of-n-computers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Robots Within Budget\", \"titleSlug\": \"maximum-number-of-robots-within-budget\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimize Maximum of Array\", \"titleSlug\": \"minimize-maximum-of-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"107.4K\", \"totalSubmission\": \"275.7K\", \"totalAcceptedRaw\": 107351, \"totalSubmissionRaw\": 275655, \"acRate\": \"38.9%\"}",
            "hints": [
                "For a given amount of time, how can we count the total number of trips completed by all buses within that time?",
                "Consider using binary search."
            ],
            "rephrased": {
                "body": "You are given an array `time` where `time[i]` denotes the time taken by the i-th bus to complete one trip. Each bus can make multiple trips successively, starting immediately after completing the previous trip. Buses operate independently of each other. You are also given an integer `totalTrips`, representing the total number of trips all buses should make.  Return the minimum time required for all buses to complete at least `totalTrips` trips.",
                "constraints": [
                    "1 <= time.length <= 10^5",
                    "1 <= time[i], totalTrips <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "time = [1,2,3], totalTrips = 5",
                        "output": "3",
                        "explanation": "The minimum time to complete 5 trips is 3. At t=1, the buses have completed [1, 0, 0] trips for a total of 1 trip. At t=2, they've completed [2, 1, 0] for a total of 3 trips. At t=3, they've completed [3, 1, 1] for a total of 5 trips."
                    },
                    {
                        "input": "time = [2], totalTrips = 1",
                        "output": "2",
                        "explanation": "With only one bus that takes 2 units of time per trip, the minimum time to complete 1 trip is 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-candies-allocated-to-k-children",
                "title": "Maximum Candies Allocated to K Children",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-speed-to-arrive-on-time",
                "title": "Minimum Speed to Arrive on Time",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimized-maximum-of-products-distributed-to-any-store",
                "title": "Minimized Maximum of Products Distributed to Any Store",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-running-time-of-n-computers",
                "title": "Maximum Running Time of N Computers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-robots-within-budget",
                "title": "Maximum Number of Robots Within Budget",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimize-maximum-of-array",
                "title": "Minimize Maximum of Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For a given amount of time, how can we count the total number of trips completed by all buses within that time?",
            "Consider using binary search."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumTime(vector<int>& time, int totalTrips) {\n    long long l = 1;\n    long long r =\n        *min_element(time.begin(), time.end()) * static_cast<long>(totalTrips);\n\n    while (l < r) {\n      const long long m = (l + r) / 2;\n      if (numTrips(time, m) >= totalTrips)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n  long numTrips(const vector<int>& times, long m) {\n    return accumulate(times.begin(), times.end(), 0L,\n                      [&](long subtotal, int t) { return subtotal + m / t; });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minimumTime(int[] time, int totalTrips) {\n    long l = 1;\n    long r = Arrays.stream(time).min().getAsInt() * (long) totalTrips;\n\n    while (l < r) {\n      final long m = (l + r) / 2;\n      if (numTrips(time, m) >= totalTrips)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n  private long numTrips(int[] time, long m) {\n    return Arrays.stream(time).asLongStream().reduce(0L, (subtotal, t) -> subtotal + m / t);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumTime(self, time: List[int], totalTrips: int) -> int:\n    l = 1\n    r = min(time) * totalTrips\n\n    while l < r:\n      m = (l + r) // 2\n      if sum(m // t for t in time) >= totalTrips:\n        r = m\n      else:\n        l = m + 1\n\n    return l\n",
                "lang_text": "py"
            }
        }
    }
}