{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2188",
            "title": "Minimum Time to Finish the Race",
            "titleSlug": "minimum-time-to-finish-the-race",
            "content": "<p>You are given a <strong>0-indexed</strong> 2D integer array <code>tires</code> where <code>tires[i] = [f<sub>i</sub>, r<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> tire can finish its <code>x<sup>th</sup></code> successive lap in <code>f<sub>i</sub> * r<sub>i</sub><sup>(x-1)</sup></code> seconds.</p>\n\n<ul>\n\t<li>For example, if <code>f<sub>i</sub> = 3</code> and <code>r<sub>i</sub> = 2</code>, then the tire would finish its <code>1<sup>st</sup></code> lap in <code>3</code> seconds, its <code>2<sup>nd</sup></code> lap in <code>3 * 2 = 6</code> seconds, its <code>3<sup>rd</sup></code> lap in <code>3 * 2<sup>2</sup> = 12</code> seconds, etc.</li>\n</ul>\n\n<p>You are also given an integer <code>changeTime</code> and an integer <code>numLaps</code>.</p>\n\n<p>The race consists of <code>numLaps</code> laps and you may start the race with <strong>any</strong> tire. You have an <strong>unlimited</strong> supply of each tire and after every lap, you may <strong>change</strong> to any given tire (including the current tire type) if you wait <code>changeTime</code> seconds.</p>\n\n<p>Return<em> the <strong>minimum</strong> time to finish the race.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4\n<strong>Output:</strong> 21\n<strong>Explanation:</strong> \nLap 1: Start with tire 0 and finish the lap in 2 seconds.\nLap 2: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nLap 3: Change tires to a new tire 0 for 5 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nTotal time = 2 + 6 + 5 + 2 + 6 = 21 seconds.\nThe minimum time to complete the race is 21 seconds.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5\n<strong>Output:</strong> 25\n<strong>Explanation:</strong> \nLap 1: Start with tire 1 and finish the lap in 2 seconds.\nLap 2: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 3: Change tires to a new tire 1 for 6 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 5: Change tires to tire 0 for 6 seconds then finish the lap in another 1 second.\nTotal time = 2 + 4 + 6 + 2 + 4 + 6 + 1 = 25 seconds.\nThe minimum time to complete the race is 25 seconds. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tires.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>tires[i].length == 2</code></li>\n\t<li><code>1 &lt;= f<sub>i</sub>, changeTime &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= r<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= numLaps &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 538,
            "dislikes": 24,
            "similarQuestions": "[{\"title\": \"Minimum Skips to Arrive at Meeting On Time\", \"titleSlug\": \"minimum-skips-to-arrive-at-meeting-on-time\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.9K\", \"totalSubmission\": \"26.3K\", \"totalAcceptedRaw\": 10914, \"totalSubmissionRaw\": 26323, \"acRate\": \"41.5%\"}",
            "hints": [
                "What is the maximum number of times we would want to go around the track without changing tires?",
                "Can we precompute the minimum time to go around the track x times without changing tires?",
                "Can we use dynamic programming to solve this efficiently using the precomputed values?"
            ],
            "rephrased": {
                "body": "You are given a 0-indexed 2D integer array `tires` where `tires[i] = [f_i, r_i]` indicates that the `i`th tire can finish its `x`th successive lap in `f_i * r_i^(x-1)` seconds.  You are also given an integer `changeTime` and an integer `numLaps`. The race consists of `numLaps` laps. You may start the race with any tire and have an unlimited supply of each tire. After every lap, you may change to any tire (including the current tire type) if you wait `changeTime` seconds.  Return the minimum time to finish the race.",
                "constraints": [
                    "1 <= tires.length <= 10^5",
                    "tires[i].length == 2",
                    "1 <= f_i, changeTime <= 10^5",
                    "2 <= r_i <= 10^5",
                    "1 <= numLaps <= 1000"
                ],
                "testcases": [
                    {
                        "input": "tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4",
                        "output": "21",
                        "explanation": "One optimal strategy is as follows:\n\nLap 1: Start with tire 0 and finish the lap in 2 seconds.\nLap 2: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nLap 3: Change tires to a new tire 0 for 5 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nTotal time = 2 + 6 + 5 + 2 + 6 = 21 seconds. Thus, the minimum time to complete the race is 21 seconds."
                    },
                    {
                        "input": "tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5",
                        "output": "25",
                        "explanation": "One optimal strategy is as follows:\n\nLap 1: Start with tire 1 and finish the lap in 2 seconds.\nLap 2: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 3: Change tires to a new tire 1 for 6 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 5: Change tires to tire 0 for 6 seconds then finish the lap in another 1 second.\nTotal time = 2 + 4 + 6 + 2 + 4 + 6 + 1 = 25 seconds. Thus, the minimum time to complete the race is 25 seconds."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-skips-to-arrive-at-meeting-on-time",
                "title": "Minimum Skips to Arrive at Meeting On Time",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What is the maximum number of times we would want to go around the track without changing tires?",
            "Can we precompute the minimum time to go around the track x times without changing tires?",
            "Can we use dynamic programming to solve this efficiently using the precomputed values?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumFinishTime(vector<vector<int>>& tires, int changeTime,\n                        int numLaps) {\n    // singleTire[i] := min time to finish i laps w/o changing tire\n    vector<int> singleTire(numLaps + 1, INT_MAX / 2);\n    // dp[i] := min time to finish i laps\n    vector<int> dp(numLaps + 1, INT_MAX / 2);\n\n    for (int i = 0; i < tires.size(); ++i) {\n      const int f = tires[i][0];\n      const int r = tires[i][1];\n      int sumSecs = 0;\n      int rPower = 1;\n      for (int j = 1; j <= numLaps; ++j) {\n        // Time to use the same tire for next lap >=\n        // Time to change a new tire + f\n        if ((long)f * rPower >= changeTime + f)\n          break;\n        sumSecs += f * rPower;\n        rPower *= r;\n        singleTire[j] = min(singleTire[j], sumSecs);\n      }\n    }\n\n    dp[0] = 0;\n    for (int i = 1; i <= numLaps; ++i)\n      for (int j = 1; j <= i; ++j)\n        dp[i] = min(dp[i], dp[i - j] + changeTime + singleTire[j]);\n\n    return dp[numLaps] - changeTime;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumFinishTime(int[][] tires, int changeTime, int numLaps) {\n    // singleTire[i] := min time to finish i laps w/o changing tire\n    int[] singleTire = new int[numLaps + 1];\n    // dp[i] := min time to finish i laps\n    int[] dp = new int[numLaps + 1];\n\n    Arrays.fill(singleTire, Integer.MAX_VALUE / 2);\n    Arrays.fill(dp, Integer.MAX_VALUE / 2);\n\n    for (int i = 0; i < tires.length; ++i) {\n      final int f = tires[i][0];\n      final int r = tires[i][1];\n      int sumSecs = 0;\n      int rPower = 1;\n      for (int j = 1; j <= numLaps; ++j) {\n        // Time to use the same tire for next lap >=\n        // Time to change a new tire + f\n        if ((long) f * rPower >= changeTime + f)\n          break;\n        sumSecs += f * rPower;\n        rPower *= r;\n        singleTire[j] = Math.min(singleTire[j], sumSecs);\n      }\n    }\n\n    dp[0] = 0;\n    for (int i = 1; i <= numLaps; ++i)\n      for (int j = 1; j <= i; ++j)\n        dp[i] = Math.min(dp[i], dp[i - j] + changeTime + singleTire[j]);\n\n    return dp[numLaps] - changeTime;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumFinishTime(self, tires: List[List[int]], changeTime: int, numLaps: int) -> int:\n    # singleTire[i] := min time to finish i laps w//o changing tire\n    singleTire = [math.inf] * (numLaps + 1)\n    # dp[i] := min time to finish i laps\n    dp = [math.inf] * (numLaps + 1)\n\n    for i, (f, r) in enumerate(tires):\n      sumSecs = 0\n      rPower = 1\n      for j in range(1, numLaps + 1):\n        # Time to use the same tire for next lap >=\n        # Time to change a new tire + f\n        if f * rPower >= changeTime + f:\n          break\n        sumSecs += f * rPower\n        rPower *= r\n        singleTire[j] = min(singleTire[j], sumSecs)\n\n    dp[0] = 0\n    for i in range(1, numLaps + 1):\n      for j in range(1, i + 1):\n        dp[i] = min(dp[i], dp[i - j] + changeTime + singleTire[j])\n\n    return dp[numLaps] - changeTime\n",
                "lang_text": "py"
            }
        }
    }
}