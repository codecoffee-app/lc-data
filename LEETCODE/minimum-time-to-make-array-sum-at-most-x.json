{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2809",
            "title": "Minimum Time to Make Array Sum At Most x",
            "titleSlug": "minimum-time-to-make-array-sum-at-most-x",
            "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code> of equal length. Every second, for all indices <code>0 &lt;= i &lt; nums1.length</code>, value of <code>nums1[i]</code> is incremented by <code>nums2[i]</code>. <strong>After</strong> this is done, you can do the following operation:</p>\n\n<ul>\n\t<li>Choose an index <code>0 &lt;= i &lt; nums1.length</code> and make <code>nums1[i] = 0</code>.</li>\n</ul>\n\n<p>You are also given an integer <code>x</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> time in which you can make the sum of all elements of </em><code>nums1</code><em> to be<strong> less than or equal</strong> to </em><code>x</code>, <em>or </em><code>-1</code><em> if this is not possible.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3], nums2 = [1,2,3], x = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nFor the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6]. \nFor the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9]. \nFor the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0]. \nNow sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3.\n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3], nums2 = [3,3,3], x = 4\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code><font face=\"monospace\">1 &lt;= nums1.length &lt;= 10<sup>3</sup></font></code></li>\n\t<li><code>1 &lt;= nums1[i] &lt;= 10<sup>3</sup></code></li>\n\t<li><code>0 &lt;= nums2[i] &lt;= 10<sup>3</sup></code></li>\n\t<li><code>nums1.length == nums2.length</code></li>\n\t<li><code>0 &lt;= x &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 227,
            "dislikes": 12,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.7K\", \"totalSubmission\": \"14.4K\", \"totalAcceptedRaw\": 3684, \"totalSubmissionRaw\": 14368, \"acRate\": \"25.6%\"}",
            "hints": [
                "<div class=\"_1l1MA\">It can be proven that in the optimal solution, for each index <code>i</code>, we only need to set <code>nums1[i]</code> to <code>0</code> at most once. (If we have to set it twice, we can simply remove the earlier set and all the operations \u201cshift left\u201d by <code>1</code>.)</div>",
                "<div class=\"_1l1MA\">It can also be proven that if we select several indexes <code>i<sub>1</sub>, i<sub>2</sub>, ..., i<sub>k</sub></code> and set <code>nums1[i<sub>1</sub>], nums1[i<sub>2</sub>], ..., nums1[i<sub>k</sub>]</code> to <code>0</code>, it\u2019s always optimal to set them in the order of <code>nums2[i<sub>1</sub>] <= nums2[i<sub>2</sub>] <= ... <= nums2[i<sub>k</sub>]</code> (the larger the increase is, the later we should set it to <code>0</code>).</div>",
                "<div class=\"_1l1MA\">Let\u2019s sort all the values by <code>nums2</code> (in non-decreasing order). Let <code>dp[i][j]</code> represent the maximum total value that can be reduced if we do <code>j</code> operations on the first <code>i</code> elements. Then we have <code>dp[i][0] = 0</code> (for all <code>i = 0, 1, ..., n</code>) and <code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + nums2[i - 1] * j + nums1[i - 1])</code> (for <code>1 <= i <= n</code> and <code>1 <= j <= i</code>).</div>",
                "<div class=\"_1l1MA\">The answer is the minimum value of <code>t</code>, such that <code>0 <= t <= n</code> and <code>sum(nums1) + sum(nums2) * t - dp[n][t] <= x</code>, or <code>-1</code> if it doesn\u2019t exist.</div>"
            ],
            "rephrased": {
                "body": "You are given two 0-indexed integer arrays `nums1` and `nums2` of equal length. Every second, for all indices `0 <= i < nums1.length`, the value of `nums1[i]` is incremented by `nums2[i]`. After this increment, you can choose an index `0 <= i < nums1.length` and set `nums1[i]` to 0.  Given an integer `x`, return the minimum number of seconds required to make the sum of all elements of `nums1` less than or equal to `x`. If it's impossible to achieve this, return -1.",
                "constraints": [
                    "1 <= nums1.length <= 10^3",
                    "1 <= nums1[i] <= 10^3",
                    "0 <= nums2[i] <= 10^3",
                    "nums1.length == nums2.length",
                    "0 <= x <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [1,2,3], nums2 = [1,2,3], x = 4",
                        "output": "3",
                        "explanation": "After 1 second, applying the operation to index 0, nums1 becomes [0, 4, 6]. After 2 seconds, applying the operation to index 1, nums1 becomes [1, 0, 9]. After 3 seconds, applying the operation to index 2, nums1 becomes [2, 2, 0]. The sum of nums1 is now 4. This sequence of operations is optimal."
                    },
                    {
                        "input": "nums1 = [1,2,3], nums2 = [3,3,3], x = 4",
                        "output": "-1",
                        "explanation": "The sum of nums1 will always be greater than x, regardless of the operations performed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<div class=\"_1l1MA\">It can be proven that in the optimal solution, for each index <code>i</code>, we only need to set <code>nums1[i]</code> to <code>0</code> at most once. (If we have to set it twice, we can simply remove the earlier set and all the operations \u201cshift left\u201d by <code>1</code>.)</div>",
            "<div class=\"_1l1MA\">It can also be proven that if we select several indexes <code>i<sub>1</sub>, i<sub>2</sub>, ..., i<sub>k</sub></code> and set <code>nums1[i<sub>1</sub>], nums1[i<sub>2</sub>], ..., nums1[i<sub>k</sub>]</code> to <code>0</code>, it\u2019s always optimal to set them in the order of <code>nums2[i<sub>1</sub>] <= nums2[i<sub>2</sub>] <= ... <= nums2[i<sub>k</sub>]</code> (the larger the increase is, the later we should set it to <code>0</code>).</div>",
            "<div class=\"_1l1MA\">Let\u2019s sort all the values by <code>nums2</code> (in non-decreasing order). Let <code>dp[i][j]</code> represent the maximum total value that can be reduced if we do <code>j</code> operations on the first <code>i</code> elements. Then we have <code>dp[i][0] = 0</code> (for all <code>i = 0, 1, ..., n</code>) and <code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + nums2[i - 1] * j + nums1[i - 1])</code> (for <code>1 <= i <= n</code> and <code>1 <= j <= i</code>).</div>",
            "<div class=\"_1l1MA\">The answer is the minimum value of <code>t</code>, such that <code>0 <= t <= n</code> and <code>sum(nums1) + sum(nums2) * t - dp[n][t] <= x</code>, or <code>-1</code> if it doesn\u2019t exist.</div>"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumTime(vector<int>& nums1, vector<int>& nums2, int x) {\n    const int n = nums1.size();\n    const int sum1 = accumulate(nums1.begin(), nums1.end(), 0);\n    const int sum2 = accumulate(nums2.begin(), nums2.end(), 0);\n    // dp[j] := max reduced value if we do j ops on the nums so far\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1));\n    vector<pair<int, int>> sortedNums;\n\n    for (int i = 0; i < n; ++i)\n      sortedNums.emplace_back(nums2[i], nums1[i]);\n\n    std::ranges::sort(sortedNums);\n\n    for (int i = 1; i <= n; ++i) {\n      const auto [num2, num1] = sortedNums[i - 1];\n      for (int j = 1; j <= i; ++j)\n        dp[i][j] = max(\n            // max reduced value if we do j ops on the first i - 1 nums\n            dp[i - 1][j],\n            // max reduced value if we do j - 1 ops on the first i - 1 nums +\n            // making i-th num of nums1 to 0 at j-th operation\n            dp[i - 1][j - 1] + num2 * j + num1);\n    }\n\n    for (int op = 0; op <= n; ++op)\n      if (sum1 + sum2 * op - dp[n][op] <= x)\n        return op;\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumTime(List<Integer> nums1, List<Integer> nums2, int x) {\n    final int n = nums1.size();\n    final int sum1 = nums1.stream().mapToInt(Integer::intValue).sum();\n    final int sum2 = nums2.stream().mapToInt(Integer::intValue).sum();\n    // dp[i][j] := max reduced value if we do j ops on the first i nums\n    int[][] dp = new int[n + 1][n + 1];\n    List<Pair<Integer, Integer>> sortedNums = new ArrayList<>();\n\n    for (int i = 0; i < n; ++i)\n      sortedNums.add(new Pair<>(nums2.get(i), nums1.get(i)));\n\n    sortedNums.sort(Comparator.comparingInt(a -> a.getKey()));\n\n    for (int i = 1; i <= n; ++i) {\n      final int num2 = sortedNums.get(i - 1).getKey();\n      final int num1 = sortedNums.get(i - 1).getValue();\n      for (int j = 1; j <= i; ++j)\n        dp[i][j] = Math.max(\n            // max reduced value if we do j ops on the first i - 1 nums\n            dp[i - 1][j],\n            // max reduced value if we do j - 1 ops on the first i - 1 nums +\n            // making i-th num of nums1 to 0 at j-th operation\n            dp[i - 1][j - 1] + num2 * j + num1);\n    }\n\n    for (int op = 0; op <= n; ++op)\n      if (sum1 + sum2 * op - dp[n][op] <= x)\n        return op;\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumTime(self, nums1: List[int], nums2: List[int], x: int) -> int:\n    n = len(nums1)\n    # dp[i][j] := max reduced value if we do j ops on the first i nums\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    sum1 = sum(nums1)\n    sum2 = sum(nums2)\n\n    for i, (num2, num1) in enumerate(sorted(zip(nums2, nums1)), 1):\n      for j in range(1, i + 1):\n        dp[i][j] = max(\n            # max reduced value if we do j ops on the first i - 1 nums\n            dp[i - 1][j],\n            # max reduced value if we do j - 1 ops on the first i - 1 nums +\n            # making i-th num of nums1 to 0 at j-th operation\n            dp[i - 1][j - 1] + num2 * j + num1\n        )\n\n    for op in range(n + 1):\n      if sum1 + sum2 * op - dp[n][op] <= x:\n        return op\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}