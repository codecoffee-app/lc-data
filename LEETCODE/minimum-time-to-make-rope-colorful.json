{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1578",
            "title": "Minimum Time to Make Rope Colorful",
            "titleSlug": "minimum-time-to-make-rope-colorful",
            "content": "<p>Alice has <code>n</code> balloons arranged on a rope. You are given a <strong>0-indexed</strong> string <code>colors</code> where <code>colors[i]</code> is the color of the <code>i<sup>th</sup></code> balloon.</p>\n\n<p>Alice wants the rope to be <strong>colorful</strong>. She does not want <strong>two consecutive balloons</strong> to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it <strong>colorful</strong>. You are given a <strong>0-indexed</strong> integer array <code>neededTime</code> where <code>neededTime[i]</code> is the time (in seconds) that Bob needs to remove the <code>i<sup>th</sup></code> balloon from the rope.</p>\n\n<p>Return <em>the <strong>minimum time</strong> Bob needs to make the rope <strong>colorful</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/13/ballon1.jpg\" style=\"width: 404px; height: 243px;\" />\n<pre>\n<strong>Input:</strong> colors = &quot;abaac&quot;, neededTime = [1,2,3,4,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> In the above image, &#39;a&#39; is blue, &#39;b&#39; is red, and &#39;c&#39; is green.\nBob can remove the blue balloon at index 2. This takes 3 seconds.\nThere are no longer two consecutive balloons of the same color. Total time = 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/13/balloon2.jpg\" style=\"width: 244px; height: 243px;\" />\n<pre>\n<strong>Input:</strong> colors = &quot;abc&quot;, neededTime = [1,2,3]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The rope is already colorful. Bob does not need to remove any balloons from the rope.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/13/balloon3.jpg\" style=\"width: 404px; height: 243px;\" />\n<pre>\n<strong>Input:</strong> colors = &quot;aabaa&quot;, neededTime = [1,2,3,4,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Bob will remove the balloons at indices 0 and 4. Each balloons takes 1 second to remove.\nThere are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == colors.length == neededTime.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= neededTime[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>colors</code> contains only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3732,
            "dislikes": 130,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"245.9K\", \"totalSubmission\": \"384.1K\", \"totalAcceptedRaw\": 245923, \"totalSubmissionRaw\": 384144, \"acRate\": \"64.0%\"}",
            "hints": [
                "Maintain the running sum and max value for repeated letters."
            ],
            "rephrased": {
                "body": "Alice has 'n' balloons arranged on a rope. You are given a 0-indexed string 'colors' where colors[i] is the color of the i-th balloon. Alice wants the rope to be colorful, meaning no two consecutive balloons should have the same color. Bob can remove balloons to achieve this, and 'neededTime[i]' is the time (in seconds) it takes Bob to remove the i-th balloon. Return the minimum time Bob needs to make the rope colorful.",
                "constraints": [
                    "n == colors.length == neededTime.length",
                    "1 <= n <= 10^5",
                    "1 <= neededTime[i] <= 10^4",
                    "colors contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "colors = \"abaac\", neededTime = [1,2,3,4,5]",
                        "output": "3",
                        "explanation": "Bob can remove the blue balloon at index 2, which takes 3 seconds. There are no longer two consecutive balloons of the same color. Total time = 3."
                    },
                    {
                        "input": "colors = \"abc\", neededTime = [1,2,3]",
                        "output": "0",
                        "explanation": "The rope is already colorful. Bob does not need to remove any balloons."
                    },
                    {
                        "input": "colors = \"aabaa\", neededTime = [1,2,3,4,1]",
                        "output": "2",
                        "explanation": "Bob will remove the balloons at indices 0 and 4. Each balloon takes 1 second to remove. There are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Maintain the running sum and max value for repeated letters."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minCost(string colors, vector<int>& neededTime) {\n    int ans = 0;\n    int maxNeededTime = neededTime[0];\n\n    for (int i = 1; i < colors.length(); ++i)\n      if (colors[i] == colors[i - 1]) {\n        ans += min(maxNeededTime, neededTime[i]);\n        // For each continuous group, Bob needs to remove every balloon except\n        // the one with the max `neededTime`. So, he should hold the balloon\n        // with the highest `neededTime` in his hand.\n        maxNeededTime = max(maxNeededTime, neededTime[i]);\n      } else {\n        // If the current balloon is different from the previous one, discard\n        // the balloon from the previous group and hold the new one in hand.\n        maxNeededTime = neededTime[i];\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minCost(String colors, int[] neededTime) {\n    int ans = 0;\n    int maxNeededTime = neededTime[0];\n\n    for (int i = 1; i < colors.length(); ++i)\n      if (colors.charAt(i) == colors.charAt(i - 1)) {\n        ans += Math.min(maxNeededTime, neededTime[i]);\n        // For each continuous group, Bob needs to remove every balloon except the one with the max\n        // `neededTime`. So, he should hold the balloon with the highest `neededTime` in his hand.\n        maxNeededTime = Math.max(maxNeededTime, neededTime[i]);\n      } else {\n        // If the current balloon is different from the previous one, discard the balloon from the\n        // previous group and hold the new one in hand.\n        maxNeededTime = neededTime[i];\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minCost(self, colors: str, neededTime: List[int]) -> int:\n    ans = 0\n    maxNeededTime = neededTime[0]\n\n    for i in range(1, len(colors)):\n      if colors[i] == colors[i - 1]:\n        ans += min(maxNeededTime, neededTime[i])\n        # For each continuous group, Bob needs to remove every balloon except\n        # the one with the max `neededTime`. So, he should hold the balloon\n        # with the highest `neededTime` in his hand.\n        maxNeededTime = max(maxNeededTime, neededTime[i])\n      else:\n        # If the current balloon is different from the previous one, discard\n        # the balloon from the previous group and hold the new one in hand.\n        maxNeededTime = neededTime[i]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}