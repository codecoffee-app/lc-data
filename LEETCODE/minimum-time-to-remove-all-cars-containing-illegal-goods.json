{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2167",
            "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
            "titleSlug": "minimum-time-to-remove-all-cars-containing-illegal-goods",
            "content": "<p>You are given a <strong>0-indexed</strong> binary string <code>s</code> which represents a sequence of train cars. <code>s[i] = &#39;0&#39;</code> denotes that the <code>i<sup>th</sup></code> car does <strong>not</strong> contain illegal goods and <code>s[i] = &#39;1&#39;</code> denotes that the <code>i<sup>th</sup></code> car does contain illegal goods.</p>\n\n<p>As the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations <strong>any</strong> number of times:</p>\n\n<ol>\n\t<li>Remove a train car from the <strong>left</strong> end (i.e., remove <code>s[0]</code>) which takes 1 unit of time.</li>\n\t<li>Remove a train car from the <strong>right</strong> end (i.e., remove <code>s[s.length - 1]</code>) which takes 1 unit of time.</li>\n\t<li>Remove a train car from <strong>anywhere</strong> in the sequence which takes 2 units of time.</li>\n</ol>\n\n<p>Return <em>the <strong>minimum</strong> time to remove all the cars containing illegal goods</em>.</p>\n\n<p>Note that an empty sequence of cars is considered to have no cars containing illegal goods.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;<strong><u>11</u></strong>00<strong><u>1</u></strong>0<strong><u>1</u></strong>&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end. Time taken is 1.\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2 + 1 + 2 = 5. \n\nAn alternative way is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end 3 times. Time taken is 3 * 1 = 3.\nThis also obtains a total time of 2 + 3 = 5.\n\n5 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;00<strong><u>1</u></strong>0&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 3 times. Time taken is 3 * 1 = 3.\nThis obtains a total time of 3.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to \n- remove a car from the right end 2 times. Time taken is 2 * 1 = 2. \nThis obtains a total time of 2.\n\n2 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 643,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Minimum Number of K Consecutive Bit Flips\", \"titleSlug\": \"minimum-number-of-k-consecutive-bit-flips\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.6K\", \"totalSubmission\": \"28.2K\", \"totalAcceptedRaw\": 11617, \"totalSubmissionRaw\": 28167, \"acRate\": \"41.2%\"}",
            "hints": [
                "Build an array withoutFirst where withoutFirst[i] stores the minimum time to remove all the cars containing illegal goods from the \u2018suffix\u2019 of the sequence starting from the ith car without using any type 1 operations.",
                "Next, build an array onlyFirst where onlyFirst[i] stores the minimum time to remove all the cars containing illegal goods from the \u2018prefix\u2019 of the sequence ending on the ith car using only type 1 operations.",
                "Finally, we can compare the best way to split the operations amongst these two types by finding the minimum time across all onlyFirst[i] + withoutFirst[i + 1]."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed binary string `s` representing a sequence of train cars. `s[i] = '0'` indicates the i-th car does not contain illegal goods, while `s[i] = '1'` indicates it does.\n\nAs the train conductor, your goal is to remove all cars containing illegal goods using the following operations any number of times:\n\n1. Remove a car from the left end (cost: 1 unit of time).\n2. Remove a car from the right end (cost: 1 unit of time).\n3. Remove a car from anywhere in the sequence (cost: 2 units of time).\n\nReturn the minimum time required to remove all cars containing illegal goods. An empty sequence is considered to have no illegal goods.",
                "constraints": [
                    "1 <= s.length <= 2 * 10^5",
                    "s[i] is either '0' or '1'"
                ],
                "testcases": [
                    {
                        "input": "1100101",
                        "output": "5",
                        "explanation": "One optimal solution is to remove '11' from the left (cost 2), '1' from the right (cost 1), and the middle '1' (cost 2), for a total cost of 5.  Another is to remove '11' from the left (cost 2) and '101' from the right(cost 3), also a total cost of 5."
                    },
                    {
                        "input": "0010",
                        "output": "2",
                        "explanation": "An optimal solution is to remove the single '1' from the middle (cost 2). Removing '001' from the left(cost 3) or '10' from the right (cost 2) are also valid solutions of cost 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-k-consecutive-bit-flips",
                "title": "Minimum Number of K Consecutive Bit Flips",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Build an array withoutFirst where withoutFirst[i] stores the minimum time to remove all the cars containing illegal goods from the \u2018suffix\u2019 of the sequence starting from the ith car without using any type 1 operations.",
            "Next, build an array onlyFirst where onlyFirst[i] stores the minimum time to remove all the cars containing illegal goods from the \u2018prefix\u2019 of the sequence ending on the ith car using only type 1 operations.",
            "Finally, we can compare the best way to split the operations amongst these two types by finding the minimum time across all onlyFirst[i] + withoutFirst[i + 1]."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumTime(string s) {\n    const int n = s.length();\n    // left[i] := min time to remove illegal cars of s[0..i]\n    vector<int> left(n);\n    left[0] = s[0] - '0';\n    // dp[i] := min time to remove illegal cars of s[0..i] in optimal fashion +\n    //              time to remove illegal cars of s[i + 1..n - 1] consecutively\n    // Note the way to remove illegal cars in the right part doesn't need to be\n    // Optimal since: `left | illegal cars | n - 1 - k` will be covered in\n    //                `left' | n - 1 - i` later\n    vector<int> dp(n, n);\n    dp[0] = left[0] + n - 1;\n\n    for (int i = 1; i < n; ++i) {\n      left[i] = min(left[i - 1] + (s[i] - '0') * 2, i + 1);\n      dp[i] = min(dp[i], left[i] + n - 1 - i);\n    }\n\n    return *min_element(dp.begin(), dp.end());\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumTime(String s) {\n    final int n = s.length();\n    // left[i] := min time to remove illegal cars of s[0..i]\n    int[] left = new int[n];\n    left[0] = s.charAt(0) - '0';\n    // dp[i] := min time to remove illegal cars of s[0..i] in optimal fashion +\n    //              time to remove illegal cars of s[i + 1..n - 1] consecutively\n    // Note the way to remove illegal cars in the right part doesn't need to be\n    // Optimal since: `left | illegal cars | n - 1 - k` will be covered in\n    //                `left' | n - 1 - i` later\n    int[] dp = new int[n];\n    Arrays.fill(dp, n);\n    dp[0] = left[0] + n - 1;\n\n    for (int i = 1; i < n; ++i) {\n      left[i] = Math.min(left[i - 1] + (s.charAt(i) - '0') * 2, i + 1);\n      dp[i] = Math.min(dp[i], left[i] + n - 1 - i);\n    }\n\n    return Arrays.stream(dp).min().getAsInt();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumTime(self, s: str) -> int:\n    n = len(s)\n    # left[i] := min time to remove illegal cars of s[0..i]\n    left = [0] * n\n    left[0] = ord(s[0]) - ord('0')\n    # dp[i] := min time to remove illegal cars of s[0..i] in optimal fashion +\n    #              time to remove illegal cars of s[i + 1..n - 1] consecutively\n    # Note the way to remove illegal cars in the right part doesn't need to be\n    # Optimal since: `left | illegal cars | n - 1 - k` will be covered in\n    #                `left' | n - 1 - i` later\n    dp = [n] * n\n    dp[0] = left[0] + n - 1\n\n    for i in range(1, n):\n      left[i] = min(left[i - 1] + (ord(s[i]) - ord('0')) * 2, i + 1)\n      dp[i] = min(dp[i], left[i] + n - 1 - i)\n\n    return min(dp)\n",
                "lang_text": "py"
            }
        }
    }
}