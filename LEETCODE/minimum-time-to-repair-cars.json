{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2594",
            "title": "Minimum Time to Repair Cars",
            "titleSlug": "minimum-time-to-repair-cars",
            "content": "<p>You are given an integer array <code>ranks</code> representing the <strong>ranks</strong> of some mechanics. <font face=\"monospace\">ranks<sub>i</sub></font> is the rank of the <font face=\"monospace\">i<sup>th</sup></font> mechanic<font face=\"monospace\">.</font> A mechanic with a rank <code>r</code> can repair <font face=\"monospace\">n</font> cars in <code>r * n<sup>2</sup></code> minutes.</p>\n\n<p>You are also given an integer <code>cars</code> representing the total number of cars waiting in the garage to be repaired.</p>\n\n<p>Return <em>the <strong>minimum</strong> time taken to repair all the cars.</em></p>\n\n<p><strong>Note:</strong> All the mechanics can repair the cars simultaneously.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranks = [4,2,3,1], cars = 10\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> \n- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.\n- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.\n- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.\n- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ranks = [5,1,8], cars = 6\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> \n- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.\n- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\n- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ranks.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= ranks[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= cars &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 506,
            "dislikes": 25,
            "similarQuestions": "[{\"title\": \"Sort Transformed Array\", \"titleSlug\": \"sort-transformed-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Koko Eating Bananas\", \"titleSlug\": \"koko-eating-bananas\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.5K\", \"totalSubmission\": \"31.6K\", \"totalAcceptedRaw\": 13517, \"totalSubmissionRaw\": 31605, \"acRate\": \"42.8%\"}",
            "hints": [
                "For a predefined fixed time, can all the cars be repaired?",
                "Try using binary search on the answer."
            ],
            "rephrased": {
                "body": "You are given an integer array `ranks` where `ranks[i]` represents the rank of the i-th mechanic. A mechanic with rank `r` can repair `n` cars in `r * n^2` minutes. You are also given an integer `cars` representing the total number of cars to be repaired. Determine the minimum time required to repair all cars, assuming mechanics can work simultaneously.",
                "constraints": [
                    "1 <= ranks.length <= 10^5",
                    "1 <= ranks[i] <= 100",
                    "1 <= cars <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "ranks = [4,2,3,1], cars = 10",
                        "output": "16",
                        "explanation": "One possible assignment of cars to mechanics: \n- Mechanic 1 (rank 4) repairs 2 cars in 4 * 2^2 = 16 minutes.\n- Mechanic 2 (rank 2) repairs 2 cars in 2 * 2^2 = 8 minutes.\n- Mechanic 3 (rank 3) repairs 2 cars in 3 * 2^2 = 12 minutes.\n- Mechanic 4 (rank 1) repairs 4 cars in 1 * 4^2 = 16 minutes.\nThe total time is 16 minutes, and it can be shown that this is the minimum possible time."
                    },
                    {
                        "input": "ranks = [5,1,8], cars = 6",
                        "output": "16",
                        "explanation": "One possible assignment of cars to mechanics: \n- Mechanic 1 (rank 5) repairs 1 car in 5 * 1^2 = 5 minutes.\n- Mechanic 2 (rank 1) repairs 4 cars in 1 * 4^2 = 16 minutes.\n- Mechanic 3 (rank 8) repairs 1 car in 8 * 1^2 = 8 minutes.\nThe total time is 16 minutes, and it can be shown that this is the minimum possible time."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "sort-transformed-array",
                "title": "Sort Transformed Array",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "koko-eating-bananas",
                "title": "Koko Eating Bananas",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For a predefined fixed time, can all the cars be repaired?",
            "Try using binary search on the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long repairCars(vector<int>& ranks, int cars) {\n    long long l = 0;\n    long long r = 1LL * *min_element(ranks.begin(), ranks.end()) * cars * cars;\n\n    while (l < r) {\n      const long long m = (l + r) / 2;\n      if (numCarsFixed(ranks, m) >= cars)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n private:\n  long long numCarsFixed(const vector<int>& ranks, long long minutes) {\n    long long carsFixed = 0;\n    //    r * n^2 = minutes\n    // -> n = sqrt(minutes / r)\n    for (const int rank : ranks)\n      carsFixed += sqrt(minutes / rank);\n    return carsFixed;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long repairCars(int[] ranks, int cars) {\n    long l = 0;\n    long r = (long) Arrays.stream(ranks).min().getAsInt() * cars * cars;\n\n    while (l < r) {\n      final long m = (l + r) / 2;\n      if (numCarsFixed(ranks, m) >= cars)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n  private long numCarsFixed(int[] ranks, long minutes) {\n    long carsFixed = 0;\n    //    r * n^2 = minutes\n    // -> n = sqrt(minutes / r)\n    for (final int rank : ranks)\n      carsFixed += Math.sqrt(minutes / rank);\n    return carsFixed;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def repairCars(self, ranks: List[int], cars: int) -> int:\n    def numCarsFixed(minutes: int) -> int:\n      #    r * n^2 = minutes\n      # -> n = sqrt(minutes / r)\n      return sum(int(sqrt(minutes // rank)) for rank in ranks)\n\n    return bisect.bisect_left(\n        range(0, min(ranks) * cars**2), cars,\n        key=lambda m: numCarsFixed(m))\n",
                "lang_text": "py"
            }
        }
    }
}