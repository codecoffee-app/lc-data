{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3029",
            "title": "Minimum Time to Revert Word to Initial State I",
            "titleSlug": "minimum-time-to-revert-word-to-initial-state-i",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>word</code> and an integer <code>k</code>.</p>\n\n<p>At every second, you must perform the following operations:</p>\n\n<ul>\n\t<li>Remove the first <code>k</code> characters of <code>word</code>.</li>\n\t<li>Add any <code>k</code> characters to the end of <code>word</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that you do not necessarily need to add the same characters that you removed. However, you must perform <strong>both</strong> operations at every second.</p>\n\n<p>Return <em>the <strong>minimum</strong> time greater than zero required for</em> <code>word</code> <em>to revert to its <strong>initial</strong> state</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;aba&quot; from the prefix of word, and add characters &quot;bac&quot; to the end of word. Thus, word becomes equal to &quot;cababac&quot;.\nAt the 2nd second, we remove characters &quot;cab&quot; from the prefix of word, and add &quot;aba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 4\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;abac&quot; from the prefix of word, and add characters &quot;caba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abcbabcd&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to &quot;abcbabcd&quot; and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 50 </code></li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 135,
            "dislikes": 31,
            "similarQuestions": "[{\"title\": \"Longest Happy Prefix\", \"titleSlug\": \"longest-happy-prefix\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.9K\", \"totalSubmission\": \"46.9K\", \"totalAcceptedRaw\": 18923, \"totalSubmissionRaw\": 46912, \"acRate\": \"40.3%\"}",
            "hints": [
                "Find the longest suffix which is also a prefix and the length is multiple of <code>k</code>."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string `word` and an integer `k`, you must perform the following operations at every second:\n\n1.  Remove the first `k` characters of `word`. \n2.  Add any `k` characters to the end of `word`.\n\nNote that the characters added do not have to be the same as the ones removed, but both operations must be performed in each second.\n\nReturn the minimum time (number of seconds) greater than zero required for `word` to revert to its initial state.",
                "constraints": [
                    "1 <= word.length <= 50",
                    "1 <= k <= word.length",
                    "word consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word = \"abacaba\", k = 3",
                        "output": "2",
                        "explanation": "In the first second, \"aba\" is removed and \"bac\" is added, resulting in \"cababac\". In the second second, \"cab\" is removed and \"aba\" is added, resulting in \"abacaba\", which is the initial state.  2 is the minimum time required."
                    },
                    {
                        "input": "word = \"abacaba\", k = 4",
                        "output": "1",
                        "explanation": "In the first second, \"abac\" is removed and \"caba\" is added, resulting in \"abacaba\", which is the initial state."
                    },
                    {
                        "input": "word = \"abcbabcd\", k = 2",
                        "output": "4",
                        "explanation": "After 4 seconds of removing the first 2 characters and adding the same 2 characters to the end, the word reverts to its initial state. 4 is the minimum time required."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "longest-happy-prefix",
                "title": "Longest Happy Prefix",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Find the longest suffix which is also a prefix and the length is multiple of <code>k</code>."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ]
    }
}