{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3031",
            "title": "Minimum Time to Revert Word to Initial State II",
            "titleSlug": "minimum-time-to-revert-word-to-initial-state-ii",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>word</code> and an integer <code>k</code>.</p>\n\n<p>At every second, you must perform the following operations:</p>\n\n<ul>\n\t<li>Remove the first <code>k</code> characters of <code>word</code>.</li>\n\t<li>Add any <code>k</code> characters to the end of <code>word</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that you do not necessarily need to add the same characters that you removed. However, you must perform <strong>both</strong> operations at every second.</p>\n\n<p>Return <em>the <strong>minimum</strong> time greater than zero required for</em> <code>word</code> <em>to revert to its <strong>initial</strong> state</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;aba&quot; from the prefix of word, and add characters &quot;bac&quot; to the end of word. Thus, word becomes equal to &quot;cababac&quot;.\nAt the 2nd second, we remove characters &quot;cab&quot; from the prefix of word, and add &quot;aba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abacaba&quot;, k = 4\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> At the 1st second, we remove characters &quot;abac&quot; from the prefix of word, and add characters &quot;caba&quot; to the end of word. Thus, word becomes equal to &quot;abacaba&quot; and reverts to its initial state.\nIt can be shown that 1 second is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> word = &quot;abcbabcd&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> At every second, we will remove the first 2 characters of word, and add the same characters to the end of word.\nAfter 4 seconds, word becomes equal to &quot;abcbabcd&quot; and reverts to its initial state.\nIt can be shown that 4 seconds is the minimum time greater than zero required for word to revert to its initial state.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= word.length</code></li>\n\t<li><code>word</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 123,
            "dislikes": 21,
            "similarQuestions": "[{\"title\": \"Longest Happy Prefix\", \"titleSlug\": \"longest-happy-prefix\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.5K\", \"totalSubmission\": \"29.6K\", \"totalAcceptedRaw\": 10513, \"totalSubmissionRaw\": 29582, \"acRate\": \"35.5%\"}",
            "hints": [
                "Find the longest suffix which is also a prefix and whose length is a multiple of <code>K</code> in <code>O(N)</code>.",
                "Use Z-function."
            ],
            "rephrased": {
                "body": "Given a 0-indexed string `word` and an integer `k`. In each second, you remove the first `k` characters of `word` and add any `k` characters to the end of `word`. The added characters don't have to be the removed ones. Return the minimum time (number of seconds) greater than zero required for `word` to return to its initial state.",
                "constraints": [
                    "1 <= word.length <= 10^6",
                    "1 <= k <= word.length",
                    "word consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "word = \"abacaba\", k = 3",
                        "output": "2",
                        "explanation": "At the 1st second, \"aba\" is removed and \"bac\" is added, making word \"cababac\". At the 2nd second, \"cab\" is removed and \"aba\" is added, making word \"abacaba\", reverting to the initial state. 2 is the minimum time."
                    },
                    {
                        "input": "word = \"abacaba\", k = 4",
                        "output": "1",
                        "explanation": "At the 1st second, \"abac\" is removed and \"caba\" is added, making word \"abacaba\", reverting to the initial state. 1 is the minimum time."
                    },
                    {
                        "input": "word = \"abcbabcd\", k = 2",
                        "output": "4",
                        "explanation": "After 4 seconds of removing the first 2 characters and adding them to the end, the word reverts to \"abcbabcd\". 4 is the minimum time."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "longest-happy-prefix",
                "title": "Longest Happy Prefix",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Find the longest suffix which is also a prefix and whose length is a multiple of <code>K</code> in <code>O(N)</code>.",
            "Use Z-function."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 3029. Minimum Time to Revert Word to Initial State I\n  int minimumTimeToInitialState(string word, int k) {\n    const int n = word.length();\n    const int maxOps = (n - 1) / k + 1;\n    const vector<int> z = zFunction(word);\n    for (int ans = 1; ans < maxOps; ++ans)\n      if (z[ans * k] >= n - ans * k)\n        return ans;\n    return maxOps;\n  }\n\n  // Returns the z array, where z[i] is the length of the longest prefix of\n  // s[i..n) which is also a prefix of s.\n  //\n  // https://cp-algorithms.com/string/z-function.html#implementation\n  vector<int> zFunction(const string& s) {\n    const int n = s.length();\n    vector<int> z(n);\n    int l = 0;\n    int r = 0;\n    for (int i = 1; i < n; ++i) {\n      if (i < r)\n        z[i] = min(r - i, z[i - l]);\n      while (i + z[i] < n && s[z[i]] == s[i + z[i]])\n        ++z[i];\n      if (i + z[i] > r) {\n        l = i;\n        r = i + z[i];\n      }\n    }\n    return z;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Same as 3029. Minimum Time to Revert Word to Initial State I\n  public int minimumTimeToInitialState(String word, int k) {\n    final int n = word.length();\n    final int maxOps = (n - 1) / k + 1;\n    final int[] z = zFunction(word);\n    for (int ans = 1; ans < maxOps; ++ans)\n      if (z[ans * k] >= n - ans * k)\n        return ans;\n    return maxOps;\n  }\n\n  // Returns the z array, where z[i] is the length of the longest prefix of\n  // s[i..n) which is also a prefix of s.\n  //\n  // https://cp-algorithms.com/string/z-function.html#implementation\n  private int[] zFunction(final String s) {\n    final int n = s.length();\n    int[] z = new int[n];\n    int l = 0;\n    int r = 0;\n    for (int i = 1; i < n; ++i) {\n      if (i < r)\n        z[i] = Math.min(r - i, z[i - l]);\n      while (i + z[i] < n && s.charAt(z[i]) == s.charAt(i + z[i]))\n        ++z[i];\n      if (i + z[i] > r) {\n        l = i;\n        r = i + z[i];\n      }\n    }\n    return z;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 3029. Minimum Time to Revert Word to Initial State I\n  def minimumTimeToInitialState(self, word: str, k: int) -> int:\n    n = len(word)\n    maxOps = (n - 1) // k + 1\n    z = self._zFunction(word)\n\n    for ans in range(1, maxOps):\n      if z[ans * k] >= n - ans * k:\n        return ans\n\n    return maxOps\n\n  def _zFunction(self, s: str) -> List[int]:\n    \"\"\"\n    Returns the z array, where z[i] is the length of the longest prefix of\n    s[i..n) which is also a prefix of s.\n\n    https://cp-algorithms.com/string/z-function.html#implementation\n    \"\"\"\n    n = len(s)\n    z = [0] * n\n    l = 0\n    r = 0\n    for i in range(1, n):\n      if i < r:\n        z[i] = min(r - i, z[i - l])\n      while i + z[i] < n and s[z[i]] == s[i + z[i]]:\n        z[i] += 1\n      if i + z[i] > r:\n        l = i\n        r = i + z[i]\n    return z\n",
                "lang_text": "py"
            }
        }
    }
}