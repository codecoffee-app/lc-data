{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2577",
            "title": "Minimum Time to Visit a Cell In a Grid",
            "titleSlug": "minimum-time-to-visit-a-cell-in-a-grid",
            "content": "<p>You are given a <code>m x n</code> matrix <code>grid</code> consisting of <b>non-negative</b> integers where <code>grid[row][col]</code> represents the <strong>minimum</strong> time required to be able to visit the cell <code>(row, col)</code>, which means you can visit the cell <code>(row, col)</code> only when the time you visit it is greater than or equal to <code>grid[row][col]</code>.</p>\n\n<p>You are standing in the <strong>top-left</strong> cell of the matrix in the <code>0<sup>th</sup></code> second, and you must move to <strong>any</strong> adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.</p>\n\n<p>Return <em>the <strong>minimum</strong> time required in which you can visit the bottom-right cell of the matrix</em>. If you cannot visit the bottom-right cell, then return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/02/14/yetgriddrawio-8.png\" /></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> One of the paths that we can take is the following:\n- at t = 0, we are on the cell (0,0).\n- at t = 1, we move to the cell (0,1). It is possible because grid[0][1] &lt;= 1.\n- at t = 2, we move to the cell (1,1). It is possible because grid[1][1] &lt;= 2.\n- at t = 3, we move to the cell (1,2). It is possible because grid[1][2] &lt;= 3.\n- at t = 4, we move to the cell (1,1). It is possible because grid[1][1] &lt;= 4.\n- at t = 5, we move to the cell (1,2). It is possible because grid[1][2] &lt;= 5.\n- at t = 6, we move to the cell (1,3). It is possible because grid[1][3] &lt;= 6.\n- at t = 7, we move to the cell (2,3). It is possible because grid[2][3] &lt;= 7.\nThe final time is 7. It can be shown that it is the minimum time possible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/02/14/yetgriddrawio-9.png\" style=\"width: 151px; height: 151px;\" /></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,2,4],[3,2,1],[1,0,4]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no path from the top left to the bottom-right cell.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>2 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>4 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>grid[0][0] == 0</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<style type=\"text/css\">.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n</style>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 504,
            "dislikes": 9,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.9K\", \"totalSubmission\": \"28.3K\", \"totalAcceptedRaw\": 9870, \"totalSubmissionRaw\": 28291, \"acRate\": \"34.9%\"}",
            "hints": [
                "Try using some algorithm that can find the shortest paths on a graph.",
                "Consider the case where you have to go back and forth between two cells of the matrix to unlock some other cells."
            ],
            "rephrased": {
                "body": "Given an `m x n` matrix `grid` of non-negative integers, where `grid[row][col]` represents the minimum time required to visit cell `(row, col)`. You can only visit a cell at time `t` if `t >= grid[row][col]`. Starting at cell `(0, 0)` at time 0, move to adjacent cells (up, down, left, right) in 1 second per move. Return the minimum time to reach the bottom-right cell `(m-1, n-1)`. If unreachable, return `-1`.",
                "constraints": [
                    "`m == grid.length`",
                    "`n == grid[i].length`",
                    "`2 <= m, n <= 1000`",
                    "`4 <= m * n <= 10^5`",
                    "`0 <= grid[i][j] <= 10^5`",
                    "`grid[0][0] == 0`"
                ],
                "testcases": [
                    {
                        "input": "grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]",
                        "output": "7",
                        "explanation": "A possible path: (0,0) at t=0 -> (0,1) at t=1 -> (1,1) at t=2 -> (1,2) at t=3 -> (1,1) at t=4 -> (1,2) at t=5 -> (1,3) at t=6 -> (2,3) at t=7.  Minimum time is 7."
                    },
                    {
                        "input": "grid = [[0,2,4],[3,2,1],[1,0,4]]",
                        "output": "-1",
                        "explanation": "There is no path from the top-left to the bottom-right cell."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Try using some algorithm that can find the shortest paths on a graph.",
            "Consider the case where you have to go back and forth between two cells of the matrix to unlock some other cells."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumTime(vector<vector<int>>& grid) {\n    if (grid[0][1] > 1 && grid[1][0] > 1)\n      return -1;\n\n    const int m = grid.size();\n    const int n = grid[0].size();\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    using T = tuple<int, int, int>;  // (time, i, j)\n    priority_queue<T, vector<T>, greater<>> minHeap;\n    vector<vector<bool>> seen(m, vector<bool>(n));\n\n    minHeap.emplace(0, 0, 0);\n    seen[0][0] = true;\n\n    while (!minHeap.empty()) {\n      const auto [time, i, j] = minHeap.top();\n      minHeap.pop();\n      if (i == m - 1 && j == n - 1)\n        return time;\n      for (int k = 0; k < 4; ++k) {\n        const int x = i + dirs[k];\n        const int y = j + dirs[k + 1];\n        if (x < 0 || x == m || y < 0 || y == n)\n          continue;\n        if (seen[x][y])\n          continue;\n        const int extraWait = (grid[x][y] - time) % 2 == 0 ? 1 : 0;\n        const int nextTime = max(time + 1, grid[x][y] + extraWait);\n        minHeap.emplace(nextTime, x, y);\n        seen[x][y] = true;\n      }\n    }\n\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumTime(int[][] grid) {\n    if (grid[0][1] > 1 && grid[1][0] > 1)\n      return -1;\n\n    final int m = grid.length;\n    final int n = grid[0].length;\n    final int[] dirs = {0, 1, 0, -1, 0};\n    // (time, i, j)\n    Queue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n    boolean[][] seen = new boolean[m][n];\n\n    minHeap.offer(new int[] {0, 0, 0});\n    seen[0][0] = true;\n\n    while (!minHeap.isEmpty()) {\n      final int time = minHeap.peek()[0];\n      final int i = minHeap.peek()[1];\n      final int j = minHeap.poll()[2];\n      if (i == m - 1 && j == n - 1)\n        return time;\n      for (int k = 0; k < 4; ++k) {\n        final int x = i + dirs[k];\n        final int y = j + dirs[k + 1];\n        if (x < 0 || x == m || y < 0 || y == n)\n          continue;\n        if (seen[x][y])\n          continue;\n        final int extraWait = (grid[x][y] - time) % 2 == 0 ? 1 : 0;\n        final int nextTime = Math.max(time + 1, grid[x][y] + extraWait);\n        minHeap.offer(new int[] {nextTime, x, y});\n        seen[x][y] = true;\n      }\n    }\n\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumTime(self, grid: List[List[int]]) -> int:\n    if grid[0][1] > 1 and grid[1][0] > 1:\n      return -1\n\n    m = len(grid)\n    n = len(grid[0])\n    dirs = [0, 1, 0, -1, 0]\n    minHeap = [(0, 0, 0)]  # (time, i, j)\n    seen = {(0, 0)}\n\n    while minHeap:\n      time, i, j = heapq.heappop(minHeap)\n      if i == m - 1 and j == n - 1:\n        return time\n      for k in range(4):\n        x = i + dirs[k]\n        y = j + dirs[k + 1]\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if (x, y) in seen:\n          continue\n        extraWait = 1 if (grid[x][y] - time) % 2 == 0 else 0\n        nextTime = max(time + 1, grid[x][y] + extraWait)\n        heapq.heappush(minHeap, (nextTime, x, y))\n        seen.add((x, y))\n",
                "lang_text": "py"
            }
        }
    }
}