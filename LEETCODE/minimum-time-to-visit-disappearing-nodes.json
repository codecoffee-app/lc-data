{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3112",
            "title": "Minimum Time to Visit Disappearing Nodes",
            "titleSlug": "minimum-time-to-visit-disappearing-nodes",
            "content": "<p>There is an undirected graph of <code>n</code> nodes. You are given a 2D array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, length<sub>i</sub>]</code> describes an edge between node <code>u<sub>i</sub></code> and node <code>v<sub>i</sub></code> with a traversal time of <code>length<sub>i</sub></code> units.</p>\n\n<p>Additionally, you are given an array <code>disappear</code>, where <code>disappear[i]</code> denotes the time when the node <code>i</code> disappears from the graph and you won&#39;t be able to visit it.</p>\n\n<p><strong>Notice</strong> that the graph might be disconnected and might contain multiple edges.</p>\n\n<p>Return the array <code>answer</code>, with <code>answer[i]</code> denoting the <strong>minimum</strong> units of time required to reach node <code>i</code> from node 0. If node <code>i</code> is <strong>unreachable</strong> from node 0 then <code>answer[i]</code> is <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img 10px=\"\" alt=\"\" padding:=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/09/example1.png\" style=\"width: 350px; height: 210px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\"> n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,1,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\"> [0,-1,4]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears.</p>\n\n<ul>\n\t<li>For node 0, we don&#39;t need any time as it is our starting point.</li>\n\t<li>For node 1, we need at least 2 units of time to traverse <code>edges[0]</code>. Unfortunately, it disappears at that moment, so we won&#39;t be able to visit it.</li>\n\t<li>For node 2, we need at least 4 units of time to traverse <code>edges[2]</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img 10px=\"\" alt=\"\" padding:=\"\" src=\"https://assets.leetcode.com/uploads/2024/03/09/example2.png\" style=\"width: 350px; height: 210px;\" /></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\"> n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,3,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\"> [0,2,3]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We are starting our journey from node 0, and our goal is to find the minimum time required to reach each node before it disappears.</p>\n\n<ul>\n\t<li>For node 0, we don&#39;t need any time as it is the starting point.</li>\n\t<li>For node 1, we need at least 2 units of time to traverse <code>edges[0]</code>.</li>\n\t<li>For node 2, we need at least 3 units of time to traverse <code>edges[0]</code> and <code>edges[1]</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2, edges = [[0,1,1]], disappear = [1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Exactly when we reach node 1, it disappears.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges[i] == [u<sub>i</sub>, v<sub>i</sub>, length<sub>i</sub>]</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= length<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>disappear.length == n</code></li>\n\t<li><code>1 &lt;= disappear[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 135,
            "dislikes": 20,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.7K\", \"totalSubmission\": \"48.7K\", \"totalAcceptedRaw\": 16741, \"totalSubmissionRaw\": 48697, \"acRate\": \"34.4%\"}",
            "hints": [
                "Use Dijkstra\u2019s algorithm, but only visit nodes if you can reach them before disappearance."
            ],
            "rephrased": {
                "body": "Given an undirected graph of `n` nodes represented by a 2D array `edges`, where `edges[i] = [u_i, v_i, length_i]` defines an edge between nodes `u_i` and `v_i` with a traversal time of `length_i`.  You are also given an array `disappear`, where `disappear[i]` is the time node `i` disappears from the graph.  Return an array `answer` where `answer[i]` is the minimum time to reach node `i` from node 0 before it disappears. If node `i` is unreachable from node 0, `answer[i]` is -1.",
                "constraints": [
                    "1 <= n <= 5 * 10^4",
                    "0 <= edges.length <= 10^5",
                    "edges[i] == [u_i, v_i, length_i]",
                    "0 <= u_i, v_i <= n - 1",
                    "1 <= length_i <= 10^5",
                    "disappear.length == n",
                    "1 <= disappear[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": {
                            "n": 3,
                            "edges": [
                                [
                                    0,
                                    1,
                                    2
                                ],
                                [
                                    1,
                                    2,
                                    1
                                ],
                                [
                                    0,
                                    2,
                                    4
                                ]
                            ],
                            "disappear": [
                                1,
                                1,
                                5
                            ]
                        },
                        "output": [
                            0,
                            -1,
                            4
                        ],
                        "explanation": "Starting from node 0, we need to find the minimum time to reach each node before it disappears. Node 0 requires no time. Reaching node 1 takes 2 units of time, but it disappears at that moment, so it's unreachable. Reaching node 2 takes 4 units of time."
                    },
                    {
                        "input": {
                            "n": 3,
                            "edges": [
                                [
                                    0,
                                    1,
                                    2
                                ],
                                [
                                    1,
                                    2,
                                    1
                                ],
                                [
                                    0,
                                    2,
                                    4
                                ]
                            ],
                            "disappear": [
                                1,
                                3,
                                5
                            ]
                        },
                        "output": [
                            0,
                            2,
                            3
                        ],
                        "explanation": "Starting from node 0, node 0 requires no time. Reaching node 1 takes 2 units of time. Reaching node 2 can be done by traversing edges [0, 1] which takes 3 units of time."
                    },
                    {
                        "input": {
                            "n": 2,
                            "edges": [
                                [
                                    0,
                                    1,
                                    1
                                ]
                            ],
                            "disappear": [
                                1,
                                1
                            ]
                        },
                        "output": [
                            0,
                            -1
                        ],
                        "explanation": "Exactly when we reach node 1, it disappears, making it unreachable."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use Dijkstra\u2019s algorithm, but only visit nodes if you can reach them before disappearance."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> minimumTime(int n, vector<vector<int>>& edges,\n                          vector<int>& disappear) {\n    vector<vector<pair<int, int>>> graph(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int w = edge[2];\n      graph[u].emplace_back(v, w);\n      graph[v].emplace_back(u, w);\n    }\n\n    return dijkstra(graph, 0, disappear);\n  }\n\n private:\n  vector<int> dijkstra(const vector<vector<pair<int, int>>>& graph, int src,\n                       const vector<int>& disappear) {\n    vector<int> dist(graph.size(), INT_MAX);\n    using P = pair<int, int>;  // (d, u)\n    priority_queue<P, vector<P>, greater<>> minHeap;\n\n    dist[src] = 0;\n    minHeap.emplace(dist[src], src);\n\n    while (!minHeap.empty()) {\n      const auto [d, u] = minHeap.top();\n      minHeap.pop();\n      if (d > dist[u])\n        continue;\n      for (const auto& [v, w] : graph[u])\n        if (d + w < disappear[v] && d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.push({dist[v], v});\n        }\n    }\n\n    for (int& d : dist)\n      if (d == INT_MAX)\n        d = -1;\n\n    return dist;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] minimumTime(int n, int[][] edges, int[] disappear) {\n    List<Pair<Integer, Integer>>[] graph = new List[n];\n\n    for (int i = 0; i < n; i++)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int w = edge[2];\n      graph[u].add(new Pair<>(v, w));\n      graph[v].add(new Pair<>(u, w));\n    }\n\n    return dijkstra(graph, 0, disappear);\n  }\n\n  private int[] dijkstra(List<Pair<Integer, Integer>>[] graph, int src, int[] disappear) {\n    int[] dist = new int[graph.length];\n    Arrays.fill(dist, Integer.MAX_VALUE);\n    // (d, u)\n    Queue<Pair<Integer, Integer>> minHeap = new PriorityQueue<>(Comparator.comparing(Pair::getKey));\n\n    dist[src] = 0;\n    minHeap.offer(new Pair<>(dist[src], src));\n\n    while (!minHeap.isEmpty()) {\n      Pair<Integer, Integer> p = minHeap.poll();\n      final int d = p.getKey();\n      final int u = p.getValue();\n      if (d > dist[u])\n        continue;\n      for (Pair<Integer, Integer> pair : graph[u]) {\n        final int v = pair.getKey();\n        final int w = pair.getValue();\n        if (d + w < disappear[v] && d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.offer(new Pair<>(dist[v], v));\n        }\n      }\n    }\n\n    for (int i = 0; i < dist.length; ++i)\n      if (dist[i] == Integer.MAX_VALUE)\n        dist[i] = -1;\n\n    return dist;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumTime(self, n: int, edges: List[List[int]], disappear: List[int]) -> List[int]:\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    return self._dijkstra(graph, 0, disappear)\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int, disappear: List[int]) -> List[int]:\n    dist = [math.inf] * len(graph)\n\n    dist[src] = 0\n    minHeap = [(dist[src], src)]  # (d, u)\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        if d + w < disappear[v] and d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n\n    return [d if d != math.inf else -1\n            for d in dist]\n",
                "lang_text": "py"
            }
        }
    }
}