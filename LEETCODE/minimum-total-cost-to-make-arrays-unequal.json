{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2499",
            "title": "Minimum Total Cost to Make Arrays Unequal",
            "titleSlug": "minimum-total-cost-to-make-arrays-unequal",
            "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, of equal length <code>n</code>.</p>\n\n<p>In one operation, you can swap the values of any two indices of <code>nums1</code>. The <strong>cost</strong> of this operation is the <strong>sum</strong> of the indices.</p>\n\n<p>Find the <strong>minimum</strong> total cost of performing the given operation <strong>any</strong> number of times such that <code>nums1[i] != nums2[i]</code> for all <code>0 &lt;= i &lt;= n - 1</code> after performing all the operations.</p>\n\n<p>Return <em>the <strong>minimum total cost</strong> such that </em><code>nums1</code> and <code>nums2</code><em> satisfy the above condition</em>. In case it is not possible, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> \nOne of the ways we can perform the operations is:\n- Swap values at indices 0 and 3, incurring cost = 0 + 3 = 3. Now, nums1 = [4,2,3,1,5]\n- Swap values at indices 1 and 2, incurring cost = 1 + 2 = 3. Now, nums1 = [4,3,2,1,5].\n- Swap values at indices 0 and 4, incurring cost = 0 + 4 = 4. Now, nums1 =[5,3,2,1,4].\nWe can see that for each index i, nums1[i] != nums2[i]. The cost required here is 10.\nNote that there are other ways to swap values, but it can be proven that it is not possible to obtain a cost less than 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> \nOne of the ways we can perform the operations is:\n- Swap values at indices 2 and 3, incurring cost = 2 + 3 = 5. Now, nums1 = [2,2,1,2,3].\n- Swap values at indices 1 and 4, incurring cost = 1 + 4 = 5. Now, nums1 = [2,3,1,2,2].\nThe total cost needed here is 10, which is the minimum possible.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,2], nums2 = [1,2,2]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> \nIt can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform.\nHence, we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 213,
            "dislikes": 8,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.8K\", \"totalSubmission\": \"8.8K\", \"totalAcceptedRaw\": 3778, \"totalSubmissionRaw\": 8803, \"acRate\": \"42.9%\"}",
            "hints": [
                "How can we check which indices of <code>nums1</code> will be considered for swapping? How to minimize the number of such operations?",
                "It can be seen that greedily swapping values of indices where <code>nums1[i] == nums2[i]</code> is the most optimal choice. How many values cannot be swapped this way?",
                "Find which indices we will swap these remaining values with, and if there are enough such indices."
            ],
            "rephrased": {
                "body": "Given two 0-indexed integer arrays `nums1` and `nums2` of equal length `n`, determine the minimum total cost to make `nums1[i] != nums2[i]` for all `0 <= i < n - 1`. You can swap the values at any two indices of `nums1`, and the cost of this operation is the sum of the indices. Return the minimum total cost, or -1 if it's impossible to satisfy the condition.",
                "constraints": [
                    "n == nums1.length == nums2.length",
                    "1 <= n <= 10^5",
                    "1 <= nums1[i], nums2[i] <= n"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]",
                        "output": "10",
                        "explanation": "One possible sequence of swaps with minimum cost is: swap indices 0 and 3 (cost 3), swap indices 1 and 2 (cost 3), and swap indices 0 and 4 (cost 4).  This results in nums1 = [5,3,2,1,4] and the total cost is 10."
                    },
                    {
                        "input": "nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]",
                        "output": "10",
                        "explanation": "One possible sequence of swaps with minimum cost is: swap indices 2 and 3 (cost 5), and swap indices 1 and 4 (cost 5). The total cost is 10."
                    },
                    {
                        "input": "nums1 = [1,2,2], nums2 = [1,2,2]",
                        "output": "-1",
                        "explanation": "It is impossible to make nums1[i] != nums2[i] for all i, regardless of the swaps performed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "How can we check which indices of <code>nums1</code> will be considered for swapping? How to minimize the number of such operations?",
            "It can be seen that greedily swapping values of indices where <code>nums1[i] == nums2[i]</code> is the most optimal choice. How many values cannot be swapped this way?",
            "Find which indices we will swap these remaining values with, and if there are enough such indices."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumTotalCost(vector<int>& nums1, vector<int>& nums2) {\n    const int n = nums1.size();\n    long long ans = 0;\n    int maxFreq = 0;\n    int maxFreqNum = 0;\n    int shouldBeSwapped = 0;\n    vector<int> conflictedNumCount(n + 1);\n\n    // Collect indices i s.t. nums1[i] == nums2[i] and record their `maxFreq`\n    // and `maxFreqNum`.\n    for (int i = 0; i < n; ++i)\n      if (nums1[i] == nums2[i]) {\n        const int conflictedNum = nums1[i];\n        if (++conflictedNumCount[conflictedNum] > maxFreq) {\n          maxFreq = conflictedNumCount[conflictedNum];\n          maxFreqNum = conflictedNum;\n        }\n        ++shouldBeSwapped;\n        ans += i;\n      }\n\n    // Collect indices with nums1[i] != nums2[i] that contribute less cost.\n    // This can be greedily achieved by iterating from 0 to n - 1.\n    for (int i = 0; i < n; ++i) {\n      // Since we have over `maxFreq * 2` spaces, `maxFreqNum` can be\n      // successfully distributed, so no need to collectextra spaces.\n      if (maxFreq * 2 <= shouldBeSwapped)\n        break;\n      if (nums1[i] == nums2[i])\n        continue;\n      // Nums == `maxFreqNum` worsen the result since they increase `maxFreq`.\n      if (nums1[i] == maxFreqNum || nums2[i] == maxFreqNum)\n        continue;\n      ++shouldBeSwapped;\n      ans += i;\n    }\n\n    return maxFreq * 2 > shouldBeSwapped ? -1 : ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minimumTotalCost(int[] nums1, int[] nums2) {\n    final int n = nums1.length;\n    long ans = 0;\n    int maxFreq = 0;\n    int maxFreqNum = 0;\n    int shouldBeSwapped = 0;\n    int[] conflictedNumCount = new int[n + 1];\n\n    // Collect indices i s.t. nums1[i] == nums2[i] and record their `maxFreq`\n    // and `maxFreqNum`.\n    for (int i = 0; i < n; ++i)\n      if (nums1[i] == nums2[i]) {\n        final int conflictedNum = nums1[i];\n        if (++conflictedNumCount[conflictedNum] > maxFreq) {\n          maxFreq = conflictedNumCount[conflictedNum];\n          maxFreqNum = conflictedNum;\n        }\n        ++shouldBeSwapped;\n        ans += i;\n      }\n\n    // Collect indices with nums1[i] != nums2[i] that contribute less cost.\n    // This can be greedily achieved by iterating from 0 to n - 1.\n    for (int i = 0; i < n; ++i) {\n      // Since we have over `maxFreq * 2` spaces, `maxFreqNum` can be\n      // successfully distributed, so no need to collectextra spaces.\n      if (maxFreq * 2 <= shouldBeSwapped)\n        break;\n      if (nums1[i] == nums2[i])\n        continue;\n      // Nums == `maxFreqNum` worsen the result since they increase `maxFreq`.\n      if (nums1[i] == maxFreqNum || nums2[i] == maxFreqNum)\n        continue;\n      ++shouldBeSwapped;\n      ans += i;\n    }\n\n    return maxFreq * 2 > shouldBeSwapped ? -1 : ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    ans = 0\n    maxFreq = 0\n    maxFreqNum = 0\n    shouldBeSwapped = 0\n    conflictedNumCount = [0] * (n + 1)\n\n    # Collect indices i s.t. num1 == num2 and record their `maxFreq`\n    # and `maxFreqNum`.\n    for i, (num1, num2) in enumerate(zip(nums1, nums2)):\n      if num1 == num2:\n        conflictedNum = num1\n        conflictedNumCount[conflictedNum] += 1\n        if conflictedNumCount[conflictedNum] > maxFreq:\n          maxFreq = conflictedNumCount[conflictedNum]\n          maxFreqNum = conflictedNum\n        shouldBeSwapped += 1\n        ans += i\n\n    # Collect indices with num1 != num2 that contribute less cost.\n    # This can be greedily achieved by iterating from 0 to n - 1.\n    for i, (num1, num2) in enumerate(zip(nums1, nums2)):\n      # Since we have over `maxFreq * 2` spaces, `maxFreqNum` can be\n      # successfully distributed, so no need to collectextra spaces.\n      if maxFreq * 2 <= shouldBeSwapped:\n        break\n      if num1 == num2:\n        continue\n      # Nums == `maxFreqNum` worsen the result since they increase `maxFreq`.\n      if num1 == maxFreqNum or num2 == maxFreqNum:\n        continue\n      shouldBeSwapped += 1\n      ans += i\n\n    return -1 if maxFreq * 2 > shouldBeSwapped else ans\n",
                "lang_text": "py"
            }
        }
    }
}