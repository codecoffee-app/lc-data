{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2463",
            "title": "Minimum Total Distance Traveled",
            "titleSlug": "minimum-total-distance-traveled",
            "content": "<p>There are some robots and factories on the X-axis. You are given an integer array <code>robot</code> where <code>robot[i]</code> is the position of the <code>i<sup>th</sup></code> robot. You are also given a 2D integer array <code>factory</code> where <code>factory[j] = [position<sub>j</sub>, limit<sub>j</sub>]</code> indicates that <code>position<sub>j</sub></code> is the position of the <code>j<sup>th</sup></code> factory and that the <code>j<sup>th</sup></code> factory can repair at most <code>limit<sub>j</sub></code> robots.</p>\n\n<p>The positions of each robot are <strong>unique</strong>. The positions of each factory are also <strong>unique</strong>. Note that a robot can be <strong>in the same position</strong> as a factory initially.</p>\n\n<p>All the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.</p>\n\n<p><strong>At any moment</strong>, you can set the initial direction of moving for <strong>some</strong> robot. Your target is to minimize the total distance traveled by all the robots.</p>\n\n<p>Return <em>the minimum total distance traveled by all the robots</em>. The test cases are generated such that all the robots can be repaired.</p>\n\n<p><strong>Note that</strong></p>\n\n<ul>\n\t<li>All robots move at the same speed.</li>\n\t<li>If two robots move in the same direction, they will never collide.</li>\n\t<li>If two robots move in opposite directions and they meet at some point, they do not collide. They cross each other.</li>\n\t<li>If a robot passes by a factory that reached its limits, it crosses it as if it does not exist.</li>\n\t<li>If the robot moved from a position <code>x</code> to a position <code>y</code>, the distance it moved is <code>|y - x|</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/15/example1.jpg\" style=\"width: 500px; height: 320px;\" />\n<pre>\n<strong>Input:</strong> robot = [0,4,6], factory = [[2,2],[6,2]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> As shown in the figure:\n- The first robot at position 0 moves in the positive direction. It will be repaired at the first factory.\n- The second robot at position 4 moves in the negative direction. It will be repaired at the first factory.\n- The third robot at position 6 will be repaired at the second factory. It does not need to move.\nThe limit of the first factory is 2, and it fixed 2 robots.\nThe limit of the second factory is 2, and it fixed 1 robot.\nThe total distance is |2 - 0| + |2 - 4| + |6 - 6| = 4. It can be shown that we cannot achieve a better total distance than 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/15/example-2.jpg\" style=\"width: 500px; height: 329px;\" />\n<pre>\n<strong>Input:</strong> robot = [1,-1], factory = [[-2,1],[2,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> As shown in the figure:\n- The first robot at position 1 moves in the positive direction. It will be repaired at the second factory.\n- The second robot at position -1 moves in the negative direction. It will be repaired at the first factory.\nThe limit of the first factory is 1, and it fixed 1 robot.\nThe limit of the second factory is 1, and it fixed 1 robot.\nThe total distance is |2 - 1| + |(-2) - (-1)| = 2. It can be shown that we cannot achieve a better total distance than 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= robot.length, factory.length &lt;= 100</code></li>\n\t<li><code>factory[j].length == 2</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= robot[i], position<sub>j</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= limit<sub>j</sub> &lt;= robot.length</code></li>\n\t<li>The input will be generated such that it is always possible to repair every robot.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 454,
            "dislikes": 4,
            "similarQuestions": "[{\"title\": \"Capacity To Ship Packages Within D Days\", \"titleSlug\": \"capacity-to-ship-packages-within-d-days\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Earn Points\", \"titleSlug\": \"number-of-ways-to-earn-points\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.6K\", \"totalSubmission\": \"18.9K\", \"totalAcceptedRaw\": 7598, \"totalSubmissionRaw\": 18887, \"acRate\": \"40.2%\"}",
            "hints": [
                "Sort robots and factories by their positions.",
                "After sorting, notice that each factory should repair some subsegment of robots.",
                "Find the minimum total distance to repair first i robots with first j factories."
            ],
            "rephrased": {
                "body": "Given the positions of robots and factories on the X-axis, determine the minimum total distance traveled by all robots to be repaired. Each robot can move in either the positive or negative direction until it reaches a factory that has not reached its repair limit. The goal is to minimize the sum of distances each robot travels to a factory.",
                "constraints": [
                    "1 <= robot.length, factory.length <= 100",
                    "factory[j].length == 2",
                    "-10^9 <= robot[i], position_j <= 10^9",
                    "0 <= limit_j <= robot.length",
                    "It is always possible to repair every robot."
                ],
                "testcases": [
                    {
                        "input": "robot = [0,4,6], factory = [[2,2],[6,2]]",
                        "output": "4",
                        "explanation": "Robot at 0 moves to factory at 2 (distance 2). Robot at 4 moves to factory at 2 (distance 2). Robot at 6 stays at factory at 6 (distance 0). Total distance: 2 + 2 + 0 = 4."
                    },
                    {
                        "input": "robot = [1,-1], factory = [[-2,1],[2,1]]",
                        "output": "2",
                        "explanation": "Robot at 1 moves to factory at 2 (distance 1). Robot at -1 moves to factory at -2 (distance 1). Total distance: 1 + 1 = 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "capacity-to-ship-packages-within-d-days",
                "title": "Capacity To Ship Packages Within D Days",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-ways-to-earn-points",
                "title": "Number of Ways to Earn Points",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort robots and factories by their positions.",
            "After sorting, notice that each factory should repair some subsegment of robots.",
            "Find the minimum total distance to repair first i robots with first j factories."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumTotalDistance(vector<int>& robot,\n                                 vector<vector<int>>& factory) {\n    std::ranges::sort(robot);\n    std::ranges::sort(factory);\n\n    // dp[i][j][k] := min distance to fix robot[i:] with factory[j:] where\n    // factory[j] already fixed k robots\n    dp.resize(robot.size(),\n              vector<vector<long long>>(factory.size(),\n                                        vector<long long>(robot.size())));\n    return minimumTotalDistance(robot, factory, 0, 0, 0);\n  }\n\n private:\n  vector<vector<vector<long long>>> dp;\n\n  long long minimumTotalDistance(const vector<int>& robot,\n                                 const vector<vector<int>>& factory, int i,\n                                 int j, int k) {\n    if (i == robot.size())\n      return 0;\n    if (j == factory.size())\n      return LLONG_MAX;\n    if (dp[i][j][k] > 0)\n      return dp[i][j][k];\n    const long long skipFactory =\n        minimumTotalDistance(robot, factory, i, j + 1, 0);\n    const int position = factory[j][0];\n    const int limit = factory[j][1];\n    const long long useFactory =\n        limit > k ? minimumTotalDistance(robot, factory, i + 1, j, k + 1) +\n                        abs(robot[i] - position)\n                  : LLONG_MAX / 2;\n    return dp[i][j][k] = min(skipFactory, useFactory);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public long minimumTotalDistance(List<Integer> robot, int[][] factory) {\n    Collections.sort(robot);\n    Arrays.sort(factory, (a, b) -> (a[0] - b[0]));\n\n    // dp[i][j][k] := min distance to fix robot[i:] with factory[j:] where\n    // factory[j] already fixed k robots\n    dp = new long[robot.size()][factory.length][robot.size()];\n    return minimumTotalDistance(robot, factory, 0, 0, 0);\n  }\n\n  private long[][][] dp;\n\n  private long minimumTotalDistance(List<Integer> robot, int[][] factory, int i, int j, int k) {\n    if (i == robot.size())\n      return 0;\n    if (j == factory.length)\n      return Long.MAX_VALUE;\n    if (dp[i][j][k] > 0)\n      return dp[i][j][k];\n    final long skipFactory = minimumTotalDistance(robot, factory, i, j + 1, 0);\n    final int position = factory[j][0];\n    final int limit = factory[j][1];\n    final long useFactory = limit > k ? minimumTotalDistance(robot, factory, i + 1, j, k + 1) +\n                                            Math.abs(robot.get(i) - position)\n                                      : Long.MAX_VALUE / 2;\n    return dp[i][j][k] = Math.min(skipFactory, useFactory);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumTotalDistance(self, robot: List[int], factory: List[List[int]]) -> int:\n    robot.sort()\n    factory.sort()\n\n    # dp(i, j, k) := min distance to fix robot[i:] with factory[j:] where\n    # factory[j] already fixed k robots\n    @functools.lru_cache(None)\n    def dp(i: int, j: int, k: int) -> int:\n      if i == len(robot):\n        return 0\n      if j == len(factory):\n        return math.inf\n      skipFactory = dp(i, j + 1, 0)\n      position, limit = factory[j]\n      useFactory = dp(i + 1, j, k + 1) + abs(robot[i] - position) \\\n          if limit > k else math.inf\n      return min(skipFactory, useFactory)\n\n    return dp(0, 0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}