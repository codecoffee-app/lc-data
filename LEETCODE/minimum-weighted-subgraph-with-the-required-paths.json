{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2203",
            "title": "Minimum Weighted Subgraph With the Required Paths",
            "titleSlug": "minimum-weighted-subgraph-with-the-required-paths",
            "content": "<p>You are given an integer <code>n</code> denoting the number of nodes of a <strong>weighted directed</strong> graph. The nodes are numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are also given a 2D integer array <code>edges</code> where <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]</code> denotes that there exists a <strong>directed</strong> edge from <code>from<sub>i</sub></code> to <code>to<sub>i</sub></code> with weight <code>weight<sub>i</sub></code>.</p>\n\n<p>Lastly, you are given three <strong>distinct</strong> integers <code>src1</code>, <code>src2</code>, and <code>dest</code> denoting three distinct nodes of the graph.</p>\n\n<p>Return <em>the <strong>minimum weight</strong> of a subgraph of the graph such that it is <strong>possible</strong> to reach</em> <code>dest</code> <em>from both</em> <code>src1</code> <em>and</em> <code>src2</code> <em>via a set of edges of this subgraph</em>. In case such a subgraph does not exist, return <code>-1</code>.</p>\n\n<p>A <strong>subgraph</strong> is a graph whose vertices and edges are subsets of the original graph. The <strong>weight</strong> of a subgraph is the sum of weights of its constituent edges.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/02/17/example1drawio.png\" style=\"width: 263px; height: 250px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5\n<strong>Output:</strong> 9\n<strong>Explanation:</strong>\nThe above figure represents the input graph.\nThe blue edges represent one of the subgraphs that yield the optimal answer.\nNote that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer. It is not possible to get a subgraph with less weight satisfying all the constraints.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/02/17/example2-1drawio.png\" style=\"width: 350px; height: 51px;\" />\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nThe above figure represents the input graph.\nIt can be seen that there does not exist any path from node 1 to node 2, hence there are no subgraphs satisfying all the constraints.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub>, src1, src2, dest &lt;= n - 1</code></li>\n\t<li><code>from<sub>i</sub> != to<sub>i</sub></code></li>\n\t<li><code>src1</code>, <code>src2</code>, and <code>dest</code> are pairwise distinct.</li>\n\t<li><code>1 &lt;= weight[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 644,
            "dislikes": 18,
            "similarQuestions": "[{\"title\": \"Minimum Cost to Make at Least One Valid Path in a Grid\", \"titleSlug\": \"minimum-cost-to-make-at-least-one-valid-path-in-a-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Escape the Spreading Fire\", \"titleSlug\": \"escape-the-spreading-fire\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Disconnect Path in a Binary Matrix by at Most One Flip\", \"titleSlug\": \"disconnect-path-in-a-binary-matrix-by-at-most-one-flip\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.9K\", \"totalSubmission\": \"29.8K\", \"totalAcceptedRaw\": 10858, \"totalSubmissionRaw\": 29760, \"acRate\": \"36.5%\"}",
            "hints": [
                "Consider what the paths from src1 to dest and src2 to dest would look like in the optimal solution.",
                "It can be shown that in an optimal solution, the two paths from src1 and src2 will coincide at one node, and the remaining part to dest will be the same for both paths. Now consider how to find the node where the paths will coincide.",
                "How can algorithms for finding the shortest path between two nodes help us?"
            ],
            "rephrased": {
                "body": "Given a weighted directed graph with 'n' nodes (numbered 0 to n-1) and a list of directed edges, find the minimum weight of a subgraph such that it is possible to reach a destination node 'dest' from both source nodes 'src1' and 'src2' via edges in this subgraph.  If no such subgraph exists, return -1.",
                "constraints": [
                    "3 <= n <= 10^5",
                    "0 <= edges.length <= 10^5",
                    "edges[i].length == 3",
                    "0 <= from_i, to_i, src1, src2, dest <= n - 1",
                    "from_i != to_i",
                    "src1, src2, and dest are pairwise distinct.",
                    "1 <= weight[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5",
                        "output": "9",
                        "explanation": "One optimal subgraph consists of edges that allow reaching node 5 from both node 0 and node 1 with a combined minimum weight of 9."
                    },
                    {
                        "input": "n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2",
                        "output": "-1",
                        "explanation": "There is no path from node 1 to node 2, therefore, it's impossible to find a subgraph that satisfies the constraint. Hence the output is -1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
                "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "escape-the-spreading-fire",
                "title": "Escape the Spreading Fire",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
                "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Consider what the paths from src1 to dest and src2 to dest would look like in the optimal solution.",
            "It can be shown that in an optimal solution, the two paths from src1 and src2 will coincide at one node, and the remaining part to dest will be the same for both paths. Now consider how to find the node where the paths will coincide.",
            "How can algorithms for finding the shortest path between two nodes help us?"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumWeight(int n, vector<vector<int>>& edges, int src1, int src2,\n                          int dest) {\n    vector<vector<pair<int, int>>> graph1(n);\n    vector<vector<pair<int, int>>> graph2(n);  // Reversed(graph1)\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int w = edge[2];\n      graph1[u].emplace_back(v, w);\n      graph2[v].emplace_back(u, w);\n    }\n\n    const vector<long> fromSrc1 = dijkstra(graph1, src1);\n    const vector<long> fromSrc2 = dijkstra(graph1, src2);\n    const vector<long> fromDest = dijkstra(graph2, dest);\n    long ans = kMax;\n\n    for (int i = 0; i < n; ++i) {\n      if (fromSrc1[i] == kMax || fromSrc2[i] == kMax || fromDest[i] == kMax)\n        continue;\n      ans = min(ans, fromSrc1[i] + fromSrc2[i] + fromDest[i]);\n    }\n\n    return ans == kMax ? -1 : ans;\n  }\n\n private:\n  static constexpr long kMax = 1e10;\n\n  vector<long> dijkstra(const vector<vector<pair<int, int>>>& graph, int src) {\n    vector<long> dist(graph.size(), kMax);\n    using P = pair<long, int>;\n    priority_queue<P, vector<P>, greater<>> minHeap;  // (d, u)\n\n    minHeap.emplace(0, src);\n\n    while (!minHeap.empty()) {\n      const auto [d, u] = minHeap.top();\n      minHeap.pop();\n      if (dist[u] != kMax)\n        continue;\n      dist[u] = d;\n      for (const auto& [v, w] : graph[u])\n        minHeap.emplace(d + w, v);\n    }\n\n    return dist;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minimumWeight(int n, int[][] edges, int src1, int src2, int dest) {\n    List<Pair<Integer, Integer>>[] graph1 = new List[n];\n    List<Pair<Integer, Integer>>[] graph2 = new List[n]; // Reversed(graph1)\n\n    for (int i = 0; i < n; ++i) {\n      graph1[i] = new ArrayList<>();\n      graph2[i] = new ArrayList<>();\n    }\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int w = edge[2];\n      graph1[u].add(new Pair<>(v, w));\n      graph2[v].add(new Pair<>(u, w));\n    }\n\n    long[] fromSrc1 = dijkstra(graph1, src1);\n    long[] fromSrc2 = dijkstra(graph1, src2);\n    long[] fromDest = dijkstra(graph2, dest);\n    long ans = kMax;\n\n    for (int i = 0; i < n; ++i) {\n      if (fromSrc1[i] == kMax || fromSrc2[i] == kMax || fromDest[i] == kMax)\n        continue;\n      ans = Math.min(ans, fromSrc1[i] + fromSrc2[i] + fromDest[i]);\n    }\n\n    return ans == kMax ? -1 : ans;\n  }\n\n  private static long kMax = (long) 1e10;\n\n  private long[] dijkstra(List<Pair<Integer, Integer>>[] graph, int src) {\n    long[] dist = new long[graph.length];\n    Arrays.fill(dist, kMax);\n    Queue<Pair<Long, Integer>> minHeap =\n        new PriorityQueue<>(Comparator.comparing(Pair::getKey)); // (d, u)\n\n    minHeap.offer(new Pair<>(0L, src));\n\n    while (!minHeap.isEmpty()) {\n      final long d = minHeap.peek().getKey();\n      final int u = minHeap.poll().getValue();\n      if (dist[u] != kMax)\n        continue;\n      dist[u] = d;\n      for (Pair<Integer, Integer> pair : graph[u]) {\n        final int v = pair.getKey();\n        final int w = pair.getValue();\n        minHeap.offer(new Pair<>(d + w, v));\n      }\n    }\n\n    return dist;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumWeight(self, n: int, edges: List[List[int]], src1: int, src2: int, dest: int) -> int:\n    graph1 = [[] for _ in range(n)]\n    graph2 = [[] for _ in range(n)]  # Reversed(graph1)\n\n    for u, v, w in edges:\n      graph1[u].append((v, w))\n      graph2[v].append((u, w))\n\n    def dijkstra(graph: List[List[Tuple[int, int]]], src: int) -> List[int]:\n      dist = [math.inf] * n\n      minHeap = [(0, src)]  # (d, u)\n      while minHeap:\n        d, u = heapq.heappop(minHeap)\n        if dist[u] != math.inf:\n          continue\n        dist[u] = d\n        for v, w in graph[u]:\n          heapq.heappush(minHeap, (d + w, v))\n      return dist\n\n    fromSrc1 = dijkstra(graph1, src1)\n    fromSrc2 = dijkstra(graph1, src2)\n    fromDest = dijkstra(graph2, dest)\n    minWeight = min(a + b + c for a, b, c in zip(fromSrc1, fromSrc2, fromDest))\n    return -1 if minWeight == math.inf else minWeight\n",
                "lang_text": "py"
            }
        }
    }
}