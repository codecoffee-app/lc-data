{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2209",
            "title": "Minimum White Tiles After Covering With Carpets",
            "titleSlug": "minimum-white-tiles-after-covering-with-carpets",
            "content": "<p>You are given a <strong>0-indexed binary</strong> string <code>floor</code>, which represents the colors of tiles on a floor:</p>\n\n<ul>\n\t<li><code>floor[i] = &#39;0&#39;</code> denotes that the <code>i<sup>th</sup></code> tile of the floor is colored <strong>black</strong>.</li>\n\t<li>On the other hand, <code>floor[i] = &#39;1&#39;</code> denotes that the <code>i<sup>th</sup></code> tile of the floor is colored <strong>white</strong>.</li>\n</ul>\n\n<p>You are also given <code>numCarpets</code> and <code>carpetLen</code>. You have <code>numCarpets</code> <strong>black</strong> carpets, each of length <code>carpetLen</code> tiles. Cover the tiles with the given carpets such that the number of <strong>white</strong> tiles still visible is <strong>minimum</strong>. Carpets may overlap one another.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of white tiles still visible.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/02/10/ex1-1.png\" style=\"width: 400px; height: 73px;\" />\n<pre>\n<strong>Input:</strong> floor = &quot;10110101&quot;, numCarpets = 2, carpetLen = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThe figure above shows one way of covering the tiles with the carpets such that only 2 white tiles are visible.\nNo other way of covering the tiles with the carpets can leave less than 2 white tiles visible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/02/10/ex2.png\" style=\"width: 353px; height: 123px;\" />\n<pre>\n<strong>Input:</strong> floor = &quot;11111&quot;, numCarpets = 2, carpetLen = 3\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> \nThe figure above shows one way of covering the tiles with the carpets such that no white tiles are visible.\nNote that the carpets are able to overlap one another.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= carpetLen &lt;= floor.length &lt;= 1000</code></li>\n\t<li><code>floor[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li><code>1 &lt;= numCarpets &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 488,
            "dislikes": 16,
            "similarQuestions": "[{\"title\": \"Edit Distance\", \"titleSlug\": \"edit-distance\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.1K\", \"totalSubmission\": \"31.3K\", \"totalAcceptedRaw\": 11057, \"totalSubmissionRaw\": 31266, \"acRate\": \"35.4%\"}",
            "hints": [
                "Can you think of a DP solution?",
                "Let DP[i][j] denote the minimum number of white tiles still visible from indices i to floor.length-1 after covering with at most j carpets.",
                "The transition will be whether to put down the carpet at position i (if possible), or not."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed binary string `floor`, representing the colors of tiles on a floor:\n\n- `floor[i] = '0'` denotes that the `i`-th tile is colored black.\n- `floor[i] = '1'` denotes that the `i`-th tile is colored white.\n\nYou are also given `numCarpets` and `carpetLen`. You have `numCarpets` black carpets, each of length `carpetLen` tiles. Cover the tiles with the given carpets to minimize the number of visible white tiles. Carpets can overlap.",
                "constraints": [
                    "1 <= carpetLen <= floor.length <= 1000",
                    "`floor[i]` is either `'0'` or `'1'`.",
                    "1 <= numCarpets <= 1000"
                ],
                "testcases": [
                    {
                        "input": "floor = \"10110101\", numCarpets = 2, carpetLen = 2",
                        "output": "2",
                        "explanation": "One optimal way to cover the tiles leaves only 2 white tiles visible.  Other carpet placements will not result in fewer visible white tiles."
                    },
                    {
                        "input": "floor = \"11111\", numCarpets = 2, carpetLen = 3",
                        "output": "0",
                        "explanation": "It's possible to cover all white tiles with the given carpets in this scenario. Overlap is allowed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "edit-distance",
                "title": "Edit Distance",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can you think of a DP solution?",
            "Let DP[i][j] denote the minimum number of white tiles still visible from indices i to floor.length-1 after covering with at most j carpets.",
            "The transition will be whether to put down the carpet at position i (if possible), or not."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ]
    }
}