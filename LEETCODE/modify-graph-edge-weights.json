{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2699",
            "title": "Modify Graph Edge Weights",
            "titleSlug": "modify-graph-edge-weights",
            "content": "<p>You are given an <strong>undirected weighted</strong> <strong>connected</strong> graph containing <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, and an integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, w<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> with weight <code>w<sub>i</sub></code>.</p>\n\n<p>Some edges have a weight of <code>-1</code> (<code>w<sub>i</sub> = -1</code>), while others have a <strong>positive</strong> weight (<code>w<sub>i</sub> &gt; 0</code>).</p>\n\n<p>Your task is to modify <strong>all edges</strong> with a weight of <code>-1</code> by assigning them <strong>positive integer values </strong>in the range <code>[1, 2 * 10<sup>9</sup>]</code> so that the <strong>shortest distance</strong> between the nodes <code>source</code> and <code>destination</code> becomes equal to an integer <code>target</code>. If there are <strong>multiple</strong> <strong>modifications</strong> that make the shortest distance between <code>source</code> and <code>destination</code> equal to <code>target</code>, any of them will be considered correct.</p>\n\n<p>Return <em>an array containing all edges (even unmodified ones) in any order if it is possible to make the shortest distance from </em><code>source</code><em> to </em><code>destination</code><em> equal to </em><code>target</code><em>, or an <strong>empty array</strong> if it&#39;s impossible.</em></p>\n\n<p><strong>Note:</strong> You are not allowed to modify the weights of edges with initial positive weights.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/18/graph.png\" style=\"width: 300px; height: 300px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, edges = [[4,1,-1],[2,0,-1],[0,3,-1],[4,3,-1]], source = 0, destination = 1, target = 5\n<strong>Output:</strong> [[4,1,1],[2,0,1],[0,3,3],[4,3,1]]\n<strong>Explanation:</strong> The graph above shows a possible modification to the edges, making the distance from 0 to 1 equal to 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/18/graph-2.png\" style=\"width: 300px; height: 300px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1,-1],[0,2,5]], source = 0, destination = 2, target = 6\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The graph above contains the initial edges. It is not possible to make the distance from 0 to 2 equal to 6 by modifying the edge with weight -1. So, an empty array is returned.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong class=\"example\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/19/graph-3.png\" style=\"width: 300px; height: 300px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, edges = [[1,0,4],[1,2,3],[2,3,5],[0,3,-1]], source = 0, destination = 2, target = 6\n<strong>Output:</strong> [[1,0,4],[1,2,3],[2,3,5],[0,3,1]]\n<strong>Explanation:</strong> The graph above shows a modified graph having the shortest distance from 0 to 2 as 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code><font face=\"monospace\">1 &lt;= edges.length &lt;= n * (n - 1) / 2</font></code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i&nbsp;</sub>&lt;&nbsp;n</code></li>\n\t<li><code><font face=\"monospace\">w<sub>i</sub>&nbsp;= -1&nbsp;</font></code>or <code><font face=\"monospace\">1 &lt;= w<sub>i&nbsp;</sub>&lt;= 10<sup><span style=\"font-size: 10.8333px;\">7</span></sup></font></code></li>\n\t<li><code>a<sub>i&nbsp;</sub>!=&nbsp;b<sub>i</sub></code></li>\n\t<li><code>0 &lt;= source, destination &lt; n</code></li>\n\t<li><code>source != destination</code></li>\n\t<li><code><font face=\"monospace\">1 &lt;= target &lt;= 10<sup>9</sup></font></code></li>\n\t<li>The graph is connected, and there are no self-loops or repeated edges</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 256,
            "dislikes": 43,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"4.1K\", \"totalSubmission\": \"17.9K\", \"totalAcceptedRaw\": 4104, \"totalSubmissionRaw\": 17899, \"acRate\": \"22.9%\"}",
            "hints": [
                "Firstly, check that it\u2019s actually possible to make the shortest path from source to destination equal to the target.",
                "If the shortest path from source to destination without the edges to be modified, is less than the target, then it is not possible.",
                "If the shortest path from source to destination including the edges to be modified and assigning them a temporary weight of 1, is greater than the target, then it is also not possible.",
                "Suppose we can find a modifiable edge (u, v) such that the length of the shortest path from source to u (dis1) plus the length of the shortest path from v to destination (dis2) is less than target (dis1 + dis2 < target), then we can change its weight to \u201ctarget - dis1 - dis2\u201d.",
                "For all the other edges that still have the weight \u201c-1\u201d, change the weights into sufficient large number (target, target + 1 or 200000000 etc.)."
            ],
            "rephrased": {
                "body": "Given an undirected, weighted, and connected graph with 'n' nodes (labeled 0 to n-1), and an array 'edges' where each edge is represented as [a_i, b_i, w_i] indicating an edge between nodes a_i and b_i with weight w_i. Some edges have a weight of -1, while others have positive weights.  Modify all edges with weight -1 by assigning them positive integer values between 1 and 2 * 10^9 such that the shortest distance between a source node and a destination node equals a given target value.  If multiple such modifications are possible, any valid modification is acceptable. Return an array containing all edges (including unmodified ones) if a valid modification exists, or an empty array if it's impossible to achieve the target shortest distance.",
                "constraints": [
                    "1 <= n <= 100",
                    "1 <= edges.length <= n * (n - 1) / 2",
                    "edges[i].length == 3",
                    "0 <= a_i, b_i < n",
                    "w_i = -1 or 1 <= w_i <= 10^7",
                    "a_i != b_i",
                    "0 <= source, destination < n",
                    "source != destination",
                    "1 <= target <= 10^9",
                    "The graph is connected, and there are no self-loops or repeated edges"
                ],
                "testcases": [
                    {
                        "input": "n = 5, edges = [[4,1,-1],[2,0,-1],[0,3,-1],[4,3,-1]], source = 0, destination = 1, target = 5",
                        "output": "[[4,1,1],[2,0,1],[0,3,3],[4,3,1]]",
                        "explanation": "The graph can be modified such that the shortest distance from node 0 to node 1 becomes 5."
                    },
                    {
                        "input": "n = 3, edges = [[0,1,-1],[0,2,5]], source = 0, destination = 2, target = 6",
                        "output": "[]",
                        "explanation": "It is not possible to modify the edge with weight -1 to achieve a shortest distance of 6 from node 0 to node 2."
                    },
                    {
                        "input": "n = 4, edges = [[1,0,4],[1,2,3],[2,3,5],[0,3,-1]], source = 0, destination = 2, target = 6",
                        "output": "[[1,0,4],[1,2,3],[2,3,5],[0,3,1]]",
                        "explanation": "The graph can be modified such that the shortest distance from node 0 to node 2 becomes 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Firstly, check that it\u2019s actually possible to make the shortest path from source to destination equal to the target.",
            "If the shortest path from source to destination without the edges to be modified, is less than the target, then it is not possible.",
            "If the shortest path from source to destination including the edges to be modified and assigning them a temporary weight of 1, is greater than the target, then it is also not possible.",
            "Suppose we can find a modifiable edge (u, v) such that the length of the shortest path from source to u (dis1) plus the length of the shortest path from v to destination (dis2) is less than target (dis1 + dis2 < target), then we can change its weight to \u201ctarget - dis1 - dis2\u201d.",
            "For all the other edges that still have the weight \u201c-1\u201d, change the weights into sufficient large number (target, target + 1 or 200000000 etc.)."
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> modifiedGraphEdges(int n, vector<vector<int>>& edges,\n                                         int source, int destination,\n                                         int target) {\n    constexpr int kMax = 2'000'000'000;\n    vector<vector<pair<int, int>>> graph(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int w = edge[2];\n      if (w == -1)\n        continue;\n      graph[u].emplace_back(v, w);\n      graph[v].emplace_back(u, w);\n    }\n\n    int distToDestination = dijkstra(graph, source, destination);\n    if (distToDestination < target)\n      return {};\n    if (distToDestination == target) {\n      // Change the weights of negative edges to an impossible value.\n      for (vector<int>& edge : edges)\n        if (edge[2] == -1)\n          edge[2] = kMax;\n      return edges;\n    }\n\n    for (int i = 0; i < edges.size(); ++i) {\n      const int u = edges[i][0];\n      const int v = edges[i][1];\n      int& w = edges[i][2];\n      if (w != -1)\n        continue;\n      w = 1;\n      graph[u].emplace_back(v, 1);\n      graph[v].emplace_back(u, 1);\n      distToDestination = dijkstra(graph, source, destination);\n      if (distToDestination <= target) {\n        w += target - distToDestination;\n        // Change the weights of negative edges to an impossible value.\n        for (int j = i + 1; j < edges.size(); ++j)\n          if (edges[j][2] == -1)\n            edges[j][2] = kMax;\n        return edges;\n      }\n    }\n\n    return {};\n  }\n\n private:\n  int dijkstra(const vector<vector<pair<int, int>>>& graph, int src, int dst) {\n    vector<int> dist(graph.size(), INT_MAX);\n    using P = pair<int, int>;  // (d, u)\n    priority_queue<P, vector<P>, greater<>> minHeap;\n\n    dist[src] = 0;\n    minHeap.emplace(dist[src], src);\n\n    while (!minHeap.empty()) {\n      const auto [d, u] = minHeap.top();\n      minHeap.pop();\n      for (const auto& [v, w] : graph[u])\n        if (d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.emplace(dist[v], v);\n        }\n    }\n\n    return dist[dst];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] modifiedGraphEdges(int n, int[][] edges, int source, int destination, int target) {\n    final int kMax = 2_000_000_000;\n    List<Pair<Integer, Integer>>[] graph = new List[n];\n\n    for (int i = 0; i < n; i++)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int w = edge[2];\n      if (w == -1)\n        continue;\n      graph[u].add(new Pair<>(v, w));\n      graph[v].add(new Pair<>(u, w));\n    }\n\n    int distToDestination = dijkstra(graph, source, destination);\n    if (distToDestination < target)\n      return new int[0][];\n    if (distToDestination == target) {\n      // Change the weights of negative edges to an impossible value.\n      for (int[] edge : edges)\n        if (edge[2] == -1)\n          edge[2] = kMax;\n      return edges;\n    }\n\n    for (int i = 0; i < edges.length; ++i) {\n      final int u = edges[i][0];\n      final int v = edges[i][1];\n      final int w = edges[i][2];\n      if (w != -1)\n        continue;\n      edges[i][2] = 1;\n      graph[u].add(new Pair<>(v, 1));\n      graph[v].add(new Pair<>(u, 1));\n      distToDestination = dijkstra(graph, source, destination);\n      if (distToDestination <= target) {\n        edges[i][2] += target - distToDestination;\n        // Change the weights of negative edges to an impossible value.\n        for (int j = i + 1; j < edges.length; ++j)\n          if (edges[j][2] == -1)\n            edges[j][2] = kMax;\n        return edges;\n      }\n    }\n\n    return new int[0][];\n  }\n\n  private int dijkstra(List<Pair<Integer, Integer>>[] graph, int src, int dst) {\n    int[] dist = new int[graph.length];\n    Arrays.fill(dist, Integer.MAX_VALUE);\n    // (d, u)\n    Queue<Pair<Integer, Integer>> minHeap = new PriorityQueue<>((a, b) -> a.getKey() - b.getKey());\n\n    dist[src] = 0;\n    minHeap.offer(new Pair<>(dist[src], src));\n\n    while (!minHeap.isEmpty()) {\n      final int d = minHeap.peek().getKey();\n      final int u = minHeap.poll().getValue();\n      for (Pair<Integer, Integer> pair : graph[u]) {\n        final int v = pair.getKey();\n        final int w = pair.getValue();\n        if (d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.offer(new Pair<>(dist[v], v));\n        }\n      }\n    }\n\n    return dist[dst];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "\nclass Solution:\n  def modifiedGraphEdges(self, n: int, edges: List[List[int]], source: int, destination: int, target: int) -> List[List[int]]:\n    kMax = 2_000_000_000\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      if w == -1:\n        continue\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    distToDestination = self._dijkstra(graph, source, destination)\n    if distToDestination < target:\n      return []\n    if distToDestination == target:\n      # Change the weights of negative edges to an impossible value.\n      for edge in edges:\n        if edge[2] == -1:\n          edge[2] = kMax\n      return edges\n\n    for i, (u, v, w) in enumerate(edges):\n      if w != -1:\n        continue\n      edges[i][2] = 1\n      graph[u].append((v, 1))\n      graph[v].append((u, 1))\n      distToDestination = self._dijkstra(graph, source, destination)\n      if distToDestination <= target:\n        edges[i][2] += target - distToDestination\n        # Change the weights of negative edges to an impossible value.\n        for j in range(i + 1, len(edges)):\n          if edges[j][2] == -1:\n            edges[j][2] = kMax\n        return edges\n\n    return []\n\n  def _dijkstra(self, graph: List[List[int]], src: int, dst: int) -> int:\n    dist = [math.inf] * len(graph)\n    minHeap = []  # (d, u)\n\n    dist[src] = 0\n    heapq.heappush(minHeap, (dist[src], src))\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      for v, w in graph[u]:\n        if d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n\n    return dist[dst]\n",
                "lang_text": "py"
            }
        }
    }
}