{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2070",
            "title": "Most Beautiful Item for Each Query",
            "titleSlug": "most-beautiful-item-for-each-query",
            "content": "<p>You are given a 2D integer array <code>items</code> where <code>items[i] = [price<sub>i</sub>, beauty<sub>i</sub>]</code> denotes the <strong>price</strong> and <strong>beauty</strong> of an item respectively.</p>\n\n<p>You are also given a <strong>0-indexed</strong> integer array <code>queries</code>. For each <code>queries[j]</code>, you want to determine the <strong>maximum beauty</strong> of an item whose <strong>price</strong> is <strong>less than or equal</strong> to <code>queries[j]</code>. If no such item exists, then the answer to this query is <code>0</code>.</p>\n\n<p>Return <em>an array </em><code>answer</code><em> of the same length as </em><code>queries</code><em> where </em><code>answer[j]</code><em> is the answer to the </em><code>j<sup>th</sup></code><em> query</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]\n<strong>Output:</strong> [2,4,5,5,6,6]\n<strong>Explanation:</strong>\n- For queries[0]=1, [1,2] is the only item which has price &lt;= 1. Hence, the answer for this query is 2.\n- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. \n  The maximum beauty among them is 4.\n- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].\n  The maximum beauty among them is 5.\n- For queries[4]=5 and queries[5]=6, all items can be considered.\n  Hence, the answer for them is the maximum beauty of all items, i.e., 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]\n<strong>Output:</strong> [4]\n<strong>Explanation:</strong> \nThe price of every item is equal to 1, so we choose the item with the maximum beauty 4. \nNote that multiple items can have the same price and/or beauty.  \n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> items = [[10,1000]], queries = [5]\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong>\nNo item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= items.length, queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>items[i].length == 2</code></li>\n\t<li><code>1 &lt;= price<sub>i</sub>, beauty<sub>i</sub>, queries[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 564,
            "dislikes": 14,
            "similarQuestions": "[{\"title\": \"Closest Room\", \"titleSlug\": \"closest-room\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find the Score of All Prefixes of an Array\", \"titleSlug\": \"find-the-score-of-all-prefixes-of-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Sum Queries\", \"titleSlug\": \"maximum-sum-queries\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.1K\", \"totalSubmission\": \"30.5K\", \"totalAcceptedRaw\": 15089, \"totalSubmissionRaw\": 30487, \"acRate\": \"49.5%\"}",
            "hints": [
                "Can we process the queries in a smart order to avoid repeatedly checking the same items?",
                "How can we use the answer to a query for other queries?"
            ],
            "rephrased": {
                "body": "You are given a 2D integer array `items` where `items[i] = [price_i, beauty_i]` represents the price and beauty of an item, respectively. Given a 0-indexed integer array `queries`, for each `queries[j]`, determine the maximum beauty of an item whose price is less than or equal to `queries[j]`. If no such item exists, the answer to this query is 0. Return an array `answer` of the same length as `queries` where `answer[j]` is the answer to the `jth` query.",
                "constraints": [
                    "1 <= items.length, queries.length <= 10^5",
                    "items[i].length == 2",
                    "1 <= price_i, beauty_i, queries[j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]",
                        "output": "[2,4,5,5,6,6]",
                        "explanation": "For queries[0]=1, only [1,2] is considered, resulting in a beauty of 2. For queries[1]=2, [1,2] and [2,4] are considered, with a maximum beauty of 4. For queries[2]=3 and queries[3]=4, [1,2], [3,2], [2,4], and [3,5] are considered, with a maximum beauty of 5. For queries[4]=5 and queries[5]=6, all items are considered, with a maximum beauty of 6."
                    },
                    {
                        "input": "items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]",
                        "output": "[4]",
                        "explanation": "Since all items have a price of 1, the item with the maximum beauty, 4, is chosen."
                    },
                    {
                        "input": "items = [[10,1000]], queries = [5]",
                        "output": "[0]",
                        "explanation": "No item has a price less than or equal to 5, so the answer is 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "closest-room",
                "title": "Closest Room",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-the-score-of-all-prefixes-of-an-array",
                "title": "Find the Score of All Prefixes of an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-sum-queries",
                "title": "Maximum Sum Queries",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we process the queries in a smart order to avoid repeatedly checking the same items?",
            "How can we use the answer to a query for other queries?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\n    vector<int> ans;\n    vector<int> prices;\n    vector<int> maxBeautySoFar(items.size() + 1);\n\n    std::ranges::sort(items);\n\n    for (const vector<int>& item : items)\n      prices.push_back(item[0]);\n\n    for (int i = 0; i < items.size(); ++i)\n      maxBeautySoFar[i + 1] = max(maxBeautySoFar[i], items[i][1]);\n\n    for (const int query : queries) {\n      const int i =\n          upper_bound(prices.begin(), prices.end(), query) - prices.begin();\n      ans.push_back(maxBeautySoFar[i]);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] maximumBeauty(int[][] items, int[] queries) {\n    int[] ans = new int[queries.length];\n    int[] prices = new int[items.length];\n    int[] maxBeautySoFar = new int[items.length + 1];\n\n    Arrays.sort(items, (a, b) -> a[0] - b[0]);\n\n    for (int i = 0; i < items.length; ++i)\n      maxBeautySoFar[i + 1] = Math.max(maxBeautySoFar[i], items[i][1]);\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int index = firstGreater(items, queries[i]);\n      ans[i] = maxBeautySoFar[index];\n    }\n\n    return ans;\n  }\n\n  private int firstGreater(int[][] items, int q) {\n    int l = 0;\n    int r = items.length;\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (items[m][0] > q)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:\n    prices, beauties = zip(*sorted(items))\n    maxBeautySoFar = [0] * (len(beauties) + 1)\n\n    for i, beauty in enumerate(beauties):\n      maxBeautySoFar[i + 1] = max(maxBeautySoFar[i], beauty)\n\n    return [maxBeautySoFar[bisect_right(prices, query)] for query in queries]\n",
                "lang_text": "py"
            }
        }
    }
}