{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3092",
            "title": "Most Frequent IDs",
            "titleSlug": "most-frequent-ids",
            "content": "<p>The problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, <code>nums</code> and <code>freq</code>, of equal length <code>n</code>. Each element in <code>nums</code> represents an ID, and the corresponding element in <code>freq</code> indicates how many times that ID should be added to or removed from the collection at each step.</p>\n\n<ul>\n\t<li><strong>Addition of IDs:</strong> If <code>freq[i]</code> is positive, it means <code>freq[i]</code> IDs with the value <code>nums[i]</code> are added to the collection at step <code>i</code>.</li>\n\t<li><strong>Removal of IDs:</strong> If <code>freq[i]</code> is negative, it means <code>-freq[i]</code> IDs with the value <code>nums[i]</code> are removed from the collection at step <code>i</code>.</li>\n</ul>\n\n<p>Return an array <code>ans</code> of length <code>n</code>, where <code>ans[i]</code> represents the <strong>count</strong> of the <em>most frequent ID</em> in the collection after the <code>i<sup>th</sup></code>&nbsp;step. If the collection is empty at any step, <code>ans[i]</code> should be 0 for that step.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,2,1], freq = [3,2,-3,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,3,2,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After step 0, we have 3 IDs with the value of 2. So <code>ans[0] = 3</code>.<br />\nAfter step 1, we have 3 IDs with the value of 2 and 2 IDs with the value of 3. So <code>ans[1] = 3</code>.<br />\nAfter step 2, we have 2 IDs with the value of 3. So <code>ans[2] = 2</code>.<br />\nAfter step 3, we have 2 IDs with the value of 3 and 1 ID with the value of 1. So <code>ans[3] = 2</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [5,5,3], freq = [2,-2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[2,0,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After step 0, we have 2 IDs with the value of 5. So <code>ans[0] = 2</code>.<br />\nAfter step 1, there are no IDs. So <code>ans[1] = 0</code>.<br />\nAfter step 2, we have 1 ID with the value of 3. So <code>ans[2] = 1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length == freq.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= freq[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>freq[i] != 0</code></li>\n\t<li>The input is generated<!-- notionvc: a136b55a-f319-4fa6-9247-11be9f3b1db8 --> such that the occurrences of an ID will not be negative in any step.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 212,
            "dislikes": 28,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.4K\", \"totalSubmission\": \"43.1K\", \"totalAcceptedRaw\": 18390, \"totalSubmissionRaw\": 43091, \"acRate\": \"42.7%\"}",
            "hints": [
                "Use an ordered set for maintaining the occurrences of each ID.",
                "After step <code>i</code> find the occurrences of <code>nums[i]</code>.",
                "Change the occurrences of <code>nums[i]</code> in the ordered set."
            ],
            "rephrased": {
                "body": "Given two integer arrays, `nums` and `freq`, of equal length `n`, track the frequency of IDs in a collection that changes over time. `nums[i]` represents an ID, and `freq[i]` indicates how many times that ID is added (if positive) or removed (if negative) from the collection at each step `i`.  Return an array `ans` of length `n`, where `ans[i]` is the count of the most frequent ID in the collection after step `i`. If the collection is empty at any step, `ans[i]` should be 0.",
                "constraints": [
                    "1 <= nums.length == freq.length <= 10^5",
                    "1 <= nums[i] <= 10^5",
                    "-10^5 <= freq[i] <= 10^5",
                    "freq[i] != 0",
                    "The input is generated such that the occurrences of an ID will not be negative in any step."
                ],
                "testcases": [
                    {
                        "input": "nums = [2,3,2,1], freq = [3,2,-3,1]",
                        "output": "[3,3,2,2]",
                        "explanation": "Initially, there are 3 IDs with the value 2. Then, 2 IDs with the value 3 are added, resulting in 3 occurrences of ID 2 and 2 occurrences of ID 3. Next, 3 IDs with the value 2 are removed, leaving 2 occurrences of ID 3. Finally, 1 ID with the value 1 is added, resulting in 2 occurrences of ID 3 and 1 occurrence of ID 1."
                    },
                    {
                        "input": "nums = [5,5,3], freq = [2,-2,1]",
                        "output": "[2,0,1]",
                        "explanation": "Initially, there are 2 IDs with the value 5. Then, 2 IDs with the value 5 are removed, resulting in an empty collection. Finally, 1 ID with the value 3 is added."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use an ordered set for maintaining the occurrences of each ID.",
            "After step <code>i</code> find the occurrences of <code>nums[i]</code>.",
            "Change the occurrences of <code>nums[i]</code> in the ordered set."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<long long> mostFrequentIDs(vector<int>& nums, vector<int>& freq) {\n    vector<long long> ans;\n    unordered_map<int, long long> numCount;  // {num: freq}\n    map<long long, int> freqCount;           // {num's freq: freq}\n\n    for (int i = 0; i < nums.size(); ++i) {\n      const int num = nums[i];\n      const int f = freq[i];\n      if (const auto it = numCount.find(num); it != numCount.cend()) {\n        const int numFreq = it->second;\n        if (--freqCount[numFreq] == 0)\n          freqCount.erase(numFreq);\n      }\n      const long long newFreq = numCount[num] + f;\n      if (newFreq == 0) {\n        numCount.erase(num);\n      } else {\n        numCount[num] = newFreq;\n        ++freqCount[newFreq];\n      }\n      ans.push_back(freqCount.empty() ? 0 : freqCount.rbegin()->first);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long[] mostFrequentIDs(int[] nums, int[] freq) {\n    long[] ans = new long[nums.length];\n    Map<Integer, Long> numCount = new HashMap<>();      // {num: freq}\n    TreeMap<Long, Integer> freqCount = new TreeMap<>(); // {num's freq: freq}\n\n    for (int i = 0; i < nums.length; ++i) {\n      final int num = nums[i];\n      final int f = freq[i];\n      if (numCount.containsKey(num)) {\n        final long numFreq = numCount.get(num);\n        if (freqCount.merge(numFreq, -1, Integer::sum) == 0)\n          freqCount.remove(numFreq);\n      }\n      final long newFreq = numCount.getOrDefault(num, 0L) + f;\n      if (newFreq == 0) {\n        numCount.remove(num);\n      } else {\n        numCount.put(num, newFreq);\n        freqCount.merge(newFreq, 1, Integer::sum);\n      }\n      ans[i] = freqCount.isEmpty() ? 0 : freqCount.lastKey();\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from sortedcontainers import SortedDict\n\n\nclass Solution:\n  def mostFrequentIDs(self, nums: List[int], freq: List[int]) -> List[int]:\n    ans = []\n    numCount = collections.Counter()  # {num: freq}\n    freqCount = SortedDict()  # {num's freq: freq}\n\n    for num, f in zip(nums, freq):\n      if numCount[num] > 0:\n        numFreq = numCount[num]\n        freqCount[numFreq] -= 1\n        if freqCount[numFreq] == 0:\n          del freqCount[numFreq]\n      newFreq = numCount[num] + f\n      if newFreq == 0:\n        del numCount[num]\n      else:\n        numCount[num] = newFreq\n        freqCount[newFreq] = freqCount.get(newFreq, 0) + 1\n      ans.append(freqCount.peekitem(-1)[0] if freqCount else 0)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}