{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2190",
            "title": "Most Frequent Number Following Key In an Array",
            "titleSlug": "most-frequent-number-following-key-in-an-array",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>.<strong> </strong>You are also given an integer <code>key</code>, which is present in <code>nums</code>.</p>\n\n<p>For every unique integer <code>target</code> in <code>nums</code>, <strong>count</strong> the number of times <code>target</code> immediately follows an occurrence of <code>key</code> in <code>nums</code>. In other words, count the number of indices <code>i</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt;= nums.length - 2</code>,</li>\n\t<li><code>nums[i] == key</code> and,</li>\n\t<li><code>nums[i + 1] == target</code>.</li>\n</ul>\n\n<p>Return <em>the </em><code>target</code><em> with the <strong>maximum</strong> count</em>. The test cases will be generated such that the <code>target</code> with maximum count is unique.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,100,200,1,100], key = 1\n<strong>Output:</strong> 100\n<strong>Explanation:</strong> For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.\nNo other integers follow an occurrence of key, so we return 100.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,2,2,3], key = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.\nFor target = 3, there is only one occurrence at index 4 which follows an occurrence of key.\ntarget = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>The test cases will be generated such that the answer is unique.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 346,
            "dislikes": 209,
            "similarQuestions": "[{\"title\": \"Sort Array by Increasing Frequency\", \"titleSlug\": \"sort-array-by-increasing-frequency\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"32.1K\", \"totalSubmission\": \"54.4K\", \"totalAcceptedRaw\": 32111, \"totalSubmissionRaw\": 54361, \"acRate\": \"59.1%\"}",
            "hints": [
                "Count the number of times each target value follows the key in the array.",
                "Choose the target with the maximum count and return it."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` and an integer `key` (present in `nums`), find the `target` that appears most frequently immediately after `key` in `nums`. Return this `target`.",
                "constraints": [
                    "2 <= nums.length <= 1000",
                    "1 <= nums[i] <= 1000",
                    "The test cases will be generated such that the answer is unique."
                ],
                "testcases": [
                    {
                        "input": "nums = [1,100,200,1,100], key = 1",
                        "output": "100",
                        "explanation": "The target 100 appears twice immediately after the key 1 (at indices 1 and 4). No other integer follows an occurrence of 1. Therefore, 100 is the target with the maximum count."
                    },
                    {
                        "input": "nums = [2,2,2,2,3], key = 2",
                        "output": "2",
                        "explanation": "The target 2 appears three times immediately after the key 2 (at indices 1, 2, and 3). The target 3 appears once immediately after the key 2 (at index 4). Therefore, 2 is the target with the maximum count."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "sort-array-by-increasing-frequency",
                "title": "Sort Array by Increasing Frequency",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Count the number of times each target value follows the key in the array.",
            "Choose the target with the maximum count and return it."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int mostFrequent(vector<int>& nums, int key) {\n    vector<int> count(1001);\n\n    for (int i = 0; i + 1 < nums.size(); ++i)\n      if (nums[i] == key)\n        ++count[nums[i + 1]];\n\n    return max_element(count.begin(), count.end()) - count.begin();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int mostFrequent(int[] nums, int key) {\n    int[] count = new int[1001];\n    int ans = 0;\n\n    for (int i = 0; i + 1 < nums.length; ++i)\n      if (nums[i] == key)\n        ++count[nums[i + 1]];\n\n    for (int i = 1; i < 1001; ++i)\n      if (count[i] > count[ans])\n        ans = i;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def mostFrequent(self, nums: List[int], key: int) -> int:\n    count = collections.Counter()\n\n    for a, b in zip(nums, nums[1:]):\n      if a == key:\n        count[b] += 1\n\n    return max(count, key=lambda k: count[k])\n",
                "lang_text": "py"
            }
        }
    }
}