{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3044",
            "title": "Most Frequent Prime",
            "titleSlug": "most-frequent-prime",
            "content": "<p>You are given a <code>m x n</code> <strong>0-indexed </strong>2D<strong> </strong>matrix <code>mat</code>. From every cell, you can create numbers in the following way:</p>\n\n<ul>\n\t<li>There could be at most <code>8</code> paths from the cells namely: east, south-east, south, south-west, west, north-west, north, and north-east.</li>\n\t<li>Select a path from them and append digits in this path to the number being formed by traveling in this direction.</li>\n\t<li>Note that numbers are generated at every step, for example, if the digits along the path are <code>1, 9, 1</code>, then there will be three numbers generated along the way: <code>1, 19, 191</code>.</li>\n</ul>\n\n<p>Return <em>the most frequent <span data-keyword=\"prime-number\">prime number</span> <strong>greater</strong> than </em><code>10</code><em> out of all the numbers created by traversing the matrix or </em><code>-1</code><em> if no such prime number exists. If there are multiple prime numbers with the highest frequency, then return the <b>largest</b> among them.</em></p>\n\n<p><strong>Note:</strong> It is invalid to change the direction during the move.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/02/15/south\" style=\"width: 641px; height: 291px;\" /> </strong>\n\n<pre>\n<strong>\nInput:</strong> mat = [[1,1],[9,9],[1,1]]\n<strong>Output:</strong> 19\n<strong>Explanation:</strong> \nFrom cell (0,0) there are 3 possible directions and the numbers greater than 10 which can be created in those directions are:\nEast: [11], South-East: [19], South: [19,191].\nNumbers greater than 10 created from the cell (0,1) in all possible directions are: [19,191,19,11].\nNumbers greater than 10 created from the cell (1,0) in all possible directions are: [99,91,91,91,91].\nNumbers greater than 10 created from the cell (1,1) in all possible directions are: [91,91,99,91,91].\nNumbers greater than 10 created from the cell (2,0) in all possible directions are: [11,19,191,19].\nNumbers greater than 10 created from the cell (2,1) in all possible directions are: [11,19,19,191].\nThe most frequent prime number among all the created numbers is 19.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[7]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The only number which can be formed is 7. It is a prime number however it is not greater than 10, so return -1.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[9,7,8],[4,6,5],[2,8,6]]\n<strong>Output:</strong> 97\n<strong>Explanation:</strong> \nNumbers greater than 10 created from the cell (0,0) in all possible directions are: [97,978,96,966,94,942].\nNumbers greater than 10 created from the cell (0,1) in all possible directions are: [78,75,76,768,74,79].\nNumbers greater than 10 created from the cell (0,2) in all possible directions are: [85,856,86,862,87,879].\nNumbers greater than 10 created from the cell (1,0) in all possible directions are: [46,465,48,42,49,47].\nNumbers greater than 10 created from the cell (1,1) in all possible directions are: [65,66,68,62,64,69,67,68].\nNumbers greater than 10 created from the cell (1,2) in all possible directions are: [56,58,56,564,57,58].\nNumbers greater than 10 created from the cell (2,0) in all possible directions are: [28,286,24,249,26,268].\nNumbers greater than 10 created from the cell (2,1) in all possible directions are: [86,82,84,86,867,85].\nNumbers greater than 10 created from the cell (2,2) in all possible directions are: [68,682,66,669,65,658].\nThe most frequent prime number among all the created numbers is 97.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 6</code></li>\n\t<li><code>1 &lt;= mat[i][j] &lt;= 9</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 82,
            "dislikes": 62,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.8K\", \"totalSubmission\": \"30.7K\", \"totalAcceptedRaw\": 14765, \"totalSubmissionRaw\": 30721, \"acRate\": \"48.1%\"}",
            "hints": [
                "Use recursion to find all possible numbers for each cell and then check for prime."
            ],
            "rephrased": {
                "body": "Given a 0-indexed m x n 2D matrix `mat` where each cell contains a digit from 1 to 9, create numbers by traversing the matrix in eight possible directions (east, south-east, south, south-west, west, north-west, north, and north-east) from each cell. For each path, append digits to form numbers along the way. Return the most frequent prime number greater than 10 among all generated numbers. If no such prime number exists, return -1. If multiple prime numbers have the same highest frequency, return the largest one. Note that the direction cannot be changed during a single path.",
                "constraints": [
                    "m == mat.length",
                    "n == mat[i].length",
                    "1 <= m, n <= 6",
                    "1 <= mat[i][j] <= 9"
                ],
                "testcases": [
                    {
                        "input": "[[1,1],[9,9],[1,1]]",
                        "output": "19",
                        "explanation": "From cell (0,0), the numbers greater than 10 generated are: East: [11], South-East: [19], South: [19,191]. From cell (0,1): [19,191,19,11]. From cell (1,0): [99,91,91,91,91]. From cell (1,1): [91,91,99,91,91]. From cell (2,0): [11,19,191,19]. From cell (2,1): [11,19,19,191]. The most frequent prime number greater than 10 is 19."
                    },
                    {
                        "input": "[[7]]",
                        "output": "-1",
                        "explanation": "The only number that can be formed is 7. While it is prime, it's not greater than 10."
                    },
                    {
                        "input": "[[9,7,8],[4,6,5],[2,8,6]]",
                        "output": "97",
                        "explanation": "From cell (0,0), the numbers greater than 10 generated are: [97,978,96,966,94,942]. From cell (0,1): [78,75,76,768,74,79]. From cell (0,2): [85,856,86,862,87,879]. From cell (1,0): [46,465,48,42,49,47]. From cell (1,1): [65,66,68,62,64,69,67,68]. From cell (1,2): [56,58,56,564,57,58]. From cell (2,0): [28,286,24,249,26,268]. From cell (2,1): [86,82,84,86,867,85]. From cell (2,2): [68,682,66,669,65,658]. The most frequent prime number greater than 10 is 97."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use recursion to find all possible numbers for each cell and then check for prime."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Counting",
                "slug": "counting"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int mostFrequentPrime(vector<vector<int>>& mat) {\n    constexpr int dirs[8][2] = {{1, 0},  {1, -1}, {0, -1}, {-1, -1},\n                                {-1, 0}, {-1, 1}, {0, 1},  {1, 1}};\n    const int m = mat.size();\n    const int n = mat[0].size();\n    int ans = -1;\n    int maxFreq = 0;\n    unordered_map<int, int> count;\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        for (const auto& [dx, dy] : dirs) {\n          int num = 0;\n          for (int x = i, y = j; 0 <= x && x < m && 0 <= y && y < n;\n               x += dx, y += dy) {\n            num = num * 10 + mat[x][y];\n            if (num > 10 && isPrime(num))\n              ++count[num];\n          }\n        }\n\n    for (const auto& [prime, freq] : count)\n      if (freq > maxFreq) {\n        ans = prime;\n        maxFreq = freq;\n      } else if (freq == maxFreq) {\n        ans = max(ans, prime);\n      }\n\n    return ans;\n  }\n\n private:\n  bool isPrime(int num) {\n    for (int i = 2; i < sqrt(num) + 1; ++i)\n      if (num % i == 0)\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int mostFrequentPrime(int[][] mat) {\n    final int[][] dirs = {{1, 0}, {1, -1}, {0, -1}, {-1, -1}, {-1, 0}, {-1, 1}, {0, 1}, {1, 1}};\n    final int m = mat.length;\n    final int n = mat[0].length;\n    int ans = -1;\n    int maxFreq = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        for (int[] dir : dirs) {\n          int num = 0;\n          int x = i;\n          int y = j;\n          while (0 <= x && x < m && 0 <= y && y < n) {\n            num = num * 10 + mat[x][y];\n            if (num > 10 && isPrime(num))\n              count.merge(num, 1, Integer::sum);\n            x += dir[0];\n            y += dir[1];\n          }\n        }\n\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n      final int prime = entry.getKey();\n      final int freq = entry.getValue();\n      if (freq > maxFreq) {\n        ans = prime;\n        maxFreq = freq;\n      } else if (freq == maxFreq) {\n        ans = Math.max(ans, prime);\n      }\n    }\n\n    return ans;\n  }\n\n  private boolean isPrime(int num) {\n    for (int i = 2; i < (int) Math.sqrt(num) + 1; ++i)\n      if (num % i == 0)\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def mostFrequentPrime(self, mat: List[List[int]]) -> int:\n    dirs = ((1, 0), (1, -1), (0, -1), (-1, -1),\n            (-1, 0), (-1, 1), (0, 1), (1, 1))\n    m = len(mat)\n    n = len(mat[0])\n    count = collections.Counter()\n\n    def isPrime(num: int) -> bool:\n      return not any(num % i == 0 for i in range(2, int(num**0.5 + 1)))\n\n    for i in range(m):\n      for j in range(n):\n        for dx, dy in dirs:\n          num = 0\n          x = i\n          y = j\n          while 0 <= x < m and 0 <= y < n:\n            num = num * 10 + mat[x][y]\n            if num > 10 and isPrime(num):\n              count[num] += 1\n            x += dx\n            y += dy\n\n    if not count.items():\n      return -1\n    return max(count.items(), key=lambda x: (x[1], x[0]))[0]\n",
                "lang_text": "py"
            }
        }
    }
}