{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "508",
            "title": "Most Frequent Subtree Sum",
            "titleSlug": "most-frequent-subtree-sum",
            "content": "<p>Given the <code>root</code> of a binary tree, return the most frequent <strong>subtree sum</strong>. If there is a tie, return all the values with the highest frequency in any order.</p>\n\n<p>The <strong>subtree sum</strong> of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/freq1-tree.jpg\" style=\"width: 207px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> root = [5,2,-3]\n<strong>Output:</strong> [2,-3,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/freq2-tree.jpg\" style=\"width: 207px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> root = [5,2,-5]\n<strong>Output:</strong> [2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2179,
            "dislikes": 304,
            "similarQuestions": "[{\"title\": \"Subtree of Another Tree\", \"titleSlug\": \"subtree-of-another-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Nodes Equal to Sum of Descendants\", \"titleSlug\": \"count-nodes-equal-to-sum-of-descendants\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"135.5K\", \"totalSubmission\": \"205.7K\", \"totalAcceptedRaw\": 135496, \"totalSubmissionRaw\": 205691, \"acRate\": \"65.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, find the most frequent subtree sum. The subtree sum of a node is the sum of all node values in the subtree rooted at that node, including the node itself. Return all values with the highest frequency. If there is a tie, return all such values in any order.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 10<sup>4</sup>].",
                    "-10<sup>5</sup> <= Node.val <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "[5,2,-3]",
                        "output": "[2,-3,4]",
                        "explanation": "The subtree rooted at node 2 has sum 2. The subtree rooted at node -3 has sum -3. The subtree rooted at node 5 (the entire tree) has sum 5 + 2 + (-3) = 4.  The frequencies are: 2 (appears once), -3 (appears once), 4 (appears once). The most frequent values are 2,-3,4"
                    },
                    {
                        "input": "[5,2,-5]",
                        "output": "[2]",
                        "explanation": "The subtree rooted at node 2 has sum 2. The subtree rooted at node -5 has sum -5. The subtree rooted at node 5 (the entire tree) has sum 5 + 2 + (-5) = 2. The frequencies are: 2 (appears twice), -5 (appears once). The most frequent value is 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "subtree-of-another-tree",
                "title": "Subtree of Another Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-nodes-equal-to-sum-of-descendants",
                "title": "Count Nodes Equal to Sum of Descendants",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findFrequentTreeSum(TreeNode* root) {\n    vector<int> ans;\n    unordered_map<int, int> count;\n    int maxCount = 0;\n\n    sumDownFrom(root, count);\n\n    for (const auto& [_, freq] : count)\n      maxCount = max(maxCount, freq);\n\n    for (const auto& [sum, freq] : count)\n      if (freq == maxCount)\n        ans.push_back(sum);\n\n    return ans;\n  }\n\n private:\n  int sumDownFrom(TreeNode* root, unordered_map<int, int>& count) {\n    if (root == nullptr)\n      return 0;\n\n    const int sum = root->val + sumDownFrom(root->left, count) +\n                    sumDownFrom(root->right, count);\n    ++count[sum];\n    return sum;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] findFrequentTreeSum(TreeNode root) {\n    List<Integer> ans = new ArrayList<>();\n    Map<Integer, Integer> count = new HashMap<>();\n    int maxCount = 0;\n\n    sumDownFrom(root, count);\n\n    for (final int freq : count.values())\n      maxCount = Math.max(maxCount, freq);\n\n    for (final int sum : count.keySet())\n      if (count.get(sum) == maxCount)\n        ans.add(sum);\n\n    return ans.stream().mapToInt(Integer::intValue).toArray();\n  }\n\n  private int sumDownFrom(TreeNode root, Map<Integer, Integer> count) {\n    if (root == null)\n      return 0;\n\n    final int sum = root.val + sumDownFrom(root.left, count) + sumDownFrom(root.right, count);\n    count.merge(sum, 1, Integer::sum);\n    return sum;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findFrequentTreeSum(self, root: Optional[TreeNode]) -> List[int]:\n    if not root:\n      return []\n\n    count = collections.Counter()\n\n    def dfs(root: Optional[TreeNode]) -> int:\n      if not root:\n        return 0\n\n      summ = root.val + dfs(root.left) + dfs(root.right)\n      count[summ] += 1\n      return summ\n\n    dfs(root)\n    maxFreq = max(count.values())\n    return [summ for summ in count if count[summ] == maxFreq]\n",
                "lang_text": "py"
            }
        }
    }
}