{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2456",
            "title": "Most Popular Video Creator",
            "titleSlug": "most-popular-video-creator",
            "content": "<p>You are given two string arrays <code>creators</code> and <code>ids</code>, and an integer array <code>views</code>, all of length <code>n</code>. The <code>i<sup>th</sup></code> video on a platform was created by <code>creator[i]</code>, has an id of <code>ids[i]</code>, and has <code>views[i]</code> views.</p>\n\n<p>The <strong>popularity</strong> of a creator is the <strong>sum</strong> of the number of views on <strong>all</strong> of the creator&#39;s videos. Find the creator with the <strong>highest</strong> popularity and the id of their <strong>most</strong> viewed video.</p>\n\n<ul>\n\t<li>If multiple creators have the highest popularity, find all of them.</li>\n\t<li>If multiple videos have the highest view count for a creator, find the lexicographically <strong>smallest</strong> id.</li>\n</ul>\n\n<p>Return<em> a 2D array of strings </em><code>answer</code><em> where </em><code>answer[i] = [creator<sub>i</sub>, id<sub>i</sub>]</code><em> means that </em><code>creator<sub>i</sub></code> <em>has the <strong>highest</strong> popularity and </em><code>id<sub>i</sub></code><em> is the id of their most popular video.</em> The answer can be returned in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> creators = [&quot;alice&quot;,&quot;bob&quot;,&quot;alice&quot;,&quot;chris&quot;], ids = [&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;], views = [5,10,5,4]\n<strong>Output:</strong> [[&quot;alice&quot;,&quot;one&quot;],[&quot;bob&quot;,&quot;two&quot;]]\n<strong>Explanation:</strong>\nThe popularity of alice is 5 + 5 = 10.\nThe popularity of bob is 10.\nThe popularity of chris is 4.\nalice and bob are the most popular creators.\nFor bob, the video with the highest view count is &quot;two&quot;.\nFor alice, the videos with the highest view count are &quot;one&quot; and &quot;three&quot;. Since &quot;one&quot; is lexicographically smaller than &quot;three&quot;, it is included in the answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> creators = [&quot;alice&quot;,&quot;alice&quot;,&quot;alice&quot;], ids = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], views = [1,2,2]\n<strong>Output:</strong> [[&quot;alice&quot;,&quot;b&quot;]]\n<strong>Explanation:</strong>\nThe videos with id &quot;b&quot; and &quot;c&quot; have the highest view count.\nSince &quot;b&quot; is lexicographically smaller than &quot;c&quot;, it is included in the answer.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == creators.length == ids.length == views.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= creators[i].length, ids[i].length &lt;= 5</code></li>\n\t<li><code>creators[i]</code> and <code>ids[i]</code> consist only of lowercase English letters.</li>\n\t<li><code>0 &lt;= views[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 247,
            "dislikes": 355,
            "similarQuestions": "[{\"title\": \"Design Video Sharing Platform\", \"titleSlug\": \"design-video-sharing-platform\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Design a Food Rating System\", \"titleSlug\": \"design-a-food-rating-system\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.6K\", \"totalSubmission\": \"47.2K\", \"totalAcceptedRaw\": 20596, \"totalSubmissionRaw\": 47164, \"acRate\": \"43.7%\"}",
            "hints": [
                "Use a hash table to store and categorize videos based on their creator.",
                "For each creator, iterate through all their videos and use three variables to keep track of their popularity, their most popular video, and the id of their most popular video."
            ],
            "rephrased": {
                "body": "Given three arrays: `creators` (strings), `ids` (strings), and `views` (integers), all of length `n`. Each index `i` represents a video created by `creators[i]` with ID `ids[i]` and `views[i]` views.  The popularity of a creator is the sum of views of all their videos.  Find all creators with the highest popularity and, for each, the ID of their most viewed video (choosing the lexicographically smallest ID in case of ties). Return a 2D array where each element is a list containing a creator and their most popular video ID.",
                "constraints": [
                    "n == creators.length == ids.length == views.length",
                    "1 <= n <= 10^5",
                    "1 <= creators[i].length, ids[i].length <= 5",
                    "creators[i] and ids[i] consist only of lowercase English letters.",
                    "0 <= views[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "creators = [\"alice\",\"bob\",\"alice\",\"chris\"], ids = [\"one\",\"two\",\"three\",\"four\"], views = [5,10,5,4]",
                        "output": "[[\"alice\",\"one\"],[\"bob\",\"two\"]]",
                        "explanation": "Alice's popularity is 5 + 5 = 10. Bob's popularity is 10. Chris's popularity is 4. Alice and Bob are the most popular. For Bob, 'two' has the highest view count. For Alice, 'one' and 'three' tie, but 'one' is lexicographically smaller."
                    },
                    {
                        "input": "creators = [\"alice\",\"alice\",\"alice\"], ids = [\"a\",\"b\",\"c\"], views = [1,2,2]",
                        "output": "[[\"alice\",\"b\"]]",
                        "explanation": "Videos 'b' and 'c' have the highest view count for Alice. 'b' is lexicographically smaller than 'c'."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "design-video-sharing-platform",
                "title": "Design Video Sharing Platform",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "design-a-food-rating-system",
                "title": "Design a Food Rating System",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use a hash table to store and categorize videos based on their creator.",
            "For each creator, iterate through all their videos and use three variables to keep track of their popularity, their most popular video, and the id of their most popular video."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Creator {\n  long popularity;  // Popularity sum.\n  string videoId;   // Video id that has max view.\n  int maxView;      // Max view of the creator.\n};\n\nclass Solution {\n public:\n  vector<vector<string>> mostPopularCreator(vector<string>& creators,\n                                            vector<string>& ids,\n                                            vector<int>& views) {\n    vector<vector<string>> ans;\n    unordered_map<string, Creator> nameToCreator;\n    long maxPopularity = 0;\n\n    for (int i = 0; i < creators.size(); ++i) {\n      if (!nameToCreator.count(creators[i])) {\n        nameToCreator[creators[i]] = Creator{\n            .popularity = views[i],\n            .videoId = ids[i],\n            .maxView = views[i],\n        };\n        maxPopularity = max(maxPopularity, static_cast<long>(views[i]));\n        continue;\n      }\n      Creator& creator = nameToCreator[creators[i]];\n      creator.popularity += views[i];\n      maxPopularity = max(maxPopularity, static_cast<long>(creator.popularity));\n      if (creator.maxView < views[i] ||\n          creator.maxView == views[i] && creator.videoId > ids[i]) {\n        creator.videoId = ids[i];\n        creator.maxView = views[i];\n      }\n    }\n\n    for (const auto& [name, creator] : nameToCreator)\n      if (creator.popularity == maxPopularity)\n        ans.push_back({name, creator.videoId});\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Creator {\n  public long popularity; // Popularity sum.\n  public String videoId;  // Video id that has max view.\n  public int maxView;     // Max view of the creator.\n  public Creator(long popularity, String videoId, int maxView) {\n    this.popularity = popularity;\n    this.videoId = videoId;\n    this.maxView = maxView;\n  }\n}\n\nclass Solution {\n  public List<List<String>> mostPopularCreator(String[] creators, String[] ids, int[] views) {\n    List<List<String>> ans = new ArrayList<>();\n    Map<String, Creator> nameToCreator = new HashMap<>();\n    long maxPopularity = 0;\n\n    for (int i = 0; i < creators.length; ++i) {\n      if (!nameToCreator.containsKey(creators[i])) {\n        nameToCreator.put(creators[i], new Creator(views[i], ids[i], views[i]));\n        maxPopularity = Math.max(maxPopularity, (long) views[i]);\n        continue;\n      }\n      Creator creator = nameToCreator.get(creators[i]);\n      creator.popularity += views[i];\n      maxPopularity = Math.max(maxPopularity, (long) creator.popularity);\n      if (creator.maxView < views[i] ||\n          creator.maxView == views[i] && creator.videoId.compareTo(ids[i]) > 0) {\n        creator.videoId = ids[i];\n        creator.maxView = views[i];\n      }\n    }\n\n    for (Map.Entry<String, Creator> entry : nameToCreator.entrySet())\n      if (entry.getValue().popularity == maxPopularity)\n        ans.add(Arrays.asList(entry.getKey(), entry.getValue().videoId));\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Creator:\n  def __init__(self, popularity: int, videoId: str, maxView: int):\n    self.popularity = popularity  # Popularity sum.\n    self.videoId = videoId        # Video id that has max view.\n    self.maxView = maxView        # Max view of the creator.\n\n\nclass Solution:\n  def mostPopularCreator(self, creators: List[str], ids: List[str], views: List[int]) -> List[List[str]]:\n    ans = []\n    maxPopularity = 0\n    nameToCreator = {}\n\n    for name, id, view in zip(creators, ids, views):\n      if name not in nameToCreator:\n        nameToCreator[name] = Creator(view, id, view)\n        maxPopularity = max(maxPopularity, view)\n        continue\n      creator = nameToCreator[name]\n      creator.popularity += view\n      maxPopularity = max(maxPopularity, creator.popularity)\n      if creator.maxView < view or \\\n              creator.maxView == view and creator.videoId > id:\n        creator.videoId = id\n        creator.maxView = view\n\n    for name, creator in nameToCreator.items():\n      if creator.popularity == maxPopularity:\n        ans.append([name, creator.videoId])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}