{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2467",
            "title": "Most Profitable Path in a Tree",
            "titleSlug": "most-profitable-path-in-a-tree",
            "content": "<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, rooted at node <code>0</code>. You are given a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>At every node <code>i</code>, there is a gate. You are also given an array of even integers <code>amount</code>, where <code>amount[i]</code> represents:</p>\n\n<ul>\n\t<li>the price needed to open the gate at node <code>i</code>, if <code>amount[i]</code> is negative, or,</li>\n\t<li>the cash reward obtained on opening the gate at node <code>i</code>, otherwise.</li>\n</ul>\n\n<p>The game goes on as follows:</p>\n\n<ul>\n\t<li>Initially, Alice is at node <code>0</code> and Bob is at node <code>bob</code>.</li>\n\t<li>At every second, Alice and Bob <b>each</b> move to an adjacent node. Alice moves towards some <strong>leaf node</strong>, while Bob moves towards node <code>0</code>.</li>\n\t<li>For <strong>every</strong> node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that:\n\t<ul>\n\t\t<li>If the gate is <strong>already open</strong>, no price will be required, nor will there be any cash reward.</li>\n\t\t<li>If Alice and Bob reach the node <strong>simultaneously</strong>, they share the price/reward for opening the gate there. In other words, if the price to open the gate is <code>c</code>, then both Alice and Bob pay&nbsp;<code>c / 2</code> each. Similarly, if the reward at the gate is <code>c</code>, both of them receive <code>c / 2</code> each.</li>\n\t</ul>\n\t</li>\n\t<li>If Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node <code>0</code>, he stops moving. Note that these events are <strong>independent</strong> of each other.</li>\n</ul>\n\n<p>Return<em> the <strong>maximum</strong> net income Alice can have if she travels towards the optimal leaf node.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/29/eg1.png\" style=\"width: 275px; height: 275px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \nThe above diagram represents the given tree. The game goes as follows:\n- Alice is initially on node 0, Bob on node 3. They open the gates of their respective nodes.\n  Alice&#39;s net income is now -2.\n- Both Alice and Bob move to node 1. \n&nbsp; Since they reach here simultaneously, they open the gate together and share the reward.\n&nbsp; Alice&#39;s net income becomes -2 + (4 / 2) = 0.\n- Alice moves on to node 3. Since Bob already opened its gate, Alice&#39;s income remains unchanged.\n&nbsp; Bob moves on to node 0, and stops moving.\n- Alice moves on to node 4 and opens the gate there. Her net income becomes 0 + 6 = 6.\nNow, neither Alice nor Bob can make any further moves, and the game ends.\nIt is not possible for Alice to get a higher net income.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/29/eg2.png\" style=\"width: 250px; height: 78px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1]], bob = 1, amount = [-7280,2350]\n<strong>Output:</strong> -7280\n<strong>Explanation:</strong> \nAlice follows the path 0-&gt;1 whereas Bob follows the path 1-&gt;0.\nThus, Alice opens the gate at node 0 only. Hence, her net income is -7280. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n\t<li><code>1 &lt;= bob &lt; n</code></li>\n\t<li><code>amount.length == n</code></li>\n\t<li><code>amount[i]</code> is an <strong>even</strong> integer in the range <code>[-10<sup>4</sup>, 10<sup>4</sup>]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 628,
            "dislikes": 59,
            "similarQuestions": "[{\"title\": \"Snakes and Ladders\", \"titleSlug\": \"snakes-and-ladders\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.8K\", \"totalSubmission\": \"22.1K\", \"totalAcceptedRaw\": 10772, \"totalSubmissionRaw\": 22062, \"acRate\": \"48.8%\"}",
            "hints": [
                "Bob travels along a fixed path (from node \u201cbob\u201d to node 0).",
                "Calculate Alice\u2019s distance to each node via DFS.",
                "We can calculate Alice\u2019s score along a path ending at some node easily using Hints 1 and 2."
            ],
            "rephrased": {
                "body": "You are given an undirected tree with `n` nodes, labeled from 0 to `n - 1`, rooted at node 0. The tree structure is defined by a 2D integer array `edges` where `edges[i] = [a_i, b_i]` indicates an edge between nodes `a_i` and `b_i`. Each node `i` has a gate with an associated `amount[i]`, which is either a negative cost to open the gate or a positive reward for opening it.\n\nAlice starts at node 0 and moves towards a leaf node, while Bob starts at node `bob` and moves towards node 0. Both move simultaneously to adjacent nodes each second.  When they traverse a node:\n\n*   If a gate hasn't been opened, they either pay the cost or receive the reward. A gate once opened stays open.\n*   If Alice and Bob reach a node at the same time, they share the cost or reward; each pays/receives half of the amount.\n\nYour task is to determine the maximum net income Alice can achieve by choosing an optimal path to a leaf node.",
                "constraints": [
                    "2 <= n <= 10^5",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= a_i, b_i < n",
                    "a_i != b_i",
                    "`edges` represents a valid tree.",
                    "1 <= bob < n",
                    "amount.length == n",
                    "`amount[i]` is an even integer in the range [-10^4, 10^4]."
                ],
                "testcases": [
                    {
                        "input": "edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6]",
                        "output": "6",
                        "explanation": "Alice starts at node 0 (income -2). Alice and Bob meet at node 1 (income +4/2 = +2, total 0). Alice proceeds to node 3 (no change as Bob opened it). Alice ends at node 4 (income +6, total 6).  This path (0 -> 1 -> 3 -> 4) yields the maximum income."
                    },
                    {
                        "input": "edges = [[0,1]], bob = 1, amount = [-7280,2350]",
                        "output": "-7280",
                        "explanation": "Alice goes 0 -> 1, Bob goes 1 -> 0. Alice only opens gate at node 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "snakes-and-ladders",
                "title": "Snakes and Ladders",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Bob travels along a fixed path (from node \u201cbob\u201d to node 0).",
            "Calculate Alice\u2019s distance to each node via DFS.",
            "We can calculate Alice\u2019s score along a path ending at some node easily using Hints 1 and 2."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int mostProfitablePath(vector<vector<int>>& edges, int bob,\n                         vector<int>& amount) {\n    const int n = amount.size();\n    vector<vector<int>> tree(n);\n    vector<int> parent(n);\n    vector<int> aliceDist(n, -1);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      tree[u].push_back(v);\n      tree[v].push_back(u);\n    }\n\n    dfs(tree, 0, -1, 0, parent, aliceDist);\n\n    // Modify amount along the path from node bob to node 0.\n    // For each node,\n    //   - if Bob reaches earlier than Alice does, change the amount to 0.\n    //   - if Bob and Alice reach simultaneously, devide the amount by 2.\n    for (int u = bob, bobDist = 0; u != 0; u = parent[u], ++bobDist)\n      if (bobDist < aliceDist[u])\n        amount[u] = 0;\n      else if (bobDist == aliceDist[u])\n        amount[u] /= 2;\n\n    return getMoney(tree, 0, -1, amount);\n  }\n\n private:\n  // Fills `parent` and `dist`.\n  void dfs(const vector<vector<int>>& tree, int u, int prev, int d,\n           vector<int>& parent, vector<int>& dist) {\n    parent[u] = prev;\n    dist[u] = d;\n    for (const int v : tree[u]) {\n      if (dist[v] == -1)\n        dfs(tree, v, u, d + 1, parent, dist);\n    }\n  }\n\n  int getMoney(const vector<vector<int>>& tree, int u, int prev,\n               const vector<int>& amount) {\n    // Leaf node.\n    if (tree[u].size() == 1 && tree[u][0] == prev)\n      return amount[u];\n\n    int maxPath = INT_MIN;\n    for (const int v : tree[u])\n      if (v != prev)\n        maxPath = max(maxPath, getMoney(tree, v, u, amount));\n\n    return amount[u] + maxPath;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int mostProfitablePath(int[][] edges, int bob, int[] amount) {\n    final int n = amount.length;\n    List<Integer>[] tree = new List[n];\n    int[] parent = new int[n];\n    int[] aliceDist = new int[n];\n    Arrays.fill(aliceDist, -1);\n\n    for (int i = 0; i < n; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      tree[u].add(v);\n      tree[v].add(u);\n    }\n\n    dfs(tree, 0, -1, 0, parent, aliceDist);\n\n    // Modify amount along the path from node bob to node 0.\n    // For each node,\n    //   - if Bob reaches earlier than Alice does, change the amount to 0.\n    //   - if Bob and Alice reach simultaneously, devide the amount by 2.\n    for (int u = bob, bobDist = 0; u != 0; u = parent[u], ++bobDist)\n      if (bobDist < aliceDist[u])\n        amount[u] = 0;\n      else if (bobDist == aliceDist[u])\n        amount[u] /= 2;\n\n    return getMoney(tree, 0, -1, amount);\n  }\n\n  // Fills `parent` and `dist`.\n  private void dfs(List<Integer>[] tree, int u, int prev, int d, int[] parent, int[] dist) {\n    parent[u] = prev;\n    dist[u] = d;\n    for (final int v : tree[u]) {\n      if (dist[v] == -1)\n        dfs(tree, v, u, d + 1, parent, dist);\n    }\n  }\n\n  private int getMoney(List<Integer>[] tree, int u, int prev, int[] amount) {\n    // Leaf node.\n    if (tree[u].size() == 1 && tree[u].get(0) == prev)\n      return amount[u];\n\n    int maxPath = Integer.MIN_VALUE;\n    for (final int v : tree[u])\n      if (v != prev)\n        maxPath = Math.max(maxPath, getMoney(tree, v, u, amount));\n\n    return amount[u] + maxPath;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:\n    n = len(amount)\n    tree = [[] for _ in range(n)]\n    parent = [0] * n\n    aliceDist = [-1] * n\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    # Fills `parent` and `aliceDist`.\n    def dfs(u: int, prev: int, d: int) -> None:\n      parent[u] = prev\n      aliceDist[u] = d\n      for v in tree[u]:\n        if aliceDist[v] == -1:\n          dfs(v, u, d + 1)\n\n    dfs(0, -1, 0)\n\n    # Modify amount athe path from node bob to node 0.\n    # For each node,\n    #   - if Bob reaches earlier than Alice does, change the amount to 0.\n    #   - if Bob and Alice reach simultaneously, devide the amount by 2.\n    u = bob\n    bobDist = 0\n    while u != 0:\n      if bobDist < aliceDist[u]:\n        amount[u] = 0\n      elif bobDist == aliceDist[u]:\n        amount[u] //= 2\n      u = parent[u]\n      bobDist += 1\n\n    return self._getMoney(tree, 0, -1, amount)\n\n  def _getMoney(self, tree: List[List[int]], u: int, prev: int, amount: List[int]) -> int:\n    # Leaf node.\n    if len(tree[u]) == 1 and tree[u][0] == prev:\n      return amount[u]\n\n    maxPath = -math.inf\n    for v in tree[u]:\n      if v != prev:\n        maxPath = max(maxPath, self._getMoney(tree, v, u, amount))\n\n    return amount[u] + maxPath\n",
                "lang_text": "py"
            }
        }
    }
}