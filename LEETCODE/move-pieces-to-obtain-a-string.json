{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2337",
            "title": "Move Pieces to Obtain a String",
            "titleSlug": "move-pieces-to-obtain-a-string",
            "content": "<p>You are given two strings <code>start</code> and <code>target</code>, both of length <code>n</code>. Each string consists <strong>only</strong> of the characters <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, and <code>&#39;_&#39;</code> where:</p>\n\n<ul>\n\t<li>The characters <code>&#39;L&#39;</code> and <code>&#39;R&#39;</code> represent pieces, where a piece <code>&#39;L&#39;</code> can move to the <strong>left</strong> only if there is a <strong>blank</strong> space directly to its left, and a piece <code>&#39;R&#39;</code> can move to the <strong>right</strong> only if there is a <strong>blank</strong> space directly to its right.</li>\n\t<li>The character <code>&#39;_&#39;</code> represents a blank space that can be occupied by <strong>any</strong> of the <code>&#39;L&#39;</code> or <code>&#39;R&#39;</code> pieces.</li>\n</ul>\n\n<p>Return <code>true</code> <em>if it is possible to obtain the string</em> <code>target</code><em> by moving the pieces of the string </em><code>start</code><em> <strong>any</strong> number of times</em>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;_L__R__R_&quot;, target = &quot;L______RR&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can obtain the string target from start by doing the following moves:\n- Move the first piece one step to the left, start becomes equal to &quot;<strong>L</strong>___R__R_&quot;.\n- Move the last piece one step to the right, start becomes equal to &quot;L___R___<strong>R</strong>&quot;.\n- Move the second piece three steps to the right, start becomes equal to &quot;L______<strong>R</strong>R&quot;.\nSince it is possible to get the string target from start, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;R_L_&quot;, target = &quot;__LR&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The &#39;R&#39; piece in the string start can move one step to the right to obtain &quot;_<strong>R</strong>L_&quot;.\nAfter that, no pieces can move anymore, so it is impossible to obtain the string target from start.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> start = &quot;_R&quot;, target = &quot;R_&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The piece in the string start can move only to the right, so it is impossible to obtain the string target from start.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == start.length == target.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>start</code> and <code>target</code> consist of the characters <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, and <code>&#39;_&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 632,
            "dislikes": 42,
            "similarQuestions": "[{\"title\": \"Valid Parentheses\", \"titleSlug\": \"valid-parentheses\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Swap Adjacent in LR String\", \"titleSlug\": \"swap-adjacent-in-lr-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.9K\", \"totalSubmission\": \"50.3K\", \"totalAcceptedRaw\": 23892, \"totalSubmissionRaw\": 50252, \"acRate\": \"47.5%\"}",
            "hints": [
                "After some sequence of moves, can the order of the pieces change?",
                "Try to match each piece in s with a piece in e."
            ],
            "rephrased": {
                "body": "Given two strings, `start` and `target`, both of length `n`, consisting of the characters 'L', 'R', and '_'. 'L' can move left to an empty space, 'R' can move right to an empty space, and '_' represents an empty space. Determine if `target` can be obtained from `start` through any number of valid moves.",
                "constraints": [
                    "n == start.length == target.length",
                    "1 <= n <= 10^5",
                    "start and target consist of the characters 'L', 'R', and '_'."
                ],
                "testcases": [
                    {
                        "input": {
                            "start": "_L__R__R_",
                            "target": "L______RR"
                        },
                        "output": true,
                        "explanation": "The target string can be reached from the start string through a series of moves. The 'L' moves left. The rightmost 'R' moves right. Finally the other R moves to right resulting in the target string."
                    },
                    {
                        "input": {
                            "start": "R_L_",
                            "target": "__LR"
                        },
                        "output": false,
                        "explanation": "It's impossible to obtain the target string from the start string given the movement constraints. No matter how we move the 'R' and 'L' pieces in the start string, we cannot arrive at the target string."
                    },
                    {
                        "input": {
                            "start": "_R",
                            "target": "R_"
                        },
                        "output": false,
                        "explanation": "The 'R' in the start string can only move to the right. Therefore, it is not possible to obtain the target string where the 'R' is to the left."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "valid-parentheses",
                "title": "Valid Parentheses",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "swap-adjacent-in-lr-string",
                "title": "Swap Adjacent in LR String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "After some sequence of moves, can the order of the pieces change?",
            "Try to match each piece in s with a piece in e."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canChange(string start, string target) {\n    const int n = start.length();\n    int i = 0;  // start's index\n    int j = 0;  // target's index\n\n    while (i <= n && j <= n) {\n      while (i < n && start[i] == '_')\n        ++i;\n      while (j < n && target[j] == '_')\n        ++j;\n      if (i == n || j == n)\n        return i == n && j == n;\n      if (start[i] != target[j])\n        return false;\n      if (start[i] == 'R' && i > j)\n        return false;\n      if (start[i] == 'L' && i < j)\n        return false;\n      ++i;\n      ++j;\n    }\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canChange(String start, String target) {\n    final int n = start.length();\n    int i = 0; // start's index\n    int j = 0; // target's index\n\n    while (i <= n && j <= n) {\n      while (i < n && start.charAt(i) == '_')\n        ++i;\n      while (j < n && target.charAt(j) == '_')\n        ++j;\n      if (i == n || j == n)\n        return i == n && j == n;\n      if (start.charAt(i) != target.charAt(j))\n        return false;\n      if (start.charAt(i) == 'R' && i > j)\n        return false;\n      if (start.charAt(i) == 'L' && i < j)\n        return false;\n      ++i;\n      ++j;\n    }\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canChange(self, start: str, target: str) -> bool:\n    n = len(start)\n    i = 0  # start's index\n    j = 0  # target's index\n\n    while i <= n and j <= n:\n      while i < n and start[i] == '_':\n        i += 1\n      while j < n and target[j] == '_':\n        j += 1\n      if i == n or j == n:\n        return i == n and j == n\n      if start[i] != target[j]:\n        return False\n      if start[i] == 'R' and i > j:\n        return False\n      if start[i] == 'L' and i < j:\n        return False\n      i += 1\n      j += 1\n\n    return True\n",
                "lang_text": "py"
            }
        }
    }
}