{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "283",
            "title": "Move Zeroes",
            "titleSlug": "move-zeroes",
            "content": "<p>Given an integer array <code>nums</code>, move all <code>0</code>&#39;s to the end of it while maintaining the relative order of the non-zero elements.</p>\n\n<p><strong>Note</strong> that you must do this in-place without making a copy of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [0,1,0,3,12]\n<strong>Output:</strong> [1,3,12,0,0]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you minimize the total number of operations done?",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 15894,
            "dislikes": 411,
            "similarQuestions": "[{\"title\": \"Remove Element\", \"titleSlug\": \"remove-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Apply Operations to an Array\", \"titleSlug\": \"apply-operations-to-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                }
            ],
            "stats": "{\"totalAccepted\": \"2.7M\", \"totalSubmission\": \"4.3M\", \"totalAcceptedRaw\": 2658324, \"totalSubmissionRaw\": 4322839, \"acRate\": \"61.5%\"}",
            "hints": [
                "<b>In-place</b> means we should not be allocating any space for extra array. But we are allowed to modify the existing array. However, as a first step, try coming up with a solution that makes use of additional space. For this problem as well, first apply the idea discussed using an additional array and the in-place solution will pop up eventually.",
                "A <b>two-pointer</b> approach could be helpful here. The idea would be to have one pointer for iterating the array and another pointer that just works on the non-zero elements of the array."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, rearrange the array in-place such that all `0`s are moved to the end of the array while preserving the relative order of all non-zero elements.",
                "constraints": [
                    "1 <= nums.length <= 10^4",
                    "-2^31 <= nums[i] <= 2^31 - 1"
                ],
                "testcases": [
                    {
                        "input": "[0,1,0,3,12]",
                        "output": "[1,3,12,0,0]",
                        "explanation": null
                    },
                    {
                        "input": "[0]",
                        "output": "[0]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "remove-element",
                "title": "Remove Element",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "apply-operations-to-an-array",
                "title": "Apply Operations to an Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "<b>In-place</b> means we should not be allocating any space for extra array. But we are allowed to modify the existing array. However, as a first step, try coming up with a solution that makes use of additional space. For this problem as well, first apply the idea discussed using an additional array and the in-place solution will pop up eventually.",
            "A <b>two-pointer</b> approach could be helpful here. The idea would be to have one pointer for iterating the array and another pointer that just works on the non-zero elements of the array."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  void moveZeroes(vector<int>& nums) {\n    int i = 0;\n    for (const int num : nums)\n      if (num != 0)\n        nums[i++] = num;\n\n    while (i < nums.size())\n      nums[i++] = 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public void moveZeroes(int[] nums) {\n    int i = 0;\n    for (final int num : nums)\n      if (num != 0)\n        nums[i++] = num;\n\n    while (i < nums.length)\n      nums[i++] = 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def moveZeroes(self, nums: List[int]) -> None:\n    j = 0\n    for num in nums:\n      if num != 0:\n        nums[j] = num\n        j += 1\n\n    for i in range(j, len(nums)):\n      nums[i] = 0\n",
                "lang_text": "py"
            }
        }
    }
}