{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2731",
            "title": "Movement of Robots",
            "titleSlug": "movement-of-robots",
            "content": "<p>Some robots are standing on an infinite number line with their initial coordinates given by a <strong>0-indexed</strong> integer array <code>nums</code> and will start moving once given the command to move. The robots will move a unit distance each second.</p>\n\n<p>You are given a string <code>s</code> denoting the direction in which robots will move on command. <code>&#39;L&#39;</code> means the robot will move towards the left side or negative side of the number line, whereas <code>&#39;R&#39;</code> means the robot will move towards the right side or positive side of the number line.</p>\n\n<p>If two robots collide, they will start moving in opposite directions.</p>\n\n<p>Return <em>the sum of distances between all the&nbsp;pairs of robots </em><code>d</code> <em>seconds after&nbsp;the command. </em>Since the sum can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p>\n\n<p><b>Note: </b></p>\n\n<ul>\n\t<li>For two robots at the index <code>i</code> and <code>j</code>, pair <code>(i,j)</code> and pair <code>(j,i)</code> are considered the same pair.</li>\n\t<li>When robots collide, they <strong>instantly change</strong> their directions without wasting any time.</li>\n\t<li>Collision happens&nbsp;when two robots share the same place in a&nbsp;moment.\n\t<ul>\n\t\t<li>For example, if a robot is positioned in 0 going to the right and another is positioned in 2 going to the left, the next second they&#39;ll be both in 1 and they will change direction and the next second the first one will be in 0, heading left, and another will be in 2, heading right.</li>\n\t\t<li>For example,&nbsp;if a robot is positioned in 0 going to the right and another is positioned in 1&nbsp;going to the left, the next second the first one will be in 0, heading left, and another will be in 1, heading right.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,0,2], s = &quot;RLL&quot;, d = 3\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> \nAfter 1 second, the positions are [-1,-1,1]. Now, the robot at index 0 will move left, and the robot at index 1 will move right.\nAfter 2 seconds, the positions are [-2,0,0]. Now, the robot at index 1 will move left, and the robot at index 2 will move right.\nAfter 3 seconds, the positions are [-3,-1,1].\nThe distance between the robot at index 0 and 1 is abs(-3 - (-1)) = 2.\nThe distance between the robot at index 0 and 2 is abs(-3 - 1) = 4.\nThe distance between the robot at index 1 and 2 is abs(-1 - 1) = 2.\nThe sum of the pairs of all distances = 2 + 4 + 2 = 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0], s = &quot;RL&quot;, d = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nAfter 1 second, the positions are [2,-1].\nAfter 2 seconds, the positions are [3,-2].\nThe distance between the two robots is abs(-2 - 3) = 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2 * 10<sup>9</sup>&nbsp;&lt;= nums[i] &lt;= 2 * 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= d &lt;= 10<sup>9</sup></code></li>\n\t<li><code>nums.length == s.length&nbsp;</code></li>\n\t<li><code>s</code> consists of &#39;L&#39; and &#39;R&#39; only</li>\n\t<li><code>nums[i]</code>&nbsp;will be unique.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 457,
            "dislikes": 86,
            "similarQuestions": "[{\"title\": \"Last Moment Before All Ants Fall Out of a Plank\", \"titleSlug\": \"last-moment-before-all-ants-fall-out-of-a-plank\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Brainteaser",
                    "slug": "brainteaser"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.9K\", \"totalSubmission\": \"42.6K\", \"totalAcceptedRaw\": 11930, \"totalSubmissionRaw\": 42569, \"acRate\": \"28.0%\"}",
            "hints": [
                "Observe that if you ignore collisions, the resultant positions of robots after d seconds would be the same.",
                "After d seconds, sort the ending positions and use prefix sum to calculate the distance sum."
            ],
            "rephrased": {
                "body": "Given an array `nums` representing the initial positions of robots on an infinite number line and a string `s` indicating their movement directions ('L' for left, 'R' for right), calculate the sum of distances between all pairs of robots after `d` seconds. Robots move one unit per second. If robots collide, they instantly reverse their directions. Return the sum of distances modulo 10^9 + 7.",
                "constraints": [
                    "2 <= nums.length <= 10^5",
                    "-2 * 10^9 <= nums[i] <= 2 * 10^9",
                    "0 <= d <= 10^9",
                    "nums.length == s.length",
                    "s consists of 'L' and 'R' only",
                    "nums[i] will be unique"
                ],
                "testcases": [
                    {
                        "input": "nums = [-2,0,2], s = \"RLL\", d = 3",
                        "output": "8",
                        "explanation": "After 3 seconds, the positions of the robots are [-3, -1, 1]. The pairwise distances are abs(-3 - (-1)) = 2, abs(-3 - 1) = 4, and abs(-1 - 1) = 2. The total distance is 2 + 4 + 2 = 8."
                    },
                    {
                        "input": "nums = [1,0], s = \"RL\", d = 2",
                        "output": "5",
                        "explanation": "After 2 seconds, the positions of the robots are [3, -2]. The distance between them is abs(-2 - 3) = 5."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "last-moment-before-all-ants-fall-out-of-a-plank",
                "title": "Last Moment Before All Ants Fall Out of a Plank",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Observe that if you ignore collisions, the resultant positions of robots after d seconds would be the same.",
            "After d seconds, sort the ending positions and use prefix sum to calculate the distance sum."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Brainteaser",
                "slug": "brainteaser"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int sumDistance(vector<int>& nums, string s, int d) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = nums.size();\n    int ans = 0;\n    int prefix = 0;\n    vector<int> pos;\n\n    for (int i = 0; i < nums.size(); ++i)\n      if (s[i] == 'L')\n        pos.push_back(nums[i] - d);\n      else\n        pos.push_back(nums[i] + d);\n\n    std::ranges::sort(pos);\n\n    for (int i = 0; i < n; ++i) {\n      ans = ((ans + 1LL * i * pos[i] - prefix) % kMod + kMod) % kMod;\n      prefix = ((0LL + prefix + pos[i]) % kMod + kMod) % kMod;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int sumDistance(int[] nums, String s, int d) {\n    final int kMod = 1_000_000_007;\n    final int n = nums.length;\n    int ans = 0;\n    int prefix = 0;\n    int[] pos = new int[n];\n\n    for (int i = 0; i < n; ++i)\n      if (s.charAt(i) == 'L')\n        pos[i] = nums[i] - d;\n      else\n        pos[i] = nums[i] + d;\n\n    Arrays.sort(pos);\n\n    for (int i = 0; i < n; ++i) {\n      ans = (int) (((ans + 1L * i * pos[i] - prefix) % kMod + kMod) % kMod);\n      prefix = (int) (((0L + prefix + pos[i]) % kMod + kMod) % kMod);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sumDistance(self, nums: List[int], s: str, d: int) -> int:\n    kMod = 1_000_000_007\n    ans = 0\n    prefix = 0\n    pos = sorted([num - d if c == 'L' else num + d\n                  for num, c in zip(nums, s)])\n\n    for i, p in enumerate(pos):\n      ans = ((ans + i * p - prefix) % kMod + kMod) % kMod\n      prefix = ((prefix + p) % kMod + kMod) % kMod\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}