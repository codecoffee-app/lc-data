{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1040",
            "title": "Moving Stones Until Consecutive II",
            "titleSlug": "moving-stones-until-consecutive-ii",
            "content": "<p>There are some stones in different positions on the X-axis. You are given an integer array <code>stones</code>, the positions of the stones.</p>\n\n<p>Call a stone an <strong>endpoint stone</strong> if it has the smallest or largest position. In one move, you pick up an <strong>endpoint stone</strong> and move it to an unoccupied position so that it is no longer an <strong>endpoint stone</strong>.</p>\n\n<ul>\n\t<li>In particular, if the stones are at say, <code>stones = [1,2,5]</code>, you cannot move the endpoint stone at position <code>5</code>, since moving it to any position (such as <code>0</code>, or <code>3</code>) will still keep that stone as an endpoint stone.</li>\n</ul>\n\n<p>The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).</p>\n\n<p>Return <em>an integer array </em><code>answer</code><em> of length </em><code>2</code><em> where</em>:</p>\n\n<ul>\n\t<li><code>answer[0]</code> <em>is the minimum number of moves you can play, and</em></li>\n\t<li><code>answer[1]</code> <em>is the maximum number of moves you can play</em>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [7,4,9]\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> We can move 4 -&gt; 8 for one move to finish the game.\nOr, we can move 9 -&gt; 5, 4 -&gt; 6 for two moves to finish the game.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [6,5,4,3,10]\n<strong>Output:</strong> [2,3]\n<strong>Explanation:</strong> We can move 3 -&gt; 8 then 10 -&gt; 7 to finish the game.\nOr, we can move 3 -&gt; 7, 4 -&gt; 8, 5 -&gt; 9 to finish the game.\nNotice we cannot move 10 -&gt; 2 to finish the game, because that would be an illegal move.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= stones.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= stones[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>All the values of <code>stones</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 359,
            "dislikes": 596,
            "similarQuestions": "[{\"title\": \"Minimum Number of Operations to Make Array Continuous\", \"titleSlug\": \"minimum-number-of-operations-to-make-array-continuous\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.7K\", \"totalSubmission\": \"17.1K\", \"totalAcceptedRaw\": 9669, \"totalSubmissionRaw\": 17065, \"acRate\": \"56.7%\"}",
            "hints": [
                "For the minimum, how many cows are already in place?\r\nFor the maximum, we have to lose either the gap A[1] - A[0] or A[N-1] - A[N-2]  (where N = A.length), but every other space can be occupied."
            ],
            "rephrased": {
                "body": "Given an array `stones` representing the positions of stones on the X-axis, where each position is unique. A stone is considered an endpoint stone if it has the smallest or largest position.  In one move, you can pick up an endpoint stone and move it to an unoccupied position such that it is no longer an endpoint stone.\n\nThe game ends when the stones are in consecutive positions.  Return an array of length 2 where the first element is the minimum number of moves to finish the game, and the second element is the maximum number of moves to finish the game.",
                "constraints": [
                    "3 <= stones.length <= 10^4",
                    "1 <= stones[i] <= 10^9",
                    "All the values of stones are unique."
                ],
                "testcases": [
                    {
                        "input": "[7,4,9]",
                        "output": "[1,2]",
                        "explanation": "Minimum moves: Move 4 -> 8 (1 move).\nMaximum moves: Move 9 -> 5, then 4 -> 6 (2 moves)."
                    },
                    {
                        "input": "[6,5,4,3,10]",
                        "output": "[2,3]",
                        "explanation": "Minimum moves: Move 3 -> 8, then 10 -> 7 (2 moves).\nMaximum moves: Move 3 -> 7, 4 -> 8, then 5 -> 9 (3 moves). Note that moving 10 -> 2 is not allowed as 10 would still be an endpoint."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-operations-to-make-array-continuous",
                "title": "Minimum Number of Operations to Make Array Continuous",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For the minimum, how many cows are already in place?\r\nFor the maximum, we have to lose either the gap A[1] - A[0] or A[N-1] - A[N-2]  (where N = A.length), but every other space can be occupied."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> numMovesStonesII(vector<int>& stones) {\n    const int n = stones.size();\n    int minMoves = n;\n\n    std::ranges::sort(stones);\n\n    for (int l = 0, r = 0; r < n; ++r) {\n      while (stones[r] - stones[l] + 1 > n)\n        ++l;\n      int alreadyStored = r - l + 1;\n      if (alreadyStored == n - 1 && stones[r] - stones[l] + 1 == n - 1)\n        minMoves = min(minMoves, 2);\n      else\n        minMoves = min(minMoves, n - alreadyStored);\n    }\n\n    return {minMoves, max(stones[n - 1] - stones[1] - n + 2,\n                          stones[n - 2] - stones[0] - n + 2)};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] numMovesStonesII(int[] stones) {\n    final int n = stones.length;\n    int minMoves = n;\n\n    Arrays.sort(stones);\n\n    for (int l = 0, r = 0; r < n; ++r) {\n      while (stones[r] - stones[l] + 1 > n)\n        ++l;\n      int alreadyStored = r - l + 1;\n      if (alreadyStored == n - 1 && stones[r] - stones[l] + 1 == n - 1)\n        minMoves = Math.min(minMoves, 2);\n      else\n        minMoves = Math.min(minMoves, n - alreadyStored);\n    }\n\n    return new int[] {\n        minMoves, Math.max(stones[n - 1] - stones[1] - n + 2, stones[n - 2] - stones[0] - n + 2)};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numMovesStonesII(self, stones: List[int]) -> List[int]:\n    n = len(stones)\n    minMoves = n\n\n    stones.sort()\n\n    l = 0\n    for r, stone in enumerate(stones):\n      while stone - stones[l] + 1 > n:\n        l += 1\n      alreadyStored = r - l + 1\n      if alreadyStored == n - 1 and stone - stones[l] + 1 == n - 1:\n        minMoves = 2\n      else:\n        minMoves = min(minMoves, n - alreadyStored)\n\n    return [minMoves, max(stones[n - 1] - stones[1] - n + 2, stones[n - 2] - stones[0] - n + 2)]\n",
                "lang_text": "py"
            }
        }
    }
}