{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "429",
            "title": "N-ary Tree Level Order Traversal",
            "titleSlug": "n-ary-tree-level-order-traversal",
            "content": "<p>Given an n-ary tree, return the <em>level order</em> traversal of its nodes&#39; values.</p>\n\n<p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [[1],[3,2,4],[5,6]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The height of the n-ary tree is less than or equal to <code>1000</code></li>\n\t<li>The total number of nodes is between <code>[0, 10<sup>4</sup>]</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3559,
            "dislikes": 135,
            "similarQuestions": "[{\"title\": \"Binary Tree Level Order Traversal\", \"titleSlug\": \"binary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Preorder Traversal\", \"titleSlug\": \"n-ary-tree-preorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Postorder Traversal\", \"titleSlug\": \"n-ary-tree-postorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"The Time When the Network Becomes Idle\", \"titleSlug\": \"the-time-when-the-network-becomes-idle\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"294.6K\", \"totalSubmission\": \"416.4K\", \"totalAcceptedRaw\": 294552, \"totalSubmissionRaw\": 416385, \"acRate\": \"70.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an n-ary tree, perform a level order traversal of its nodes' values and return the result as a list of lists, where each inner list represents a level in the tree.",
                "constraints": [
                    "The height of the n-ary tree is less than or equal to 1000",
                    "The total number of nodes is between 0 and 10,000 (inclusive)"
                ],
                "testcases": [
                    {
                        "input": "[1,null,3,2,4,null,5,6]",
                        "output": "[[1],[3,2,4],[5,6]]",
                        "explanation": "The tree's root is 1.  The second level consists of children 3, 2, and 4.  The third level consists of children 5 and 6."
                    },
                    {
                        "input": "[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                        "output": "[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]",
                        "explanation": "The tree's root is 1. Its children are 2, 3, 4, and 5. Their children are 6, 7, 8, 9 and 10 for 2,3,4,5 respectively. Finally, the children of 6,7,8,9,10 are 11,12,13 and 14 respectively"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "binary-tree-level-order-traversal",
                "title": "Binary Tree Level Order Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "n-ary-tree-preorder-traversal",
                "title": "N-ary Tree Preorder Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "n-ary-tree-postorder-traversal",
                "title": "N-ary Tree Postorder Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "the-time-when-the-network-becomes-idle",
                "title": "The Time When the Network Becomes Idle",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> levelOrder(Node* root) {\n    if (root == nullptr)\n      return {};\n\n    vector<vector<int>> ans;\n    queue<Node*> q{{root}};\n\n    while (!q.empty()) {\n      vector<int> currLevel;\n      for (int sz = q.size(); sz > 0; --sz) {\n        Node* node = q.front();\n        q.pop();\n        currLevel.push_back(node->val);\n        for (Node* child : node->children)\n          q.push(child);\n      }\n      ans.push_back(currLevel);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> levelOrder(Node root) {\n    if (root == null)\n      return new ArrayList<>();\n\n    List<List<Integer>> ans = new ArrayList<>();\n    Queue<Node> q = new ArrayDeque<>(Arrays.asList(root));\n\n    while (!q.isEmpty()) {\n      List<Integer> currLevel = new ArrayList<>();\n      for (int sz = q.size(); sz > 0; --sz) {\n        Node node = q.poll();\n        currLevel.add(node.val);\n        for (Node child : node.children)\n          q.offer(child);\n      }\n      ans.add(currLevel);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}