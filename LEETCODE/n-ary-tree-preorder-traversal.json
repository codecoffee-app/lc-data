{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "589",
            "title": "N-ary Tree Preorder Traversal",
            "titleSlug": "n-ary-tree-preorder-traversal",
            "content": "<p>Given the <code>root</code> of an n-ary tree, return <em>the preorder traversal of its nodes&#39; values</em>.</p>\n\n<p>Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [1,3,5,6,2,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [1,2,3,6,7,11,14,4,8,12,5,9,13,10]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The height of the n-ary tree is less than or equal to <code>1000</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3076,
            "dislikes": 199,
            "similarQuestions": "[{\"title\": \"Binary Tree Preorder Traversal\", \"titleSlug\": \"binary-tree-preorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Level Order Traversal\", \"titleSlug\": \"n-ary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Postorder Traversal\", \"titleSlug\": \"n-ary-tree-postorder-traversal\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"414K\", \"totalSubmission\": \"549.9K\", \"totalAcceptedRaw\": 414035, \"totalSubmissionRaw\": 549882, \"acRate\": \"75.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of an n-ary tree, return the preorder traversal of its nodes' values. N-ary tree input is serialized in level order, with each group of children separated by a null value.",
                "constraints": [
                    "The number of nodes in the tree is in the range [0, 10<sup>4</sup>].",
                    "0 <= Node.val <= 10<sup>4</sup>",
                    "The height of the n-ary tree is less than or equal to 1000."
                ],
                "testcases": [
                    {
                        "input": "[1,null,3,2,4,null,5,6]",
                        "output": "[1,3,5,6,2,4]",
                        "explanation": "The preorder traversal of the n-ary tree with root 1 is [1, 3, 5, 6, 2, 4]."
                    },
                    {
                        "input": "[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                        "output": "[1,2,3,6,7,11,14,4,8,12,5,9,13,10]",
                        "explanation": "The preorder traversal of the n-ary tree with root 1 is [1, 2, 3, 6, 7, 11, 14, 4, 8, 12, 5, 9, 13, 10]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "binary-tree-preorder-traversal",
                "title": "Binary Tree Preorder Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "n-ary-tree-level-order-traversal",
                "title": "N-ary Tree Level Order Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "n-ary-tree-postorder-traversal",
                "title": "N-ary Tree Postorder Traversal",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> preorder(Node* root) {\n    if (root == nullptr)\n      return {};\n\n    vector<int> ans;\n    stack<Node*> stack{{root}};\n\n    while (!stack.empty()) {\n      root = stack.top(), stack.pop();\n      ans.push_back(root->val);\n      for (auto it = root->children.rbegin(); it != root->children.rend(); ++it)\n        stack.push(*it);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> preorder(Node root) {\n    if (root == null)\n      return new ArrayList<>();\n\n    List<Integer> ans = new ArrayList<>();\n    Deque<Node> stack = new ArrayDeque<>();\n    stack.push(root);\n\n    while (!stack.isEmpty()) {\n      root = stack.pop();\n      ans.add(root.val);\n      for (int i = root.children.size() - 1; i >= 0; --i)\n        stack.push(root.children.get(i));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}