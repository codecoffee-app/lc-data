{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "51",
            "title": "N-Queens",
            "titleSlug": "n-queens",
            "content": "<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>\n\n<p>Given an integer <code>n</code>, return <em>all distinct solutions to the <strong>n-queens puzzle</strong></em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>Each solution contains a distinct board configuration of the n-queens&#39; placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space, respectively.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" style=\"width: 600px; height: 268px;\" />\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> [[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]\n<strong>Explanation:</strong> There exist two distinct solutions to the 4-queens puzzle as shown above\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [[&quot;Q&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 11751,
            "dislikes": 259,
            "similarQuestions": "[{\"title\": \"N-Queens II\", \"titleSlug\": \"n-queens-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Grid Illumination\", \"titleSlug\": \"grid-illumination\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"649.9K\", \"totalSubmission\": \"969.4K\", \"totalAcceptedRaw\": 649917, \"totalSubmissionRaw\": 969361, \"acRate\": \"67.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "The n-queens puzzle involves placing n queens on an n x n chessboard such that no two queens attack each other. The task is to find all distinct solutions to this puzzle. Each solution should represent a distinct board configuration where 'Q' indicates a queen and '.' indicates an empty space.",
                "constraints": [
                    "1 <= n <= 9"
                ],
                "testcases": [
                    {
                        "input": "n = 4",
                        "output": "[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]",
                        "explanation": "There exist two distinct solutions to the 4-queens puzzle."
                    },
                    {
                        "input": "n = 1",
                        "output": "[[\"Q\"]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "n-queens-ii",
                "title": "N-Queens II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "grid-illumination",
                "title": "Grid Illumination",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<string>> solveNQueens(int n) {\n    vector<vector<string>> ans;\n    dfs(n, 0, vector<bool>(n), vector<bool>(2 * n - 1), vector<bool>(2 * n - 1),\n        vector<string>(n, string(n, '.')), ans);\n    return ans;\n  }\n\n private:\n  void dfs(int n, int i, vector<bool>&& cols, vector<bool>&& diag1,\n           vector<bool>&& diag2, vector<string>&& board,\n           vector<vector<string>>& ans) {\n    if (i == n) {\n      ans.push_back(board);\n      return;\n    }\n\n    for (int j = 0; j < n; ++j) {\n      if (cols[j] || diag1[i + j] || diag2[j - i + n - 1])\n        continue;\n      board[i][j] = 'Q';\n      cols[j] = diag1[i + j] = diag2[j - i + n - 1] = true;\n      dfs(n, i + 1, move(cols), move(diag1), move(diag2), move(board), ans);\n      cols[j] = diag1[i + j] = diag2[j - i + n - 1] = false;\n      board[i][j] = '.';\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<String>> solveNQueens(int n) {\n    List<List<String>> ans = new ArrayList<>();\n    char[][] board = new char[n][n];\n\n    for (int i = 0; i < n; ++i)\n      Arrays.fill(board[i], '.');\n\n    dfs(n, 0, new boolean[n], new boolean[2 * n - 1], new boolean[2 * n - 1], board, ans);\n    return ans;\n  }\n\n  private void dfs(int n, int i, boolean[] cols, boolean[] diag1, boolean[] diag2, char[][] board,\n                   List<List<String>> ans) {\n    if (i == n) {\n      ans.add(construct(board));\n      return;\n    }\n\n    for (int j = 0; j < cols.length; ++j) {\n      if (cols[j] || diag1[i + j] || diag2[j - i + n - 1])\n        continue;\n      board[i][j] = 'Q';\n      cols[j] = diag1[i + j] = diag2[j - i + n - 1] = true;\n      dfs(n, i + 1, cols, diag1, diag2, board, ans);\n      cols[j] = diag1[i + j] = diag2[j - i + n - 1] = false;\n      board[i][j] = '.';\n    }\n  }\n\n  private List<String> construct(char[][] board) {\n    List<String> listBoard = new ArrayList<>();\n    for (int i = 0; i < board.length; ++i)\n      listBoard.add(String.valueOf(board[i]));\n    return listBoard;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def solveNQueens(self, n: int) -> List[List[str]]:\n    ans = []\n    cols = [False] * n\n    diag1 = [False] * (2 * n - 1)\n    diag2 = [False] * (2 * n - 1)\n\n    def dfs(i: int, board: List[int]) -> None:\n      if i == n:\n        ans.append(board)\n        return\n\n      for j in range(n):\n        if cols[j] or diag1[i + j] or diag2[j - i + n - 1]:\n          continue\n        cols[j] = diag1[i + j] = diag2[j - i + n - 1] = True\n        dfs(i + 1, board + ['.' * j + 'Q' + '.' * (n - j - 1)])\n        cols[j] = diag1[i + j] = diag2[j - i + n - 1] = False\n\n    dfs(0, [])\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}