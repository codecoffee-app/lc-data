{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2683",
            "title": "Neighboring Bitwise XOR",
            "titleSlug": "neighboring-bitwise-xor",
            "content": "<p>A <strong>0-indexed</strong> array <code>derived</code> with length <code>n</code> is derived by computing the <strong>bitwise XOR</strong>&nbsp;(&oplus;) of adjacent values in a <strong>binary array</strong> <code>original</code> of length <code>n</code>.</p>\n\n<p>Specifically, for each index <code>i</code> in the range <code>[0, n - 1]</code>:</p>\n\n<ul>\n\t<li>If <code>i = n - 1</code>, then <code>derived[i] = original[i] &oplus; original[0]</code>.</li>\n\t<li>Otherwise, <code>derived[i] = original[i] &oplus; original[i + 1]</code>.</li>\n</ul>\n\n<p>Given an array <code>derived</code>, your task is to determine whether there exists a <strong>valid binary array</strong> <code>original</code> that could have formed <code>derived</code>.</p>\n\n<p>Return <em><strong>true</strong> if such an array exists or <strong>false</strong> otherwise.</em></p>\n\n<ul>\n\t<li>A binary array is an array containing only <strong>0&#39;s</strong> and <strong>1&#39;s</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> derived = [1,1,0]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> A valid original array that gives derived is [0,1,0].\nderived[0] = original[0] &oplus; original[1] = 0 &oplus; 1 = 1 \nderived[1] = original[1] &oplus; original[2] = 1 &oplus; 0 = 1\nderived[2] = original[2] &oplus; original[0] = 0 &oplus; 0 = 0\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> derived = [1,1]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> A valid original array that gives derived is [0,1].\nderived[0] = original[0] &oplus; original[1] = 1\nderived[1] = original[1] &oplus; original[0] = 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> derived = [1,0]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no valid original array that gives derived.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == derived.length</code></li>\n\t<li><code>1 &lt;= n&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li>The values in <code>derived</code>&nbsp;are either <strong>0&#39;s</strong> or <strong>1&#39;s</strong></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 256,
            "dislikes": 8,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"19.9K\", \"totalSubmission\": \"32.6K\", \"totalAcceptedRaw\": 19866, \"totalSubmissionRaw\": 32581, \"acRate\": \"61.0%\"}",
            "hints": [
                "Understand that from the original element, we are using each element twice to construct the derived array",
                "The xor-sum of the derived array should be 0 since there is always a duplicate occurrence of each element."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `derived` of length `n`, created by XORing adjacent values in a binary array `original` of length `n`, determine if a valid `original` array could have produced `derived`. The XOR operation is defined as follows:\n\n*   `derived[i] = original[i] ^ original[i+1]` for `0 <= i < n-1`.\n*   `derived[n-1] = original[n-1] ^ original[0]`.\n\nReturn `true` if a valid `original` array exists, and `false` otherwise. A binary array contains only 0s and 1s.",
                "constraints": [
                    "n == derived.length",
                    "1 <= n <= 10^5",
                    "The values in derived are either 0's or 1's"
                ],
                "testcases": [
                    {
                        "input": "[1,1,0]",
                        "output": "true",
                        "explanation": "A valid original array is [0,1,0]. derived[0] = 0 ^ 1 = 1, derived[1] = 1 ^ 0 = 1, derived[2] = 0 ^ 0 = 0"
                    },
                    {
                        "input": "[1,1]",
                        "output": "true",
                        "explanation": "A valid original array is [0,1]. derived[0] = 0 ^ 1 = 1, derived[1] = 1 ^ 0 = 1"
                    },
                    {
                        "input": "[1,0]",
                        "output": "false",
                        "explanation": "No valid original array can produce the given derived array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Understand that from the original element, we are using each element twice to construct the derived array",
            "The xor-sum of the derived array should be 0 since there is always a duplicate occurrence of each element."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool doesValidArrayExist(vector<int>& derived) {\n    //      original = [O[0], O[1], ..., O[n - 1]]\n    //       derived = [O[0]^O[1], O[1]^O[2], ..., O[n - 1]^O[0]]\n    // XOR(derivedd) = 0\n    return accumulate(derived.begin(), derived.end(), 0, bit_xor<>()) == 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean doesValidArrayExist(int[] derived) {\n    //      original = [O[0], O[1], ..., O[n - 1]]\n    //       derived = [O[0]^O[1], O[1]^O[2], ..., O[n - 1]^O[0]]\n    // XOR(derivedd) = 0\n    return Arrays.stream(derived).reduce((a, b) -> a ^ b).getAsInt() == 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def doesValidArrayExist(self, derived: List[int]) -> bool:\n    return functools.reduce(operator.xor, derived) == 0\n",
                "lang_text": "py"
            }
        }
    }
}