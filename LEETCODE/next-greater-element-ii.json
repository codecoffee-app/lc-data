{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "503",
            "title": "Next Greater Element II",
            "titleSlug": "next-greater-element-ii",
            "content": "<p>Given a circular integer array <code>nums</code> (i.e., the next element of <code>nums[nums.length - 1]</code> is <code>nums[0]</code>), return <em>the <strong>next greater number</strong> for every element in</em> <code>nums</code>.</p>\n\n<p>The <strong>next greater number</strong> of a number <code>x</code> is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn&#39;t exist, return <code>-1</code> for this number.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1]\n<strong>Output:</strong> [2,-1,2]\nExplanation: The first 1&#39;s next greater number is 2; \nThe number 2 can&#39;t find next greater number. \nThe second 1&#39;s next greater number needs to search circularly, which is also 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,3]\n<strong>Output:</strong> [2,3,4,-1,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7587,
            "dislikes": 183,
            "similarQuestions": "[{\"title\": \"Next Greater Element I\", \"titleSlug\": \"next-greater-element-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Next Greater Element III\", \"titleSlug\": \"next-greater-element-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"357.2K\", \"totalSubmission\": \"562.1K\", \"totalAcceptedRaw\": 357214, \"totalSubmissionRaw\": 562083, \"acRate\": \"63.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a circular integer array `nums`, find the next greater element for each number in the array. The next greater element of a number `x` is the first element greater than `x` encountered while traversing the array in a circular fashion. If no such element exists, return -1.",
                "constraints": [
                    "1 <= nums.length <= 10^4",
                    "-10^9 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1,2,1]",
                        "output": "[2,-1,2]",
                        "explanation": "The first 1's next greater number is 2. The number 2 has no next greater number in the circular array. The second 1's next greater number, found by searching circularly, is 2."
                    },
                    {
                        "input": "[1,2,3,4,3]",
                        "output": "[2,3,4,-1,4]",
                        "explanation": "The next greater elements are found as follows: 1 -> 2, 2 -> 3, 3 -> 4, 4 -> -1 (no greater element), 3 -> 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "next-greater-element-i",
                "title": "Next Greater Element I",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "next-greater-element-iii",
                "title": "Next Greater Element III",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> nextGreaterElements(vector<int>& nums) {\n    const int n = nums.size();\n    vector<int> ans(n, -1);\n    stack<int> stack;  // decreasing stack storing indices\n\n    for (int i = 0; i < n * 2; ++i) {\n      const int num = nums[i % n];\n      while (!stack.empty() && nums[stack.top()] < num)\n        ans[stack.top()] = num, stack.pop();\n      if (i < n)\n        stack.push(i);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] nextGreaterElements(int[] nums) {\n    final int n = nums.length;\n    int[] ans = new int[n];\n    Arrays.fill(ans, -1);\n    Deque<Integer> stack = new ArrayDeque<>(); // decreasing stack storing indices\n\n    for (int i = 0; i < n * 2; ++i) {\n      final int num = nums[i % n];\n      while (!stack.isEmpty() && nums[stack.peek()] < num)\n        ans[stack.pop()] = num;\n      if (i < n)\n        stack.push(i);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def nextGreaterElements(self, nums: List[int]) -> List[int]:\n    n = len(nums)\n    ans = [-1] * n\n    stack = []  # decreasing stack storing indices\n\n    for i in range(n * 2):\n      num = nums[i % n]\n      while stack and nums[stack[-1]] < num:\n        ans[stack.pop()] = num\n      if i < n:\n        stack.append(i)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}