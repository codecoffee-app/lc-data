{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "556",
            "title": "Next Greater Element III",
            "titleSlug": "next-greater-element-iii",
            "content": "<p>Given a positive integer <code>n</code>, find <em>the smallest integer which has exactly the same digits existing in the integer</em> <code>n</code> <em>and is greater in value than</em> <code>n</code>. If no such positive integer exists, return <code>-1</code>.</p>\n\n<p><strong>Note</strong> that the returned integer should fit in <strong>32-bit integer</strong>, if there is a valid answer but it does not fit in <strong>32-bit integer</strong>, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 12\n<strong>Output:</strong> 21\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 21\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3530,
            "dislikes": 438,
            "similarQuestions": "[{\"title\": \"Next Greater Element I\", \"titleSlug\": \"next-greater-element-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Next Greater Element II\", \"titleSlug\": \"next-greater-element-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Next Palindrome Using Same Digits\", \"titleSlug\": \"next-palindrome-using-same-digits\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"141.4K\", \"totalSubmission\": \"416.7K\", \"totalAcceptedRaw\": 141365, \"totalSubmissionRaw\": 416660, \"acRate\": \"33.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a positive 32-bit integer `n`, find the smallest integer that is greater than `n` and contains the exact same digits as `n`. If no such integer exists or if the result exceeds the 32-bit integer limit, return -1.",
                "constraints": [
                    "1 <= n <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "12",
                        "output": "21",
                        "explanation": null
                    },
                    {
                        "input": "21",
                        "output": "-1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "next-greater-element-i",
                "title": "Next Greater Element I",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "next-greater-element-ii",
                "title": "Next Greater Element II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "next-palindrome-using-same-digits",
                "title": "Next Palindrome Using Same Digits",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int nextGreaterElement(int n) {\n    const string& s = nextPermutation(to_string(n));\n    const long ans = stol(s);\n    return ans > INT_MAX || ans <= n ? -1 : ans;\n  }\n\n private:\n  // Similar to 31. Next Permutation\n  string nextPermutation(string s) {\n    const int n = s.length();\n\n    int i;\n    for (i = n - 2; i >= 0; --i)\n      if (s[i] < s[i + 1])\n        break;\n\n    if (i >= 0) {\n      for (int j = n - 1; j > i; --j)\n        if (s[j] > s[i]) {\n          swap(s[i], s[j]);\n          break;\n        }\n    }\n\n    reverse(s, i + 1, n - 1);\n    return s;\n  }\n\n  void reverse(string& s, int l, int r) {\n    while (l < r)\n      swap(s[l++], s[r--]);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int nextGreaterElement(int n) {\n    final String s = nextPermutation(String.valueOf(n).toCharArray());\n    final long ans = Long.parseLong(s);\n    return ans > Integer.MAX_VALUE || ans <= (long) n ? -1 : (int) ans;\n  }\n\n  // Similar to 31. Next Permutation\n  private String nextPermutation(char[] s) {\n    final int n = s.length;\n\n    int i;\n    for (i = n - 2; i >= 0; --i)\n      if (s[i] < s[i + 1])\n        break;\n\n    if (i >= 0) {\n      for (int j = n - 1; j > i; --j)\n        if (s[j] > s[i]) {\n          swap(s, i, j);\n          break;\n        }\n    }\n\n    reverse(s, i + 1, n - 1);\n    return new String(s);\n  }\n\n  private void reverse(char[] s, int l, int r) {\n    while (l < r)\n      swap(s, l++, r--);\n  }\n\n  private void swap(char[] s, int i, int j) {\n    final char temp = s[i];\n    s[i] = s[j];\n    s[j] = temp;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def nextGreaterElement(self, n: int) -> int:\n    def nextPermutation(s: List[chr]) -> str:\n      i = len(s) - 2\n      while i >= 0:\n        if s[i] < s[i + 1]:\n          break\n        i -= 1\n\n      if i >= 0:\n        for j in range(len(s) - 1, i, -1):\n          if s[j] > s[i]:\n            break\n        s[i], s[j] = s[j], s[i]\n\n      reverse(s, i + 1, len(s) - 1)\n      return ''.join(s)\n\n    def reverse(s: List[chr], l: int, r: int):\n      while l < r:\n        s[l], s[r] = s[r], s[l]\n        l += 1\n        r -= 1\n\n    s = nextPermutation(list(str(n)))\n    ans = int(s)\n    return -1 if ans > 2**31 - 1 or ans <= n else ans\n",
                "lang_text": "py"
            }
        }
    }
}