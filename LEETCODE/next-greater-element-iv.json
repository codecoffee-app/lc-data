{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2454",
            "title": "Next Greater Element IV",
            "titleSlug": "next-greater-element-iv",
            "content": "<p>You are given a <strong>0-indexed</strong> array of non-negative integers <code>nums</code>. For each integer in <code>nums</code>, you must find its respective <strong>second greater</strong> integer.</p>\n\n<p>The <strong>second greater</strong> integer of <code>nums[i]</code> is <code>nums[j]</code> such that:</p>\n\n<ul>\n\t<li><code>j &gt; i</code></li>\n\t<li><code>nums[j] &gt; nums[i]</code></li>\n\t<li>There exists <strong>exactly one</strong> index <code>k</code> such that <code>nums[k] &gt; nums[i]</code> and <code>i &lt; k &lt; j</code>.</li>\n</ul>\n\n<p>If there is no such <code>nums[j]</code>, the second greater integer is considered to be <code>-1</code>.</p>\n\n<ul>\n\t<li>For example, in the array <code>[1, 2, 4, 3]</code>, the second greater integer of <code>1</code> is <code>4</code>, <code>2</code> is <code>3</code>,&nbsp;and that of <code>3</code> and <code>4</code> is <code>-1</code>.</li>\n</ul>\n\n<p>Return<em> an integer array </em><code>answer</code><em>, where </em><code>answer[i]</code><em> is the second greater integer of </em><code>nums[i]</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,0,9,6]\n<strong>Output:</strong> [9,6,6,-1,-1]\n<strong>Explanation:</strong>\n0th index: 4 is the first integer greater than 2, and 9 is the second integer greater than 2, to the right of 2.\n1st index: 9 is the first, and 6 is the second integer greater than 4, to the right of 4.\n2nd index: 9 is the first, and 6 is the second integer greater than 0, to the right of 0.\n3rd index: There is no integer greater than 9 to its right, so the second greater integer is considered to be -1.\n4th index: There is no integer greater than 6 to its right, so the second greater integer is considered to be -1.\nThus, we return [9,6,6,-1,-1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3]\n<strong>Output:</strong> [-1,-1]\n<strong>Explanation:</strong>\nWe return [-1,-1] since neither integer has any integer greater than it.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 622,
            "dislikes": 7,
            "similarQuestions": "[{\"title\": \"Next Greater Element I\", \"titleSlug\": \"next-greater-element-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Replace Elements with Greatest Element on Right Side\", \"titleSlug\": \"replace-elements-with-greatest-element-on-right-side\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Apply Operations to Maximize Score\", \"titleSlug\": \"apply-operations-to-maximize-score\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.8K\", \"totalSubmission\": \"22.9K\", \"totalAcceptedRaw\": 8769, \"totalSubmissionRaw\": 22863, \"acRate\": \"38.4%\"}",
            "hints": [
                "Move forward in nums and store the value in a non-increasing stack for the first greater value.",
                "Move the value in the stack to an ordered data structure for the second greater value.",
                "Move value from the ordered data structure for the answer."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` of non-negative integers, find the second greater integer for each element. The second greater integer of `nums[i]` is `nums[j]` such that `j > i`, `nums[j] > nums[i]`, and there exists exactly one index `k` where `nums[k] > nums[i]` and `i < k < j`. If no such `nums[j]` exists, the second greater integer is -1. Return an integer array `answer` where `answer[i]` is the second greater integer of `nums[i]`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "0 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[2,4,0,9,6]",
                        "output": "[9,6,6,-1,-1]",
                        "explanation": "For index 0 (value 2), 4 is the first greater and 9 is the second. For index 1 (value 4), 9 is the first greater and 6 is the second. For index 2 (value 0), 9 is the first greater and 6 is the second. For index 3 (value 9) and 4 (value 6), there are no greater integers to the right, so the result is -1."
                    },
                    {
                        "input": "[3,3]",
                        "output": "[-1,-1]",
                        "explanation": "Neither integer has any integer greater than it to its right."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "next-greater-element-i",
                "title": "Next Greater Element I",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "replace-elements-with-greatest-element-on-right-side",
                "title": "Replace Elements with Greatest Element on Right Side",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "apply-operations-to-maximize-score",
                "title": "Apply Operations to Maximize Score",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Move forward in nums and store the value in a non-increasing stack for the first greater value.",
            "Move the value in the stack to an ordered data structure for the second greater value.",
            "Move value from the ordered data structure for the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> secondGreaterElement(vector<int>& nums) {\n    vector<int> ans(nums.size(), -1);\n    // decreasing stack that stores indices that met the first greater num\n    stack<int> prevStack;\n    // decreasing stack that stores indices\n    stack<int> currStack;\n\n    for (int i = 0; i < nums.size(); ++i) {\n      // Indices in `prevStack` meet the second greater num.\n      while (!prevStack.empty() && nums[prevStack.top()] < nums[i])\n        ans[prevStack.top()] = nums[i], prevStack.pop();\n      // Push indices that meet the first greater num from `currStack` to\n      // `prevStack`. We need a temp array to make indices in `prevStack`\n      // increasing.\n      stack<int> decreasingIndices;\n      while (!currStack.empty() && nums[currStack.top()] < nums[i])\n        decreasingIndices.push(currStack.top()), currStack.pop();\n      while (!decreasingIndices.empty())\n        prevStack.push(decreasingIndices.top()), decreasingIndices.pop();\n      currStack.push(i);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] secondGreaterElement(int[] nums) {\n    int[] ans = new int[nums.length];\n    Arrays.fill(ans, -1);\n    // decreasing stack that stores indices that met the first greater num\n    Deque<Integer> prevStack = new ArrayDeque<>();\n    // decreasing stack that stores indices\n    Deque<Integer> currStack = new ArrayDeque<>();\n\n    for (int i = 0; i < nums.length; ++i) {\n      // Indices in prevStack meet the second greater num.\n      while (!prevStack.isEmpty() && nums[prevStack.peek()] < nums[i])\n        ans[prevStack.poll()] = nums[i];\n      // Push indices that meet the first greater num from `currStack` to\n      // `prevStack`. We need a temp array to make indices in `prevStack`\n      // increasing.\n      Deque<Integer> decreasingIndices = new ArrayDeque<>();\n      while (!currStack.isEmpty() && nums[currStack.peek()] < nums[i])\n        decreasingIndices.push(currStack.poll());\n      while (!decreasingIndices.isEmpty())\n        prevStack.push(decreasingIndices.poll());\n      currStack.push(i);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def secondGreaterElement(self, nums: List[int]) -> List[int]:\n    ans = [-1] * len(nums)\n    # decreasing stack that stores indices that met the first greater num.\n    prevStack = []\n    # decreasing stack that stores indices.\n    currStack = []\n\n    for i, num in enumerate(nums):\n      # Indices in prevStack meet the second greater num.\n      while prevStack and nums[prevStack[-1]] < num:\n        ans[prevStack.pop()] = num\n      # Push indices that meet the first greater num from `currStack` to\n      # `prevStack`. We need a temp array to make indices in `prevStack`\n      # increasing.\n      decreasingIndices = []\n      while currStack and nums[currStack[-1]] < num:\n        decreasingIndices.append(currStack.pop())\n      while decreasingIndices:\n        prevStack.append(decreasingIndices.pop())\n      currStack.append(i)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}