{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1019",
            "title": "Next Greater Node In Linked List",
            "titleSlug": "next-greater-node-in-linked-list",
            "content": "<p>You are given the <code>head</code> of a linked list with <code>n</code> nodes.</p>\n\n<p>For each node in the list, find the value of the <strong>next greater node</strong>. That is, for each node, find the value of the first node that is next to it and has a <strong>strictly larger</strong> value than it.</p>\n\n<p>Return an integer array <code>answer</code> where <code>answer[i]</code> is the value of the next greater node of the <code>i<sup>th</sup></code> node (<strong>1-indexed</strong>). If the <code>i<sup>th</sup></code> node does not have a next greater node, set <code>answer[i] = 0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/05/linkedlistnext1.jpg\" style=\"width: 304px; height: 133px;\" />\n<pre>\n<strong>Input:</strong> head = [2,1,5]\n<strong>Output:</strong> [5,5,0]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/05/linkedlistnext2.jpg\" style=\"width: 500px; height: 113px;\" />\n<pre>\n<strong>Input:</strong> head = [2,7,4,3,5]\n<strong>Output:</strong> [7,0,5,5,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>n</code>.</li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3179,
            "dislikes": 114,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"144.1K\", \"totalSubmission\": \"238.9K\", \"totalAcceptedRaw\": 144078, \"totalSubmissionRaw\": 238923, \"acRate\": \"60.3%\"}",
            "hints": [
                "We can use a stack that stores nodes in monotone decreasing order of value.  When we see a node_j with a larger value, every node_i in the stack has next_larger(node_i) = node_j ."
            ],
            "rephrased": {
                "body": "Given the head of a linked list with n nodes, find the next greater node for each node. The next greater node of a node is the first node that appears later in the list and has a strictly larger value.  Return an integer array 'answer' where answer[i] is the value of the next greater node of the i-th node (1-indexed). If a node does not have a next greater node, set answer[i] = 0.",
                "constraints": [
                    "The number of nodes in the list is n.",
                    "1 <= n <= 10^4",
                    "1 <= Node.val <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[2,1,5]",
                        "output": "[5,5,0]",
                        "explanation": "For the first node (2), the next greater node is 5. For the second node (1), the next greater node is also 5. The third node (5) has no next greater node, so the value is 0."
                    },
                    {
                        "input": "[2,7,4,3,5]",
                        "output": "[7,0,5,5,0]",
                        "explanation": "For the first node (2), the next greater node is 7. The next node(7) does not have any greater element after that so it has next greater node as 0. For the third node (4), the next greater node is 5. For the fourth node(3), the next greater node is 5. The fifth node (5) has no next greater node, so the value is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "We can use a stack that stores nodes in monotone decreasing order of value.  When we see a node_j with a larger value, every node_i in the stack has next_larger(node_i) = node_j ."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> nextLargerNodes(ListNode* head) {\n    vector<int> ans;\n    stack<int> stack;\n\n    for (; head; head = head->next) {\n      while (!stack.empty() && head->val > ans[stack.top()]) {\n        int index = stack.top();\n        stack.pop();\n        ans[index] = head->val;\n      }\n      stack.push(ans.size());\n      ans.push_back(head->val);\n    }\n\n    for (; !stack.empty(); stack.pop())\n      ans[stack.top()] = 0;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] nextLargerNodes(ListNode head) {\n    List<Integer> ans = new ArrayList<>();\n    Deque<Integer> stack = new ArrayDeque<>();\n\n    for (; head != null; head = head.next) {\n      while (!stack.isEmpty() && head.val > ans.get(stack.peek())) {\n        int index = stack.pop();\n        ans.set(index, head.val);\n      }\n      stack.push(ans.size());\n      ans.add(head.val);\n    }\n\n    while (!stack.isEmpty())\n      ans.set(stack.pop(), 0);\n\n    return ans.stream().mapToInt(Integer::intValue).toArray();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def nextLargerNodes(self, head: ListNode) -> List[int]:\n    ans = []\n    stack = []\n\n    while head:\n      while stack and head.val > ans[stack[-1]]:\n        index = stack.pop()\n        ans[index] = head.val\n      stack.append(len(ans))\n      ans.append(head.val)\n      head = head.next\n\n    for i in stack:\n      ans[i] = 0\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}