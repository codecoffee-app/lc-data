{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2048",
            "title": "Next Greater Numerically Balanced Number",
            "titleSlug": "next-greater-numerically-balanced-number",
            "content": "<p>An integer <code>x</code> is <strong>numerically balanced</strong> if for every digit <code>d</code> in the number <code>x</code>, there are <strong>exactly</strong> <code>d</code> occurrences of that digit in <code>x</code>.</p>\n\n<p>Given an integer <code>n</code>, return <em>the <strong>smallest numerically balanced</strong> number <strong>strictly greater</strong> than </em><code>n</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> \n22 is numerically balanced since:\n- The digit 2 occurs 2 times. \nIt is also the smallest numerically balanced number strictly greater than 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1000\n<strong>Output:</strong> 1333\n<strong>Explanation:</strong> \n1333 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times. \nIt is also the smallest numerically balanced number strictly greater than 1000.\nNote that 1022 cannot be the answer because 0 appeared more than 0 times.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3000\n<strong>Output:</strong> 3133\n<strong>Explanation:</strong> \n3133 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times.\nIt is also the smallest numerically balanced number strictly greater than 3000.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 183,
            "dislikes": 272,
            "similarQuestions": "[{\"title\": \"Find the Width of Columns of a Grid\", \"titleSlug\": \"find-the-width-of-columns-of-a-grid\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.5K\", \"totalSubmission\": \"26.1K\", \"totalAcceptedRaw\": 12489, \"totalSubmissionRaw\": 26145, \"acRate\": \"47.8%\"}",
            "hints": [
                "How far away can the next greater numerically balanced number be from n?",
                "With the given constraints, what is the largest numerically balanced number?"
            ],
            "rephrased": {
                "body": "An integer `x` is **numerically balanced** if for every digit `d` in the number `x`, there are **exactly** `d` occurrences of that digit in `x`. Given an integer `n`, return the **smallest numerically balanced** number **strictly greater** than `n`.",
                "constraints": [
                    "0 <= n <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "22",
                        "explanation": "The number 22 is numerically balanced because the digit 2 appears 2 times. It is the smallest numerically balanced number greater than 1."
                    },
                    {
                        "input": "1000",
                        "output": "1333",
                        "explanation": "The number 1333 is numerically balanced because the digit 1 appears 1 time and the digit 3 appears 3 times. It is the smallest numerically balanced number greater than 1000. Note that 1022 is not a valid solution because the digit 0 appears more than 0 times."
                    },
                    {
                        "input": "3000",
                        "output": "3133",
                        "explanation": "The number 3133 is numerically balanced because the digit 1 appears 1 time and the digit 3 appears 3 times. It is the smallest numerically balanced number greater than 3000."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "find-the-width-of-columns-of-a-grid",
                "title": "Find the Width of Columns of a Grid",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How far away can the next greater numerically balanced number be from n?",
            "With the given constraints, what is the largest numerically balanced number?"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int nextBeautifulNumber(int n) {\n    while (!isBalance(++n))\n      ;\n    return n;\n  }\n\n private:\n  bool isBalance(int num) {\n    vector<int> count(10);\n    while (num) {\n      if (num % 10 == 0)\n        return false;\n      ++count[num % 10];\n      num /= 10;\n    }\n    for (int i = 1; i < 10; ++i)\n      if (count[i] && count[i] != i)\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int nextBeautifulNumber(int n) {\n    while (!isBalance(++n))\n      ;\n    return n;\n  }\n\n  private boolean isBalance(int num) {\n    int[] count = new int[10];\n    while (num > 0) {\n      if (num % 10 == 0)\n        return false;\n      ++count[num % 10];\n      num /= 10;\n    }\n    for (int i = 1; i < 10; ++i)\n      if (count[i] > 0 && count[i] != i)\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def nextBeautifulNumber(self, n: int) -> int:\n    def isBalance(num: int) -> bool:\n      count = [0] * 10\n      while num:\n        if num % 10 == 0:\n          return False\n        count[num % 10] += 1\n        num //= 10\n      return all(c == i for i, c in enumerate(count) if c)\n\n    n += 1\n    while not isBalance(n):\n      n += 1\n    return n\n",
                "lang_text": "py"
            }
        }
    }
}