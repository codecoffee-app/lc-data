{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2374",
            "title": "Node With Highest Edge Score",
            "titleSlug": "node-with-highest-edge-score",
            "content": "<p>You are given a directed graph with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, where each node has <strong>exactly one</strong> outgoing edge.</p>\n\n<p>The graph is represented by a given <strong>0-indexed</strong> integer array <code>edges</code> of length <code>n</code>, where <code>edges[i]</code> indicates that there is a <strong>directed</strong> edge from node <code>i</code> to node <code>edges[i]</code>.</p>\n\n<p>The <strong>edge score</strong> of a node <code>i</code> is defined as the sum of the <strong>labels</strong> of all the nodes that have an edge pointing to <code>i</code>.</p>\n\n<p>Return <em>the node with the highest <strong>edge score</strong></em>. If multiple nodes have the same <strong>edge score</strong>, return the node with the <strong>smallest</strong> index.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/06/20/image-20220620195403-1.png\" style=\"width: 450px; height: 260px;\" />\n<pre>\n<strong>Input:</strong> edges = [1,0,0,0,0,7,7,5]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong>\n- The nodes 1, 2, 3 and 4 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 + 3 + 4 = 10.\n- The node 0 has an edge pointing to node 1. The edge score of node 1 is 0.\n- The node 7 has an edge pointing to node 5. The edge score of node 5 is 7.\n- The nodes 5 and 6 have an edge pointing to node 7. The edge score of node 7 is 5 + 6 = 11.\nNode 7 has the highest edge score so return 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/06/20/image-20220620200212-3.png\" style=\"width: 150px; height: 155px;\" />\n<pre>\n<strong>Input:</strong> edges = [2,0,0,2]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\n- The nodes 1 and 2 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 = 3.\n- The nodes 0 and 3 have an edge pointing to node 2. The edge score of node 2 is 0 + 3 = 3.\nNodes 0 and 2 both have an edge score of 3. Since node 0 has a smaller index, we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == edges.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges[i] &lt; n</code></li>\n\t<li><code>edges[i] != i</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 406,
            "dislikes": 36,
            "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sort Characters By Frequency\", \"titleSlug\": \"sort-characters-by-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sort Array by Increasing Frequency\", \"titleSlug\": \"sort-array-by-increasing-frequency\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"30.4K\", \"totalSubmission\": \"64.7K\", \"totalAcceptedRaw\": 30353, \"totalSubmissionRaw\": 64670, \"acRate\": \"46.9%\"}",
            "hints": [
                "Create an array arr where arr[i] is the edge score for node i.",
                "How does the edge score for node edges[i] change? It increases by i.",
                "The edge score may not fit within a standard 32-bit integer."
            ],
            "rephrased": {
                "body": "You are given a directed graph with `n` nodes labeled from `0` to `n - 1`. Each node has exactly one outgoing edge.  The graph is represented by a 0-indexed integer array `edges` of length `n`, where `edges[i]` indicates a directed edge from node `i` to node `edges[i]`.  The edge score of a node `i` is the sum of the labels of all nodes that have an edge pointing to `i`.  Return the node with the highest edge score. If multiple nodes have the same edge score, return the node with the smallest index.",
                "constraints": [
                    "n == edges.length",
                    "2 <= n <= 10^5",
                    "0 <= edges[i] < n",
                    "edges[i] != i"
                ],
                "testcases": [
                    {
                        "input": "[1,0,0,0,0,7,7,5]",
                        "output": "7",
                        "explanation": "The edge scores are as follows:\n- Node 0: 1 + 2 + 3 + 4 = 10\n- Node 1: 0\n- Node 5: 7\n- Node 7: 5 + 6 = 11\nNode 7 has the highest edge score."
                    },
                    {
                        "input": "[2,0,0,2]",
                        "output": "0",
                        "explanation": "The edge scores are as follows:\n- Node 0: 1 + 2 = 3\n- Node 2: 0 + 3 = 3\nNodes 0 and 2 both have an edge score of 3. Node 0 has the smaller index."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "two-sum",
                "title": "Two Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "sort-characters-by-frequency",
                "title": "Sort Characters By Frequency",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "sort-array-by-increasing-frequency",
                "title": "Sort Array by Increasing Frequency",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Create an array arr where arr[i] is the edge score for node i.",
            "How does the edge score for node edges[i] change? It increases by i.",
            "The edge score may not fit within a standard 32-bit integer."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int edgeScore(vector<int>& edges) {\n    vector<long long> scores(edges.size());\n    for (int i = 0; i < edges.size(); ++i)\n      scores[edges[i]] += i;\n    return max_element(scores.begin(), scores.end()) - scores.begin();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int edgeScore(int[] edges) {\n    int ans = 0;\n    long[] scores = new long[edges.length];\n\n    for (int i = 0; i < edges.length; ++i)\n      scores[edges[i]] += i;\n\n    for (int i = 1; i < scores.length; ++i)\n      if (scores[i] > scores[ans])\n        ans = i;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def edgeScore(self, edges: List[int]) -> int:\n    scores = [0] * len(edges)\n    for i, edge in enumerate(edges):\n      scores[edge] += i\n    return scores.index(max(scores))\n",
                "lang_text": "py"
            }
        }
    }
}