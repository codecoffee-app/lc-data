{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "600",
            "title": "Non-negative Integers without Consecutive Ones",
            "titleSlug": "non-negative-integers-without-consecutive-ones",
            "content": "<p>Given a positive integer <code>n</code>, return the number of the integers in the range <code>[0, n]</code> whose binary representations <strong>do not</strong> contain consecutive ones.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nHere are the non-negative integers &lt;= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1481,
            "dislikes": 129,
            "similarQuestions": "[{\"title\": \"House Robber\", \"titleSlug\": \"house-robber\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"House Robber II\", \"titleSlug\": \"house-robber-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ones and Zeroes\", \"titleSlug\": \"ones-and-zeroes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"37.6K\", \"totalSubmission\": \"95.1K\", \"totalAcceptedRaw\": 37583, \"totalSubmissionRaw\": 95123, \"acRate\": \"39.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a positive integer `n`, determine the count of integers within the inclusive range `[0, n]` whose binary representations do not contain consecutive ones.",
                "constraints": [
                    "1 <= n <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "5",
                        "explanation": "Consider the integers from 0 to 5 and their binary representations: 0 (0), 1 (1), 2 (10), 3 (11), 4 (100), 5 (101). The integer 3 (11) contains consecutive ones, while the other five integers do not. Therefore, the answer is 5."
                    },
                    {
                        "input": "1",
                        "output": "2",
                        "explanation": null
                    },
                    {
                        "input": "2",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "house-robber",
                "title": "House Robber",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "house-robber-ii",
                "title": "House Robber II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "ones-and-zeroes",
                "title": "Ones and Zeroes",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findIntegers(int num) {\n    string bits;\n    for (; num; num >>= 1)\n      bits += to_string(num & 1);\n\n    const int n = bits.length();\n    vector<int> zero(n, 1);\n    vector<int> one(n, 1);\n\n    for (int i = 1; i < n; ++i) {\n      zero[i] = zero[i - 1] + one[i - 1];\n      one[i] = zero[i - 1];\n    }\n\n    int ans = zero[n - 1] + one[n - 1];\n\n    for (int i = n - 2; i >= 0; --i) {\n      // Numbers greater than num and <= 2^n - 1 are invalid\n      if (bits[i] == '1' && bits[i + 1] == '1')\n        break;\n      if (bits[i] == '0' && bits[i + 1] == '0')\n        ans -= one[i];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findIntegers(int num) {\n    StringBuilder bits = new StringBuilder();\n    for (; num > 0; num >>= 1)\n      bits.append(num & 1);\n\n    final int n = bits.length();\n    int[] zero = new int[n];\n    int[] one = new int[n];\n\n    zero[0] = 1;\n    one[0] = 1;\n\n    for (int i = 1; i < n; ++i) {\n      zero[i] = zero[i - 1] + one[i - 1];\n      one[i] = zero[i - 1];\n    }\n\n    int ans = zero[n - 1] + one[n - 1];\n\n    for (int i = n - 2; i >= 0; --i) {\n      // Numbers greater than num and <= 2^n - 1 are invalid\n      if (bits.charAt(i) == '1' && bits.charAt(i + 1) == '1')\n        break;\n      if (bits.charAt(i) == '0' && bits.charAt(i + 1) == '0')\n        ans -= one[i];\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}