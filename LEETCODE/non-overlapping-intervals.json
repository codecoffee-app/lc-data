{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "435",
            "title": "Non-overlapping Intervals",
            "titleSlug": "non-overlapping-intervals",
            "content": "<p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, return <em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3],[3,4],[1,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> [1,3] can be removed and the rest of the intervals are non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[1,2],[1,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> You don&#39;t need to remove any of the intervals since they&#39;re already non-overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>-5 * 10<sup>4</sup> &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7753,
            "dislikes": 208,
            "similarQuestions": "[{\"title\": \"Minimum Number of Arrows to Burst Balloons\", \"titleSlug\": \"minimum-number-of-arrows-to-burst-balloons\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Determine if Two Events Have Conflict\", \"titleSlug\": \"determine-if-two-events-have-conflict\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"503.2K\", \"totalSubmission\": \"956K\", \"totalAcceptedRaw\": 503162, \"totalSubmissionRaw\": 955960, \"acRate\": \"52.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of intervals, determine the minimum number of intervals that must be removed so that the remaining intervals are non-overlapping.",
                "constraints": [
                    "1 <= intervals.length <= 10^5",
                    "intervals[i].length == 2",
                    "-5 * 10^4 <= start_i < end_i <= 5 * 10^4"
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[2,3],[3,4],[1,3]]",
                        "output": "1",
                        "explanation": "Removing [1,3] results in non-overlapping intervals: [[1,2],[2,3],[3,4]]."
                    },
                    {
                        "input": "[[1,2],[1,2],[1,2]]",
                        "output": "2",
                        "explanation": "Two [1,2] intervals need to be removed to achieve non-overlapping intervals, leaving one [1,2]."
                    },
                    {
                        "input": "[[1,2],[2,3]]",
                        "output": "0",
                        "explanation": "The intervals are already non-overlapping, so no removals are necessary."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-arrows-to-burst-balloons",
                "title": "Minimum Number of Arrows to Burst Balloons",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "determine-if-two-events-have-conflict",
                "title": "Determine if Two Events Have Conflict",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n    if (intervals.empty())\n      return 0;\n\n    sort(intervals.begin(), intervals.end(),\n         [](const auto& a, const auto& b) { return a[1] < b[1]; });\n\n    int ans = 0;\n    int currentEnd = intervals[0][1];\n\n    for (int i = 1; i < intervals.size(); ++i)\n      if (intervals[i][0] >= currentEnd)\n        currentEnd = intervals[i][1];\n      else\n        ++ans;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int eraseOverlapIntervals(int[][] intervals) {\n    if (intervals.length == 0)\n      return 0;\n\n    Arrays.sort(intervals, (a, b) -> a[1] - b[1]);\n\n    int ans = 0;\n    int currentEnd = intervals[0][1];\n\n    for (int i = 1; i < intervals.length; ++i)\n      if (intervals[i][0] >= currentEnd)\n        currentEnd = intervals[i][1];\n      else\n        ++ans;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n    ans = 0\n    currentEnd = -math.inf\n\n    for interval in sorted(intervals, key=lambda x: x[1]):\n      if interval[0] >= currentEnd:\n        currentEnd = interval[1]\n      else:\n        ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}