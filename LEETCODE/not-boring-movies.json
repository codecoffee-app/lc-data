{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "620",
            "title": "Not Boring Movies",
            "titleSlug": "not-boring-movies",
            "content": "<p>Table: <code>Cinema</code></p>\n\n<pre>\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| id             | int      |\n| movie          | varchar  |\n| description    | varchar  |\n| rating         | float    |\n+----------------+----------+\nid is the primary key (column with unique values) for this table.\nEach row contains information about the name of a movie, its genre, and its rating.\nrating is a 2 decimal places float in the range [0, 10]\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to report the movies with an odd-numbered ID and a description that is not <code>&quot;boring&quot;</code>.</p>\n\n<p>Return the result table ordered by <code>rating</code> <strong>in descending order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nCinema table:\n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 1  | War        | great 3D    | 8.9    |\n| 2  | Science    | fiction     | 8.5    |\n| 3  | irish      | boring      | 6.2    |\n| 4  | Ice song   | Fantacy     | 8.6    |\n| 5  | House card | Interesting | 9.1    |\n+----+------------+-------------+--------+\n<strong>Output:</strong> \n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 5  | House card | Interesting | 9.1    |\n| 1  | War        | great 3D    | 8.9    |\n+----+------------+-------------+--------+\n<strong>Explanation:</strong> \nWe have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer.\n</pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1000,
            "dislikes": 537,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Database",
                    "slug": "database"
                }
            ],
            "stats": "{\"totalAccepted\": \"357K\", \"totalSubmission\": \"489.7K\", \"totalAcceptedRaw\": 357019, \"totalSubmissionRaw\": 489701, \"acRate\": \"72.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a table named `Cinema` with columns `id` (INT, primary key), `movie` (VARCHAR), `description` (VARCHAR), and `rating` (FLOAT, 2 decimal places in the range [0, 10]), write a SQL query to find the movies that satisfy the following conditions:\n\n1.  The `id` is an odd number.\n2.  The `description` is not equal to 'boring'.\n\nReturn the result table with all columns sorted by `rating` in descending order.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "Cinema table:\n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 1  | War        | great 3D    | 8.9    |\n| 2  | Science    | fiction     | 8.5    |\n| 3  | irish      | boring      | 6.2    |\n| 4  | Ice song   | Fantacy     | 8.6    |\n| 5  | House card | Interesting | 9.1    |\n+----+------------+-------------+--------+",
                        "output": "+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 5  | House card | Interesting | 9.1    |\n| 1  | War        | great 3D    | 8.9    |\n+----+------------+-------------+--------+",
                        "explanation": "The movies with odd IDs are 1, 3, and 5. Movie with ID 3 has a 'boring' description, so it's excluded. Movies with IDs 1 and 5 satisfy the conditions. The results are then ordered by `rating` in descending order, placing 'House card' first, and then 'War'."
                    },
                    {
                        "input": null,
                        "output": null,
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Database",
                "slug": "database"
            }
        ],
        "solutions": {}
    }
}