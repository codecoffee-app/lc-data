{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "400",
            "title": "Nth Digit",
            "titleSlug": "nth-digit",
            "content": "<p>Given an integer <code>n</code>, return the <code>n<sup>th</sup></code> digit of the infinite integer sequence <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 11\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The 11<sup>th</sup> digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1020,
            "dislikes": 1987,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"91.6K\", \"totalSubmission\": \"265.9K\", \"totalAcceptedRaw\": 91556, \"totalSubmissionRaw\": 265860, \"acRate\": \"34.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given an integer `n`. Your task is to find the `n`th digit in the infinite sequence of integers: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...",
                "constraints": [
                    "1 <= n <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "3",
                        "explanation": null
                    },
                    {
                        "input": "11",
                        "output": "0",
                        "explanation": "The 11th digit in the sequence is '0', which is part of the number 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findNthDigit(int n) {\n    int digitSize = 1;\n    int startNum = 1;\n    long count = 9;\n\n    while (digitSize * count < n) {\n      n -= digitSize * count;\n      ++digitSize;\n      startNum *= 10;\n      count *= 10;\n    }\n\n    const int targetNum = startNum + (n - 1) / digitSize;\n    const int index = (n - 1) % digitSize;\n    return to_string(targetNum)[index] - '0';\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findNthDigit(int n) {\n    int digitSize = 1;\n    int startNum = 1;\n    long count = 9;\n\n    while (digitSize * count < n) {\n      n -= digitSize * count;\n      ++digitSize;\n      startNum *= 10;\n      count *= 10;\n    }\n\n    final int targetNum = startNum + (n - 1) / digitSize;\n    final int index = (n - 1) % digitSize;\n    return String.valueOf(targetNum).charAt(index) - '0';\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findNthDigit(self, n: int) -> int:\n    def getDigit(num: int, pos: int, digitSize: int):\n      if pos == 0:\n        return num % 10\n      for _ in range(digitSize - pos):\n        num //= 10\n      return num % 10\n\n    digitSize = 1\n    startNum = 1\n    count = 9\n\n    while digitSize * count < n:\n      n -= digitSize * count\n      digitSize += 1\n      startNum *= 10\n      count *= 10\n\n    targetNum = startNum + (n - 1) // digitSize\n    pos = n % digitSize\n\n    return getDigit(targetNum, pos, digitSize)\n",
                "lang_text": "py"
            }
        }
    }
}