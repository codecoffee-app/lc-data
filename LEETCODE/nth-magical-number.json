{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "878",
            "title": "Nth Magical Number",
            "titleSlug": "nth-magical-number",
            "content": "<p>A positive integer is <em>magical</em> if it is divisible by either <code>a</code> or <code>b</code>.</p>\n\n<p>Given the three integers <code>n</code>, <code>a</code>, and <code>b</code>, return the <code>n<sup>th</sup></code> magical number. Since the answer may be very large, <strong>return it modulo </strong><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, a = 2, b = 3\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, a = 2, b = 3\n<strong>Output:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n\t<li><code>2 &lt;= a, b &lt;= 4 * 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1244,
            "dislikes": 155,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"35.9K\", \"totalSubmission\": \"101.7K\", \"totalAcceptedRaw\": 35865, \"totalSubmissionRaw\": 101709, \"acRate\": \"35.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Find the nth magical number. A magical number is a positive integer divisible by either 'a' or 'b'. Given 'n', 'a', and 'b', return the nth magical number modulo 10^9 + 7.",
                "constraints": [
                    "1 <= n <= 10^9",
                    "2 <= a, b <= 4 * 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 1, a = 2, b = 3",
                        "output": "2",
                        "explanation": null
                    },
                    {
                        "input": "n = 4, a = 2, b = 3",
                        "output": "6",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int nthMagicalNumber(long n, long a, long b) {\n    constexpr int kMod = 1'000'000'007;\n    const long lcm = a * b / __gcd(a, b);\n    long l = min(a, b);\n    long r = min(a, b) * n;\n\n    while (l < r) {\n      const long m = (l + r) / 2;\n      if (m / a + m / b - m / lcm >= n)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int nthMagicalNumber(long n, long a, long b) {\n    final int kMod = 1_000_000_007;\n    final long lcm = a * b / gcd(a, b);\n    long l = Math.min(a, b);\n    long r = Math.min(a, b) * n;\n\n    while (l < r) {\n      final long m = (l + r) / 2;\n      if (m / a + m / b - m / lcm >= n)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return (int) (l % kMod);\n  }\n\n  private long gcd(long a, long b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def nthMagicalNumber(self, n: int, a: int, b: int) -> int:\n    lcm = a * b // math.gcd(a, b)\n    l = bisect.bisect_left(range(min(a, b), min(a, b) * n), n,\n                           key=lambda m: m // a + m // b - m // lcm) + min(a, b)\n    return l % (10**9 + 7)\n",
                "lang_text": "py"
            }
        }
    }
}