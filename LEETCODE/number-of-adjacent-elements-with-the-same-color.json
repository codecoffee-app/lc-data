{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2672",
            "title": "Number of Adjacent Elements With the Same Color",
            "titleSlug": "number-of-adjacent-elements-with-the-same-color",
            "content": "<p>There is a <strong>0-indexed</strong> array <code>nums</code> of length <code>n</code>. Initially, all elements are <strong>uncolored </strong>(has a value of <code>0</code>).</p>\n\n<p>You are given a 2D integer array <code>queries</code> where <code>queries[i] = [index<sub>i</sub>, color<sub>i</sub>]</code>.</p>\n\n<p>For each query, you color the index <code>index<sub>i</sub></code> with the color <code>color<sub>i</sub></code> in the array <code>nums</code>.</p>\n\n<p>Return <em>an array </em><code>answer</code><em> of the same length as </em><code>queries</code><em> where </em><code>answer[i]</code><em> is the number of adjacent elements with the same color <strong>after</strong> the </em><code>i<sup>th</sup></code><em> query</em>.</p>\n\n<p>More formally, <code>answer[i]</code> is the number of indices <code>j</code>, such that <code>0 &lt;= j &lt; n - 1</code> and <code>nums[j] == nums[j + 1]</code> and <code>nums[j] != 0</code> after the <code>i<sup>th</sup></code> query.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]\n<strong>Output:</strong> [0,1,1,0,2]\n<strong>Explanation:</strong> Initially array nums = [0,0,0,0], where 0 denotes uncolored elements of the array.\n- After the 1<sup>st</sup> query nums = [2,0,0,0]. The count of adjacent elements with the same color is 0.\n- After the 2<sup>nd</sup> query nums = [2,2,0,0]. The count of adjacent elements with the same color is 1.\n- After the 3<sup>rd</sup>&nbsp;query nums = [2,2,0,1]. The count of adjacent elements with the same color is 1.\n- After the 4<sup>th</sup>&nbsp;query nums = [2,1,0,1]. The count of adjacent elements with the same color is 0.\n- After the 5<sup>th</sup>&nbsp;query nums = [2,1,1,1]. The count of adjacent elements with the same color is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, queries = [[0,100000]]\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> Initially array nums = [0], where 0 denotes uncolored elements of the array.\n- After the 1<sup>st</sup> query nums = [100000]. The count of adjacent elements with the same color is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length&nbsp;== 2</code></li>\n\t<li><code>0 &lt;= index<sub>i</sub>&nbsp;&lt;= n - 1</code></li>\n\t<li><code>1 &lt;=&nbsp; color<sub>i</sub>&nbsp;&lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 330,
            "dislikes": 89,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.1K\", \"totalSubmission\": \"26.2K\", \"totalAcceptedRaw\": 14140, \"totalSubmissionRaw\": 26192, \"acRate\": \"54.0%\"}",
            "hints": [
                "Since at each query, only one element is being recolored, we just need to focus on its neighbors.",
                "If an element that is changed on the i-th query had the same color as its right element answer decreases by 1. Similarly contributes its left element too.",
                "After changing the color, if the element has the same color as its right element answer increases by 1. Similarly contributes its left element too."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed array `nums` of length `n`, initially filled with 0s, representing uncolored elements. You are also given a 2D integer array `queries` where `queries[i] = [index_i, color_i]`. For each query, color the element at `index_i` in `nums` with `color_i`. Return an array `answer` of the same length as `queries`, where `answer[i]` represents the number of adjacent elements with the same color (and non-zero) in `nums` *after* processing the i-th query.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= queries.length <= 10^5",
                    "queries[i].length == 2",
                    "0 <= index_i <= n - 1",
                    "1 <= color_i <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]",
                        "output": "[0,1,1,0,2]",
                        "explanation": "Initially nums = [0,0,0,0].\n- After the 1st query: nums = [2,0,0,0].  Adjacent same-colored count: 0.\n- After the 2nd query: nums = [2,2,0,0].  Adjacent same-colored count: 1.\n- After the 3rd query: nums = [2,2,0,1].  Adjacent same-colored count: 1.\n- After the 4th query: nums = [2,1,0,1].  Adjacent same-colored count: 0.\n- After the 5th query: nums = [2,1,1,1].  Adjacent same-colored count: 2."
                    },
                    {
                        "input": "n = 1, queries = [[0,100000]]",
                        "output": "[0]",
                        "explanation": "Initially nums = [0].\n- After the 1st query: nums = [100000]. Adjacent same-colored count: 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Since at each query, only one element is being recolored, we just need to focus on its neighbors.",
            "If an element that is changed on the i-th query had the same color as its right element answer decreases by 1. Similarly contributes its left element too.",
            "After changing the color, if the element has the same color as its right element answer increases by 1. Similarly contributes its left element too."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> colorTheArray(int n, vector<vector<int>>& queries) {\n    vector<int> ans;\n    vector<int> arr(n);\n    int sameColors = 0;\n\n    for (const vector<int>& query : queries) {\n      const int i = query[0];\n      const int color = query[1];\n      if (i + 1 < n) {\n        if (arr[i + 1] > 0 && arr[i + 1] == arr[i])\n          --sameColors;\n        if (arr[i + 1] == color)\n          ++sameColors;\n      }\n      if (i > 0) {\n        if (arr[i - 1] > 0 && arr[i - 1] == arr[i])\n          --sameColors;\n        if (arr[i - 1] == color)\n          ++sameColors;\n      }\n      arr[i] = color;\n      ans.push_back(sameColors);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] colorTheArray(int n, int[][] queries) {\n    int[] ans = new int[queries.length];\n    int[] arr = new int[n];\n    int sameColors = 0;\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int j = queries[i][0];\n      final int color = queries[i][1];\n      if (j + 1 < n) {\n        if (arr[j + 1] > 0 && arr[j + 1] == arr[j])\n          --sameColors;\n        if (arr[j + 1] == color)\n          ++sameColors;\n      }\n      if (j > 0) {\n        if (arr[j - 1] > 0 && arr[j - 1] == arr[j])\n          --sameColors;\n        if (arr[j - 1] == color)\n          ++sameColors;\n      }\n      arr[j] = color;\n      ans[i] = sameColors;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def colorTheArray(self, n: int, queries: List[List[int]]) -> List[int]:\n    ans = []\n    arr = [0] * n\n    sameColors = 0\n\n    for i, color in queries:\n      if i + 1 < n:\n        if arr[i + 1] > 0 and arr[i + 1] == arr[i]:\n          sameColors -= 1\n        if arr[i + 1] == color:\n          sameColors += 1\n      if i > 0:\n        if arr[i - 1] > 0 and arr[i - 1] == arr[i]:\n          sameColors -= 1\n        if arr[i - 1] == color:\n          sameColors += 1\n      arr[i] = color\n      ans.append(sameColors)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}