{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "726",
            "title": "Number of Atoms",
            "titleSlug": "number-of-atoms",
            "content": "<p>Given a string <code>formula</code> representing a chemical formula, return <em>the count of each atom</em>.</p>\n\n<p>The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.</p>\n\n<p>One or more digits representing that element&#39;s count may follow if the count is greater than <code>1</code>. If the count is <code>1</code>, no digits will follow.</p>\n\n<ul>\n\t<li>For example, <code>&quot;H2O&quot;</code> and <code>&quot;H2O2&quot;</code> are possible, but <code>&quot;H1O2&quot;</code> is impossible.</li>\n</ul>\n\n<p>Two formulas are concatenated together to produce another formula.</p>\n\n<ul>\n\t<li>For example, <code>&quot;H2O2He3Mg4&quot;</code> is also a formula.</li>\n</ul>\n\n<p>A formula placed in parentheses, and a count (optionally added) is also a formula.</p>\n\n<ul>\n\t<li>For example, <code>&quot;(H2O2)&quot;</code> and <code>&quot;(H2O2)3&quot;</code> are formulas.</li>\n</ul>\n\n<p>Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than <code>1</code>), followed by the second name (in sorted order), followed by its count (if that count is more than <code>1</code>), and so on.</p>\n\n<p>The test cases are generated so that all the values in the output fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;H2O&quot;\n<strong>Output:</strong> &quot;H2O&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;H&#39;: 2, &#39;O&#39;: 1}.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;Mg(OH)2&quot;\n<strong>Output:</strong> &quot;H2MgO2&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;H&#39;: 2, &#39;Mg&#39;: 1, &#39;O&#39;: 2}.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;K4(ON(SO3)2)2&quot;\n<strong>Output:</strong> &quot;K4N2O14S4&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;K&#39;: 4, &#39;N&#39;: 2, &#39;O&#39;: 14, &#39;S&#39;: 4}.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= formula.length &lt;= 1000</code></li>\n\t<li><code>formula</code> consists of English letters, digits, <code>&#39;(&#39;</code>, and <code>&#39;)&#39;</code>.</li>\n\t<li><code>formula</code> is always valid.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1231,
            "dislikes": 283,
            "similarQuestions": "[{\"title\": \"Decode String\", \"titleSlug\": \"decode-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Encode String with Shortest Length\", \"titleSlug\": \"encode-string-with-shortest-length\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Parse Lisp Expression\", \"titleSlug\": \"parse-lisp-expression\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"57.1K\", \"totalSubmission\": \"108.4K\", \"totalAcceptedRaw\": 57062, \"totalSubmissionRaw\": 108442, \"acRate\": \"52.6%\"}",
            "hints": [
                "To parse formula[i:], when we see a `'('`, we will parse recursively whatever is inside the brackets (up to the correct closing ending bracket) and add it to our count, multiplying by the following multiplicity if there is one.\r\n\r\nOtherwise, we should see an uppercase character: we will parse the rest of the letters to get the name, and add that (plus the multiplicity if there is one.)"
            ],
            "rephrased": {
                "body": "Given a chemical formula represented as a string `formula`, determine the count of each atom present in the formula.\n\nThe atomic elements are represented by an uppercase character followed by zero or more lowercase letters.\n\nThe count of each element, if greater than 1, is represented by one or more digits immediately following the element's name. A count of 1 is not explicitly represented by a digit.\n\nFormulas can be concatenated to form larger formulas.\n\nFormulas within parentheses can be followed by a count, which applies to the entire parenthesized formula.",
                "constraints": [
                    "1 <= formula.length <= 1000",
                    "formula consists of English letters, digits, '(', and ')'.",
                    "formula is always valid."
                ],
                "testcases": [
                    {
                        "input": "H2O",
                        "output": "H2O",
                        "explanation": "The formula contains 2 hydrogen atoms and 1 oxygen atom."
                    },
                    {
                        "input": "Mg(OH)2",
                        "output": "H2MgO2",
                        "explanation": "The formula contains 1 magnesium atom, 2 oxygen atoms, and 2 hydrogen atoms."
                    },
                    {
                        "input": "K4(ON(SO3)2)2",
                        "output": "K4N2O14S4",
                        "explanation": "The formula contains 4 potassium atoms, 2 nitrogen atoms, 14 oxygen atoms, and 4 sulfur atoms."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "decode-string",
                "title": "Decode String",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "encode-string-with-shortest-length",
                "title": "Encode String with Shortest Length",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "parse-lisp-expression",
                "title": "Parse Lisp Expression",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "To parse formula[i:], when we see a `'('`, we will parse recursively whatever is inside the brackets (up to the correct closing ending bracket) and add it to our count, multiplying by the following multiplicity if there is one.\r\n\r\nOtherwise, we should see an uppercase character: we will parse the rest of the letters to get the name, and add that (plus the multiplicity if there is one.)"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string countOfAtoms(string formula) {\n    string ans;\n    int i = 0;\n\n    for (const auto& [elem, freq] : parse(formula, i)) {\n      ans += elem;\n      if (freq > 1)\n        ans += to_string(freq);\n    }\n\n    return ans;\n  }\n\n private:\n  map<string, int> parse(const string& s, int& i) {\n    map<string, int> count;\n\n    while (i < s.length())\n      if (s[i] == '(') {\n        for (const auto& [elem, freq] : parse(s, ++i))\n          count[elem] += freq;\n      } else if (s[i] == ')') {\n        const int num = getNum(s, ++i);\n        for (auto&& [_, freq] : count)\n          freq *= num;\n        return count;  // Returns back to previous scope\n      } else {         // s[i] must be uppercased\n        const string& elem = getElem(s, i);\n        const int num = getNum(s, i);\n        count[elem] += num;\n      }\n\n    return count;\n  }\n\n  string getElem(const string& s, int& i) {\n    const int elemStart = i++;  // s[elemStart] is uppercased\n    while (i < s.length() && islower(s[i]))\n      ++i;\n    return s.substr(elemStart, i - elemStart);\n  }\n\n  int getNum(const string& s, int& i) {\n    const int numStart = i;\n    while (i < s.length() && isdigit(s[i]))\n      ++i;\n    const string& numString = s.substr(numStart, i - numStart);\n    return numString.empty() ? 1 : stoi(numString);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String countOfAtoms(String formula) {\n    StringBuilder sb = new StringBuilder();\n    Map<String, Integer> count = parse(formula);\n\n    for (final String elem : count.keySet())\n      sb.append(elem + (count.get(elem) == 1 ? \"\" : String.valueOf(count.get(elem))));\n\n    return sb.toString();\n  }\n\n  private int i = 0;\n\n  private Map<String, Integer> parse(String s) {\n    Map<String, Integer> count = new TreeMap<>();\n\n    while (i < s.length())\n      if (s.charAt(i) == '(') {\n        ++i; // Skip '('\n        for (Map.Entry<String, Integer> entry : parse(s).entrySet()) {\n          final String elem = entry.getKey();\n          final int freq = entry.getValue();\n          count.merge(elem, freq, Integer::sum);\n        }\n      } else if (s.charAt(i) == ')') {\n        ++i; // Skip ')'\n        final int num = getNum(s);\n        for (final String elem : count.keySet()) {\n          final int freq = count.get(elem);\n          count.put(elem, freq * num);\n        }\n        return count; // Returns back to previous scope\n      } else {\n        final String elem = getElem(s);\n        final int num = getNum(s);\n        count.merge(elem, num, Integer::sum);\n      }\n\n    return count;\n  }\n\n  private String getElem(final String s) {\n    final int elemStart = i++; // s[elemStart] is uppercased\n    while (i < s.length() && Character.isLowerCase(s.charAt(i)))\n      ++i;\n    return s.substring(elemStart, i);\n  }\n\n  private int getNum(final String s) {\n    final int numStart = i;\n    while (i < s.length() && Character.isDigit(s.charAt(i)))\n      ++i;\n    final String numString = s.substring(numStart, i);\n    return numString.isEmpty() ? 1 : Integer.parseInt(numString);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countOfAtoms(self, formula: str) -> str:\n    def parse() -> dict:\n      ans = collections.defaultdict(int)\n\n      nonlocal i\n      while i < n:\n        if formula[i] == '(':\n          i += 1\n          for elem, freq in parse().items():\n            ans[elem] += freq\n        elif formula[i] == ')':\n          i += 1\n          numStart = i\n          while i < n and formula[i].isdigit():\n            i += 1\n          factor = int(formula[numStart:i])\n          for elem, freq in ans.items():\n            ans[elem] *= factor\n          return ans\n        elif formula[i].isupper():\n          elemStart = i\n          i += 1\n          while i < n and formula[i].islower():\n            i += 1\n          elem = formula[elemStart:i]\n          numStart = i\n          while i < n and formula[i].isdigit():\n            i += 1\n          num = 1 if i == numStart else int(\n              formula[numStart:i])\n          ans[elem] += num\n\n      return ans\n\n    n = len(formula)\n\n    ans = \"\"\n    i = 0\n    count = parse()\n\n    for elem in sorted(count.keys()):\n      ans += elem\n      if count[elem] > 1:\n        ans += str(count[elem])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}