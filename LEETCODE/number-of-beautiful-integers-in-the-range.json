{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2827",
            "title": "Number of Beautiful Integers in the Range",
            "titleSlug": "number-of-beautiful-integers-in-the-range",
            "content": "<p>You are given positive integers <code>low</code>, <code>high</code>, and <code>k</code>.</p>\n\n<p>A number is <strong>beautiful</strong> if it meets both of the following conditions:</p>\n\n<ul>\n\t<li>The count of even digits in the number is equal to the count of odd digits.</li>\n\t<li>The number is divisible by <code>k</code>.</li>\n</ul>\n\n<p>Return <em>the number of beautiful integers in the range</em> <code>[low, high]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = 10, high = 20, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 beautiful integers in the given range: [12,18]. \n- 12 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\n- 18 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\nAdditionally we can see that:\n- 16 is not beautiful because it is not divisible by k = 3.\n- 15 is not beautiful because it does not contain equal counts even and odd digits.\nIt can be shown that there are only 2 beautiful integers in the given range.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = 1, high = 10, k = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is 1 beautiful integer in the given range: [10].\n- 10 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 1.\nIt can be shown that there is only 1 beautiful integer in the given range.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = 5, high = 5, k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are 0 beautiful integers in the given range.\n- 5 is not beautiful because it is not divisible by k = 2 and it does not contain equal even and odd digits.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; low &lt;= high &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt; k &lt;= 20</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 347,
            "dislikes": 36,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.9K\", \"totalSubmission\": \"49.9K\", \"totalAcceptedRaw\": 8889, \"totalSubmissionRaw\": 49875, \"acRate\": \"17.8%\"}",
            "hints": [
                "<div class=\"_1l1MA\">The intended solution uses Dynamic Programming.</div>",
                "<div class=\"_1l1MA\">Let <code> f(n) </code> denote number of beautiful integers in the range <code> [1\u2026n] </code>, then the answer is <code> f(r) - f(l-1) </code>.</div>"
            ],
            "rephrased": {
                "body": "Given three positive integers `low`, `high`, and `k`, determine the number of 'beautiful' integers within the range `[low, high]`. A number is considered 'beautiful' if it satisfies the following conditions:\n\n1.  The number of even digits in the number is equal to the number of odd digits.\n2.  The number is divisible by `k`.",
                "constraints": [
                    "0 < low <= high <= 10<sup>9</sup>",
                    "0 < k <= 20"
                ],
                "testcases": [
                    {
                        "input": "low = 10, high = 20, k = 3",
                        "output": "2",
                        "explanation": "The beautiful integers in the range [10, 20] are 12 and 18.\n\n*   12 has one odd digit (1) and one even digit (2). It is divisible by 3.\n*   18 has one odd digit (1) and one even digit (8). It is divisible by 3.\n\n16 is not beautiful because it's not divisible by 3, and 15 is not beautiful because the count of odd and even digits is not equal."
                    },
                    {
                        "input": "low = 1, high = 10, k = 1",
                        "output": "1",
                        "explanation": "The beautiful integer in the range [1, 10] is 10.\n\n*   10 has one odd digit (1) and one even digit (0). It is divisible by 1."
                    },
                    {
                        "input": "low = 5, high = 5, k = 2",
                        "output": "0",
                        "explanation": "There are no beautiful integers in the range [5, 5].\n\n*   5 has one odd digit (5) and zero even digits. It is not divisible by 2. Thus, it does not satisfy both conditions."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<div class=\"_1l1MA\">The intended solution uses Dynamic Programming.</div>",
            "<div class=\"_1l1MA\">Let <code> f(n) </code> denote number of beautiful integers in the range <code> [1\u2026n] </code>, then the answer is <code> f(r) - f(l-1) </code>.</div>"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numberOfBeautifulIntegers(int low, int high, int k) {\n    // dp[i][even][odd][remainder][k1][k2] := # of valid integers of size i\n    // with counts of even `even` digits and odd `odd` digits, and the current\n    // number modulo k equals remainder. The variables k1 and k2 indicate\n    // tight constraints (0/1) for `low` and `high` respectively.\n    const string lowString = to_string(low);\n    const string highString = to_string(high);\n    const string lowWithLeadingZeros =\n        string(highString.length() - lowString.length(), '0') + lowString;\n    dp.resize(\n        highString.length(),\n        vector<vector<vector<vector<vector<int>>>>>(\n            10, vector<vector<vector<vector<int>>>>(\n                    10, vector<vector<vector<int>>>(\n                            k, vector<vector<int>>(2, vector<int>(2, -1))))));\n    return count(lowWithLeadingZeros, highString, k, 0, 0, 0, 0, true, true,\n                 true);\n  }\n\n private:\n  vector<vector<vector<vector<vector<vector<int>>>>>> dp;\n\n  int count(const string& low, const string& high, int k, int i, int even,\n            int odd, int remainder, bool isLeadingZero, bool isTight1,\n            bool isTight2) {\n    if (i == high.length())\n      return !isLeadingZero && even == odd && remainder == 0;\n    if (dp[i][even][odd][remainder][isTight1][isTight2] != -1)\n      return dp[i][even][odd][remainder][isTight1][isTight2];\n\n    int res = 0;\n    const int minDigit = isTight1 ? low[i] - '0' : 0;\n    const int maxDigit = isTight2 ? high[i] - '0' : 9;\n\n    for (int d = minDigit; d <= maxDigit; ++d) {\n      const int nextEven = even + ((!isLeadingZero || d > 0) && d % 2 == 0);\n      const int nextOdd = odd + (d % 2 == 1);\n      const int nextRemainder = (remainder * 10 + d) % k;\n      const bool nextIsTight1 = isTight1 && (d == minDigit);\n      const bool nextIsTight2 = isTight2 && (d == maxDigit);\n      res += count(low, high, k, i + 1, nextEven, nextOdd, nextRemainder,\n                   isLeadingZero && d == 0, nextIsTight1, nextIsTight2);\n    }\n\n    return dp[i][even][odd][remainder][isTight1][isTight2] = res;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}