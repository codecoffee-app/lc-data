{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2478",
            "title": "Number of Beautiful Partitions",
            "titleSlug": "number-of-beautiful-partitions",
            "content": "<p>You are given a string <code>s</code> that consists of the digits <code>&#39;1&#39;</code> to <code>&#39;9&#39;</code> and two integers <code>k</code> and <code>minLength</code>.</p>\n\n<p>A partition of <code>s</code> is called <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li><code>s</code> is partitioned into <code>k</code> non-intersecting substrings.</li>\n\t<li>Each substring has a length of <strong>at least</strong> <code>minLength</code>.</li>\n\t<li>Each substring starts with a <strong>prime</strong> digit and ends with a <strong>non-prime</strong> digit. Prime digits are <code>&#39;2&#39;</code>, <code>&#39;3&#39;</code>, <code>&#39;5&#39;</code>, and <code>&#39;7&#39;</code>, and the rest of the digits are non-prime.</li>\n</ul>\n\n<p>Return<em> the number of <strong>beautiful</strong> partitions of </em><code>s</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;23542185131&quot;, k = 3, minLength = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There exists three ways to create a beautiful partition:\n&quot;2354 | 218 | 5131&quot;\n&quot;2354 | 21851 | 31&quot;\n&quot;2354218 | 51 | 31&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;23542185131&quot;, k = 3, minLength = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There exists one way to create a beautiful partition: &quot;2354 | 218 | 5131&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3312958&quot;, k = 3, minLength = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There exists one way to create a beautiful partition: &quot;331 | 29 | 58&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k, minLength &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of the digits <code>&#39;1&#39;</code> to <code>&#39;9&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 336,
            "dislikes": 16,
            "similarQuestions": "[{\"title\": \"Restore The Array\", \"titleSlug\": \"restore-the-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Separate Numbers\", \"titleSlug\": \"number-of-ways-to-separate-numbers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.2K\", \"totalSubmission\": \"30.2K\", \"totalAcceptedRaw\": 9237, \"totalSubmissionRaw\": 30181, \"acRate\": \"30.6%\"}",
            "hints": [
                "Try using a greedy approach where you take as many digits as possible from the left of the string for each partition.",
                "You can also use a dynamic programming approach, let an array dp where dp[i] is the solution of the problem for the prefix of the string ending at index i, the answer of the problem will be dp[n-1]. What are the transitions of this dp?"
            ],
            "rephrased": {
                "body": "Given a string `s` consisting of digits '1' to '9', and two integers `k` and `minLength`, find the number of beautiful partitions of `s`. A beautiful partition is defined as follows:\n\n*   `s` is partitioned into `k` non-intersecting substrings.\n*   Each substring has a length of at least `minLength`.\n*   Each substring starts with a prime digit ('2', '3', '5', or '7') and ends with a non-prime digit ('1', '4', '6', '8', or '9').\n\nReturn the number of beautiful partitions of `s` modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= k, minLength <= s.length <= 1000",
                    "s consists of the digits '1' to '9'."
                ],
                "testcases": [
                    {
                        "input": {
                            "s": "23542185131",
                            "k": 3,
                            "minLength": 2
                        },
                        "output": 3,
                        "explanation": "There are three beautiful partitions: \"2354 | 218 | 5131\", \"2354 | 21851 | 31\", and \"2354218 | 51 | 31\"."
                    },
                    {
                        "input": {
                            "s": "23542185131",
                            "k": 3,
                            "minLength": 3
                        },
                        "output": 1,
                        "explanation": "There is one beautiful partition: \"2354 | 218 | 5131\"."
                    },
                    {
                        "input": {
                            "s": "3312958",
                            "k": 3,
                            "minLength": 1
                        },
                        "output": 1,
                        "explanation": "There is one beautiful partition: \"331 | 29 | 58\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "restore-the-array",
                "title": "Restore The Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-ways-to-separate-numbers",
                "title": "Number of Ways to Separate Numbers",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try using a greedy approach where you take as many digits as possible from the left of the string for each partition.",
            "You can also use a dynamic programming approach, let an array dp where dp[i] is the solution of the problem for the prefix of the string ending at index i, the answer of the problem will be dp[n-1]. What are the transitions of this dp?"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int beautifulPartitions(string s, int k, int minLength) {\n    if (!isPrime(s.front()) || isPrime(s.back()))\n      return 0;\n\n    this->minLength = minLength;\n    // dp[i][k] := # of beautiful partitions of s[i:] with k bars (|) left\n    dp.resize(s.length(), vector<int>(k, -1));\n    return partitions(s, minLength, k - 1);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  int minLength;\n  vector<vector<int>> dp;\n\n  int partitions(const string& s, int i, int k) {\n    if (i <= s.length() && k == 0)\n      return 1;\n    if (i >= s.length())\n      return 0;\n    if (dp[i][k] != -1)\n      return dp[i][k];\n\n    // Not split between s[i - 1] and s[i].\n    int ans = partitions(s, i + 1, k) % kMod;\n\n    // Split between s[i - 1] and s[i].\n    if (isPrime(s[i]) && !isPrime(s[i - 1]))\n      ans += partitions(s, i + minLength, k - 1);\n\n    return dp[i][k] = ans % kMod;\n  }\n\n  bool isPrime(char c) {\n    return c == '2' || c == '3' || c == '5' || c == '7';\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int beautifulPartitions(String s, int k, int minLength) {\n    if (!isPrime(s.charAt(0)) || isPrime(s.charAt(s.length() - 1)))\n      return 0;\n\n    this.minLength = minLength;\n    // dp[i][k] := # of beautiful partitions of s.charAt(i:) with k bars (|) left\n    dp = new Integer[s.length()][k];\n    return partitions(s, minLength, k - 1);\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private int minLength;\n  private Integer[][] dp;\n\n  private int partitions(final String s, int i, int k) {\n    if (i <= s.length() && k == 0)\n      return 1;\n    if (i >= s.length())\n      return 0;\n    if (dp[i][k] != null)\n      return dp[i][k];\n\n    // Not split between s.charAt(i - 1) and s.charAt(i).\n    int ans = partitions(s, i + 1, k) % kMod;\n\n    // Split between s.charAt(i - 1) and s.charAt(i).\n    if (isPrime(s.charAt(i)) && !isPrime(s.charAt(i - 1)))\n      ans += partitions(s, i + minLength, k - 1);\n\n    return dp[i][k] = ans % kMod;\n  }\n\n  private boolean isPrime(char c) {\n    return c == '2' || c == '3' || c == '5' || c == '7';\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n    def isPrime(c: str) -> bool:\n      return c in '2357'\n\n    if not isPrime(s[0]) or isPrime(s[-1]):\n      return 0\n\n    kMod = 1_000_000_007\n\n    @lru_cache(None)\n    def dp(i: int, k: int) -> int:\n      if i <= len(s) and k == 0:\n        return 1\n      if i >= len(s):\n        return 0\n\n      # Not split between s[i - 1] and s[i].\n      ans = dp(i + 1, k) % kMod\n\n      # Split between s[i - 1] and s[i].\n      if isPrime(s[i]) and not isPrime(s[i - 1]):\n        ans += dp(i + minLength, k - 1)\n\n      return ans % kMod\n\n    return dp(minLength, k - 1)\n",
                "lang_text": "py"
            }
        }
    }
}