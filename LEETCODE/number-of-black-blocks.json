{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2768",
            "title": "Number of Black Blocks",
            "titleSlug": "number-of-black-blocks",
            "content": "<p>You are given two integers <code>m</code> and <code>n</code> representing the dimensions of a&nbsp;<strong>0-indexed</strong>&nbsp;<code>m x n</code> grid.</p>\n\n<p>You are also given a <strong>0-indexed</strong> 2D integer matrix <code>coordinates</code>, where <code>coordinates[i] = [x, y]</code> indicates that the cell with coordinates <code>[x, y]</code> is colored <strong>black</strong>. All cells in the grid that do not appear in <code>coordinates</code> are <strong>white</strong>.</p>\n\n<p>A block is defined as a <code>2 x 2</code> submatrix of the grid. More formally, a block with cell <code>[x, y]</code> as its top-left corner where <code>0 &lt;= x &lt; m - 1</code> and <code>0 &lt;= y &lt; n - 1</code> contains the coordinates <code>[x, y]</code>, <code>[x + 1, y]</code>, <code>[x, y + 1]</code>, and <code>[x + 1, y + 1]</code>.</p>\n\n<p>Return <em>a <strong>0-indexed</strong> integer array</em> <code>arr</code> <em>of size</em> <code>5</code> <em>such that</em> <code>arr[i]</code> <em>is the number of blocks that contains exactly</em> <code>i</code> <em><strong>black</strong> cells</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 3, coordinates = [[0,0]]\n<strong>Output:</strong> [3,1,0,0,0]\n<strong>Explanation:</strong> The grid looks like this:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-44656-am.png\" style=\"width: 150px; height: 128px;\" />\nThere is only 1 block with one black cell, and it is the block starting with cell [0,0].\nThe other 3 blocks start with cells [0,1], [1,0] and [1,1]. They all have zero black cells. \nThus, we return [3,1,0,0,0]. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]]\n<strong>Output:</strong> [0,2,2,0,0]\n<strong>Explanation:</strong> The grid looks like this:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-45018-am.png\" style=\"width: 150px; height: 128px;\" />\nThere are 2 blocks with two black cells (the ones starting with cell coordinates [0,0] and [0,1]).\nThe other 2 blocks have starting cell coordinates of [1,0] and [1,1]. They both have 1 black cell.\nTherefore, we return [0,2,2,0,0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= coordinates.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>coordinates[i].length == 2</code></li>\n\t<li><code>0 &lt;= coordinates[i][0] &lt; m</code></li>\n\t<li><code>0 &lt;= coordinates[i][1] &lt; n</code></li>\n\t<li>It is guaranteed that <code>coordinates</code> contains pairwise distinct coordinates.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 213,
            "dislikes": 22,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.7K\", \"totalSubmission\": \"18.9K\", \"totalAcceptedRaw\": 6748, \"totalSubmissionRaw\": 18906, \"acRate\": \"35.7%\"}",
            "hints": [
                "The number of blocks is too much but the number of black cells is less than that.",
                "It means the number of blocks with at least one black cell is O(|coordinates|). let\u2019s just hold them.",
                "Iterate through the coordinates and update the block counts accordingly. For each coordinate, determine which block(s) it belongs to and increment the count of black cells for those block(s).",
                "After processing all the coordinates, count the number of blocks with different numbers of black cells. You can use another data structure to keep track of the counts of blocks with 0 black cells, 1 black cell, and so on."
            ],
            "rephrased": {
                "body": "Given the dimensions of a 0-indexed m x n grid, and a list of coordinates indicating black cells, determine the count of 2x2 blocks containing 0 to 4 black cells. A block is defined by its top-left corner at (x, y) and includes cells (x, y), (x+1, y), (x, y+1), and (x+1, y+1). Return an array of size 5 where arr[i] represents the number of blocks with exactly i black cells.",
                "constraints": [
                    "2 <= m <= 10^5",
                    "2 <= n <= 10^5",
                    "0 <= coordinates.length <= 10^4",
                    "coordinates[i].length == 2",
                    "0 <= coordinates[i][0] < m",
                    "0 <= coordinates[i][1] < n",
                    "coordinates contains pairwise distinct coordinates."
                ],
                "testcases": [
                    {
                        "input": "m = 3, n = 3, coordinates = [[0,0]]",
                        "output": "[3,1,0,0,0]",
                        "explanation": "In a 3x3 grid, only one cell [0,0] is black. There is one 2x2 block (starting at [0,0]) that contains exactly one black cell. The remaining three blocks (starting at [0,1], [1,0], and [1,1]) contain zero black cells. Therefore, the output is [3,1,0,0,0]."
                    },
                    {
                        "input": "m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]]",
                        "output": "[0,2,2,0,0]",
                        "explanation": "In a 3x3 grid, cells [0,0], [1,1], and [0,2] are black. There are two 2x2 blocks with two black cells (starting at [0,0] and [0,1]). The other two blocks (starting at [1,0] and [1,1]) each have one black cell. Thus, the output is [0,2,2,0,0]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The number of blocks is too much but the number of black cells is less than that.",
            "It means the number of blocks with at least one black cell is O(|coordinates|). let\u2019s just hold them.",
            "Iterate through the coordinates and update the block counts accordingly. For each coordinate, determine which block(s) it belongs to and increment the count of black cells for those block(s).",
            "After processing all the coordinates, count the number of blocks with different numbers of black cells. You can use another data structure to keep track of the counts of blocks with 0 black cells, 1 black cell, and so on."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<long long> countBlackBlocks(int m, int n,\n                                     vector<vector<int>>& coordinates) {\n    vector<long long> ans(5);\n    // count[i * n + j] := # of black cells in\n    //                     (i - 1, j - 1), (i - 1, j), (i, j - 1), (i, j)\n    unordered_map<long long, int> count;\n\n    for (const vector<int>& coordinate : coordinates) {\n      const int x = coordinate[0];\n      const int y = coordinate[1];\n      for (long long i = x; i < x + 2; ++i)\n        for (long long j = y; j < y + 2; ++j)\n          // 2 x 2 submatrix with right-bottom conner being (i, j) contains the\n          // current black cell (x, y).\n          if (i - 1 >= 0 && i < m && j - 1 >= 0 && j < n)\n            ++count[i * n + j];\n    }\n\n    for (const auto& [_, freq] : count)\n      ++ans[freq];\n\n    ans[0] = (m - 1LL) * (n - 1) - accumulate(ans.begin(), ans.end(), 0LL);\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long[] countBlackBlocks(int m, int n, int[][] coordinates) {\n    long[] ans = new long[5];\n    // count[i * n + j] := # of black cells in\n    //                     (i - 1, j - 1), (i - 1, j), (i, j - 1), (i, j)\n    Map<Long, Integer> count = new HashMap<>();\n\n    for (int[] coordinate : coordinates) {\n      final int x = coordinate[0];\n      final int y = coordinate[1];\n      for (long i = x; i < x + 2; ++i)\n        for (long j = y; j < y + 2; ++j)\n          // 2 x 2 submatrix with right-bottom conner being (i, j) contains the\n          // current black cell (x, y).\n          if (i - 1 >= 0 && i < m && j - 1 >= 0 && j < n)\n            count.merge(i * n + j, 1, Integer::sum);\n    }\n\n    for (final int freq : count.values())\n      ++ans[freq];\n\n    ans[0] = (m - 1L) * (n - 1) - Arrays.stream(ans).sum();\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countBlackBlocks(self, m: int, n: int, coordinates: List[List[int]]) -> List[int]:\n    ans = [0] * 5\n    # count[i * n + j] := # of black cells in\n    #                     (i - 1, j - 1), (i - 1, j), (i, j - 1), (i, j)\n    count = collections.Counter()\n\n    for x, y in coordinates:\n      for i in range(x, x + 2):\n        for j in range(y, y + 2):\n          # 2 x 2 submatrix with right-bottom conner being (i, j) contains the\n          # current black cell (x, y).\n          if 0 < i < m and 0 < j < n:\n            count[(i, j)] += 1\n\n    for freq in count.values():\n      ans[freq] += 1\n\n    ans[0] = (m - 1) * (n - 1) - sum(ans)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}