{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "447",
            "title": "Number of Boomerangs",
            "titleSlug": "number-of-boomerangs",
            "content": "<p>You are given <code>n</code> <code>points</code> in the plane that are all <strong>distinct</strong>, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>. A <strong>boomerang</strong> is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code> <strong>(the order of the tuple matters)</strong>.</p>\n\n<p>Return <em>the number of boomerangs</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[0,0],[1,0],[2,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,1]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == points.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>All the points are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 808,
            "dislikes": 998,
            "similarQuestions": "[{\"title\": \"Line Reflection\", \"titleSlug\": \"line-reflection\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                }
            ],
            "stats": "{\"totalAccepted\": \"97.2K\", \"totalSubmission\": \"176K\", \"totalAcceptedRaw\": 97180, \"totalSubmissionRaw\": 175954, \"acRate\": \"55.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a set of distinct points in a 2D plane, where each point is represented as `[x, y]`, find the number of boomerangs. A boomerang is defined as a tuple of points `(i, j, k)` such that the distance between point `i` and point `j` is equal to the distance between point `i` and point `k`. The order of the points in the tuple matters.",
                "constraints": [
                    "n == points.length",
                    "1 <= n <= 500",
                    "points[i].length == 2",
                    "-10<sup>4</sup> <= x<sub>i</sub>, y<sub>i</sub> <= 10<sup>4</sup>",
                    "All the points are unique."
                ],
                "testcases": [
                    {
                        "input": "[[0,0],[1,0],[2,0]]",
                        "output": "2",
                        "explanation": "The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]."
                    },
                    {
                        "input": "[[1,1],[2,2],[3,3]]",
                        "output": "2",
                        "explanation": null
                    },
                    {
                        "input": "[[1,1]]",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "line-reflection",
                "title": "Line Reflection",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numberOfBoomerangs(vector<vector<int>>& points) {\n    int ans = 0;\n\n    for (const vector<int>& p : points) {\n      unordered_map<int, int> distCount;\n      for (const vector<int>& q : points) {\n        const int dist = getDist(p, q);\n        ++distCount[dist];\n      }\n      for (const auto& [_, freq] : distCount)\n        ans += freq * (freq - 1);  // C(freq, 2)\n    }\n\n    return ans;\n  }\n\n private:\n  int getDist(const vector<int>& p, const vector<int>& q) {\n    return pow(p[0] - q[0], 2) + pow(p[1] - q[1], 2);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numberOfBoomerangs(int[][] points) {\n    int ans = 0;\n\n    for (int[] p : points) {\n      Map<Integer, Integer> distCount = new HashMap<>();\n      for (int[] q : points) {\n        final int dist = (int) getDist(p, q);\n        distCount.merge(dist, 1, Integer::sum);\n      }\n      for (final int freq : distCount.values())\n        ans += freq * (freq - 1); // C(freq, 2)\n    }\n\n    return ans;\n  }\n\n  private double getDist(int[] p, int[] q) {\n    return Math.pow(p[0] - q[0], 2) + Math.pow(p[1] - q[1], 2);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numberOfBoomerangs(self, points: List[List[int]]) -> int:\n    ans = 0\n\n    for x1, y1 in points:\n      count = collections.defaultdict(int)\n      for x2, y2 in points:\n        ans += 2 * count[(x1 - x2)**2 + (y1 - y2)**2]\n        count[(x1 - x2)**2 + (y1 - y2)**2] += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}