{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1254",
            "title": "Number of Closed Islands",
            "titleSlug": "number-of-closed-islands",
            "content": "<p>Given a 2D&nbsp;<code>grid</code> consists of <code>0s</code> (land)&nbsp;and <code>1s</code> (water).&nbsp; An <em>island</em> is a maximal 4-directionally connected group of <code><font face=\"monospace\">0</font>s</code> and a <em>closed island</em>&nbsp;is an island <strong>totally</strong>&nbsp;(all left, top, right, bottom) surrounded by <code>1s.</code></p>\n\n<p>Return the number of <em>closed islands</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/31/sample_3_1610.png\" style=\"width: 240px; height: 120px;\" /></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nIslands in gray are closed because they are completely surrounded by water (group of 1s).</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/31/sample_4_1610.png\" style=\"width: 160px; height: 80px;\" /></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,1,1,1,1,1],\n&nbsp;              [1,0,0,0,0,0,1],\n&nbsp;              [1,0,1,1,1,0,1],\n&nbsp;              [1,0,1,0,1,0,1],\n&nbsp;              [1,0,1,1,1,0,1],\n&nbsp;              [1,0,0,0,0,0,1],\n               [1,1,1,1,1,1,1]]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length, grid[0].length &lt;= 100</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;=1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4416,
            "dislikes": 156,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"211.8K\", \"totalSubmission\": \"318.7K\", \"totalAcceptedRaw\": 211779, \"totalSubmissionRaw\": 318661, \"acRate\": \"66.5%\"}",
            "hints": [
                "Exclude connected group of 0s on the corners because they are not closed island.",
                "Return number of connected component of 0s on the grid."
            ],
            "rephrased": {
                "body": "Given a 2D grid consisting of 0s (land) and 1s (water), an island is a maximal 4-directionally connected group of 0s. A closed island is an island completely surrounded by 1s (water) on all sides (left, top, right, and bottom).\n\nReturn the number of closed islands in the grid.",
                "constraints": [
                    "1 <= grid.length, grid[0].length <= 100",
                    "0 <= grid[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]",
                        "output": "2",
                        "explanation": "The islands in gray in the original problem statement are closed because they are completely surrounded by water (group of 1s)."
                    },
                    {
                        "input": "[[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "[[1,1,1,1,1,1,1],\n [1,0,0,0,0,0,1],\n [1,0,1,1,1,0,1],\n [1,0,1,0,1,0,1],\n [1,0,1,1,1,0,1],\n [1,0,0,0,0,0,1],\n [1,1,1,1,1,1,1]]",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Exclude connected group of 0s on the corners because they are not closed island.",
            "Return number of connected component of 0s on the grid."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int closedIsland(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n\n    // Remove lands connected to edge\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (i * j == 0 || i == m - 1 || j == n - 1)\n          if (grid[i][j] == 0)\n            dfs(grid, i, j);\n\n    int ans = 0;\n\n    // Reduce to 200. Number of Islands\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] == 0) {\n          dfs(grid, i, j);\n          ++ans;\n        }\n\n    return ans;\n  }\n\n private:\n  void dfs(vector<vector<int>>& grid, int i, int j) {\n    if (i < 0 || i == grid.size() || j < 0 || j == grid[0].size())\n      return;\n    if (grid[i][j] == 1)\n      return;\n\n    grid[i][j] = 1;\n    dfs(grid, i + 1, j);\n    dfs(grid, i - 1, j);\n    dfs(grid, i, j + 1);\n    dfs(grid, i, j - 1);\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int closedIsland(int[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n\n    // Remove lands connected to edge\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (i * j == 0 || i == m - 1 || j == n - 1)\n          if (grid[i][j] == 0)\n            dfs(grid, i, j);\n\n    int ans = 0;\n\n    // Reduce to 200. Number of Islands\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] == 0) {\n          dfs(grid, i, j);\n          ++ans;\n        }\n\n    return ans;\n  }\n\n  private void dfs(int[][] grid, int i, int j) {\n    if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)\n      return;\n    if (grid[i][j] == 1)\n      return;\n\n    grid[i][j] = 1;\n    dfs(grid, i + 1, j);\n    dfs(grid, i - 1, j);\n    dfs(grid, i, j + 1);\n    dfs(grid, i, j - 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def closedIsland(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n\n    def dfs(i: int, j: int) -> None:\n      if i < 0 or i == m or j < 0 or j == n:\n        return\n      if grid[i][j] == 1:\n        return\n\n      grid[i][j] = 1\n      dfs(i + 1, j)\n      dfs(i - 1, j)\n      dfs(i, j + 1)\n      dfs(i, j - 1)\n\n    # Remove lands connected to edge\n    for i in range(m):\n      for j in range(n):\n        if i * j == 0 or i == m - 1 or j == n - 1:\n          if grid[i][j] == 0:\n            dfs(i, j)\n\n    ans = 0\n\n    # Reduce to 200. Number of Islands\n    for i in range(m):\n      for j in range(n):\n        if grid[i][j] == 0:\n          dfs(i, j)\n          ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}