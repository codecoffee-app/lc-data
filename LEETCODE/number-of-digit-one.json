{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "233",
            "title": "Number of Digit One",
            "titleSlug": "number-of-digit-one",
            "content": "<p>Given an integer <code>n</code>, count <em>the total number of digit </em><code>1</code><em> appearing in all non-negative integers less than or equal to</em> <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 13\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1446,
            "dislikes": 1431,
            "similarQuestions": "[{\"title\": \"Factorial Trailing Zeroes\", \"titleSlug\": \"factorial-trailing-zeroes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Digit Count in Range\", \"titleSlug\": \"digit-count-in-range\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"86.3K\", \"totalSubmission\": \"251.9K\", \"totalAcceptedRaw\": 86332, \"totalSubmissionRaw\": 251885, \"acRate\": \"34.3%\"}",
            "hints": [
                "Beware of overflow."
            ],
            "rephrased": {
                "body": "Given a non-negative integer `n`, determine the total number of times the digit '1' appears in all non-negative integers from 0 up to and including `n`. In other words, count the occurrences of the digit '1' within the range [0, n].",
                "constraints": [
                    "0 <= n <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "13",
                        "output": "6",
                        "explanation": "The digit '1' appears in 1, 10, 11, 12, and 13. It appears once in 1, once in 10, twice in 11, once in 12, and once in 13, for a total of 6 times."
                    },
                    {
                        "input": "0",
                        "output": "0",
                        "explanation": "There are no integers containing the digit '1' in the range [0, 0]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "factorial-trailing-zeroes",
                "title": "Factorial Trailing Zeroes",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "digit-count-in-range",
                "title": "Digit Count in Range",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Beware of overflow."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countDigitOne(int n) {\n    int ans = 0;\n\n    for (long pow10 = 1; pow10 <= n; pow10 *= 10) {\n      const long divisor = pow10 * 10;\n      const int quotient = n / divisor;\n      const int remainder = n % divisor;\n      if (quotient > 0)\n        ans += quotient * pow10;\n      if (remainder >= pow10)\n        ans += min(remainder - pow10 + 1, pow10);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countDigitOne(int n) {\n    int ans = 0;\n\n    for (long pow10 = 1; pow10 <= n; pow10 *= 10) {\n      final long divisor = pow10 * 10;\n      final int quotient = (int) (n / divisor);\n      final int remainder = (int) (n % divisor);\n      if (quotient > 0)\n        ans += quotient * pow10;\n      if (remainder >= pow10)\n        ans += Math.min(remainder - pow10 + 1, pow10);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countDigitOne(self, n: int) -> int:\n    ans = 0\n\n    pow10 = 1\n    while pow10 <= n:\n      divisor = pow10 * 10\n      quotient = n // divisor\n      remainder = n % divisor\n      if quotient > 0:\n        ans += quotient * pow10\n      if remainder >= pow10:\n        ans += min(remainder - pow10 + 1, pow10)\n      pow10 *= 10\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}