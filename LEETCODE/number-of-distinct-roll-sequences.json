{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2318",
            "title": "Number of Distinct Roll Sequences",
            "titleSlug": "number-of-distinct-roll-sequences",
            "content": "<p>You are given an integer <code>n</code>. You roll a fair 6-sided dice <code>n</code> times. Determine the total number of <strong>distinct</strong> sequences of rolls possible such that the following conditions are satisfied:</p>\n\n<ol>\n\t<li>The <strong>greatest common divisor</strong> of any <strong>adjacent</strong> values in the sequence is equal to <code>1</code>.</li>\n\t<li>There is <strong>at least</strong> a gap of <code>2</code> rolls between <strong>equal</strong> valued rolls. More formally, if the value of the <code>i<sup>th</sup></code> roll is <strong>equal</strong> to the value of the <code>j<sup>th</sup></code> roll, then <code>abs(i - j) &gt; 2</code>.</li>\n</ol>\n\n<p>Return <em>the<strong> total number</strong> of distinct sequences possible</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Two sequences are considered distinct if at least one element is different.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 184\n<strong>Explanation:</strong> Some of the possible sequences are (1, 2, 3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc.\nSome invalid sequences are (1, 2, 1, 3), (1, 2, 3, 6).\n(1, 2, 1, 3) is invalid since the first and third roll have an equal value and abs(1 - 3) = 2 (i and j are 1-indexed).\n(1, 2, 3, 6) is invalid since the greatest common divisor of 3 and 6 = 3.\nThere are a total of 184 distinct sequences possible, so we return 184.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> Some of the possible sequences are (1, 2), (2, 1), (3, 2).\nSome invalid sequences are (3, 6), (2, 4) since the greatest common divisor is not equal to 1.\nThere are a total of 22 distinct sequences possible, so we return 22.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 418,
            "dislikes": 18,
            "similarQuestions": "[{\"title\": \"Dice Roll Simulation\", \"titleSlug\": \"dice-roll-simulation\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Paint House III\", \"titleSlug\": \"paint-house-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"10K\", \"totalSubmission\": \"17.6K\", \"totalAcceptedRaw\": 9966, \"totalSubmissionRaw\": 17552, \"acRate\": \"56.8%\"}",
            "hints": [
                "Can you think of a DP solution?",
                "Consider a state that remembers the last 1 or 2 rolls.",
                "Do you need to consider the last 3 rolls?"
            ],
            "rephrased": {
                "body": "Given an integer `n`, you roll a fair 6-sided dice `n` times. Determine the number of distinct sequences of rolls possible, modulo 10<sup>9</sup> + 7, such that:\n\n1.  The greatest common divisor (GCD) of any adjacent values in the sequence is equal to 1.\n2.  There is at least a gap of 2 rolls between equal-valued rolls. That is, if the i-th roll is equal to the j-th roll, then abs(i - j) > 2.",
                "constraints": [
                    "1 <= n <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "184",
                        "explanation": "For n = 4, some valid sequences are (1, 2, 3, 4), (6, 1, 2, 3), and (1, 2, 3, 1).  An example of an invalid sequence is (1, 2, 1, 3) because the first and third rolls are equal, and abs(1 - 3) = 2, violating the second condition. Another invalid sequence is (1, 2, 3, 6) because gcd(3, 6) = 3, violating the first condition.  There are a total of 184 distinct sequences possible."
                    },
                    {
                        "input": "2",
                        "output": "22",
                        "explanation": "For n = 2, some valid sequences are (1, 2), (2, 1), and (3, 2). An invalid sequence is (3, 6) because gcd(3, 6) = 3. Another invalid sequence is (2, 4) because gcd(2,4) = 2. There are a total of 22 distinct sequences possible."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "dice-roll-simulation",
                "title": "Dice Roll Simulation",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "paint-house-iii",
                "title": "Paint House III",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can you think of a DP solution?",
            "Consider a state that remembers the last 1 or 2 rolls.",
            "Do you need to consider the last 3 rolls?"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int distinctSequences(int n) {\n    // dp[n][prev][prevPrev] := # of distinct sequences for n dices with\n    // `prev` and `prevPrev`\n    dp.resize(n + 1, vector<vector<int>>(7, vector<int>(7)));\n    return distinctSequences(n, 0, 0);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  vector<vector<vector<int>>> dp;\n\n  int distinctSequences(int n, int prev, int prevPrev) {\n    if (n == 0)\n      return 1;\n    if (dp[n][prev][prevPrev])\n      return dp[n][prev][prevPrev];\n\n    for (int dice = 1; dice <= 6; ++dice)\n      if (dice != prev && dice != prevPrev &&\n          (prev == 0 || gcd(dice, prev) == 1)) {\n        dp[n][prev][prevPrev] += distinctSequences(n - 1, dice, prev);\n        dp[n][prev][prevPrev] %= kMod;\n      }\n\n    return dp[n][prev][prevPrev];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int distinctSequences(int n) {\n    // dp[n][prev][prevPrev] := # of distinct sequences for n dices with\n    // `prev` and `prevPrev`\n    dp = new int[n + 1][7][7];\n    return distinctSequences(n, 0, 0);\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private int[][][] dp;\n\n  private int distinctSequences(int n, int prev, int prevPrev) {\n    if (n == 0)\n      return 1;\n    if (dp[n][prev][prevPrev] > 0)\n      return dp[n][prev][prevPrev];\n\n    for (int dice = 1; dice <= 6; ++dice)\n      if (dice != prev && dice != prevPrev && (prev == 0 || gcd(dice, prev) == 1)) {\n        dp[n][prev][prevPrev] += distinctSequences(n - 1, dice, prev);\n        dp[n][prev][prevPrev] %= kMod;\n      }\n\n    return dp[n][prev][prevPrev];\n  }\n\n  private int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def distinctSequences(self, n: int) -> int:\n    kMod = 1_000_000_007\n\n    # Dp(n, prev, prevPrev ):= # of distinct sequences for n dices with\n    # `prev` and `prevPrev`\n    @functools.lru_cache(None)\n    def dp(n: int, prev: int, prevPrev: int) -> int:\n      if n == 0:\n        return 1\n\n      ans = 0\n      for dice in range(1, 7):\n        if dice != prev and dice != prevPrev and \\\n                (prev == 0 or math.gcd(dice, prev) == 1):\n          ans += dp(n - 1, dice, prev)\n          ans %= kMod\n      return ans\n\n    return dp(n, 0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}