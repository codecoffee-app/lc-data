{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1020",
            "title": "Number of Enclaves",
            "titleSlug": "number-of-enclaves",
            "content": "<p>You are given an <code>m x n</code> binary matrix <code>grid</code>, where <code>0</code> represents a sea cell and <code>1</code> represents a land cell.</p>\n\n<p>A <strong>move</strong> consists of walking from one land cell to another adjacent (<strong>4-directionally</strong>) land cell or walking off the boundary of the <code>grid</code>.</p>\n\n<p>Return <em>the number of land cells in</em> <code>grid</code> <em>for which we cannot walk off the boundary of the grid in any number of <strong>moves</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/18/enclaves1.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/18/enclaves2.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All 1s are either on the boundary or can reach the boundary.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 500</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3829,
            "dislikes": 71,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"195.7K\", \"totalSubmission\": \"284.5K\", \"totalAcceptedRaw\": 195700, \"totalSubmissionRaw\": 284528, \"acRate\": \"68.8%\"}",
            "hints": [
                "Can you model this problem as a graph problem?  Create n * m + 1 nodes where n * m nodes represents each cell of the map and one extra node to represent the exterior of the map.",
                "In the map add edges between neighbors on land cells. And add edges between the exterior and land nodes which are in the boundary.\r\nReturn as answer the number of nodes that are not reachable from the exterior node."
            ],
            "rephrased": {
                "body": "Given an `m x n` binary matrix `grid`, where `0` represents a sea cell and `1` represents a land cell. A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the `grid`.  Return the number of land cells in `grid` for which it is impossible to reach the boundary of the grid in any number of moves.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 500",
                    "grid[i][j] is either 0 or 1."
                ],
                "testcases": [
                    {
                        "input": "[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]",
                        "output": "3",
                        "explanation": "There are three land cells (value 1) that are completely surrounded by sea cells (value 0). One land cell is connected to the boundary and can be reached from it."
                    },
                    {
                        "input": "[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]",
                        "output": "0",
                        "explanation": "All land cells are either on the boundary or can reach the boundary. Therefore, there are no enclosed land cells."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can you model this problem as a graph problem?  Create n * m + 1 nodes where n * m nodes represents each cell of the map and one extra node to represent the exterior of the map.",
            "In the map add edges between neighbors on land cells. And add edges between the exterior and land nodes which are in the boundary.\r\nReturn as answer the number of nodes that are not reachable from the exterior node."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numEnclaves(vector<vector<int>>& A) {\n    const int m = A.size();\n    const int n = A[0].size();\n\n    // Remove lands connected to edge\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (i * j == 0 || i == m - 1 || j == n - 1)\n          if (A[i][j] == 1)\n            dfs(A, i, j);\n\n    return accumulate(A.begin(), A.end(), 0, [](int s, vector<int>& row) {\n      return s + accumulate(row.begin(), row.end(), 0);\n    });\n  }\n\n private:\n  void dfs(vector<vector<int>>& A, int i, int j) {\n    if (i < 0 || i == A.size() || j < 0 || j == A[0].size())\n      return;\n    if (A[i][j] == 0)\n      return;\n\n    A[i][j] = 0;\n    dfs(A, i + 1, j);\n    dfs(A, i - 1, j);\n    dfs(A, i, j + 1);\n    dfs(A, i, j - 1);\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numEnclaves(int[][] A) {\n    final int m = A.length;\n    final int n = A[0].length;\n\n    // Remove lands connected to edge\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (i * j == 0 || i == m - 1 || j == n - 1)\n          if (A[i][j] == 1)\n            dfs(A, i, j);\n\n    int ans = 0;\n\n    for (int[] row : A)\n      ans += Arrays.stream(row).sum();\n\n    return ans;\n  }\n\n  private void dfs(int[][] A, int i, int j) {\n    if (i < 0 || i == A.length || j < 0 || j == A[0].length)\n      return;\n    if (A[i][j] == 0)\n      return;\n\n    A[i][j] = 0;\n    dfs(A, i + 1, j);\n    dfs(A, i - 1, j);\n    dfs(A, i, j + 1);\n    dfs(A, i, j - 1);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}