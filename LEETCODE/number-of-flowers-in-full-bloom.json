{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2251",
            "title": "Number of Flowers in Full Bloom",
            "titleSlug": "number-of-flowers-in-full-bloom",
            "content": "<p>You are given a <strong>0-indexed</strong> 2D integer array <code>flowers</code>, where <code>flowers[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> means the <code>i<sup>th</sup></code> flower will be in <strong>full bloom</strong> from <code>start<sub>i</sub></code> to <code>end<sub>i</sub></code> (<strong>inclusive</strong>). You are also given a <strong>0-indexed</strong> integer array <code>people</code> of size <code>n</code>, where <code>people[i]</code> is the time that the <code>i<sup>th</sup></code> person will arrive to see the flowers.</p>\n\n<p>Return <em>an integer array </em><code>answer</code><em> of size </em><code>n</code><em>, where </em><code>answer[i]</code><em> is the <strong>number</strong> of flowers that are in full bloom when the </em><code>i<sup>th</sup></code><em> person arrives.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/02/ex1new.jpg\" style=\"width: 550px; height: 216px;\" />\n<pre>\n<strong>Input:</strong> flowers = [[1,6],[3,7],[9,12],[4,13]], people = [2,3,7,11]\n<strong>Output:</strong> [1,2,2,2]\n<strong>Explanation: </strong>The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/02/ex2new.jpg\" style=\"width: 450px; height: 195px;\" />\n<pre>\n<strong>Input:</strong> flowers = [[1,10],[3,3]], people = [3,3,2]\n<strong>Output:</strong> [2,2,1]\n<strong>Explanation:</strong> The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= flowers.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>flowers[i].length == 2</code></li>\n\t<li><code>1 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= people.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= people[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1553,
            "dislikes": 39,
            "similarQuestions": "[{\"title\": \"Meeting Rooms II\", \"titleSlug\": \"meeting-rooms-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Interval to Include Each Query\", \"titleSlug\": \"minimum-interval-to-include-each-query\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"73.2K\", \"totalSubmission\": \"128.5K\", \"totalAcceptedRaw\": 73177, \"totalSubmissionRaw\": 128542, \"acRate\": \"56.9%\"}",
            "hints": [
                "Notice that for any given time t, the number of flowers blooming at time t is equal to the number of flowers that have started blooming minus the number of flowers that have already stopped blooming.",
                "We can obtain these values efficiently using binary search.",
                "We can store the starting times in sorted order, which then allows us to binary search to find how many flowers have started blooming for a given time t.",
                "We do the same for the ending times to find how many flowers have stopped blooming at time t."
            ],
            "rephrased": {
                "body": "Given a list of flower blooming periods and arrival times of people, determine the number of flowers in full bloom for each person's arrival.",
                "constraints": [
                    "1 <= flowers.length <= 5 * 10^4",
                    "flowers[i].length == 2",
                    "1 <= start_i <= end_i <= 10^9",
                    "1 <= people.length <= 5 * 10^4",
                    "1 <= people[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "flowers = [[1,6],[3,7],[9,12],[4,13]], people = [2,3,7,11]",
                        "output": "[1,2,2,2]",
                        "explanation": "When the first person arrives at time 2, only flower [1,6] is in bloom. When the second person arrives at time 3, flowers [1,6] and [3,7] are in bloom. At time 7, flowers [1,6] blooms until 6, so the flowers that are in bloom is only [3,7]. When the third person arrives at time 7, flowers [3,7] and [9,12] are in bloom. When the fourth person arrives at time 11, flowers [9,12] and [4,13] are in bloom."
                    },
                    {
                        "input": "flowers = [[1,10],[3,3]], people = [3,3,2]",
                        "output": "[2,2,1]",
                        "explanation": "When the first person arrives at time 3, flowers [1,10] and [3,3] are in bloom. When the second person arrives at time 3, flowers [1,10] and [3,3] are in bloom. When the third person arrives at time 2, only flower [1,10] is in bloom."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "meeting-rooms-ii",
                "title": "Meeting Rooms II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-interval-to-include-each-query",
                "title": "Minimum Interval to Include Each Query",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Notice that for any given time t, the number of flowers blooming at time t is equal to the number of flowers that have started blooming minus the number of flowers that have already stopped blooming.",
            "We can obtain these values efficiently using binary search.",
            "We can store the starting times in sorted order, which then allows us to binary search to find how many flowers have started blooming for a given time t.",
            "We do the same for the ending times to find how many flowers have stopped blooming at time t."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> fullBloomFlowers(vector<vector<int>>& flowers,\n                               vector<int>& persons) {\n    vector<int> ans;\n    vector<int> starts;\n    vector<int> ends;\n\n    for (const vector<int>& flower : flowers) {\n      starts.push_back(flower[0]);\n      ends.push_back(flower[1]);\n    }\n\n    std::ranges::sort(starts);\n    std::ranges::sort(ends);\n\n    for (const int p : persons) {\n      const int started =\n          upper_bound(starts.begin(), starts.end(), p) - starts.begin();\n      const int ended = lower_bound(ends.begin(), ends.end(), p) - ends.begin();\n      ans.push_back(started - ended);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] fullBloomFlowers(int[][] flowers, int[] persons) {\n    int[] ans = new int[persons.length];\n    List<Integer> starts = new ArrayList<>();\n    List<Integer> ends = new ArrayList<>();\n\n    for (int[] flower : flowers) {\n      starts.add(flower[0]);\n      ends.add(flower[1]);\n    }\n\n    Collections.sort(starts);\n    Collections.sort(ends);\n\n    for (int i = 0; i < persons.length; ++i) {\n      final int started = firstGreater(starts, persons[i]);\n      final int ended = firstGreaterEqual(ends, persons[i]);\n      ans[i] = started - ended;\n    }\n\n    return ans;\n  }\n\n  // Finds the first index l s.t A.get(l) > target.\n  // Returns A.size() if can't find.\n  private int firstGreater(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) > target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n\n  // Find the first index l s.t A.get(l) >= target\n  // Returns A.size() if can't find\n  private int firstGreaterEqual(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def fullBloomFlowers(self, flowers: List[List[int]], persons: List[int]) -> List[int]:\n    starts = sorted(s for s, _ in flowers)\n    ends = sorted(e for _, e in flowers)\n    return [bisect.bisect_right(starts, person) -\n            bisect.bisect_left(ends, person)\n            for person in persons]\n",
                "lang_text": "py"
            }
        }
    }
}