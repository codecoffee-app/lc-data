{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1530",
            "title": "Number of Good Leaf Nodes Pairs",
            "titleSlug": "number-of-good-leaf-nodes-pairs",
            "content": "<p>You are given the <code>root</code> of a binary tree and an integer <code>distance</code>. A pair of two different <strong>leaf</strong> nodes of a binary tree is said to be good if the length of <strong>the shortest path</strong> between them is less than or equal to <code>distance</code>.</p>\n\n<p>Return <em>the number of good leaf node pairs</em> in the tree.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/09/e1.jpg\" style=\"width: 250px; height: 250px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,4], distance = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/09/e2.jpg\" style=\"width: 250px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,6,7], distance = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The only good pair is [2,5].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the <code>tree</code> is in the range <code>[1, 2<sup>10</sup>].</code></li>\n\t<li><code>1 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>1 &lt;= distance &lt;= 10</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1679,
            "dislikes": 48,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"40.9K\", \"totalSubmission\": \"65.7K\", \"totalAcceptedRaw\": 40863, \"totalSubmissionRaw\": 65730, \"acRate\": \"62.2%\"}",
            "hints": [
                "Start DFS from each leaf node. stop the DFS when the number of steps done > distance.",
                "If you reach another leaf node within distance steps, add 1 to the answer.",
                "Note that all pairs will be counted twice so divide the answer by 2."
            ],
            "rephrased": {
                "body": "Given the root of a binary tree and an integer distance, determine the number of pairs of distinct leaf nodes where the length of the shortest path between them is less than or equal to distance.  A 'good' leaf node pair satisfies this condition.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 2<sup>10</sup>].",
                    "1 <= Node.val <= 100",
                    "1 <= distance <= 10"
                ],
                "testcases": [
                    {
                        "input": "root = [1,2,3,null,4], distance = 3",
                        "output": "1",
                        "explanation": "The leaf nodes are 3 and 4. The shortest path between them has length 3, which is less than or equal to the given distance. Thus, there is one good pair."
                    },
                    {
                        "input": "root = [1,2,3,4,5,6,7], distance = 3",
                        "output": "2",
                        "explanation": "The good pairs are [4, 5] and [6, 7], each with a shortest path of length 2. The pair [4, 6] is not good because their shortest path is of length 4."
                    },
                    {
                        "input": "root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3",
                        "output": "1",
                        "explanation": "The only good pair is [2, 5]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Start DFS from each leaf node. stop the DFS when the number of steps done > distance.",
            "If you reach another leaf node within distance steps, add 1 to the answer.",
            "Note that all pairs will be counted twice so divide the answer by 2."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countPairs(TreeNode* root, int distance) {\n    int ans = 0;\n\n    dfs(root, distance, ans);\n\n    return ans;\n  }\n\n private:\n  vector<int> dfs(TreeNode* root, int distance, int& ans) {\n    vector<int> d(distance + 1);  // {distance: # of leaf nodes}\n    if (root == nullptr)\n      return d;\n    if (root->left == nullptr && root->right == nullptr) {\n      d[0] = 1;\n      return d;\n    }\n\n    const vector<int> dl = dfs(root->left, distance, ans);\n    const vector<int> dr = dfs(root->right, distance, ans);\n\n    for (int i = 0; i < distance; ++i)\n      for (int j = 0; j < distance; ++j)\n        if (i + j + 2 <= distance)\n          ans += dl[i] * dr[j];\n\n    for (int i = 0; i < distance; ++i)\n      d[i + 1] = dl[i] + dr[i];\n\n    return d;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countPairs(TreeNode root, int distance) {\n    dfs(root, distance);\n\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private int[] dfs(TreeNode root, int distance) {\n    int[] d = new int[distance + 1]; // {distance: # of leaf nodes}\n    if (root == null)\n      return d;\n    if (root.left == null && root.right == null) {\n      d[0] = 1;\n      return d;\n    }\n\n    int[] dl = dfs(root.left, distance);\n    int[] dr = dfs(root.right, distance);\n\n    for (int i = 0; i < distance; ++i)\n      for (int j = 0; j < distance; ++j)\n        if (i + j + 2 <= distance)\n          ans += dl[i] * dr[j];\n\n    for (int i = 0; i < distance; ++i)\n      d[i + 1] = dl[i] + dr[i];\n\n    return d;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}