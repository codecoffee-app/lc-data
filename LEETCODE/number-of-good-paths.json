{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2421",
            "title": "Number of Good Paths",
            "titleSlug": "number-of-good-paths",
            "content": "<p>There is a tree (i.e. a connected, undirected graph with no cycles) consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> and exactly <code>n - 1</code> edges.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>vals</code> of length <code>n</code> where <code>vals[i]</code> denotes the value of the <code>i<sup>th</sup></code> node. You are also given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an <strong>undirected</strong> edge connecting nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p>A <strong>good path</strong> is a simple path that satisfies the following conditions:</p>\n\n<ol>\n\t<li>The starting node and the ending node have the <strong>same</strong> value.</li>\n\t<li>All nodes between the starting node and the ending node have values <strong>less than or equal to</strong> the starting node (i.e. the starting node&#39;s value should be the maximum value along the path).</li>\n</ol>\n\n<p>Return <em>the number of distinct good paths</em>.</p>\n\n<p>Note that a path and its reverse are counted as the <strong>same</strong> path. For example, <code>0 -&gt; 1</code> is considered to be the same as <code>1 -&gt; 0</code>. A single node is also considered as a valid path.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/f9caaac15b383af9115c5586779dec5.png\" style=\"width: 400px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 5 good paths consisting of a single node.\nThere is 1 additional good path: 1 -&gt; 0 -&gt; 2 -&gt; 4.\n(The reverse path 4 -&gt; 2 -&gt; 0 -&gt; 1 is treated as the same as 1 -&gt; 0 -&gt; 2 -&gt; 4.)\nNote that 0 -&gt; 2 -&gt; 3 is not a good path because vals[2] &gt; vals[0].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/149d3065ec165a71a1b9aec890776ff.png\" style=\"width: 273px; height: 350px;\" />\n<pre>\n<strong>Input:</strong> vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> There are 5 good paths consisting of a single node.\nThere are 2 additional good paths: 0 -&gt; 1 and 2 -&gt; 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/31705e22af3d9c0a557459bc7d1b62d.png\" style=\"width: 100px; height: 88px;\" />\n<pre>\n<strong>Input:</strong> vals = [1], edges = []\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The tree consists of only one node, so there is one good path.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == vals.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= vals[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2132,
            "dislikes": 102,
            "similarQuestions": "[{\"title\": \"Checking Existence of Edge Length Limited Paths\", \"titleSlug\": \"checking-existence-of-edge-length-limited-paths\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Checking Existence of Edge Length Limited Paths II\", \"titleSlug\": \"checking-existence-of-edge-length-limited-paths-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Nice Substring\", \"titleSlug\": \"longest-nice-substring\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Count Good Triplets in an Array\", \"titleSlug\": \"count-good-triplets-in-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count Pairs Of Similar Strings\", \"titleSlug\": \"count-pairs-of-similar-strings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"52.6K\", \"totalSubmission\": \"92.8K\", \"totalAcceptedRaw\": 52552, \"totalSubmissionRaw\": 92821, \"acRate\": \"56.6%\"}",
            "hints": [
                "Can you process nodes from smallest to largest value?",
                "Try to build the graph from nodes with the smallest value to the largest value.",
                "May union find help?"
            ],
            "rephrased": {
                "body": "Given a tree with `n` nodes (numbered 0 to n-1) and an array `vals` where `vals[i]` is the value of the i-th node, and a 2D array `edges` representing the tree's edges, find the number of distinct 'good paths'.  A 'good path' is a simple path where the starting and ending nodes have the same value, and all nodes in between have values less than or equal to that of the starting/ending node. A single node also counts as a valid path. Note that a path and its reverse are considered the same.",
                "constraints": [
                    "n == vals.length",
                    "1 <= n <= 3 * 10^4",
                    "0 <= vals[i] <= 10^5",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= a_i, b_i < n",
                    "a_i != b_i",
                    "edges represents a valid tree."
                ],
                "testcases": [
                    {
                        "input": "vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]",
                        "output": "6",
                        "explanation": "There are 5 good paths consisting of single nodes.  The additional good path is 1 -> 0 -> 2 -> 4. Path 0 -> 2 -> 3 is invalid because vals[2] > vals[0]."
                    },
                    {
                        "input": "vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]",
                        "output": "7",
                        "explanation": "There are 5 good paths consisting of single nodes. The additional good paths are 0 -> 1 and 2 -> 3."
                    },
                    {
                        "input": "vals = [1], edges = []",
                        "output": "1",
                        "explanation": "The tree has only one node, so there's one good path."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "checking-existence-of-edge-length-limited-paths",
                "title": "Checking Existence of Edge Length Limited Paths",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "checking-existence-of-edge-length-limited-paths-ii",
                "title": "Checking Existence of Edge Length Limited Paths II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "longest-nice-substring",
                "title": "Longest Nice Substring",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-good-triplets-in-an-array",
                "title": "Count Good Triplets in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "count-pairs-of-similar-strings",
                "title": "Count Pairs Of Similar Strings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can you process nodes from smallest to largest value?",
            "Try to build the graph from nodes with the smallest value to the largest value.",
            "May union find help?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n};\n\nclass Solution {\n public:\n  int numberOfGoodPaths(vector<int>& vals, vector<vector<int>>& edges) {\n    const int n = vals.size();\n    int ans = n;\n    UnionFind uf(n);\n    vector<vector<int>> tree(n);\n    map<int, vector<int>> valToNodes;\n\n    for (int i = 0; i < vals.size(); ++i)\n      valToNodes[vals[i]].push_back(i);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      if (vals[v] <= vals[u])\n        tree[u].push_back(v);\n      if (vals[u] <= vals[v])\n        tree[v].push_back(u);\n    }\n\n    for (const auto& [val, nodes] : valToNodes) {\n      for (const int u : nodes)\n        for (const int v : tree[u])\n          uf.unionByRank(u, v);\n      unordered_map<int, int> rootCount;\n      for (const int u : nodes)\n        ++rootCount[uf.find(u)];\n      // For each group, C(count, 2) := count * (count - 1) / 2\n      for (const auto& [_, count] : rootCount)\n        ans += count * (count - 1) / 2;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  private int[] id;\n  private int[] rank;\n}\n\nclass Solution {\n  public int numberOfGoodPaths(int[] vals, int[][] edges) {\n    final int n = vals.length;\n    int ans = n;\n    UnionFind uf = new UnionFind(n);\n    List<Integer>[] tree = new List[n];\n    Map<Integer, List<Integer>> valToNodes = new TreeMap<>();\n\n    for (int i = 0; i < n; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      if (vals[v] <= vals[u])\n        tree[u].add(v);\n      if (vals[u] <= vals[v])\n        tree[v].add(u);\n    }\n\n    for (int i = 0; i < vals.length; ++i) {\n      valToNodes.putIfAbsent(vals[i], new ArrayList<>());\n      valToNodes.get(vals[i]).add(i);\n    }\n\n    for (Map.Entry<Integer, List<Integer>> entry : valToNodes.entrySet()) {\n      final int val = entry.getKey();\n      List<Integer> nodes = entry.getValue();\n      for (final int u : nodes)\n        for (final int v : tree[u])\n          uf.unionByRank(u, v);\n      Map<Integer, Integer> rootCount = new HashMap<>();\n      for (final int u : nodes)\n        rootCount.merge(uf.find(u), 1, Integer::sum);\n      // For each group, C(count, 2) := count * (count - 1) / 2\n      for (final int count : rootCount.values())\n        ans += count * (count - 1) / 2;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}