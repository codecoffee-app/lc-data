{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1525",
            "title": "Number of Good Ways to Split a String",
            "titleSlug": "number-of-good-ways-to-split-a-string",
            "content": "<p>You are given a string <code>s</code>.</p>\n\n<p>A split is called <strong>good</strong> if you can split <code>s</code> into two non-empty strings <code>s<sub>left</sub></code> and <code>s<sub>right</sub></code> where their concatenation is equal to <code>s</code> (i.e., <code>s<sub>left</sub> + s<sub>right</sub> = s</code>) and the number of distinct letters in <code>s<sub>left</sub></code> and <code>s<sub>right</sub></code> is the same.</p>\n\n<p>Return <em>the number of <strong>good splits</strong> you can make in <code>s</code></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aacaba&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 5 ways to split <code>&quot;aacaba&quot;</code> and 2 of them are good. \n(&quot;a&quot;, &quot;acaba&quot;) Left string and right string contains 1 and 3 different letters respectively.\n(&quot;aa&quot;, &quot;caba&quot;) Left string and right string contains 1 and 3 different letters respectively.\n(&quot;aac&quot;, &quot;aba&quot;) Left string and right string contains 2 and 2 different letters respectively (good split).\n(&quot;aaca&quot;, &quot;ba&quot;) Left string and right string contains 2 and 2 different letters respectively (good split).\n(&quot;aacab&quot;, &quot;a&quot;) Left string and right string contains 3 and 1 different letters respectively.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Split the string as follows (&quot;ab&quot;, &quot;cd&quot;).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1988,
            "dislikes": 46,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"96.8K\", \"totalSubmission\": \"141.3K\", \"totalAcceptedRaw\": 96824, \"totalSubmissionRaw\": 141325, \"acRate\": \"68.5%\"}",
            "hints": [
                "Use two HashMap to store the counts of distinct letters in the left and right substring divided by the current index."
            ],
            "rephrased": {
                "body": "Given a string `s`, a split is considered **good** if dividing `s` into two non-empty substrings, `s_left` and `s_right`, results in `s_left + s_right = s` and the number of distinct characters in `s_left` is equal to the number of distinct characters in `s_right`.  Return the number of **good splits** that can be made in `s`.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "aacaba",
                        "output": 2,
                        "explanation": "There are 5 possible splits of \"aacaba\".  The good splits are (\"aac\", \"aba\") and (\"aaca\", \"ba\"), where both substrings in each split have the same number of distinct characters (2)."
                    },
                    {
                        "input": "abcd",
                        "output": 1,
                        "explanation": "The only good split is (\"ab\", \"cd\"), where both substrings have 2 distinct characters."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use two HashMap to store the counts of distinct letters in the left and right substring divided by the current index."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numSplits(string s) {\n    const int n = s.length();\n    int ans = 0;\n    vector<int> prefix(n);  // prefix[i] := of unique letters in s[0..i]\n    vector<int> suffix(n);  // suffix[i] := of unique letters in s[i..n)\n    unordered_set<int> seen;\n\n    for (int i = 0; i < n; ++i) {\n      seen.insert(s[i]);\n      prefix[i] = seen.size();\n    }\n\n    seen.clear();\n\n    for (int i = n - 1; i >= 0; --i) {\n      seen.insert(s[i]);\n      suffix[i] = seen.size();\n    }\n\n    for (int i = 0; i + 1 < n; ++i)\n      if (prefix[i] == suffix[i + 1])\n        ++ans;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numSplits(String s) {\n    final int n = s.length();\n    int ans = 0;\n    int[] prefix = new int[n];\n    int[] suffix = new int[n];\n    Set<Character> seen = new HashSet<>();\n\n    for (int i = 0; i < n; ++i) {\n      seen.add(s.charAt(i));\n      prefix[i] = seen.size();\n    }\n\n    seen.clear();\n\n    for (int i = n - 1; i >= 0; --i) {\n      seen.add(s.charAt(i));\n      suffix[i] = seen.size();\n    }\n\n    for (int i = 0; i + 1 < n; ++i)\n      if (prefix[i] == suffix[i + 1])\n        ++ans;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numSplits(self, s: str) -> int:\n    n = len(s)\n    ans = 0\n    seen = set()\n    prefix = [0] * n\n    suffix = [0] * n\n\n    for i in range(n):\n      seen.add(s[i])\n      prefix[i] = len(seen)\n\n    seen.clear()\n\n    for i in reversed(range(n)):\n      seen.add(s[i])\n      suffix[i] = len(seen)\n\n    for i in range(n - 1):\n      if prefix[i] == suffix[i + 1]:\n        ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}