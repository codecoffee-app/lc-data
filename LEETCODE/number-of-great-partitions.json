{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2518",
            "title": "Number of Great Partitions",
            "titleSlug": "number-of-great-partitions",
            "content": "<p>You are given an array <code>nums</code> consisting of <strong>positive</strong> integers and an integer <code>k</code>.</p>\n\n<p><strong>Partition</strong> the array into two ordered <strong>groups</strong> such that each element is in exactly <strong>one</strong> group. A partition is called great if the <strong>sum</strong> of elements of each group is greater than or equal to <code>k</code>.</p>\n\n<p>Return <em>the number of <strong>distinct</strong> great partitions</em>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Two partitions are considered distinct if some element <code>nums[i]</code> is in different groups in the two partitions.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4], k = 4\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The great partitions are: ([1,2,3], [4]), ([1,3], [2,4]), ([1,4], [2,3]), ([2,3], [1,4]), ([2,4], [1,3]) and ([4], [1,2,3]).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3,3], k = 4\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no great partitions for this array.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,6], k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can either put nums[0] in the first partition or in the second partition.\nThe great partitions will be ([6], [6]) and ([6], [6]).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length, k &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 408,
            "dislikes": 8,
            "similarQuestions": "[{\"title\": \"Palindrome Partitioning II\", \"titleSlug\": \"palindrome-partitioning-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Partition Equal Subset Sum\", \"titleSlug\": \"partition-equal-subset-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find the Punishment Number of an Integer\", \"titleSlug\": \"find-the-punishment-number-of-an-integer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.6K\", \"totalSubmission\": \"24.2K\", \"totalAcceptedRaw\": 7568, \"totalSubmissionRaw\": 24242, \"acRate\": \"31.2%\"}",
            "hints": [
                "If the sum of the array is smaller than 2*k, then it is impossible to find a great partition.",
                "Solve the reverse problem, that is, find the number of partitions where the sum of elements of at least one of the two groups is smaller than k."
            ],
            "rephrased": {
                "body": "Given an array `nums` of positive integers and an integer `k`, partition the array into two ordered groups such that each element belongs to exactly one group. A partition is considered 'great' if the sum of elements in each group is greater than or equal to `k`.  Return the number of distinct great partitions modulo 10<sup>9</sup> + 7. Two partitions are distinct if some element `nums[i]` is in different groups in the two partitions.",
                "constraints": [
                    "1 <= nums.length, k <= 1000",
                    "1 <= nums[i] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3,4], k = 4",
                        "output": "6",
                        "explanation": "The possible great partitions are: ([1,2,3], [4]), ([1,3], [2,4]), ([1,4], [2,3]), ([2,3], [1,4]), ([2,4], [1,3]), and ([4], [1,2,3])."
                    },
                    {
                        "input": "nums = [3,3,3], k = 4",
                        "output": "0",
                        "explanation": "There are no great partitions for this array because no matter how the array is split, at least one of the groups will have a sum less than 4."
                    },
                    {
                        "input": "nums = [6,6], k = 2",
                        "output": "2",
                        "explanation": "The possible great partitions are ([6], [6]) and ([6], [6]).  Essentially, either the first element can be in the first group, or in the second group."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-partitioning-ii",
                "title": "Palindrome Partitioning II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "partition-equal-subset-sum",
                "title": "Partition Equal Subset Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-the-punishment-number-of-an-integer",
                "title": "Find the Punishment Number of an Integer",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If the sum of the array is smaller than 2*k, then it is impossible to find a great partition.",
            "Solve the reverse problem, that is, find the number of partitions where the sum of elements of at least one of the two groups is smaller than k."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countPartitions(vector<int>& nums, int k) {\n    constexpr int kMod = 1'000'000'007;\n    const long sum = accumulate(nums.begin(), nums.end(), 0L);\n    long ans = modPow(2, nums.size(), kMod);  // 2^n % kMod\n    vector<long> dp(k + 1);\n    dp[0] = 1;\n\n    for (const int num : nums)\n      for (int i = k; i >= num; --i) {\n        dp[i] += dp[i - num];\n        dp[i] %= kMod;\n      }\n\n    // Minus cases that're not satisfied.\n    for (int i = 0; i < k; ++i)\n      if (sum - i < k)  // Both group1 and group2 < k\n        ans -= dp[i];\n      else\n        ans -= dp[i] * 2;\n\n    return (ans % kMod + kMod) % kMod;\n  }\n\n private:\n  // Returns x^n % kMod.\n  int modPow(int x, int n, int kMod) {\n    int res = 1;\n    for (int i = 0; i < n; ++i)\n      res = res * x % kMod;\n    return res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countPartitions(int[] nums, int k) {\n    final int kMod = 1_000_000_007;\n    final long sum = Arrays.stream(nums).asLongStream().sum();\n    long ans = modPow(2, nums.length, kMod); // 2^n % kMod\n    long[] dp = new long[k + 1];\n    dp[0] = 1;\n\n    for (final int num : nums)\n      for (int i = k; i >= num; --i) {\n        dp[i] += dp[i - num];\n        dp[i] %= kMod;\n      }\n\n    // Minus cases that're not satisfied.\n    for (int i = 0; i < k; ++i)\n      if (sum - i < k) // Both group1 and group2 < k\n        ans -= dp[i];\n      else\n        ans -= dp[i] * 2;\n\n    return (int) ((ans % kMod + kMod) % kMod);\n  }\n\n  // Returns x^n % kMod.\n  private int modPow(int x, int n, int kMod) {\n    int res = 1;\n    for (int i = 0; i < n; ++i)\n      res = res * x % kMod;\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countPartitions(self, nums: List[int], k: int) -> int:\n    kMod = 1_000_000_007\n    summ = sum(nums)\n    ans = pow(2, len(nums), kMod)  # 2^n % kMod\n    dp = [1] + [0] * k\n\n    for num in nums:\n      for i in range(k, num - 1, -1):\n        dp[i] += dp[i - num]\n        dp[i] %= kMod\n\n    # Minus cases that're not satisfied.\n    for i in range(k):\n      if summ - i < k:  # Both group1 and group2 < k\n        ans -= dp[i]\n      else:\n        ans -= dp[i] * 2\n\n    return ans % kMod\n",
                "lang_text": "py"
            }
        }
    }
}