{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2328",
            "title": "Number of Increasing Paths in a Grid",
            "titleSlug": "number-of-increasing-paths-in-a-grid",
            "content": "<p>You are given an <code>m x n</code> integer matrix <code>grid</code>, where you can move from a cell to any adjacent cell in all <code>4</code> directions.</p>\n\n<p>Return <em>the number of <strong>strictly</strong> <strong>increasing</strong> paths in the grid such that you can start from <strong>any</strong> cell and end at <strong>any</strong> cell. </em>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Two paths are considered different if they do not have exactly the same sequence of visited cells.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/10/griddrawio-4.png\" style=\"width: 181px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,1],[3,4]]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The strictly increasing paths are:\n- Paths with length 1: [1], [1], [3], [4].\n- Paths with length 2: [1 -&gt; 3], [1 -&gt; 4], [3 -&gt; 4].\n- Paths with length 3: [1 -&gt; 3 -&gt; 4].\nThe total number of paths is 4 + 3 + 1 = 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1],[2]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The strictly increasing paths are:\n- Paths with length 1: [1], [2].\n- Paths with length 2: [1 -&gt; 2].\nThe total number of paths is 2 + 1 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1902,
            "dislikes": 42,
            "similarQuestions": "[{\"title\": \"Longest Increasing Path in a Matrix\", \"titleSlug\": \"longest-increasing-path-in-a-matrix\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"All Paths From Source to Target\", \"titleSlug\": \"all-paths-from-source-to-target\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Strictly Increasing Cells in a Matrix\", \"titleSlug\": \"maximum-strictly-increasing-cells-in-a-matrix\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"64.3K\", \"totalSubmission\": \"109.2K\", \"totalAcceptedRaw\": 64270, \"totalSubmissionRaw\": 109177, \"acRate\": \"58.9%\"}",
            "hints": [
                "How can you calculate the number of increasing paths that start from a cell (i, j)? Think about dynamic programming.",
                "Define f(i, j) as the number of increasing paths starting from cell (i, j). Try to find how f(i, j) is related to each of f(i, j+1), f(i, j-1), f(i+1, j) and f(i-1, j)."
            ],
            "rephrased": {
                "body": "Given an m x n integer matrix called `grid`, where movement is allowed to any adjacent cell in all four directions, determine the number of strictly increasing paths within the grid.  A strictly increasing path is defined as a sequence of cells where each cell's value is strictly greater than the previous cell's value.  Paths can start and end at any cell within the grid. Since the answer may be very large, return the result modulo 10^9 + 7.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 1000",
                    "1 <= m * n <= 10^5",
                    "1 <= grid[i][j] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[[1,1],[3,4]]",
                        "output": "8",
                        "explanation": "The strictly increasing paths are:\n- Paths with length 1: [1], [1], [3], [4].\n- Paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4].\n- Paths with length 3: [1 -> 3 -> 4].\nThe total number of paths is 4 + 3 + 1 = 8."
                    },
                    {
                        "input": "[[1],[2]]",
                        "output": "3",
                        "explanation": "The strictly increasing paths are:\n- Paths with length 1: [1], [2].\n- Paths with length 2: [1 -> 2].\nThe total number of paths is 2 + 1 = 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "longest-increasing-path-in-a-matrix",
                "title": "Longest Increasing Path in a Matrix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "all-paths-from-source-to-target",
                "title": "All Paths From Source to Target",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-strictly-increasing-cells-in-a-matrix",
                "title": "Maximum Strictly Increasing Cells in a Matrix",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How can you calculate the number of increasing paths that start from a cell (i, j)? Think about dynamic programming.",
            "Define f(i, j) as the number of increasing paths starting from cell (i, j). Try to find how f(i, j) is related to each of f(i, j+1), f(i, j-1), f(i+1, j) and f(i-1, j)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countPaths(vector<vector<int>>& grid) {\n    m = grid.size();\n    n = grid[0].size();\n    int ans = 0;\n    // dp[i][j] := # of increasing paths starting from (i, j)\n    dp.resize(m, vector<int>(n, -1));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        ans += dfs(grid, i, j);\n        ans %= kMod;\n      }\n\n    return ans;\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  const vector<int> dirs{0, 1, 0, -1, 0};\n  int m;\n  int n;\n  vector<vector<int>> dp;\n\n  int dfs(const vector<vector<int>>& grid, int i, int j) {\n    if (dp[i][j] != -1)\n      return dp[i][j];\n\n    dp[i][j] = 1;  // Current cell contributes 1 length\n\n    for (int k = 0; k < 4; ++k) {\n      const int x = i + dirs[k];\n      const int y = j + dirs[k + 1];\n      if (x < 0 || x == m || y < 0 || y == n)\n        continue;\n      if (grid[x][y] <= grid[i][j])\n        continue;\n      dp[i][j] += dfs(grid, x, y);\n      dp[i][j] %= kMod;\n    }\n\n    return dp[i][j];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countPaths(int[][] grid) {\n    m = grid.length;\n    n = grid[0].length;\n    int ans = 0;\n    // dp[i][j] := # of increasing paths starting from (i, j)\n    dp = new int[m][n];\n    Arrays.stream(dp).forEach(A -> Arrays.fill(A, -1));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        ans += dfs(grid, i, j);\n        ans %= kMod;\n      }\n\n    return ans;\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private final int[] dirs = {0, 1, 0, -1, 0};\n  private int m;\n  private int n;\n  private int[][] dp;\n\n  private int dfs(int[][] grid, int i, int j) {\n    if (dp[i][j] != -1)\n      return dp[i][j];\n\n    dp[i][j] = 1; // Current cell contributes 1 length\n\n    for (int k = 0; k < 4; ++k) {\n      final int x = i + dirs[k];\n      final int y = j + dirs[k + 1];\n      if (x < 0 || x == m || y < 0 || y == n)\n        continue;\n      if (grid[x][y] <= grid[i][j])\n        continue;\n      dp[i][j] += dfs(grid, x, y);\n      dp[i][j] %= kMod;\n    }\n\n    return dp[i][j];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countPaths(self, grid: List[List[int]]) -> int:\n    kMod = 1_000_000_007\n    m = len(grid)\n    n = len(grid[0])\n    dirs = [0, 1, 0, -1, 0]\n\n    # dp(i, j) := # of increasing paths starting from (i, j)\n    @functools.lru_cache(None)\n    def dp(i: int, j: int) -> int:\n      ans = 1  # Current cell contributes 1 length\n      for k in range(4):\n        x = i + dirs[k]\n        y = j + dirs[k + 1]\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if grid[x][y] <= grid[i][j]:\n          continue\n        ans += dp(x, y)\n        ans %= kMod\n      return ans\n\n    return sum(dp(i, j)\n               for i in range(m)\n               for j in range(n)) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}