{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "673",
            "title": "Number of Longest Increasing Subsequence",
            "titleSlug": "number-of-longest-increasing-subsequence",
            "content": "<p>Given an integer array&nbsp;<code>nums</code>, return <em>the number of longest increasing subsequences.</em></p>\n\n<p><strong>Notice</strong> that the sequence has to be <strong>strictly</strong> increasing.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,4,7]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,2,2,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6538,
            "dislikes": 259,
            "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Continuous Increasing Subsequence\", \"titleSlug\": \"longest-continuous-increasing-subsequence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Longest Increasing Subsequence II\", \"titleSlug\": \"longest-increasing-subsequence-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"215K\", \"totalSubmission\": \"450.6K\", \"totalAcceptedRaw\": 215035, \"totalSubmissionRaw\": 450596, \"acRate\": \"47.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, determine the number of longest strictly increasing subsequences.",
                "constraints": [
                    "1 <= nums.length <= 2000",
                    "-10^6 <= nums[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1,3,5,4,7]",
                        "output": "2",
                        "explanation": "The longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]. Both have a length of 4."
                    },
                    {
                        "input": "[2,2,2,2,2]",
                        "output": "5",
                        "explanation": "The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, each consisting of a single element."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-increasing-subsequence",
                "title": "Longest Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "longest-continuous-increasing-subsequence",
                "title": "Longest Continuous Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-increasing-subsequence-ii",
                "title": "Longest Increasing Subsequence II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findNumberOfLIS(vector<int>& nums) {\n    const int n = nums.size();\n    int ans = 0;\n    int maxLength = 0;\n    vector<int> length(n, 1);  // length[i] := LIS's length ending w/ nums[i]\n    vector<int> count(n, 1);   // count[i] := # of the LIS ending w/ nums[i]\n\n    // Calculate length and count arrays\n    for (int i = 0; i < n; ++i)\n      for (int j = 0; j < i; ++j)\n        if (nums[j] < nums[i])\n          if (length[i] < length[j] + 1) {\n            length[i] = length[j] + 1;\n            count[i] = count[j];\n          } else if (length[i] == length[j] + 1) {\n            count[i] += count[j];\n          }\n\n    // Get # of LIS\n    for (int i = 0; i < n; ++i)\n      if (length[i] > maxLength) {\n        maxLength = length[i];\n        ans = count[i];\n      } else if (length[i] == maxLength) {\n        ans += count[i];\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findNumberOfLIS(int[] nums) {\n    final int n = nums.length;\n    int ans = 0;\n    int maxLength = 0;\n    int[] length = new int[n]; // length[i] := LIS's length ending w/ nums[i]\n    int[] count = new int[n];  // count[i] := # of the LIS ending w/ nums[i]\n\n    Arrays.fill(length, 1);\n    Arrays.fill(count, 1);\n\n    // Calculate length and count arrays\n    for (int i = 0; i < n; ++i)\n      for (int j = 0; j < i; ++j)\n        if (nums[j] < nums[i])\n          if (length[i] < length[j] + 1) {\n            length[i] = length[j] + 1;\n            count[i] = count[j];\n          } else if (length[i] == length[j] + 1) {\n            count[i] += count[j];\n          }\n\n    // Get # of LIS\n    for (int i = 0; i < n; ++i)\n      if (length[i] > maxLength) {\n        maxLength = length[i];\n        ans = count[i];\n      } else if (length[i] == maxLength) {\n        ans += count[i];\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findNumberOfLIS(self, nums: List[int]) -> int:\n    ans = 0\n    maxLength = 0\n    length = [1] * len(nums)  # length[i] := LIS's length ending w/ nums[i]\n    count = [1] * len(nums)  # count[i] := # of the LIS ending w/ nums[i]\n\n    # Calculate length and count arrays\n    for i, num in enumerate(nums):\n      for j in range(i):\n        if nums[j] < num:\n          if length[i] < length[j] + 1:\n            length[i] = length[j] + 1\n            count[i] = count[j]\n          elif length[i] == length[j] + 1:\n            count[i] += count[j]\n\n    # Get # Of LIS\n    for i, l in enumerate(length):\n      if l > maxLength:\n        maxLength = l\n        ans = count[i]\n      elif l == maxLength:\n        ans += count[i]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}