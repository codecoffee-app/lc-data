{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "792",
            "title": "Number of Matching Subsequences",
            "titleSlug": "number-of-matching-subsequences",
            "content": "<p>Given a string <code>s</code> and an array of strings <code>words</code>, return <em>the number of</em> <code>words[i]</code> <em>that is a subsequence of</em> <code>s</code>.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p>\n\n<ul>\n\t<li>For example, <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;abcde&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcde&quot;, words = [&quot;a&quot;,&quot;bb&quot;,&quot;acd&quot;,&quot;ace&quot;]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three strings in words that are a subsequence of s: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;dsahjpjauf&quot;, words = [&quot;ahjpjau&quot;,&quot;ja&quot;,&quot;ahbwzgqnuk&quot;,&quot;tnmlanowax&quot;]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 50</code></li>\n\t<li><code>s</code> and <code>words[i]</code> consist of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5383,
            "dislikes": 229,
            "similarQuestions": "[{\"title\": \"Is Subsequence\", \"titleSlug\": \"is-subsequence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Shortest Way to Form String\", \"titleSlug\": \"shortest-way-to-form-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Vowel Substrings of a String\", \"titleSlug\": \"count-vowel-substrings-of-a-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"222.5K\", \"totalSubmission\": \"434.6K\", \"totalAcceptedRaw\": 222519, \"totalSubmissionRaw\": 434607, \"acRate\": \"51.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` and an array of strings `words`, determine the number of strings in `words` that are subsequences of `s`. A subsequence is formed by deleting some or no characters from the original string without altering the order of the remaining characters.",
                "constraints": [
                    "1 <= s.length <= 5 * 10^4",
                    "1 <= words.length <= 5000",
                    "1 <= words[i].length <= 50",
                    "s and words[i] consist of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]",
                        "output": "3",
                        "explanation": "The strings \"a\", \"acd\", and \"ace\" are subsequences of \"abcde\"."
                    },
                    {
                        "input": "s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]",
                        "output": "2",
                        "explanation": "The strings \"ahjpjau\" and \"ja\" are subsequences of \"dsahjpjauf\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "is-subsequence",
                "title": "Is Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "shortest-way-to-form-string",
                "title": "Shortest Way to Form String",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "count-vowel-substrings-of-a-string",
                "title": "Count Vowel Substrings of a String",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  int count = 0;\n  TrieNode() : children(26) {}\n};\n\nclass Solution {\n public:\n  int numMatchingSubseq(string s, vector<string>& words) {\n    for (const string& word : words)\n      insert(word);\n    return dfs(s, 0, root);\n  }\n\n private:\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n\n  void insert(const string& word) {\n    shared_ptr<TrieNode> node = root;\n    for (const char c : word) {\n      const int i = c - 'a';\n      if (node->children[i] == nullptr)\n        node->children[i] = make_shared<TrieNode>();\n      node = node->children[i];\n    }\n    ++node->count;\n  }\n\n  int dfs(const string& s, int i, shared_ptr<TrieNode> node) {\n    int ans = node->count;\n    if (i >= s.length())\n      return ans;\n\n    for (int j = 0; j < 26; ++j)\n      if (node->children[j]) {\n        const int index = s.find('a' + j, i);\n        if (index != -1)\n          ans += dfs(s, index + 1, node->children[j]);\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[26];\n  public int count = 0;\n}\n\nclass Solution {\n  public int numMatchingSubseq(String s, String[] words) {\n    for (final String word : words)\n      insert(word);\n    return dfs(s, 0, root);\n  }\n\n  private TrieNode root = new TrieNode();\n\n  private void insert(final String word) {\n    TrieNode node = root;\n    for (final char c : word.toCharArray()) {\n      final int i = c - 'a';\n      if (node.children[i] == null)\n        node.children[i] = new TrieNode();\n      node = node.children[i];\n    }\n    ++node.count;\n  }\n\n  private int dfs(final String s, int i, TrieNode node) {\n    int ans = node.count;\n    if (i >= s.length())\n      return ans;\n\n    for (int j = 0; j < 26; ++j)\n      if (node.children[j] != null) {\n        final int index = s.indexOf('a' + j, i);\n        if (index != -1)\n          ans += dfs(s, index + 1, node.children[j]);\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numMatchingSubseq(self, s: str, words: List[str]) -> int:\n    root = {}\n\n    def insert(word: str) -> None:\n      node = root\n      for c in word:\n        if c not in node:\n          node[c] = {'count': 0}\n        node = node[c]\n      node['count'] += 1\n\n    for word in words:\n      insert(word)\n\n    def dfs(s: str, i: int, node: dict) -> int:\n      ans = node['count'] if 'count' in node else 0\n\n      if i >= len(s):\n        return ans\n\n      for c in string.ascii_lowercase:\n        if c in node:\n          try:\n            index = s.index(c, i)\n            ans += dfs(s, index + 1, node[c])\n          except ValueError:\n            continue\n\n      return ans\n\n    return dfs(s, 0, root)\n",
                "lang_text": "py"
            }
        }
    }
}