{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "920",
            "title": "Number of Music Playlists",
            "titleSlug": "number-of-music-playlists",
            "content": "<p>Your music player contains <code>n</code> different songs. You want to listen to <code>goal</code> songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:</p>\n\n<ul>\n\t<li>Every song is played <strong>at least once</strong>.</li>\n\t<li>A song can only be played again only if <code>k</code> other songs have been played.</li>\n</ul>\n\n<p>Given <code>n</code>, <code>goal</code>, and <code>k</code>, return <em>the number of possible playlists that you can create</em>. Since the answer can be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, goal = 3, k = 1\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, goal = 3, k = 0\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, goal = 3, k = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= k &lt; n &lt;= goal &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2280,
            "dislikes": 193,
            "similarQuestions": "[{\"title\": \"Count the Number of Good Subsequences\", \"titleSlug\": \"count-the-number-of-good-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                }
            ],
            "stats": "{\"totalAccepted\": \"67.3K\", \"totalSubmission\": \"110.7K\", \"totalAcceptedRaw\": 67319, \"totalSubmissionRaw\": 110733, \"acRate\": \"60.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "You have a music player with 'n' distinct songs. Your objective is to create a playlist of 'goal' songs for a trip, adhering to these rules:\n\n*   Each song must be played at least once.\n*   A song can only be repeated after 'k' other songs have been played.\n\nDetermine the number of possible playlists you can create, returning the result modulo 10^9 + 7.",
                "constraints": [
                    "0 <= k < n <= goal <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 3, goal = 3, k = 1",
                        "output": "6",
                        "explanation": "There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1]."
                    },
                    {
                        "input": "n = 2, goal = 3, k = 0",
                        "output": "6",
                        "explanation": "There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2]."
                    },
                    {
                        "input": "n = 2, goal = 3, k = 1",
                        "output": "2",
                        "explanation": "There are 2 possible playlists: [1, 2, 1] and [2, 1, 2]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "count-the-number-of-good-subsequences",
                "title": "Count the Number of Good Subsequences",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numMusicPlaylists(int n, int goal, int k) {\n    this->n = n;\n    this->k = k;\n    // dp[i][j] := # of playlists with i songs and j different songs\n    dp.resize(goal + 1, vector<long>(n + 1, -1));\n    return playlists(goal, n);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  int n;\n  int k;\n  vector<vector<long>> dp;\n\n  long playlists(int i, int j) {\n    if (i == 0)\n      return j == 0;\n    if (j == 0)\n      return 0;\n    if (dp[i][j] >= 0)\n      return dp[i][j];\n\n    dp[i][j] = playlists(i - 1, j - 1) * (n - (j - 1));  // Last song is new\n    dp[i][j] += playlists(i - 1, j) * max(0, j - k);     // Last song is old\n    return dp[i][j] %= kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numMusicPlaylists(int n, int goal, int k) {\n    this.n = n;\n    this.k = k;\n    // dp[i][j] := # of playlists with i songs and j different songs\n    dp = new long[goal + 1][n + 1];\n    Arrays.stream(dp).forEach(row -> Arrays.fill(row, -1));\n    return (int) playlists(goal, n);\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private int n;\n  private int k;\n  private long[][] dp;\n\n  private long playlists(int i, int j) {\n    if (i == 0)\n      return j == 0 ? 1 : 0;\n    if (j == 0)\n      return 0;\n    if (dp[i][j] >= 0)\n      return dp[i][j];\n\n    dp[i][j] = playlists(i - 1, j - 1) * (n - (j - 1));   // Last song is new\n    dp[i][j] += playlists(i - 1, j) * Math.max(0, j - k); // Last song is old\n    return dp[i][j] %= kMod;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}