{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1801",
            "title": "Number of Orders in the Backlog",
            "titleSlug": "number-of-orders-in-the-backlog",
            "content": "<p>You are given a 2D integer array <code>orders</code>, where each <code>orders[i] = [price<sub>i</sub>, amount<sub>i</sub>, orderType<sub>i</sub>]</code> denotes that <code>amount<sub>i</sub></code><sub> </sub>orders have been placed of type <code>orderType<sub>i</sub></code> at the price <code>price<sub>i</sub></code>. The <code>orderType<sub>i</sub></code> is:</p>\r\n\r\n<ul>\r\n\t<li><code>0</code> if it is a batch of <code>buy</code> orders, or</li>\r\n\t<li><code>1</code> if it is a batch of <code>sell</code> orders.</li>\r\n</ul>\r\n\r\n<p>Note that <code>orders[i]</code> represents a batch of <code>amount<sub>i</sub></code> independent orders with the same price and order type. All orders represented by <code>orders[i]</code> will be placed before all orders represented by <code>orders[i+1]</code> for all valid <code>i</code>.</p>\r\n\r\n<p>There is a <strong>backlog</strong> that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:</p>\r\n\r\n<ul>\r\n\t<li>If the order is a <code>buy</code> order, you look at the <code>sell</code> order with the <strong>smallest</strong> price in the backlog. If that <code>sell</code> order&#39;s price is <strong>smaller than or equal to</strong> the current <code>buy</code> order&#39;s price, they will match and be executed, and that <code>sell</code> order will be removed from the backlog. Else, the <code>buy</code> order is added to the backlog.</li>\r\n\t<li>Vice versa, if the order is a <code>sell</code> order, you look at the <code>buy</code> order with the <strong>largest</strong> price in the backlog. If that <code>buy</code> order&#39;s price is <strong>larger than or equal to</strong> the current <code>sell</code> order&#39;s price, they will match and be executed, and that <code>buy</code> order will be removed from the backlog. Else, the <code>sell</code> order is added to the backlog.</li>\r\n</ul>\r\n\r\n<p>Return <em>the total <strong>amount</strong> of orders in the backlog after placing all the orders from the input</em>. Since this number can be large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/11/ex1.png\" style=\"width: 450px; height: 479px;\" />\r\n<pre>\r\n<strong>Input:</strong> orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:</strong> Here is what happens with the orders:\r\n- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\r\n- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\r\n- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\r\n- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3<sup>rd</sup> order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4<sup>th</sup> order is added to the backlog.\r\nFinally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/11/ex2.png\" style=\"width: 450px; height: 584px;\" />\r\n<pre>\r\n<strong>Input:</strong> orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]\r\n<strong>Output:</strong> 999999984\r\n<strong>Explanation:</strong> Here is what happens with the orders:\r\n- 10<sup>9</sup> orders of type sell with price 7 are placed. There are no buy orders, so the 10<sup>9</sup> orders are added to the backlog.\r\n- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.\r\n- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.\r\n- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.\r\nFinally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (10<sup>9</sup> + 7).\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= orders.length &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>orders[i].length == 3</code></li>\r\n\t<li><code>1 &lt;= price<sub>i</sub>, amount<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\r\n\t<li><code>orderType<sub>i</sub></code> is either <code>0</code> or <code>1</code>.</li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 281,
            "dislikes": 228,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.8K\", \"totalSubmission\": \"38.3K\", \"totalAcceptedRaw\": 18795, \"totalSubmissionRaw\": 38312, \"acRate\": \"49.1%\"}",
            "hints": [
                "Store the backlog buy and sell orders in two heaps, the buy orders in a max heap by price and the sell orders in a min heap by price.",
                "Store the orders in batches and update the fields according to new incoming orders. Each batch should only take 1 \"slot\" in the heap."
            ],
            "rephrased": {
                "body": "You are given a 2D integer array `orders`, where each `orders[i] = [price_i, amount_i, orderType_i]` denotes that `amount_i` orders have been placed of type `orderType_i` at the price `price_i`. The `orderType_i` is:\n\n*   `0` if it is a batch of `buy` orders, or\n*   `1` if it is a batch of `sell` orders.\n\nNote that `orders[i]` represents a batch of `amount_i` independent orders with the same price and order type. All orders represented by `orders[i]` will be placed before all orders represented by `orders[i+1]` for all valid `i`.\n\nThere is a **backlog** that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:\n\n*   If the order is a `buy` order, find the `sell` order with the **smallest** price in the backlog. If that `sell` order's price is **smaller than or equal to** the current `buy` order's price, they are matched and the `sell` order is removed. Otherwise, the `buy` order is added to the backlog.\n*   If the order is a `sell` order, find the `buy` order with the **largest** price in the backlog. If that `buy` order's price is **larger than or equal to** the current `sell` order's price, they are matched and the `buy` order is removed. Otherwise, the `sell` order is added to the backlog.\n\nReturn the total **amount** of orders in the backlog after processing all orders. Return the result **modulo** `10^9 + 7`.",
                "constraints": [
                    "1 <= orders.length <= 10^5",
                    "orders[i].length == 3",
                    "1 <= price_i, amount_i <= 10^9",
                    "orderType_i is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[[10,5,0],[15,2,1],[25,1,1],[30,4,0]]",
                        "output": "6",
                        "explanation": "Initially, the backlog is empty.\n1.  5 buy orders at price 10 are added to the backlog.\n2.  2 sell orders at price 15 are added to the backlog.\n3.  1 sell order at price 25 is added to the backlog.\n4.  4 buy orders at price 30 are placed.\n    *   The first 2 buy orders match the 2 sell orders at price 15, removing them.\n    *   The third buy order matches the 1 sell order at price 25, removing it.\n    *   The last buy order is added to the backlog.\n\nFinally, the backlog contains 5 buy orders at price 10 and 1 buy order at price 30. The total is 6."
                    },
                    {
                        "input": "[[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]",
                        "output": "999999984",
                        "explanation": "Initially, the backlog is empty.\n1. 10^9 sell orders at price 7 are added to the backlog.\n2. 3 buy orders at price 15 are placed. They match the 3 sell orders at price 7, removing them.\n3. 999999995 buy orders at price 5 are added to the backlog.\n4. 1 sell order at price 5 is placed. It matches 1 buy order at price 5, removing it.\n\nFinally, the backlog contains (10^9 - 3) sell orders at price 7 and (999999995 - 1) buy orders at price 5.  The total number of orders is (1000000000-3) + (999999995-1) = 1999999991.  1999999991 % (10^9 + 7) = 999999984."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Store the backlog buy and sell orders in two heaps, the buy orders in a max heap by price and the sell orders in a min heap by price.",
            "Store the orders in batches and update the fields according to new incoming orders. Each batch should only take 1 \"slot\" in the heap."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int getNumberOfBacklogOrders(vector<vector<int>>& orders) {\n    constexpr int kMod = 1'000'000'007;\n    int ans = 0;\n    priority_queue<vector<int>> buysMaxHeap;\n    priority_queue<vector<int>, vector<vector<int>>, greater<>> sellsMinHeap;\n\n    for (const vector<int>& order : orders) {\n      if (order[2] == 0)\n        buysMaxHeap.push(order);\n      else\n        sellsMinHeap.push(order);\n      while (!buysMaxHeap.empty() && !sellsMinHeap.empty() &&\n             buysMaxHeap.top()[0] >= sellsMinHeap.top()[0]) {\n        const int minAmount = min(buysMaxHeap.top()[1], sellsMinHeap.top()[1]);\n        vector<int> buysMaxHeapTop = buysMaxHeap.top();\n        buysMaxHeap.pop();\n        buysMaxHeapTop[1] -= minAmount;\n        if (buysMaxHeapTop[1] > 0)\n          buysMaxHeap.push(buysMaxHeapTop);\n\n        vector<int> sellsMinHeapTop = sellsMinHeap.top();\n        sellsMinHeap.pop();\n        sellsMinHeapTop[1] -= minAmount;\n        if (sellsMinHeapTop[1] > 0)\n          sellsMinHeap.push(sellsMinHeapTop);\n      }\n    }\n\n    while (!buysMaxHeap.empty()) {\n      ans += buysMaxHeap.top()[1], buysMaxHeap.pop();\n      ans %= kMod;\n    }\n\n    while (!sellsMinHeap.empty()) {\n      ans += sellsMinHeap.top()[1], sellsMinHeap.pop();\n      ans %= kMod;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int getNumberOfBacklogOrders(int[][] orders) {\n    final int kMod = 1_000_000_007;\n    int ans = 0;\n    PriorityQueue<int[]> buysMaxHeap = new PriorityQueue<>((a, b) -> b[0] - a[0]);\n    PriorityQueue<int[]> sellsMinHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n\n    for (int[] order : orders) {\n      if (order[2] == 0)\n        buysMaxHeap.offer(order);\n      else\n        sellsMinHeap.offer(order);\n      while (!buysMaxHeap.isEmpty() && !sellsMinHeap.isEmpty() &&\n             buysMaxHeap.peek()[0] >= sellsMinHeap.peek()[0]) {\n        final int minAmount = Math.min(buysMaxHeap.peek()[1], sellsMinHeap.peek()[1]);\n        buysMaxHeap.peek()[1] -= minAmount;\n        sellsMinHeap.peek()[1] -= minAmount;\n        if (buysMaxHeap.peek()[1] == 0)\n          buysMaxHeap.poll();\n        if (sellsMinHeap.peek()[1] == 0)\n          sellsMinHeap.poll();\n      }\n    }\n\n    while (!buysMaxHeap.isEmpty()) {\n      ans += buysMaxHeap.poll()[1];\n      ans %= kMod;\n    }\n\n    while (!sellsMinHeap.isEmpty()) {\n      ans += sellsMinHeap.poll()[1];\n      ans %= kMod;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}