{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2426",
            "title": "Number of Pairs Satisfying Inequality",
            "titleSlug": "number-of-pairs-satisfying-inequality",
            "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, each of size <code>n</code>, and an integer <code>diff</code>. Find the number of <strong>pairs</strong> <code>(i, j)</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt;= n - 1</code> <strong>and</strong></li>\n\t<li><code>nums1[i] - nums1[j] &lt;= nums2[i] - nums2[j] + diff</code>.</li>\n</ul>\n\n<p>Return<em> the <strong>number of pairs</strong> that satisfy the conditions.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [3,2,5], nums2 = [2,2,1], diff = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThere are 3 pairs that satisfy the conditions:\n1. i = 0, j = 1: 3 - 2 &lt;= 2 - 2 + 1. Since i &lt; j and 1 &lt;= 1, this pair satisfies the conditions.\n2. i = 0, j = 2: 3 - 5 &lt;= 2 - 1 + 1. Since i &lt; j and -2 &lt;= 2, this pair satisfies the conditions.\n3. i = 1, j = 2: 2 - 5 &lt;= 2 - 1 + 1. Since i &lt; j and -3 &lt;= 2, this pair satisfies the conditions.\nTherefore, we return 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [3,-1], nums2 = [-2,2], diff = -1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nSince there does not exist any pair that satisfies the conditions, we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= diff &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 515,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"K-diff Pairs in an Array\", \"titleSlug\": \"k-diff-pairs-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Nice Pairs in an Array\", \"titleSlug\": \"count-nice-pairs-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Number of Bad Pairs\", \"titleSlug\": \"count-number-of-bad-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Balanced Subsequence Sum\", \"titleSlug\": \"maximum-balanced-subsequence-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Merge Sort",
                    "slug": "merge-sort"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.7K\", \"totalSubmission\": \"26.8K\", \"totalAcceptedRaw\": 11688, \"totalSubmissionRaw\": 26842, \"acRate\": \"43.5%\"}",
            "hints": [
                "Try rearranging the equation.",
                "Once the equation is rearranged properly, think how a segment tree or a Fenwick tree can be used to solve the rearranged equation.",
                "Iterate through the array backwards."
            ],
            "rephrased": {
                "body": "Given two 0-indexed integer arrays `nums1` and `nums2`, each of size `n`, and an integer `diff`, find the number of pairs `(i, j)` such that `0 <= i < j <= n - 1` and `nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff`. Return the number of pairs that satisfy the conditions.",
                "constraints": [
                    "n == nums1.length == nums2.length",
                    "2 <= n <= 10^5",
                    "-10^4 <= nums1[i], nums2[i] <= 10^4",
                    "-10^4 <= diff <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [3,2,5], nums2 = [2,2,1], diff = 1",
                        "output": "3",
                        "explanation": "There are 3 pairs that satisfy the conditions:\n\n(0, 1): 3 - 2 <= 2 - 2 + 1. 1 <= 1, so this pair satisfies the conditions.\n(0, 2): 3 - 5 <= 2 - 1 + 1. -2 <= 2, so this pair satisfies the conditions.\n(1, 2): 2 - 5 <= 2 - 1 + 1. -3 <= 2, so this pair satisfies the conditions."
                    },
                    {
                        "input": "nums1 = [3,-1], nums2 = [-2,2], diff = -1",
                        "output": "0",
                        "explanation": "Since there does not exist any pair that satisfies the conditions, we return 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "k-diff-pairs-in-an-array",
                "title": "K-diff Pairs in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-nice-pairs-in-an-array",
                "title": "Count Nice Pairs in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-number-of-bad-pairs",
                "title": "Count Number of Bad Pairs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-balanced-subsequence-sum",
                "title": "Maximum Balanced Subsequence Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try rearranging the equation.",
            "Once the equation is rearranged properly, think how a segment tree or a Fenwick tree can be used to solve the rearranged equation.",
            "Iterate through the array backwards."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff) {\n    // nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff\n    // nums1[i] - nums2[i] <= nums1[j] - nums2[j] + diff\n    // Define A[i] := nums1[i] - nums2[i] -> A[i] <= A[j] + diff\n    vector<int> A;\n\n    for (int i = 0; i < nums1.size(); ++i)\n      A.push_back(nums1[i] - nums2[i]);\n\n    long long ans = 0;\n    mergeSort(A, 0, A.size() - 1, diff, ans);\n    return ans;\n  }\n\n private:\n  void mergeSort(vector<int>& A, int l, int r, int diff, long long& ans) {\n    if (l >= r)\n      return;\n\n    const int m = (l + r) / 2;\n    mergeSort(A, l, m, diff, ans);\n    mergeSort(A, m + 1, r, diff, ans);\n    merge(A, l, m, r, diff, ans);\n  }\n\n  void merge(vector<int>& A, int l, int m, int r, int diff, long long& ans) {\n    const int lo = m + 1;\n    int hi = m + 1;  // 1st index s.t. A[i] <= A[hi] + diff\n\n    // For each index i in range [l, m], add r - hi + 1 to ans\n    for (int i = l; i <= m; ++i) {\n      while (hi <= r && A[i] > A[hi] + diff)\n        ++hi;\n      ans += r - hi + 1;\n    }\n\n    vector<int> sorted(r - l + 1);\n    int k = 0;      // sorted's index\n    int i = l;      // left's index\n    int j = m + 1;  // right's index\n\n    while (i <= m && j <= r)\n      if (A[i] < A[j])\n        sorted[k++] = A[i++];\n      else\n        sorted[k++] = A[j++];\n\n    // Put the possible remaining left part into the sorted array.\n    while (i <= m)\n      sorted[k++] = A[i++];\n\n    // Put the possible remaining right part into the sorted array.\n    while (j <= r)\n      sorted[k++] = A[j++];\n\n    copy(sorted.begin(), sorted.end(), A.begin() + l);\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}