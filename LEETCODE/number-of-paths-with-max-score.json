{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1301",
            "title": "Number of Paths with Max Score",
            "titleSlug": "number-of-paths-with-max-score",
            "content": "<p>You are given a square <code>board</code>&nbsp;of characters. You can move on the board starting at the bottom right square marked with the character&nbsp;<code>&#39;S&#39;</code>.</p>\r\n\r\n<p>You need&nbsp;to reach the top left square marked with the character <code>&#39;E&#39;</code>. The rest of the squares are labeled either with a numeric character&nbsp;<code>1, 2, ..., 9</code> or with an obstacle <code>&#39;X&#39;</code>. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.</p>\r\n\r\n<p>Return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, <strong>taken modulo <code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>In case there is no path, return&nbsp;<code>[0, 0]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n<pre><strong>Input:</strong> board = [\"E23\",\"2X2\",\"12S\"]\r\n<strong>Output:</strong> [7,1]\r\n</pre><p><strong class=\"example\">Example 2:</strong></p>\r\n<pre><strong>Input:</strong> board = [\"E12\",\"1X1\",\"21S\"]\r\n<strong>Output:</strong> [4,2]\r\n</pre><p><strong class=\"example\">Example 3:</strong></p>\r\n<pre><strong>Input:</strong> board = [\"E11\",\"XXX\",\"11S\"]\r\n<strong>Output:</strong> [0,0]\r\n</pre>\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>2 &lt;= board.length == board[i].length &lt;= 100</code></li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 493,
            "dislikes": 24,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.5K\", \"totalSubmission\": \"32.1K\", \"totalAcceptedRaw\": 12515, \"totalSubmissionRaw\": 32079, \"acRate\": \"39.0%\"}",
            "hints": [
                "Use dynamic programming to find the path with the max score.",
                "Use another dynamic programming array to count the number of paths with max score."
            ],
            "rephrased": {
                "body": "You are given a square board of characters. Starting from the bottom right square ('S'), you need to reach the top left square ('E'). You can move up, left, or diagonally up-left. Numeric characters represent points to collect, while 'X' represents an obstacle.  Find the maximum sum of numeric characters you can collect along any valid path, and the number of paths that achieve this maximum sum. Return these two values as a list, with the count taken modulo 10^9 + 7. If no path exists, return [0, 0].",
                "constraints": [
                    "2 <= board.length == board[i].length <= 100"
                ],
                "testcases": [
                    {
                        "input": "board = [\"E23\",\"2X2\",\"12S\"]",
                        "output": "[7,1]",
                        "explanation": null
                    },
                    {
                        "input": "board = [\"E12\",\"1X1\",\"21S\"]",
                        "output": "[4,2]",
                        "explanation": null
                    },
                    {
                        "input": "board = [\"E11\",\"XXX\",\"11S\"]",
                        "output": "[0,0]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use dynamic programming to find the path with the max score.",
            "Use another dynamic programming array to count the number of paths with max score."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> pathsWithMaxScore(vector<string>& board) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = board.size();\n    const vector<pair<int, int>> dirs{{0, 1}, {1, 0}, {1, 1}};\n    // dp[i][j] := max sum from (n - 1, n - 1) -> (i, j)\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1, -1));\n    // count[i][j] := # of paths to get dp[i][j] from (n - 1, n - 1) -> (i, j)\n    vector<vector<int>> count(n + 1, vector<int>(n + 1));\n\n    dp[0][0] = 0;\n    dp[n - 1][n - 1] = 0;\n    count[n - 1][n - 1] = 1;\n\n    for (int i = n - 1; i >= 0; --i)\n      for (int j = n - 1; j >= 0; --j) {\n        if (board[i][j] == 'S' || board[i][j] == 'X')\n          continue;\n        for (const auto& [dx, dy] : dirs) {\n          const int x = i + dx;\n          const int y = j + dy;\n          if (dp[i][j] < dp[x][y]) {\n            dp[i][j] = dp[x][y];\n            count[i][j] = count[x][y];\n          } else if (dp[i][j] == dp[x][y]) {\n            count[i][j] += count[x][y];\n            count[i][j] %= kMod;\n          }\n        }\n        // If there's path(s) from 'S' to (i, j)\n        // And the cell is not 'E'\n        if (dp[i][j] != -1 && board[i][j] != 'E') {\n          dp[i][j] += board[i][j] - '0';\n          dp[i][j] %= kMod;\n        }\n      }\n\n    return {dp[0][0], count[0][0]};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] pathsWithMaxScore(List<String> board) {\n    final int kMod = 1_000_000_007;\n    final int n = board.size();\n    final int[][] dirs = {{0, 1}, {1, 0}, {1, 1}};\n    // dp[i][j] := max sum from (n - 1, n - 1) -> (i, j)\n    int[][] dp = new int[n + 1][n + 1];\n    Arrays.stream(dp).forEach(A -> Arrays.fill(A, -1));\n    // count[i][j] := # of paths to get dp[i][j] from (n - 1, n - 1) -> (i, j)\n    int[][] count = new int[n + 1][n + 1];\n\n    dp[0][0] = 0;\n    dp[n - 1][n - 1] = 0;\n    count[n - 1][n - 1] = 1;\n\n    for (int i = n - 1; i >= 0; --i)\n      for (int j = n - 1; j >= 0; --j) {\n        if (board.get(i).charAt(j) == 'S' || board.get(i).charAt(j) == 'X')\n          continue;\n        for (int[] dir : dirs) {\n          final int x = i + dir[0];\n          final int y = j + dir[1];\n          if (dp[i][j] < dp[x][y]) {\n            dp[i][j] = dp[x][y];\n            count[i][j] = count[x][y];\n          } else if (dp[i][j] == dp[x][y]) {\n            count[i][j] += count[x][y];\n            count[i][j] %= kMod;\n          }\n        }\n        // If there's path(s) from 'S' to (i, j)\n        // And the cell is not 'E'\n        if (dp[i][j] != -1 && board.get(i).charAt(j) != 'E') {\n          dp[i][j] += board.get(i).charAt(j) - '0';\n          dp[i][j] %= kMod;\n        }\n      }\n\n    return new int[] {dp[0][0], count[0][0]};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def pathsWithMaxScore(self, board: List[str]) -> List[int]:\n    kMod = 1_000_000_007\n    n = len(board)\n    dirs = [(0, 1), (1, 0), (1, 1)]\n    # dp[i][j] := max sum from (n - 1, n - 1) . (i, j)\n    dp = [[-1] * (n + 1) for _ in range(n + 1)]\n    # count[i][j] := # of paths to get dp[i][j] from (n - 1, n - 1) . (i, j)\n    count = [[0] * (n + 1) for _ in range(n + 1)]\n\n    dp[0][0] = 0\n    dp[n - 1][n - 1] = 0\n    count[n - 1][n - 1] = 1\n\n    for i in reversed(range(n)):\n      for j in reversed(range(n)):\n        if board[i][j] == 'S' or board[i][j] == 'X':\n          continue\n        for dx, dy in dirs:\n          x = i + dx\n          y = j + dy\n          if dp[i][j] < dp[x][y]:\n            dp[i][j] = dp[x][y]\n            count[i][j] = count[x][y]\n          elif dp[i][j] == dp[x][y]:\n            count[i][j] += count[x][y]\n            count[i][j] %= kMod\n\n        # If there's path(s) from 'S' to (i, j)\n        # And the cell is not 'E'\n        if dp[i][j] != -1 and board[i][j] != 'E':\n          dp[i][j] += int(board[i][j])\n          dp[i][j] %= kMod\n\n    return [dp[0][0], count[0][0]]\n",
                "lang_text": "py"
            }
        }
    }
}