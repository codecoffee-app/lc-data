{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2327",
            "title": "Number of People Aware of a Secret",
            "titleSlug": "number-of-people-aware-of-a-secret",
            "content": "<p>On day <code>1</code>, one person discovers a secret.</p>\n\n<p>You are given an integer <code>delay</code>, which means that each person will <strong>share</strong> the secret with a new person <strong>every day</strong>, starting from <code>delay</code> days after discovering the secret. You are also given an integer <code>forget</code>, which means that each person will <strong>forget</strong> the secret <code>forget</code> days after discovering it. A person <strong>cannot</strong> share the secret on the same day they forgot it, or on any day afterwards.</p>\n\n<p>Given an integer <code>n</code>, return<em> the number of people who know the secret at the end of day </em><code>n</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, delay = 2, forget = 4\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nDay 1: Suppose the first person is named A. (1 person)\nDay 2: A is the only person who knows the secret. (1 person)\nDay 3: A shares the secret with a new person, B. (2 people)\nDay 4: A shares the secret with a new person, C. (3 people)\nDay 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)\nDay 6: B shares the secret with E, and C shares the secret with F. (5 people)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, delay = 1, forget = 3\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nDay 1: The first person is named A. (1 person)\nDay 2: A shares the secret with B. (2 people)\nDay 3: A and B share the secret with 2 new people, C and D. (4 people)\nDay 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= delay &lt; forget &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 762,
            "dislikes": 112,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.2K\", \"totalSubmission\": \"45.1K\", \"totalAcceptedRaw\": 20243, \"totalSubmissionRaw\": 45074, \"acRate\": \"44.9%\"}",
            "hints": [
                "Let dp[i][j] be the number of people who have known the secret for exactly j + 1 days, at day i.",
                "If j > 0, dp[i][j] = dp[i \u2013 1][j \u2013 1].",
                "dp[i][0] = sum(dp[i \u2013 1][j]) for j in [delay \u2013 1, forget \u2013 2]."
            ],
            "rephrased": {
                "body": "Initially, one person discovers a secret on day 1. Each person shares the secret with a new person every day, starting 'delay' days after discovering the secret. A person forgets the secret 'forget' days after discovering it and cannot share it on or after the day they forget it. Given 'n', 'delay', and 'forget', determine the number of people who know the secret at the end of day 'n'. Return the result modulo 10^9 + 7.",
                "constraints": [
                    "2 <= n <= 1000",
                    "1 <= delay < forget <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 6, delay = 2, forget = 4",
                        "output": "5",
                        "explanation": "Day 1: Person A knows the secret. (1 person)\nDay 2: A knows the secret. (1 person)\nDay 3: A shares with B. (2 people)\nDay 4: A shares with C. (3 people)\nDay 5: A forgets, B shares with D. (3 people)\nDay 6: B shares with E, C shares with F. (5 people)"
                    },
                    {
                        "input": "n = 4, delay = 1, forget = 3",
                        "output": "6",
                        "explanation": "Day 1: Person A knows the secret. (1 person)\nDay 2: A shares with B. (2 people)\nDay 3: A and B share with C and D. (4 people)\nDay 4: A forgets, B, C, and D share with E, F, and G. (6 people)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Let dp[i][j] be the number of people who have known the secret for exactly j + 1 days, at day i.",
            "If j > 0, dp[i][j] = dp[i \u2013 1][j \u2013 1].",
            "dp[i][0] = sum(dp[i \u2013 1][j]) for j in [delay \u2013 1, forget \u2013 2]."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int peopleAwareOfSecret(int n, int delay, int forget) {\n    constexpr int kMod = 1'000'000'007;\n    long share = 0;\n    // dp[i] := # of people know the secret at day i\n    vector<int> dp(n);  // Map day i to i + 1\n    dp[0] = 1;\n\n    for (int i = 1; i < n; ++i) {\n      if (i - delay >= 0)\n        share += dp[i - delay];\n      if (i - forget >= 0)\n        share -= dp[i - forget];\n      share += kMod;\n      share %= kMod;\n      dp[i] = share;\n    }\n\n    // People before day `n - forget - 1` already forget the secret\n    return accumulate(dp.end() - forget, dp.end(), 0, [&](int subtotal, int d) {\n      return (subtotal + d) % kMod;\n    });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int peopleAwareOfSecret(int n, int delay, int forget) {\n    final int kMod = 1_000_000_007;\n    long share = 0;\n    // dp[i] := # of people know the secret at day i\n    int[] dp = new int[n]; // Map day i to i + 1\n    dp[0] = 1;\n\n    for (int i = 1; i < n; ++i) {\n      if (i - delay >= 0)\n        share += dp[i - delay];\n      if (i - forget >= 0)\n        share -= dp[i - forget];\n      share += kMod;\n      share %= kMod;\n      dp[i] = (int) share;\n    }\n\n    // People before day `n - forget - 1` already forget the secret\n    int ans = 0;\n    for (int i = n - forget; i < n; ++i)\n      ans = (ans + dp[i]) % kMod;\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:\n    kMod = 1_000_000_007\n    share = 0\n    # dp[i] := # of people know the secret at day i\n    dp = [0] * n  # Map day i to i + 1\n    dp[0] = 1\n\n    for i in range(1, n):\n      if i - delay >= 0:\n        share += dp[i - delay]\n      if i - forget >= 0:\n        share -= dp[i - forget]\n      share += kMod\n      share %= kMod\n      dp[i] = share\n\n    # People before day `n - forget - 1` already forget the secret\n    return sum(dp[-forget:]) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}