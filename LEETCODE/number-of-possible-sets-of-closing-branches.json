{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2959",
            "title": "Number of Possible Sets of Closing Branches",
            "titleSlug": "number-of-possible-sets-of-closing-branches",
            "content": "<p>There is a company with <code>n</code> branches across the country, some of which are connected by roads. Initially, all branches are reachable from each other by traveling some roads.</p>\n\n<p>The company has realized that they are spending an excessive amount of time traveling between their branches. As a result, they have decided to close down some of these branches (<strong>possibly none</strong>). However, they want to ensure that the remaining branches have a distance of at most <code>maxDistance</code> from each other.</p>\n\n<p>The <strong>distance</strong> between two branches is the <strong>minimum</strong> total traveled length needed to reach one branch from another.</p>\n\n<p>You are given integers <code>n</code>, <code>maxDistance</code>, and a <strong>0-indexed</strong> 2D array <code>roads</code>, where <code>roads[i] = [u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>]</code> represents the <strong>undirected</strong> road between branches <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> with length <code>w<sub>i</sub></code>.</p>\n\n<p>Return <em>the number of possible sets of closing branches, so that any branch has a distance of at most </em><code>maxDistance</code><em> from any other</em>.</p>\n\n<p><strong>Note</strong> that, after closing a branch, the company will no longer have access to any roads connected to it.</p>\n\n<p><strong>Note</strong> that, multiple roads are allowed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/11/08/example11.png\" style=\"width: 221px; height: 191px;\" />\n<pre>\n<strong>Input:</strong> n = 3, maxDistance = 5, roads = [[0,1,2],[1,2,10],[0,2,10]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The possible sets of closing branches are:\n- The set [2], after closing, active branches are [0,1] and they are reachable to each other within distance 2.\n- The set [0,1], after closing, the active branch is [2].\n- The set [1,2], after closing, the active branch is [0].\n- The set [0,2], after closing, the active branch is [1].\n- The set [0,1,2], after closing, there are no active branches.\nIt can be proven, that there are only 5 possible sets of closing branches.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/11/08/example22.png\" style=\"width: 221px; height: 241px;\" />\n<pre>\n<strong>Input:</strong> n = 3, maxDistance = 5, roads = [[0,1,20],[0,1,10],[1,2,2],[0,2,2]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The possible sets of closing branches are:\n- The set [], after closing, active branches are [0,1,2] and they are reachable to each other within distance 4.\n- The set [0], after closing, active branches are [1,2] and they are reachable to each other within distance 2.\n- The set [1], after closing, active branches are [0,2] and they are reachable to each other within distance 2.\n- The set [0,1], after closing, the active branch is [2].\n- The set [1,2], after closing, the active branch is [0].\n- The set [0,2], after closing, the active branch is [1].\n- The set [0,1,2], after closing, there are no active branches.\nIt can be proven, that there are only 7 possible sets of closing branches.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, maxDistance = 10, roads = []\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The possible sets of closing branches are:\n- The set [], after closing, the active branch is [0].\n- The set [0], after closing, there are no active branches.\nIt can be proven, that there are only 2 possible sets of closing branches.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10</code></li>\n\t<li><code>1 &lt;= maxDistance &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= roads.length &lt;= 1000</code></li>\n\t<li><code>roads[i].length == 3</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li><code>1 &lt;= w<sub>i</sub> &lt;= 1000</code></li>\n\t<li>All branches are reachable from each other by traveling some roads.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 148,
            "dislikes": 10,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.4K\", \"totalSubmission\": \"12.6K\", \"totalAcceptedRaw\": 6393, \"totalSubmissionRaw\": 12606, \"acRate\": \"50.7%\"}",
            "hints": [
                "Try all the possibilities of closing branches.",
                "On the vertices that are not closed, use Floyd-Warshall algorithm to find the shortest paths."
            ],
            "rephrased": {
                "body": "A company has *n* branches connected by roads. They want to close some branches to reduce travel time, ensuring that the remaining (active) branches are within a maximum distance of *maxDistance* from each other. The distance between two branches is the minimum total road length needed to travel between them.\n\nYou are given *n*, *maxDistance*, and a list of roads where each road connects two branches with a certain length. Find the number of possible sets of branches that can be closed such that all remaining active branches are within the specified maximum distance of each other.\n\nNote: Closing a branch removes all roads connected to it. Multiple roads between two branches are allowed. Initially, all branches are reachable from each other.",
                "constraints": [
                    "1 <= n <= 10",
                    "1 <= maxDistance <= 10^5",
                    "0 <= roads.length <= 1000",
                    "roads[i].length == 3",
                    "0 <= u_i, v_i <= n - 1",
                    "u_i != v_i",
                    "1 <= w_i <= 1000",
                    "All branches are reachable from each other by traveling some roads."
                ],
                "testcases": [
                    {
                        "input": "n = 3, maxDistance = 5, roads = [[0,1,2],[1,2,10],[0,2,10]]",
                        "output": "5",
                        "explanation": "The valid closing branch sets are: [2], [0,1], [1,2], [0,2], and [0,1,2].  For example, closing only branch 2 leaves branches 0 and 1 with a distance of 2, which is less than or equal to maxDistance 5."
                    },
                    {
                        "input": "n = 3, maxDistance = 5, roads = [[0,1,20],[0,1,10],[1,2,2],[0,2,2]]",
                        "output": "7",
                        "explanation": "The valid closing branch sets are: [], [0], [1], [0,1], [1,2], [0,2], and [0,1,2]. For example, closing no branches leaves branches 0, 1 and 2. The distances between all branches are at most 4, which is less than maxDistance 5."
                    },
                    {
                        "input": "n = 1, maxDistance = 10, roads = []",
                        "output": "2",
                        "explanation": "The valid closing branch sets are: [] and [0]. Closing no branches leaves the single branch 0. Closing branch 0 leaves no active branches."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Try all the possibilities of closing branches.",
            "On the vertices that are not closed, use Floyd-Warshall algorithm to find the shortest paths."
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numberOfSets(int n, int maxDistance, vector<vector<int>>& roads) {\n    const int maxMask = 1 << n;\n    int ans = 0;\n\n    for (int mask = 0; mask < maxMask; ++mask)\n      if (floydWarshall(n, maxDistance, roads, mask) <= maxDistance)\n        ++ans;\n\n    return ans;\n  }\n\n private:\n  // Returns the maximum distance between any two branches, where the mask\n  // represents the selected branches.\n  int floydWarshall(int n, int maxDistanceThreshold, vector<vector<int>>& roads,\n                    int mask) {\n    int maxDistance = 0;\n    vector<vector<int>> dist(n, vector<int>(n, maxDistanceThreshold + 1));\n\n    for (int i = 0; i < n; ++i)\n      if (mask >> i & 1)\n        dist[i][i] = 0;\n\n    for (const vector<int>& road : roads) {\n      const int u = road[0];\n      const int v = road[1];\n      const int w = road[2];\n      if (mask >> u & 1 && mask >> v & 1) {\n        dist[u][v] = min(dist[u][v], w);\n        dist[v][u] = min(dist[v][u], w);\n      }\n    }\n\n    for (int k = 0; k < n; ++k)\n      if (mask >> k & 1)\n        for (int i = 0; i < n; ++i)\n          if (mask >> i & 1)\n            for (int j = 0; j < n; ++j)\n              if (mask >> j & 1)\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);\n\n    for (int i = 0; i < n; ++i)\n      if (mask >> i & 1)\n        for (int j = i + 1; j < n; ++j)\n          if (mask >> j & 1)\n            maxDistance = max(maxDistance, dist[i][j]);\n\n    return maxDistance;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numberOfSets(int n, int maxDistance, int[][] roads) {\n    final int maxMask = 1 << n;\n    int ans = 0;\n\n    for (int mask = 0; mask < maxMask; ++mask)\n      if (floydWarshall(n, maxDistance, roads, mask) <= maxDistance)\n        ++ans;\n\n    return ans;\n  }\n\n  private int floydWarshall(int n, int maxDistanceThreshold, int[][] roads, int mask) {\n    int maxDistance = 0;\n    int[][] dist = new int[n][n];\n    Arrays.stream(dist).forEach(A -> Arrays.fill(A, maxDistanceThreshold + 1));\n\n    for (int i = 0; i < n; ++i)\n      if ((mask >> i & 1) == 1)\n        dist[i][i] = 0;\n\n    for (int[] road : roads) {\n      final int u = road[0];\n      final int v = road[1];\n      final int w = road[2];\n      if ((mask >> u & 1) == 1 && (mask >> v & 1) == 1) {\n        dist[u][v] = Math.min(dist[u][v], w);\n        dist[v][u] = Math.min(dist[v][u], w);\n      }\n    }\n\n    for (int k = 0; k < n; ++k)\n      if ((mask >> k & 1) == 1)\n        for (int i = 0; i < n; ++i)\n          if ((mask >> i & 1) == 1)\n            for (int j = 0; j < n; ++j)\n              if ((mask >> j & 1) == 1)\n                dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);\n\n    for (int i = 0; i < n; ++i)\n      if ((mask >> i & 1) == 1)\n        for (int j = i + 1; j < n; ++j)\n          if ((mask >> j & 1) == 1)\n            maxDistance = Math.max(maxDistance, dist[i][j]);\n\n    return maxDistance;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numberOfSets(self, n: int, maxDistance: int, roads: List[List[int]]) -> int:\n    return sum(self._floydWarshall(n, maxDistance, roads, mask) <= maxDistance\n               for mask in range(1 << n))\n\n  def _floydWarshall(self, n: int, maxDistanceThreshold: int,\n                     roads: List[List[int]], mask: int) -> List[List[int]]:\n    \"\"\"\n    Returns the maximum distance between any two branches, where the mask\n    represents the selected branches.\n    \"\"\"\n    maxDistance = 0\n    dist = [[maxDistanceThreshold + 1] * n for _ in range(n)]\n\n    for i in range(n):\n      if mask >> i & 1:\n        dist[i][i] = 0\n\n    for u, v, w in roads:\n      if mask >> u & 1 and mask >> v & 1:\n        dist[u][v] = min(dist[u][v], w)\n        dist[v][u] = min(dist[v][u], w)\n\n    for k in range(n):\n      if mask >> k & 1:\n        for i in range(n):\n          if mask >> i & 1:\n            for j in range(n):\n              if mask >> j & 1:\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    for i in range(n):\n      if mask >> i & 1:\n        for j in range(i + 1, n):\n          if mask >> j & 1:\n            maxDistance = max(maxDistance, dist[i][j])\n\n    return maxDistance\n",
                "lang_text": "py"
            }
        }
    }
}