{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "933",
            "title": "Number of Recent Calls",
            "titleSlug": "number-of-recent-calls",
            "content": "<p>You have a <code>RecentCounter</code> class which counts the number of recent requests within a certain time frame.</p>\n\n<p>Implement the <code>RecentCounter</code> class:</p>\n\n<ul>\n\t<li><code>RecentCounter()</code> Initializes the counter with zero recent requests.</li>\n\t<li><code>int ping(int t)</code> Adds a new request at time <code>t</code>, where <code>t</code> represents some time in milliseconds, and returns the number of requests that has happened in the past <code>3000</code> milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range <code>[t - 3000, t]</code>.</li>\n</ul>\n\n<p>It is <strong>guaranteed</strong> that every call to <code>ping</code> uses a strictly larger value of <code>t</code> than the previous call.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;RecentCounter&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;]\n[[], [1], [100], [3001], [3002]]\n<strong>Output</strong>\n[null, 1, 2, 3, 3]\n\n<strong>Explanation</strong>\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [<u>1</u>], range is [-2999,1], return 1\nrecentCounter.ping(100);   // requests = [<u>1</u>, <u>100</u>], range is [-2900,100], return 2\nrecentCounter.ping(3001);  // requests = [<u>1</u>, <u>100</u>, <u>3001</u>], range is [1,3001], return 3\nrecentCounter.ping(3002);  // requests = [1, <u>100</u>, <u>3001</u>, <u>3002</u>], range is [2,3002], return 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= t &lt;= 10<sup>9</sup></code></li>\n\t<li>Each test case will call <code>ping</code> with <strong>strictly increasing</strong> values of <code>t</code>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>ping</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 396,
            "dislikes": 594,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Data Stream",
                    "slug": "data-stream"
                }
            ],
            "stats": "{\"totalAccepted\": \"206.7K\", \"totalSubmission\": \"279K\", \"totalAcceptedRaw\": 206705, \"totalSubmissionRaw\": 279044, \"acRate\": \"74.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a `RecentCounter` class to count recent requests within a 3000ms timeframe.\n\nThe class should support the following:\n\n*   **`RecentCounter()`**: Initializes the counter with no recent requests.\n*   **`int ping(int t)`**:  Adds a new request at time `t` (in milliseconds) and returns the number of requests that occurred within the inclusive range `[t - 3000, t]`.  Note that `t` will always be strictly greater than the previous call to `ping`.",
                "constraints": [
                    "1 <= t <= 10^9",
                    "Each test case will call `ping` with strictly increasing values of `t`.",
                    "At most 10^4 calls will be made to `ping`."
                ],
                "testcases": [
                    {
                        "input": "[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n[[], [1], [100], [3001], [3002]]",
                        "output": "[null, 1, 2, 3, 3]",
                        "explanation": "A `RecentCounter` object is created. Then `ping(1)` is called: The first request is at time 1, the range is [-2999, 1], resulting in 1 request. `ping(100)` is called: The requests are [1, 100], the range is [-2900, 100], resulting in 2 requests. `ping(3001)` is called: The requests are [1, 100, 3001], the range is [1, 3001], resulting in 3 requests. `ping(3002)` is called: The requests are [1, 100, 3001, 3002], the range is [2, 3002], resulting in 3 requests."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Stream",
                "slug": "data-stream"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class RecentCounter {\n public:\n  int ping(int t) {\n    q.push(t);\n    while (q.front() < t - 3000)\n      q.pop();\n    return q.size();\n  }\n\n private:\n  queue<int> q;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class RecentCounter {\n  public int ping(int t) {\n    q.offer(t);\n    while (q.peek() < t - 3000)\n      q.poll();\n    return q.size();\n  }\n\n  private Queue<Integer> q = new LinkedList<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class RecentCounter:\n  def __init__(self):\n    self.q = collections.deque()\n\n  def ping(self, t: int) -> int:\n    self.q.append(t)\n    while self.q[0] < t - 3000:\n      self.q.popleft()\n    return len(self.q)\n",
                "lang_text": "py"
            }
        }
    }
}