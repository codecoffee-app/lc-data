{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1786",
            "title": "Number of Restricted Paths From First to Last Node",
            "titleSlug": "number-of-restricted-paths-from-first-to-last-node",
            "content": "<p>There is an undirected weighted connected graph. You are given a positive integer <code>n</code> which denotes that the graph has <code>n</code> nodes labeled from <code>1</code> to <code>n</code>, and an array <code>edges</code> where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, weight<sub>i</sub>]</code> denotes that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> with weight equal to <code>weight<sub>i</sub></code>.</p>\n\n<p>A path from node <code>start</code> to node <code>end</code> is a sequence of nodes <code>[z<sub>0</sub>, z<sub>1</sub>,<sub> </sub>z<sub>2</sub>, ..., z<sub>k</sub>]</code> such that <code>z<sub>0 </sub>= start</code> and <code>z<sub>k</sub> = end</code> and there is an edge between <code>z<sub>i</sub></code> and <code>z<sub>i+1</sub></code> where <code>0 &lt;= i &lt;= k-1</code>.</p>\n\n<p>The distance of a path is the sum of the weights on the edges of the path. Let <code>distanceToLastNode(x)</code> denote the shortest distance of a path between node <code>n</code> and node <code>x</code>. A <strong>restricted path</strong> is a path that also satisfies that <code>distanceToLastNode(z<sub>i</sub>) &gt; distanceToLastNode(z<sub>i+1</sub>)</code> where <code>0 &lt;= i &lt;= k-1</code>.</p>\n\n<p>Return <em>the number of restricted paths from node</em> <code>1</code> <em>to node</em> <code>n</code>. Since that number may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/17/restricted_paths_ex1.png\" style=\"width: 351px; height: 341px;\" />\n<pre>\n<strong>Input:</strong> n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Each circle contains the node number in black and its <code>distanceToLastNode value in blue. </code>The three restricted paths are:\n1) 1 --&gt; 2 --&gt; 5\n2) 1 --&gt; 2 --&gt; 3 --&gt; 5\n3) 1 --&gt; 3 --&gt; 5\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/17/restricted_paths_ex22.png\" style=\"width: 356px; height: 401px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Each circle contains the node number in black and its <code>distanceToLastNode value in blue. </code>The only restricted path is 1 --&gt; 3 --&gt; 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>n - 1 &lt;= edges.length &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\n\t<li><code>u<sub>i </sub>!= v<sub>i</sub></code></li>\n\t<li><code>1 &lt;= weight<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li>There is at most one edge between any two nodes.</li>\n\t<li>There is at least one path between any two nodes.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1017,
            "dislikes": 193,
            "similarQuestions": "[{\"title\": \"All Ancestors of a Node in a Directed Acyclic Graph\", \"titleSlug\": \"all-ancestors-of-a-node-in-a-directed-acyclic-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Graph With Shortest Path Calculator\", \"titleSlug\": \"design-graph-with-shortest-path-calculator\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost of a Path With Special Roads\", \"titleSlug\": \"minimum-cost-of-a-path-with-special-roads\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.9K\", \"totalSubmission\": \"56K\", \"totalAcceptedRaw\": 21859, \"totalSubmissionRaw\": 56022, \"acRate\": \"39.0%\"}",
            "hints": [
                "Run a Dijkstra from node numbered n to compute distance from the last node.",
                "Consider all edges [u, v] one by one and direct them such that distance of u to n > distance of v to n. If both u and v are at the same distance from n, discard this edge.",
                "Now this problem reduces to computing the number of paths from 1 to n in a DAG, a standard DP problem."
            ],
            "rephrased": {
                "body": "Given an undirected, weighted, and connected graph with 'n' nodes labeled from 1 to 'n', and a list of edges where each edge[i] = [u_i, v_i, weight_i] represents an edge between nodes u_i and v_i with a weight of weight_i.  Define distanceToLastNode(x) as the shortest distance between node 'n' and node 'x'.  A restricted path from node 1 to node 'n' is a path [z_0, z_1, z_2, ..., z_k] such that z_0 = 1, z_k = n, there is an edge between z_i and z_{i+1} for 0 <= i < k-1, and distanceToLastNode(z_i) > distanceToLastNode(z_{i+1}) for 0 <= i < k-1.\n\nDetermine the number of restricted paths from node 1 to node 'n'.  Return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= n <= 2 * 10^4",
                    "n - 1 <= edges.length <= 4 * 10^4",
                    "edges[i].length == 3",
                    "1 <= u_i, v_i <= n",
                    "u_i != v_i",
                    "1 <= weight_i <= 10^5",
                    "There is at most one edge between any two nodes.",
                    "There is at least one path between any two nodes."
                ],
                "testcases": [
                    {
                        "input": "n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]",
                        "output": "3",
                        "explanation": "The three restricted paths are:\n1) 1 -> 2 -> 5\n2) 1 -> 2 -> 3 -> 5\n3) 1 -> 3 -> 5"
                    },
                    {
                        "input": "n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]",
                        "output": "1",
                        "explanation": "The only restricted path is 1 -> 3 -> 7."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph",
                "title": "All Ancestors of a Node in a Directed Acyclic Graph",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "design-graph-with-shortest-path-calculator",
                "title": "Design Graph With Shortest Path Calculator",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-cost-of-a-path-with-special-roads",
                "title": "Minimum Cost of a Path With Special Roads",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Run a Dijkstra from node numbered n to compute distance from the last node.",
            "Consider all edges [u, v] one by one and direct them such that distance of u to n > distance of v to n. If both u and v are at the same distance from n, discard this edge.",
            "Now this problem reduces to computing the number of paths from 1 to n in a DAG, a standard DP problem."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countRestrictedPaths(int n, vector<vector<int>>& edges) {\n    vector<vector<pair<int, int>>> graph(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0] - 1;\n      const int v = edge[1] - 1;\n      const int w = edge[2];\n      graph[u].emplace_back(v, w);\n      graph[v].emplace_back(u, w);\n    }\n\n    return dijkstra(graph, 0, n - 1);\n  }\n\n private:\n  int dijkstra(const vector<vector<pair<int, int>>>& graph, int src, int dst) {\n    constexpr int kMod = 1'000'000'007;\n    // ways[i] := # of restricted path from i -> n\n    vector<long long> ways(graph.size());\n    // dist[i] := distanceToLastNode(i)\n    vector<long long> dist(graph.size(), LLONG_MAX);\n    using P = pair<long long, int>;  // (d, u)\n    priority_queue<P, vector<P>, greater<>> minHeap;\n\n    dist[dst] = 0;\n    ways[dst] = 1;\n    minHeap.emplace(dist[dst], dst);\n\n    while (!minHeap.empty()) {\n      const auto [d, u] = minHeap.top();\n      minHeap.pop();\n      if (d > dist[u])\n        continue;\n      for (const auto& [v, w] : graph[u]) {\n        if (d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.emplace(dist[v], v);\n        }\n        if (dist[v] < dist[u]) {\n          ways[u] += ways[v];\n          ways[u] %= kMod;\n        }\n      }\n    }\n\n    return ways[src];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countRestrictedPaths(int n, int[][] edges) {\n    List<Pair<Integer, Integer>>[] graph = new List[n];\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0] - 1;\n      final int v = edge[1] - 1;\n      final int w = edge[2];\n      graph[u].add(new Pair<>(v, w));\n      graph[v].add(new Pair<>(u, w));\n    }\n\n    return dijkstra(graph, 0, n - 1);\n  }\n\n  private int dijkstra(List<Pair<Integer, Integer>>[] graph, int src, int dst) {\n    final int kMod = 1_000_000_007;\n    // ways[i] := # of restricted path from i -> n\n    long[] ways = new long[graph.length];\n    // dist[i] := distanceToLastNode(i)\n    long[] dist = new long[graph.length];\n    Arrays.fill(dist, Long.MAX_VALUE);\n    // (d, u)\n    Queue<Pair<Long, Integer>> minHeap = new PriorityQueue<>(Comparator.comparing(Pair::getKey));\n\n    ways[dst] = 1;\n    dist[dst] = 0;\n    minHeap.offer(new Pair<>(dist[dst], dst));\n\n    while (!minHeap.isEmpty()) {\n      final long d = minHeap.peek().getKey();\n      final int u = minHeap.poll().getValue();\n      if (d > dist[u])\n        continue;\n      for (Pair<Integer, Integer> pair : graph[u]) {\n        final int v = pair.getKey();\n        final int w = pair.getValue();\n        if (d + w < dist[v]) {\n          dist[v] = d + w;\n          minHeap.offer(new Pair<>(dist[v], v));\n        }\n        if (dist[v] < dist[u]) {\n          ways[u] += ways[v];\n          ways[u] %= kMod;\n        }\n      }\n    }\n\n    return (int) ways[src];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countRestrictedPaths(self, n: int, edges: List[List[int]]) -> int:\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      graph[u - 1].append((v - 1, w))\n      graph[v - 1].append((u - 1, w))\n\n    return self._dijkstra(graph, 0, n - 1)\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int, dst: int) -> int:\n    kMod = 10**9 + 7\n    # ways[i] := # of restricted path from i -> n\n    ways = [0] * len(graph)\n    # dist[i] := distanceToLastNode(i)\n    dist = [math.inf] * len(graph)\n\n    ways[dst] = 1\n    dist[dst] = 0\n    minHeap = [(dist[dst], dst)]  # (d, u)\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        if d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n        if dist[v] < dist[u]:\n          ways[u] += ways[v]\n          ways[u] %= kMod\n\n    return ways[src]\n",
                "lang_text": "py"
            }
        }
    }
}