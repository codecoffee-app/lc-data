{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1621",
            "title": "Number of Sets of K Non-Overlapping Line Segments",
            "titleSlug": "number-of-sets-of-k-non-overlapping-line-segments",
            "content": "<p>Given <code>n</code> points on a 1-D plane, where the <code>i<sup>th</sup></code> point (from <code>0</code> to <code>n-1</code>) is at <code>x = i</code>, find the number of ways we can draw <strong>exactly</strong> <code>k</code> <strong>non-overlapping</strong> line segments such that each segment covers two or more points. The endpoints of each segment must have <strong>integral coordinates</strong>. The <code>k</code> line segments <strong>do not</strong> have to cover all <code>n</code> points, and they are <strong>allowed</strong> to share endpoints.</p>\n\n<p>Return <em>the number of ways we can draw </em><code>k</code><em> non-overlapping line segments</em><em>.</em> Since this number can be huge, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/07/ex1.png\" style=\"width: 179px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> n = 4, k = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The two line segments are shown in red and blue.\nThe image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 30, k = 7\n<strong>Output:</strong> 796297179\n<strong>Explanation:</strong> The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 10<sup>9</sup> + 7 gives us 796297179.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= k &lt;= n-1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 445,
            "dislikes": 45,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.3K\", \"totalSubmission\": \"21.7K\", \"totalAcceptedRaw\": 9324, \"totalSubmissionRaw\": 21682, \"acRate\": \"43.0%\"}",
            "hints": [
                "Try to use dynamic programming where the current index and remaining number of line segments to form can describe any intermediate state.",
                "To make the computation of each state in constant time, we could add another flag to the state that indicates whether or not we are in the middle of placing a line (placed start point but no endpoint)."
            ],
            "rephrased": {
                "body": "Given `n` points on a 1-D plane, where the `i`th point (from `0` to `n-1`) is at `x = i`, determine the number of distinct ways to draw exactly `k` non-overlapping line segments.  Each segment must cover two or more points, and the endpoints must have integer coordinates. The `k` line segments don't need to cover all `n` points and are permitted to share endpoints.\n\nReturn the number of valid arrangements modulo `10^9 + 7`.",
                "constraints": [
                    "2 <= n <= 1000",
                    "1 <= k <= n-1"
                ],
                "testcases": [
                    {
                        "input": "n = 4, k = 2",
                        "output": "5",
                        "explanation": "There are 5 possible arrangements of 2 non-overlapping line segments. The segments can be {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}."
                    },
                    {
                        "input": "n = 3, k = 1",
                        "output": "3",
                        "explanation": "The 3 possible line segments are {(0,1)}, {(0,2)}, {(1,2)}."
                    },
                    {
                        "input": "n = 30, k = 7",
                        "output": "796297179",
                        "explanation": "The total number of ways to draw 7 line segments modulo 10^9 + 7 is 796297179."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Try to use dynamic programming where the current index and remaining number of line segments to form can describe any intermediate state.",
            "To make the computation of each state in constant time, we could add another flag to the state that indicates whether or not we are in the middle of placing a line (placed start point but no endpoint)."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numberOfSets(int n, int k) {\n    this->n = n;\n    dp.resize(n, vector<vector<int>>(k + 1, vector<int>(2, -1)));\n    return numberOfSets(0, k, /*drawing=*/false);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  int n;\n  vector<vector<vector<int>>> dp;\n\n  int numberOfSets(int i, int k, bool drawing) {\n    if (k == 0)  // Find a way to draw k segments.\n      return 1;\n    if (i == n)  // Reach the end.\n      return 0;\n    if (dp[i][k][drawing] != -1)\n      return dp[i][k][drawing];\n    if (drawing == 1)\n      // (1) Keep drawing at i and move to i + 1.\n      // (2) Stop at i so decrease k. We can start from i for the next segment.\n      return dp[i][k][drawing] = (numberOfSets(i + 1, k, true) +\n                                  numberOfSets(i, k - 1, false)) %\n                                 kMod;\n    // (1) Skip i and move to i + 1.\n    // (2) Start at i and move to i + 1.\n    return dp[i][k][drawing] = (numberOfSets(i + 1, k, false) +  //\n                                numberOfSets(i + 1, k, true)) %\n                               kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numberOfSets(int n, int k) {\n    this.n = n;\n    dp = new Integer[n][k + 1][2];\n    return numberOfSets(0, k, false);\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private int n;\n  private Integer[][][] dp;\n\n  private int numberOfSets(int i, int k, boolean drawing) {\n    if (k == 0) // Find a way to draw k segments.\n      return 1;\n    if (i == n) // Reach the end.\n      return 0;\n    if (dp[i][k][drawing ? 1 : 0] != null)\n      return dp[i][k][drawing ? 1 : 0];\n    if (drawing)\n      // (1) Keep drawing at i and move to i + 1.\n      // (2) Stop at i so decrease k. We can start from i for the next segment.\n      return dp[i][k][drawing ? 1 : 0] = (numberOfSets(i + 1, k, true) + //\n                                          numberOfSets(i, k - 1, false)) %\n                                         kMod;\n    // (1) Skip i and move to i + 1.\n    // (2) Start at i and move to i + 1.\n    return dp[i][k][drawing ? 1 : 0] = (numberOfSets(i + 1, k, false) + //\n                                        numberOfSets(i + 1, k, true)) %\n                                       kMod;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numberOfSets(self, n: int, k: int) -> int:\n    kMod = 1_000_000_007\n\n    @functools.lru_cache(None)\n    def dp(i: int, k: int, drawing: bool) -> int:\n      if k == 0:  # Find a way to draw k segments.\n        return 1\n      if i == n:  # Reach the end.\n        return 0\n      if drawing:\n        # (1) Keep drawing at i and move to i + 1.\n        # (2) Stop at i so decrease k. We can start from i for the next segment.\n        return (dp(i + 1, k, True) + dp(i, k - 1, False)) % kMod\n      # (1) Skip i and move to i + 1.\n      # (2) Start at i and move to i + 1.\n      return (dp(i + 1, k, False) + dp(i + 1, k, True)) % kMod\n\n    return dp(0, k, False)\n",
                "lang_text": "py"
            }
        }
    }
}