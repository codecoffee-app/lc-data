{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "996",
            "title": "Number of Squareful Arrays",
            "titleSlug": "number-of-squareful-arrays",
            "content": "<p>An array is <strong>squareful</strong> if the sum of every pair of adjacent elements is a <strong>perfect square</strong>.</p>\n\n<p>Given an integer array nums, return <em>the number of permutations of </em><code>nums</code><em> that are <strong>squareful</strong></em>.</p>\n\n<p>Two permutations <code>perm1</code> and <code>perm2</code> are different if there is some index <code>i</code> such that <code>perm1[i] != perm2[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,17,8]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> [1,8,17] and [17,8,1] are the valid permutations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,2]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 12</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 962,
            "dislikes": 42,
            "similarQuestions": "[{\"title\": \"Permutations II\", \"titleSlug\": \"permutations-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"35.7K\", \"totalSubmission\": \"72.1K\", \"totalAcceptedRaw\": 35743, \"totalSubmissionRaw\": 72121, \"acRate\": \"49.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "A permutation of an array is considered 'squareful' if the sum of any two adjacent elements in the permutation is a perfect square. Given an integer array `nums`, determine the number of distinct squareful permutations that can be formed from `nums`.",
                "constraints": [
                    "1 <= nums.length <= 12",
                    "0 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1,17,8]",
                        "output": "2",
                        "explanation": "The valid squareful permutations are [1,8,17] and [17,8,1]. Their adjacent elements sum to perfect squares: 1+8=9, 8+17=25, 17+8=25, and 8+1=9."
                    },
                    {
                        "input": "[2,2,2]",
                        "output": "1",
                        "explanation": "Since all elements are identical, there's only one distinct permutation: [2,2,2].  2+2=4 which is a perfect square, so this is a squareful permutation."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "permutations-ii",
                "title": "Permutations II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numSquarefulPerms(vector<int>& nums) {\n    int ans = 0;\n    std::ranges::sort(nums);\n    dfs(nums, vector<bool>(nums.size()), {}, ans);\n    return ans;\n  }\n\n private:\n  void dfs(vector<int>& nums, vector<bool>&& used, vector<int>&& path,\n           int& ans) {\n    if (path.size() > 1 && !isSquare(path.back() + path[path.size() - 2]))\n      return;\n    if (path.size() == nums.size()) {\n      ++ans;\n      return;\n    }\n\n    for (int i = 0; i < nums.size(); ++i) {\n      if (used[i])\n        continue;\n      if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])\n        continue;\n      used[i] = true;\n      path.push_back(nums[i]);\n      dfs(nums, move(used), move(path), ans);\n      path.pop_back();\n      used[i] = false;\n    }\n  }\n\n  bool isSquare(int num) {\n    const int root = sqrt(num);\n    return root * root == num;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numSquarefulPerms(int[] nums) {\n    boolean[] used = new boolean[nums.length];\n    Arrays.sort(nums);\n    dfs(nums, used, new ArrayList<>());\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private void dfs(int[] nums, boolean[] used, List<Integer> path) {\n    if (path.size() > 1 && !isSquare(path.get(path.size() - 1) + path.get(path.size() - 2)))\n      return;\n    if (path.size() == nums.length) {\n      ++ans;\n      return;\n    }\n\n    for (int i = 0; i < nums.length; ++i) {\n      if (used[i])\n        continue;\n      if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])\n        continue;\n      used[i] = true;\n      path.add(nums[i]);\n      dfs(nums, used, path);\n      path.remove(path.size() - 1);\n      used[i] = false;\n    }\n  }\n\n  private boolean isSquare(int num) {\n    int root = (int) Math.sqrt(num);\n    return root * root == num;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numSquarefulPerms(self, nums: List[int]) -> int:\n    ans = 0\n    used = [False] * len(nums)\n\n    def isSquare(num: int) -> bool:\n      root = int(math.sqrt(num))\n      return root * root == num\n\n    def dfs(path: List[int]) -> None:\n      nonlocal ans\n      if len(path) > 1 and not isSquare(path[-1] + path[-2]):\n        return\n      if len(path) == len(nums):\n        ans += 1\n        return\n\n      for i, a in enumerate(nums):\n        if used[i]:\n          continue\n        if i > 0 and nums[i] == nums[i - 1] and not used[i - 1]:\n          continue\n        used[i] = True\n        dfs(path + [a])\n        used[i] = False\n\n    nums.sort()\n    dfs([])\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}