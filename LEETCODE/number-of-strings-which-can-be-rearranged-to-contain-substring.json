{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2930",
            "title": "Number of Strings Which Can Be Rearranged to Contain Substring",
            "titleSlug": "number-of-strings-which-can-be-rearranged-to-contain-substring",
            "content": "<p>You are given an integer <code>n</code>.</p>\n\n<p>A string <code>s</code> is called <strong>good </strong>if it contains only lowercase English characters <strong>and</strong> it is possible to rearrange the characters of <code>s</code> such that the new string contains <code>&quot;leet&quot;</code> as a <strong>substring</strong>.</p>\n\n<p>For example:</p>\n\n<ul>\n\t<li>The string <code>&quot;lteer&quot;</code> is good because we can rearrange it to form <code>&quot;leetr&quot;</code> .</li>\n\t<li><code>&quot;letl&quot;</code> is not good because we cannot rearrange it to contain <code>&quot;leet&quot;</code> as a substring.</li>\n</ul>\n\n<p>Return <em>the <strong>total</strong> number of good strings of length </em><code>n</code>.</p>\n\n<p>Since the answer may be large, return it <strong>modulo </strong><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The 12 strings which can be rearranged to have &quot;leet&quot; as a substring are: &quot;eelt&quot;, &quot;eetl&quot;, &quot;elet&quot;, &quot;elte&quot;, &quot;etel&quot;, &quot;etle&quot;, &quot;leet&quot;, &quot;lete&quot;, &quot;ltee&quot;, &quot;teel&quot;, &quot;tele&quot;, and &quot;tlee&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 83943898\n<strong>Explanation:</strong> The number of strings with length 10 which can be rearranged to have &quot;leet&quot; as a substring is 526083947580. Hence the answer is 526083947580 % (10<sup>9</sup> + 7) = 83943898.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 162,
            "dislikes": 64,
            "similarQuestions": "[{\"title\": \"Count Vowels Permutation\", \"titleSlug\": \"count-vowels-permutation\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                }
            ],
            "stats": "{\"totalAccepted\": \"6K\", \"totalSubmission\": \"10.7K\", \"totalAcceptedRaw\": 5957, \"totalSubmissionRaw\": 10659, \"acRate\": \"55.9%\"}",
            "hints": [
                "A good string must contain at least one <code>l</code>, one <code>t</code>, and two <code>e</code>.",
                "Divide the problem into subproblems and use Dynamic Programming."
            ],
            "rephrased": {
                "body": "Given an integer `n`, determine the number of strings of length `n` that consist of only lowercase English characters and can be rearranged to contain the substring \"leet\". Return the result modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= n <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "12",
                        "explanation": "There are 12 strings of length 4 that can be rearranged to include 'leet' as a substring. These are: \"eelt\", \"eetl\", \"elet\", \"elte\", \"etel\", \"etle\", \"leet\", \"lete\", \"ltee\", \"teel\", \"tele\", and \"tlee\"."
                    },
                    {
                        "input": "10",
                        "output": "83943898",
                        "explanation": "The total number of strings of length 10 that can be rearranged to contain 'leet' is 526083947580.  Taking this number modulo (10<sup>9</sup> + 7) yields 83943898."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-vowels-permutation",
                "title": "Count Vowels Permutation",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "A good string must contain at least one <code>l</code>, one <code>t</code>, and two <code>e</code>.",
            "Divide the problem into subproblems and use Dynamic Programming."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int stringCount(int n) {\n    // There're three invalid conditions:\n    //   a. count('l') == 0\n    //   b. count('e') < 2\n    //   c. count('t') == 0\n    //\n    // By Principle of Inclusion-Exclusion (PIE):\n    //   ans = allCount - a - b - c + ab + ac + bc - abc\n    const long allCount = modPow(26, n);\n    const long a = modPow(25, n);\n    const long b = modPow(25, n);\n    const long c = modPow(25, n) + n * modPow(25, n - 1);\n    const long ab = modPow(24, n) + n * modPow(24, n - 1);\n    const long ac = modPow(24, n);\n    const long bc = modPow(24, n) + n * modPow(24, n - 1);\n    const long abc = modPow(23, n) + n * modPow(23, n - 1);\n    return ((allCount - a - b - c + ab + ac + bc - abc) % kMod + kMod) % kMod;\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n\n  long modPow(long x, long n) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x % kMod, (n - 1)) % kMod;\n    return modPow(x * x % kMod, (n / 2)) % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int stringCount(int n) {\n    // There're three invalid conditions:\n    //   a. count('l') == 0\n    //   b. count('e') < 2\n    //   c. count('t') == 0\n    //\n    // By Principle of Inclusion-Exclusion (PIE):\n    //   ans = allCount - a - b - c + ab + ac + bc - abc\n    final long allCount = modPow(26, n);\n    final long a = modPow(25, n);\n    final long b = modPow(25, n);\n    final long c = modPow(25, n) + n * modPow(25, n - 1);\n    final long ab = modPow(24, n) + n * modPow(24, n - 1);\n    final long ac = modPow(24, n);\n    final long bc = modPow(24, n) + n * modPow(24, n - 1);\n    final long abc = modPow(23, n) + n * modPow(23, n - 1);\n    return (int) (((allCount - a - b - c + ab + ac + bc - abc) % kMod + kMod) % kMod);\n  }\n\n  private static final int kMod = 1_000_000_007;\n\n  private long modPow(long x, long n) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x, n - 1) % kMod;\n    return modPow(x * x % kMod, n / 2);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def stringCount(self, n: int) -> int:\n    # There're three invalid conditions:\n    #   a. count('l') == 0\n    #   b. count('e') < 2\n    #   c. count('t') == 0\n    #\n    # By Principle of Inclusion-Exclusion (PIE):\n    #   ans = allCount - a - b - c + ab + ac + bc - abc\n    kMod = 1_000_000_007\n    allCount = pow(26, n, kMod)\n    a = pow(25, n, kMod)\n    b = pow(25, n, kMod)\n    c = pow(25, n, kMod) + n * pow(25, n - 1, kMod)\n    ab = pow(24, n, kMod) + n * pow(24, n - 1, kMod)\n    ac = pow(24, n, kMod)\n    bc = pow(24, n, kMod) + n * pow(24, n - 1, kMod)\n    abc = pow(23, n, kMod) + n * pow(23, n - 1, kMod)\n    return (allCount - a - b - c + ab + ac + bc - abc) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}