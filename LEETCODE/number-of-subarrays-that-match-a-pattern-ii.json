{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3036",
            "title": "Number of Subarrays That Match a Pattern II",
            "titleSlug": "number-of-subarrays-that-match-a-pattern-ii",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of size <code>n</code>, and a <strong>0-indexed</strong> integer array <code>pattern</code> of size <code>m</code> consisting of integers <code>-1</code>, <code>0</code>, and <code>1</code>.</p>\n\n<p>A <span data-keyword=\"subarray\">subarray</span> <code>nums[i..j]</code> of size <code>m + 1</code> is said to match the <code>pattern</code> if the following conditions hold for each element <code>pattern[k]</code>:</p>\n\n<ul>\n\t<li><code>nums[i + k + 1] &gt; nums[i + k]</code> if <code>pattern[k] == 1</code>.</li>\n\t<li><code>nums[i + k + 1] == nums[i + k]</code> if <code>pattern[k] == 0</code>.</li>\n\t<li><code>nums[i + k + 1] &lt; nums[i + k]</code> if <code>pattern[k] == -1</code>.</li>\n</ul>\n\n<p>Return <em>the<strong> count</strong> of subarrays in</em> <code>nums</code> <em>that match the</em> <code>pattern</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6], pattern = [1,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The pattern [1,1] indicates that we are looking for strictly increasing subarrays of size 3. In the array nums, the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.\nHence, there are 4 subarrays in nums that match the pattern.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>Here, the pattern [1,0,-1] indicates that we are looking for a sequence where the first number is smaller than the second, the second is equal to the third, and the third is greater than the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3] match this pattern.\nHence, there are 2 subarrays in nums that match the pattern.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= m == pattern.length &lt; n</code></li>\n\t<li><code>-1 &lt;= pattern[i] &lt;= 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 138,
            "dislikes": 5,
            "similarQuestions": "[{\"title\": \"Match Substring After Replacement\", \"titleSlug\": \"match-substring-after-replacement\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.5K\", \"totalSubmission\": \"32.7K\", \"totalAcceptedRaw\": 10546, \"totalSubmissionRaw\": 32717, \"acRate\": \"32.2%\"}",
            "hints": [
                "Create a second array <code>nums2</code> such that <code>nums2[i] = 1</code> if <code>nums[i + 1] > nums[i]</code>, <code>nums2[i] = 0</code> if <code>nums[i + 1] == nums[i]</code>, and <code>nums2[i] = -1</code> if <code>nums[i + 1] < nums[i]</code>.",
                "The problem becomes: \u201cCount the number of subarrays in <code>nums2</code> that are equal to <code>pattern</code>.",
                "Use Knuth-Morris-Pratt or Z-Function algorithms."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` of size `n`, and a 0-indexed integer array `pattern` of size `m` consisting of integers -1, 0, and 1. A subarray `nums[i..j]` of size `m + 1` matches the `pattern` if, for each element `pattern[k]`: \n\n*   `nums[i + k + 1] > nums[i + k]` if `pattern[k] == 1`.\n*   `nums[i + k + 1] == nums[i + k]` if `pattern[k] == 0`.\n*   `nums[i + k + 1] < nums[i + k]` if `pattern[k] == -1`.\n\nReturn the count of subarrays in `nums` that match the `pattern`.",
                "constraints": [
                    "2 <= n == nums.length <= 10^6",
                    "1 <= nums[i] <= 10^9",
                    "1 <= m == pattern.length < n",
                    "-1 <= pattern[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": {
                            "nums": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "pattern": [
                                1,
                                1
                            ]
                        },
                        "output": 4,
                        "explanation": "The pattern [1,1] represents strictly increasing subarrays of length 3. The subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] in `nums` match the pattern. Thus, the count is 4."
                    },
                    {
                        "input": {
                            "nums": [
                                1,
                                4,
                                4,
                                1,
                                3,
                                5,
                                5,
                                3
                            ],
                            "pattern": [
                                1,
                                0,
                                -1
                            ]
                        },
                        "output": 2,
                        "explanation": "The pattern [1,0,-1] signifies a sequence where the first number is less than the second, the second equals the third, and the third is greater than the fourth. The subarrays [1,4,4,1] and [3,5,5,3] in `nums` satisfy this pattern, resulting in a count of 2."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "match-substring-after-replacement",
                "title": "Match Substring After Replacement",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Create a second array <code>nums2</code> such that <code>nums2[i] = 1</code> if <code>nums[i + 1] > nums[i]</code>, <code>nums2[i] = 0</code> if <code>nums[i + 1] == nums[i]</code>, and <code>nums2[i] = -1</code> if <code>nums[i + 1] < nums[i]</code>.",
            "The problem becomes: \u201cCount the number of subarrays in <code>nums2</code> that are equal to <code>pattern</code>.",
            "Use Knuth-Morris-Pratt or Z-Function algorithms."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Same as 3034. Number of Subarrays That Match a Pattern I\n  int countMatchingSubarrays(vector<int>& nums, vector<int>& pattern) {\n    const vector<int> numsPattern = getNumsPattern(nums);\n    return kmp(numsPattern, pattern);\n  }\n\n private:\n  int getNum(int a, int b) {\n    if (a < b)\n      return 1;\n    if (a > b)\n      return -1;\n    return 0;\n  }\n\n  vector<int> getNumsPattern(const vector<int>& nums) {\n    vector<int> numsPattern;\n    for (int i = 1; i < nums.size(); ++i)\n      numsPattern.push_back(getNum(nums[i - 1], nums[i]));\n    return numsPattern;\n  }\n\n  // Returns the number of occurrences of the pattern in `nums`.\n  int kmp(const vector<int>& nums, const vector<int>& pattern) {\n    const vector<int> lps = getLPS(pattern);\n    int res = 0;\n    int i = 0;  // nums' index\n    int j = 0;  // pattern's index\n    while (i < nums.size()) {\n      if (nums[i] == pattern[j]) {\n        ++i;\n        ++j;\n        if (j == pattern.size()) {\n          ++res;\n          j = lps[j - 1];\n        }\n      }\n      // Mismatch after j matches.\n      else if (j > 0) {\n        // Don't match lps[0..lps[j - 1]] since they will match anyway.\n        j = lps[j - 1];\n      } else {\n        ++i;\n      }\n    }\n    return res;\n  }\n\n  // Returns the lps array, where lps[i] is the length of the longest prefix of\n  // pattern[0..i] which is also a suffix of this substring.\n  vector<int> getLPS(const vector<int>& pattern) {\n    vector<int> lps(pattern.size());\n    for (int i = 1, j = 0; i < pattern.size(); ++i) {\n      while (j > 0 && pattern[j] != pattern[i])\n        j = lps[j - 1];\n      if (pattern[i] == pattern[j])\n        lps[i] = ++j;\n    }\n    return lps;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Same as 3034. Number of Subarrays That Match a Pattern I\n  public int countMatchingSubarrays(int[] nums, int[] pattern) {\n    int[] numsPattern = getNumsPattern(nums);\n    return kmp(numsPattern, pattern);\n  }\n\n  private int getNum(int a, int b) {\n    if (a < b)\n      return 1;\n    if (a > b)\n      return -1;\n    return 0;\n  }\n\n  private int[] getNumsPattern(int[] nums) {\n    int[] numsPattern = new int[nums.length - 1];\n    for (int i = 1; i < nums.length; ++i)\n      numsPattern[i - 1] = getNum(nums[i - 1], nums[i]);\n    return numsPattern;\n  }\n\n  // Returns the number of occurrences of the pattern in `nums`.\n  private int kmp(int[] nums, int[] pattern) {\n    int[] lps = getLPS(pattern);\n    int res = 0;\n    int i = 0; // nums' index\n    int j = 0; // pattern's index\n    while (i < nums.length) {\n      if (nums[i] == pattern[j]) {\n        ++i;\n        ++j;\n        if (j == pattern.length) {\n          ++res;\n          j = lps[j - 1];\n        }\n      }\n      // Mismatch after j matches.\n      else if (j > 0) {\n        // Don't match lps[0..lps[j - 1]] since they will match anyway.\n        j = lps[j - 1];\n      } else {\n        ++i;\n      }\n    }\n    return res;\n  }\n\n  // Returns the lps array, where lps[i] is the longest proper prefix of\n  // pattern[0..i] which is also a suffix of this substring.\n  private int[] getLPS(int[] pattern) {\n    int[] lps = new int[pattern.length];\n    for (int i = 1, j = 0; i < pattern.length; ++i) {\n      while (j > 0 && pattern[j] != pattern[i])\n        j = lps[j - 1];\n      if (pattern[i] == pattern[j])\n        lps[i] = ++j;\n    }\n    return lps;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Same as 3034. Number of Subarrays That Match a Pattern I\n  def countMatchingSubarrays(self, nums: List[int], pattern: List[int]) -> int:\n    def getNum(a: int, b: int) -> int:\n      if a < b:\n        return 1\n      if a > b:\n        return -1\n      return 0\n\n    numsPattern = [getNum(a, b) for a, b in itertools.pairwise(nums)]\n    return self._kmp(numsPattern, pattern)\n\n  def _kmp(self, nums: List[int], pattern: List[int]) -> int:\n    \"\"\"Returns the number of occurrences of the pattern in `nums`.\"\"\"\n\n    def getLPS(nums: List[int]) -> List[int]:\n      \"\"\"\n      Returns the lps array, where lps[i] is the length of the longest prefix of\n      nums[0..i] which is also a suffix of this substring.\n      \"\"\"\n      lps = [0] * len(nums)\n      j = 0\n      for i in range(1, len(nums)):\n        while j > 0 and nums[j] != nums[i]:\n          j = lps[j - 1]\n        if nums[i] == nums[j]:\n          lps[i] = j + 1\n          j += 1\n      return lps\n\n    lps = getLPS(pattern)\n    res = 0\n    i = 0  # s' index\n    j = 0  # pattern's index\n    while i < len(nums):\n      if nums[i] == pattern[j]:\n        i += 1\n        j += 1\n        if j == len(pattern):\n          res += 1\n          j = lps[j - 1]\n      # Mismatch after j matches.\n      elif j != 0:\n          # Don't match lps[0..lps[j - 1]] since they will match anyway.\n        j = lps[j - 1]\n      else:\n        i += 1\n    return res\n",
                "lang_text": "py"
            }
        }
    }
}