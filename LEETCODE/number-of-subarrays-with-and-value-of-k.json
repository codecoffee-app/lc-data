{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3209",
            "title": "Number of Subarrays With AND Value of K",
            "titleSlug": "number-of-subarrays-with-and-value-of-k",
            "content": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return the number of <span data-keyword=\"subarray-nonempty\">subarrays</span> of <code>nums</code> where the bitwise <code>AND</code> of the elements of the subarray equals <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,1,1], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All subarrays contain only 1&#39;s.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,1,2], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Subarrays having an <code>AND</code> value of 1 are: <code>[<u><strong>1</strong></u>,1,2]</code>, <code>[1,<u><strong>1</strong></u>,2]</code>, <code>[<u><strong>1,1</strong></u>,2]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Subarrays having an <code>AND</code> value of 2 are: <code>[1,<b><u>2</u></b>,3]</code>, <code>[1,<u><strong>2,3</strong></u>]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 132,
            "dislikes": 7,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.1K\", \"totalSubmission\": \"30.1K\", \"totalAcceptedRaw\": 10087, \"totalSubmissionRaw\": 30069, \"acRate\": \"33.5%\"}",
            "hints": [
                "Let\u2019s say we want to count the number of pairs <code>(l, r)</code> such that <code>nums[l] & nums[l + 1] & \u2026 & nums[r] == k</code>.",
                "Fix the left index <code>l</code>.",
                "Note that if you increase <code>r</code> for a fixed <code>l</code>, then the AND value of the subarray either decreases or remains unchanged.",
                "Therefore, consider using binary search.",
                "To calculate the AND value of a subarray, use sparse tables."
            ],
            "rephrased": {
                "body": "Given an array of integers `nums` and an integer `k`, determine the count of subarrays within `nums` where the bitwise AND of all elements in the subarray equals `k`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "0 <= nums[i], k <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,1,1], k = 1",
                        "output": "6",
                        "explanation": "All subarrays consist only of 1s, so their bitwise AND is also 1."
                    },
                    {
                        "input": "nums = [1,1,2], k = 1",
                        "output": "3",
                        "explanation": "The subarrays with a bitwise AND of 1 are: [1,1,2], [1,1,2], [1,1,2]."
                    },
                    {
                        "input": "nums = [1,2,3], k = 2",
                        "output": "2",
                        "explanation": "The subarrays with a bitwise AND of 2 are: [2], [2,3]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Let\u2019s say we want to count the number of pairs <code>(l, r)</code> such that <code>nums[l] & nums[l + 1] & \u2026 & nums[r] == k</code>.",
            "Fix the left index <code>l</code>.",
            "Note that if you increase <code>r</code> for a fixed <code>l</code>, then the AND value of the subarray either decreases or remains unchanged.",
            "Therefore, consider using binary search.",
            "To calculate the AND value of a subarray, use sparse tables."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 1521. Find a Value of a Mysterious Function Closest to Target\n  long long countSubarrays(vector<int>& nums, int k) {\n    long long ans = 0;\n    // the counter of all the values of subarrays that end in the previous\n    // number\n    unordered_map<int, int> prev;\n\n    for (const int num : nums) {\n      unordered_map<int, int> curr{{num, 1}};\n      // Extend each subarray that ends in the previous number. Due to\n      // monotonicity of the AND operation, the size of `curr` will be at most\n      // num.bit_count() + 1.\n      for (const auto& [val, freq] : prev)\n        curr[val & num] += freq;\n      ans += curr.contains(k) ? curr[k] : 0;\n      prev = std::move(curr);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 1521. Find a Value of a Mysterious Function Closest to Target\n  public long countSubarrays(int[] nums, int k) {\n    long ans = 0;\n    // the counter of all the values of subarrays that end in the previous\n    // number\n    Map<Integer, Integer> prev = new HashMap<>();\n\n    for (final int num : nums) {\n      Map<Integer, Integer> curr = new HashMap<>() {\n        { put(num, 1); }\n      };\n      // Extend each subarray that ends in the previous number. Due to\n      // monotonicity of the AND operation, the size of `curr` will be at most\n      // Integer.bitCount(num) + 1.\n      for (Map.Entry<Integer, Integer> entry : prev.entrySet()) {\n        final int val = entry.getKey();\n        final int freq = entry.getValue();\n        curr.merge(val & num, freq, Integer::sum);\n      }\n      ans += curr.getOrDefault(k, 0);\n      prev = curr;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 1521. Find a Value of a Mysterious Function Closest to Target\n  def countSubarrays(self, nums: list[int], k: int) -> int:\n    ans = 0\n    # the counter of all the values of subarrays that end in the previous\n    # number\n    prev = collections.Counter()\n\n    for num in nums:\n      # Extend each subarray that ends in the previous number. Due to\n      # monotonicity of the AND operation, the size of `curr` will be at most\n      # num.bit_count() + 1.\n      curr = collections.Counter({num: 1})\n      for val, freq in prev.items():\n        curr[val & num] += freq\n      ans += curr[k]\n      prev = curr\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}