{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1498",
            "title": "Number of Subsequences That Satisfy the Given Sum Condition",
            "titleSlug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
            "content": "<p>You are given an array of integers <code>nums</code> and an integer <code>target</code>.</p>\n\n<p>Return <em>the number of <strong>non-empty</strong> subsequences of </em><code>nums</code><em> such that the sum of the minimum and maximum element on it is less or equal to </em><code>target</code>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,5,6,7], target = 9\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are 4 subsequences that satisfy the condition.\n[3] -&gt; Min value + max value &lt;= target (3 + 3 &lt;= 9)\n[3,5] -&gt; (3 + 5 &lt;= 9)\n[3,5,6] -&gt; (3 + 6 &lt;= 9)\n[3,6] -&gt; (3 + 6 &lt;= 9)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3,6,8], target = 10\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,3,4,6,7], target = 12\n<strong>Output:</strong> 61\n<strong>Explanation:</strong> There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).\nNumber of valid subsequences (63 - 2 = 61).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= target &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3756,
            "dislikes": 344,
            "similarQuestions": "[{\"title\": \"Minimum Operations to Form Subsequence With Target Sum\", \"titleSlug\": \"minimum-operations-to-form-subsequence-with-target-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"110.8K\", \"totalSubmission\": \"252.1K\", \"totalAcceptedRaw\": 110828, \"totalSubmissionRaw\": 252080, \"acRate\": \"44.0%\"}",
            "hints": [
                "Sort the array nums.",
                "Use two pointers approach: Given an index i (choose it as the minimum in a subsequence) find the maximum j where j \u2265 i and nums[i] +nums[j] \u2264 target.",
                "Count the number of subsequences."
            ],
            "rephrased": {
                "body": "Given an array of integers `nums` and an integer `target`, find the number of non-empty subsequences of `nums` such that the sum of the minimum and maximum element in the subsequence is less than or equal to `target`.  Return the result modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= nums.length <= 10<sup>5</sup>",
                    "1 <= nums[i] <= 10<sup>6</sup>",
                    "1 <= target <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [3,5,6,7], target = 9",
                        "output": "4",
                        "explanation": "The valid subsequences are: [3], [3,5], [3,5,6], and [3,6]."
                    },
                    {
                        "input": "nums = [3,3,6,8], target = 10",
                        "output": "6",
                        "explanation": "The valid subsequences are: [3], [3], [3,3], [3,6], [3,6], and [3,3,6]."
                    },
                    {
                        "input": "nums = [2,3,3,4,6,7], target = 12",
                        "output": "61",
                        "explanation": "There are 63 non-empty subsequences. Two of them, [6,7] and [7], do not satisfy the condition. Therefore, the number of valid subsequences is 63 - 2 = 61."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-operations-to-form-subsequence-with-target-sum",
                "title": "Minimum Operations to Form Subsequence With Target Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort the array nums.",
            "Use two pointers approach: Given an index i (choose it as the minimum in a subsequence) find the maximum j where j \u2265 i and nums[i] +nums[j] \u2264 target.",
            "Count the number of subsequences."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numSubseq(vector<int>& nums, int target) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = nums.size();\n    int ans = 0;\n    vector<int> pows(n, 1);  // pows[i] = 2^i % kMod\n\n    for (int i = 1; i < n; ++i)\n      pows[i] = pows[i - 1] * 2 % kMod;\n\n    std::ranges::sort(nums);\n\n    for (int l = 0, r = n - 1; l <= r;)\n      if (nums[l] + nums[r] <= target) {\n        ans += pows[r - l];\n        ans %= kMod;\n        ++l;\n      } else {\n        --r;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numSubseq(int[] nums, int target) {\n    final int kMod = 1_000_000_007;\n    final int n = nums.length;\n    int ans = 0;\n    int[] pows = new int[n]; // pows[i] = 2^i % kMod\n    pows[0] = 1;\n\n    for (int i = 1; i < n; ++i)\n      pows[i] = pows[i - 1] * 2 % kMod;\n\n    Arrays.sort(nums);\n\n    for (int l = 0, r = n - 1; l <= r;)\n      if (nums[l] + nums[r] <= target) {\n        ans += pows[r - l];\n        ans %= kMod;\n        ++l;\n      } else {\n        --r;\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numSubseq(self, nums: List[int], target: int) -> int:\n    kMod = 1_000_000_007\n    n = len(nums)\n    ans = 0\n\n    nums.sort()\n\n    l = 0\n    r = n - 1\n    while l <= r:\n      if nums[l] + nums[r] <= target:\n        ans += pow(2, r - l, kMod)\n        l += 1\n      else:\n        r -= 1\n\n    return ans % kMod\n",
                "lang_text": "py"
            }
        }
    }
}