{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1358",
            "title": "Number of Substrings Containing All Three Characters",
            "titleSlug": "number-of-substrings-containing-all-three-characters",
            "content": "<p>Given a string <code>s</code>&nbsp;consisting only of characters <em>a</em>, <em>b</em> and <em>c</em>.</p>\n\n<p>Return the number of substrings containing <b>at least</b>&nbsp;one occurrence of all these characters <em>a</em>, <em>b</em> and <em>c</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabc&quot;\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The substrings containing&nbsp;at least&nbsp;one occurrence of the characters&nbsp;<em>a</em>,&nbsp;<em>b</em>&nbsp;and&nbsp;<em>c are &quot;</em>abc<em>&quot;, &quot;</em>abca<em>&quot;, &quot;</em>abcab<em>&quot;, &quot;</em>abcabc<em>&quot;, &quot;</em>bca<em>&quot;, &quot;</em>bcab<em>&quot;, &quot;</em>bcabc<em>&quot;, &quot;</em>cab<em>&quot;, &quot;</em>cabc<em>&quot; </em>and<em> &quot;</em>abc<em>&quot; </em>(<strong>again</strong>)<em>. </em>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaacb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The substrings containing&nbsp;at least&nbsp;one occurrence of the characters&nbsp;<em>a</em>,&nbsp;<em>b</em>&nbsp;and&nbsp;<em>c are &quot;</em>aaacb<em>&quot;, &quot;</em>aacb<em>&quot; </em>and<em> &quot;</em>acb<em>&quot;.</em><em> </em>\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 5 x 10^4</code></li>\n\t<li><code>s</code>&nbsp;only consists of&nbsp;<em>a</em>, <em>b</em> or <em>c&nbsp;</em>characters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2919,
            "dislikes": 45,
            "similarQuestions": "[{\"title\": \"Vowels of All Substrings\", \"titleSlug\": \"vowels-of-all-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Complete Substrings\", \"titleSlug\": \"count-complete-substrings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"79K\", \"totalSubmission\": \"120.7K\", \"totalAcceptedRaw\": 78971, \"totalSubmissionRaw\": 120687, \"acRate\": \"65.4%\"}",
            "hints": [
                "For each position we simply need to find the first occurrence of a/b/c on or after this position.",
                "So we can pre-compute three link-list of indices of each a, b, and c."
            ],
            "rephrased": {
                "body": "Given a string `s` consisting only of the characters 'a', 'b', and 'c', find the number of substrings that contain at least one occurrence of each of these characters.",
                "constraints": [
                    "3 <= s.length <= 5 x 10^4",
                    "s only consists of 'a', 'b', or 'c' characters."
                ],
                "testcases": [
                    {
                        "input": "abcabc",
                        "output": 10,
                        "explanation": "The substrings \"abc\", \"abca\", \"abcab\", \"abcabc\", \"bca\", \"bcab\", \"bcabc\", \"cab\", \"cabc\", and \"abc\" (again) each contain at least one 'a', one 'b', and one 'c'."
                    },
                    {
                        "input": "aaacb",
                        "output": 3,
                        "explanation": "The substrings \"aaacb\", \"aacb\", and \"acb\" each contain at least one 'a', one 'b', and one 'c'."
                    },
                    {
                        "input": "abc",
                        "output": 1,
                        "explanation": "The substring \"abc\" contains at least one 'a', one 'b', and one 'c'."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "vowels-of-all-substrings",
                "title": "Vowels of All Substrings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-complete-substrings",
                "title": "Count Complete Substrings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each position we simply need to find the first occurrence of a/b/c on or after this position.",
            "So we can pre-compute three link-list of indices of each a, b, and c."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 3. Longest Substring Without Repeating Characters\n  int numberOfSubstrings(string s) {\n    int ans = 0;\n    vector<int> count(3);\n\n    int l = 0;\n    for (const char c : s) {\n      ++count[c - 'a'];\n      while (count[0] > 0 && count[1] > 0 && count[2] > 0)\n        --count[s[l++] - 'a'];\n      // s[0..r], s[1..r], ..., s[l - 1..r] are satified strings.\n      ans += l;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 3. Longest SubString Without Repeating Characters\n  public int numberOfSubstrings(String s) {\n    int ans = 0;\n    int[] count = new int[3];\n\n    int l = 0;\n    for (final char c : s.toCharArray()) {\n      ++count[c - 'a'];\n      while (count[0] > 0 && count[1] > 0 && count[2] > 0)\n        --count[s.charAt(l++) - 'a'];\n      // s[0..r], s[1..r], ..., s[l - 1..r] are satified strings.\n      ans += l;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 3. Longest SubWithout Repeating Characters\n  def numberOfSubstrings(self, s: str) -> int:\n    ans = 0\n    count = {c: 0 for c in 'abc'}\n\n    l = 0\n    for c in s:\n      count[c] += 1\n      while min(count.values()) > 0:\n        count[s[l]] -= 1\n        l += 1\n      # s[0..r], s[1..r], ..., s[l - 1..r] are satified strings.\n      ans += l\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}