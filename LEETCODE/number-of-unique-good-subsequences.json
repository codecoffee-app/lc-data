{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1987",
            "title": "Number of Unique Good Subsequences",
            "titleSlug": "number-of-unique-good-subsequences",
            "content": "<p>You are given a binary string <code>binary</code>. A <strong>subsequence</strong> of <code>binary</code> is considered <strong>good</strong> if it is <strong>not empty</strong> and has <strong>no leading zeros</strong> (with the exception of <code>&quot;0&quot;</code>).</p>\n\n<p>Find the number of <strong>unique good subsequences</strong> of <code>binary</code>.</p>\n\n<ul>\n\t<li>For example, if <code>binary = &quot;001&quot;</code>, then all the <strong>good</strong> subsequences are <code>[&quot;0&quot;, &quot;0&quot;, &quot;1&quot;]</code>, so the <strong>unique</strong> good subsequences are <code>&quot;0&quot;</code> and <code>&quot;1&quot;</code>. Note that subsequences <code>&quot;00&quot;</code>, <code>&quot;01&quot;</code>, and <code>&quot;001&quot;</code> are not good because they have leading zeros.</li>\n</ul>\n\n<p>Return <em>the number of <strong>unique good subsequences</strong> of </em><code>binary</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A <strong>subsequence</strong> is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> binary = &quot;001&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The good subsequences of binary are [&quot;0&quot;, &quot;0&quot;, &quot;1&quot;].\nThe unique good subsequences are &quot;0&quot; and &quot;1&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> binary = &quot;11&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The good subsequences of binary are [&quot;1&quot;, &quot;1&quot;, &quot;11&quot;].\nThe unique good subsequences are &quot;1&quot; and &quot;11&quot;.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> binary = &quot;101&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The good subsequences of binary are [&quot;1&quot;, &quot;0&quot;, &quot;1&quot;, &quot;10&quot;, &quot;11&quot;, &quot;101&quot;]. \nThe unique good subsequences are &quot;0&quot;, &quot;1&quot;, &quot;10&quot;, &quot;11&quot;, and &quot;101&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= binary.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>binary</code> consists of only <code>&#39;0&#39;</code>s and <code>&#39;1&#39;</code>s.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 665,
            "dislikes": 13,
            "similarQuestions": "[{\"title\": \"Distinct Subsequences\", \"titleSlug\": \"distinct-subsequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Distinct Subsequences II\", \"titleSlug\": \"distinct-subsequences-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"11.3K\", \"totalSubmission\": \"21.6K\", \"totalAcceptedRaw\": 11304, \"totalSubmissionRaw\": 21586, \"acRate\": \"52.4%\"}",
            "hints": [
                "The number of unique good subsequences is equal to the number of unique decimal values there are for all possible subsequences.",
                "Find the answer at each index based on the previous indexes' answers."
            ],
            "rephrased": {
                "body": "You are given a binary string `binary`. A subsequence of `binary` is considered good if it is not empty and has no leading zeros (with the exception of \"0\").\n\nFind the number of unique good subsequences of `binary`. Since the answer may be very large, return it modulo 10^9 + 7.\n\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
                "constraints": [
                    "1 <= binary.length <= 10^5",
                    "binary consists of only '0's and '1's."
                ],
                "testcases": [
                    {
                        "input": "001",
                        "output": "2",
                        "explanation": "The good subsequences of binary are [\"0\", \"0\", \"1\"]. The unique good subsequences are \"0\" and \"1\"."
                    },
                    {
                        "input": "11",
                        "output": "2",
                        "explanation": "The good subsequences of binary are [\"1\", \"1\", \"11\"]. The unique good subsequences are \"1\" and \"11\"."
                    },
                    {
                        "input": "101",
                        "output": "5",
                        "explanation": "The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"]. The unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "distinct-subsequences",
                "title": "Distinct Subsequences",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "distinct-subsequences-ii",
                "title": "Distinct Subsequences II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The number of unique good subsequences is equal to the number of unique decimal values there are for all possible subsequences.",
            "Find the answer at each index based on the previous indexes' answers."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 940. Distinct Subsequences II\n  int numberOfUniqueGoodSubsequences(string binary) {\n    constexpr int kMod = 1'000'000'007;\n    // endsWith[i] := # of subseqs ends with '0' + i\n    vector<int> endsWith(2);\n\n    for (const char c : binary) {\n      endsWith[c - '0'] = (endsWith[0] + endsWith[1]) % kMod;\n      // Don't cound '0' since we want to avoid the leading zeros case.\n      // However, we can always count '1'.\n      if (c == '1')\n        ++endsWith[1];\n    }\n\n    // Count '0' in the end.\n    return (endsWith[0] + endsWith[1] +\n            (binary.find('0') == string::npos ? 0 : 1)) %\n           kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 940. Distinct Subsequences II\n  public int numberOfUniqueGoodSubsequences(String binary) {\n    final int kMod = 1_000_000_007;\n    // endsWith[i] := # of subseqs ends with '0' + i\n    int[] endsWith = new int[2];\n\n    for (final char c : binary.toCharArray()) {\n      endsWith[c - '0'] = (endsWith[0] + endsWith[1]) % kMod;\n      // Don't cound '0' since we want to avoid the leading zeros case.\n      // However, we can always count '1'.\n      if (c == '1')\n        ++endsWith[1];\n    }\n\n    // Count '0' in the end.\n    return (endsWith[0] + endsWith[1] + (binary.indexOf('0') == -1 ? 0 : 1)) % kMod;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 940. Distinct Subsequences II\n  def numberOfUniqueGoodSubsequences(self, binary: str) -> int:\n    kMod = 1_000_000_007\n    # endsWith[i] := # of subseqs ends with '0' + i\n    endsWith = {'0': 0, '1': 0}\n\n    for c in binary:\n      endsWith[c] = sum(endsWith.values()) % kMod\n      # Don't cound '0' since we want to avoid the leading zeros case.\n      # However, we can always count '1'.\n      if c == '1':\n        endsWith['1'] += 1\n\n    # Count '0' in the end.\n    return (sum(endsWith.values()) + ('0' in binary)) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}