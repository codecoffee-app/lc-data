{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2437",
            "title": "Number of Valid Clock Times",
            "titleSlug": "number-of-valid-clock-times",
            "content": "<p>You are given a string of length <code>5</code> called <code>time</code>, representing the current time on a digital clock in the format <code>&quot;hh:mm&quot;</code>. The <strong>earliest</strong> possible time is <code>&quot;00:00&quot;</code> and the <strong>latest</strong> possible time is <code>&quot;23:59&quot;</code>.</p>\n\n<p>In the string <code>time</code>, the digits represented by the <code>?</code>&nbsp;symbol are <strong>unknown</strong>, and must be <strong>replaced</strong> with a digit from <code>0</code> to <code>9</code>.</p>\n\n<p>Return<em> an integer </em><code>answer</code><em>, the number of valid clock times that can be created by replacing every </em><code>?</code><em>&nbsp;with a digit from </em><code>0</code><em> to </em><code>9</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> time = &quot;?5:00&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can replace the ? with either a 0 or 1, producing &quot;05:00&quot; or &quot;15:00&quot;. Note that we cannot replace it with a 2, since the time &quot;25:00&quot; is invalid. In total, we have two choices.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> time = &quot;0?:0?&quot;\n<strong>Output:</strong> 100\n<strong>Explanation:</strong> Each ? can be replaced by any digit from 0 to 9, so we have 100 total choices.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> time = &quot;??:??&quot;\n<strong>Output:</strong> 1440\n<strong>Explanation:</strong> There are 24 possible choices for the hours, and 60 possible choices for the minutes. In total, we have 24 * 60 = 1440 choices.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>time</code> is a valid string of length <code>5</code> in the format <code>&quot;hh:mm&quot;</code>.</li>\n\t<li><code>&quot;00&quot; &lt;= hh &lt;= &quot;23&quot;</code></li>\n\t<li><code>&quot;00&quot; &lt;= mm &lt;= &quot;59&quot;</code></li>\n\t<li>Some of the digits might be replaced with <code>&#39;?&#39;</code> and need to be replaced with digits from <code>0</code> to <code>9</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 254,
            "dislikes": 216,
            "similarQuestions": "[{\"title\": \"Largest Time for Given Digits\", \"titleSlug\": \"largest-time-for-given-digits\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Latest Time by Replacing Hidden Digits\", \"titleSlug\": \"latest-time-by-replacing-hidden-digits\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.6K\", \"totalSubmission\": \"55K\", \"totalAcceptedRaw\": 24573, \"totalSubmissionRaw\": 55025, \"acRate\": \"44.7%\"}",
            "hints": [
                "Brute force all possible clock times.",
                "Checking if a clock time is valid can be done with Regex."
            ],
            "rephrased": {
                "body": "Given a string `time` of length 5 in the format \"hh:mm\", representing a time on a 24-hour digital clock. The string may contain question marks ('?') which represent unknown digits that can be any digit from 0 to 9. Determine the number of valid clock times that can be formed by replacing each '?' with a digit such that the resulting time is between \"00:00\" and \"23:59\" (inclusive). Return the count of these valid times.",
                "constraints": [
                    "time is a valid string of length 5 in the format \"hh:mm\".",
                    "\"00\" <= hh <= \"23\"",
                    "\"00\" <= mm <= \"59\"",
                    "Some of the digits might be replaced with '?' and need to be replaced with digits from 0 to 9."
                ],
                "testcases": [
                    {
                        "input": "time = \"?5:00\"",
                        "output": "2",
                        "explanation": "The '?' can be replaced with either 0 or 1, resulting in \"05:00\" or \"15:00\". Replacing it with 2 would result in \"25:00\", which is invalid.  Therefore, there are 2 valid times."
                    },
                    {
                        "input": "time = \"0?:0?\"",
                        "output": "100",
                        "explanation": "Each '?' can be replaced by any digit from 0 to 9. Therefore, there are 10 possible values for each '?', resulting in 10 * 10 = 100 total valid times."
                    },
                    {
                        "input": "time = \"??:??\"",
                        "output": "1440",
                        "explanation": "The first two '?' represent the hours, which can range from 00 to 23, giving 24 possibilities.  The last two '?' represent the minutes, which can range from 00 to 59, giving 60 possibilities.  Therefore, the total number of valid times is 24 * 60 = 1440."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "largest-time-for-given-digits",
                "title": "Largest Time for Given Digits",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "latest-time-by-replacing-hidden-digits",
                "title": "Latest Time by Replacing Hidden Digits",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Brute force all possible clock times.",
            "Checking if a clock time is valid can be done with Regex."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countTime(string time) {\n    int ans = 1;\n    if (time[3] == '?')\n      ans *= 6;\n    if (time[4] == '?')\n      ans *= 10;\n\n    if (time[0] == '?' && time[1] == '?')\n      return ans * 24;\n    if (time[0] == '?')\n      return time[1] < '4' ? ans * 3 : ans * 2;\n    if (time[1] == '?')\n      return time[0] == '2' ? ans * 4 : ans * 10;\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countTime(String time) {\n    int ans = 1;\n    if (time.charAt(3) == '?')\n      ans *= 6;\n    if (time.charAt(4) == '?')\n      ans *= 10;\n\n    if (time.charAt(0) == '?' && time.charAt(1) == '?')\n      return ans * 24;\n    if (time.charAt(0) == '?')\n      return time.charAt(1) < '4' ? ans * 3 : ans * 2;\n    if (time.charAt(1) == '?')\n      return time.charAt(0) == '2' ? ans * 4 : ans * 10;\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countTime(self, time: str) -> int:\n    ans = 1\n    if time[3] == '?':\n      ans *= 6\n    if time[4] == '?':\n      ans *= 10\n\n    if time[0] == '?' and time[1] == '?':\n      return ans * 24\n    if time[0] == '?':\n      return ans * 3 if time[1] < '4' else ans * 2\n    if time[1] == '?':\n      return ans * 4 if time[0] == '2' else ans * 10\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}