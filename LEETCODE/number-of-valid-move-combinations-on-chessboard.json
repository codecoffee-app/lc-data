{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2056",
            "title": "Number of Valid Move Combinations On Chessboard",
            "titleSlug": "number-of-valid-move-combinations-on-chessboard",
            "content": "<p>There is an <code>8 x 8</code> chessboard containing <code>n</code> pieces (rooks, queens, or bishops). You are given a string array <code>pieces</code> of length <code>n</code>, where <code>pieces[i]</code> describes the type (rook, queen, or bishop) of the <code>i<sup>th</sup></code> piece. In addition, you are given a 2D integer array <code>positions</code> also of length <code>n</code>, where <code>positions[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> piece is currently at the <strong>1-based</strong> coordinate <code>(r<sub>i</sub>, c<sub>i</sub>)</code> on the chessboard.</p>\n\n<p>When making a <strong>move</strong> for a piece, you choose a <strong>destination</strong> square that the piece will travel toward and stop on.</p>\n\n<ul>\n\t<li>A rook can only travel <strong>horizontally or vertically</strong> from <code>(r, c)</code> to the direction of <code>(r+1, c)</code>, <code>(r-1, c)</code>, <code>(r, c+1)</code>, or <code>(r, c-1)</code>.</li>\n\t<li>A queen can only travel <strong>horizontally, vertically, or diagonally</strong> from <code>(r, c)</code> to the direction of <code>(r+1, c)</code>, <code>(r-1, c)</code>, <code>(r, c+1)</code>, <code>(r, c-1)</code>, <code>(r+1, c+1)</code>, <code>(r+1, c-1)</code>, <code>(r-1, c+1)</code>, <code>(r-1, c-1)</code>.</li>\n\t<li>A bishop can only travel <strong>diagonally</strong> from <code>(r, c)</code> to the direction of <code>(r+1, c+1)</code>, <code>(r+1, c-1)</code>, <code>(r-1, c+1)</code>, <code>(r-1, c-1)</code>.</li>\n</ul>\n\n<p>You must make a <strong>move</strong> for every piece on the board simultaneously. A <strong>move combination</strong> consists of all the <strong>moves</strong> performed on all the given pieces. Every second, each piece will instantaneously travel <strong>one square</strong> towards their destination if they are not already at it. All pieces start traveling at the <code>0<sup>th</sup></code> second. A move combination is <strong>invalid</strong> if, at a given time, <strong>two or more</strong> pieces occupy the same square.</p>\n\n<p>Return <em>the number of <strong>valid</strong> move combinations</em>\u200b\u200b\u200b\u200b\u200b.</p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li><strong>No two pieces</strong> will start in the<strong> same</strong> square.</li>\n\t<li>You may choose the square a piece is already on as its <strong>destination</strong>.</li>\n\t<li>If two pieces are <strong>directly adjacent</strong> to each other, it is valid for them to <strong>move past each other</strong> and swap positions in one second.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/23/a1.png\" style=\"width: 215px; height: 215px;\" />\n<pre>\n<strong>Input:</strong> pieces = [&quot;rook&quot;], positions = [[1,1]]\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The image above shows the possible squares the piece can move to.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/23/a2.png\" style=\"width: 215px; height: 215px;\" />\n<pre>\n<strong>Input:</strong> pieces = [&quot;queen&quot;], positions = [[1,1]]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> The image above shows the possible squares the piece can move to.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/23/a3.png\" style=\"width: 214px; height: 215px;\" />\n<pre>\n<strong>Input:</strong> pieces = [&quot;bishop&quot;], positions = [[4,3]]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The image above shows the possible squares the piece can move to.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == pieces.length </code></li>\n\t<li><code>n == positions.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 4</code></li>\n\t<li><code>pieces</code> only contains the strings <code>&quot;rook&quot;</code>, <code>&quot;queen&quot;</code>, and <code>&quot;bishop&quot;</code>.</li>\n\t<li>There will be at most one queen on the chessboard.</li>\n\t<li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 8</code></li>\n\t<li>Each <code>positions[i]</code> is distinct.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 56,
            "dislikes": 283,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.9K\", \"totalSubmission\": \"7.3K\", \"totalAcceptedRaw\": 3876, \"totalSubmissionRaw\": 7258, \"acRate\": \"53.4%\"}",
            "hints": [
                "N is small, we can generate all possible move combinations.",
                "For each possible move combination, determine which ones are valid."
            ],
            "rephrased": {
                "body": "Given an 8x8 chessboard with 'n' pieces (rooks, queens, or bishops) at specified locations. Each piece must move to a destination square. A move combination is invalid if two or more pieces occupy the same square at any time during the move. Determine the number of valid move combinations.",
                "constraints": [
                    "n == pieces.length",
                    "n == positions.length",
                    "1 <= n <= 4",
                    "pieces only contains the strings \"rook\", \"queen\", and \"bishop\".",
                    "There will be at most one queen on the chessboard.",
                    "1 <= x<sub>i</sub>, y<sub>i</sub> <= 8",
                    "Each positions[i] is distinct."
                ],
                "testcases": [
                    {
                        "input": "pieces = [\"rook\"], positions = [[1,1]]",
                        "output": "15",
                        "explanation": "The rook at (1,1) can move to any of the 15 horizontally or vertically aligned squares."
                    },
                    {
                        "input": "pieces = [\"queen\"], positions = [[1,1]]",
                        "output": "22",
                        "explanation": "The queen at (1,1) can move to any of the 22 horizontally, vertically, or diagonally aligned squares."
                    },
                    {
                        "input": "pieces = [\"bishop\"], positions = [[4,3]]",
                        "output": "12",
                        "explanation": "The bishop at (4,3) can move to any of the 12 diagonally aligned squares."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "N is small, we can generate all possible move combinations.",
            "For each possible move combination, determine which ones are valid."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countCombinations(vector<string>& pieces,\n                        vector<vector<int>>& positions) {\n    const int n = pieces.size();\n    unordered_set<unsigned long long> ans;\n    vector<vector<pair<int, int>>> combMoves;\n    vector<pair<int, int>> board;\n\n    getCombMoves(pieces, 0, {}, combMoves);\n\n    for (const vector<int>& pos : positions)\n      board.emplace_back(pos[0], pos[1]);\n\n    for (const vector<pair<int, int>>& combMove : combMoves)\n      dfs(board, n, combMove, (1 << n) - 1, ans);\n\n    return ans.size();\n  }\n\n private:\n  const unordered_map<string, vector<pair<int, int>>> moves{\n      {\"rook\", {{1, 0}, {-1, 0}, {0, 1}, {0, -1}}},\n      {\"bishop\", {{1, 1}, {1, -1}, {-1, 1}, {-1, -1}}},\n      {\"queen\",\n       {{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}}}};\n\n  void getCombMoves(const vector<string>& pieces, int ithPiece,\n                    vector<pair<int, int>>&& path,\n                    vector<vector<pair<int, int>>>& combMoves) {\n    if (ithPiece == pieces.size()) {\n      combMoves.push_back(path);\n      return;\n    }\n\n    for (const pair<int, int>& move : moves.at(pieces[ithPiece])) {\n      path.push_back(move);\n      getCombMoves(pieces, ithPiece + 1, std::move(path), combMoves);\n      path.pop_back();\n    }\n  }\n\n  void dfs(const vector<pair<int, int>>& board, int n,\n           const vector<pair<int, int>>& combMove, int activeMask,\n           unordered_set<unsigned long long>& ans) {\n    if (activeMask == 0)\n      return;\n    ans.insert(getHash(board));\n\n    for (int nextActiveMask = 1; nextActiveMask < 1 << n; ++nextActiveMask) {\n      if ((activeMask & nextActiveMask) != nextActiveMask)\n        continue;\n\n      // Make sure to copy the board\n      auto nextBoard(board);\n\n      // Move pieces that are active in this turn\n      for (int i = 0; i < n; ++i)\n        if ((nextActiveMask >> i) & 1) {\n          nextBoard[i].first += combMove[i].first;\n          nextBoard[i].second += combMove[i].second;\n        }\n\n      // Check no two or more pieces occupy the same square\n      if (getUniqueSize(nextBoard) < n)\n        continue;\n\n      // Check if all in boundary\n      if (all_of(nextBoard.begin(), nextBoard.end(), [](const auto& piece) {\n            const int x = piece.first;\n            const int y = piece.second;\n            return 1 <= x && x <= 8 && 1 <= y && y <= 8;\n          }))\n        dfs(nextBoard, n, combMove, nextActiveMask, ans);\n    }\n  }\n\n  unsigned long long getHash(const vector<pair<int, int>>& board) {\n    unsigned long long hash;\n    for (const auto& [x, y] : board)\n      hash = (hash * 64) + (x - 1 << 3) + (y - 1);\n    return hash;\n  }\n\n  int getUniqueSize(const vector<pair<int, int>>& board) {\n    unordered_set<int> unique;\n    for (const auto& [x, y] : board)\n      unique.insert(x * 8 + y);\n    return unique.size();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countCombinations(String[] pieces, int[][] positions) {\n    final int n = pieces.length;\n    Set<Long> ans = new HashSet<>();\n\n    moves.put(\"rook\", new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}});\n    moves.put(\"bishop\", new int[][] {{1, 1}, {1, -1}, {-1, 1}, {-1, -1}});\n    moves.put(\"queen\",\n              new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}});\n    List<List<int[]>> combMoves = new ArrayList<>();\n\n    getCombMoves(pieces, 0, new ArrayList<>(), combMoves);\n\n    for (List<int[]> combMove : combMoves)\n      dfs(positions, n, combMove, (1 << n) - 1, ans);\n\n    return ans.size();\n  }\n\n  private Map<String, int[][]> moves = new HashMap<>();\n\n  private void getCombMoves(String[] pieces, int ithPiece, List<int[]> path,\n                            List<List<int[]>> combMoves) {\n    if (ithPiece == pieces.length) {\n      combMoves.add(new ArrayList<>(path));\n      return;\n    }\n\n    for (int[] move : moves.get(pieces[ithPiece])) {\n      path.add(move);\n      getCombMoves(pieces, ithPiece + 1, path, combMoves);\n      path.remove(path.size() - 1);\n    }\n  }\n\n  private void dfs(int[][] board, int n, List<int[]> combMove, int activeMask, Set<Long> ans) {\n    if (activeMask == 0)\n      return;\n    ans.add(getHash(board));\n\n    for (int nextActiveMask = 1; nextActiveMask < 1 << n; ++nextActiveMask) {\n      if ((activeMask & nextActiveMask) != nextActiveMask)\n        continue;\n\n      // Make sure to copy the board\n      int[][] nextBoard = new int[n][];\n      for (int i = 0; i < n; ++i)\n        nextBoard[i] = board[i].clone();\n\n      // Move pieces that are active in this turn\n      for (int i = 0; i < n; ++i)\n        if (((nextActiveMask >> i) & 1) == 1) {\n          nextBoard[i][0] += combMove.get(i)[0];\n          nextBoard[i][1] += combMove.get(i)[1];\n        }\n\n      // Check no two or more pieces occupy the same square\n      if (getUniqueSize(nextBoard) < n)\n        continue;\n\n      // Check if all in boundary\n      if (Arrays.stream(nextBoard).allMatch(p -> 1 <= p[0] && p[0] <= 8 && 1 <= p[1] && p[1] <= 8))\n        dfs(nextBoard, n, combMove, nextActiveMask, ans);\n    }\n  }\n\n  private long getHash(int[][] board) {\n    long hash = 0;\n    for (int[] pos : board)\n      hash = (hash * 64) + (pos[0] - 1 << 3) + (pos[1] - 1);\n    return hash;\n  }\n\n  private int getUniqueSize(int[][] board) {\n    Set<Integer> unique = new HashSet<>();\n    for (int[] pos : board)\n      unique.add(pos[0] * 8 + pos[1]);\n    return unique.size();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countCombinations(self, pieces: List[str], positions: List[List[int]]) -> int:\n    n = len(pieces)\n    moves = {\"rook\": [(1, 0), (-1, 0), (0, 1), (0, -1)],\n             \"bishop\": [(1, 1), (1, -1), (-1, 1), (-1, -1)],\n             \"queen\": [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1)]}\n    ans = set()\n\n    def getHash(board: List[List[int]]) -> Tuple:\n      return tuple([tuple(pos) for pos in board])\n\n    def dfs(board: List[List[int]], combMove: List[Tuple[int, int]], activeMask: int) -> None:\n      if activeMask == 0:\n        return\n      ans.add(getHash(board))\n\n      for nextActiveMask in range(1, 1 << n):\n        if activeMask & nextActiveMask != nextActiveMask:\n          continue\n\n        # Make sure to copy the board\n        nextBoard = [pos.copy() for pos in board]\n\n        # Move pieces that are active in this turn\n        for i in range(n):\n          if (nextActiveMask >> i) & 1:\n            nextBoard[i][0] += combMove[i][0]\n            nextBoard[i][1] += combMove[i][1]\n\n        # Check no two or more pieces occupy the same square\n        if len(set(getHash(nextBoard))) < n:\n          continue\n\n        # Check if all in boundary\n        if all(1 <= x <= 8 and 1 <= y <= 8 for x, y in nextBoard):\n          dfs(nextBoard, combMove, nextActiveMask)\n\n    for combMove in product(*(moves[piece] for piece in pieces)):\n      dfs(positions, combMove, (1 << n) - 1)\n\n    return len(ans)\n",
                "lang_text": "py"
            }
        }
    }
}