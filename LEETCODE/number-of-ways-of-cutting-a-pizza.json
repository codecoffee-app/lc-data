{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1444",
            "title": "Number of Ways of Cutting a Pizza",
            "titleSlug": "number-of-ways-of-cutting-a-pizza",
            "content": "<p>Given a rectangular pizza represented as a <code>rows x cols</code>&nbsp;matrix containing the following characters: <code>&#39;A&#39;</code> (an apple) and <code>&#39;.&#39;</code> (empty cell) and given the integer <code>k</code>. You have to cut the pizza into <code>k</code> pieces using <code>k-1</code> cuts.&nbsp;</p>\n\n<p>For each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.</p>\n\n<p><em>Return the number of ways of cutting the pizza such that each piece contains <strong>at least</strong> one apple.&nbsp;</em>Since the answer can be a huge number, return this modulo 10^9 + 7.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/04/23/ways_to_cut_apple_1.png\" style=\"width: 500px; height: 378px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> pizza = [&quot;A..&quot;,&quot;AAA&quot;,&quot;...&quot;], k = 3\n<strong>Output:</strong> 3 \n<strong>Explanation:</strong> The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pizza = [&quot;A..&quot;,&quot;AA.&quot;,&quot;...&quot;], k = 3\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> pizza = [&quot;A..&quot;,&quot;A..&quot;,&quot;...&quot;], k = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rows, cols &lt;= 50</code></li>\n\t<li><code>rows ==&nbsp;pizza.length</code></li>\n\t<li><code>cols ==&nbsp;pizza[i].length</code></li>\n\t<li><code>1 &lt;= k &lt;= 10</code></li>\n\t<li><code>pizza</code> consists of characters <code>&#39;A&#39;</code>&nbsp;and <code>&#39;.&#39;</code> only.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1774,
            "dislikes": 94,
            "similarQuestions": "[{\"title\": \"Selling Pieces of Wood\", \"titleSlug\": \"selling-pieces-of-wood\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"65.8K\", \"totalSubmission\": \"105.1K\", \"totalAcceptedRaw\": 65764, \"totalSubmissionRaw\": 105089, \"acRate\": \"62.6%\"}",
            "hints": [
                "Note that after each cut the remaining piece of pizza always has the lower right coordinate at (rows-1,cols-1).",
                "Use dynamic programming approach with states (row1, col1, c) which computes the number of ways of cutting the pizza using \"c\" cuts where the current piece of pizza has upper left coordinate at (row1,col1) and lower right coordinate at (rows-1,cols-1).",
                "For the transitions try all vertical and horizontal cuts such that the piece of pizza you have to give a person must contain at least one apple. The base case is when c=k-1.",
                "Additionally use a 2D dynamic programming to respond in O(1) if a piece of pizza contains at least one apple."
            ],
            "rephrased": {
                "body": "Given a rectangular pizza represented as a `rows x cols` matrix containing 'A' (an apple) and '.' (empty cell), and an integer `k`.  The task is to cut the pizza into `k` pieces using `k-1` cuts.  Each cut can be either vertical or horizontal, made at cell boundaries, dividing the pizza into two parts.  A vertical cut gives the left part to a person, and a horizontal cut gives the upper part to a person. The last piece goes to the last person.\n\nDetermine the number of ways to cut the pizza such that each piece contains at least one apple. Return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= rows, cols <= 50",
                    "rows == pizza.length",
                    "cols == pizza[i].length",
                    "1 <= k <= 10",
                    "pizza consists of characters 'A' and '.' only."
                ],
                "testcases": [
                    {
                        "input": "pizza = [\"A..\",\"AAA\",\"...\"], k = 3",
                        "output": "3",
                        "explanation": "There are three ways to cut the pizza into three pieces such that each piece contains at least one apple."
                    },
                    {
                        "input": "pizza = [\"A..\",\"AA.\",\"...\"], k = 3",
                        "output": "1",
                        "explanation": "There is only one way to cut the pizza into three pieces such that each piece contains at least one apple."
                    },
                    {
                        "input": "pizza = [\"A..\",\"A..\",\"...\"], k = 1",
                        "output": "1",
                        "explanation": "When k=1, no cuts are needed, and the whole pizza must contain at least one apple, which it does."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "selling-pieces-of-wood",
                "title": "Selling Pieces of Wood",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Note that after each cut the remaining piece of pizza always has the lower right coordinate at (rows-1,cols-1).",
            "Use dynamic programming approach with states (row1, col1, c) which computes the number of ways of cutting the pizza using \"c\" cuts where the current piece of pizza has upper left coordinate at (row1,col1) and lower right coordinate at (rows-1,cols-1).",
            "For the transitions try all vertical and horizontal cuts such that the piece of pizza you have to give a person must contain at least one apple. The base case is when c=k-1.",
            "Additionally use a 2D dynamic programming to respond in O(1) if a piece of pizza contains at least one apple."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int ways(vector<string>& pizza, int k) {\n    const int M = pizza.size();\n    const int N = pizza[0].size();\n    // dp[m][n][k] := # of ways to cut pizza[m:M][n:N] w/ k cuts\n    dp.resize(M, vector<vector<int>>(N, vector<int>(k, -1)));\n    prefix.resize(M + 1, vector<int>(N + 1));\n\n    for (int i = 0; i < M; ++i)\n      for (int j = 0; j < N; ++j)\n        prefix[i + 1][j + 1] = (pizza[i][j] == 'A') + prefix[i][j + 1] +\n                               prefix[i + 1][j] - prefix[i][j];\n\n    return ways(0, 0, k - 1, M, N);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  vector<vector<vector<int>>> dp;\n  vector<vector<int>> prefix;\n\n  // HasApple of pizza[row1..row2)[col1..col2)\n  bool hasApple(int row1, int row2, int col1, int col2) {\n    return (prefix[row2][col2] - prefix[row1][col2] - prefix[row2][col1] +\n            prefix[row1][col1]) > 0;\n  };\n\n  int ways(int m, int n, int k, const int M, const int N) {\n    if (k == 0)\n      return 1;\n    if (dp[m][n][k] >= 0)\n      return dp[m][n][k];\n\n    dp[m][n][k] = 0;\n\n    for (int i = m + 1; i < M; ++i)  // Cut horizontally\n      if (hasApple(m, i, n, N) && hasApple(i, M, n, N))\n        dp[m][n][k] = (dp[m][n][k] + ways(i, n, k - 1, M, N)) % kMod;\n\n    for (int j = n + 1; j < N; ++j)  // Cut vertically\n      if (hasApple(m, M, n, j) && hasApple(m, M, j, N))\n        dp[m][n][k] = (dp[m][n][k] + ways(m, j, k - 1, M, N)) % kMod;\n\n    return dp[m][n][k];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int ways(String[] pizza, int k) {\n    final int M = pizza.length;\n    final int N = pizza[0].length();\n    // dp[m][n][k] := # of ways to cut pizza[m:M][n:N] w/ k cuts\n    dp = new int[M][N][k];\n    for (int[][] A : dp)\n      Arrays.stream(A).forEach(a -> Arrays.fill(a, -1));\n    prefix = new int[M + 1][N + 1];\n\n    for (int i = 0; i < M; ++i)\n      for (int j = 0; j < N; ++j)\n        prefix[i + 1][j + 1] = (pizza[i].charAt(j) == 'A' ? 1 : 0) + prefix[i][j + 1] +\n                               prefix[i + 1][j] - prefix[i][j];\n\n    return ways(0, 0, k - 1, M, N);\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private int[][][] dp;\n  private int[][] prefix;\n\n  // HasApple of pizza[row1..row2)[col1..col2)\n  private boolean hasApple(int row1, int row2, int col1, int col2) {\n    return (prefix[row2][col2] - prefix[row1][col2] - prefix[row2][col1] + prefix[row1][col1]) > 0;\n  }\n\n  private int ways(int m, int n, int k, final int M, final int N) {\n    if (k == 0)\n      return 1;\n    if (dp[m][n][k] >= 0)\n      return dp[m][n][k];\n\n    dp[m][n][k] = 0;\n\n    for (int i = m + 1; i < M; ++i) // Cut horizontally\n      if (hasApple(m, i, n, N) && hasApple(i, M, n, N))\n        dp[m][n][k] = (dp[m][n][k] + ways(i, n, k - 1, M, N)) % kMod;\n\n    for (int j = n + 1; j < N; ++j) // Cut vertically\n      if (hasApple(m, M, n, j) && hasApple(m, M, j, N))\n        dp[m][n][k] = (dp[m][n][k] + ways(m, j, k - 1, M, N)) % kMod;\n\n    return dp[m][n][k];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def ways(self, pizza: List[str], k: int) -> int:\n    M = len(pizza)\n    N = len(pizza[0])\n    prefix = [[0] * (N + 1) for _ in range(M + 1)]\n\n    for i in range(M):\n      for j in range(N):\n        prefix[i + 1][j + 1] = (pizza[i][j] == 'A') + \\\n            prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j]\n\n    # HasApple of pizza[row1..row2)[col1..col2)\n    def hasApple(row1: int, row2: int, col1: int, col2: int) -> bool:\n      return (prefix[row2][col2] - prefix[row1][col2] -\n              prefix[row2][col1] + prefix[row1][col1]) > 0\n\n    # Dp(m, n, k) := # of ways to cut pizza[m:M][n:N] w/ k cuts\n    @functools.lru_cache(None)\n    def dp(m: int, n: int, k: int) -> int:\n      if k == 0:\n        return 1\n\n      ans = 0\n\n      for i in range(m + 1, M):  # Cut horizontally\n        if hasApple(m, i, n, N) and hasApple(i, M, n, N):\n          ans += dp(i, n, k - 1)\n\n      for j in range(n + 1, N):  # Cut vertically\n        if hasApple(m, M, n, j) and hasApple(m, M, j, N):\n          ans += dp(m, j, k - 1)\n\n      return ans\n\n    return dp(0, 0, k - 1) % (10**9 + 7)\n",
                "lang_text": "py"
            }
        }
    }
}