{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2585",
            "title": "Number of Ways to Earn Points",
            "titleSlug": "number-of-ways-to-earn-points",
            "content": "<p>There is a test that has <code>n</code> types of questions. You are given an integer <code>target</code> and a <strong>0-indexed</strong> 2D integer array <code>types</code> where <code>types[i] = [count<sub>i</sub>, marks<sub>i</sub>]</code> indicates that there are <code>count<sub>i</sub></code> questions of the <code>i<sup>th</sup></code> type, and each one of them is worth <code>marks<sub>i</sub></code> points.</p>\n\n<ul>\n</ul>\n\n<p>Return <em>the number of ways you can earn <strong>exactly</strong> </em><code>target</code><em> points in the exam</em>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p><strong>Note</strong> that questions of the same type are indistinguishable.</p>\n\n<ul>\n\t<li>For example, if there are <code>3</code> questions of the same type, then solving the <code>1<sup>st</sup></code> and <code>2<sup>nd</sup></code> questions is the same as solving the <code>1<sup>st</sup></code> and <code>3<sup>rd</sup></code> questions, or the <code>2<sup>nd</sup></code> and <code>3<sup>rd</sup></code> questions.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 6, types = [[6,1],[3,2],[2,3]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> You can earn 6 points in one of the seven ways:\n- Solve 6 questions of the 0<sup>th</sup> type: 1 + 1 + 1 + 1 + 1 + 1 = 6\n- Solve 4 questions of the 0<sup>th</sup> type and 1 question of the 1<sup>st</sup> type: 1 + 1 + 1 + 1 + 2 = 6\n- Solve 2 questions of the 0<sup>th</sup> type and 2 questions of the 1<sup>st</sup> type: 1 + 1 + 2 + 2 = 6\n- Solve 3 questions of the 0<sup>th</sup> type and 1 question of the 2<sup>nd</sup> type: 1 + 1 + 1 + 3 = 6\n- Solve 1 question of the 0<sup>th</sup> type, 1 question of the 1<sup>st</sup> type and 1 question of the 2<sup>nd</sup> type: 1 + 2 + 3 = 6\n- Solve 3 questions of the 1<sup>st</sup> type: 2 + 2 + 2 = 6\n- Solve 2 questions of the 2<sup>nd</sup> type: 3 + 3 = 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 5, types = [[50,1],[50,2],[50,5]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> You can earn 5 points in one of the four ways:\n- Solve 5 questions of the 0<sup>th</sup> type: 1 + 1 + 1 + 1 + 1 = 5\n- Solve 3 questions of the 0<sup>th</sup> type and 1 question of the 1<sup>st</sup> type: 1 + 1 + 1 + 2 = 5\n- Solve 1 questions of the 0<sup>th</sup> type and 2 questions of the 1<sup>st</sup> type: 1 + 2 + 2 = 5\n- Solve 1 question of the 2<sup>nd</sup> type: 5\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 18, types = [[6,1],[3,2],[2,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> You can only earn 18 points by answering all questions.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target &lt;= 1000</code></li>\n\t<li><code>n == types.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>types[i].length == 2</code></li>\n\t<li><code>1 &lt;= count<sub>i</sub>, marks<sub>i</sub> &lt;= 50</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 447,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"Coin Change II\", \"titleSlug\": \"coin-change-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Total Distance Traveled\", \"titleSlug\": \"minimum-total-distance-traveled\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.6K\", \"totalSubmission\": \"25.5K\", \"totalAcceptedRaw\": 14556, \"totalSubmissionRaw\": 25460, \"acRate\": \"57.2%\"}",
            "hints": [
                "Use Dynamic Programming",
                "Let ways[i][points] be the number of ways to score a given number of points after solving some questions of the first i types.",
                "ways[i][points] is equal to the sum of ways[i-1][points - solved * marks[i] over 0 <= solved <= count_i"
            ],
            "rephrased": {
                "body": "Given a test with `n` types of questions, and a `target` score. You are provided a 2D integer array `types` where `types[i] = [count_i, marks_i]` indicates that there are `count_i` questions of the `i-th` type, each worth `marks_i` points. Determine the number of distinct ways to achieve exactly `target` points on the exam.  Since the answer can be large, return it modulo `10^9 + 7`.\n\nNote that questions of the same type are indistinguishable.",
                "constraints": [
                    "1 <= target <= 1000",
                    "n == types.length",
                    "1 <= n <= 50",
                    "types[i].length == 2",
                    "1 <= count_i, marks_i <= 50"
                ],
                "testcases": [
                    {
                        "input": "target = 6, types = [[6,1],[3,2],[2,3]]",
                        "output": "7",
                        "explanation": "There are 7 ways to achieve a score of 6:\n- 6 questions of type 0: 6 * 1 = 6\n- 4 questions of type 0 and 1 of type 1: 4 * 1 + 1 * 2 = 6\n- 2 questions of type 0 and 2 of type 1: 2 * 1 + 2 * 2 = 6\n- 3 questions of type 0 and 1 of type 2: 3 * 1 + 1 * 3 = 6\n- 1 question of type 0, 1 of type 1, and 1 of type 2: 1 * 1 + 1 * 2 + 1 * 3 = 6\n- 3 questions of type 1: 3 * 2 = 6\n- 2 questions of type 2: 2 * 3 = 6"
                    },
                    {
                        "input": "target = 5, types = [[50,1],[50,2],[50,5]]",
                        "output": "4",
                        "explanation": "There are 4 ways to achieve a score of 5:\n- 5 questions of type 0: 5 * 1 = 5\n- 3 questions of type 0 and 1 of type 1: 3 * 1 + 1 * 2 = 5\n- 1 question of type 0 and 2 of type 1: 1 * 1 + 2 * 2 = 5\n- 1 question of type 2: 1 * 5 = 5"
                    },
                    {
                        "input": "target = 18, types = [[6,1],[3,2],[2,3]]",
                        "output": "1",
                        "explanation": "Only one way to achieve score of 18 which is by answering all questions. 6*1 + 3*2 + 2*3 = 18"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "coin-change-ii",
                "title": "Coin Change II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-total-distance-traveled",
                "title": "Minimum Total Distance Traveled",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use Dynamic Programming",
            "Let ways[i][points] be the number of ways to score a given number of points after solving some questions of the first i types.",
            "ways[i][points] is equal to the sum of ways[i-1][points - solved * marks[i] over 0 <= solved <= count_i"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int waysToReachTarget(int target, vector<vector<int>>& types) {\n    constexpr int kMod = 1'000'000'007;\n    // dp[i][j] := # of ways to earn j points with first i types\n    vector<vector<int>> dp(types.size() + 1, vector<int>(target + 1));\n    dp[0][0] = 1;\n\n    for (int i = 1; i <= types.size(); ++i) {\n      const int count = types[i - 1][0];\n      const int mark = types[i - 1][1];\n      for (int j = 0; j <= target; ++j)\n        for (int solved = 0; solved <= count; ++solved)\n          if (j - solved * mark >= 0) {\n            dp[i][j] += dp[i - 1][j - solved * mark];\n            dp[i][j] %= kMod;\n          }\n    }\n\n    return dp[types.size()][target];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int waysToReachTarget(int target, int[][] types) {\n    final int kMod = 1_000_000_007;\n    // dp[i][j] := # of ways to earn j points with first i types\n    int[][] dp = new int[types.length + 1][target + 1];\n    dp[0][0] = 1;\n\n    for (int i = 1; i <= types.length; ++i) {\n      final int count = types[i - 1][0];\n      final int mark = types[i - 1][1];\n      for (int j = 0; j <= target; ++j)\n        for (int solved = 0; solved <= count; ++solved)\n          if (j - solved * mark >= 0) {\n            dp[i][j] += dp[i - 1][j - solved * mark];\n            dp[i][j] %= kMod;\n          }\n    }\n\n    return dp[types.length][target];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n    kMod = 1_000_000_007\n    # dp[i][j] := # of ways to earn j points with first i types\n    dp = [[0] * (target + 1) for _ in range(len(types) + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, len(types) + 1):\n      count = types[i - 1][0]\n      mark = types[i - 1][1]\n      for j in range(target + 1):\n        for solved in range(count + 1):\n          if j - solved * mark >= 0:\n            dp[i][j] += dp[i - 1][j - solved * mark]\n            dp[i][j] %= kMod\n\n    return dp[len(types)][target]\n",
                "lang_text": "py"
            }
        }
    }
}