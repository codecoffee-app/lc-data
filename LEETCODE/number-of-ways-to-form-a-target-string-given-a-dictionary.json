{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1639",
            "title": "Number of Ways to Form a Target String Given a Dictionary",
            "titleSlug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
            "content": "<p>You are given a list of strings of the <strong>same length</strong> <code>words</code> and a string <code>target</code>.</p>\n\n<p>Your task is to form <code>target</code> using the given <code>words</code> under the following rules:</p>\n\n<ul>\n\t<li><code>target</code> should be formed from left to right.</li>\n\t<li>To form the <code>i<sup>th</sup></code> character (<strong>0-indexed</strong>) of <code>target</code>, you can choose the <code>k<sup>th</sup></code> character of the <code>j<sup>th</sup></code> string in <code>words</code> if <code>target[i] = words[j][k]</code>.</li>\n\t<li>Once you use the <code>k<sup>th</sup></code> character of the <code>j<sup>th</sup></code> string of <code>words</code>, you <strong>can no longer</strong> use the <code>x<sup>th</sup></code> character of any string in <code>words</code> where <code>x &lt;= k</code>. In other words, all characters to the left of or at index <code>k</code> become unusuable for every string.</li>\n\t<li>Repeat the process until you form the string <code>target</code>.</li>\n</ul>\n\n<p><strong>Notice</strong> that you can use <strong>multiple characters</strong> from the <strong>same string</strong> in <code>words</code> provided the conditions above are met.</p>\n\n<p>Return <em>the number of ways to form <code>target</code> from <code>words</code></em>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;acca&quot;,&quot;bbbb&quot;,&quot;caca&quot;], target = &quot;aba&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 6 ways to form target.\n&quot;aba&quot; -&gt; index 0 (&quot;<u>a</u>cca&quot;), index 1 (&quot;b<u>b</u>bb&quot;), index 3 (&quot;cac<u>a</u>&quot;)\n&quot;aba&quot; -&gt; index 0 (&quot;<u>a</u>cca&quot;), index 2 (&quot;bb<u>b</u>b&quot;), index 3 (&quot;cac<u>a</u>&quot;)\n&quot;aba&quot; -&gt; index 0 (&quot;<u>a</u>cca&quot;), index 1 (&quot;b<u>b</u>bb&quot;), index 3 (&quot;acc<u>a</u>&quot;)\n&quot;aba&quot; -&gt; index 0 (&quot;<u>a</u>cca&quot;), index 2 (&quot;bb<u>b</u>b&quot;), index 3 (&quot;acc<u>a</u>&quot;)\n&quot;aba&quot; -&gt; index 1 (&quot;c<u>a</u>ca&quot;), index 2 (&quot;bb<u>b</u>b&quot;), index 3 (&quot;acc<u>a</u>&quot;)\n&quot;aba&quot; -&gt; index 1 (&quot;c<u>a</u>ca&quot;), index 2 (&quot;bb<u>b</u>b&quot;), index 3 (&quot;cac<u>a</u>&quot;)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abba&quot;,&quot;baab&quot;], target = &quot;bab&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are 4 ways to form target.\n&quot;bab&quot; -&gt; index 0 (&quot;<u>b</u>aab&quot;), index 1 (&quot;b<u>a</u>ab&quot;), index 2 (&quot;ab<u>b</u>a&quot;)\n&quot;bab&quot; -&gt; index 0 (&quot;<u>b</u>aab&quot;), index 1 (&quot;b<u>a</u>ab&quot;), index 3 (&quot;baa<u>b</u>&quot;)\n&quot;bab&quot; -&gt; index 0 (&quot;<u>b</u>aab&quot;), index 2 (&quot;ba<u>a</u>b&quot;), index 3 (&quot;baa<u>b</u>&quot;)\n&quot;bab&quot; -&gt; index 1 (&quot;a<u>b</u>ba&quot;), index 2 (&quot;ba<u>a</u>b&quot;), index 3 (&quot;baa<u>b</u>&quot;)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 1000</code></li>\n\t<li>All strings in <code>words</code> have the same length.</li>\n\t<li><code>1 &lt;= target.length &lt;= 1000</code></li>\n\t<li><code>words[i]</code> and <code>target</code> contain only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1511,
            "dislikes": 82,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"53.7K\", \"totalSubmission\": \"103K\", \"totalAcceptedRaw\": 53703, \"totalSubmissionRaw\": 103042, \"acRate\": \"52.1%\"}",
            "hints": [
                "For each index i, store the frequency of each character in the ith row.",
                "Use dynamic programing to calculate the number of ways to get the target string using the frequency array,"
            ],
            "rephrased": {
                "body": "Given a list of strings `words` of the same length and a string `target`, determine the number of ways to form `target` using characters from `words` under specific rules.  You must construct `target` from left to right.  To form the `i`-th character of `target`, find a string in `words` and select its `k`-th character such that `target[i] == words[j][k]`. After selecting the `k`-th character from string `j`, no character at or to the left of index `k` in any string can be used.  You can reuse characters from the same string if the constraint on available indices is satisfied. Return the number of ways to form `target` modulo 10^9 + 7.",
                "constraints": [
                    "1 <= words.length <= 1000",
                    "1 <= words[i].length <= 1000",
                    "All strings in `words` have the same length.",
                    "1 <= target.length <= 1000",
                    "`words[i]` and `target` contain only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"",
                        "output": "6",
                        "explanation": "There are 6 ways to form the target string \"aba\". The possible formations are explained as:\n\n- \"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"caca\")\n- \"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"caca\")\n- \"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"acca\")\n- \"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n- \"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n- \"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"caca\")"
                    },
                    {
                        "input": "words = [\"abba\",\"baab\"], target = \"bab\"",
                        "output": "4",
                        "explanation": "There are 4 ways to form the target string \"bab\". The possible formations are explained as:\n\n- \"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 2 (\"abba\")\n- \"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 3 (\"baab\")\n- \"bab\" -> index 0 (\"baab\"), index 2 (\"baab\"), index 3 (\"baab\")\n- \"bab\" -> index 1 (\"abba\"), index 2 (\"baab\"), index 3 (\"baab\")"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For each index i, store the frequency of each character in the ith row.",
            "Use dynamic programing to calculate the number of ways to get the target string using the frequency array,"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ]
    }
}