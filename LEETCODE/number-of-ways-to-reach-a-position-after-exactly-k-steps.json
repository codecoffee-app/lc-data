{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2400",
            "title": "Number of Ways to Reach a Position After Exactly k Steps",
            "titleSlug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
            "content": "<p>You are given two <strong>positive</strong> integers <code>startPos</code> and <code>endPos</code>. Initially, you are standing at position <code>startPos</code> on an <strong>infinite</strong> number line. With one step, you can move either one position to the left, or one position to the right.</p>\n\n<p>Given a positive integer <code>k</code>, return <em>the number of <strong>different</strong> ways to reach the position </em><code>endPos</code><em> starting from </em><code>startPos</code><em>, such that you perform <strong>exactly</strong> </em><code>k</code><em> steps</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Two ways are considered different if the order of the steps made is not exactly the same.</p>\n\n<p><strong>Note</strong> that the number line includes negative integers.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> startPos = 1, endPos = 2, k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can reach position 2 from 1 in exactly 3 steps in three ways:\n- 1 -&gt; 2 -&gt; 3 -&gt; 2.\n- 1 -&gt; 2 -&gt; 1 -&gt; 2.\n- 1 -&gt; 0 -&gt; 1 -&gt; 2.\nIt can be proven that no other way is possible, so we return 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> startPos = 2, endPos = 5, k = 10\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> It is impossible to reach position 5 from position 2 in exactly 10 steps.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= startPos, endPos, k &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 710,
            "dislikes": 56,
            "similarQuestions": "[{\"title\": \"Unique Paths\", \"titleSlug\": \"unique-paths\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Climbing Stairs\", \"titleSlug\": \"climbing-stairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Reach a Number\", \"titleSlug\": \"reach-a-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Reaching Points\", \"titleSlug\": \"reaching-points\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Stay in the Same Place After Some Steps\", \"titleSlug\": \"number-of-ways-to-stay-in-the-same-place-after-some-steps\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.8K\", \"totalSubmission\": \"78.3K\", \"totalAcceptedRaw\": 26801, \"totalSubmissionRaw\": 78307, \"acRate\": \"34.2%\"}",
            "hints": [
                "How many steps to the left and to the right do you need to make exactly?",
                "Does the order of the steps matter?",
                "Use combinatorics to find the number of ways to order the steps."
            ],
            "rephrased": {
                "body": "You are positioned at `startPos` on an infinite number line. You can move one step left or right in each step. Given `startPos`, `endPos`, and `k`, find the number of distinct ways to reach `endPos` from `startPos` in exactly `k` steps. Return the result modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= startPos, endPos, k <= 1000"
                ],
                "testcases": [
                    {
                        "input": "startPos = 1, endPos = 2, k = 3",
                        "output": "3",
                        "explanation": "There are three ways to reach position 2 from 1 in exactly 3 steps:\n- 1 -> 2 -> 3 -> 2\n- 1 -> 2 -> 1 -> 2\n- 1 -> 0 -> 1 -> 2"
                    },
                    {
                        "input": "startPos = 2, endPos = 5, k = 10",
                        "output": "0",
                        "explanation": "It is impossible to reach position 5 from position 2 in exactly 10 steps."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "unique-paths",
                "title": "Unique Paths",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "climbing-stairs",
                "title": "Climbing Stairs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "reach-a-number",
                "title": "Reach a Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "reaching-points",
                "title": "Reaching Points",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
                "title": "Number of Ways to Stay in the Same Place After Some Steps",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How many steps to the left and to the right do you need to make exactly?",
            "Does the order of the steps matter?",
            "Use combinatorics to find the number of ways to order the steps."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numberOfWays(int startPos, int endPos, int k) {\n    // LeftStep + rightStep = k\n    // RightStep - leftStep = endPos - startPos\n    //        2 * rightStep = k + endPos - startPos\n    //            rightStep = (k + endPos - startPos) / 2\n    const int val = k + endPos - startPos;\n    if (val < 0 || val & 1)\n      return 0;\n    const int rightStep = val / 2;\n    const int leftStep = k - rightStep;\n    if (leftStep < 0)\n      return 0;\n    return nCk(leftStep + rightStep, min(leftStep, rightStep));\n  }\n\n private:\n  // C(n, k) = C(n - 1, k) + C(n - 1, k - 1)\n  int nCk(int n, int k) {\n    constexpr int kMod = 1'000'000'007;\n    // dp[i] := C(n so far, i)\n    vector<int> dp(k + 1);\n    dp[0] = 1;\n\n    while (n-- > 0)  // Calculate n times.\n      for (int j = k; j > 0; --j) {\n        dp[j] += dp[j - 1];\n        dp[j] %= kMod;\n      }\n\n    return dp[k];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numberOfWays(int startPos, int endPos, int k) {\n    // LeftStep + rightStep = k\n    // RightStep - leftStep = endPos - startPos\n    //        2 * rightStep = k + endPos - startPos\n    //            rightStep = (k + endPos - startPos) / 2\n    final int val = k + endPos - startPos;\n    if (val < 0 || val % 2 == 1)\n      return 0;\n    final int rightStep = val / 2;\n    final int leftStep = k - rightStep;\n    if (leftStep < 0)\n      return 0;\n    return nCk(leftStep + rightStep, Math.min(leftStep, rightStep));\n  }\n\n  // C(n, k) = C(n - 1, k) + C(n - 1, k - 1)\n  private int nCk(int n, int k) {\n    final int kMod = 1_000_000_007;\n    // dp[i] := C(n so far, i)\n    int[] dp = new int[k + 1];\n    dp[0] = 1;\n\n    while (n-- > 0) // Calculate n times.\n      for (int j = k; j > 0; --j) {\n        dp[j] += dp[j - 1];\n        dp[j] %= kMod;\n      }\n\n    return dp[k];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numberOfWays(self, startPos: int, endPos: int, k: int) -> int:\n    # LeftStep + rightStep = k\n    # RightStep - leftStep = endPos - startPos\n    #        2 * rightStep = k + endPos - startPos\n    #            rightStep = (k + endPos - startPos) // 2\n    val = k + endPos - startPos\n    if val < 0 or val & 1:\n      return 0\n    rightStep = val // 2\n    leftStep = k - rightStep\n    if leftStep < 0:\n      return 0\n    return self._nCk(leftStep + rightStep, min(leftStep, rightStep))\n\n  # C(n, k) = C(n - 1, k) + C(n - 1, k - 1)\n  def _nCk(self, n: int, k: int) -> int:\n    kMod = 1_000_000_007\n    # dp[i] := C(n so far, i)\n    dp = [1] + [0] * k\n\n    for _ in range(n):  # Calculate n times.\n      for j in range(k, 0, -1):\n        dp[j] += dp[j - 1]\n        dp[j] %= kMod\n\n    return dp[k]\n",
                "lang_text": "py"
            }
        }
    }
}