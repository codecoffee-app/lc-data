{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1719",
            "title": "Number Of Ways To Reconstruct A Tree",
            "titleSlug": "number-of-ways-to-reconstruct-a-tree",
            "content": "<p>You are given an array <code>pairs</code>, where <code>pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>, and:</p>\n\n<ul>\n\t<li>There are no duplicates.</li>\n\t<li><code>x<sub>i</sub> &lt; y<sub>i</sub></code></li>\n</ul>\n\n<p>Let <code>ways</code> be the number of rooted trees that satisfy the following conditions:</p>\n\n<ul>\n\t<li>The tree consists of nodes whose values appeared in <code>pairs</code>.</li>\n\t<li>A pair <code>[x<sub>i</sub>, y<sub>i</sub>]</code> exists in <code>pairs</code> <strong>if and only if</strong> <code>x<sub>i</sub></code> is an ancestor of <code>y<sub>i</sub></code> or <code>y<sub>i</sub></code> is an ancestor of <code>x<sub>i</sub></code>.</li>\n\t<li><strong>Note:</strong> the tree does not have to be a binary tree.</li>\n</ul>\n\n<p>Two ways are considered to be different if there is at least one node that has different parents in both ways.</p>\n\n<p>Return:</p>\n\n<ul>\n\t<li><code>0</code> if <code>ways == 0</code></li>\n\t<li><code>1</code> if <code>ways == 1</code></li>\n\t<li><code>2</code> if <code>ways &gt; 1</code></li>\n</ul>\n\n<p>A <strong>rooted tree</strong> is a tree that has a single root node, and all edges are oriented to be outgoing from the root.</p>\n\n<p>An <strong>ancestor</strong> of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2020/12/03/trees2.png\" style=\"width: 208px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[2,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is exactly one valid rooted tree, which is shown in the above figure.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/03/tree.png\" style=\"width: 234px; height: 241px;\" />\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[2,3],[1,3]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are multiple valid rooted trees. Three of them are shown in the above figures.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[2,3],[2,4],[1,5]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no valid rooted trees.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pairs.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= x<sub>i </sub>&lt; y<sub>i</sub> &lt;= 500</code></li>\n\t<li>The elements in <code>pairs</code> are unique.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 208,
            "dislikes": 147,
            "similarQuestions": "[{\"title\": \"Create Binary Tree From Descriptions\", \"titleSlug\": \"create-binary-tree-from-descriptions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Star Sum of a Graph\", \"titleSlug\": \"maximum-star-sum-of-a-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"4K\", \"totalSubmission\": \"9.1K\", \"totalAcceptedRaw\": 4021, \"totalSubmissionRaw\": 9113, \"acRate\": \"44.1%\"}",
            "hints": [
                "Think inductively. The first step is to get the root. Obviously, the root should be in pairs with all the nodes. If there isn't exactly one such node, then there are 0 ways.",
                "The number of pairs involving a node must be less than or equal to that number of its parent.",
                "Actually, if it's equal, then there is not exactly 1 way, because they can be swapped.",
                "Recursively, given a set of nodes, get the node with the most pairs, then this must be a root and have no parents in the current set of nodes."
            ],
            "rephrased": {
                "body": "Given an array `pairs`, where `pairs[i] = [x_i, y_i]`, representing parent-child relationships in a tree, determine the number of possible rooted trees that satisfy the following conditions:\n\n*   The tree consists of nodes whose values appear in `pairs`. Each unique number that exists in `pairs` is a node in the tree.\n*   A pair `[x_i, y_i]` exists in `pairs` if and only if `x_i` is an ancestor of `y_i` or `y_i` is an ancestor of `x_i`. In other words, the two nodes in a pair must have an ancestor-descendant relationship.\n*   The tree does not have to be a binary tree (a node can have any number of children).\n\nReturn:\n\n*   `0` if no valid rooted tree exists (`ways == 0`).\n*   `1` if there is exactly one valid rooted tree (`ways == 1`).\n*   `2` if there are more than one valid rooted trees (`ways > 1`).\n\nNote that two rooted trees are considered different if at least one node has a different parent in the two trees.",
                "constraints": [
                    "1 <= pairs.length <= 10^5",
                    "1 <= x_i < y_i <= 500",
                    "The elements in pairs are unique."
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[2,3]]",
                        "output": "1",
                        "explanation": "There is exactly one valid rooted tree, where 1 is the root, 2 is the child of 1, and 3 is the child of 2."
                    },
                    {
                        "input": "[[1,2],[2,3],[1,3]]",
                        "output": "2",
                        "explanation": "There are multiple valid rooted trees. For example, 1 can be the root, with 2 and 3 as children. Alternatively, 2 can be the root, with 1 and 3 as children where 1 is above 3. There are multiple such valid structures."
                    },
                    {
                        "input": "[[1,2],[2,3],[2,4],[1,5]]",
                        "output": "0",
                        "explanation": "There are no valid rooted trees that can be formed from these pairs, because the relationships are contradictory."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "create-binary-tree-from-descriptions",
                "title": "Create Binary Tree From Descriptions",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-star-sum-of-a-graph",
                "title": "Maximum Star Sum of a Graph",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think inductively. The first step is to get the root. Obviously, the root should be in pairs with all the nodes. If there isn't exactly one such node, then there are 0 ways.",
            "The number of pairs involving a node must be less than or equal to that number of its parent.",
            "Actually, if it's equal, then there is not exactly 1 way, because they can be swapped.",
            "Recursively, given a set of nodes, get the node with the most pairs, then this must be a root and have no parents in the current set of nodes."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int checkWays(vector<vector<int>>& pairs) {\n    constexpr int kMax = 501;\n    unordered_map<int, vector<int>> graph;\n    vector<int> degrees(kMax);\n    vector<vector<bool>> connected(kMax, vector<bool>(kMax));\n\n    for (const vector<int>& pair : pairs) {\n      const int u = pair[0];\n      const int v = pair[1];\n      graph[u].push_back(v);\n      graph[v].push_back(u);\n      ++degrees[u];\n      ++degrees[v];\n      connected[u][v] = true;\n      connected[v][u] = true;\n    }\n\n    // For each node, sort its children by degrees descendingly.\n    for (auto& [_, children] : graph)\n      sort(children.begin(), children.end(),\n           [&degrees](int a, int b) { return degrees[b] < degrees[a]; });\n\n    const int root = getRoot(degrees, graph.size());\n    if (root == -1)\n      return 0;\n    if (!dfs(graph, root, degrees, connected, {}, vector<bool>(kMax)))\n      return 0;\n    return hasMoreThanOneWay ? 2 : 1;\n  }\n\n private:\n  bool hasMoreThanOneWay = false;\n\n  // Returns the root by finding the node with a degrees equal to n - 1.\n  int getRoot(const vector<int>& degrees, int n) {\n    for (int i = 1; i < degrees.size(); ++i)\n      if (degrees[i] == n - 1)\n        return i;\n    return -1;\n  }\n\n  // Returns true if each node rooted at u is connected to all of its ancestors.\n  bool dfs(const unordered_map<int, vector<int>>& graph, int u,\n           vector<int>& degrees, vector<vector<bool>>& connected,\n           vector<int>&& ancestors, vector<bool>&& seen) {\n    seen[u] = true;\n\n    for (const int ancestor : ancestors)\n      if (!connected[u][ancestor])\n        return false;\n\n    ancestors.push_back(u);\n\n    for (const int v : graph.at(u)) {\n      if (seen[v])\n        continue;\n      // We can swap u with v, so there are more than one way.\n      if (degrees[v] == degrees[u])\n        hasMoreThanOneWay = true;\n      if (!dfs(graph, v, degrees, connected, move(ancestors), move(seen)))\n        return false;\n    }\n\n    ancestors.pop_back();\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int checkWays(int[][] pairs) {\n    final int kMax = 501;\n    Map<Integer, List<Integer>> graph = new HashMap<>();\n    int[] degrees = new int[kMax];\n    boolean[][] connected = new boolean[kMax][kMax];\n\n    for (int[] pair : pairs) {\n      final int u = pair[0];\n      final int v = pair[1];\n      graph.putIfAbsent(u, new ArrayList<>());\n      graph.putIfAbsent(v, new ArrayList<>());\n      graph.get(u).add(v);\n      graph.get(v).add(u);\n      ++degrees[u];\n      ++degrees[v];\n      connected[u][v] = true;\n      connected[v][u] = true;\n    }\n\n    // For each node, sort its children by degrees descendingly.\n    for (final int u : graph.keySet())\n      graph.get(u).sort((a, b) -> Integer.compare(degrees[b], degrees[a]));\n\n    final int root = getRoot(degrees, graph.keySet().size());\n    if (root == -1)\n      return 0;\n    if (!dfs(graph, root, degrees, connected, new ArrayList<>(), new boolean[kMax]))\n      return 0;\n    return hasMoreThanOneWay ? 2 : 1;\n  }\n\n  private boolean hasMoreThanOneWay = false;\n\n  // Returns the root by finding the node with a degrees equal to n - 1.\n  private int getRoot(int[] degrees, int n) {\n    for (int i = 1; i < degrees.length; ++i)\n      if (degrees[i] == n - 1)\n        return i;\n    return -1;\n  }\n\n  // Returns true if each node rooted at u is connected to all of its ancestors.\n  private boolean dfs(Map<Integer, List<Integer>> graph, int u, int[] degrees,\n                      boolean[][] connected, List<Integer> ancestors, boolean[] seen) {\n    seen[u] = true;\n\n    for (final int ancestor : ancestors)\n      if (!connected[u][ancestor])\n        return false;\n\n    ancestors.add(u);\n\n    for (final int v : graph.get(u)) {\n      if (seen[v])\n        continue;\n      // We can swap u with v, so there are more than one way.\n      if (degrees[v] == degrees[u])\n        hasMoreThanOneWay = true;\n      if (!dfs(graph, v, degrees, connected, ancestors, seen))\n        return false;\n    }\n\n    ancestors.remove(ancestors.size() - 1);\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def checkWays(self, pairs: List[List[int]]) -> int:\n    kMax = 501\n    graph = collections.defaultdict(list)\n    degrees = [0] * kMax\n    connected = [[False] * kMax for _ in range(kMax)]\n\n    for u, v in pairs:\n      graph[u].append(v)\n      graph[v].append(u)\n      degrees[u] += 1\n      degrees[v] += 1\n      connected[u][v] = True\n      connected[v][u] = True\n\n    # For each node, sort its children by degrees descendingly.\n    for _, children in graph.items():\n      children.sort(key=lambda a: degrees[a], reverse=True)\n\n    # Find the root with a degrees equal to n - 1.\n    root = next((i for i, d in enumerate(degrees) if d == len(graph) - 1), -1)\n    if root == -1:\n      return 0\n\n    hasMoreThanOneWay = False\n\n    # Returns true if each node rooted at u is connected to all of its ancestors.\n    def dfs(u: int, ancestors: List[int], seen: List[bool]) -> bool:\n      nonlocal hasMoreThanOneWay\n      seen[u] = True\n      for ancestor in ancestors:\n        if not connected[u][ancestor]:\n          return False\n      ancestors.append(u)\n      for v in graph[u]:\n        if seen[v]:\n          continue\n        if degrees[v] == degrees[u]:\n          hasMoreThanOneWay = True\n        if not dfs(v, ancestors, seen):\n          return False\n      ancestors.pop()\n      return True\n\n    if not dfs(root, [], [False] * kMax):\n      return 0\n    return 2 if hasMoreThanOneWay else 1\n",
                "lang_text": "py"
            }
        }
    }
}