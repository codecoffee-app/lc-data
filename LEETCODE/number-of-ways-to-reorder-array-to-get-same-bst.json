{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1569",
            "title": "Number of Ways to Reorder Array to Get Same BST",
            "titleSlug": "number-of-ways-to-reorder-array-to-get-same-bst",
            "content": "<p>Given an array <code>nums</code> that represents a permutation of integers from <code>1</code> to <code>n</code>. We are going to construct a binary search tree (BST) by inserting the elements of <code>nums</code> in order into an initially empty BST. Find the number of different ways to reorder <code>nums</code> so that the constructed BST is identical to that formed from the original array <code>nums</code>.</p>\n\n<ul>\n\t<li>For example, given <code>nums = [2,1,3]</code>, we will have 2 as the root, 1 as a left child, and 3 as a right child. The array <code>[2,3,1]</code> also yields the same BST but <code>[3,2,1]</code> yields a different BST.</li>\n</ul>\n\n<p>Return <em>the number of ways to reorder</em> <code>nums</code> <em>such that the BST formed is identical to the original BST formed from</em> <code>nums</code>.</p>\n\n<p>Since the answer may be very large, <strong>return it modulo </strong><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/12/bb.png\" style=\"width: 121px; height: 101px;\" />\n<pre>\n<strong>Input:</strong> nums = [2,1,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/12/ex1.png\" style=\"width: 241px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> nums = [3,4,5,1,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The following 5 arrays will yield the same BST: \n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/12/ex4.png\" style=\"width: 121px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no other orderings of nums that will yield the same BST.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= nums.length</code></li>\n\t<li>All integers in <code>nums</code> are <strong>distinct</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1752,
            "dislikes": 201,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"53.8K\", \"totalSubmission\": \"100.6K\", \"totalAcceptedRaw\": 53773, \"totalSubmissionRaw\": 100569, \"acRate\": \"53.5%\"}",
            "hints": [
                "Use a divide and conquer strategy.",
                "The first number will always be the root. Consider the numbers smaller and larger than the root separately. When merging the results together, how many ways can you order x elements in x+y positions?"
            ],
            "rephrased": {
                "body": "Given an array `nums` representing a permutation of integers from 1 to n, construct a Binary Search Tree (BST) by inserting elements of `nums` in order into an initially empty BST. The goal is to find the number of ways to reorder `nums` such that the constructed BST is identical to the one formed from the original `nums` array.\n\nReturn the number of possible reorderings, modulo 10^9 + 7.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "1 <= nums[i] <= nums.length",
                    "All integers in nums are distinct."
                ],
                "testcases": [
                    {
                        "input": "[2,1,3]",
                        "output": "1",
                        "explanation": "The array [2,3,1] yields the same BST. There are no other ways to reorder nums which will yield the same BST."
                    },
                    {
                        "input": "[3,4,5,1,2]",
                        "output": "5",
                        "explanation": "The following 5 arrays will yield the same BST: \n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]"
                    },
                    {
                        "input": "[1,2,3]",
                        "output": "0",
                        "explanation": "There are no other orderings of nums that will yield the same BST."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use a divide and conquer strategy.",
            "The first number will always be the root. Consider the numbers smaller and larger than the root separately. When merging the results together, how many ways can you order x elements in x+y positions?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numOfWays(vector<int>& nums) {\n    comb = generate(nums.size() + 1);\n    return ways(nums) - 1;\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  // comb[n][k] := C(n, k)\n  vector<vector<int>> comb;\n\n  int ways(const vector<int>& nums) {\n    if (nums.size() <= 2)\n      return 1;\n\n    vector<int> left;\n    vector<int> right;\n\n    for (int i = 1; i < nums.size(); ++i)\n      if (nums[i] < nums[0])\n        left.push_back(nums[i]);\n      else\n        right.push_back(nums[i]);\n\n    long ans = comb[nums.size() - 1][left.size()];\n    ans = (ans * ways(left)) % kMod;\n    ans = (ans * ways(right)) % kMod;\n    return ans;\n  }\n\n  // 118. Pascal's Triangle\n  vector<vector<int>> generate(int numRows) {\n    vector<vector<int>> comb;\n\n    for (int i = 0; i < numRows; ++i)\n      comb.push_back(vector<int>(i + 1, 1));\n\n    for (int i = 2; i < numRows; ++i)\n      for (int j = 1; j < comb[i].size() - 1; ++j)\n        comb[i][j] = (comb[i - 1][j - 1] + comb[i - 1][j]) % kMod;\n\n    return comb;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numOfWays(int[] nums) {\n    comb = generate(nums.length + 1);\n    return ways(Arrays.stream(nums).boxed().collect(Collectors.toList())) - 1;\n  }\n\n  private static final int kMod = 1_000_000_007;\n  // comb[n][k] := C(n, k)\n  private List<List<Integer>> comb;\n\n  private int ways(List<Integer> nums) {\n    if (nums.size() <= 2)\n      return 1;\n\n    List<Integer> left = new ArrayList<>();\n    List<Integer> right = new ArrayList<>();\n\n    for (int i = 1; i < nums.size(); ++i)\n      if (nums.get(i) < nums.get(0))\n        left.add(nums.get(i));\n      else\n        right.add(nums.get(i));\n\n    long ans = comb.get(nums.size() - 1).get(left.size());\n    ans = (ans * ways(left)) % kMod;\n    ans = (ans * ways(right)) % kMod;\n    return (int) ans;\n  }\n\n  // 118. Pascal's Triangle\n  public List<List<Integer>> generate(int numRows) {\n    List<List<Integer>> comb = new ArrayList<>();\n\n    for (int i = 0; i < numRows; ++i) {\n      Integer[] temp = new Integer[i + 1];\n      Arrays.fill(temp, 1);\n      comb.add(Arrays.asList(temp));\n    }\n\n    for (int i = 2; i < numRows; ++i)\n      for (int j = 1; j < comb.get(i).size() - 1; ++j)\n        comb.get(i).set(j, (comb.get(i - 1).get(j - 1) + comb.get(i - 1).get(j)) % kMod);\n\n    return comb;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}