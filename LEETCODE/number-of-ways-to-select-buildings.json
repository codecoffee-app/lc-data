{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2222",
            "title": "Number of Ways to Select Buildings",
            "titleSlug": "number-of-ways-to-select-buildings",
            "content": "<p>You are given a <strong>0-indexed</strong> binary string <code>s</code> which represents the types of buildings along a street where:</p>\n\n<ul>\n\t<li><code>s[i] = &#39;0&#39;</code> denotes that the <code>i<sup>th</sup></code> building is an office and</li>\n\t<li><code>s[i] = &#39;1&#39;</code> denotes that the <code>i<sup>th</sup></code> building is a restaurant.</li>\n</ul>\n\n<p>As a city official, you would like to <strong>select</strong> 3 buildings for random inspection. However, to ensure variety, <strong>no two consecutive</strong> buildings out of the <strong>selected</strong> buildings can be of the same type.</p>\n\n<ul>\n\t<li>For example, given <code>s = &quot;0<u><strong>0</strong></u>1<u><strong>1</strong></u>0<u><strong>1</strong></u>&quot;</code>, we cannot select the <code>1<sup>st</sup></code>, <code>3<sup>rd</sup></code>, and <code>5<sup>th</sup></code> buildings as that would form <code>&quot;0<strong><u>11</u></strong>&quot;</code> which is <strong>not</strong> allowed due to having two consecutive buildings of the same type.</li>\n</ul>\n\n<p>Return <em>the <b>number of valid ways</b> to select 3 buildings.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;001101&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \nThe following sets of indices selected are valid:\n- [0,2,4] from &quot;<u><strong>0</strong></u>0<strong><u>1</u></strong>1<strong><u>0</u></strong>1&quot; forms &quot;010&quot;\n- [0,3,4] from &quot;<u><strong>0</strong></u>01<u><strong>10</strong></u>1&quot; forms &quot;010&quot;\n- [1,2,4] from &quot;0<u><strong>01</strong></u>1<u><strong>0</strong></u>1&quot; forms &quot;010&quot;\n- [1,3,4] from &quot;0<u><strong>0</strong></u>1<u><strong>10</strong></u>1&quot; forms &quot;010&quot;\n- [2,4,5] from &quot;00<u><strong>1</strong></u>1<u><strong>01</strong></u>&quot; forms &quot;101&quot;\n- [3,4,5] from &quot;001<u><strong>101</strong></u>&quot; forms &quot;101&quot;\nNo other selection is valid. Thus, there are 6 total ways.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;11100&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> It can be shown that there are no valid selections.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 926,
            "dislikes": 43,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"31.5K\", \"totalSubmission\": \"62.2K\", \"totalAcceptedRaw\": 31475, \"totalSubmissionRaw\": 62233, \"acRate\": \"50.6%\"}",
            "hints": [
                "There are only 2 valid patterns: \u2018101\u2019 and \u2018010\u2019. Think about how we can construct these 2 patterns from smaller patterns.",
                "Count the number of subsequences of the form \u201801\u2019 or \u201810\u2019 first. Let n01[i] be the number of \u201801\u2019 subsequences that exist in the prefix of s up to the ith building. How can you compute n01[i]?",
                "Let n0[i] and n1[i] be the number of \u20180\u2019s and \u20181\u2019s that exists in the prefix of s up to i respectively. Then n01[i] = n01[i \u2013 1] if s[i] == \u20180\u2019, otherwise n01[i] = n01[i \u2013 1] + n0[i \u2013 1].",
                "The same logic applies to building the n10 array and subsequently the n101 and n010 arrays for the number of \u2018101\u2019 and \u2018010\u2018 subsequences."
            ],
            "rephrased": {
                "body": "Given a 0-indexed binary string `s` representing buildings along a street ('0' for office, '1' for restaurant), find the number of ways to select 3 buildings for inspection such that no two consecutive selected buildings are of the same type. A valid selection ensures alternating building types among the selected buildings.",
                "constraints": [
                    "3 <= s.length <= 10^5",
                    "s[i] is either '0' or '1'."
                ],
                "testcases": [
                    {
                        "input": "s = \"001101\"",
                        "output": "6",
                        "explanation": "The valid selections are [0,2,4], [0,3,4], [1,2,4], [1,3,4], [2,4,5], and [3,4,5], which result in alternating building types (010 or 101)."
                    },
                    {
                        "input": "s = \"11100\"",
                        "output": "0",
                        "explanation": "There are no valid selections possible with the given constraints."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "There are only 2 valid patterns: \u2018101\u2019 and \u2018010\u2019. Think about how we can construct these 2 patterns from smaller patterns.",
            "Count the number of subsequences of the form \u201801\u2019 or \u201810\u2019 first. Let n01[i] be the number of \u201801\u2019 subsequences that exist in the prefix of s up to the ith building. How can you compute n01[i]?",
            "Let n0[i] and n1[i] be the number of \u20180\u2019s and \u20181\u2019s that exists in the prefix of s up to i respectively. Then n01[i] = n01[i \u2013 1] if s[i] == \u20180\u2019, otherwise n01[i] = n01[i \u2013 1] + n0[i \u2013 1].",
            "The same logic applies to building the n10 array and subsequently the n101 and n010 arrays for the number of \u2018101\u2019 and \u2018010\u2018 subsequences."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ]
    }
}