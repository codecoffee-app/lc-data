{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1977",
            "title": "Number of Ways to Separate Numbers",
            "titleSlug": "number-of-ways-to-separate-numbers",
            "content": "<p>You wrote down many <strong>positive</strong> integers in a string called <code>num</code>. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was <strong>non-decreasing</strong> and that <strong>no</strong> integer had leading zeros.</p>\n\n<p>Return <em>the <strong>number of possible lists of integers</strong> that you could have written down to get the string </em><code>num</code>. Since the answer may be large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;327&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You could have written down the numbers:\n3, 27\n327\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;094&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No numbers can have leading zeros and all numbers must be positive.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;0&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No numbers can have leading zeros and all numbers must be positive.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 3500</code></li>\n\t<li><code>num</code> consists of digits <code>&#39;0&#39;</code> through <code>&#39;9&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 498,
            "dislikes": 55,
            "similarQuestions": "[{\"title\": \"Decode Ways\", \"titleSlug\": \"decode-ways\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Decode Ways II\", \"titleSlug\": \"decode-ways-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Restore The Array\", \"titleSlug\": \"restore-the-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Beautiful Partitions\", \"titleSlug\": \"number-of-beautiful-partitions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Suffix Array",
                    "slug": "suffix-array"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.6K\", \"totalSubmission\": \"27.7K\", \"totalAcceptedRaw\": 5609, \"totalSubmissionRaw\": 27657, \"acRate\": \"20.3%\"}",
            "hints": [
                "If we know the current number has d digits, how many digits can the previous number have?",
                "Is there a quick way of calculating the number of possibilities for the previous number if we know that it must have less than or equal to d digits? Try to do some pre-processing."
            ],
            "rephrased": {
                "body": "Given a string `num` consisting of digits representing concatenated positive integers without commas, determine the number of possible non-decreasing lists of integers that could have produced the string. Integers in the list must not have leading zeros. Return the count modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= num.length <= 3500",
                    "num consists of digits '0' through '9'."
                ],
                "testcases": [
                    {
                        "input": "327",
                        "output": "2",
                        "explanation": "The possible lists are [3, 27] and [327]."
                    },
                    {
                        "input": "094",
                        "output": "0",
                        "explanation": "Since numbers cannot have leading zeros, no valid lists can be formed."
                    },
                    {
                        "input": "0",
                        "output": "0",
                        "explanation": "Since numbers cannot have leading zeros, no valid lists can be formed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "decode-ways",
                "title": "Decode Ways",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "decode-ways-ii",
                "title": "Decode Ways II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "restore-the-array",
                "title": "Restore The Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-beautiful-partitions",
                "title": "Number of Beautiful Partitions",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If we know the current number has d digits, how many digits can the previous number have?",
            "Is there a quick way of calculating the number of possibilities for the previous number if we know that it must have less than or equal to d digits? Try to do some pre-processing."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Suffix Array",
                "slug": "suffix-array"
            }
        ]
    }
}