{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1269",
            "title": "Number of Ways to Stay in the Same Place After Some Steps",
            "titleSlug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
            "content": "<p>You have a pointer at index <code>0</code> in an array of size <code>arrLen</code>. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).</p>\n\n<p>Given two integers <code>steps</code> and <code>arrLen</code>, return the number of ways such that your pointer is still at index <code>0</code> after <strong>exactly</strong> <code>steps</code> steps. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> steps = 3, arrLen = 2\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> steps = 2, arrLen = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> steps = 4, arrLen = 2\n<strong>Output:</strong> 8\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= steps &lt;= 500</code></li>\n\t<li><code>1 &lt;= arrLen &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1494,
            "dislikes": 62,
            "similarQuestions": "[{\"title\": \"Number of Ways to Reach a Position After Exactly k Steps\", \"titleSlug\": \"number-of-ways-to-reach-a-position-after-exactly-k-steps\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"88.1K\", \"totalSubmission\": \"174.4K\", \"totalAcceptedRaw\": 88072, \"totalSubmissionRaw\": 174377, \"acRate\": \"50.5%\"}",
            "hints": [
                "Try with Dynamic programming, dp(pos,steps): number of ways to back pos = 0 using exactly \"steps\" moves.",
                "Notice that the computational complexity does not depend of \"arrlen\"."
            ],
            "rephrased": {
                "body": "You are positioned at index 0 in an array of length `arrLen`. In each move, you can step one position to the left, one position to the right, or remain in the same position.  You must stay within the bounds of the array.  Given `steps` and `arrLen`, determine the number of ways to end up at index 0 after exactly `steps` moves.  Since the answer can be very large, return it modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= steps <= 500",
                    "1 <= arrLen <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": "steps = 3, arrLen = 2",
                        "output": "4",
                        "explanation": "There are 4 different valid sequences of moves to return to index 0 after 3 steps.  These are Right, Left, Stay; Stay, Right, Left; Right, Stay, Left; and Stay, Stay, Stay."
                    },
                    {
                        "input": "steps = 2, arrLen = 4",
                        "output": "2",
                        "explanation": "There are 2 valid move sequences: Right, Left and Stay, Stay."
                    },
                    {
                        "input": "steps = 4, arrLen = 2",
                        "output": "8",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
                "title": "Number of Ways to Reach a Position After Exactly k Steps",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try with Dynamic programming, dp(pos,steps): number of ways to back pos = 0 using exactly \"steps\" moves.",
            "Notice that the computational complexity does not depend of \"arrlen\"."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numWays(int steps, int arrLen) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = min(arrLen, steps / 2 + 1);\n    // dp[i] := # of ways to stay on index i\n    vector<long> dp(n);\n    dp[0] = 1;\n\n    while (steps--) {\n      vector<long> newDp(n);\n      for (int i = 0; i < n; ++i) {\n        newDp[i] = dp[i];\n        if (i - 1 >= 0)\n          newDp[i] += dp[i - 1];\n        if (i + 1 < n)\n          newDp[i] += dp[i + 1];\n        newDp[i] %= kMod;\n      }\n      dp = move(newDp);\n    }\n\n    return dp[0];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numWays(int steps, int arrLen) {\n    final int kMod = 1_000_000_007;\n    final int n = Math.min(arrLen, steps / 2 + 1);\n    // dp[i] := # of ways to stay on index i\n    long[] dp = new long[n];\n    dp[0] = 1;\n\n    while (steps-- > 0) {\n      long[] newDp = new long[n];\n      for (int i = 0; i < n; ++i) {\n        newDp[i] = dp[i];\n        if (i - 1 >= 0)\n          newDp[i] += dp[i - 1];\n        if (i + 1 < n)\n          newDp[i] += dp[i + 1];\n        newDp[i] %= kMod;\n      }\n      dp = newDp;\n    }\n\n    return (int) dp[0];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numWays(self, steps: int, arrLen: int) -> int:\n    kMod = 1_000_000_007\n    # dp[i] := # of ways to stay on index i\n    dp = [0] * min(steps // 2 + 1, arrLen)\n    dp[0] = 1\n\n    for _ in range(steps):\n      newDp = [0] * min(steps // 2 + 1, arrLen)\n      for i, ways in enumerate(dp):\n        if ways > 0:\n          for dx in (-1, 0, 1):\n            nextIndex = i + dx\n            if 0 <= nextIndex < len(dp):\n              newDp[nextIndex] += ways\n              newDp[nextIndex] %= kMod\n      dp = newDp\n\n    return dp[0]\n",
                "lang_text": "py"
            }
        }
    }
}