{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1577",
            "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
            "titleSlug": "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
            "content": "<p>Given two arrays of integers <code>nums1</code> and <code>nums2</code>, return the number of triplets formed (type 1 and type 2) under the following rules:</p>\n\n<ul>\n\t<li>Type 1: Triplet (i, j, k) if <code>nums1[i]<sup>2</sup> == nums2[j] * nums2[k]</code> where <code>0 &lt;= i &lt; nums1.length</code> and <code>0 &lt;= j &lt; k &lt; nums2.length</code>.</li>\n\t<li>Type 2: Triplet (i, j, k) if <code>nums2[i]<sup>2</sup> == nums1[j] * nums1[k]</code> where <code>0 &lt;= i &lt; nums2.length</code> and <code>0 &lt;= j &lt; k &lt; nums1.length</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [7,4], nums2 = [5,2,8,9]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Type 1: (1, 1, 2), nums1[1]<sup>2</sup> = nums2[1] * nums2[2]. (4<sup>2</sup> = 2 * 8). \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,1], nums2 = [1,1,1]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> All Triplets are valid, because 1<sup>2</sup> = 1 * 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]<sup>2</sup> = nums2[j] * nums2[k].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]<sup>2</sup> = nums1[j] * nums1[k].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [7,7,8,3], nums2 = [1,2,9,7]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 valid triplets.\nType 1: (3,0,2).  nums1[3]<sup>2</sup> = nums2[0] * nums2[2].\nType 2: (3,0,1).  nums2[3]<sup>2</sup> = nums1[0] * nums1[1].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 359,
            "dislikes": 52,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                }
            ],
            "stats": "{\"totalAccepted\": \"19.9K\", \"totalSubmission\": \"48.7K\", \"totalAcceptedRaw\": 19878, \"totalSubmissionRaw\": 48720, \"acRate\": \"40.8%\"}",
            "hints": [
                "Precalculate the frequencies of all nums1[i]^2 and nums2[i]^2"
            ],
            "rephrased": {
                "body": "Given two arrays of integers `nums1` and `nums2`, determine the total number of valid triplets. A triplet can be of two types:\n\nType 1: A triplet (i, j, k) is valid if `nums1[i]^2 == nums2[j] * nums2[k]`, where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`.\n\nType 2: A triplet (i, j, k) is valid if `nums2[i]^2 == nums1[j] * nums1[k]`, where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.\n\nReturn the total count of valid triplets (sum of Type 1 and Type 2 triplets).",
                "constraints": [
                    "1 <= nums1.length, nums2.length <= 1000",
                    "1 <= nums1[i], nums2[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": {
                            "nums1": [
                                7,
                                4
                            ],
                            "nums2": [
                                5,
                                2,
                                8,
                                9
                            ]
                        },
                        "output": 1,
                        "explanation": "One valid triplet of Type 1 exists: (1, 1, 2) because nums1[1]^2 == nums2[1] * nums2[2] which is 4^2 = 2 * 8."
                    },
                    {
                        "input": {
                            "nums1": [
                                1,
                                1
                            ],
                            "nums2": [
                                1,
                                1,
                                1
                            ]
                        },
                        "output": 9,
                        "explanation": "All triplets are valid because 1^2 = 1 * 1.  There are 6 valid Type 1 triplets and 3 valid Type 2 triplets."
                    },
                    {
                        "input": {
                            "nums1": [
                                7,
                                7,
                                8,
                                3
                            ],
                            "nums2": [
                                1,
                                2,
                                9,
                                7
                            ]
                        },
                        "output": 2,
                        "explanation": "Two valid triplets exist: One of Type 1 (3, 0, 2) where nums1[3]^2 = nums2[0] * nums2[2] i.e., 3^2 = 1 * 9, and one of Type 2 (3, 0, 1) where nums2[3]^2 = nums1[0] * nums1[1] i.e., 7^2 = 7 * 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Precalculate the frequencies of all nums1[i]^2 and nums2[i]^2"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numTriplets(vector<int>& nums1, vector<int>& nums2) {\n    return countTriplets(nums1, nums2) + countTriplets(nums2, nums1);\n  }\n\n private:\n  // Returns # of triplet (i, j, k) if A[i]^2 == B[j] * B[k]\n  int countTriplets(const vector<int>& A, const vector<int>& B) {\n    int res = 0;\n    unordered_map<int, int> count;\n\n    for (const int b : B)\n      ++count[b];\n\n    for (const int a : A) {\n      const long target = static_cast<long>(a) * a;\n      for (const auto& [b, freq] : count) {\n        if (target % b > 0 || !count.count(target / b))\n          continue;\n        if (target / b == b)\n          res += freq * (freq - 1);\n        else\n          res += freq * count[target / b];\n      }\n    }\n\n    return res / 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numTriplets(int[] nums1, int[] nums2) {\n    return countTriplets(nums1, nums2) + countTriplets(nums2, nums1);\n  }\n\n  private int countTriplets(int[] A, int[] B) {\n    int res = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (final int b : B)\n      count.merge(b, 1, Integer::sum);\n\n    for (final int a : A) {\n      long target = (long) a * a;\n      for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n        final int b = entry.getKey();\n        final int freq = entry.getValue();\n        if (target % b > 0 || !count.containsKey((int) (target / b)))\n          continue;\n        if (target / b == b)\n          res += freq * (freq - 1);\n        else\n          res += freq * count.get((int) (target / b));\n      }\n    }\n\n    return res / 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n    def countTriplets(A: List[int], B: List[int]):\n      res = 0\n      count = collections.Counter(B)\n\n      for a in A:\n        target = a * a\n        for b, freq in count.items():\n          if target % b > 0 or target // b not in count:\n            continue\n          if target // b == b:\n            res += freq * (freq - 1)\n          else:\n            res += freq * count[target // b]\n\n      return res // 2\n\n    return countTriplets(nums1, nums2) + countTriplets(nums2, nums1)\n",
                "lang_text": "py"
            }
        }
    }
}