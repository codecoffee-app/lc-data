{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1915",
            "title": "Number of Wonderful Substrings",
            "titleSlug": "number-of-wonderful-substrings",
            "content": "<p>A <strong>wonderful</strong> string is a string where <strong>at most one</strong> letter appears an <strong>odd</strong> number of times.</p>\r\n\r\n<ul>\r\n\t<li>For example, <code>&quot;ccjjc&quot;</code> and <code>&quot;abab&quot;</code> are wonderful, but <code>&quot;ab&quot;</code> is not.</li>\r\n</ul>\r\n\r\n<p>Given a string <code>word</code> that consists of the first ten lowercase English letters (<code>&#39;a&#39;</code> through <code>&#39;j&#39;</code>), return <em>the <strong>number of wonderful non-empty substrings</strong> in </em><code>word</code><em>. If the same substring appears multiple times in </em><code>word</code><em>, then count <strong>each occurrence</strong> separately.</em></p>\r\n\r\n<p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> word = &quot;aba&quot;\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> The four wonderful substrings are underlined below:\r\n- &quot;<u><strong>a</strong></u>ba&quot; -&gt; &quot;a&quot;\r\n- &quot;a<u><strong>b</strong></u>a&quot; -&gt; &quot;b&quot;\r\n- &quot;ab<u><strong>a</strong></u>&quot; -&gt; &quot;a&quot;\r\n- &quot;<u><strong>aba</strong></u>&quot; -&gt; &quot;aba&quot;\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> word = &quot;aabb&quot;\r\n<strong>Output:</strong> 9\r\n<strong>Explanation:</strong> The nine wonderful substrings are underlined below:\r\n- &quot;<strong><u>a</u></strong>abb&quot; -&gt; &quot;a&quot;\r\n- &quot;<u><strong>aa</strong></u>bb&quot; -&gt; &quot;aa&quot;\r\n- &quot;<u><strong>aab</strong></u>b&quot; -&gt; &quot;aab&quot;\r\n- &quot;<u><strong>aabb</strong></u>&quot; -&gt; &quot;aabb&quot;\r\n- &quot;a<u><strong>a</strong></u>bb&quot; -&gt; &quot;a&quot;\r\n- &quot;a<u><strong>abb</strong></u>&quot; -&gt; &quot;abb&quot;\r\n- &quot;aa<u><strong>b</strong></u>b&quot; -&gt; &quot;b&quot;\r\n- &quot;aa<u><strong>bb</strong></u>&quot; -&gt; &quot;bb&quot;\r\n- &quot;aab<u><strong>b</strong></u>&quot; -&gt; &quot;b&quot;\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> word = &quot;he&quot;\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> The two wonderful substrings are underlined below:\r\n- &quot;<b><u>h</u></b>e&quot; -&gt; &quot;h&quot;\r\n- &quot;h<strong><u>e</u></strong>&quot; -&gt; &quot;e&quot;\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>word</code> consists of lowercase English letters from <code>&#39;a&#39;</code>&nbsp;to <code>&#39;j&#39;</code>.</li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 954,
            "dislikes": 62,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.6K\", \"totalSubmission\": \"29.2K\", \"totalAcceptedRaw\": 13586, \"totalSubmissionRaw\": 29173, \"acRate\": \"46.6%\"}",
            "hints": [
                "For each prefix of the string, check which characters are of even frequency and which are not and represent it by a bitmask.",
                "Find the other prefixes whose masks differs from the current prefix mask by at most one bit."
            ],
            "rephrased": {
                "body": "A wonderful string is defined as a string where at most one letter appears an odd number of times. Given a string `word` consisting of lowercase English letters from 'a' to 'j', determine the number of wonderful non-empty substrings in `word`. Count each occurrence of the same substring separately.",
                "constraints": [
                    "1 <= word.length <= 10^5",
                    "word consists of lowercase English letters from 'a' to 'j'."
                ],
                "testcases": [
                    {
                        "input": "aba",
                        "output": 4,
                        "explanation": "The wonderful substrings are: 'a' (occurs twice), 'b', and 'aba'."
                    },
                    {
                        "input": "aabb",
                        "output": 9,
                        "explanation": "The wonderful substrings are: 'a' (occurs twice), 'aa', 'aab', 'aabb', 'b' (occurs twice), 'bb', and 'abb'."
                    },
                    {
                        "input": "he",
                        "output": 2,
                        "explanation": "The wonderful substrings are: 'h' and 'e'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "For each prefix of the string, check which characters are of even frequency and which are not and represent it by a bitmask.",
            "Find the other prefixes whose masks differs from the current prefix mask by at most one bit."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long wonderfulSubstrings(string word) {\n    long long ans = 0;\n    int prefix = 0;           // Binary prefix\n    vector<int> count(1024);  // Binary prefix count\n    count[0] = 1;             // Empty string \"\"\n\n    for (const char c : word) {\n      prefix ^= 1 << c - 'a';\n      ans += count[prefix];         // All chars occur even times\n      for (int i = 0; i < 10; ++i)  // ('a' + i) occurs odd times\n        ans += count[prefix ^ 1 << i];\n      ++count[prefix];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long wonderfulSubstrings(String word) {\n    long ans = 0;\n    int prefix = 0;              // Binary prefix\n    int[] count = new int[1024]; // Binary prefix count\n    count[0] = 1;                // Empty string \"\"\n\n    for (final char c : word.toCharArray()) {\n      prefix ^= 1 << c - 'a';\n      ans += count[prefix];        // All chars occur even times\n      for (int i = 0; i < 10; ++i) // ('a' + i) occurs odd times\n        ans += count[prefix ^ 1 << i];\n      ++count[prefix];\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def wonderfulSubstrings(self, word: str) -> int:\n    ans = 0\n    prefix = 0  # Binary prefix\n    count = [0] * 1024  # Binary prefix count\n    count[0] = 1  # Empty string \"\"\n\n    for c in word:\n      prefix ^= 1 << ord(c) - ord('a')\n      ans += count[prefix]  # All chars occur even times\n      # `c` occurs odd times\n      ans += sum(count[prefix ^ 1 << i] for i in range(10))\n      count[prefix] += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}