{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "967",
            "title": "Numbers With Same Consecutive Differences",
            "titleSlug": "numbers-with-same-consecutive-differences",
            "content": "<p>Given two integers n and k, return <em>an array of all the integers of length </em><code>n</code><em> where the difference between every two consecutive digits is </em><code>k</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>Note that the integers should not have leading zeros. Integers as <code>02</code> and <code>043</code> are not allowed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 7\n<strong>Output:</strong> [181,292,707,818,929]\n<strong>Explanation:</strong> Note that 070 is not a valid number, because it has leading zeroes.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, k = 1\n<strong>Output:</strong> [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 9</code></li>\n\t<li><code>0 &lt;= k &lt;= 9</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2753,
            "dislikes": 191,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"127.5K\", \"totalSubmission\": \"220.7K\", \"totalAcceptedRaw\": 127503, \"totalSubmissionRaw\": 220699, \"acRate\": \"57.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Find all integers of length `n` where the absolute difference between every two consecutive digits is `k`. Return the integers in any order. Ensure the integers do not have leading zeros.",
                "constraints": [
                    "2 <= n <= 9",
                    "0 <= k <= 9"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 7",
                        "output": "[181,292,707,818,929]",
                        "explanation": "The array contains all 3-digit numbers where the difference between consecutive digits is 7. Note that 070 is not a valid number because it has a leading zero."
                    },
                    {
                        "input": "n = 2, k = 1",
                        "output": "[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]",
                        "explanation": "The array contains all 2-digit numbers where the difference between consecutive digits is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> numsSameConsecDiff(int n, int k) {\n    if (n == 1)\n      return {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n    vector<int> ans;\n\n    if (k == 0) {\n      for (char c = '1'; c <= '9'; ++c)\n        ans.push_back(stoi(string(n, c)));\n      return ans;\n    }\n\n    for (int num = 1; num <= 9; ++num)\n      dfs(n - 1, k, num, ans);\n\n    return ans;\n  }\n\n private:\n  void dfs(int n, int k, int num, vector<int>& ans) {\n    if (n == 0) {\n      ans.push_back(num);\n      return;\n    }\n\n    const int lastDigit = num % 10;\n\n    for (const int nextDigit : {lastDigit - k, lastDigit + k})\n      if (0 <= nextDigit && nextDigit <= 9)\n        dfs(n - 1, k, num * 10 + nextDigit, ans);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] numsSameConsecDiff(int n, int k) {\n    if (n == 1)\n      return new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n    List<Integer> ans = new ArrayList<>();\n\n    if (k == 0) {\n      for (char c = '1'; c <= '9'; ++c) {\n        final String s = String.valueOf(c).repeat(n);\n        ans.add(Integer.parseInt(s));\n      }\n      return ans.stream().mapToInt(Integer::intValue).toArray();\n    }\n\n    for (int num = 1; num <= 9; ++num)\n      dfs(n - 1, k, num, ans);\n\n    return ans.stream().mapToInt(Integer::intValue).toArray();\n  }\n\n  private void dfs(int n, int k, int num, List<Integer> ans) {\n    if (n == 0) {\n      ans.add(num);\n      return;\n    }\n\n    final int lastDigit = num % 10;\n\n    for (final int nextDigit : new int[] {lastDigit - k, lastDigit + k})\n      if (0 <= nextDigit && nextDigit <= 9)\n        dfs(n - 1, k, num * 10 + nextDigit, ans);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}