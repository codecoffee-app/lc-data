{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1078",
            "title": "Occurrences After Bigram",
            "titleSlug": "occurrences-after-bigram",
            "content": "<p>Given two strings <code>first</code> and <code>second</code>, consider occurrences in some text of the form <code>&quot;first second third&quot;</code>, where <code>second</code> comes immediately after <code>first</code>, and <code>third</code> comes immediately after <code>second</code>.</p>\n\n<p>Return <em>an array of all the words</em> <code>third</code> <em>for each occurrence of</em> <code>&quot;first second third&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"\n<strong>Output:</strong> [\"girl\",\"student\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> text = \"we will we will rock you\", first = \"we\", second = \"will\"\n<strong>Output:</strong> [\"we\",\"rock\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length &lt;= 1000</code></li>\n\t<li><code>text</code> consists of lowercase English letters and spaces.</li>\n\t<li>All the words in <code>text</code> a separated by <strong>a single space</strong>.</li>\n\t<li><code>1 &lt;= first.length, second.length &lt;= 10</code></li>\n\t<li><code>first</code> and <code>second</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 469,
            "dislikes": 351,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"68.4K\", \"totalSubmission\": \"107.8K\", \"totalAcceptedRaw\": 68386, \"totalSubmissionRaw\": 107783, \"acRate\": \"63.4%\"}",
            "hints": [
                "Split the string into words, then look at adjacent triples of words."
            ],
            "rephrased": {
                "body": "Given a string `text`, find all occurrences of the pattern \"first second third\" where `second` immediately follows `first`, and `third` immediately follows `second`. Return an array containing all the `third` words for each such occurrence.",
                "constraints": [
                    "1 <= text.length <= 1000",
                    "`text` consists of lowercase English letters and spaces.",
                    "All words in `text` are separated by a single space.",
                    "1 <= first.length, second.length <= 10",
                    "`first` and `second` consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": {
                            "text": "alice is a good girl she is a good student",
                            "first": "a",
                            "second": "good"
                        },
                        "output": [
                            "girl",
                            "student"
                        ],
                        "explanation": null
                    },
                    {
                        "input": {
                            "text": "we will we will rock you",
                            "first": "we",
                            "second": "will"
                        },
                        "output": [
                            "we",
                            "rock"
                        ],
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Split the string into words, then look at adjacent triples of words."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> findOcurrences(string text, string first, string second) {\n    vector<string> ans;\n    stringstream ss(text);\n\n    for (string prev2, prev, word; ss >> word;) {\n      if (prev2 == first && prev == second)\n        ans.push_back(word);\n      prev2 = prev;\n      prev = word;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String[] findOcurrences(String text, String first, String second) {\n    List<String> ans = new ArrayList<>();\n    String[] words = text.split(\" \");\n\n    for (int i = 0; i + 2 < words.length; ++i)\n      if (first.equals(words[i]) && second.equals(words[i + 1]))\n        ans.add(words[i + 2]);\n\n    return ans.toArray(new String[0]);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findOcurrences(self, text: str, first: str, second: str) -> List[str]:\n    words = text.split()\n    return [c for a, b, c in zip(words, words[1:], words[2:]) if a == first and b == second]\n",
                "lang_text": "py"
            }
        }
    }
}