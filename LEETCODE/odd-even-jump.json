{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "975",
            "title": "Odd Even Jump",
            "titleSlug": "odd-even-jump",
            "content": "<p>You are given an integer array <code>arr</code>. From some starting index, you can make a series of jumps. The (1<sup>st</sup>, 3<sup>rd</sup>, 5<sup>th</sup>, ...) jumps in the series are called <strong>odd-numbered jumps</strong>, and the (2<sup>nd</sup>, 4<sup>th</sup>, 6<sup>th</sup>, ...) jumps in the series are called <strong>even-numbered jumps</strong>. Note that the <strong>jumps</strong> are numbered, not the indices.</p>\n\n<p>You may jump forward from index <code>i</code> to index <code>j</code> (with <code>i &lt; j</code>) in the following way:</p>\n\n<ul>\n\t<li>During <strong>odd-numbered jumps</strong> (i.e., jumps 1, 3, 5, ...), you jump to the index <code>j</code> such that <code>arr[i] &lt;= arr[j]</code> and <code>arr[j]</code> is the smallest possible value. If there are multiple such indices <code>j</code>, you can only jump to the <strong>smallest</strong> such index <code>j</code>.</li>\n\t<li>During <strong>even-numbered jumps</strong> (i.e., jumps 2, 4, 6, ...), you jump to the index <code>j</code> such that <code>arr[i] &gt;= arr[j]</code> and <code>arr[j]</code> is the largest possible value. If there are multiple such indices <code>j</code>, you can only jump to the <strong>smallest</strong> such index <code>j</code>.</li>\n\t<li>It may be the case that for some index <code>i</code>, there are no legal jumps.</li>\n</ul>\n\n<p>A starting index is <strong>good</strong> if, starting from that index, you can reach the end of the array (index <code>arr.length - 1</code>) by jumping some number of times (possibly 0 or more than once).</p>\n\n<p>Return <em>the number of <strong>good</strong> starting indices</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [10,13,12,14,15]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nFrom starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\nFrom starting index i = 4, we have reached the end already.\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\njumps.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,3,1,1,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].\nWe can&#39;t jump from i = 3 to i = 4, so the starting index i = 0 is not good.\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can&#39;t jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\nFrom starting index i = 4, we are already at the end.\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\nnumber of jumps.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [5,1,3,4,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can reach the end from starting indices 1, 2, and 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt; 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1913,
            "dislikes": 479,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"79.5K\", \"totalSubmission\": \"201.4K\", \"totalAcceptedRaw\": 79532, \"totalSubmissionRaw\": 201404, \"acRate\": \"39.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `arr`, you can make a series of jumps from some starting index. Odd-numbered jumps (1st, 3rd, 5th, ...) require jumping to an index `j` such that `arr[i] <= arr[j]` and `arr[j]` is the smallest possible value. If multiple such indices `j` exist, jump to the smallest one. Even-numbered jumps (2nd, 4th, 6th, ...) require jumping to an index `j` such that `arr[i] >= arr[j]` and `arr[j]` is the largest possible value. If multiple such indices `j` exist, jump to the smallest one. A starting index is considered 'good' if, starting from that index, you can reach the end of the array (index `arr.length - 1`) by jumping some number of times (possibly zero or more). Return the number of 'good' starting indices.",
                "constraints": [
                    "1 <= arr.length <= 2 * 10^4",
                    "0 <= arr[i] < 10^5"
                ],
                "testcases": [
                    {
                        "input": "[10,13,12,14,15]",
                        "output": "2",
                        "explanation": "Starting from index 0, the first jump leads to index 2. No further jumps are possible.  From index 1 and 2, the first jump leads to index 3, and no further jumps are possible. From index 3, the first jump lands you at the end (index 4). Index 4 is already at the end. Therefore, indices 3 and 4 are good, resulting in a total of 2 good starting indices."
                    },
                    {
                        "input": "[2,3,1,1,4]",
                        "output": "3",
                        "explanation": "Starting from index 0, you can jump to 1, then 2, then 3, but not to the end. Starting from index 1, you jump to index 4 and reach the end. Starting from index 2, you jump to 3, but cannot jump anymore.  From index 3, you can jump to index 4. Index 4 is already at the end. Indices 1, 3, and 4 allow you to reach the end."
                    },
                    {
                        "input": "[5,1,3,4,2]",
                        "output": "3",
                        "explanation": "The indices 1, 2, and 4 are the only good starting indices from where the end of the array can be reached."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int oddEvenJumps(vector<int>& arr) {\n    const int n = arr.size();\n    map<int, int> map;    // {num: min index}\n    vector<bool> inc(n);  // inc[i] := can reach arr[n - 1] from i w/ inc jump\n    vector<bool> dec(n);  // dec[i] := can reach arr[n - 1] from i w/ dec jump\n\n    map[arr[n - 1]] = n - 1;\n    inc.back() = true;\n    dec.back() = true;\n\n    for (int i = n - 2; i >= 0; --i) {\n      const auto lo = map.lower_bound(arr[i]);  // Min val >= arr[i]\n      const auto hi = map.upper_bound(arr[i]);  // Min val > arr[i]\n      if (lo != map.cend())\n        inc[i] = dec[lo->second];\n      if (hi != map.cbegin())\n        dec[i] = inc[prev(hi)->second];\n      map[arr[i]] = i;\n    }\n\n    return count(inc.begin(), inc.end(), true);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int oddEvenJumps(int[] arr) {\n    final int n = arr.length;\n    TreeMap<Integer, Integer> map = new TreeMap<>(); // {num: min index}\n    int[] inc = new int[n]; // inc[i] := can reach arr[n - 1] from i w/ inc jump\n    int[] dec = new int[n]; // dec[i] := can reach arr[n - 1] from i w/ dec jump\n\n    map.put(arr[n - 1], n - 1);\n    inc[n - 1] = 1;\n    dec[n - 1] = 1;\n\n    for (int i = n - 2; i >= 0; --i) {\n      Map.Entry<Integer, Integer> lo = map.ceilingEntry(arr[i]); // Min val >= arr[i]\n      Map.Entry<Integer, Integer> hi = map.floorEntry(arr[i]);   // Max val <= arr[i]\n      if (lo != null)\n        inc[i] = dec[(int) lo.getValue()];\n      if (hi != null)\n        dec[i] = inc[(int) hi.getValue()];\n      map.put(arr[i], i);\n    }\n\n    return Arrays.stream(inc).sum();\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}