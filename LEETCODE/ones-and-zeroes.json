{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "474",
            "title": "Ones and Zeroes",
            "titleSlug": "ones-and-zeroes",
            "content": "<p>You are given an array of binary strings <code>strs</code> and two integers <code>m</code> and <code>n</code>.</p>\n\n<p>Return <em>the size of the largest subset of <code>strs</code> such that there are <strong>at most</strong> </em><code>m</code><em> </em><code>0</code><em>&#39;s and </em><code>n</code><em> </em><code>1</code><em>&#39;s in the subset</em>.</p>\n\n<p>A set <code>x</code> is a <strong>subset</strong> of a set <code>y</code> if all elements of <code>x</code> are also elements of <code>y</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;10&quot;,&quot;0001&quot;,&quot;111001&quot;,&quot;1&quot;,&quot;0&quot;], m = 5, n = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The largest subset with at most 5 0&#39;s and 3 1&#39;s is {&quot;10&quot;, &quot;0001&quot;, &quot;1&quot;, &quot;0&quot;}, so the answer is 4.\nOther valid but smaller subsets include {&quot;0001&quot;, &quot;1&quot;} and {&quot;10&quot;, &quot;1&quot;, &quot;0&quot;}.\n{&quot;111001&quot;} is an invalid subset because it contains 4 1&#39;s, greater than the maximum of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;10&quot;,&quot;0&quot;,&quot;1&quot;], m = 1, n = 1\n<strong>Output:</strong> 2\n<b>Explanation:</b> The largest subset is {&quot;0&quot;, &quot;1&quot;}, so the answer is 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 600</code></li>\n\t<li><code>1 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code> consists only of digits <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.</li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5289,
            "dislikes": 441,
            "similarQuestions": "[{\"title\": \"Count Subarrays With More Ones Than Zeros\", \"titleSlug\": \"count-subarrays-with-more-ones-than-zeros\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Non-negative Integers without Consecutive Ones\", \"titleSlug\": \"non-negative-integers-without-consecutive-ones\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"All Divisions With the Highest Score of a Binary Array\", \"titleSlug\": \"all-divisions-with-the-highest-score-of-a-binary-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"191.5K\", \"totalSubmission\": \"404.8K\", \"totalAcceptedRaw\": 191484, \"totalSubmissionRaw\": 404786, \"acRate\": \"47.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of binary strings `strs` and two integers `m` and `n`, find the size of the largest subset of `strs` such that there are at most `m` 0's and `n` 1's in the subset.",
                "constraints": [
                    "1 <= strs.length <= 600",
                    "1 <= strs[i].length <= 100",
                    "strs[i] consists only of digits '0' and '1'.",
                    "1 <= m, n <= 100"
                ],
                "testcases": [
                    {
                        "input": "strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3",
                        "output": "4",
                        "explanation": "The largest subset with at most 5 zeros and 3 ones is {\"10\", \"0001\", \"1\", \"0\"}. Other valid subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}. {\"111001\"} is invalid because it contains 4 ones, exceeding the maximum of 3."
                    },
                    {
                        "input": "strs = [\"10\",\"0\",\"1\"], m = 1, n = 1",
                        "output": "2",
                        "explanation": "The largest subset is {\"0\", \"1\"}."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "count-subarrays-with-more-ones-than-zeros",
                "title": "Count Subarrays With More Ones Than Zeros",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "non-negative-integers-without-consecutive-ones",
                "title": "Non-negative Integers without Consecutive Ones",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "all-divisions-with-the-highest-score-of-a-binary-array",
                "title": "All Divisions With the Highest Score of a Binary Array",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findMaxForm(vector<string>& strs, int m, int n) {\n    // dp[i][j] := max size of the subset given i 0's and j 1's are available\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1));\n\n    for (const string& s : strs) {\n      const int count0 = count(s.begin(), s.end(), '0');\n      const int count1 = s.length() - count0;\n      for (int i = m; i >= count0; --i)\n        for (int j = n; j >= count1; --j)\n          dp[i][j] = max(dp[i][j], dp[i - count0][j - count1] + 1);\n    }\n\n    return dp[m][n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findMaxForm(String[] strs, int m, int n) {\n    // dp[i][j] := max size of the subset given i 0's and j 1's are available\n    int[][] dp = new int[m + 1][n + 1];\n\n    for (final String s : strs) {\n      final int count0 = (int) s.chars().filter(c -> c == '0').count();\n      final int count1 = (int) s.length() - count0;\n      for (int i = m; i >= count0; --i)\n        for (int j = n; j >= count1; --j)\n          dp[i][j] = Math.max(dp[i][j], dp[i - count0][j - count1] + 1);\n    }\n\n    return dp[m][n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n    # dp[i][j] := max size of the subset given i 0's and j 1's are available\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for s in strs:\n      count0 = s.count('0')\n      count1 = len(s) - count0\n      for i in range(m, count0 - 1, -1):\n        for j in range(n, count1 - 1, -1):\n          dp[i][j] = max(dp[i][j], dp[i - count0][j - count1] + 1)\n\n    return dp[m][n]\n",
                "lang_text": "py"
            }
        }
    }
}