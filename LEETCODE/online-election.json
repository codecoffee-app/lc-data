{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "911",
            "title": "Online Election",
            "titleSlug": "online-election",
            "content": "<p>You are given two integer arrays <code>persons</code> and <code>times</code>. In an election, the <code>i<sup>th</sup></code> vote was cast for <code>persons[i]</code> at time <code>times[i]</code>.</p>\n\n<p>For each query at a time <code>t</code>, find the person that was leading the election at time <code>t</code>. Votes cast at time <code>t</code> will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.</p>\n\n<p>Implement the <code>TopVotedCandidate</code> class:</p>\n\n<ul>\n\t<li><code>TopVotedCandidate(int[] persons, int[] times)</code> Initializes the object with the <code>persons</code> and <code>times</code> arrays.</li>\n\t<li><code>int q(int t)</code> Returns the number of the person that was leading the election at time <code>t</code> according to the mentioned rules.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;TopVotedCandidate&quot;, &quot;q&quot;, &quot;q&quot;, &quot;q&quot;, &quot;q&quot;, &quot;q&quot;, &quot;q&quot;]\n[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]\n<strong>Output</strong>\n[null, 0, 1, 1, 0, 0, 1]\n\n<strong>Explanation</strong>\nTopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);\ntopVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.\ntopVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.\ntopVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\ntopVotedCandidate.q(15); // return 0\ntopVotedCandidate.q(24); // return 0\ntopVotedCandidate.q(8); // return 1\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= persons.length &lt;= 5000</code></li>\n\t<li><code>times.length == persons.length</code></li>\n\t<li><code>0 &lt;= persons[i] &lt; persons.length</code></li>\n\t<li><code>0 &lt;= times[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>times</code> is sorted in a strictly increasing order.</li>\n\t<li><code>times[0] &lt;= t &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>q</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 961,
            "dislikes": 644,
            "similarQuestions": "[{\"title\": \"Rank Teams by Votes\", \"titleSlug\": \"rank-teams-by-votes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                }
            ],
            "stats": "{\"totalAccepted\": \"54.1K\", \"totalSubmission\": \"104.3K\", \"totalAcceptedRaw\": 54143, \"totalSubmissionRaw\": 104328, \"acRate\": \"51.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two integer arrays `persons` and `times` representing votes cast in an election, determine the leading candidate at specific times. `persons[i]` is the candidate voted for at time `times[i]`. Implement a `TopVotedCandidate` class that efficiently answers queries for the leading candidate at any given time `t`. Votes cast at time `t` are counted. In the event of a tie, the most recent vote wins.",
                "constraints": [
                    "1 <= persons.length <= 5000",
                    "times.length == persons.length",
                    "0 <= persons[i] < persons.length",
                    "0 <= times[i] <= 10^9",
                    "times is sorted in a strictly increasing order.",
                    "times[0] <= t <= 10^9",
                    "At most 10^4 calls will be made to `q`."
                ],
                "testcases": [
                    {
                        "input": "[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"] \n[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]",
                        "output": "[null, 0, 1, 1, 0, 0, 1]",
                        "explanation": "The `TopVotedCandidate` is initialized with votes for candidates [0, 1, 1, 0, 0, 1, 0] cast at times [0, 5, 10, 15, 20, 25, 30].\n- At time 3, only vote for candidate 0 is present. So, 0 is leading.\n- At time 12, votes are [0, 1, 1]. Candidate 1 is leading.\n- At time 25, votes are [0, 1, 1, 0, 0, 1]. Candidate 1 is leading.\n- At time 15, votes are [0, 1, 1, 0]. Candidate 0 is leading.\n- At time 24, votes are [0, 1, 1, 0, 0]. Candidate 0 is leading.\n- At time 8, votes are [0, 1]. Candidate 1 is leading."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "rank-teams-by-votes",
                "title": "Rank Teams by Votes",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Design",
                "slug": "design"
            }
        ]
    }
}