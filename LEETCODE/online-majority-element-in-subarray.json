{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1157",
            "title": "Online Majority Element In Subarray",
            "titleSlug": "online-majority-element-in-subarray",
            "content": "<p>Design a data structure that efficiently finds the <strong>majority element</strong> of a given subarray.</p>\n\n<p>The <strong>majority element</strong> of a subarray is an element that occurs <code>threshold</code> times or more in the subarray.</p>\n\n<p>Implementing the <code>MajorityChecker</code> class:</p>\n\n<ul>\n\t<li><code>MajorityChecker(int[] arr)</code> Initializes the instance of the class with the given array <code>arr</code>.</li>\n\t<li><code>int query(int left, int right, int threshold)</code> returns the element in the subarray <code>arr[left...right]</code> that occurs at least <code>threshold</code> times, or <code>-1</code> if no such element exists.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MajorityChecker&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]\n<strong>Output</strong>\n[null, 1, -1, 2]\n\n<strong>Explanation</strong>\nMajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= left &lt;= right &lt; arr.length</code></li>\n\t<li><code>threshold &lt;= right - left + 1</code></li>\n\t<li><code>2 * threshold &gt; right - left + 1</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>query</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 613,
            "dislikes": 59,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.9K\", \"totalSubmission\": \"38.1K\", \"totalAcceptedRaw\": 15853, \"totalSubmissionRaw\": 38131, \"acRate\": \"41.6%\"}",
            "hints": [
                "What's special about a majority element ?",
                "A majority element appears more than half the length of the array number of times.",
                "If we tried a random index of the array, what's the probability that this index has a majority element ?",
                "It's more than 50% if that array has a majority element.",
                "Try a random index for a proper number of times so that the probability of not finding the answer tends to zero."
            ],
            "rephrased": {
                "body": "Design a data structure to efficiently find the majority element within a specified subarray. A majority element is defined as an element that appears at least `threshold` times within that subarray.\n\nImplement a `MajorityChecker` class with the following methods:\n\n*   `MajorityChecker(int[] arr)`: Initializes the `MajorityChecker` with the input array `arr`.\n*   `int query(int left, int right, int threshold)`: Returns the majority element within the subarray `arr[left...right]` if it exists (i.e., appears at least `threshold` times). If no such element exists, return -1.",
                "constraints": [
                    "1 <= arr.length <= 2 * 10^4",
                    "1 <= arr[i] <= 2 * 10^4",
                    "0 <= left <= right < arr.length",
                    "threshold <= right - left + 1",
                    "2 * threshold > right - left + 1",
                    "At most 10^4 calls will be made to query"
                ],
                "testcases": [
                    {
                        "input": "[\"MajorityChecker\", \"query\", \"query\", \"query\"]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]",
                        "output": "[null, 1, -1, 2]",
                        "explanation": "Initialize the MajorityChecker with the array [1, 1, 2, 2, 1, 1].\nquery(0, 5, 4): The subarray is [1, 1, 2, 2, 1, 1]. The number 1 appears 4 times, which is >= threshold of 4. Hence, return 1.\nquery(0, 3, 3): The subarray is [1, 1, 2, 2]. No number appears 3 times or more. Hence, return -1.\nquery(2, 3, 2): The subarray is [2, 2]. The number 2 appears 2 times, which is >= threshold of 2. Hence, return 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "What's special about a majority element ?",
            "A majority element appears more than half the length of the array number of times.",
            "If we tried a random index of the array, what's the probability that this index has a majority element ?",
            "It's more than 50% if that array has a majority element.",
            "Try a random index for a proper number of times so that the probability of not finding the answer tends to zero."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ]
    }
}