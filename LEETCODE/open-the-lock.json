{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "752",
            "title": "Open the Lock",
            "titleSlug": "open-the-lock",
            "content": "<p>You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: <code>&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;</code>. The wheels can rotate freely and wrap around: for example we can turn <code>&#39;9&#39;</code> to be <code>&#39;0&#39;</code>, or <code>&#39;0&#39;</code> to be <code>&#39;9&#39;</code>. Each move consists of turning one wheel one slot.</p>\n\n<p>The lock initially starts at <code>&#39;0000&#39;</code>, a string representing the state of the 4 wheels.</p>\n\n<p>You are given a list of <code>deadends</code> dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.</p>\n\n<p>Given a <code>target</code> representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> deadends = [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target = &quot;0202&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \nA sequence of valid moves would be &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;.\nNote that a sequence like &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end &quot;0102&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> deadends = [&quot;8888&quot;], target = &quot;0009&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can turn the last wheel in reverse to move from &quot;0000&quot; -&gt; &quot;0009&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> deadends = [&quot;8887&quot;,&quot;8889&quot;,&quot;8878&quot;,&quot;8898&quot;,&quot;8788&quot;,&quot;8988&quot;,&quot;7888&quot;,&quot;9888&quot;], target = &quot;8888&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> We cannot reach the target without getting stuck.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= deadends.length &lt;= 500</code></li>\n\t<li><code>deadends[i].length == 4</code></li>\n\t<li><code>target.length == 4</code></li>\n\t<li>target <strong>will not be</strong> in the list <code>deadends</code>.</li>\n\t<li><code>target</code> and <code>deadends[i]</code> consist of digits only.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3845,
            "dislikes": 144,
            "similarQuestions": "[{\"title\": \"Reachable Nodes With Restrictions\", \"titleSlug\": \"reachable-nodes-with-restrictions\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"219.2K\", \"totalSubmission\": \"392.1K\", \"totalAcceptedRaw\": 219168, \"totalSubmissionRaw\": 392134, \"acRate\": \"55.9%\"}",
            "hints": [
                "We can think of this problem as a shortest path problem on a graph: there are `10000` nodes (strings `'0000'` to `'9999'`), and there is an edge between two nodes if they differ in one digit, that digit differs by 1 (wrapping around, so `'0'` and `'9'` differ by 1), and if *both* nodes are not in `deadends`."
            ],
            "rephrased": {
                "body": "You are presented with a lock featuring 4 circular wheels. Each wheel contains 10 slots, numbered '0' through '9'. The wheels rotate freely, wrapping around such that '9' can become '0' and '0' can become '9'. A single move involves turning one wheel by one slot.\n\nThe lock begins at '0000'. You are provided with a list of 'deadends'. If the lock displays any of these codes, it becomes stuck and cannot be opened.\n\nGiven a 'target' representing the code that unlocks the lock, determine the minimum number of moves required to reach the target from the starting state '0000', avoiding the deadends. If it's impossible to reach the target, return -1.",
                "constraints": [
                    "1 <= deadends.length <= 500",
                    "deadends[i].length == 4",
                    "target.length == 4",
                    "target will not be in the list deadends.",
                    "target and deadends[i] consist of digits only."
                ],
                "testcases": [
                    {
                        "input": "deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"",
                        "output": "6",
                        "explanation": "A valid sequence of moves is \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\". Note that \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" is invalid because the lock becomes stuck at \"0102\"."
                    },
                    {
                        "input": "deadends = [\"8888\"], target = \"0009\"",
                        "output": "1",
                        "explanation": "The last wheel can be turned in reverse from \"0000\" to \"0009\"."
                    },
                    {
                        "input": "deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"",
                        "output": "-1",
                        "explanation": "The target cannot be reached without encountering a deadend."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "reachable-nodes-with-restrictions",
                "title": "Reachable Nodes With Restrictions",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can think of this problem as a shortest path problem on a graph: there are `10000` nodes (strings `'0000'` to `'9999'`), and there is an edge between two nodes if they differ in one digit, that digit differs by 1 (wrapping around, so `'0'` and `'9'` differ by 1), and if *both* nodes are not in `deadends`."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int openLock(vector<string>& deadends, string target) {\n    unordered_set<string> seen{deadends.begin(), deadends.end()};\n    if (seen.count(\"0000\"))\n      return -1;\n    if (target == \"0000\")\n      return 0;\n\n    int ans = 0;\n    queue<string> q{{\"0000\"}};\n\n    while (!q.empty()) {\n      ++ans;\n      for (int sz = q.size(); sz > 0; --sz) {\n        string word = q.front();\n        q.pop();\n        for (int i = 0; i < 4; ++i) {\n          const char cache = word[i];\n          // Increase i-th digit by 1\n          word[i] = word[i] == '9' ? '0' : word[i] + 1;\n          if (word == target)\n            return ans;\n          if (!seen.count(word)) {\n            q.push(word);\n            seen.insert(word);\n          }\n          word[i] = cache;\n          // Decrease i-th digit by 1\n          word[i] = word[i] == '0' ? '9' : word[i] - 1;\n          if (word == target)\n            return ans;\n          if (!seen.count(word)) {\n            q.push(word);\n            seen.insert(word);\n          }\n          word[i] = cache;\n        }\n      }\n    }\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int openLock(String[] deadends, String target) {\n    Set<String> seen = new HashSet<>(Arrays.asList(deadends));\n    if (seen.contains(\"0000\"))\n      return -1;\n    if (target.equals(\"0000\"))\n      return 0;\n\n    int ans = 0;\n    Queue<String> q = new ArrayDeque<>(Arrays.asList(\"0000\"));\n\n    while (!q.isEmpty()) {\n      ++ans;\n      for (int sz = q.size(); sz > 0; --sz) {\n        StringBuilder sb = new StringBuilder(q.poll());\n        for (int i = 0; i < 4; ++i) {\n          final char cache = sb.charAt(i);\n          // Increase i-th digit by 1\n          sb.setCharAt(i, sb.charAt(i) == '9' ? '0' : (char) (sb.charAt(i) + 1));\n          String word = sb.toString();\n          if (word.equals(target))\n            return ans;\n          if (!seen.contains(word)) {\n            q.offer(word);\n            seen.add(word);\n          }\n          sb.setCharAt(i, cache);\n          // Decrease i-th digit by 1\n          sb.setCharAt(i, sb.charAt(i) == '0' ? '9' : (char) (sb.charAt(i) - 1));\n          word = sb.toString();\n          if (word.equals(target))\n            return ans;\n          if (!seen.contains(word)) {\n            q.offer(word);\n            seen.add(word);\n          }\n          sb.setCharAt(i, cache);\n        }\n      }\n    }\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}