{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "553",
            "title": "Optimal Division",
            "titleSlug": "optimal-division",
            "content": "<p>You are given an integer array <code>nums</code>. The adjacent integers in <code>nums</code> will perform the float division.</p>\n\n<ul>\n\t<li>For example, for <code>nums = [2,3,4]</code>, we will evaluate the expression <code>&quot;2/3/4&quot;</code>.</li>\n</ul>\n\n<p>However, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.</p>\n\n<p>Return <em>the corresponding expression that has the maximum value in string format</em>.</p>\n\n<p><strong>Note:</strong> your expression should not contain redundant parenthesis.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1000,100,10,2]\n<strong>Output:</strong> &quot;1000/(100/10/2)&quot;\n<strong>Explanation:</strong> 1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in &quot;1000/(<strong>(</strong>100/10<strong>)</strong>/2)&quot; are redundant since they do not influence the operation priority.\nSo you should return &quot;1000/(100/10/2)&quot;.\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,4]\n<strong>Output:</strong> &quot;2/(3/4)&quot;\n<strong>Explanation:</strong> (2/(3/4)) = 8/3 = 2.667\nIt can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10</code></li>\n\t<li><code>2 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>There is only one optimal division for the given input.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 362,
            "dislikes": 1574,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.2K\", \"totalSubmission\": \"63.1K\", \"totalAcceptedRaw\": 38185, \"totalSubmissionRaw\": 63107, \"acRate\": \"60.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of integers `nums`, where adjacent integers will be divided using float division.  You can add parentheses to change the order of operations to maximize the resulting value of the expression. Return the expression with the maximum value in string format, avoiding redundant parentheses.",
                "constraints": [
                    "1 <= nums.length <= 10",
                    "2 <= nums[i] <= 1000",
                    "There is only one optimal division for the given input."
                ],
                "testcases": [
                    {
                        "input": "[1000,100,10,2]",
                        "output": "1000/(100/10/2)",
                        "explanation": "Placing parentheses around `100/10/2` maximizes the result: 1000 / (100/10/2) = 1000 / (10/2) = 1000 / 5 = 200.  Other parenthesis placements yield smaller results."
                    },
                    {
                        "input": "[2,3,4]",
                        "output": "2/(3/4)",
                        "explanation": "Placing parentheses around `3/4` maximizes the result: 2 / (3/4) = 2 / 0.75 = 8/3 \u2248 2.667.  No other parenthesis placement yields a larger value."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string optimalDivision(vector<int>& nums) {\n    string ans = to_string(nums[0]);\n\n    if (nums.size() == 1)\n      return ans;\n    if (nums.size() == 2)\n      return ans + \"/\" + to_string(nums[1]);\n\n    ans += \"/(\" + to_string(nums[1]);\n    for (int i = 2; i < nums.size(); ++i)\n      ans += \"/\" + to_string(nums[i]);\n    ans += \")\";\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String optimalDivision(int[] nums) {\n    StringBuilder sb = new StringBuilder(String.valueOf(nums[0]));\n\n    if (nums.length == 1)\n      return sb.toString();\n    if (nums.length == 2)\n      return sb.append('/').append(nums[1]).toString();\n\n    sb.append(\"/(\").append(nums[1]);\n    for (int i = 2; i < nums.length; ++i)\n      sb.append('/').append(nums[i]);\n    sb.append(')');\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def optimalDivision(self, nums: List[int]) -> str:\n    ans = str(nums[0])\n\n    if len(nums) == 1:\n      return ans\n    if len(nums) == 2:\n      return ans + '/' + str(nums[1])\n\n    ans += '/(' + str(nums[1])\n    for i in range(2, len(nums)):\n      ans += '/' + str(nums[i])\n    ans += ')'\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}