{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2405",
            "title": "Optimal Partition of String",
            "titleSlug": "optimal-partition-of-string",
            "content": "<p>Given a string <code>s</code>, partition the string into one or more <strong>substrings</strong> such that the characters in each substring are <strong>unique</strong>. That is, no letter appears in a single substring more than <strong>once</strong>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of substrings in such a partition.</em></p>\n\n<p>Note that each character should belong to exactly one substring in a partition.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abacaba&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nTwo possible partitions are (&quot;a&quot;,&quot;ba&quot;,&quot;cab&quot;,&quot;a&quot;) and (&quot;ab&quot;,&quot;a&quot;,&quot;ca&quot;,&quot;ba&quot;).\nIt can be shown that 4 is the minimum number of substrings needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ssssss&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:\n</strong>The only valid partition is (&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;,&quot;s&quot;).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only English lowercase letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2483,
            "dislikes": 97,
            "similarQuestions": "[{\"title\": \"Longest Substring Without Repeating Characters\", \"titleSlug\": \"longest-substring-without-repeating-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Substring with At Least K Repeating Characters\", \"titleSlug\": \"longest-substring-with-at-least-k-repeating-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Partition Labels\", \"titleSlug\": \"partition-labels\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Partition Array into Disjoint Intervals\", \"titleSlug\": \"partition-array-into-disjoint-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Sum of Distinct Subarrays With Length K\", \"titleSlug\": \"maximum-sum-of-distinct-subarrays-with-length-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"157.7K\", \"totalSubmission\": \"200.5K\", \"totalAcceptedRaw\": 157676, \"totalSubmissionRaw\": 200524, \"acRate\": \"78.6%\"}",
            "hints": [
                "Try to come up with a greedy approach.",
                "From left to right, extend every substring in the partition as much as possible."
            ],
            "rephrased": {
                "body": "Given a string `s`, divide it into the fewest possible substrings such that each substring contains only unique characters (no character appears more than once within a substring). Return the minimum number of substrings required.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "abacaba",
                        "output": 4,
                        "explanation": "One possible optimal partition is (\"a\",\"ba\",\"cab\",\"a\").  It requires 4 substrings, and it can be demonstrated that no partitioning can use fewer substrings."
                    },
                    {
                        "input": "ssssss",
                        "output": 6,
                        "explanation": "The only valid partition is (\"s\",\"s\",\"s\",\"s\",\"s\",\"s\"), as each character must be in its own substring."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-substring-without-repeating-characters",
                "title": "Longest Substring Without Repeating Characters",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-substring-with-at-least-k-repeating-characters",
                "title": "Longest Substring with At Least K Repeating Characters",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "partition-labels",
                "title": "Partition Labels",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "partition-array-into-disjoint-intervals",
                "title": "Partition Array into Disjoint Intervals",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-sum-of-distinct-subarrays-with-length-k",
                "title": "Maximum Sum of Distinct Subarrays With Length K",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try to come up with a greedy approach.",
            "From left to right, extend every substring in the partition as much as possible."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int partitionString(string s) {\n    int ans = 1;\n    int usedMask = 0;\n\n    for (const char c : s) {\n      const int i = c - 'a';\n      if (usedMask >> i & 1) {\n        usedMask = 1 << i;\n        ++ans;\n      } else {\n        usedMask |= 1 << i;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int partitionString(String s) {\n    int ans = 1;\n    int usedMask = 0;\n\n    for (final char c : s.toCharArray()) {\n      final int i = c - 'a';\n      if ((usedMask >> i & 1) == 1) {\n        usedMask = 1 << i;\n        ++ans;\n      } else {\n        usedMask |= 1 << i;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def partitionString(self, s: str) -> int:\n    ans = 1\n    usedMask = 0\n\n    for c in s:\n      i = ord(c) - ord('a')\n      if usedMask >> i & 1:\n        usedMask = 1 << i\n        ans += 1\n      else:\n        usedMask |= 1 << i\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}