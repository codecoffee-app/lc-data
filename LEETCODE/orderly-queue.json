{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "899",
            "title": "Orderly Queue",
            "titleSlug": "orderly-queue",
            "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose one of the first <code>k</code> letters of <code>s</code> and append it at the end of the string.</p>\n\n<p>Return <em>the lexicographically smallest string you could have after applying the mentioned step any number of moves</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cba&quot;, k = 1\n<strong>Output:</strong> &quot;acb&quot;\n<strong>Explanation:</strong> \nIn the first move, we move the 1<sup>st</sup> character &#39;c&#39; to the end, obtaining the string &quot;bac&quot;.\nIn the second move, we move the 1<sup>st</sup> character &#39;b&#39; to the end, obtaining the final result &quot;acb&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;baaca&quot;, k = 3\n<strong>Output:</strong> &quot;aaabc&quot;\n<strong>Explanation:</strong> \nIn the first move, we move the 1<sup>st</sup> character &#39;b&#39; to the end, obtaining the string &quot;aacab&quot;.\nIn the second move, we move the 3<sup>rd</sup> character &#39;c&#39; to the end, obtaining the final result &quot;aaabc&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1714,
            "dislikes": 606,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"67.7K\", \"totalSubmission\": \"102.6K\", \"totalAcceptedRaw\": 67655, \"totalSubmissionRaw\": 102578, \"acRate\": \"66.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` and an integer `k`, you can choose one of the first `k` letters of `s` and append it to the end of the string. Find the lexicographically smallest string achievable after applying this operation any number of times.",
                "constraints": [
                    "1 <= k <= s.length <= 1000",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"cba\", k = 1",
                        "output": "\"acb\"",
                        "explanation": "Moving 'c' to the end results in \"bac\". Moving 'b' to the end then yields the lexicographically smallest string \"acb\"."
                    },
                    {
                        "input": "s = \"baaca\", k = 3",
                        "output": "\"aaabc\"",
                        "explanation": "Moving 'b' to the end results in \"aacab\". Moving 'c' to the end results in the lexicographically smallest string \"aaabc\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string orderlyQueue(string s, int k) {\n    if (k > 1) {\n      std::ranges::sort(s);\n      return s;\n    }\n\n    string ans = s;\n\n    for (int i = 1; i < s.length(); ++i)\n      ans = min(ans, s.substr(i) + s.substr(0, i));\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String orderlyQueue(String s, int k) {\n    if (k > 1) {\n      char[] chars = s.toCharArray();\n      Arrays.sort(chars);\n      return String.valueOf(chars);\n    }\n\n    String ans = s;\n\n    for (int i = 1; i < s.length(); ++i) {\n      String t = s.substring(i) + s.substring(0, i);\n      if (ans.compareTo(t) > 0)\n        ans = t;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def orderlyQueue(self, s: str, k: int) -> str:\n    return ''.join(sorted(s)) if k > 1 \\\n        else min(s[i:] + s[:i] for i in range(len(s)))\n",
                "lang_text": "py"
            }
        }
    }
}