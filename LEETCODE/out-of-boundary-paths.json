{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "576",
            "title": "Out of Boundary Paths",
            "titleSlug": "out-of-boundary-paths",
            "content": "<p>There is an <code>m x n</code> grid with a ball. The ball is initially at the position <code>[startRow, startColumn]</code>. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply <strong>at most</strong> <code>maxMove</code> moves to the ball.</p>\n\n<p>Given the five integers <code>m</code>, <code>n</code>, <code>maxMove</code>, <code>startRow</code>, <code>startColumn</code>, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_1.png\" style=\"width: 500px; height: 296px;\" />\n<pre>\n<strong>Input:</strong> m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_2.png\" style=\"width: 500px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1\n<strong>Output:</strong> 12\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>0 &lt;= maxMove &lt;= 50</code></li>\n\t<li><code>0 &lt;= startRow &lt; m</code></li>\n\t<li><code>0 &lt;= startColumn &lt; n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3132,
            "dislikes": 234,
            "similarQuestions": "[{\"title\": \"Knight Probability in Chessboard\", \"titleSlug\": \"knight-probability-in-chessboard\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Execution of All Suffix Instructions Staying in a Grid\", \"titleSlug\": \"execution-of-all-suffix-instructions-staying-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"122.5K\", \"totalSubmission\": \"277K\", \"totalAcceptedRaw\": 122535, \"totalSubmissionRaw\": 277018, \"acRate\": \"44.2%\"}",
            "hints": [
                "Is traversing every path feasible? There are many possible paths for a small matrix. Try to optimize it.",
                "Can we use some space to store the number of paths and update them after every move?",
                "One obvious thing: the ball will go out of the boundary only by crossing it. Also, there is only one possible way the ball can go out of the boundary from the boundary cell except for corner cells. From the corner cell, the ball can go out in two different ways.\r\n\r\nCan you use this thing to solve the problem?"
            ],
            "rephrased": {
                "body": "Given an `m x n` grid, a ball is initially placed at `[startRow, startColumn]`. You can move the ball to any of the four adjacent cells (up, down, left, right), potentially crossing the grid boundaries. With a maximum of `maxMove` moves, determine the number of paths that lead the ball out of the grid. Return the result modulo `10^9 + 7`.",
                "constraints": [
                    "1 <= m, n <= 50",
                    "0 <= maxMove <= 50",
                    "0 <= startRow < m",
                    "0 <= startColumn < n"
                ],
                "testcases": [
                    {
                        "input": "m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0",
                        "output": "6",
                        "explanation": null
                    },
                    {
                        "input": "m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1",
                        "output": "12",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "knight-probability-in-chessboard",
                "title": "Knight Probability in Chessboard",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "execution-of-all-suffix-instructions-staying-in-a-grid",
                "title": "Execution of All Suffix Instructions Staying in a Grid",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Is traversing every path feasible? There are many possible paths for a small matrix. Try to optimize it.",
            "Can we use some space to store the number of paths and update them after every move?",
            "One obvious thing: the ball will go out of the boundary only by crossing it. Also, there is only one possible way the ball can go out of the boundary from the boundary cell except for corner cells. From the corner cell, the ball can go out in two different ways.\r\n\r\nCan you use this thing to solve the problem?"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n    this->m = m;\n    this->n = n;\n    // dp[k][i][j] := # of paths to move the ball (i, j) out of bound w/ k moves\n    dp.resize(maxMove + 1, vector<vector<int>>(m, vector<int>(n, -1)));\n    return findPaths(maxMove, startRow, startColumn);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  int m;\n  int n;\n  vector<vector<vector<int>>> dp;\n\n  int findPaths(int k, int i, int j) {\n    if (i < 0 || i == m || j < 0 || j == n)\n      return 1;\n    if (k == 0)\n      return 0;\n    if (dp[k][i][j] != -1)\n      return dp[k][i][j];\n    return dp[k][i][j] =\n               ((findPaths(k - 1, i + 1, j) + findPaths(k - 1, i - 1, j)) %\n                    kMod +\n                (findPaths(k - 1, i, j + 1) + findPaths(k - 1, i, j - 1)) %\n                    kMod) %\n               kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n    this.m = m;\n    this.n = n;\n    // dp[k][i][j] := # of paths to move the ball (i, j) out of bound w/ k moves\n    dp = new Integer[maxMove + 1][m][n];\n    return findPaths(maxMove, startRow, startColumn);\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private int m;\n  private int n;\n  private Integer[][][] dp;\n\n  private int findPaths(int k, int i, int j) {\n    if (i < 0 || i == m || j < 0 || j == n)\n      return 1;\n    if (k == 0)\n      return 0;\n    if (dp[k][i][j] != null)\n      return dp[k][i][j];\n    return dp[k][i][j] = ((findPaths(k - 1, i + 1, j) + findPaths(k - 1, i - 1, j)) % kMod +\n                          (findPaths(k - 1, i, j + 1) + findPaths(k - 1, i, j - 1)) % kMod) %\n                         kMod;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}