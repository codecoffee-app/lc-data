{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1931",
            "title": "Painting a Grid With Three Different Colors",
            "titleSlug": "painting-a-grid-with-three-different-colors",
            "content": "<p>You are given two integers <code>m</code> and <code>n</code>. Consider an <code>m x n</code> grid where each cell is initially white. You can paint each cell <strong>red</strong>, <strong>green</strong>, or <strong>blue</strong>. All cells <strong>must</strong> be painted.</p>\n\n<p>Return<em> the number of ways to color the grid with <strong>no two adjacent cells having the same color</strong></em>. Since the answer can be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/22/colorthegrid.png\" style=\"width: 200px; height: 50px;\" />\n<pre>\n<strong>Input:</strong> m = 1, n = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The three possible colorings are shown in the image above.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/22/copy-of-colorthegrid.png\" style=\"width: 321px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> m = 1, n = 2\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The six possible colorings are shown in the image above.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> m = 5, n = 5\n<strong>Output:</strong> 580986\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m &lt;= 5</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 459,
            "dislikes": 20,
            "similarQuestions": "[{\"title\": \"Number of Ways to Paint N \\u00d7 3 Grid\", \"titleSlug\": \"number-of-ways-to-paint-n-3-grid\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.8K\", \"totalSubmission\": \"15.2K\", \"totalAcceptedRaw\": 8788, \"totalSubmissionRaw\": 15216, \"acRate\": \"57.8%\"}",
            "hints": [
                "Represent each colored column by a bitmask based on each cell color.",
                "Use bitmasks DP with state (currentCell, prevColumn)."
            ],
            "rephrased": {
                "body": "Given an m x n grid where each cell is initially white. The task is to paint each cell red, green, or blue such that no two adjacent cells have the same color. Return the number of ways to color the grid modulo 10^9 + 7.",
                "constraints": [
                    "1 <= m <= 5",
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "m = 1, n = 1",
                        "output": "3",
                        "explanation": "There are three possible colorings for a 1x1 grid: red, green, and blue."
                    },
                    {
                        "input": "m = 1, n = 2",
                        "output": "6",
                        "explanation": "There are six possible colorings for a 1x2 grid, ensuring adjacent cells have different colors."
                    },
                    {
                        "input": "m = 5, n = 5",
                        "output": "580986",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-ways-to-paint-n-3-grid",
                "title": "Number of Ways to Paint N \u00d7 3 Grid",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Represent each colored column by a bitmask based on each cell color.",
            "Use bitmasks DP with state (currentCell, prevColumn)."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int colorTheGrid(int m, int n) {\n    this->m = m;\n    this->n = n;\n    return dp(0, 0, 0, 0);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  int m;\n  int n;\n  vector<vector<int>> memo = vector<vector<int>>(1000, vector<int>(1024));\n\n  int dp(int r, int c, int prevColMask, int currColMask) {\n    if (c == n)\n      return 1;\n    if (memo[c][prevColMask])\n      return memo[c][prevColMask];\n    if (r == m)\n      return dp(0, c + 1, currColMask, 0);\n\n    int ans = 0;\n\n    // 1 := red, 2 := green, 3 := blue\n    for (int color = 1; color <= 3; ++color) {\n      if (getColor(prevColMask, r) == color)\n        continue;\n      if (r > 0 && getColor(currColMask, r - 1) == color)\n        continue;\n      ans += dp(r + 1, c, prevColMask, setColor(currColMask, r, color));\n      ans %= kMod;\n    }\n\n    if (r == 0)\n      memo[c][prevColMask] = ans;\n\n    return ans;\n  }\n\n  // E.g. __ __ __ __ __\n  //      01 10 11 11 11\n  //      R  G  B  B  B\n  // GetColor(0110111111, 3) -> G\n  int getColor(int mask, int r) {\n    return mask >> r * 2 & 3;\n  }\n\n  int setColor(int mask, int r, int color) {\n    return mask | color << r * 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int colorTheGrid(int m, int n) {\n    this.m = m;\n    this.n = n;\n    return dp(0, 0, 0, 0);\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private int m;\n  private int n;\n  private int[][] memo = new int[1000][1024];\n\n  private int dp(int r, int c, int prevColMask, int currColMask) {\n    if (c == n)\n      return 1;\n    if (memo[c][prevColMask] != 0)\n      return memo[c][prevColMask];\n    if (r == m)\n      return dp(0, c + 1, currColMask, 0);\n\n    int ans = 0;\n\n    // 1 := red, 2 := green, 3 := blue\n    for (int color = 1; color <= 3; ++color) {\n      if (getColor(prevColMask, r) == color)\n        continue;\n      if (r > 0 && getColor(currColMask, r - 1) == color)\n        continue;\n      ans += dp(r + 1, c, prevColMask, setColor(currColMask, r, color));\n      ans %= kMod;\n    }\n\n    if (r == 0)\n      memo[c][prevColMask] = ans;\n\n    return ans;\n  }\n\n  // E.g. __ __ __ __ __\n  //      01 10 11 11 11\n  //      R  G  B  B  B\n  // GetColor(0110111111, 3) -> G\n  private int getColor(int mask, int r) {\n    return mask >> r * 2 & 3;\n  }\n\n  private int setColor(int mask, int r, int color) {\n    return mask | color << r * 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def colorTheGrid(self, m: int, n: int) -> int:\n    def getColor(mask: int, r: int) -> int:\n      return mask >> r * 2 & 3\n\n    def setColor(mask: int, r: int, color: int) -> int:\n      return mask | color << r * 2\n\n    kMod = 1_000_000_007\n\n    @functools.lru_cache(None)\n    def dp(r: int, c: int, prevColMask: int, currColMask: int) -> int:\n      if c == n:\n        return 1\n      if r == m:\n        return dp(0, c + 1, currColMask, 0)\n\n      ans = 0\n\n      # 1 := red, 2 := green, 3 := blue\n      for color in range(1, 4):\n        if getColor(prevColMask, r) == color:\n          continue\n        if r > 0 and getColor(currColMask, r - 1) == color:\n          continue\n        ans += dp(r + 1, c, prevColMask, setColor(currColMask, r, color))\n        ans %= kMod\n\n      return ans\n\n    return dp(0, 0, 0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}