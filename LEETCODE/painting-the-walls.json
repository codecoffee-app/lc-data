{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2742",
            "title": "Painting the Walls",
            "titleSlug": "painting-the-walls",
            "content": "<p>You are given two <strong>0-indexed</strong> integer arrays,&nbsp;<code>cost</code> and <code>time</code>, of size <code>n</code> representing the costs and the time taken to paint <code>n</code> different walls respectively. There are two painters available:</p>\n\n<ul>\n\t<li>A<strong>&nbsp;paid painter</strong>&nbsp;that paints the <code>i<sup>th</sup></code> wall in <code>time[i]</code> units of time and takes <code>cost[i]</code> units of money.</li>\n\t<li>A<strong>&nbsp;free painter</strong> that paints&nbsp;<strong>any</strong> wall in <code>1</code> unit of time at a cost of <code>0</code>. But the&nbsp;free painter can only be used if the paid painter is already <strong>occupied</strong>.</li>\n</ul>\n\n<p>Return <em>the minimum amount of money required to paint the </em><code>n</code><em>&nbsp;walls.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [1,2,3,2], time = [1,2,3,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The walls at index 0 and 1 will be painted by the paid painter, and it will take 3 units of time; meanwhile, the free painter will paint the walls at index 2 and 3, free of cost in 2 units of time. Thus, the total cost is 1 + 2 = 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [2,3,4,2], time = [1,1,1,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The walls at index 0 and 3 will be painted by the paid painter, and it will take 2 units of time; meanwhile, the free painter will paint the walls at index 1 and 2, free of cost in 2 units of time. Thus, the total cost is 2 + 2 = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= cost.length &lt;= 500</code></li>\n\t<li><code>cost.length == time.length</code></li>\n\t<li><code>1 &lt;= cost[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= time[i] &lt;= 500</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1298,
            "dislikes": 73,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"58.9K\", \"totalSubmission\": \"114.7K\", \"totalAcceptedRaw\": 58885, \"totalSubmissionRaw\": 114702, \"acRate\": \"51.3%\"}",
            "hints": [
                "Can we break the problem down into smaller subproblems and use DP?",
                "Paid painters will be used for a maximum of N/2 units of time. There is no need to use paid painter for a time greater than this."
            ],
            "rephrased": {
                "body": "You are given two 0-indexed integer arrays, `cost` and `time`, of size `n` representing the costs and the time taken to paint `n` different walls, respectively. There are two painters available:\n\n*   A paid painter that paints the `i`th wall in `time[i]` units of time and takes `cost[i]` units of money.\n*   A free painter that paints any wall in `1` unit of time at a cost of `0`. But the free painter can only be used if the paid painter is already occupied.\n\nReturn the minimum amount of money required to paint all `n` walls.",
                "constraints": [
                    "1 <= cost.length <= 500",
                    "cost.length == time.length",
                    "1 <= cost[i] <= 10^6",
                    "1 <= time[i] <= 500"
                ],
                "testcases": [
                    {
                        "input": "cost = [1,2,3,2], time = [1,2,3,2]",
                        "output": "3",
                        "explanation": "The paid painter paints walls at indices 0 and 1, taking 1 + 2 = 3 units of time and costing 1 + 2 = 3. Meanwhile, the free painter paints the walls at indices 2 and 3 for free during those 3 units of time. The total cost is therefore 3."
                    },
                    {
                        "input": "cost = [2,3,4,2], time = [1,1,1,1]",
                        "output": "4",
                        "explanation": "The paid painter paints walls at indices 0 and 3, taking 1 + 1 = 2 units of time and costing 2 + 2 = 4. Meanwhile, the free painter paints the walls at indices 1 and 2 for free during those 2 units of time. The total cost is therefore 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can we break the problem down into smaller subproblems and use DP?",
            "Paid painters will be used for a maximum of N/2 units of time. There is no need to use paid painter for a time greater than this."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int paintWalls(vector<int>& cost, vector<int>& time) {\n    const int n = cost.size();\n    // dp[i][j] := min cost to paint j walls by first painters[i:]\n    dp.resize(n, vector<int>(n + 1));\n    return paintWalls(cost, time, 0, time.size());\n  }\n\n private:\n  static constexpr int kMax = 500'000'000;\n  vector<vector<int>> dp;\n\n  int paintWalls(const vector<int>& cost, const vector<int>& time, int i,\n                 int walls) {\n    if (walls <= 0)\n      return 0;\n    if (i == cost.size())\n      return kMax;\n    if (dp[i][walls] > 0)\n      return dp[i][walls];\n    const int pick =\n        cost[i] + paintWalls(cost, time, i + 1, walls - time[i] - 1);\n    const int skip = paintWalls(cost, time, i + 1, walls);\n    return dp[i][walls] = min(pick, skip);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int paintWalls(int[] cost, int[] time) {\n    final int n = cost.length;\n    dp = new int[n][n + 1];\n    return paintWalls(cost, time, 0, time.length);\n  }\n\n  private static final int kMax = 500_000_000;\n  private int[][] dp;\n\n  private int paintWalls(int[] cost, int[] time, int i, int walls) {\n    if (walls <= 0)\n      return 0;\n    if (i == cost.length)\n      return kMax;\n    if (dp[i][walls] > 0)\n      return dp[i][walls];\n    final int pick = cost[i] + paintWalls(cost, time, i + 1, walls - time[i] - 1);\n    final int skip = paintWalls(cost, time, i + 1, walls);\n    return dp[i][walls] = Math.min(pick, skip);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def paintWalls(self, cost: List[int], time: List[int]) -> int:\n    n = len(cost)\n\n    # dp(i, j) := min cost to paj walls by first painters[i:]\n    @functools.lru_cache(None)\n    def dp(i: int, walls: int) -> int:\n      if walls <= 0:\n        return 0\n      if i == n:\n        return math.inf\n      pick = cost[i] + dp(i + 1, walls - time[i] - 1)\n      skip = dp(i + 1, walls)\n      return min(pick, skip)\n\n    return dp(0, n)\n",
                "lang_text": "py"
            }
        }
    }
}