{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "234",
            "title": "Palindrome Linked List",
            "titleSlug": "palindrome-linked-list",
            "content": "<p>Given the <code>head</code> of a singly linked list, return <code>true</code><em> if it is a </em><span data-keyword=\"palindrome-sequence\"><em>palindrome</em></span><em> or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg\" style=\"width: 422px; height: 62px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,2,1]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg\" style=\"width: 182px; height: 62px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you do it in <code>O(n)</code> time and <code>O(1)</code> space?",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 15613,
            "dislikes": 839,
            "similarQuestions": "[{\"title\": \"Palindrome Number\", \"titleSlug\": \"palindrome-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Valid Palindrome\", \"titleSlug\": \"valid-palindrome\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Reverse Linked List\", \"titleSlug\": \"reverse-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Twin Sum of a Linked List\", \"titleSlug\": \"maximum-twin-sum-of-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.7M\", \"totalSubmission\": \"3.2M\", \"totalAcceptedRaw\": 1668823, \"totalSubmissionRaw\": 3246401, \"acRate\": \"51.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the head of a singly linked list, determine if it is a palindrome. Return `true` if it is, and `false` otherwise.",
                "constraints": [
                    "The number of nodes in the list is in the range `[1, 10^5]`.",
                    "`0 <= Node.val <= 9`"
                ],
                "testcases": [
                    {
                        "input": "[1,2,2,1]",
                        "output": "true",
                        "explanation": "The linked list represents a palindrome sequence: 1 -> 2 -> 2 -> 1."
                    },
                    {
                        "input": "[1,2]",
                        "output": "false",
                        "explanation": "The linked list represents the sequence: 1 -> 2, which is not a palindrome."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "palindrome-number",
                "title": "Palindrome Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "valid-palindrome",
                "title": "Valid Palindrome",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "reverse-linked-list",
                "title": "Reverse Linked List",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-twin-sum-of-a-linked-list",
                "title": "Maximum Twin Sum of a Linked List",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isPalindrome(ListNode* head) {\n    ListNode* slow = head;\n    ListNode* fast = head;\n\n    while (fast && fast->next) {\n      slow = slow->next;\n      fast = fast->next->next;\n    }\n\n    if (fast != nullptr)\n      slow = slow->next;\n    slow = reverseList(slow);\n\n    while (slow) {\n      if (slow->val != head->val)\n        return false;\n      slow = slow->next;\n      head = head->next;\n    }\n\n    return true;\n  }\n\n private:\n  ListNode* reverseList(ListNode* head) {\n    ListNode* prev = nullptr;\n\n    while (head) {\n      ListNode* next = head->next;\n      head->next = prev;\n      prev = head;\n      head = next;\n    }\n\n    return prev;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isPalindrome(ListNode head) {\n    ListNode slow = head;\n    ListNode fast = head;\n\n    while (fast != null && fast.next != null) {\n      slow = slow.next;\n      fast = fast.next.next;\n    }\n\n    if (fast != null)\n      slow = slow.next;\n    slow = reverseList(slow);\n\n    while (slow != null) {\n      if (slow.val != head.val)\n        return false;\n      slow = slow.next;\n      head = head.next;\n    }\n\n    return true;\n  }\n\n  private ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n\n    while (head != null) {\n      ListNode next = head.next;\n      head.next = prev;\n      prev = head;\n      head = next;\n    }\n\n    return prev;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isPalindrome(self, head: ListNode) -> bool:\n    def reverseList(head: ListNode) -> ListNode:\n      prev = None\n      curr = head\n\n      while curr:\n        next = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next\n\n      return prev\n\n    slow = head\n    fast = head\n\n    while fast and fast.next:\n      slow = slow.next\n      fast = fast.next.next\n\n    if fast:\n      slow = slow.next\n    slow = reverseList(slow)\n\n    while slow:\n      if slow.val != head.val:\n        return False\n      slow = slow.next\n      head = head.next\n\n    return True\n",
                "lang_text": "py"
            }
        }
    }
}