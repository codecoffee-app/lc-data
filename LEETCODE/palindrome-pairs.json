{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "336",
            "title": "Palindrome Pairs",
            "titleSlug": "palindrome-pairs",
            "content": "<p>You are given a <strong>0-indexed</strong> array of <strong>unique</strong> strings <code>words</code>.</p>\n\n<p>A <strong>palindrome pair</strong> is a pair of integers <code>(i, j)</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= i, j &lt; words.length</code>,</li>\n\t<li><code>i != j</code>, and</li>\n\t<li><code>words[i] + words[j]</code> (the concatenation of the two strings) is a <span data-keyword=\"palindrome-string\">palindrome</span>.</li>\n</ul>\n\n<p>Return <em>an array of all the <strong>palindrome pairs</strong> of </em><code>words</code>.</p>\n\n<p>You must write an algorithm with&nbsp;<code>O(sum of words[i].length)</code>&nbsp;runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]\n<strong>Output:</strong> [[0,1],[1,0],[3,2],[2,4]]\n<strong>Explanation:</strong> The palindromes are [&quot;abcddcba&quot;,&quot;dcbaabcd&quot;,&quot;slls&quot;,&quot;llssssll&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]\n<strong>Output:</strong> [[0,1],[1,0]]\n<strong>Explanation:</strong> The palindromes are [&quot;battab&quot;,&quot;tabbat&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;&quot;]\n<strong>Output:</strong> [[0,1],[1,0]]\n<strong>Explanation:</strong> The palindromes are [&quot;a&quot;,&quot;a&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= words[i].length &lt;= 300</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4399,
            "dislikes": 452,
            "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Palindrome\", \"titleSlug\": \"shortest-palindrome\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Palindrome by Concatenating Two Letter Words\", \"titleSlug\": \"longest-palindrome-by-concatenating-two-letter-words\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Maximum Number of String Pairs\", \"titleSlug\": \"find-maximum-number-of-string-pairs\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"199.8K\", \"totalSubmission\": \"569.4K\", \"totalAcceptedRaw\": 199780, \"totalSubmissionRaw\": 569388, \"acRate\": \"35.1%\"}",
            "hints": [
                "Checking every two pairs will exceed the time limit. It will be O(n^2 * k). We need a faster way.",
                "If we hash every string in the array, how can we check if two pairs form a palindrome after the concatenation?",
                "We can check every string in words and consider it as words[j] (i.e., the suffix of the target palindrome). We can check if there is a hash of string that can be the prefix to make it a palindrome."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array of unique strings `words`, find all palindrome pairs. A palindrome pair is a pair of distinct indices (i, j) such that the concatenation of `words[i]` and `words[j]` results in a palindrome. Return an array of all such pairs. The algorithm should have O(sum of words[i].length) runtime complexity.",
                "constraints": [
                    "1 <= words.length <= 5000",
                    "0 <= words[i].length <= 300",
                    "words[i] consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]",
                        "output": "[[0,1],[1,0],[3,2],[2,4]]",
                        "explanation": "The palindromes formed by concatenating the word pairs are: [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]"
                    },
                    {
                        "input": "words = [\"bat\",\"tab\",\"cat\"]",
                        "output": "[[0,1],[1,0]]",
                        "explanation": "The palindromes formed by concatenating the word pairs are: [\"battab\",\"tabbat\"]"
                    },
                    {
                        "input": "words = [\"a\",\"\"]",
                        "output": "[[0,1],[1,0]]",
                        "explanation": "The palindromes formed by concatenating the word pairs are: [\"a\",\"a\"]"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-palindromic-substring",
                "title": "Longest Palindromic Substring",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "shortest-palindrome",
                "title": "Shortest Palindrome",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-palindrome-by-concatenating-two-letter-words",
                "title": "Longest Palindrome by Concatenating Two Letter Words",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-maximum-number-of-string-pairs",
                "title": "Find Maximum Number of String Pairs",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Checking every two pairs will exceed the time limit. It will be O(n^2 * k). We need a faster way.",
            "If we hash every string in the array, how can we check if two pairs form a palindrome after the concatenation?",
            "We can check every string in words and consider it as words[j] (i.e., the suffix of the target palindrome). We can check if there is a hash of string that can be the prefix to make it a palindrome."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> palindromePairs(vector<string>& words) {\n    vector<vector<int>> ans;\n    unordered_map<string, int> map;  // {reversed word: its index}\n\n    for (int i = 0; i < words.size(); ++i) {\n      string word = words[i];\n      reverse(word.begin(), word.end());\n      map[word] = i;\n    }\n\n    for (int i = 0; i < words.size(); ++i) {\n      const string& word = words[i];\n      // Special case to prevent duplicate calculation\n      if (const auto it = map.find(\"\");\n          it != map.cend() && it->second != i && isPalindrome(word))\n        ans.push_back({i, it->second});\n      for (int j = 1; j <= word.length(); ++j) {\n        const string& l = word.substr(0, j);\n        const string& r = word.substr(j);\n        if (const auto it = map.find(l);\n            it != map.cend() && it->second != i && isPalindrome(r))\n          ans.push_back({i, it->second});\n        if (const auto it = map.find(r);\n            it != map.cend() && it->second != i && isPalindrome(l))\n          ans.push_back({it->second, i});\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  bool isPalindrome(const string& word) {\n    int l = 0;\n    int r = word.length() - 1;\n    while (l < r)\n      if (word[l++] != word[r--])\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> palindromePairs(String[] words) {\n    List<List<Integer>> ans = new ArrayList<>();\n    Map<String, Integer> map = new HashMap<>(); // {reversed word: its index}\n\n    for (int i = 0; i < words.length; ++i)\n      map.put(new StringBuilder(words[i]).reverse().toString(), i);\n\n    for (int i = 0; i < words.length; ++i) {\n      final String word = words[i];\n      // Special case to prevent duplicate calculation\n      if (map.containsKey(\"\") && map.get(\"\") != i && isPalindrome(word))\n        ans.add(Arrays.asList(i, map.get(\"\")));\n      for (int j = 1; j <= word.length(); ++j) {\n        final String l = word.substring(0, j);\n        final String r = word.substring(j);\n        if (map.containsKey(l) && map.get(l) != i && isPalindrome(r))\n          ans.add(Arrays.asList(i, map.get(l)));\n        if (map.containsKey(r) && map.get(r) != i && isPalindrome(l))\n          ans.add(Arrays.asList(map.get(r), i));\n      }\n    }\n\n    return ans;\n  }\n\n  private boolean isPalindrome(final String word) {\n    int l = 0;\n    int r = word.length() - 1;\n    while (l < r)\n      if (word.charAt(l++) != word.charAt(r--))\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def palindromePairs(self, words: List[str]) -> List[List[int]]:\n    ans = []\n    dict = {word[::-1]: i for i, word in enumerate(words)}\n\n    for i, word in enumerate(words):\n      if \"\" in dict and dict[\"\"] != i and word == word[::-1]:\n        ans.append([i, dict[\"\"]])\n\n      for j in range(1, len(word) + 1):\n        l = word[:j]\n        r = word[j:]\n        if l in dict and dict[l] != i and r == r[::-1]:\n          ans.append([i, dict[l]])\n        if r in dict and dict[r] != i and l == l[::-1]:\n          ans.append([dict[r], i])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}