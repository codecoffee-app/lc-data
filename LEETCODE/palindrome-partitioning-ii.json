{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "132",
            "title": "Palindrome Partitioning II",
            "titleSlug": "palindrome-partitioning-ii",
            "content": "<p>Given a string <code>s</code>, partition <code>s</code> such that every <span data-keyword=\"substring-nonempty\">substring</span> of the partition is a <span data-keyword=\"palindrome-string\">palindrome</span>.</p>\n\n<p>Return <em>the <strong>minimum</strong> cuts needed for a palindrome partitioning of</em> <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aab&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The palindrome partitioning [&quot;aa&quot;,&quot;b&quot;] could be produced using 1 cut.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase English letters only.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5270,
            "dislikes": 137,
            "similarQuestions": "[{\"title\": \"Palindrome Partitioning\", \"titleSlug\": \"palindrome-partitioning\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning IV\", \"titleSlug\": \"palindrome-partitioning-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Non-overlapping Palindrome Substrings\", \"titleSlug\": \"maximum-number-of-non-overlapping-palindrome-substrings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Great Partitions\", \"titleSlug\": \"number-of-great-partitions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"264.6K\", \"totalSubmission\": \"786K\", \"totalAcceptedRaw\": 264561, \"totalSubmissionRaw\": 786022, \"acRate\": \"33.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s`, find the minimum number of cuts required to partition `s` such that every substring in the partition is a palindrome.",
                "constraints": [
                    "1 <= s.length <= 2000",
                    "s consists of lowercase English letters only."
                ],
                "testcases": [
                    {
                        "input": "aab",
                        "output": "1",
                        "explanation": "The string can be partitioned into ['aa', 'b'] with 1 cut."
                    },
                    {
                        "input": "a",
                        "output": "0",
                        "explanation": "The string is already a palindrome, so no cuts are needed."
                    },
                    {
                        "input": "ab",
                        "output": "1",
                        "explanation": "The string can be partitioned into ['a', 'b'] with 1 cut."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "palindrome-partitioning",
                "title": "Palindrome Partitioning",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-partitioning-iv",
                "title": "Palindrome Partitioning IV",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
                "title": "Maximum Number of Non-overlapping Palindrome Substrings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-great-partitions",
                "title": "Number of Great Partitions",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minCut(string s) {\n    const int n = s.length();\n    // isPalindrome[i][j] := true if s[i..j] is a palindrome\n    vector<vector<bool>> isPalindrome(n, vector<bool>(n, true));\n    // dp[i] := min cuts needed for a palindrome partitioning of s[0..i]\n    vector<int> dp(n, n);\n\n    for (int l = 2; l <= n; ++l)\n      for (int i = 0, j = l - 1; j < n; ++i, ++j)\n        isPalindrome[i][j] = s[i] == s[j] && isPalindrome[i + 1][j - 1];\n\n    for (int i = 0; i < n; ++i) {\n      if (isPalindrome[0][i]) {\n        dp[i] = 0;\n        continue;\n      }\n\n      // Try all possible partitions\n      for (int j = 0; j < i; ++j)\n        if (isPalindrome[j + 1][i])\n          dp[i] = min(dp[i], dp[j] + 1);\n    }\n\n    return dp.back();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minCut(String s) {\n    final int n = s.length();\n    // isPalindrome[i][j] := true if s[i..j] is a palindrome\n    boolean[][] isPalindrome = new boolean[n][n];\n    for (boolean[] row : isPalindrome)\n      Arrays.fill(row, true);\n    // dp[i] := min cuts needed for a palindrome partitioning of s[0..i]\n    int[] dp = new int[n];\n    Arrays.fill(dp, n);\n\n    for (int l = 2; l <= n; ++l)\n      for (int i = 0, j = l - 1; j < n; ++i, ++j)\n        isPalindrome[i][j] = s.charAt(i) == s.charAt(j) && isPalindrome[i + 1][j - 1];\n\n    for (int i = 0; i < n; ++i) {\n      if (isPalindrome[0][i]) {\n        dp[i] = 0;\n        continue;\n      }\n\n      // Try all possible partitions\n      for (int j = 0; j < i; ++j)\n        if (isPalindrome[j + 1][i])\n          dp[i] = Math.min(dp[i], dp[j] + 1);\n    }\n\n    return dp[n - 1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minCut(self, s: str) -> int:\n    n = len(s)\n    cut = [0] * n\n    dp = [[False] * n for _ in range(n)]\n\n    for i in range(n):\n      mini = i\n      for j in range(i + 1):\n        if s[j] == s[i] and (j + 1 > i - 1 or dp[j + 1][i - 1]):\n          dp[j][i] = True\n          mini = 0 if j == 0 else min(mini, cut[j - 1] + 1)\n      cut[i] = mini\n\n    return cut[n - 1]\n",
                "lang_text": "py"
            }
        }
    }
}