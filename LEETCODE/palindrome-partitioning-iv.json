{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1745",
            "title": "Palindrome Partitioning IV",
            "titleSlug": "palindrome-partitioning-iv",
            "content": "<p>Given a string <code>s</code>, return <code>true</code> <em>if it is possible to split the string</em> <code>s</code> <em>into three <strong>non-empty</strong> palindromic substrings. Otherwise, return </em><code>false</code>.\u200b\u200b\u200b\u200b\u200b</p>\n\n<p>A string is said to be palindrome if it the same string when reversed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcbdd&quot;\n<strong>Output:</strong> true\n<strong>Explanation: </strong>&quot;abcbdd&quot; = &quot;a&quot; + &quot;bcb&quot; + &quot;dd&quot;, and all three substrings are palindromes.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bcbddxy&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>s cannot be split into 3 palindromes.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 882,
            "dislikes": 25,
            "similarQuestions": "[{\"title\": \"Palindrome Partitioning\", \"titleSlug\": \"palindrome-partitioning\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning II\", \"titleSlug\": \"palindrome-partitioning-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning III\", \"titleSlug\": \"palindrome-partitioning-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Non-overlapping Palindrome Substrings\", \"titleSlug\": \"maximum-number-of-non-overlapping-palindrome-substrings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.9K\", \"totalSubmission\": \"51.5K\", \"totalAcceptedRaw\": 22856, \"totalSubmissionRaw\": 51501, \"acRate\": \"44.4%\"}",
            "hints": [
                "Preprocess checking palindromes in O(1)",
                "Note that one string is a prefix and another one is a suffix you can try brute forcing the rest"
            ],
            "rephrased": {
                "body": "Given a string `s`, determine if it can be split into three non-empty palindromic substrings. Return `true` if it's possible, and `false` otherwise. A palindrome is a string that reads the same forwards and backward.",
                "constraints": [
                    "3 <= s.length <= 2000",
                    "s consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "abcbdd",
                        "output": true,
                        "explanation": "The string \"abcbdd\" can be split into \"a\" + \"bcb\" + \"dd\", where each substring is a palindrome."
                    },
                    {
                        "input": "bcbddxy",
                        "output": false,
                        "explanation": "The string \"bcbddxy\" cannot be split into three palindromic substrings."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "palindrome-partitioning",
                "title": "Palindrome Partitioning",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-partitioning-ii",
                "title": "Palindrome Partitioning II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-partitioning-iii",
                "title": "Palindrome Partitioning III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
                "title": "Maximum Number of Non-overlapping Palindrome Substrings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Preprocess checking palindromes in O(1)",
            "Note that one string is a prefix and another one is a suffix you can try brute forcing the rest"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool checkPartitioning(string s) {\n    const int n = s.length();\n    // dp[i][j] := true if s[i..j] is palindrome\n    dp.resize(n, vector<int>(n, -1));\n\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j)\n        if (isPalindrome(s, 0, i) && isPalindrome(s, i + 1, j) &&\n            isPalindrome(s, j + 1, n - 1))\n          return true;\n\n    return false;\n  }\n\n private:\n  vector<vector<int>> dp;\n\n  // Returns 0 if s[i..j] is not a palindrome\n  // Returns 1 if s[i..j] is a palindrome\n  int isPalindrome(const string& s, int i, int j) {\n    if (i > j)\n      return 1;\n    if (dp[i][j] != -1)\n      return dp[i][j];\n    if (s[i] == s[j])\n      return dp[i][j] = isPalindrome(s, i + 1, j - 1);\n    return dp[i][j] = 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean checkPartitioning(String s) {\n    final int n = s.length();\n    // dp[i][j] := true if s[i..j] is palindrome\n    dp = new int[n][n];\n    Arrays.stream(dp).forEach(A -> Arrays.fill(A, -1));\n\n    for (int i = 0; i < n; ++i)\n      for (int j = i + 1; j < n; ++j)\n        if (isPalindrome(s, 0, i) == 1 && isPalindrome(s, i + 1, j) == 1 &&\n            isPalindrome(s, j + 1, n - 1) == 1)\n          return true;\n\n    return false;\n  }\n\n  private int[][] dp;\n\n  // Returns 0 if s[i..j] is not a palindrome\n  // Returns 1 if s[i..j] is a palindrome\n  int isPalindrome(final String s, int i, int j) {\n    if (i > j)\n      return 1;\n    if (dp[i][j] != -1)\n      return dp[i][j];\n    if (s.charAt(i) == s.charAt(j))\n      return dp[i][j] = isPalindrome(s, i + 1, j - 1);\n    return dp[i][j] = 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def checkPartitioning(self, s: str) -> bool:\n    # dp(i, j) := True if s[i:j] is a palindrome\n    @functools.lru_cache(None)\n    def dp(i, j):\n      if i > j - 1:\n        return True\n      if s[i] == s[j - 1]:\n        return dp(i + 1, j - 1)\n      return False\n\n    n = len(s)\n\n    for i in range(n):\n      for j in range(i, n):\n        if dp(0, i) and dp(i, j) and dp(j, n):\n          return True\n\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}