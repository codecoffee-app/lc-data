{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "131",
            "title": "Palindrome Partitioning",
            "titleSlug": "palindrome-partitioning",
            "content": "<p>Given a string <code>s</code>, partition <code>s</code> such that every <span data-keyword=\"substring-nonempty\">substring</span> of the partition is a <span data-keyword=\"palindrome-string\"><strong>palindrome</strong></span>. Return <em>all possible palindrome partitioning of </em><code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"aab\"\n<strong>Output:</strong> [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"a\"\n<strong>Output:</strong> [[\"a\"]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 16</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 12037,
            "dislikes": 398,
            "similarQuestions": "[{\"title\": \"Palindrome Partitioning II\", \"titleSlug\": \"palindrome-partitioning-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Palindrome Partitioning IV\", \"titleSlug\": \"palindrome-partitioning-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Non-overlapping Palindrome Substrings\", \"titleSlug\": \"maximum-number-of-non-overlapping-palindrome-substrings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"739.4K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 739353, \"totalSubmissionRaw\": 1108060, \"acRate\": \"66.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s`, find all possible partitions of `s` such that each substring in the partition is a palindrome. Return a list of all possible palindrome partitions.",
                "constraints": [
                    "1 <= s.length <= 16",
                    "s contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "aab",
                        "output": "[[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]",
                        "explanation": "The string \"aab\" can be partitioned into palindromic substrings in two ways: [\"a\", \"a\", \"b\"] and [\"aa\", \"b\"]."
                    },
                    {
                        "input": "a",
                        "output": "[[\"a\"]]",
                        "explanation": "The string \"a\" can only be partitioned into a single substring \"a\", which is a palindrome."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-partitioning-ii",
                "title": "Palindrome Partitioning II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-partitioning-iv",
                "title": "Palindrome Partitioning IV",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-non-overlapping-palindrome-substrings",
                "title": "Maximum Number of Non-overlapping Palindrome Substrings",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<string>> partition(string s) {\n    vector<vector<string>> ans;\n    dfs(s, 0, {}, ans);\n    return ans;\n  }\n\n private:\n  void dfs(const string& s, int start, vector<string>&& path,\n           vector<vector<string>>& ans) {\n    if (start == s.length()) {\n      ans.push_back(path);\n      return;\n    }\n\n    for (int i = start; i < s.length(); ++i)\n      if (isPalindrome(s, start, i)) {\n        path.push_back(s.substr(start, i - start + 1));\n        dfs(s, i + 1, move(path), ans);\n        path.pop_back();\n      }\n  }\n\n  bool isPalindrome(const string& s, int l, int r) {\n    while (l < r)\n      if (s[l++] != s[r--])\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<String>> partition(String s) {\n    List<List<String>> ans = new ArrayList<>();\n    dfs(s, 0, new ArrayList<>(), ans);\n    return ans;\n  }\n\n  private void dfs(final String s, int start, List<String> path, List<List<String>> ans) {\n    if (start == s.length()) {\n      ans.add(new ArrayList<>(path));\n      return;\n    }\n\n    for (int i = start; i < s.length(); ++i)\n      if (isPalindrome(s, start, i)) {\n        path.add(s.substring(start, i + 1));\n        dfs(s, i + 1, path, ans);\n        path.remove(path.size() - 1);\n      }\n  }\n\n  private boolean isPalindrome(final String s, int l, int r) {\n    while (l < r)\n      if (s.charAt(l++) != s.charAt(r--))\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def partition(self, s: str) -> List[List[str]]:\n    ans = []\n\n    def isPalindrome(s: str) -> bool:\n      return s == s[::-1]\n\n    def dfs(s: str, j: int, path: List[str], ans: List[List[str]]) -> None:\n      if j == len(s):\n        ans.append(path)\n        return\n\n      for i in range(j, len(s)):\n        if isPalindrome(s[j: i + 1]):\n          dfs(s, i + 1, path + [s[j: i + 1]], ans)\n\n    dfs(s, 0, [], ans)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}