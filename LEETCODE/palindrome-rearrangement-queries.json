{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2983",
            "title": "Palindrome Rearrangement Queries",
            "titleSlug": "palindrome-rearrangement-queries",
            "content": "<p>You are given a <strong>0-indexed</strong> string <code>s</code> having an <strong>even</strong> length <code>n</code>.</p>\n\n<p>You are also given a <strong>0-indexed</strong> 2D integer array, <code>queries</code>, where <code>queries[i] = [a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>, d<sub>i</sub>]</code>.</p>\n\n<p>For each query <code>i</code>, you are allowed to perform the following operations:</p>\n\n<ul>\n\t<li>Rearrange the characters within the <strong>substring</strong> <code>s[a<sub>i</sub>:b<sub>i</sub>]</code>, where <code>0 &lt;= a<sub>i</sub> &lt;= b<sub>i</sub> &lt; n / 2</code>.</li>\n\t<li>Rearrange the characters within the <strong>substring</strong> <code>s[c<sub>i</sub>:d<sub>i</sub>]</code>, where <code>n / 2 &lt;= c<sub>i</sub> &lt;= d<sub>i</sub> &lt; n</code>.</li>\n</ul>\n\n<p>For each query, your task is to determine whether it is possible to make <code>s</code> a <strong>palindrome</strong> by performing the operations.</p>\n\n<p>Each query is answered <strong>independently</strong> of the others.</p>\n\n<p>Return <em>a <strong>0-indexed</strong> array </em><code>answer</code><em>, where </em><code>answer[i] == true</code><em> if it is possible to make </em><code>s</code><em> a palindrome by performing operations specified by the </em><code>i<sup>th</sup></code><em> query, and </em><code>false</code><em> otherwise.</em></p>\n\n<ul>\n\t<li>A <strong>substring</strong> is a contiguous sequence of characters within a string.</li>\n\t<li><code>s[x:y]</code> represents the substring consisting of characters from the index <code>x</code> to index <code>y</code> in <code>s</code>, <strong>both inclusive</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabc&quot;, queries = [[1,1,3,5],[0,2,5,5]]\n<strong>Output:</strong> [true,true]\n<strong>Explanation:</strong> In this example, there are two queries:\nIn the first query:\n- a<sub>0</sub> = 1, b<sub>0</sub> = 1, c<sub>0</sub> = 3, d<sub>0</sub> = 5.\n- So, you are allowed to rearrange s[1:1] =&gt; a<u>b</u>cabc and s[3:5] =&gt; abc<u>abc</u>.\n- To make s a palindrome, s[3:5] can be rearranged to become =&gt; abc<u>cba</u>.\n- Now, s is a palindrome. So, answer[0] = true.\nIn the second query:\n- a<sub>1</sub> = 0, b<sub>1</sub> = 2, c<sub>1</sub> = 5, d<sub>1</sub> = 5.\n- So, you are allowed to rearrange s[0:2] =&gt; <u>abc</u>abc and s[5:5] =&gt; abcab<u>c</u>.\n- To make s a palindrome, s[0:2] can be rearranged to become =&gt; <u>cba</u>abc.\n- Now, s is a palindrome. So, answer[1] = true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abbcdecbba&quot;, queries = [[0,2,7,9]]\n<strong>Output:</strong> [false]\n<strong>Explanation:</strong> In this example, there is only one query.\na<sub>0</sub> = 0, b<sub>0</sub> = 2, c<sub>0</sub> = 7, d<sub>0</sub> = 9.\nSo, you are allowed to rearrange s[0:2] =&gt; <u>abb</u>cdecbba and s[7:9] =&gt; abbcdec<u>bba</u>.\nIt is not possible to make s a palindrome by rearranging these substrings because s[3:6] is not a palindrome.\nSo, answer[0] = false.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;acbcab&quot;, queries = [[1,2,4,5]]\n<strong>Output:</strong> [true]\n<strong>Explanation: </strong>In this example, there is only one query.\na<sub>0</sub> = 1, b<sub>0</sub> = 2, c<sub>0</sub> = 4, d<sub>0</sub> = 5.\nSo, you are allowed to rearrange s[1:2] =&gt; a<u>cb</u>cab and s[4:5] =&gt; acbc<u>ab</u>.\nTo make s a palindrome s[1:2] can be rearranged to become a<u>bc</u>cab.\nThen, s[4:5] can be rearranged to become abcc<u>ba</u>.\nNow, s is a palindrome. So, answer[0] = true.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 4</code></li>\n\t<li><code>a<sub>i</sub> == queries[i][0], b<sub>i</sub> == queries[i][1]</code></li>\n\t<li><code>c<sub>i</sub> == queries[i][2], d<sub>i</sub> == queries[i][3]</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub> &lt;= b<sub>i</sub> &lt; n / 2</code></li>\n\t<li><code>n / 2 &lt;= c<sub>i</sub> &lt;= d<sub>i</sub> &lt; n </code></li>\n\t<li><code>n</code> is even.</li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 83,
            "dislikes": 25,
            "similarQuestions": "[{\"title\": \"Longest Chunked Palindrome Decomposition\", \"titleSlug\": \"longest-chunked-palindrome-decomposition\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"3K\", \"totalSubmission\": \"11.6K\", \"totalAcceptedRaw\": 2976, \"totalSubmissionRaw\": 11615, \"acRate\": \"25.6%\"}",
            "hints": [
                "Consider two indices, <code>x</code> on the left side and its symmetrical index <code>y</code> on the right side.",
                "Store the frequencies of all of the letters in both intervals <code>[a<sub>i</sub>, b<sub>i</sub>]</code> and <code>[c<sub>i</sub>, d<sub>i</sub>]</code> in a query.",
                "If <code>x</code> is not in <code>[a<sub>i</sub>, b<sub>i</sub>]</code> and <code>y</code> is not in <code>[c<sub>i</sub>, d<sub>i</sub>]</code>, they must be the same.",
                "If <code>x</code> is in <code>[a<sub>i</sub>, b<sub>i</sub>]</code> and <code>y</code> is not in <code>[c<sub>i</sub>, d<sub>i</sub>]</code>, remove one occurrence of the character at index <code>y</code> from the frequency array on the left side.",
                "Similarly, if <code>x</code> is not in <code>[a<sub>i</sub>, b<sub>i</sub>]</code> and <code>y</code> is in <code>[c<sub>i</sub>, d<sub>i</sub>]</code>, remove one occurrence of the character at index <code>x</code> from the frequency array on the right side.",
                "Finally, check whether the two frequency arrays are the same, and the indices that don't fall into any of the intervals are the same as well.",
                "Use prefix-sum + hashing to improve the time complexity."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed string `s` of even length `n`. You are also given a 0-indexed 2D integer array `queries`, where `queries[i] = [a_i, b_i, c_i, d_i]`. For each query `i`, you can rearrange the characters within the substring `s[a_i:b_i]` (where `0 <= a_i <= b_i < n / 2`) and the substring `s[c_i:d_i]` (where `n / 2 <= c_i <= d_i < n`).  Determine if it's possible to make `s` a palindrome by performing these operations for each query independently. Return a 0-indexed array `answer`, where `answer[i] == true` if it is possible to make `s` a palindrome for the `i`-th query, and `false` otherwise.",
                "constraints": [
                    "2 <= n == s.length <= 10^5",
                    "1 <= queries.length <= 10^5",
                    "queries[i].length == 4",
                    "a_i == queries[i][0], b_i == queries[i][1]",
                    "c_i == queries[i][2], d_i == queries[i][3]",
                    "0 <= a_i <= b_i < n / 2",
                    "n / 2 <= c_i <= d_i < n",
                    "n is even",
                    "s consists of only lowercase English letters"
                ],
                "testcases": [
                    {
                        "input": "s = \"abcabc\", queries = [[1,1,3,5],[0,2,5,5]]",
                        "output": "[true,true]",
                        "explanation": "For the first query, rearrange s[1:1] and s[3:5] to make 'abcabc' a palindrome (e.g., 'abccba'). For the second query, rearrange s[0:2] and s[5:5] to make 'abcabc' a palindrome (e.g., 'cbaabc')."
                    },
                    {
                        "input": "s = \"abbcdecbba\", queries = [[0,2,7,9]]",
                        "output": "[false]",
                        "explanation": "Rearranging s[0:2] and s[7:9] cannot make 'abbcdecbba' a palindrome because the middle portion 'cdec' can't be rearranged to be its own palindrome."
                    },
                    {
                        "input": "s = \"acbcab\", queries = [[1,2,4,5]]",
                        "output": "[true]",
                        "explanation": "Rearrange s[1:2] and s[4:5]. s[1:2] can become 'bc', and s[4:5] can become 'ba'. Original string then acbcab. We can rearrange s[1:2] into bc and s[4:5] to ba to make abccba so the anwer is true."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "longest-chunked-palindrome-decomposition",
                "title": "Longest Chunked Palindrome Decomposition",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Consider two indices, <code>x</code> on the left side and its symmetrical index <code>y</code> on the right side.",
            "Store the frequencies of all of the letters in both intervals <code>[a<sub>i</sub>, b<sub>i</sub>]</code> and <code>[c<sub>i</sub>, d<sub>i</sub>]</code> in a query.",
            "If <code>x</code> is not in <code>[a<sub>i</sub>, b<sub>i</sub>]</code> and <code>y</code> is not in <code>[c<sub>i</sub>, d<sub>i</sub>]</code>, they must be the same.",
            "If <code>x</code> is in <code>[a<sub>i</sub>, b<sub>i</sub>]</code> and <code>y</code> is not in <code>[c<sub>i</sub>, d<sub>i</sub>]</code>, remove one occurrence of the character at index <code>y</code> from the frequency array on the left side.",
            "Similarly, if <code>x</code> is not in <code>[a<sub>i</sub>, b<sub>i</sub>]</code> and <code>y</code> is in <code>[c<sub>i</sub>, d<sub>i</sub>]</code>, remove one occurrence of the character at index <code>x</code> from the frequency array on the right side.",
            "Finally, check whether the two frequency arrays are the same, and the indices that don't fall into any of the intervals are the same as well.",
            "Use prefix-sum + hashing to improve the time complexity."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<bool> canMakePalindromeQueries(string s,\n                                        vector<vector<int>>& queries) {\n    const int n = s.length();\n    // mirroredDiffs[i] := the number of different letters between the first i\n    // letters of s[0..n / 2) and the first i letters of s[n / 2..n)[::-1]\n    const vector<int> mirroredDiffs = getMirroredDiffs(s);\n    // counts[i] := the count of s[0..i)\n    const vector<vector<int>> counts = getCounts(s);\n    vector<bool> ans;\n\n    for (const vector<int>& query : queries) {\n      // Use left-closed, right-open intervals to facilitate the calculation.\n      //   ...... [a, b) ...|... [rb, ra) ......\n      //   .... [rd, rc) .....|..... [c, d) ....\n      const int a = query[0];\n      const int b = query[1] + 1;\n      const int c = query[2];\n      const int d = query[3] + 1;\n      const int ra = n - a;  // the reflected index of a in s[n / 2..n)\n      const int rb = n - b;  // the reflected index of b in s[n / 2..n)\n      const int rc = n - c;  // the reflected index of c in s[n / 2..n)\n      const int rd = n - d;  // the reflected index of d in s[n / 2..n)\n      // No difference is allowed outside the query ranges.\n      if (min(a, rd) > 0 && mirroredDiffs[min(a, rd)] > 0 ||\n          n / 2 > max(b, rc) &&\n              mirroredDiffs[n / 2] - mirroredDiffs[max(b, rc)] > 0 ||\n          rd > b && mirroredDiffs[rd] - mirroredDiffs[b] > 0 ||\n          a > rc && mirroredDiffs[a] - mirroredDiffs[rc] > 0) {\n        ans.push_back(false);\n      } else {\n        // The `count` map of the intersection of [a, b) and [rd, rc) in\n        // s[0..n / 2) must equate to the `count` map of the intersection of\n        // [c, d) and [rb, ra) in s[n / 2..n).\n        vector<int> leftRangeCount = subtractArrays(counts[b], counts[a]);\n        vector<int> rightRangeCount = subtractArrays(counts[d], counts[c]);\n        if (a > rd)\n          rightRangeCount = subtractArrays(\n              rightRangeCount, subtractArrays(counts[min(a, rc)], counts[rd]));\n        if (rc > b)\n          rightRangeCount = subtractArrays(\n              rightRangeCount, subtractArrays(counts[rc], counts[max(b, rd)]));\n        if (c > rb)\n          leftRangeCount = subtractArrays(\n              leftRangeCount, subtractArrays(counts[min(c, ra)], counts[rb]));\n        if (ra > d)\n          leftRangeCount = subtractArrays(\n              leftRangeCount, subtractArrays(counts[ra], counts[max(d, rb)]));\n        ans.push_back(ranges::all_of(leftRangeCount, [](int freq) {\n          return freq >= 0;\n        }) && ranges::all_of(rightRangeCount, [](int freq) {\n          return freq >= 0;\n        }) && leftRangeCount == rightRangeCount);\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  vector<int> getMirroredDiffs(const string& s) {\n    vector<int> diffs(1);\n    for (int i = 0, j = s.length() - 1; i < j; ++i, --j)\n      diffs.push_back(diffs.back() + (s[i] != s[j] ? 1 : 0));\n    return diffs;\n  }\n\n  vector<vector<int>> getCounts(const string& s) {\n    vector<int> count(26);\n    vector<vector<int>> counts{count};\n    for (const char c : s) {\n      ++count[c - 'a'];\n      counts.push_back(count);\n    }\n    return counts;\n  }\n\n  vector<int> subtractArrays(const vector<int>& a, const vector<int>& b) {\n    vector<int> res;\n    for (int i = 0; i < a.size(); ++i)\n      res.push_back(a[i] - b[i]);\n    return res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean[] canMakePalindromeQueries(String s, int[][] queries) {\n    final int n = s.length();\n    // mirroredDiffs[i] := the number of different letters between the first i\n    // letters of s[0..n / 2) and the first i letters of s[n / 2..n)[::-1]\n    final int[] mirroredDiffs = getMirroredDiffs(s);\n    // counts[i] := the count of s[0..i)\n    final int[][] counts = getCounts(s);\n    boolean[] ans = new boolean[queries.length];\n\n    for (int i = 0; i < queries.length; i++) {\n      // Use left-closed, right-open intervals to facilitate the calculation.\n      //   ...... [a, b) ...|... [rb, ra) ......\n      //   .... [rd, rc) .....|..... [c, d) ....\n      int[] query = queries[i];\n      final int a = query[0];\n      final int b = query[1] + 1;\n      final int c = query[2];\n      final int d = query[3] + 1;\n      final int ra = n - a; // the reflected index of a in s[n / 2..n)\n      final int rb = n - b; // the reflected index of b in s[n / 2..n)\n      final int rc = n - c; // the reflected index of c in s[n / 2..n)\n      final int rd = n - d; // the reflected index of d in s[n / 2..n)\n      // No difference is allowed outside the query ranges.\n      if ((Math.min(a, rd) > 0 && mirroredDiffs[Math.min(a, rd)] > 0) ||\n          (n / 2 > Math.max(b, rc) && mirroredDiffs[n / 2] - mirroredDiffs[Math.max(b, rc)] > 0) ||\n          (rd > b && mirroredDiffs[rd] - mirroredDiffs[b] > 0) ||\n          (a > rc && mirroredDiffs[a] - mirroredDiffs[rc] > 0)) {\n        ans[i] = false;\n      } else {\n        // The `count` map of the intersection of [a, b) and [rd, rc) in\n        // s[0..n / 2) must equate to the `count` map of the intersection of\n        // [c, d) and [rb, ra) in s[n / 2..n).\n        int[] leftRangeCount = subtractArrays(counts[b], counts[a]);\n        int[] rightRangeCount = subtractArrays(counts[d], counts[c]);\n        if (a > rd)\n          rightRangeCount =\n              subtractArrays(rightRangeCount, subtractArrays(counts[Math.min(a, rc)], counts[rd]));\n        if (rc > b)\n          rightRangeCount =\n              subtractArrays(rightRangeCount, subtractArrays(counts[rc], counts[Math.max(b, rd)]));\n        if (c > rb)\n          leftRangeCount =\n              subtractArrays(leftRangeCount, subtractArrays(counts[Math.min(c, ra)], counts[rb]));\n        if (ra > d)\n          leftRangeCount =\n              subtractArrays(leftRangeCount, subtractArrays(counts[ra], counts[Math.max(d, rb)]));\n        ans[i] = Arrays.stream(leftRangeCount).allMatch(freq -> freq >= 0) &&\n                 Arrays.stream(rightRangeCount).allMatch(freq -> freq >= 0) &&\n                 Arrays.equals(leftRangeCount, rightRangeCount);\n      }\n    }\n\n    return ans;\n  }\n\n  private int[] getMirroredDiffs(final String s) {\n    int[] diffs = new int[s.length() / 2 + 1];\n    for (int i = 0, j = s.length() - 1; i < j; i++, j--) {\n      diffs[i + 1] = diffs[i] + (s.charAt(i) != s.charAt(j) ? 1 : 0);\n    }\n    return diffs;\n  }\n\n  private int[][] getCounts(final String s) {\n    int[][] counts = new int[s.length() + 1][26];\n    int[] count = new int[26];\n    for (int i = 0; i < s.length(); ++i) {\n      ++count[s.charAt(i) - 'a'];\n      System.arraycopy(count, 0, counts[i + 1], 0, 26);\n    }\n    return counts;\n  }\n\n  private int[] subtractArrays(int[] a, int[] b) {\n    int[] res = new int[a.length];\n    for (int i = 0; i < a.length; ++i)\n      res[i] = a[i] - b[i];\n    return res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canMakePalindromeQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n    n = len(s)\n    # mirroredDiffs[i] := the number of different letters between the first i\n    # letters of s[0..n / 2) and the first i letters of s[n / 2..n)[::-1]\n    mirroredDiffs = self._getMirroredDiffs(s)\n    # counts[i] := the count of s[0..i)\n    counts = self._getCounts(s)\n    ans = []\n\n    def subtractArrays(a: List[int], b: List[int]):\n      return [x - y for x, y in zip(a, b)]\n\n    for a, b, c, d in queries:\n      # Use left-closed, right-open intervals to facilitate the calculation.\n      #   ...... [a, b) ...|... [rb, ra) ......\n      #   .... [rd, rc) .....|..... [c, d) ....\n      b += 1\n      d += 1\n      ra = n - a  # the reflected index of a in s[n / 2..n)\n      rb = n - b  # the reflected index of b in s[n / 2..n)\n      rc = n - c  # the reflected index of c in s[n / 2..n)\n      rd = n - d  # the reflected index of d in s[n / 2..n)\n      # No difference is allowed outside the query ranges.\n      if (min(a, rd) > 0 and mirroredDiffs[min(a, rd)] > 0) or \\\n         (n // 2 > max(b, rc) and mirroredDiffs[n // 2] - mirroredDiffs[max(b, rc)] > 0) or \\\n         (rd > b and mirroredDiffs[rd] - mirroredDiffs[b] > 0) or \\\n         (a > rc and mirroredDiffs[a] - mirroredDiffs[rc] > 0):\n        ans.append(False)\n      else:\n        # The `count` map of the intersection of [a, b) and [rd, rc) in\n        # s[0..n / 2) must equate to the `count` map of the intersection of\n        # [c, d) and [rb, ra) in s[n / 2..n).\n        leftRangeCount = subtractArrays(counts[b], counts[a])\n        rightRangeCount = subtractArrays(counts[d], counts[c])\n        if a > rd:\n          rightRangeCount = subtractArrays(\n              rightRangeCount, subtractArrays(counts[min(a, rc)], counts[rd]))\n        if rc > b:\n          rightRangeCount = subtractArrays(\n              rightRangeCount, subtractArrays(counts[rc], counts[max(b, rd)]))\n        if c > rb:\n          leftRangeCount = subtractArrays(\n              leftRangeCount, subtractArrays(counts[min(c, ra)], counts[rb]))\n        if ra > d:\n          leftRangeCount = subtractArrays(\n              leftRangeCount, subtractArrays(counts[ra], counts[max(d, rb)]))\n        ans.append(min(leftRangeCount) >= 0\n                   and min(rightRangeCount) >= 0\n                   and leftRangeCount == rightRangeCount)\n\n    return ans\n\n  def _getMirroredDiffs(self, s: str) -> List[int]:\n    diffs = [0]\n    for i, j in zip(range(len(s)), reversed(range(len(s)))):\n      if i >= j:\n        break\n      diffs.append(diffs[-1] + (s[i] != s[j]))\n    return diffs\n\n  def _getCounts(self, s: str) -> List[List[int]]:\n    count = [0] * 26\n    counts = [count.copy()]\n    for c in s:\n      count[ord(c) - ord('a')] += 1\n      counts.append(count.copy())\n    return counts\n",
                "lang_text": "py"
            }
        }
    }
}