{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1494",
            "title": "Parallel Courses II",
            "titleSlug": "parallel-courses-ii",
            "content": "<p>You are given an integer <code>n</code>, which indicates that there are <code>n</code> courses labeled from <code>1</code> to <code>n</code>. You are also given an array <code>relations</code> where <code>relations[i] = [prevCourse<sub>i</sub>, nextCourse<sub>i</sub>]</code>, representing a prerequisite relationship between course <code>prevCourse<sub>i</sub></code> and course <code>nextCourse<sub>i</sub></code>: course <code>prevCourse<sub>i</sub></code> has to be taken before course <code>nextCourse<sub>i</sub></code>. Also, you are given the integer <code>k</code>.</p>\n\n<p>In one semester, you can take <strong>at most</strong> <code>k</code> courses as long as you have taken all the prerequisites in the <strong>previous</strong> semesters for the courses you are taking.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of semesters needed to take all courses</em>. The testcases will be generated such that it is possible to take every course.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_1.png\" style=\"width: 269px; height: 147px;\" />\n<pre>\n<strong>Input:</strong> n = 4, relations = [[2,1],[3,1],[1,4]], k = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3.\nIn the second semester, you can take course 1.\nIn the third semester, you can take course 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_2.png\" style=\"width: 271px; height: 211px;\" />\n<pre>\n<strong>Input:</strong> n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The figure above represents the given graph.\nIn the first semester, you can only take courses 2 and 3 since you cannot take more than two per semester.\nIn the second semester, you can take course 4.\nIn the third semester, you can take course 1.\nIn the fourth semester, you can take course 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 15</code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n\t<li><code>0 &lt;= relations.length &lt;= n * (n-1) / 2</code></li>\n\t<li><code>relations[i].length == 2</code></li>\n\t<li><code>1 &lt;= prevCourse<sub>i</sub>, nextCourse<sub>i</sub> &lt;= n</code></li>\n\t<li><code>prevCourse<sub>i</sub> != nextCourse<sub>i</sub></code></li>\n\t<li>All the pairs <code>[prevCourse<sub>i</sub>, nextCourse<sub>i</sub>]</code> are <strong>unique</strong>.</li>\n\t<li>The given graph is a directed acyclic graph.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 978,
            "dislikes": 67,
            "similarQuestions": "[{\"title\": \"Parallel Courses\", \"titleSlug\": \"parallel-courses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.9K\", \"totalSubmission\": \"56.6K\", \"totalAcceptedRaw\": 16869, \"totalSubmissionRaw\": 56553, \"acRate\": \"29.8%\"}",
            "hints": [
                "Use backtracking with states (bitmask, degrees) where bitmask represents the set of courses, if the ith bit is 1 then the ith course was taken, otherwise, you can take the ith course. Degrees represent the degree for each course (nodes in the graph).",
                "Note that you can only take nodes (courses) with degree = 0 and it is optimal at every step in the backtracking take the maximum number of courses limited by k."
            ],
            "rephrased": {
                "body": "You are given an integer `n` representing the number of courses labeled from 1 to `n`. You are also given an array `relations` where `relations[i] = [prevCourse_i, nextCourse_i]` indicates that `prevCourse_i` must be taken before `nextCourse_i`.  Additionally, you are given an integer `k`, representing the maximum number of courses you can take in one semester.  The goal is to determine the minimum number of semesters required to take all `n` courses, adhering to the prerequisites and the semester course limit. The testcases are guaranteed to ensure a solution exists.",
                "constraints": [
                    "1 <= n <= 15",
                    "1 <= k <= n",
                    "0 <= relations.length <= n * (n-1) / 2",
                    "relations[i].length == 2",
                    "1 <= prevCourse_i, nextCourse_i <= n",
                    "prevCourse_i != nextCourse_i",
                    "All the pairs [prevCourse_i, nextCourse_i] are unique.",
                    "The given graph is a directed acyclic graph."
                ],
                "testcases": [
                    {
                        "input": "n = 4, relations = [[2,1],[3,1],[1,4]], k = 2",
                        "output": "3",
                        "explanation": "In the first semester, you can take courses 2 and 3. In the second semester, you can take course 1. In the third semester, you can take course 4. Therefore, it takes 3 semesters in total."
                    },
                    {
                        "input": "n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k = 2",
                        "output": "4",
                        "explanation": "In the first semester, you can only take courses 2 and 3 since you cannot take more than two per semester. In the second semester, you can take course 4. In the third semester, you can take course 1. In the fourth semester, you can take course 5."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "parallel-courses",
                "title": "Parallel Courses",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Use backtracking with states (bitmask, degrees) where bitmask represents the set of courses, if the ith bit is 1 then the ith course was taken, otherwise, you can take the ith course. Degrees represent the degree for each course (nodes in the graph).",
            "Note that you can only take nodes (courses) with degree = 0 and it is optimal at every step in the backtracking take the maximum number of courses limited by k."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minNumberOfSemesters(int n, vector<vector<int>>& relations, int k) {\n    // dp[i] := min # of semesters to take all courses in mask i\n    vector<int> dp(1 << n, n);\n    // prereq[i] := bit mask of all dependencies of course i\n    vector<int> prereq(n);\n\n    for (const vector<int>& r : relations) {\n      const int prevCourse = r[0] - 1;\n      const int nextCourse = r[1] - 1;\n      prereq[nextCourse] |= 1 << prevCourse;\n    }\n\n    dp[0] = 0;  // No need time to finish 0 course\n\n    for (int i = 0; i < dp.size(); ++i) {\n      // Bit mask of all the courses can be taken.\n      int coursesCanBeTaken = 0;\n      // Can take course j if i contains all j's prerequisites.\n      for (int j = 0; j < n; ++j)\n        if (i & prereq[j] == prereq[j])\n          coursesCanBeTaken |= 1 << j;\n      // Don't take any course which is already taken.\n      // (i represents set of courses that are already taken)\n      coursesCanBeTaken &= ~i;\n      // Enumerate all bit subset of `coursesCanBeTaken`.\n      for (int s = coursesCanBeTaken; s; s = (s - 1) & coursesCanBeTaken)\n        if (__builtin_popcount(s) <= k)\n          // Any combination of courses (if <= k) can be taken now.\n          // i | s := combining courses taken with courses can be taken.\n          dp[i | s] = min(dp[i | s], dp[i] + 1);\n    }\n\n    return dp.back();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minNumberOfSemesters(int n, int[][] relations, int k) {\n    // dp[i] := min # of semesters to take all courses in mask i\n    int[] dp = new int[1 << n];\n    Arrays.fill(dp, n);\n    // prereq[i] := bit mask of all dependencies of course i\n    int[] prereq = new int[n];\n\n    for (int[] r : relations) {\n      final int prevCourse = r[0] - 1;\n      final int nextCourse = r[1] - 1;\n      prereq[nextCourse] |= 1 << prevCourse;\n    }\n\n    dp[0] = 0; // No need time to finish 0 course.\n\n    for (int i = 0; i < dp.length; ++i) {\n      // Bit mask of all the courses can be taken.\n      int coursesCanBeTaken = 0;\n      // Can take course j if i contains all j's prerequisites.\n      for (int j = 0; j < n; ++j)\n        if (i & prereq[j] == prereq[j])\n          coursesCanBeTaken |= 1 << j;\n      // Don't take any course which is already taken.\n      // (i represents set of courses that are already taken)\n      coursesCanBeTaken &= ~i;\n      // Enumerate all bit subset of `coursesCanBeTaken`.\n      for (int s = coursesCanBeTaken; s > 0; s = (s - 1) & coursesCanBeTaken)\n        if (Integer.bitCount(s) <= k)\n          // Any combination of courses (if <= k) can be taken now.\n          // i | s := combining courses taken with courses can be taken.\n          dp[i | s] = Math.min(dp[i | s], dp[i] + 1);\n    }\n\n    return dp[(1 << n) - 1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:\n    # dp[i] := min # of semesters to take all courses in mask i\n    dp = [n] * (1 << n)\n    # prereq[i] := bit mask of all dependencies of course i\n    prereq = [0] * n\n\n    for prevCourse, nextCourse in relations:\n      prereq[nextCourse - 1] |= 1 << prevCourse - 1\n\n    dp[0] = 0  # No need time to finish 0 course.\n\n    for i in range(1 << n):\n      # Bit mask of all the courses can be taken.\n      coursesCanBeTaken = 0\n      # Can take course j if i contains all j's prerequisites.\n      for j in range(n):\n        if (i & prereq[j]) == prereq[j]:\n          coursesCanBeTaken |= 1 << j\n      # Don't take any course which is already taken.\n      # (i represents set of courses that are already taken)\n      coursesCanBeTaken &= ~i\n      # Enumerate all bit subset of `coursesCanBeTaken`.\n      s = coursesCanBeTaken\n      while s:\n        if bin(s).count('1') <= k:\n          # Any combination of courses (if <= k) can be taken now.\n          # i | s := combining courses taken with courses can be taken.\n          dp[i | s] = min(dp[i | s], dp[i] + 1)\n        s = (s - 1) & coursesCanBeTaken\n\n    return dp[-1]\n",
                "lang_text": "py"
            }
        }
    }
}