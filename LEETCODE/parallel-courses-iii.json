{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2050",
            "title": "Parallel Courses III",
            "titleSlug": "parallel-courses-iii",
            "content": "<p>You are given an integer <code>n</code>, which indicates that there are <code>n</code> courses labeled from <code>1</code> to <code>n</code>. You are also given a 2D integer array <code>relations</code> where <code>relations[j] = [prevCourse<sub>j</sub>, nextCourse<sub>j</sub>]</code> denotes that course <code>prevCourse<sub>j</sub></code> has to be completed <strong>before</strong> course <code>nextCourse<sub>j</sub></code> (prerequisite relationship). Furthermore, you are given a <strong>0-indexed</strong> integer array <code>time</code> where <code>time[i]</code> denotes how many <strong>months</strong> it takes to complete the <code>(i+1)<sup>th</sup></code> course.</p>\n\n<p>You must find the <strong>minimum</strong> number of months needed to complete all the courses following these rules:</p>\n\n<ul>\n\t<li>You may start taking a course at <strong>any time</strong> if the prerequisites are met.</li>\n\t<li><strong>Any number of courses</strong> can be taken at the <strong>same time</strong>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of months needed to complete all the courses</em>.</p>\n\n<p><strong>Note:</strong> The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/07/ex1.png\" style=\"width: 392px; height: 232px;\" /></strong>\n\n<pre>\n<strong>Input:</strong> n = 3, relations = [[1,3],[2,3]], time = [3,2,5]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The figure above represents the given graph and the time required to complete each course. \nWe start course 1 and course 2 simultaneously at month 0.\nCourse 1 takes 3 months and course 2 takes 2 months to complete respectively.\nThus, the earliest time we can start course 3 is at month 3, and the total time required is 3 + 5 = 8 months.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/07/ex2.png\" style=\"width: 500px; height: 365px;\" /></strong>\n\n<pre>\n<strong>Input:</strong> n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The figure above represents the given graph and the time required to complete each course.\nYou can start courses 1, 2, and 3 at month 0.\nYou can complete them after 1, 2, and 3 months respectively.\nCourse 4 can be taken only after course 3 is completed, i.e., after 3 months. It is completed after 3 + 4 = 7 months.\nCourse 5 can be taken only after courses 1, 2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 months.\nThus, the minimum time needed to complete all the courses is 7 + 5 = 12 months.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= relations.length &lt;= min(n * (n - 1) / 2, 5 * 10<sup>4</sup>)</code></li>\n\t<li><code>relations[j].length == 2</code></li>\n\t<li><code>1 &lt;= prevCourse<sub>j</sub>, nextCourse<sub>j</sub> &lt;= n</code></li>\n\t<li><code>prevCourse<sub>j</sub> != nextCourse<sub>j</sub></code></li>\n\t<li>All the pairs <code>[prevCourse<sub>j</sub>, nextCourse<sub>j</sub>]</code> are <strong>unique</strong>.</li>\n\t<li><code>time.length == n</code></li>\n\t<li><code>1 &lt;= time[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>The given graph is a directed acyclic graph.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1432,
            "dislikes": 38,
            "similarQuestions": "[{\"title\": \"Course Schedule III\", \"titleSlug\": \"course-schedule-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Parallel Courses\", \"titleSlug\": \"parallel-courses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Single-Threaded CPU\", \"titleSlug\": \"single-threaded-cpu\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Process Tasks Using Servers\", \"titleSlug\": \"process-tasks-using-servers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Employees to Be Invited to a Meeting\", \"titleSlug\": \"maximum-employees-to-be-invited-to-a-meeting\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"71.1K\", \"totalSubmission\": \"104.5K\", \"totalAcceptedRaw\": 71067, \"totalSubmissionRaw\": 104511, \"acRate\": \"68.0%\"}",
            "hints": [
                "What is the earliest time a course can be taken?",
                "How would you solve the problem if all courses take equal time?",
                "How would you generalize this approach?"
            ],
            "rephrased": {
                "body": "Given an integer `n` representing `n` courses labeled from 1 to `n`, and a 2D integer array `relations` where `relations[j] = [prevCourse_j, nextCourse_j]` indicates `prevCourse_j` must be completed before `nextCourse_j`. You are also given a 0-indexed integer array `time` where `time[i]` is the time (in months) to complete the (i+1)th course. Determine the minimum number of months required to complete all courses, considering you can start courses at any time if prerequisites are met, and any number of courses can be taken simultaneously. The input guarantees a directed acyclic graph.",
                "constraints": [
                    "1 <= n <= 5 * 10^4",
                    "0 <= relations.length <= min(n * (n - 1) / 2, 5 * 10^4)",
                    "relations[j].length == 2",
                    "1 <= prevCourse_j, nextCourse_j <= n",
                    "prevCourse_j != nextCourse_j",
                    "All pairs [prevCourse_j, nextCourse_j] are unique",
                    "time.length == n",
                    "1 <= time[i] <= 10^4",
                    "The given graph is a directed acyclic graph"
                ],
                "testcases": [
                    {
                        "input": "n = 3, relations = [[1,3],[2,3]], time = [3,2,5]",
                        "output": "8",
                        "explanation": "Courses 1 and 2 can be started at month 0. Course 1 takes 3 months, and course 2 takes 2 months. Therefore, course 3 can start after 3 months (max of 3 and 2). The total time is 3 (for course 1) + 5 (for course 3) = 8 or 2 (for course 2) + 5 (for course 3) = 7  , max(3,2) + 5 = 8."
                    },
                    {
                        "input": "n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]",
                        "output": "12",
                        "explanation": "Courses 1, 2, and 3 can start at month 0. Course 4 depends on course 3 and finishes at month 3 + 4 = 7. Course 5 depends on courses 1, 2, 3, and 4, so it starts at max(1, 2, 3, 7) = 7. Therefore, the total time is 7 + 5 = 12."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "course-schedule-iii",
                "title": "Course Schedule III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "parallel-courses",
                "title": "Parallel Courses",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "single-threaded-cpu",
                "title": "Single-Threaded CPU",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "process-tasks-using-servers",
                "title": "Process Tasks Using Servers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-employees-to-be-invited-to-a-meeting",
                "title": "Maximum Employees to Be Invited to a Meeting",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What is the earliest time a course can be taken?",
            "How would you solve the problem if all courses take equal time?",
            "How would you generalize this approach?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            }
        ]
    }
}