{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1106",
            "title": "Parsing A Boolean Expression",
            "titleSlug": "parsing-a-boolean-expression",
            "content": "<p>A <strong>boolean expression</strong> is an expression that evaluates to either <code>true</code> or <code>false</code>. It can be in one of the following shapes:</p>\n\n<ul>\n\t<li><code>&#39;t&#39;</code> that evaluates to <code>true</code>.</li>\n\t<li><code>&#39;f&#39;</code> that evaluates to <code>false</code>.</li>\n\t<li><code>&#39;!(subExpr)&#39;</code> that evaluates to <strong>the logical NOT</strong> of the inner expression <code>subExpr</code>.</li>\n\t<li><code>&#39;&amp;(subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub>)&#39;</code> that evaluates to <strong>the logical AND</strong> of the inner expressions <code>subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub></code> where <code>n &gt;= 1</code>.</li>\n\t<li><code>&#39;|(subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub>)&#39;</code> that evaluates to <strong>the logical OR</strong> of the inner expressions <code>subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub></code> where <code>n &gt;= 1</code>.</li>\n</ul>\n\n<p>Given a string <code>expression</code> that represents a <strong>boolean expression</strong>, return <em>the evaluation of that expression</em>.</p>\n\n<p>It is <strong>guaranteed</strong> that the given expression is valid and follows the given rules.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;&amp;(|(f))&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> \nFirst, evaluate |(f) --&gt; f. The expression is now &quot;&amp;(f)&quot;.\nThen, evaluate &amp;(f) --&gt; f. The expression is now &quot;f&quot;.\nFinally, return false.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;|(f,f,f,t)&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The evaluation of (false OR false OR false OR true) is true.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;!(&amp;(f,t))&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nFirst, evaluate &amp;(f,t) --&gt; (false AND true) --&gt; false --&gt; f. The expression is now &quot;!(f)&quot;.\nThen, evaluate !(f) --&gt; NOT false --&gt; true. We return true.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li>expression[i] is one following characters: <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;&amp;&#39;</code>, <code>&#39;|&#39;</code>, <code>&#39;!&#39;</code>, <code>&#39;t&#39;</code>, <code>&#39;f&#39;</code>, and <code>&#39;,&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1097,
            "dislikes": 54,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.2K\", \"totalSubmission\": \"46.4K\", \"totalAcceptedRaw\": 27230, \"totalSubmissionRaw\": 46351, \"acRate\": \"58.7%\"}",
            "hints": [
                "Write a function \"parse\" which calls helper functions \"parse_or\", \"parse_and\", \"parse_not\"."
            ],
            "rephrased": {
                "body": "Given a boolean expression represented as a string, evaluate the expression and return its boolean value (true or false). The expression can take the following forms:\n\n*   `'t'` (true)\n*   `'f'` (false)\n*   `'!(subExpr)'` (logical NOT of subExpr)\n*   `'&(subExpr1, subExpr2, ..., subExprn)'` (logical AND of subExpr1, subExpr2, ..., subExprn, where n >= 1)\n*   `'|(subExpr1, subExpr2, ..., subExprn)'` (logical OR of subExpr1, subExpr2, ..., subExprn, where n >= 1)",
                "constraints": [
                    "1 <= expression.length <= 2 * 10^4",
                    "expression[i] is one following characters: '(', ')', '&', '|', '!', 't', 'f', and ','."
                ],
                "testcases": [
                    {
                        "input": "\"&(|(f))\"",
                        "output": "false",
                        "explanation": "The expression is evaluated as follows:\n1.  `|(f)` evaluates to `f` (false).\n2.  `&(f)` evaluates to `f` (false).\nTherefore, the result is `false`."
                    },
                    {
                        "input": "\"|(f,f,f,t)\"",
                        "output": "true",
                        "explanation": "The expression is evaluated as the logical OR of `f, f, f, t`, which results in `t` (true)."
                    },
                    {
                        "input": "\"!(&(f,t))\"",
                        "output": "true",
                        "explanation": "The expression is evaluated as follows:\n1.  `&(f,t)` evaluates to `f` (false) because the AND of false and true is false.\n2.  `!(f)` evaluates to `t` (true) because the NOT of false is true.\nTherefore, the result is `true`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Write a function \"parse\" which calls helper functions \"parse_or\", \"parse_and\", \"parse_not\"."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool parseBoolExpr(string expression) {\n    int i = 0;\n    return parse(expression, i);\n  }\n\n private:\n  bool parse(const string& exp, int& i) {\n    if (exp[i] == 't') {\n      ++i;\n      return true;\n    }\n    if (exp[i] == 'f') {\n      ++i;\n      return false;\n    }\n    if (exp[i] == '!') {\n      i += 2;\n      bool ans = !parse(exp, i);\n      ++i;\n      return ans;\n    }\n\n    bool isAnd = exp[i] == '&';\n    bool ans = isAnd;\n    i += 2;\n    while (exp[i] != ')') {\n      bool parsed = parse(exp, i);\n      if (isAnd)\n        ans &= parsed;\n      else\n        ans |= parsed;\n      if (exp[i] == ',')\n        ++i;\n    }\n    ++i;\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean parseBoolExpr(String expression) {\n    return dfs(expression, 0, expression.length() - 1);\n  }\n\n  private boolean dfs(final String expression, int s, int e) {\n    if (s == e)\n      return expression.charAt(s) == 't';\n\n    List<Boolean> exps = new ArrayList<>();\n    int layer = 0;\n    int left = 0;\n    char op = ' ';\n\n    for (int i = s; i <= e; ++i) {\n      char c = expression.charAt(i);\n      if (layer == 0 && (c == '!' || c == '&' || c == '|'))\n        op = c;\n      else if (c == '(' && ++layer == 1)\n        left = i + 1;\n      else if (c == ')' && --layer == 0)\n        exps.add(dfs(expression, left, i - 1));\n      else if (c == ',' && layer == 1) {\n        exps.add(dfs(expression, left, i - 1));\n        left = i + 1;\n      }\n    }\n\n    if (op == '&') {\n      boolean ans = true;\n      for (boolean exp : exps)\n        ans &= exp;\n      return ans;\n    }\n\n    if (op == '|') {\n      boolean ans = false;\n      for (boolean exp : exps)\n        ans |= exp;\n      return ans;\n    }\n\n    return !exps.get(0);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def parseBoolExpr(self, expression: str) -> bool:\n    def dfs(s: int, e: int) -> List[str]:\n      if s == e:\n        return True if expression[s] == 't' else False\n\n      exps = []\n      layer = 0\n\n      for i in range(s, e + 1):\n        c = expression[i]\n        if layer == 0 and c in '!&|':\n          op = c\n        elif c == '(':\n          layer += 1\n          if layer == 1:\n            left = i + 1\n        elif c == ')':\n          layer -= 1\n          if layer == 0:\n            exps.append(dfs(left, i - 1))\n        elif c == ',' and layer == 1:\n          exps.append(dfs(left, i - 1))\n          left = i + 1\n\n      if op == '|':\n        return functools.reduce(lambda x, y: x | y, exps)\n      if op == '&':\n        return functools.reduce(lambda x, y: x & y, exps)\n      if op == '!':\n        return not exps[0]\n\n    return dfs(0, len(expression) - 1)\n",
                "lang_text": "py"
            }
        }
    }
}