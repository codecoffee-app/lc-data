{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1043",
            "title": "Partition Array for Maximum Sum",
            "titleSlug": "partition-array-for-maximum-sum",
            "content": "<p>Given an integer array <code>arr</code>, partition the array into (contiguous) subarrays of length <strong>at most</strong> <code>k</code>. After partitioning, each subarray has their values changed to become the maximum value of that subarray.</p>\n\n<p>Return <em>the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,15,7,9,2,5,10], k = 3\n<strong>Output:</strong> 84\n<strong>Explanation:</strong> arr becomes [15,15,15,9,10,10,10]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\n<strong>Output:</strong> 83\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1], k = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 500</code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= arr.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3710,
            "dislikes": 248,
            "similarQuestions": "[{\"title\": \"Subsequence of Size K With the Largest Even Sum\", \"titleSlug\": \"subsequence-of-size-k-with-the-largest-even-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Partition String Into Minimum Beautiful Substrings\", \"titleSlug\": \"partition-string-into-minimum-beautiful-substrings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"90.1K\", \"totalSubmission\": \"124.5K\", \"totalAcceptedRaw\": 90116, \"totalSubmissionRaw\": 124520, \"acRate\": \"72.4%\"}",
            "hints": [
                "Think dynamic programming:  dp[i] will be the answer for array A[0], ..., A[i-1].",
                "For j = 1 .. k that keeps everything in bounds, dp[i] is the maximum of dp[i-j] + max(A[i-1], ..., A[i-j]) * j ."
            ],
            "rephrased": {
                "body": "Given an integer array `arr`, partition it into contiguous subarrays of length at most `k`. After partitioning, each subarray's values are changed to the maximum value within that subarray.\n\nReturn the largest possible sum of the array after this partitioning.",
                "constraints": [
                    "1 <= arr.length <= 500",
                    "0 <= arr[i] <= 10<sup>9</sup>",
                    "1 <= k <= arr.length"
                ],
                "testcases": [
                    {
                        "input": "arr = [1,15,7,9,2,5,10], k = 3",
                        "output": "84",
                        "explanation": "The array is partitioned into [1, 15, 7], [9, 2, 5], and [10]. These subarrays become [15, 15, 15], [9, 9, 9], and [10]. The sum is 15*3 + 9*3 + 10 = 45 + 27 + 10 = 84."
                    },
                    {
                        "input": "arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4",
                        "output": "83",
                        "explanation": null
                    },
                    {
                        "input": "arr = [1], k = 1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "subsequence-of-size-k-with-the-largest-even-sum",
                "title": "Subsequence of Size K With the Largest Even Sum",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "partition-string-into-minimum-beautiful-substrings",
                "title": "Partition String Into Minimum Beautiful Substrings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think dynamic programming:  dp[i] will be the answer for array A[0], ..., A[i-1].",
            "For j = 1 .. k that keeps everything in bounds, dp[i] is the maximum of dp[i-j] + max(A[i-1], ..., A[i-j]) * j ."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxSumAfterPartitioning(vector<int>& arr, int k) {\n    const int n = arr.size();\n    vector<int> dp(n + 1);\n\n    for (int i = 1; i <= n; ++i) {\n      int maxi = INT_MIN;\n      for (int j = 1; j <= min(i, k); ++j) {\n        maxi = max(maxi, arr[i - j]);\n        dp[i] = max(dp[i], dp[i - j] + maxi * j);\n      }\n    }\n\n    return dp[n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxSumAfterPartitioning(int[] arr, int k) {\n    final int n = arr.length;\n    int[] dp = new int[n + 1];\n\n    for (int i = 1; i <= n; ++i) {\n      int max = Integer.MIN_VALUE;\n      for (int j = 1; j <= Math.max(i, k); ++j) {\n        max = Math.max(max, arr[i - j]);\n        dp[i] = Math.max(dp[i], dp[i - j] + max * j);\n      }\n    }\n\n    return dp[n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:\n    n = len(arr)\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n      maxi = -math.inf\n      for j in range(1, min(i, k) + 1):\n        maxi = max(maxi, arr[i - j])\n        dp[i] = max(dp[i], dp[i - j] + maxi * j)\n\n    return dp[n]\n",
                "lang_text": "py"
            }
        }
    }
}