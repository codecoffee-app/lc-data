{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "915",
            "title": "Partition Array into Disjoint Intervals",
            "titleSlug": "partition-array-into-disjoint-intervals",
            "content": "<p>Given an integer array <code>nums</code>, partition it into two (contiguous) subarrays <code>left</code> and <code>right</code> so that:</p>\n\n<ul>\n\t<li>Every element in <code>left</code> is less than or equal to every element in <code>right</code>.</li>\n\t<li><code>left</code> and <code>right</code> are non-empty.</li>\n\t<li><code>left</code> has the smallest possible size.</li>\n</ul>\n\n<p>Return <em>the length of </em><code>left</code><em> after such a partitioning</em>.</p>\n\n<p>Test cases are generated such that partitioning exists.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,0,3,8,6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> left = [5,0,3], right = [8,6]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,0,6,12]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> left = [1,1,1,0], right = [6,12]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>There is at least one valid answer for the given input.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1614,
            "dislikes": 76,
            "similarQuestions": "[{\"title\": \"Sum of Beauty in the Array\", \"titleSlug\": \"sum-of-beauty-in-the-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Optimal Partition of String\", \"titleSlug\": \"optimal-partition-of-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Index of a Valid Split\", \"titleSlug\": \"minimum-index-of-a-valid-split\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                }
            ],
            "stats": "{\"totalAccepted\": \"80K\", \"totalSubmission\": \"164.1K\", \"totalAcceptedRaw\": 80009, \"totalSubmissionRaw\": 164123, \"acRate\": \"48.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, find the smallest possible length of a contiguous subarray `left` such that all elements in `left` are less than or equal to all elements in the remaining contiguous subarray `right`. Both `left` and `right` must be non-empty.",
                "constraints": [
                    "2 <= nums.length <= 10^5",
                    "0 <= nums[i] <= 10^6",
                    "There is at least one valid answer for the given input."
                ],
                "testcases": [
                    {
                        "input": "[5,0,3,8,6]",
                        "output": "3",
                        "explanation": "The subarray `left` = [5,0,3] and `right` = [8,6] satisfy the condition that all elements in `left` are less than or equal to all elements in `right`. The length of `left` is 3."
                    },
                    {
                        "input": "[1,1,1,0,6,12]",
                        "output": "4",
                        "explanation": "The subarray `left` = [1,1,1,0] and `right` = [6,12] satisfy the condition that all elements in `left` are less than or equal to all elements in `right`. The length of `left` is 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "sum-of-beauty-in-the-array",
                "title": "Sum of Beauty in the Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "optimal-partition-of-string",
                "title": "Optimal Partition of String",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-index-of-a-valid-split",
                "title": "Minimum Index of a Valid Split",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int partitionDisjoint(vector<int>& nums) {\n    const int n = nums.size();\n    vector<int> min(n);\n    min[n - 1] = nums[n - 1];\n    int max = INT_MIN;\n\n    for (int i = n - 2; i >= 0; --i)\n      min[i] = std::min(min[i + 1], nums[i]);\n\n    for (int i = 0; i < n; ++i) {\n      max = std::max(max, nums[i]);\n      if (max <= min[i + 1])\n        return i + 1;\n    }\n\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int partitionDisjoint(int[] nums) {\n    final int n = nums.length;\n    int[] min = new int[n];\n    min[n - 1] = nums[n - 1];\n    int max = Integer.MIN_VALUE;\n\n    for (int i = n - 2; i >= 0; --i)\n      min[i] = Math.min(min[i + 1], nums[i]);\n\n    for (int i = 0; i < n; ++i) {\n      max = Math.max(max, nums[i]);\n      if (max <= min[i + 1])\n        return i + 1;\n    }\n\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def partitionDisjoint(self, nums: List[int]) -> int:\n    n = len(nums)\n    mini = [0] * (n - 1) + [nums[-1]]\n    maxi = -math.inf\n\n    for i in range(n - 2, - 1, -1):\n      mini[i] = min(mini[i + 1], nums[i])\n\n    for i, num in enumerate(nums):\n      maxi = max(maxi, num)\n      if maxi <= mini[i + 1]:\n        return i + 1\n",
                "lang_text": "py"
            }
        }
    }
}