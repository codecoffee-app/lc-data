{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1013",
            "title": "Partition Array Into Three Parts With Equal Sum",
            "titleSlug": "partition-array-into-three-parts-with-equal-sum",
            "content": "<p>Given an array of integers <code>arr</code>, return <code>true</code> if we can partition the array into three <strong>non-empty</strong> parts with equal sums.</p>\n\n<p>Formally, we can partition the array if we can find indexes <code>i + 1 &lt; j</code> with <code>(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])</code></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,2,1,-6,6,-7,9,1,2,0,1]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,2,1,-6,6,7,9,-1,2,0,1]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,3,6,5,-2,2,5,1,-9,4]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1660,
            "dislikes": 152,
            "similarQuestions": "[{\"title\": \"Find the Middle Index in Array\", \"titleSlug\": \"find-the-middle-index-in-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"87.5K\", \"totalSubmission\": \"207.7K\", \"totalAcceptedRaw\": 87457, \"totalSubmissionRaw\": 207740, \"acRate\": \"42.1%\"}",
            "hints": [
                "If we have three parts with the same sum, what is the sum of each?\r\nIf you can find the first part, can you find the second part?"
            ],
            "rephrased": {
                "body": "Given an array of integers `arr`, determine if it can be partitioned into three non-empty subarrays, each having the same sum.  Formally, the array can be partitioned if indices `i + 1 < j` exist such that the sum of elements from index 0 to `i` equals the sum of elements from index `i + 1` to `j - 1`, which also equals the sum of elements from index `j` to the end of the array.",
                "constraints": [
                    "3 <= arr.length <= 5 * 10^4",
                    "-10^4 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[0,2,1,-6,6,-7,9,1,2,0,1]",
                        "output": "true",
                        "explanation": "The array can be partitioned into [0, 2, 1], [-6, 6, -7, 9, 1], and [2, 0, 1], where each subarray sums to 3."
                    },
                    {
                        "input": "[0,2,1,-6,6,7,9,-1,2,0,1]",
                        "output": "false",
                        "explanation": "No such partition exists where the array can be divided into three non-empty subarrays with equal sums."
                    },
                    {
                        "input": "[3,3,6,5,-2,2,5,1,-9,4]",
                        "output": "true",
                        "explanation": "The array can be partitioned into [3, 3], [6], and [5, -2, 2, 5, 1, -9, 4], where each subarray sums to 6."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "find-the-middle-index-in-array",
                "title": "Find the Middle Index in Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If we have three parts with the same sum, what is the sum of each?\r\nIf you can find the first part, can you find the second part?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canThreePartsEqualSum(vector<int>& arr) {\n    const int sum = accumulate(arr.begin(), arr.end(), 0);\n    if (sum % 3 != 0)\n      return false;\n\n    const int average = sum / 3;\n    int partCount = 0;\n    int partSum = 0;\n\n    for (const int a : arr) {\n      partSum += a;\n      if (partSum == average) {\n        ++partCount;\n        partSum = 0;\n      }\n    }\n\n    // Edge case: arr = [0, 0, 0, 0] -> partCount = 4.\n    return partCount >= 3;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canThreePartsEqualSum(int[] arr) {\n    final int sum = Arrays.stream(arr).sum();\n    if (sum % 3 != 0)\n      return false;\n\n    final int average = sum / 3;\n    int partCount = 0;\n    int partSum = 0;\n\n    for (final int a : arr) {\n      partSum += a;\n      if (partSum == average) {\n        ++partCount;\n        partSum = 0;\n      }\n    }\n\n    // Edge case: arr = [0, 0, 0, 0] -> partCount = 4.\n    return partCount >= 3;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canThreePartsEqualSum(self, arr: List[int]) -> bool:\n    summ = sum(arr)\n    if summ % 3 != 0:\n      return False\n\n    average = summ // 3\n    partCount = 0\n    partSum = 0\n\n    for a in arr:\n      partSum += a\n      if partSum == average:\n        partCount += 1\n        partSum = 0\n\n    # Edge case: arr = [0, 0, 0, 0] . partCount = 4.\n    return partCount >= 3\n",
                "lang_text": "py"
            }
        }
    }
}