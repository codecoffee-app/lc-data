{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2035",
            "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
            "titleSlug": "partition-array-into-two-arrays-to-minimize-sum-difference",
            "content": "<p>You are given an integer array <code>nums</code> of <code>2 * n</code> integers. You need to partition <code>nums</code> into <strong>two</strong> arrays of length <code>n</code> to <strong>minimize the absolute difference</strong> of the <strong>sums</strong> of the arrays. To partition <code>nums</code>, put each element of <code>nums</code> into <strong>one</strong> of the two arrays.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible absolute difference</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"example-1\" src=\"https://assets.leetcode.com/uploads/2021/10/02/ex1.png\" style=\"width: 240px; height: 106px;\" />\n<pre>\n<strong>Input:</strong> nums = [3,9,7,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One optimal partition is: [3,9] and [7,3].\nThe absolute difference between the sums of the arrays is abs((3 + 9) - (7 + 3)) = 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-36,36]\n<strong>Output:</strong> 72\n<strong>Explanation:</strong> One optimal partition is: [-36] and [36].\nThe absolute difference between the sums of the arrays is abs((-36) - (36)) = 72.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"example-3\" src=\"https://assets.leetcode.com/uploads/2021/10/02/ex3.png\" style=\"width: 316px; height: 106px;\" />\n<pre>\n<strong>Input:</strong> nums = [2,-1,0,4,-2,-9]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> One optimal partition is: [2,4,-9] and [-1,0,-2].\nThe absolute difference between the sums of the arrays is abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 15</code></li>\n\t<li><code>nums.length == 2 * n</code></li>\n\t<li><code>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2751,
            "dislikes": 154,
            "similarQuestions": "[{\"title\": \"Partition Equal Subset Sum\", \"titleSlug\": \"partition-equal-subset-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split Array With Same Average\", \"titleSlug\": \"split-array-with-same-average\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Tallest Billboard\", \"titleSlug\": \"tallest-billboard\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Last Stone Weight II\", \"titleSlug\": \"last-stone-weight-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Fair Distribution of Cookies\", \"titleSlug\": \"fair-distribution-of-cookies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Closest Subsequence Sum\", \"titleSlug\": \"closest-subsequence-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Split Array\", \"titleSlug\": \"number-of-ways-to-split-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Sum of Squared Difference\", \"titleSlug\": \"minimum-sum-of-squared-difference\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split With Minimum Sum\", \"titleSlug\": \"split-with-minimum-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.8K\", \"totalSubmission\": \"104.6K\", \"totalAcceptedRaw\": 20750, \"totalSubmissionRaw\": 104573, \"acRate\": \"19.8%\"}",
            "hints": [
                "The target sum for the two partitions is sum(nums) / 2.",
                "Could you reduce the time complexity if you arbitrarily divide nums into two halves (two arrays)? Meet-in-the-Middle?",
                "For both halves, pre-calculate a 2D array where the kth index will store all possible sum values if only k elements from this half are added.",
                "For each sum of k elements in the first half, find the best sum of n-k elements in the second half such that the two sums add up to a value closest to the target sum from hint 1. These two subsets will form one array of the partition."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` of `2 * n` integers, partition it into two arrays of length `n`. The goal is to minimize the absolute difference between the sums of the two resulting arrays. Each element of `nums` must be placed into exactly one of the two arrays.",
                "constraints": [
                    "1 <= n <= 15",
                    "nums.length == 2 * n",
                    "-10<sup>7</sup> <= nums[i] <= 10<sup>7</sup>"
                ],
                "testcases": [
                    {
                        "input": "[3,9,7,3]",
                        "output": "2",
                        "explanation": "One optimal partition is: [3,9] and [7,3]. The absolute difference between the sums of the arrays is abs((3 + 9) - (7 + 3)) = 2."
                    },
                    {
                        "input": "[-36,36]",
                        "output": "72",
                        "explanation": "One optimal partition is: [-36] and [36]. The absolute difference between the sums of the arrays is abs((-36) - (36)) = 72."
                    },
                    {
                        "input": "[2,-1,0,4,-2,-9]",
                        "output": "0",
                        "explanation": "One optimal partition is: [2,4,-9] and [-1,0,-2]. The absolute difference between the sums of the arrays is abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "partition-equal-subset-sum",
                "title": "Partition Equal Subset Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "split-array-with-same-average",
                "title": "Split Array With Same Average",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "tallest-billboard",
                "title": "Tallest Billboard",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "last-stone-weight-ii",
                "title": "Last Stone Weight II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "fair-distribution-of-cookies",
                "title": "Fair Distribution of Cookies",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "closest-subsequence-sum",
                "title": "Closest Subsequence Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-ways-to-split-array",
                "title": "Number of Ways to Split Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-sum-of-squared-difference",
                "title": "Minimum Sum of Squared Difference",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "split-with-minimum-sum",
                "title": "Split With Minimum Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The target sum for the two partitions is sum(nums) / 2.",
            "Could you reduce the time complexity if you arbitrarily divide nums into two halves (two arrays)? Meet-in-the-Middle?",
            "For both halves, pre-calculate a 2D array where the kth index will store all possible sum values if only k elements from this half are added.",
            "For each sum of k elements in the first half, find the best sum of n-k elements in the second half such that the two sums add up to a value closest to the target sum from hint 1. These two subsets will form one array of the partition."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumDifference(vector<int>& nums) {\n    const int n = nums.size() / 2;\n    const int sum = accumulate(nums.begin(), nums.end(), 0);\n    const int goal = sum / 2;\n    const vector<int> lNums(nums.begin(), nums.begin() + n);\n    const vector<int> rNums(nums.begin() + n, nums.end());\n    int ans = INT_MAX;\n    vector<vector<int>> lSums(n + 1);\n    vector<vector<int>> rSums(n + 1);\n\n    dfs(lNums, 0, 0, 0, lSums);\n    dfs(rNums, 0, 0, 0, rSums);\n\n    for (int lCount = 0; lCount <= n; ++lCount) {\n      auto& l = lSums[lCount];\n      auto& r = rSums[n - lCount];\n      std::ranges::sort(r);\n      for (const int lSum : l) {\n        const int i = firstGreaterEqual(r, goal - lSum);\n        if (i < r.size()) {\n          const int sumPartOne = sum - lSum - r[i];\n          const int sumPartTwo = sum - sumPartOne;\n          ans = min(ans, abs(sumPartOne - sumPartTwo));\n        }\n        if (i > 0) {\n          const int sumPartOne = sum - lSum - r[i - 1];\n          const int sumPartTwo = sum - sumPartOne;\n          ans = min(ans, abs(sumPartOne - sumPartTwo));\n        }\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  void dfs(const vector<int>& A, int i, int count, int path,\n           vector<vector<int>>& sums) {\n    if (i == A.size()) {\n      sums[count].push_back(path);\n      return;\n    }\n    dfs(A, i + 1, count + 1, path + A[i], sums);\n    dfs(A, i + 1, count, path, sums);\n  }\n\n  int firstGreaterEqual(const vector<int>& A, int target) {\n    return lower_bound(A.begin(), A.end(), target) - A.begin();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumDifference(int[] nums) {\n    final int n = nums.length / 2;\n    final int sum = Arrays.stream(nums).sum();\n    final int goal = sum / 2;\n    final int[] lNums = Arrays.copyOfRange(nums, 0, n);\n    final int[] rNums = Arrays.copyOfRange(nums, n, nums.length);\n    int ans = Integer.MAX_VALUE;\n    List<Integer>[] lSums = new List[n + 1];\n    List<Integer>[] rSums = new List[n + 1];\n\n    for (int i = 0; i <= n; ++i) {\n      lSums[i] = new ArrayList<>();\n      rSums[i] = new ArrayList<>();\n    }\n\n    dfs(lNums, 0, 0, 0, lSums);\n    dfs(rNums, 0, 0, 0, rSums);\n\n    for (int lCount = 0; lCount <= n; ++lCount) {\n      List<Integer> l = lSums[lCount];\n      List<Integer> r = rSums[n - lCount];\n      Collections.sort(r);\n      for (final int lSum : l) {\n        final int i = firstGreaterEqual(r, goal - lSum);\n        if (i < r.size()) {\n          final int sumPartOne = sum - lSum - r.get(i);\n          final int sumPartTwo = sum - sumPartOne;\n          ans = Math.min(ans, Math.abs(sumPartOne - sumPartTwo));\n        }\n        if (i > 0) {\n          final int sumPartOne = sum - lSum - r.get(i - 1);\n          final int sumPartTwo = sum - sumPartOne;\n          ans = Math.min(ans, Math.abs(sumPartOne - sumPartTwo));\n        }\n      }\n    }\n\n    return ans;\n  }\n\n  private void dfs(int[] A, int i, int count, int path, List<Integer>[] sums) {\n    if (i == A.length) {\n      sums[count].add(path);\n      return;\n    }\n    dfs(A, i + 1, count + 1, path + A[i], sums);\n    dfs(A, i + 1, count, path, sums);\n  }\n\n  private int firstGreaterEqual(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumDifference(self, nums: List[int]) -> int:\n    n = len(nums) // 2\n    summ = sum(nums)\n    goal = summ // 2\n    lNums = nums[:n]\n    rNums = nums[n:]\n    ans = abs(sum(lNums) - sum(rNums))\n    lSums = [[] for _ in range(n + 1)]\n    rSums = [[] for _ in range(n + 1)]\n\n    def dfs(A: List[int], i: int, count: int, path: int, sums: List[List[int]]):\n      if i == len(A):\n        sums[count].append(path)\n        return\n      dfs(A, i + 1, count + 1, path + A[i], sums)\n      dfs(A, i + 1, count, path, sums)\n\n    dfs(lNums, 0, 0, 0, lSums)\n    dfs(rNums, 0, 0, 0, rSums)\n\n    for lCount in range(n):\n      l = lSums[lCount]\n      r = rSums[n - lCount]\n      r.sort()\n      for lSum in l:\n        i = bisect_left(r, goal - lSum)\n        if i < len(r):\n          sumPartOne = summ - lSum - r[i]\n          sumPartTwo = summ - sumPartOne\n          ans = min(ans, abs(sumPartOne - sumPartTwo))\n        if i > 0:\n          sumPartOne = summ - lSum - r[i - 1]\n          sumPartTwo = summ - sumPartOne\n          ans = min(ans, abs(sumPartOne - sumPartTwo))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}