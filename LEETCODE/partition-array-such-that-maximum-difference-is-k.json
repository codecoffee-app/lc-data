{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2294",
            "title": "Partition Array Such That Maximum Difference Is K",
            "titleSlug": "partition-array-such-that-maximum-difference-is-k",
            "content": "<p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You may partition <code>nums</code> into one or more <strong>subsequences</strong> such that each element in <code>nums</code> appears in <strong>exactly</strong> one of the subsequences.</p>\n\n<p>Return <em>the <strong>minimum </strong>number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is <strong>at most</strong> </em><code>k</code><em>.</em></p>\n\n<p>A <strong>subsequence</strong> is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,6,1,2,5], k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nWe can partition nums into the two subsequences [3,1,2] and [6,5].\nThe difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2.\nThe difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1.\nSince two subsequences were created, we return 2. It can be shown that 2 is the minimum number of subsequences needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3], k = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nWe can partition nums into the two subsequences [1,2] and [3].\nThe difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1.\nThe difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0.\nSince two subsequences were created, we return 2. Note that another optimal solution is to partition nums into the two subsequences [1] and [2,3].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,4,5], k = 0\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nWe can partition nums into the three subsequences [2,2], [4], and [5].\nThe difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0.\nThe difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0.\nThe difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0.\nSince three subsequences were created, we return 3. It can be shown that 3 is the minimum number of subsequences needed.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 715,
            "dislikes": 25,
            "similarQuestions": "[{\"title\": \"Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit\", \"titleSlug\": \"longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Beauty of an Array After Applying Operation\", \"titleSlug\": \"maximum-beauty-of-an-array-after-applying-operation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"37.3K\", \"totalSubmission\": \"50.9K\", \"totalAcceptedRaw\": 37331, \"totalSubmissionRaw\": 50935, \"acRate\": \"73.3%\"}",
            "hints": [
                "Which values in each subsequence matter? The only values that matter are the maximum and minimum values.",
                "Let the maximum and minimum values of a subsequence be Max and Min. It is optimal to place all values in between Max and Min in the original array in the same subsequence as Max and Min.",
                "Sort the array."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `k`, partition `nums` into one or more subsequences such that each element in `nums` appears in exactly one of the subsequences.\n\nReturn the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most `k`.\n\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
                "constraints": [
                    "1 <= nums.length <= 10<sup>5</sup>",
                    "0 <= nums[i] <= 10<sup>5</sup>",
                    "0 <= k <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [3,6,1,2,5], k = 2",
                        "output": "2",
                        "explanation": "The array can be partitioned into two subsequences, [3, 1, 2] and [6, 5]. The difference between the maximum and minimum values in the first subsequence is 3 - 1 = 2, and in the second subsequence, it's 6 - 5 = 1. Therefore, the minimum number of subsequences needed is 2."
                    },
                    {
                        "input": "nums = [1,2,3], k = 1",
                        "output": "2",
                        "explanation": "The array can be partitioned into two subsequences, [1, 2] and [3]. The difference between the maximum and minimum values in the first subsequence is 2 - 1 = 1, and in the second subsequence, it's 3 - 3 = 0.  Another optimal solution is to partition nums into the two subsequences [1] and [2,3]. Therefore, the minimum number of subsequences needed is 2."
                    },
                    {
                        "input": "nums = [2,2,4,5], k = 0",
                        "output": "3",
                        "explanation": "The array can be partitioned into three subsequences, [2, 2], [4], and [5]. The difference between the maximum and minimum values in each subsequence is 0. Therefore, the minimum number of subsequences needed is 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
                "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-beauty-of-an-array-after-applying-operation",
                "title": "Maximum Beauty of an Array After Applying Operation",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Which values in each subsequence matter? The only values that matter are the maximum and minimum values.",
            "Let the maximum and minimum values of a subsequence be Max and Min. It is optimal to place all values in between Max and Min in the original array in the same subsequence as Max and Min.",
            "Sort the array."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int partitionArray(vector<int>& nums, int k) {\n    std::ranges::sort(nums);\n\n    int ans = 1;\n    int min = nums[0];\n\n    for (int i = 1; i < nums.size(); ++i)\n      if (min + k < nums[i]) {\n        ++ans;\n        min = nums[i];\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int partitionArray(int[] nums, int k) {\n    Arrays.sort(nums);\n\n    int ans = 1;\n    int min = nums[0];\n\n    for (int i = 1; i < nums.length; ++i)\n      if (min + k < nums[i]) {\n        ++ans;\n        min = nums[i];\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def partitionArray(self, nums: List[int], k: int) -> int:\n    nums.sort()\n\n    ans = 1\n    min = nums[0]\n\n    for i in range(1, len(nums)):\n      if min + k < nums[i]:\n        ans += 1\n        min = nums[i]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}