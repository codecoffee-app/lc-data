{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "416",
            "title": "Partition Equal Subset Sum",
            "titleSlug": "partition-equal-subset-sum",
            "content": "<p>Given an integer array <code>nums</code>, return <code>true</code> <em>if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,11,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The array can be partitioned as [1, 5, 5] and [11].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The array cannot be partitioned into equal sum subsets.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 11809,
            "dislikes": 221,
            "similarQuestions": "[{\"title\": \"Partition to K Equal Sum Subsets\", \"titleSlug\": \"partition-to-k-equal-sum-subsets\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimize the Difference Between Target and Chosen Elements\", \"titleSlug\": \"minimize-the-difference-between-target-and-chosen-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Ways to Partition an Array\", \"titleSlug\": \"maximum-number-of-ways-to-partition-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Partition Array Into Two Arrays to Minimize Sum Difference\", \"titleSlug\": \"partition-array-into-two-arrays-to-minimize-sum-difference\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Subarrays With Equal Sum\", \"titleSlug\": \"find-subarrays-with-equal-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Number of Great Partitions\", \"titleSlug\": \"number-of-great-partitions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Split With Minimum Sum\", \"titleSlug\": \"split-with-minimum-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"748.8K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 748760, \"totalSubmissionRaw\": 1620598, \"acRate\": \"46.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, determine if it is possible to partition the array into two subsets such that the sum of elements in each subset is equal.",
                "constraints": [
                    "1 <= nums.length <= 200",
                    "1 <= nums[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1,5,11,5]",
                        "output": "true",
                        "explanation": "The array can be divided into two subsets [1, 5, 5] and [11], each with a sum of 11."
                    },
                    {
                        "input": "[1,2,3,5]",
                        "output": "false",
                        "explanation": "It's not possible to find two subsets of the array that have the same sum."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "partition-to-k-equal-sum-subsets",
                "title": "Partition to K Equal Sum Subsets",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimize-the-difference-between-target-and-chosen-elements",
                "title": "Minimize the Difference Between Target and Chosen Elements",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-ways-to-partition-an-array",
                "title": "Maximum Number of Ways to Partition an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "partition-array-into-two-arrays-to-minimize-sum-difference",
                "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-subarrays-with-equal-sum",
                "title": "Find Subarrays With Equal Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-great-partitions",
                "title": "Number of Great Partitions",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "split-with-minimum-sum",
                "title": "Split With Minimum Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canPartition(vector<int>& nums) {\n    const int sum = accumulate(nums.begin(), nums.end(), 0);\n    if (sum & 1)\n      return false;\n    return knapsack(nums, sum / 2);\n  }\n\n private:\n  bool knapsack(const vector<int>& nums, int subsetSum) {\n    const int n = nums.size();\n    // dp[i][j] := true if j can be formed by nums[0..i)\n    vector<vector<bool>> dp(n + 1, vector<bool>(subsetSum + 1));\n    dp[0][0] = true;\n\n    for (int i = 1; i <= n; ++i) {\n      const int num = nums[i - 1];\n      for (int j = 0; j <= subsetSum; ++j)\n        if (j < num)\n          dp[i][j] = dp[i - 1][j];\n        else\n          dp[i][j] = dp[i - 1][j] || dp[i - 1][j - num];\n    }\n\n    return dp[n][subsetSum];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canPartition(int[] nums) {\n    final int sum = Arrays.stream(nums).sum();\n    if (sum % 2 == 1)\n      return false;\n    return knapsack(nums, sum / 2);\n  }\n\n  private boolean knapsack(int[] nums, int subsetSum) {\n    final int n = nums.length;\n    // dp[i][j] := true if j can be formed by nums[0..i)\n    boolean[][] dp = new boolean[n + 1][subsetSum + 1];\n    dp[0][0] = true;\n\n    for (int i = 1; i <= n; ++i) {\n      final int num = nums[i - 1];\n      for (int j = 0; j <= subsetSum; ++j)\n        if (j < num)\n          dp[i][j] = dp[i - 1][j];\n        else\n          dp[i][j] = dp[i - 1][j] || dp[i - 1][j - num];\n    }\n\n    return dp[n][subsetSum];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def canPartition(self, nums: List[int]) -> bool:\n    summ = sum(nums)\n    if summ & 1:\n      return False\n    return self.knapsack_(nums, summ // 2)\n\n  def knapsack_(self, nums: List[int], subsetSum: int) -> bool:\n    n = len(nums)\n    # dp[i][j] := True if j can be formed by nums[0..i)\n    dp = [[False] * (subsetSum + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n + 1):\n      num = nums[i - 1]\n      for j in range(subsetSum + 1):\n        if j < num:\n          dp[i][j] = dp[i - 1][j]\n        else:\n          dp[i][j] = dp[i - 1][j] or dp[i - 1][j - num]\n\n    return dp[n][subsetSum]\n",
                "lang_text": "py"
            }
        }
    }
}