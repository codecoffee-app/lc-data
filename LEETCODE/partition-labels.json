{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "763",
            "title": "Partition Labels",
            "titleSlug": "partition-labels",
            "content": "<p>You are given a string <code>s</code>. We want to partition the string into as many parts as possible so that each letter appears in at most one part.</p>\n\n<p>Note that the partition is done so that after concatenating all the parts in order, the resultant string should be <code>s</code>.</p>\n\n<p>Return <em>a list of integers representing the size of these parts</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababcbacadefegdehijhklij&quot;\n<strong>Output:</strong> [9,7,8]\n<strong>Explanation:</strong>\nThe partition is &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;.\nThis is a partition so that each letter appears in at most one part.\nA partition like &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; is incorrect, because it splits s into less parts.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;eccbbbbdec&quot;\n<strong>Output:</strong> [10]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10059,
            "dislikes": 373,
            "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Optimal Partition of String\", \"titleSlug\": \"optimal-partition-of-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"506.5K\", \"totalSubmission\": \"634.8K\", \"totalAcceptedRaw\": 506498, \"totalSubmissionRaw\": 634800, \"acRate\": \"79.8%\"}",
            "hints": [
                "Try to greedily choose the smallest partition that includes the first letter.  If you have something like \"abaccbdeffed\", then you might need to add b.  You can use an map like \"last['b'] = 5\" to help you expand the width of your partition."
            ],
            "rephrased": {
                "body": "Given a string `s`, partition it into as many parts as possible such that each letter appears in at most one part.  The partition must ensure that concatenating the parts in order results in the original string `s`. Return a list of integers representing the size of each part in the partition.",
                "constraints": [
                    "1 <= s.length <= 500",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "ababcbacadefegdehijhklij",
                        "output": "[9,7,8]",
                        "explanation": "The optimal partition is \"ababcbaca\", \"defegde\", \"hijhklij\".  Each character appears in only one of these substrings, and their concatenation is the original string.  A partition like \"ababcbacadefegde\", \"hijhklij\" is suboptimal as it results in fewer parts."
                    },
                    {
                        "input": "eccbbbbdec",
                        "output": "[10]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "merge-intervals",
                "title": "Merge Intervals",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "optimal-partition-of-string",
                "title": "Optimal Partition of String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try to greedily choose the smallest partition that includes the first letter.  If you have something like \"abaccbdeffed\", then you might need to add b.  You can use an map like \"last['b'] = 5\" to help you expand the width of your partition."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> partitionLabels(string s) {\n    vector<int> ans;\n    vector<int> rightmost(128);\n\n    for (int i = 0; i < s.length(); ++i)\n      rightmost[s[i]] = i;\n\n    int l = 0;  // First index of current running string\n    int r = 0;  // Right most so far\n\n    for (int i = 0; i < s.length(); ++i) {\n      r = max(r, rightmost[s[i]]);\n      if (r == i) {\n        ans.push_back(i - l + 1);\n        l = i + 1;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> partitionLabels(String s) {\n    List<Integer> ans = new ArrayList<>();\n    int[] rightmost = new int[128];\n\n    for (int i = 0; i < s.length(); ++i)\n      rightmost[s.charAt(i)] = i;\n\n    int l = 0; // First index of current running string\n    int r = 0; // Right most so far\n\n    for (int i = 0; i < s.length(); ++i) {\n      r = Math.max(r, rightmost[s.charAt(i)]);\n      if (r == i) {\n        ans.add(i - l + 1);\n        l = i + 1;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def partitionLabels(self, s: str) -> List[int]:\n    ans = []\n    letterToRightmostIndex = {c: i for i, c in enumerate(s)}\n\n    l = 0\n    r = 0\n\n    for i, c in enumerate(s):\n      r = max(r, letterToRightmostIndex[c])\n      if i == r:\n        ans.append(r - l + 1)\n        l = r + 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}