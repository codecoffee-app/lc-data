{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2767",
            "title": "Partition String Into Minimum Beautiful Substrings",
            "titleSlug": "partition-string-into-minimum-beautiful-substrings",
            "content": "<p>Given a binary string <code>s</code>, partition the string into one or more <strong>substrings</strong> such that each substring is <strong>beautiful</strong>.</p>\n\n<p>A string is <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li>It doesn&#39;t contain leading zeros.</li>\n\t<li>It&#39;s the <strong>binary</strong> representation of a number that is a power of <code>5</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of substrings in such partition. </em>If it is impossible to partition the string <code>s</code> into beautiful substrings,&nbsp;return <code>-1</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1011&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can paritition the given string into [&quot;101&quot;, &quot;1&quot;].\n- The string &quot;101&quot; does not contain leading zeros and is the binary representation of integer 5<sup>1</sup> = 5.\n- The string &quot;1&quot; does not contain leading zeros and is the binary representation of integer 5<sup>0</sup> = 1.\nIt can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;111&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can paritition the given string into [&quot;1&quot;, &quot;1&quot;, &quot;1&quot;].\n- The string &quot;1&quot; does not contain leading zeros and is the binary representation of integer 5<sup>0</sup> = 1.\nIt can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> We can not partition the given string into beautiful substrings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 15</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 297,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"Partition Array for Maximum Sum\", \"titleSlug\": \"partition-array-for-maximum-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.8K\", \"totalSubmission\": \"24.7K\", \"totalAcceptedRaw\": 12816, \"totalSubmissionRaw\": 24662, \"acRate\": \"52.0%\"}",
            "hints": [
                "To check if number x is a power of 5 or not, we will divide x by 5 while x > 1 and x mod 5 == 0. After iteration if x == 1, then it was a power of 5.",
                "Since the constraint of s.length is small, we can use recursion to find all the partitions."
            ],
            "rephrased": {
                "body": "Given a binary string `s`, your task is to partition it into the fewest possible substrings, where each substring represents a power of 5 in binary form and does not have leading zeros.  Return the minimum number of substrings required. If it's impossible to partition `s` into such substrings, return -1.",
                "constraints": [
                    "1 <= s.length <= 15",
                    "s[i] is either '0' or '1'."
                ],
                "testcases": [
                    {
                        "input": "1011",
                        "output": "2",
                        "explanation": "The string can be partitioned into [\"101\", \"1\"]. \"101\" is 5 in binary (5<sup>1</sup>), and \"1\" is 1 in binary (5<sup>0</sup>).  This is the minimum possible number of substrings."
                    },
                    {
                        "input": "111",
                        "output": "3",
                        "explanation": "The string can be partitioned into [\"1\", \"1\", \"1\"]. Each \"1\" is 1 in binary (5<sup>0</sup>). This is the minimum possible number of substrings."
                    },
                    {
                        "input": "0",
                        "output": "-1",
                        "explanation": "It is impossible to partition the string into beautiful substrings because '0' does not represent a power of 5 and cannot be used as a beautiful substring due to leading zeros rule."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "partition-array-for-maximum-sum",
                "title": "Partition Array for Maximum Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "To check if number x is a power of 5 or not, we will divide x by 5 while x > 1 and x mod 5 == 0. After iteration if x == 1, then it was a power of 5.",
            "Since the constraint of s.length is small, we can use recursion to find all the partitions."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ]
    }
}