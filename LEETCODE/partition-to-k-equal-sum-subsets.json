{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "698",
            "title": "Partition to K Equal Sum Subsets",
            "titleSlug": "partition-to-k-equal-sum-subsets",
            "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> if it is possible to divide this array into <code>k</code> non-empty subsets whose sums are all equal.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,3,2,3,5,2,1], k = 4\n<strong>Output:</strong> true\n<strong>Explanation:</strong> It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4], k = 3\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 16</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>The frequency of each element is in the range <code>[1, 4]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6956,
            "dislikes": 491,
            "similarQuestions": "[{\"title\": \"Partition Equal Subset Sum\", \"titleSlug\": \"partition-equal-subset-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Fair Distribution of Cookies\", \"titleSlug\": \"fair-distribution-of-cookies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Ways to Partition an Array\", \"titleSlug\": \"maximum-number-of-ways-to-partition-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Rows Covered by Columns\", \"titleSlug\": \"maximum-rows-covered-by-columns\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"256.2K\", \"totalSubmission\": \"662.2K\", \"totalAcceptedRaw\": 256184, \"totalSubmissionRaw\": 662225, \"acRate\": \"38.7%\"}",
            "hints": [
                "We can figure out what target each subset must sum to.  Then, let's recursively search, where at each call to our function, we choose which of k subsets the next value will join."
            ],
            "rephrased": {
                "body": "Given an array of integers `nums` and an integer `k`, determine if it's possible to partition the array into `k` non-empty subsets such that the sum of elements in each subset is equal.",
                "constraints": [
                    "1 <= k <= nums.length <= 16",
                    "1 <= nums[i] <= 10<sup>4</sup>",
                    "The frequency of each element is in the range [1, 4]."
                ],
                "testcases": [
                    {
                        "input": "nums = [4,3,2,3,5,2,1], k = 4",
                        "output": "true",
                        "explanation": "The array can be divided into 4 subsets: {5}, {1, 4}, {2, 3}, and {2, 3}, each with a sum of 5."
                    },
                    {
                        "input": "nums = [1,2,3,4], k = 3",
                        "output": "false",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "partition-equal-subset-sum",
                "title": "Partition Equal Subset Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "fair-distribution-of-cookies",
                "title": "Fair Distribution of Cookies",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-ways-to-partition-an-array",
                "title": "Maximum Number of Ways to Partition an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-rows-covered-by-columns",
                "title": "Maximum Rows Covered by Columns",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We can figure out what target each subset must sum to.  Then, let's recursively search, where at each call to our function, we choose which of k subsets the next value will join."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool canPartitionKSubsets(vector<int>& nums, int k) {\n    const int sum = accumulate(nums.begin(), nums.end(), 0);\n    if (sum % k != 0)\n      return false;\n\n    const int t = sum / k;  // Each subset's target sum\n    return dfs(nums, 0, k, t, t, vector<bool>(nums.size()));\n  }\n\n private:\n  bool dfs(const vector<int>& nums, int s, int k, int target,\n           const int subsetTargetSum, vector<bool>&& seen) {\n    if (k == 0)\n      return true;\n    if (target < 0)\n      return false;\n    if (target == 0)\n      return dfs(nums, 0, k - 1, subsetTargetSum, subsetTargetSum, move(seen));\n\n    for (int i = s; i < nums.size(); ++i) {\n      if (seen[i])\n        continue;\n      seen[i] = true;\n      if (dfs(nums, i + 1, k, target - nums[i], subsetTargetSum, move(seen)))\n        return true;\n      seen[i] = false;\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean canPartitionKSubsets(int[] nums, int k) {\n    final int sum = Arrays.stream(nums).sum();\n    if (sum % k != 0)\n      return false;\n\n    final int t = sum / k; // Each subset's target sum\n    boolean[] seen = new boolean[nums.length];\n    return dfs(nums, 0, k, t, t, seen);\n  }\n\n  private boolean dfs(int[] nums, int s, int k, int target, int subsetTargetSum, boolean[] seen) {\n    if (k == 0)\n      return true;\n    if (target < 0)\n      return false;\n    if (target == 0)\n      return dfs(nums, 0, k - 1, subsetTargetSum, subsetTargetSum, seen);\n\n    for (int i = s; i < nums.length; ++i) {\n      if (seen[i])\n        continue;\n      seen[i] = true;\n      if (dfs(nums, i + 1, k, target - nums[i], subsetTargetSum, seen))\n        return true;\n      seen[i] = false;\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}