{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "119",
            "title": "Pascal's Triangle II",
            "titleSlug": "pascals-triangle-ii",
            "content": "<p>Given an integer <code>rowIndex</code>, return the <code>rowIndex<sup>th</sup></code> (<strong>0-indexed</strong>) row of the <strong>Pascal&#39;s triangle</strong>.</p>\n\n<p>In <strong>Pascal&#39;s triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p>\n<img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" style=\"height:240px; width:260px\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 3\n<strong>Output:</strong> [1,3,3,1]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 0\n<strong>Output:</strong> [1]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 1\n<strong>Output:</strong> [1,1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= rowIndex &lt;= 33</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you optimize your algorithm to use only <code>O(rowIndex)</code> extra space?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4698,
            "dislikes": 328,
            "similarQuestions": "[{\"title\": \"Pascal's Triangle\", \"titleSlug\": \"pascals-triangle\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find Triangular Sum of an Array\", \"titleSlug\": \"find-triangular-sum-of-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"830.7K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 830732, \"totalSubmissionRaw\": 1309170, \"acRate\": \"63.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer `rowIndex`, return the `rowIndex`-th (0-indexed) row of Pascal's Triangle. Each number in Pascal's Triangle is the sum of the two numbers directly above it.",
                "constraints": [
                    "0 <= rowIndex <= 33"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "[1,3,3,1]",
                        "explanation": null
                    },
                    {
                        "input": "0",
                        "output": "[1]",
                        "explanation": null
                    },
                    {
                        "input": "1",
                        "output": "[1,1]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "pascals-triangle",
                "title": "Pascal's Triangle",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-triangular-sum-of-an-array",
                "title": "Find Triangular Sum of an Array",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> getRow(int rowIndex) {\n    vector<int> ans(rowIndex + 1, 1);\n\n    for (int i = 2; i < rowIndex + 1; ++i)\n      for (int j = 1; j < i; ++j)\n        ans[i - j] += ans[i - j - 1];\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> getRow(int rowIndex) {\n    Integer[] ans = new Integer[rowIndex + 1];\n    Arrays.fill(ans, 1);\n\n    for (int i = 2; i < rowIndex + 1; ++i)\n      for (int j = 1; j < i; ++j)\n        ans[i - j] += ans[i - j - 1];\n\n    return Arrays.asList(ans);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getRow(self, rowIndex: int) -> List[int]:\n    ans = [1] * (rowIndex + 1)\n\n    for i in range(2, rowIndex + 1):\n      for j in range(1, i):\n        ans[i - j] += ans[i - j - 1]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}