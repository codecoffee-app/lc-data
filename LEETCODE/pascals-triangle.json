{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "118",
            "title": "Pascal's Triangle",
            "titleSlug": "pascals-triangle",
            "content": "<p>Given an integer <code>numRows</code>, return the first numRows of <strong>Pascal&#39;s triangle</strong>.</p>\n\n<p>In <strong>Pascal&#39;s triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p>\n<img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" style=\"height:240px; width:260px\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> numRows = 5\n<strong>Output:</strong> [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> numRows = 1\n<strong>Output:</strong> [[1]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numRows &lt;= 30</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 12265,
            "dislikes": 396,
            "similarQuestions": "[{\"title\": \"Pascal's Triangle II\", \"titleSlug\": \"pascals-triangle-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.1M\", \"totalAcceptedRaw\": 1520602, \"totalSubmissionRaw\": 2069606, \"acRate\": \"73.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer `numRows`, generate the first `numRows` of Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it.",
                "constraints": [
                    "1 <= numRows <= 30"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
                        "explanation": null
                    },
                    {
                        "input": "1",
                        "output": "[[1]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "pascals-triangle-ii",
                "title": "Pascal's Triangle II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> generate(int numRows) {\n    vector<vector<int>> ans;\n\n    for (int i = 0; i < numRows; ++i)\n      ans.push_back(vector<int>(i + 1, 1));\n\n    for (int i = 2; i < numRows; ++i)\n      for (int j = 1; j < ans[i].size() - 1; ++j)\n        ans[i][j] = ans[i - 1][j - 1] + ans[i - 1][j];\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> generate(int numRows) {\n    List<List<Integer>> ans = new ArrayList<>();\n\n    for (int i = 0; i < numRows; ++i) {\n      Integer[] temp = new Integer[i + 1];\n      Arrays.fill(temp, 1);\n      ans.add(Arrays.asList(temp));\n    }\n\n    for (int i = 2; i < numRows; ++i)\n      for (int j = 1; j < ans.get(i).size() - 1; ++j)\n        ans.get(i).set(j, ans.get(i - 1).get(j - 1) + ans.get(i - 1).get(j));\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def generate(self, numRows: int) -> List[List[int]]:\n    ans = []\n\n    for i in range(numRows):\n      ans.append([1] * (i + 1))\n\n    for i in range(2, numRows):\n      for j in range(1, len(ans[i]) - 1):\n        ans[i][j] = ans[i - 1][j - 1] + ans[i - 1][j]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}