{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "330",
            "title": "Patching Array",
            "titleSlug": "patching-array",
            "content": "<p>Given a sorted integer array <code>nums</code> and an integer <code>n</code>, add/patch elements to the array such that any number in the range <code>[1, n]</code> inclusive can be formed by the sum of some elements in the array.</p>\n\n<p>Return <em>the minimum number of patches required</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3], n = 6\n<strong>Output:</strong> 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,10], n = 20\n<strong>Output:</strong> 2\nExplanation: The two patches can be [2, 4].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2], n = 5\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in <strong>ascending order</strong>.</li>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1516,
            "dislikes": 130,
            "similarQuestions": "[{\"title\": \"Maximum Number of Consecutive Values You Can Make\", \"titleSlug\": \"maximum-number-of-consecutive-values-you-can-make\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"67.4K\", \"totalSubmission\": \"163.6K\", \"totalAcceptedRaw\": 67383, \"totalSubmissionRaw\": 163561, \"acRate\": \"41.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a sorted integer array `nums` and an integer `n`, determine the minimum number of elements to add (patch) to `nums` such that every number in the range `[1, n]` (inclusive) can be represented as the sum of some elements from the modified array.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "1 <= nums[i] <= 10^4",
                    "`nums` is sorted in ascending order.",
                    "1 <= n <= 2^31 - 1"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,3], n = 6",
                        "output": "1",
                        "explanation": "Initially, the array `nums` can form the sums 1, 3, and 4.  By adding '2' to the array, we can now form the sums 1, 2, 3, 4, 5, and 6, covering the entire range [1, 6]. Thus, only one patch is needed."
                    },
                    {
                        "input": "nums = [1,5,10], n = 20",
                        "output": "2",
                        "explanation": "Two patches, such as [2, 4], are required to ensure all numbers in the range [1, 20] can be formed by sums of elements in the modified array."
                    },
                    {
                        "input": "nums = [1,2,2], n = 5",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-consecutive-values-you-can-make",
                "title": "Maximum Number of Consecutive Values You Can Make",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minPatches(vector<int>& nums, int n) {\n    int ans = 0;\n    int i = 0;      // Point to nums\n    long miss = 1;  // Min sum in [1, n] we might miss\n\n    while (miss <= n)\n      if (i < nums.size() && nums[i] <= miss) {\n        miss += nums[i++];\n      } else {\n        // Greedily add miss itself to increase the range\n        // From [1, miss) to [1, 2 * miss)\n        miss += miss;\n        ++ans;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minPatches(int[] nums, int n) {\n    int ans = 0;\n    int i = 0;     // Point to nums\n    long miss = 1; // Min sum in [1, n] we might miss\n\n    while (miss <= n)\n      if (i < nums.length && nums[i] <= miss) {\n        miss += nums[i++];\n      } else {\n        // Greedily add miss itself to increase the range\n        // From [1, miss) to [1, 2 * miss)\n        miss += miss;\n        ++ans;\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minPatches(self, nums: List[int], n: int) -> int:\n    ans = 0\n    i = 0     # Point to nums\n    miss = 1  # Min sum in [1, n] we might miss\n\n    while miss <= n:\n      if i < len(nums) and nums[i] <= miss:\n        miss += nums[i]\n        i += 1\n      else:\n        # Greedily add miss itself to increase the range\n        # From [1, miss) to [1, 2 * miss)\n        miss += miss\n        ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}