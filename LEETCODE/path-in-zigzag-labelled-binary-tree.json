{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1104",
            "title": "Path In Zigzag Labelled Binary Tree",
            "titleSlug": "path-in-zigzag-labelled-binary-tree",
            "content": "<p>In an infinite binary tree where every node has two children, the nodes are labelled in row order.</p>\n\n<p>In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/06/24/tree.png\" style=\"width: 300px; height: 138px;\" /></p>\n\n<p>Given the <code>label</code> of a node in this tree, return the labels in the path from the root of the tree to the&nbsp;node with that <code>label</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> label = 14\n<strong>Output:</strong> [1,3,4,14]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> label = 26\n<strong>Output:</strong> [1,2,6,10,26]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= label &lt;= 10^6</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1456,
            "dislikes": 309,
            "similarQuestions": "[{\"title\": \"Cycle Length Queries in a Tree\", \"titleSlug\": \"cycle-length-queries-in-a-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"43.2K\", \"totalSubmission\": \"57.5K\", \"totalAcceptedRaw\": 43245, \"totalSubmissionRaw\": 57481, \"acRate\": \"75.2%\"}",
            "hints": [
                "Based on the label of the current node, find what the label must be for the parent of that node."
            ],
            "rephrased": {
                "body": "In an infinite binary tree, nodes are labeled in row order. Odd-numbered rows are labeled left to right, while even-numbered rows are labeled right to left. Given the label of a node in this tree, return the list of node labels on the path from the root (label 1) to the node with the given label.",
                "constraints": [
                    "1 <= label <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "14",
                        "output": "[1,3,4,14]",
                        "explanation": null
                    },
                    {
                        "input": "26",
                        "output": "[1,2,6,10,26]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "cycle-length-queries-in-a-tree",
                "title": "Cycle Length Queries in a Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Based on the label of the current node, find what the label must be for the parent of that node."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> pathInZigZagTree(int label) {\n    deque<int> ans;\n    int level;\n\n    for (int l = 0; l < 21; ++l)\n      if (pow(2, l) > label) {\n        level = l - 1;\n        break;\n      }\n\n    if (level & 1)\n      label = boundarySum(level) - label;\n\n    for (int l = level; l >= 0; --l) {\n      ans.push_front(l & 1 ? boundarySum(l) - label : label);\n      label /= 2;\n    }\n\n    return {ans.begin(), ans.end()};\n  }\n\n private:\n  int boundarySum(int level) {\n    return pow(2, level) + pow(2, level + 1) - 1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> pathInZigZagTree(int label) {\n    LinkedList<Integer> ans = new LinkedList<>();\n    int level = 0;\n\n    for (int l = 0; l < 21; ++l)\n      if (Math.pow(2, l) > label) {\n        level = l - 1;\n        break;\n      }\n\n    if (level % 2 == 1)\n      label = boundarySum(level) - label;\n\n    for (int l = level; l >= 0; --l) {\n      ans.addFirst(l % 2 == 1 ? boundarySum(l) - label : label);\n      label /= 2;\n    }\n\n    return new ArrayList<>(ans);\n  }\n\n  private int boundarySum(int level) {\n    return (int) Math.pow(2, level) + (int) Math.pow(2, level + 1) - 1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def pathInZigZagTree(self, label: int) -> List[int]:\n    def boundarySum(level: int):\n      return 2**level + 2**(level + 1) - 1\n\n    ans = []\n\n    for l in range(21):\n      if 2**l > label:\n        level = l - 1\n        break\n\n    if level & 1:\n      label = boundarySum(level) - label\n\n    for l in reversed(range(level + 1)):\n      ans.append(boundarySum(l) - label if l & 1 else label)\n      label //= 2\n\n    return ans[::-1]\n",
                "lang_text": "py"
            }
        }
    }
}