{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "437",
            "title": "Path Sum III",
            "titleSlug": "path-sum-iii",
            "content": "<p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <em>the number of paths where the sum of the values&nbsp;along the path equals</em>&nbsp;<code>targetSum</code>.</p>\n\n<p>The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg\" style=\"width: 450px; height: 386px;\" />\n<pre>\n<strong>Input:</strong> root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The paths that sum to 8 are shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 1000]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10518,
            "dislikes": 494,
            "similarQuestions": "[{\"title\": \"Path Sum\", \"titleSlug\": \"path-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Path Sum II\", \"titleSlug\": \"path-sum-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Path Sum IV\", \"titleSlug\": \"path-sum-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Univalue Path\", \"titleSlug\": \"longest-univalue-path\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"515.6K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 515558, \"totalSubmissionRaw\": 1101242, \"acRate\": \"46.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree and an integer targetSum, determine the number of paths where the sum of the node values along the path equals targetSum.  A path must go downwards from parent to child nodes, and can start and end at any node (not necessarily the root or a leaf).",
                "constraints": [
                    "The number of nodes in the tree is in the range [0, 1000].",
                    "-10<sup>9</sup> <= Node.val <= 10<sup>9</sup>",
                    "-1000 <= targetSum <= 1000"
                ],
                "testcases": [
                    {
                        "input": "root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8",
                        "output": "3",
                        "explanation": "There are three paths that sum to 8. Example paths include 5 -> 3, 5 -> -2 -> 3, and -3 -> 11."
                    },
                    {
                        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "path-sum",
                "title": "Path Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "path-sum-ii",
                "title": "Path Sum II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "path-sum-iv",
                "title": "Path Sum IV",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-univalue-path",
                "title": "Longest Univalue Path",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int pathSum(TreeNode* root, int sum) {\n    if (root == nullptr)\n      return 0;\n    return dfs(root, sum) +            //\n           pathSum(root->left, sum) +  //\n           pathSum(root->right, sum);\n  }\n\n private:\n  int dfs(TreeNode* root, int sum) {\n    if (root == nullptr)\n      return 0;\n    return (sum == root->val) +                //\n           dfs(root->left, sum - root->val) +  //\n           dfs(root->right, sum - root->val);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int pathSum(TreeNode root, int sum) {\n    if (root == null)\n      return 0;\n    return dfs(root, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);\n  }\n\n  private int dfs(TreeNode root, int sum) {\n    if (root == null)\n      return 0;\n    return (sum == root.val ? 1 : 0) +   //\n        dfs(root.left, sum - root.val) + //\n        dfs(root.right, sum - root.val);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def pathSum(self, root: TreeNode, summ: int) -> int:\n    if not root:\n      return 0\n\n    def dfs(root: TreeNode, summ: int) -> int:\n      if not root:\n        return 0\n      return (summ == root.val) + \\\n          dfs(root.left, summ - root.val) + \\\n          dfs(root.right, summ - root.val)\n\n    return dfs(root, summ) + \\\n        self.pathSum(root.left, summ) + \\\n        self.pathSum(root.right, summ)\n",
                "lang_text": "py"
            }
        }
    }
}