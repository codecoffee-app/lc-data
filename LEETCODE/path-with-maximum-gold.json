{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1219",
            "title": "Path with Maximum Gold",
            "titleSlug": "path-with-maximum-gold",
            "content": "<p>In a gold mine <code>grid</code> of size <code>m x n</code>, each cell in this mine has an integer representing the amount of gold in that cell, <code>0</code> if it is empty.</p>\n\n<p>Return the maximum amount of gold you can collect under the conditions:</p>\n\n<ul>\n\t<li>Every time you are located in a cell you will collect all the gold in that cell.</li>\n\t<li>From your position, you can walk one step to the left, right, up, or down.</li>\n\t<li>You can&#39;t visit the same cell more than once.</li>\n\t<li>Never visit a cell with <code>0</code> gold.</li>\n\t<li>You can start and stop collecting gold from <strong>any </strong>position in the grid that has some gold.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,6,0],[5,8,7],[0,9,0]]\n<strong>Output:</strong> 24\n<strong>Explanation:</strong>\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -&gt; 8 -&gt; 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\n<strong>Output:</strong> 28\n<strong>Explanation:</strong>\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 15</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 100</code></li>\n\t<li>There are at most <strong>25 </strong>cells containing gold.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2642,
            "dislikes": 65,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"109.7K\", \"totalSubmission\": \"172.4K\", \"totalAcceptedRaw\": 109716, \"totalSubmissionRaw\": 172384, \"acRate\": \"63.6%\"}",
            "hints": [
                "Use recursion to try all such paths and find the one with the maximum value."
            ],
            "rephrased": {
                "body": "Given a gold mine represented as a 2D grid of size m x n, where each cell contains an integer indicating the amount of gold (0 if empty).  Determine the maximum amount of gold that can be collected under the following rules:\n\n*   Collect all gold in a cell when visited.\n*   Move one step in any of the four cardinal directions (left, right, up, down).\n*   A cell can only be visited once.\n*   Cannot visit cells with 0 gold.\n*   Gold collection can start and stop from any cell containing gold.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 15",
                    "0 <= grid[i][j] <= 100",
                    "There are at most 25 cells containing gold."
                ],
                "testcases": [
                    {
                        "input": "[[0,6,0],[5,8,7],[0,9,0]]",
                        "output": "24",
                        "explanation": "The optimal path is 9 -> 8 -> 7, yielding a total of 24 gold."
                    },
                    {
                        "input": "[[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]",
                        "output": "28",
                        "explanation": "The optimal path is 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7, resulting in a total of 28 gold."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use recursion to try all such paths and find the one with the maximum value."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int getMaximumGold(vector<vector<int>>& grid) {\n    int ans = 0;\n\n    for (int i = 0; i < grid.size(); ++i)\n      for (int j = 0; j < grid[0].size(); ++j)\n        ans = max(ans, dfs(grid, i, j));\n\n    return ans;\n  }\n\n private:\n  int dfs(vector<vector<int>>& grid, int i, int j) {\n    if (i < 0 || j < 0 || i == grid.size() || j == grid[0].size())\n      return 0;\n    if (grid[i][j] == 0)\n      return 0;\n\n    const int gold = grid[i][j];\n    grid[i][j] = 0;  // Mark as visited.\n    const int maxPath = max({dfs(grid, i + 1, j), dfs(grid, i - 1, j),\n                             dfs(grid, i, j + 1), dfs(grid, i, j - 1)});\n    grid[i][j] = gold;\n    return gold + maxPath;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int getMaximumGold(int[][] grid) {\n    int ans = 0;\n\n    for (int i = 0; i < grid.length; ++i)\n      for (int j = 0; j < grid[0].length; ++j)\n        ans = Math.max(ans, dfs(grid, i, j));\n\n    return ans;\n  }\n\n  private int dfs(int[][] grid, int i, int j) {\n    if (i < 0 || j < 0 || i == grid.length || j == grid[0].length)\n      return 0;\n    if (grid[i][j] == 0)\n      return 0;\n\n    final int gold = grid[i][j];\n    grid[i][j] = 0; // Mark as visited.\n    final int maxPath = Math.max(Math.max(dfs(grid, i + 1, j), dfs(grid, i - 1, j)),\n                                 Math.max(dfs(grid, i, j + 1), dfs(grid, i, j - 1)));\n    grid[i][j] = gold;\n    return gold + maxPath;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getMaximumGold(self, grid: List[List[int]]) -> int:\n    def dfs(i: int, j: int) -> int:\n      if i < 0 or j < 0 or i == len(grid) or j == len(grid[0]):\n        return 0\n      if grid[i][j] == 0:\n        return 0\n\n      gold = grid[i][j]\n      grid[i][j] = 0  # Mark as visited.\n      maxPath = max(dfs(i + 1, j), dfs(i - 1, j),\n                    dfs(i, j + 1), dfs(i, j - 1))\n      grid[i][j] = gold\n      return gold + maxPath\n\n    return max(dfs(i, j)\n               for i in range(len(grid))\n               for j in range(len(grid[0])))\n",
                "lang_text": "py"
            }
        }
    }
}