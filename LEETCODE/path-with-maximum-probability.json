{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1514",
            "title": "Path with Maximum Probability",
            "titleSlug": "path-with-maximum-probability",
            "content": "<p>You are given an undirected weighted graph of&nbsp;<code>n</code>&nbsp;nodes (0-indexed), represented by an edge list where&nbsp;<code>edges[i] = [a, b]</code>&nbsp;is an undirected edge connecting the nodes&nbsp;<code>a</code>&nbsp;and&nbsp;<code>b</code>&nbsp;with a probability of success of traversing that edge&nbsp;<code>succProb[i]</code>.</p>\n\n<p>Given two nodes&nbsp;<code>start</code>&nbsp;and&nbsp;<code>end</code>, find the path with the maximum probability of success to go from&nbsp;<code>start</code>&nbsp;to&nbsp;<code>end</code>&nbsp;and return its success probability.</p>\n\n<p>If there is no path from&nbsp;<code>start</code>&nbsp;to&nbsp;<code>end</code>, <strong>return&nbsp;0</strong>. Your answer will be accepted if it differs from the correct answer by at most <strong>1e-5</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/20/1558_ex1.png\" style=\"width: 187px; height: 186px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\n<strong>Output:</strong> 0.25000\n<strong>Explanation:</strong>&nbsp;There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/20/1558_ex2.png\" style=\"width: 189px; height: 186px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\n<strong>Output:</strong> 0.30000\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/20/1558_ex3.png\" style=\"width: 215px; height: 191px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\n<strong>Output:</strong> 0.00000\n<strong>Explanation:</strong>&nbsp;There is no path between 0 and 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10^4</code></li>\n\t<li><code>0 &lt;= start, end &lt; n</code></li>\n\t<li><code>start != end</code></li>\n\t<li><code>0 &lt;= a, b &lt; n</code></li>\n\t<li><code>a != b</code></li>\n\t<li><code>0 &lt;= succProb.length == edges.length &lt;= 2*10^4</code></li>\n\t<li><code>0 &lt;= succProb[i] &lt;= 1</code></li>\n\t<li>There is at most one edge between every two nodes.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3022,
            "dislikes": 67,
            "similarQuestions": "[{\"title\": \"Number of Ways to Arrive at Destination\", \"titleSlug\": \"number-of-ways-to-arrive-at-destination\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"127.7K\", \"totalSubmission\": \"234K\", \"totalAcceptedRaw\": 127719, \"totalSubmissionRaw\": 234042, \"acRate\": \"54.6%\"}",
            "hints": [
                "Multiplying probabilities will result in precision errors.",
                "Take log probabilities to sum up numbers instead of multiplying them.",
                "Use Dijkstra's algorithm to find the minimum path between the two nodes after negating all costs."
            ],
            "rephrased": {
                "body": "Given an undirected weighted graph with `n` nodes (0-indexed), represented by an edge list where `edges[i] = [a, b]` denotes an undirected edge connecting nodes `a` and `b` with a probability `succProb[i]` of successfully traversing that edge.  Find the path with the maximum probability of success from a given `start` node to an `end` node. Return this maximum success probability. If no path exists between `start` and `end`, return 0. The answer must be within 1e-5 of the correct answer.",
                "constraints": [
                    "2 <= n <= 10^4",
                    "0 <= start, end < n",
                    "start != end",
                    "0 <= a, b < n",
                    "a != b",
                    "0 <= succProb.length == edges.length <= 2 * 10^4",
                    "0 <= succProb[i] <= 1",
                    "There is at most one edge between every two nodes."
                ],
                "testcases": [
                    {
                        "input": "n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2",
                        "output": "0.25000",
                        "explanation": "There are two possible paths from start (0) to end (2). The first path is 0 -> 2, with a probability of 0.2. The second path is 0 -> 1 -> 2, with a probability of 0.5 * 0.5 = 0.25.  The maximum probability is 0.25."
                    },
                    {
                        "input": "n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2",
                        "output": "0.30000",
                        "explanation": "The two possible paths from start (0) to end (2) are 0 -> 2 with probability 0.3, and 0 -> 1 -> 2 with probability 0.5 * 0.5 = 0.25. The maximum probability is 0.3."
                    },
                    {
                        "input": "n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2",
                        "output": "0.00000",
                        "explanation": "There is no path from start (0) to end (2)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-ways-to-arrive-at-destination",
                "title": "Number of Ways to Arrive at Destination",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Multiplying probabilities will result in precision errors.",
            "Take log probabilities to sum up numbers instead of multiplying them.",
            "Use Dijkstra's algorithm to find the minimum path between the two nodes after negating all costs."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  double maxProbability(int n, vector<vector<int>>& edges,\n                        vector<double>& succProb, int start, int end) {\n    vector<vector<pair<int, double>>> graph(n);  // {a: [(b, prob_ab)]}\n    priority_queue<pair<double, int>> maxHeap;   // (prob to reach u, u)\n    maxHeap.emplace(1.0, start);\n    vector<bool> seen(n);\n\n    for (int i = 0; i < edges.size(); ++i) {\n      const int u = edges[i][0];\n      const int v = edges[i][1];\n      const double prob = succProb[i];\n      graph[u].emplace_back(v, prob);\n      graph[v].emplace_back(u, prob);\n    }\n\n    while (!maxHeap.empty()) {\n      const auto [prob, u] = maxHeap.top();\n      maxHeap.pop();\n      if (u == end)\n        return prob;\n      if (seen[u])\n        continue;\n      seen[u] = true;\n      for (const auto& [nextNode, edgeProb] : graph[u]) {\n        if (seen[nextNode])\n          continue;\n        maxHeap.emplace(prob * edgeProb, nextNode);\n      }\n    }\n\n    return 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {\n    List<Pair<Integer, Double>>[] graph = new List[n]; // {a: [(b, prob_ab)]}\n    // (prob to reach u, u)\n    Queue<Pair<Double, Integer>> maxHeap =\n        new PriorityQueue<>((a, b) -> Double.compare(b.getKey(), a.getKey()));\n    maxHeap.offer(new Pair<>(1.0, start));\n    boolean[] seen = new boolean[n];\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int i = 0; i < edges.length; ++i) {\n      final int u = edges[i][0];\n      final int v = edges[i][1];\n      final double prob = succProb[i];\n      graph[u].add(new Pair<>(v, prob));\n      graph[v].add(new Pair<>(u, prob));\n    }\n\n    while (!maxHeap.isEmpty()) {\n      final double prob = maxHeap.peek().getKey();\n      final int u = maxHeap.poll().getValue();\n      if (u == end)\n        return prob;\n      if (seen[u])\n        continue;\n      seen[u] = true;\n      for (Pair<Integer, Double> node : graph[u]) {\n        final int nextNode = node.getKey();\n        final double edgeProb = node.getValue();\n        if (seen[nextNode])\n          continue;\n        maxHeap.add(new Pair<>(prob * edgeProb, nextNode));\n      }\n    }\n\n    return 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start: int, end: int) -> float:\n    graph = [[] for _ in range(n)]  # [a: [(b, prob_ab)]]\n    maxHeap = [(-1.0, start)]   # (prob to reach u, u)\n    seen = [False] * n\n\n    for i, ((u, v), prob) in enumerate(zip(edges, succProb)):\n      graph[u].append((v, prob))\n      graph[v].append((u, prob))\n\n    while maxHeap:\n      prob, u = heapq.heappop(maxHeap)\n      prob *= -1\n      if u == end:\n        return prob\n      if seen[u]:\n        continue\n      seen[u] = True\n      for nextNode, edgeProb in graph[u]:\n        if seen[nextNode]:\n          continue\n        heapq.heappush(maxHeap, (-prob * edgeProb, nextNode))\n\n    return 0\n",
                "lang_text": "py"
            }
        }
    }
}