{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2435",
            "title": "Paths in Matrix Whose Sum Is Divisible by K",
            "titleSlug": "paths-in-matrix-whose-sum-is-divisible-by-k",
            "content": "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> integer matrix <code>grid</code> and an integer <code>k</code>. You are currently at position <code>(0, 0)</code> and you want to reach position <code>(m - 1, n - 1)</code> moving only <strong>down</strong> or <strong>right</strong>.</p>\n\n<p>Return<em> the number of paths where the sum of the elements on the path is divisible by </em><code>k</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/08/13/image-20220813183124-1.png\" style=\"width: 437px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two paths where the sum of the elements on the path is divisible by k.\nThe first path highlighted in red has a sum of 5 + 2 + 4 + 5 + 2 = 18 which is divisible by 3.\nThe second path highlighted in blue has a sum of 5 + 3 + 0 + 5 + 2 = 15 which is divisible by 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/08/17/image-20220817112930-3.png\" style=\"height: 85px; width: 132px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0]], k = 5\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The path highlighted in red has a sum of 0 + 0 = 0 which is divisible by 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/08/12/image-20220812224605-3.png\" style=\"width: 257px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Every integer is divisible by 1 so the sum of the elements on every possible path is divisible by k.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 50</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 850,
            "dislikes": 28,
            "similarQuestions": "[{\"title\": \"Unique Paths\", \"titleSlug\": \"unique-paths\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Unique Paths II\", \"titleSlug\": \"unique-paths-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Path Sum\", \"titleSlug\": \"minimum-path-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Dungeon Game\", \"titleSlug\": \"dungeon-game\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Cherry Pickup\", \"titleSlug\": \"cherry-pickup\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Shortest Path in Binary Matrix\", \"titleSlug\": \"shortest-path-in-binary-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost Homecoming of a Robot in a Grid\", \"titleSlug\": \"minimum-cost-homecoming-of-a-robot-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check if There is a Path With Equal Number of 0's And 1's\", \"titleSlug\": \"check-if-there-is-a-path-with-equal-number-of-0s-and-1s\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"20.6K\", \"totalSubmission\": \"48.5K\", \"totalAcceptedRaw\": 20601, \"totalSubmissionRaw\": 48503, \"acRate\": \"42.5%\"}",
            "hints": [
                "The actual numbers in grid do not matter. What matters are the remainders you get when you divide the numbers by k.",
                "We can use dynamic programming to solve this problem. What can we use as states?",
                "Let dp[i][j][value] represent the number of paths where the sum of the elements on the path has a remainder of value when divided by k."
            ],
            "rephrased": {
                "body": "Given a 0-indexed m x n integer matrix `grid` and an integer `k`, find the number of paths from (0, 0) to (m - 1, n - 1) where the sum of the elements along the path is divisible by `k`. You can only move down or right at each step. Return the number of paths modulo 10^9 + 7.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 5 * 10^4",
                    "1 <= m * n <= 5 * 10^4",
                    "0 <= grid[i][j] <= 100",
                    "1 <= k <= 50"
                ],
                "testcases": [
                    {
                        "input": "grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3",
                        "output": "2",
                        "explanation": "There are two paths where the sum of elements is divisible by 3. One path has a sum of 5 + 2 + 4 + 5 + 2 = 18, and the other has a sum of 5 + 3 + 0 + 5 + 2 = 15. Both 18 and 15 are divisible by 3."
                    },
                    {
                        "input": "grid = [[0,0]], k = 5",
                        "output": "1",
                        "explanation": "The only path has a sum of 0 + 0 = 0, which is divisible by 5."
                    },
                    {
                        "input": "grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1",
                        "output": "10",
                        "explanation": "Since every integer is divisible by 1, the sum of elements on every possible path is divisible by k. There are 10 possible paths."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "unique-paths",
                "title": "Unique Paths",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "unique-paths-ii",
                "title": "Unique Paths II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-path-sum",
                "title": "Minimum Path Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "dungeon-game",
                "title": "Dungeon Game",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "cherry-pickup",
                "title": "Cherry Pickup",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "shortest-path-in-binary-matrix",
                "title": "Shortest Path in Binary Matrix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
                "title": "Minimum Cost Homecoming of a Robot in a Grid",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s",
                "title": "Check if There is a Path With Equal Number of 0's And 1's",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "The actual numbers in grid do not matter. What matters are the remainders you get when you divide the numbers by k.",
            "We can use dynamic programming to solve this problem. What can we use as states?",
            "Let dp[i][j][value] represent the number of paths where the sum of the elements on the path has a remainder of value when divided by k."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numberOfPaths(vector<vector<int>>& grid, int k) {\n    m = grid.size();\n    n = grid[0].size();\n    // dp[i][j][sum] := # of paths till (i, j) where the sum divide by k == sum\n    dp.resize(m, vector<vector<int>>(n, vector<int>(k, -1)));\n    return numberOfPaths(grid, 0, 0, 0, k);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  int m;\n  int n;\n  vector<vector<vector<int>>> dp;\n\n  int numberOfPaths(const vector<vector<int>>& grid, int i, int j, int sum,\n                    int k) {\n    if (i == m || j == n)\n      return 0;\n    if (i == m - 1 && j == n - 1)\n      return (sum + grid[i][j]) % k == 0;\n    if (dp[i][j][sum] != -1)\n      return dp[i][j][sum];\n    const int newSum = (sum + grid[i][j]) % k;\n    return dp[i][j][sum] = (numberOfPaths(grid, i + 1, j, newSum, k) +\n                            numberOfPaths(grid, i, j + 1, newSum, k)) %\n                           kMod;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numberOfPaths(int[][] grid, int k) {\n    m = grid.length;\n    n = grid[0].length;\n    // dp[i][j][sum] := # of paths till (i, j) where the sum divide by k == sum\n    dp = new Integer[m][n][k];\n    return numberOfPaths(grid, 0, 0, 0, k);\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private int m;\n  private int n;\n  private Integer[][][] dp;\n\n  private int numberOfPaths(int[][] grid, int i, int j, int sum, int k) {\n    if (i == m || j == n)\n      return 0;\n    if (i == m - 1 && j == n - 1)\n      return (sum + grid[i][j]) % k == 0 ? 1 : 0;\n    if (dp[i][j][sum] != null)\n      return dp[i][j][sum];\n    final int newSum = (sum + grid[i][j]) % k;\n    return dp[i][j][sum] = (numberOfPaths(grid, i + 1, j, newSum, k) +\n                            numberOfPaths(grid, i, j + 1, newSum, k)) %\n                           kMod;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numberOfPaths(self, grid: List[List[int]], k: int) -> int:\n    kMod = 1_000_000_007\n    m = len(grid)\n    n = len(grid[0])\n\n    @functools.lru_cache(None)\n    def dp(i: int, j: int, summ: int) -> int:\n      if i == m or j == n:\n        return 0\n      if i == m - 1 and j == n - 1:\n        return 1 if (summ + grid[i][j]) % k == 0 else 0\n      newSum = (summ + grid[i][j]) % k\n      return (dp(i + 1, j, newSum) + dp(i, j + 1, newSum)) % kMod\n\n    return dp(0, 0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}