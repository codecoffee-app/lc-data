{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "852",
            "title": "Peak Index in a Mountain Array",
            "titleSlug": "peak-index-in-a-mountain-array",
            "content": "<p>An array <code>arr</code> is a <strong>mountain</strong> if the following properties hold:</p>\n\n<ul>\n\t<li><code>arr.length &gt;= 3</code></li>\n\t<li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:\n\t<ul>\n\t\t<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </code></li>\n\t\t<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Given a mountain array <code>arr</code>, return the index <code>i</code> such that <code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code>.</p>\n\n<p>You must solve it in <code>O(log(arr.length))</code> time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,1,0]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,2,1,0]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [0,10,5,2]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>arr</code> is <strong>guaranteed</strong> to be a mountain array.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7155,
            "dislikes": 1901,
            "similarQuestions": "[{\"title\": \"Find Peak Element\", \"titleSlug\": \"find-peak-element\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find in Mountain Array\", \"titleSlug\": \"find-in-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Removals to Make Mountain Array\", \"titleSlug\": \"minimum-number-of-removals-to-make-mountain-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"745.5K\", \"totalSubmission\": \"1.1M\", \"totalAcceptedRaw\": 745549, \"totalSubmissionRaw\": 1086171, \"acRate\": \"68.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a mountain array `arr`, find the index `i` such that `arr[0] < arr[1] < ... < arr[i-1] < arr[i] > arr[i+1] > ... > arr[arr.length-1]`. A mountain array satisfies the following conditions:\n\n1.  `arr.length >= 3`\n2.  There exists an index `i` (0 < i < arr.length - 1) such that:\n    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nYou must solve it in O(log(arr.length)) time complexity.",
                "constraints": [
                    "3 <= arr.length <= 10^5",
                    "0 <= arr[i] <= 10^6",
                    "arr is guaranteed to be a mountain array."
                ],
                "testcases": [
                    {
                        "input": "[0,1,0]",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "[0,2,1,0]",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "[0,10,5,2]",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-peak-element",
                "title": "Find Peak Element",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "find-in-mountain-array",
                "title": "Find in Mountain Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
                "title": "Minimum Number of Removals to Make Mountain Array",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int peakIndexInMountainArray(vector<int>& arr) {\n    int l = 0;\n    int r = arr.size() - 1;\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (arr[m] >= arr[m + 1])\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int peakIndexInMountainArray(int[] arr) {\n    int l = 0;\n    int r = arr.length - 1;\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (arr[m] >= arr[m + 1])\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def peakIndexInMountainArray(self, arr: List[int]) -> int:\n    l = 0\n    r = len(arr) - 1\n\n    while l < r:\n      m = (l + r) // 2\n      if arr[m] >= arr[m + 1]:\n        r = m\n      else:\n        l = m + 1\n\n    return l\n",
                "lang_text": "py"
            }
        }
    }
}