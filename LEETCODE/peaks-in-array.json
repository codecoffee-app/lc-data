{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3187",
            "title": "Peaks in Array",
            "titleSlug": "peaks-in-array",
            "content": "<p>A <strong>peak</strong> in an array <code>arr</code> is an element that is <strong>greater</strong> than its previous and next element in <code>arr</code>.</p>\n\n<p>You are given an integer array <code>nums</code> and a 2D integer array <code>queries</code>.</p>\n\n<p>You have to process queries of two types:</p>\n\n<ul>\n\t<li><code>queries[i] = [1, l<sub>i</sub>, r<sub>i</sub>]</code>, determine the count of <strong>peak</strong> elements in the <span data-keyword=\"subarray\">subarray</span> <code>nums[l<sub>i</sub>..r<sub>i</sub>]</code>.<!-- notionvc: 73b20b7c-e1ab-4dac-86d0-13761094a9ae --></li>\n\t<li><code>queries[i] = [2, index<sub>i</sub>, val<sub>i</sub>]</code>, change <code>nums[index<sub>i</sub>]</code> to <code><font face=\"monospace\">val<sub>i</sub></font></code>.</li>\n</ul>\n\n<p>Return an array <code>answer</code> containing the results of the queries of the first type in order.<!-- notionvc: a9ccef22-4061-4b5a-b4cc-a2b2a0e12f30 --></p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>The <strong>first</strong> and the <strong>last</strong> element of an array or a subarray<!-- notionvc: fcffef72-deb5-47cb-8719-3a3790102f73 --> <strong>cannot</strong> be a peak.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,1,4,2,5], queries = [[2,3,4],[1,0,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>First query: We change <code>nums[3]</code> to 4 and <code>nums</code> becomes <code>[3,1,4,4,5]</code>.</p>\n\n<p>Second query: The number of peaks in the <code>[3,1,4,4,5]</code> is 0.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,1,4,2,1,5], queries = [[2,2,4],[1,0,2],[1,0,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>First query: <code>nums[2]</code> should become 4, but it is already set to 4.</p>\n\n<p>Second query: The number of peaks in the <code>[4,1,4]</code> is 0.</p>\n\n<p>Third query: The second 4 is a peak in the <code>[4,1,4,2,1]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i][0] == 1</code> or <code>queries[i][0] == 2</code></li>\n\t<li>For all <code>i</code> that:\n\t<ul>\n\t\t<li><code>queries[i][0] == 1</code>: <code>0 &lt;= queries[i][1] &lt;= queries[i][2] &lt;= nums.length - 1</code></li>\n\t\t<li><code>queries[i][0] == 2</code>: <code>0 &lt;= queries[i][1] &lt;= nums.length - 1</code>, <code>1 &lt;= queries[i][2] &lt;= 10<sup>5</sup></code></li>\n\t</ul>\n\t</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 90,
            "dislikes": 7,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.3K\", \"totalSubmission\": \"28.1K\", \"totalAcceptedRaw\": 7341, \"totalSubmissionRaw\": 28078, \"acRate\": \"26.1%\"}",
            "hints": [
                "Let <code>p[i]</code> be whether <code>nums[i]</code> is a peak in the original array. Namely <code>p[i] = nums[i] > nums[i - 1] && nums[i] > nums[i + 1]</code>.",
                "Updating <code>nums[i]</code>, only affects <code>p[i]</code>, <code>p[i - 1]</code> and <code>p[i + 1]</code>. We can recalculate the 3 values in constant time.",
                "The answer for <code>[l<sub>i</sub>, r<sub>i</sub>]</code> is <code>p[l<sub>i</sub> + 1] + p[l<sub>i</sub> + 2] + \u2026 + p[r<sub>i</sub> - 1]</code> (note that <code>l<sub>i</sub></code> and <code>r<sub>i</sub></code> are not included).",
                "Use some data structures (i.e. segment tree or binary indexed tree) to maintain the subarray sum efficiently."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and a 2D integer array `queries`, process the queries. A peak element in a subarray `nums[l..r]` is an element that is greater than its adjacent elements. There are two types of queries:\n\n1.  `queries[i] = [1, l_i, r_i]`: Determine the count of peak elements in the subarray `nums[l_i..r_i]`. The first and last elements of a subarray cannot be considered peaks.\n2.  `queries[i] = [2, index_i, val_i]`: Change `nums[index_i]` to `val_i`.\n\nReturn an array `answer` containing the results of the queries of the first type in order.",
                "constraints": [
                    "3 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^5",
                    "1 <= queries.length <= 10^5",
                    "queries[i][0] == 1 or queries[i][0] == 2",
                    "For all i that:\n  - queries[i][0] == 1: 0 <= queries[i][1] <= queries[i][2] <= nums.length - 1\n  - queries[i][0] == 2: 0 <= queries[i][1] <= nums.length - 1, 1 <= queries[i][2] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "nums = [3,1,4,2,5], queries = [[2,3,4],[1,0,4]]",
                        "output": "[0]",
                        "explanation": "First query: nums[3] is changed to 4, resulting in nums = [3,1,4,4,5].\nSecond query: In the subarray [3,1,4,4,5], there are no peak elements because no element is greater than its adjacent elements."
                    },
                    {
                        "input": "nums = [4,1,4,2,1,5], queries = [[2,2,4],[1,0,2],[1,0,4]]",
                        "output": "[0,1]",
                        "explanation": "First query: nums[2] remains 4.\nSecond query: In the subarray [4,1,4], there are no peak elements.\nThird query: In the subarray [4,1,4,2,1], the second 4 is a peak element because 4 > 1 and 4 > 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Let <code>p[i]</code> be whether <code>nums[i]</code> is a peak in the original array. Namely <code>p[i] = nums[i] > nums[i - 1] && nums[i] > nums[i + 1]</code>.",
            "Updating <code>nums[i]</code>, only affects <code>p[i]</code>, <code>p[i - 1]</code> and <code>p[i + 1]</code>. We can recalculate the 3 values in constant time.",
            "The answer for <code>[l<sub>i</sub>, r<sub>i</sub>]</code> is <code>p[l<sub>i</sub> + 1] + p[l<sub>i</sub> + 2] + \u2026 + p[r<sub>i</sub> - 1]</code> (note that <code>l<sub>i</sub></code> and <code>r<sub>i</sub></code> are not included).",
            "Use some data structures (i.e. segment tree or binary indexed tree) to maintain the subarray sum efficiently."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class FenwickTree {\n public:\n  FenwickTree(int n) : sums(n + 1) {}\n\n  void add(int i, int delta) {\n    while (i < sums.size()) {\n      sums[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  int get(int i) const {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n\n private:\n  vector<int> sums;\n\n  static inline int lowbit(int i) {\n    return i & -i;\n  }\n};\n\nclass Solution {\n public:\n  vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n    vector<int> ans;\n    vector<int> peak = getPeak(nums);\n    FenwickTree tree(peak.size());\n\n    for (int i = 0; i < peak.size(); ++i)\n      tree.add(i + 1, peak[i]);\n\n    // Update the peak array and Fenwick tree if the peak status of nums[i]\n    // changes.\n    auto update = [&](int i) {\n      const int newPeak = isPeak(nums, i);\n      if (newPeak != peak[i]) {\n        tree.add(i + 1, newPeak - peak[i]);\n        peak[i] = newPeak;\n      }\n    };\n\n    for (const vector<int>& query : queries)\n      if (query[0] == 1) {\n        const int l = query[1];\n        const int r = query[2];\n        ans.push_back(r - l < 2 ? 0 : tree.get(r) - tree.get(l + 1));\n      } else if (query[0] == 2) {\n        const int index = query[1];\n        const int val = query[2];\n        nums[index] = val;\n        update(index);\n        if (index > 0)\n          update(index - 1);\n        if (index + 1 < nums.size())\n          update(index + 1);\n      }\n\n    return ans;\n  }\n\n private:\n  vector<int> getPeak(const vector<int>& nums) {\n    vector<int> peak(nums.size());\n    for (int i = 1; i + 1 < nums.size(); ++i)\n      peak[i] = nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    return peak;\n  }\n\n  bool isPeak(const vector<int>& nums, int i) {\n    return i > 0 && i + 1 < nums.size() && nums[i] > nums[i - 1] &&\n           nums[i] > nums[i + 1];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class FenwickTree {\n  public FenwickTree(int n) {\n    sums = new int[n + 1];\n  }\n\n  public void add(int i, int delta) {\n    while (i < sums.length) {\n      sums[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  public int get(int i) {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n\n  private int[] sums;\n\n  private static int lowbit(int i) {\n    return i & -i;\n  }\n}\n\nclass Solution {\n  public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n    List<Integer> ans = new ArrayList<>();\n    int[] peak = getPeak(nums);\n    FenwickTree tree = new FenwickTree(peak.length);\n\n    for (int i = 0; i < peak.length; ++i)\n      tree.add(i + 1, peak[i]);\n\n    // Update the peak array and Fenwick tree if the peak status of nums[i]\n    // changes.\n    for (int[] query : queries) {\n      if (query[0] == 1) {\n        final int l = query[1];\n        final int r = query[2];\n        ans.add(r - l < 2 ? 0 : tree.get(r) - tree.get(l + 1));\n      } else if (query[0] == 2) {\n        final int index = query[1];\n        final int val = query[2];\n        nums[index] = val;\n        update(nums, peak, tree, index);\n        if (index > 0)\n          update(nums, peak, tree, index - 1);\n        if (index + 1 < nums.length)\n          update(nums, peak, tree, index + 1);\n      }\n    }\n\n    return ans;\n  }\n\n  private void update(int[] nums, int[] peak, FenwickTree tree, int i) {\n    final int newPeak = isPeak(nums, i) ? 1 : 0;\n    if (newPeak != peak[i]) {\n      tree.add(i + 1, newPeak - peak[i]);\n      peak[i] = newPeak;\n    }\n  }\n\n  private int[] getPeak(int[] nums) {\n    int[] peak = new int[nums.length];\n    for (int i = 1; i + 1 < nums.length; i++)\n      peak[i] = nums[i] > nums[i - 1] && nums[i] > nums[i + 1] ? 1 : 0;\n    return peak;\n  }\n\n  private boolean isPeak(int[] nums, int i) {\n    return i > 0 && i + 1 < nums.length && nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class FenwickTree:\n  def __init__(self, n: int):\n    self.sums = [0] * (n + 1)\n\n  def add(self, i: int, delta: int) -> None:\n    while i < len(self.sums):\n      self.sums[i] += delta\n      i += FenwickTree.lowbit(i)\n\n  def get(self, i: int) -> int:\n    summ = 0\n    while i > 0:\n      summ += self.sums[i]\n      i -= FenwickTree.lowbit(i)\n    return summ\n\n  @staticmethod\n  def lowbit(i: int) -> int:\n    return i & -i\n\n\nclass Solution:\n  def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n    ans = []\n    peak = [0] + [int(a < b > c)\n                  for a, b, c in zip(nums[:-2], nums[1:-1], nums[2:])] + [0]\n    tree = FenwickTree(len(peak))\n\n    for i, p in enumerate(peak):\n      tree.add(i + 1, p)\n\n    def update(i: int) -> None:\n      \"\"\"\n      Update the peak array and Fenwick tree if the peak status of nums[i]\n      changes.\n      \"\"\"\n      newPeak = self._isPeak(nums, i)\n      if newPeak != peak[i]:\n        tree.add(i + 1, newPeak - peak[i])\n        peak[i] = newPeak\n\n    for query in queries:\n      if query[0] == 1:\n        l = query[1]\n        r = query[2]\n        ans.append(0 if r - l < 2 else tree.get(r) - tree.get(l + 1))\n      elif query[0] == 2:\n        index = query[1]\n        val = query[2]\n        nums[index] = val\n        update(index)\n        if index > 0:\n          update(index - 1)\n        if index + 1 < len(nums):\n          update(index + 1)\n\n    return ans\n\n  def _isPeak(self, nums: List[int], i: int) -> bool:\n    return i > 0 and i + 1 < len(nums) and nums[i - 1] < nums[i] > nums[i + 1]\n",
                "lang_text": "py"
            }
        }
    }
}