{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "284",
            "title": "Peeking Iterator",
            "titleSlug": "peeking-iterator",
            "content": "<p>Design an iterator that supports the <code>peek</code> operation on an existing iterator in addition to the <code>hasNext</code> and the <code>next</code> operations.</p>\n\n<p>Implement the <code>PeekingIterator</code> class:</p>\n\n<ul>\n\t<li><code>PeekingIterator(Iterator&lt;int&gt; nums)</code> Initializes the object with the given integer iterator <code>iterator</code>.</li>\n\t<li><code>int next()</code> Returns the next element in the array and moves the pointer to the next element.</li>\n\t<li><code>boolean hasNext()</code> Returns <code>true</code> if there are still elements in the array.</li>\n\t<li><code>int peek()</code> Returns the next element in the array <strong>without</strong> moving the pointer.</li>\n</ul>\n\n<p><strong>Note:</strong> Each language may have a different implementation of the constructor and <code>Iterator</code>, but they all support the <code>int next()</code> and <code>boolean hasNext()</code> functions.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;PeekingIterator&quot;, &quot;next&quot;, &quot;peek&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;]\n[[[1, 2, 3]], [], [], [], [], []]\n<strong>Output</strong>\n[null, 1, 2, 2, 3, false]\n\n<strong>Explanation</strong>\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [<u><strong>1</strong></u>,2,3]\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,<u><strong>2</strong></u>,3].\npeekingIterator.peek();    // return 2, the pointer does not move [1,<u><strong>2</strong></u>,3].\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,<u><strong>3</strong></u>]\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li>All the calls to <code>next</code> and <code>peek</code> are valid.</li>\n\t<li>At most <code>1000</code> calls will be made to <code>next</code>, <code>hasNext</code>, and <code>peek</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> How would you extend your design to be generic and work with all types, not just integer?",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1814,
            "dislikes": 1029,
            "similarQuestions": "[{\"title\": \"Binary Search Tree Iterator\", \"titleSlug\": \"binary-search-tree-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Flatten 2D Vector\", \"titleSlug\": \"flatten-2d-vector\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Zigzag Iterator\", \"titleSlug\": \"zigzag-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Iterator",
                    "slug": "iterator"
                }
            ],
            "stats": "{\"totalAccepted\": \"214.4K\", \"totalSubmission\": \"362.4K\", \"totalAcceptedRaw\": 214361, \"totalSubmissionRaw\": 362360, \"acRate\": \"59.2%\"}",
            "hints": [
                "Think of \"looking ahead\". You want to cache the next element.",
                "Is one variable sufficient? Why or why not?",
                "Test your design with call order of <code>peek()</code> before <code>next()</code> vs <code>next()</code> before <code>peek()</code>.",
                "For a clean implementation, check out <a href=\"https://github.com/google/guava/blob/703ef758b8621cfbab16814f01ddcc5324bdea33/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java#L1125\" target=\"_blank\">Google's guava library source code</a>."
            ],
            "rephrased": {
                "body": "Design an iterator that extends the functionality of a standard iterator with a `peek` operation. This `peek` operation allows you to view the next element without advancing the iterator's position. You need to implement the `PeekingIterator` class with the following methods:\n\n*   `PeekingIterator(Iterator<Integer> nums)`: Initializes the `PeekingIterator` with an existing integer iterator.\n*   `int next()`: Returns the next element and advances the iterator.\n*   `boolean hasNext()`: Returns `true` if there are more elements, `false` otherwise.\n*   `int peek()`: Returns the next element without advancing the iterator.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "1 <= nums[i] <= 1000",
                    "All calls to `next` and `peek` are valid.",
                    "At most 1000 calls will be made to `next`, `hasNext`, and `peek`."
                ],
                "testcases": [
                    {
                        "input": "[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n[[[1, 2, 3]], [], [], [], [], []]",
                        "output": "[null, 1, 2, 2, 3, false]",
                        "explanation": "The `PeekingIterator` is initialized with the array [1, 2, 3]. The first `next()` call returns 1. The `peek()` call returns 2 without moving the iterator. The second `next()` call returns 2. The third `next()` call returns 3. Finally, `hasNext()` returns `false` because there are no more elements."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "binary-search-tree-iterator",
                "title": "Binary Search Tree Iterator",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "flatten-2d-vector",
                "title": "Flatten 2D Vector",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "zigzag-iterator",
                "title": "Zigzag Iterator",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Think of \"looking ahead\". You want to cache the next element.",
            "Is one variable sufficient? Why or why not?",
            "Test your design with call order of <code>peek()</code> before <code>next()</code> vs <code>next()</code> before <code>peek()</code>.",
            "For a clean implementation, check out <a href=\"https://github.com/google/guava/blob/703ef758b8621cfbab16814f01ddcc5324bdea33/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java#L1125\" target=\"_blank\">Google's guava library source code</a>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Iterator",
                "slug": "iterator"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class PeekingIterator : public Iterator {\n public:\n  PeekingIterator(const vector<int>& nums) : Iterator(nums) {}\n\n  // Returns the next element in the iteration without advancing the iterator.\n  int peek() {\n    // Iterator(*this) makes a copy of current iterator, then call next on the\n    // Copied iterator to get the next value without affecting current iterator\n    return Iterator(*this).next();\n  }\n\n  // hasNext() and next() should behave the same as in the Iterator interface.\n  // Override them if needed.\n  int next() {\n    return Iterator::next();\n  }\n\n  bool hasNext() const {\n    return Iterator::hasNext();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Java Iterator interface reference:\n// Https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\n\nclass PeekingIterator implements Iterator<Integer> {\n  public PeekingIterator(Iterator<Integer> iterator) {\n    this.iterator = iterator;\n    buffer = iterator.hasNext() ? iterator.next() : null;\n  }\n\n  // Returns the next element in the iteration without advancing the iterator.\n  public Integer peek() {\n    return buffer;\n  }\n\n  // hasNext() and next() should behave the same as in the Iterator interface.\n  // Override them if needed.\n  @Override\n  public Integer next() {\n    Integer next = buffer;\n    buffer = iterator.hasNext() ? iterator.next() : null;\n    return next;\n  }\n\n  @Override\n  public boolean hasNext() {\n    return buffer != null;\n  }\n\n  private Iterator<Integer> iterator;\n  private Integer buffer;\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class PeekingIterator:\n  def __init__(self, iterator: Iterator):\n    self.iterator = iterator\n    self.buffer = self.iterator.next() if self.iterator.hasNext() else None\n\n  def peek(self) -> int:\n    \"\"\"\n    Returns the next element in the iteration without advancing the iterator.\n    \"\"\"\n    return self.buffer\n\n  def next(self) -> int:\n    next = self.buffer\n    self.buffer = self.iterator.next() if self.iterator.hasNext() else None\n    return next\n\n  def hasNext(self) -> bool:\n    return self.buffer is not None\n",
                "lang_text": "py"
            }
        }
    }
}