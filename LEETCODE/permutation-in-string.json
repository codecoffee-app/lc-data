{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "567",
            "title": "Permutation in String",
            "titleSlug": "permutation-in-string",
            "content": "<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>true</code><em> if </em><code>s2</code><em> contains a permutation of </em><code>s1</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>In other words, return <code>true</code> if one of <code>s1</code>&#39;s permutations is the substring of <code>s2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;ab&quot;, s2 = &quot;eidbaooo&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> s2 contains one permutation of s1 (&quot;ba&quot;).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;ab&quot;, s2 = &quot;eidboaoo&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10928,
            "dislikes": 367,
            "similarQuestions": "[{\"title\": \"Minimum Window Substring\", \"titleSlug\": \"minimum-window-substring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find All Anagrams in a String\", \"titleSlug\": \"find-all-anagrams-in-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"775.1K\", \"totalSubmission\": \"1.8M\", \"totalAcceptedRaw\": 775140, \"totalSubmissionRaw\": 1752831, \"acRate\": \"44.2%\"}",
            "hints": [
                "Obviously, brute force will result in TLE. Think of something else.",
                "How will you check whether one string is a permutation of another string?",
                "One way is to sort the string and then compare. But, Is there a better way?",
                "If one string is a permutation of another string then they must one common metric. What is that?",
                "Both strings must have same character frequencies, if  one is permutation of another. Which data structure should be used to store frequencies?",
                "What about hash table?  An array of size 26?"
            ],
            "rephrased": {
                "body": "Given two strings `s1` and `s2`, determine if `s2` contains any permutation of `s1` as a substring.",
                "constraints": [
                    "1 <= s1.length, s2.length <= 10<sup>4</sup>",
                    "s1 and s2 consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"ab\", s2 = \"eidbaooo\"",
                        "output": "true",
                        "explanation": "The string \"ba\" is a permutation of \"ab\" and is present as a substring in \"eidbaooo\"."
                    },
                    {
                        "input": "s1 = \"ab\", s2 = \"eidboaoo\"",
                        "output": "false",
                        "explanation": "No permutation of \"ab\" (either \"ab\" or \"ba\") is present as a substring in \"eidboaoo\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-window-substring",
                "title": "Minimum Window Substring",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-all-anagrams-in-a-string",
                "title": "Find All Anagrams in a String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Obviously, brute force will result in TLE. Think of something else.",
            "How will you check whether one string is a permutation of another string?",
            "One way is to sort the string and then compare. But, Is there a better way?",
            "If one string is a permutation of another string then they must one common metric. What is that?",
            "Both strings must have same character frequencies, if  one is permutation of another. Which data structure should be used to store frequencies?",
            "What about hash table?  An array of size 26?"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool checkInclusion(string s1, string s2) {\n    vector<int> count(128);\n    int required = s1.length();\n\n    for (const char c : s1)\n      ++count[c];\n\n    for (int l = 0, r = 0; r < s2.length(); ++r) {\n      if (--count[s2[r]] >= 0)\n        --required;\n      while (required == 0) {\n        if (r - l + 1 == s1.length())\n          return true;\n        if (++count[s2[l++]] > 0)\n          ++required;\n      }\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean checkInclusion(String s1, String s2) {\n    int[] count = new int[128];\n    int required = s1.length();\n\n    for (final char c : s1.toCharArray())\n      ++count[c];\n\n    for (int l = 0, r = 0; r < s2.length(); ++r) {\n      if (--count[s2.charAt(r)] >= 0)\n        --required;\n      while (required == 0) {\n        if (r - l + 1 == s1.length())\n          return true;\n        if (++count[s2.charAt(l++)] > 0)\n          ++required;\n      }\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}