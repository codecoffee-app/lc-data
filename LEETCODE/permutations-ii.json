{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "47",
            "title": "Permutations II",
            "titleSlug": "permutations-ii",
            "content": "<p>Given a collection of numbers, <code>nums</code>,&nbsp;that might contain duplicates, return <em>all possible unique permutations <strong>in any order</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong>\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 8</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8265,
            "dislikes": 137,
            "similarQuestions": "[{\"title\": \"Next Permutation\", \"titleSlug\": \"next-permutation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Permutations\", \"titleSlug\": \"permutations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Palindrome Permutation II\", \"titleSlug\": \"palindrome-permutation-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Squareful Arrays\", \"titleSlug\": \"number-of-squareful-arrays\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"865.3K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 865290, \"totalSubmissionRaw\": 1480129, \"acRate\": \"58.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a collection of numbers, `nums`, that might contain duplicates, find all possible unique permutations. Return the permutations in any order.",
                "constraints": [
                    "1 <= nums.length <= 8",
                    "-10 <= nums[i] <= 10"
                ],
                "testcases": [
                    {
                        "input": "[1,1,2]",
                        "output": "[[1,1,2],[1,2,1],[2,1,1]]",
                        "explanation": null
                    },
                    {
                        "input": "[1,2,3]",
                        "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "next-permutation",
                "title": "Next Permutation",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "permutations",
                "title": "Permutations",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "palindrome-permutation-ii",
                "title": "Palindrome Permutation II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-squareful-arrays",
                "title": "Number of Squareful Arrays",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> permuteUnique(vector<int>& nums) {\n    vector<vector<int>> ans;\n    std::ranges::sort(nums);\n    dfs(nums, vector<bool>(nums.size()), {}, ans);\n    return ans;\n  }\n\n private:\n  void dfs(const vector<int>& nums, vector<bool>&& used, vector<int>&& path,\n           vector<vector<int>>& ans) {\n    if (path.size() == nums.size()) {\n      ans.push_back(path);\n      return;\n    }\n\n    for (int i = 0; i < nums.size(); ++i) {\n      if (used[i])\n        continue;\n      if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])\n        continue;\n      used[i] = true;\n      path.push_back(nums[i]);\n      dfs(nums, move(used), move(path), ans);\n      path.pop_back();\n      used[i] = false;\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> permuteUnique(int[] nums) {\n    List<List<Integer>> ans = new ArrayList<>();\n    Arrays.sort(nums);\n    dfs(nums, new boolean[nums.length], new ArrayList<>(), ans);\n    return ans;\n  }\n\n  private void dfs(int[] nums, boolean[] used, List<Integer> path, List<List<Integer>> ans) {\n    if (path.size() == nums.length) {\n      ans.add(new ArrayList<>(path));\n      return;\n    }\n\n    for (int i = 0; i < nums.length; ++i) {\n      if (used[i])\n        continue;\n      if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])\n        continue;\n      used[i] = true;\n      path.add(nums[i]);\n      dfs(nums, used, path, ans);\n      path.remove(path.size() - 1);\n      used[i] = false;\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n    ans = []\n    used = [False] * len(nums)\n\n    def dfs(path: List[int]) -> None:\n      if len(path) == len(nums):\n        ans.append(path.copy())\n        return\n\n      for i, num in enumerate(nums):\n        if used[i]:\n          continue\n        if i > 0 and nums[i] == nums[i - 1] and not used[i - 1]:\n          continue\n        used[i] = True\n        path.append(num)\n        dfs(path)\n        path.pop()\n        used[i] = False\n\n    nums.sort()\n    dfs([])\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}