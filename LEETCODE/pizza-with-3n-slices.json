{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1388",
            "title": "Pizza With 3n Slices",
            "titleSlug": "pizza-with-3n-slices",
            "content": "<p>There is a pizza with <code>3n</code> slices of varying size, you and your friends will take slices of pizza as follows:</p>\n\n<ul>\n\t<li>You will pick <strong>any</strong> pizza slice.</li>\n\t<li>Your friend Alice will pick the next slice in the anti-clockwise direction of your pick.</li>\n\t<li>Your friend Bob will pick the next slice in the clockwise direction of your pick.</li>\n\t<li>Repeat until there are no more slices of pizzas.</li>\n</ul>\n\n<p>Given an integer array <code>slices</code> that represent the sizes of the pizza slices in a clockwise direction, return <em>the maximum possible sum of slice sizes that you can pick</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/18/sample_3_1723.png\" style=\"width: 500px; height: 266px;\" />\n<pre>\n<strong>Input:</strong> slices = [1,2,3,4,5,6]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/18/sample_4_1723.png\" style=\"width: 500px; height: 299px;\" />\n<pre>\n<strong>Input:</strong> slices = [8,9,8,6,1,1]\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 * n == slices.length</code></li>\n\t<li><code>1 &lt;= slices.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= slices[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1015,
            "dislikes": 16,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.2K\", \"totalSubmission\": \"41.3K\", \"totalAcceptedRaw\": 21199, \"totalSubmissionRaw\": 41282, \"acRate\": \"51.4%\"}",
            "hints": [
                "By studying the pattern of the operations, we can find out that the problem is equivalent to: Given an integer array with size 3N, select N integers with maximum sum and any selected integers are not next to each other in the array.",
                "The first one in the array is considered next to the last one in the array. Use Dynamic Programming to solve it."
            ],
            "rephrased": {
                "body": "You are given a pizza divided into `3n` slices of varying sizes, represented by the array `slices`. You, Alice, and Bob will take turns picking slices. In each turn:\n\n*   You choose **any** available slice.\n*   Alice takes the next slice in the anti-clockwise direction.\n*   Bob takes the next slice in the clockwise direction.\n\nThis process repeats until all slices are gone. Your goal is to maximize the total size of the slices you pick. Return the maximum possible sum of slice sizes you can obtain.",
                "constraints": [
                    "3 * n == slices.length",
                    "1 <= slices.length <= 500",
                    "1 <= slices[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4,5,6]",
                        "output": "10",
                        "explanation": "One optimal strategy: Pick slice of size 4, Alice and Bob pick slices with sizes 3 and 5. Then pick slice with size 6, Alice and Bob pick slices of sizes 2 and 1. Total sum: 4 + 6 = 10."
                    },
                    {
                        "input": "[8,9,8,6,1,1]",
                        "output": "16",
                        "explanation": "One optimal strategy: Pick slices of size 8 in each turn. Picking the slice with size 9 would force Alice and Bob to pick slices of size 8, resulting in a lower total sum."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "By studying the pattern of the operations, we can find out that the problem is equivalent to: Given an integer array with size 3N, select N integers with maximum sum and any selected integers are not next to each other in the array.",
            "The first one in the array is considered next to the last one in the array. Use Dynamic Programming to solve it."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSizeSlices(self, slices: List[int]) -> int:\n    # dp(i, j, k) := max sum of slices if you can pick k slices from slices[i:j]\n    @functools.lru_cache(None)\n    def dp(i: int, j: int, k: int) -> int:\n      if k == 1:\n        return max(slices[i:j])\n      # Note that j - i is not the number of all the left slices. Since you\n      # Might have chosen not to take a slice in a previous step, there would be\n      # Leftovers outside [i:j]. If you take slices[i], one of the slices your\n      # Friends take will be outside of [i:j], so the length of [i:j] is reduced\n      # By 2 instead of 3. Therefore, the min # Is 2 * k - 1 (the last step only\n      # Requires one slice).\n      if j - i < 2 * k - 1:\n        return -math.inf\n      return max(slices[i] + dp(i + 2, j, k - 1),\n                 dp(i + 1, j, k))\n\n    k = len(slices) // 3\n    return max(dp(0, len(slices) - 1, k),\n               dp(1, len(slices), k))\n",
                "lang_text": "py"
            }
        }
    }
}