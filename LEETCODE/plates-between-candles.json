{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2055",
            "title": "Plates Between Candles",
            "titleSlug": "plates-between-candles",
            "content": "<p>There is a long table with a line of plates and candles arranged on top of it. You are given a <strong>0-indexed</strong> string <code>s</code> consisting of characters <code>&#39;*&#39;</code> and <code>&#39;|&#39;</code> only, where a <code>&#39;*&#39;</code> represents a <strong>plate</strong> and a <code>&#39;|&#39;</code> represents a <strong>candle</strong>.</p>\n\n<p>You are also given a <strong>0-indexed</strong> 2D integer array <code>queries</code> where <code>queries[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> denotes the <strong>substring</strong> <code>s[left<sub>i</sub>...right<sub>i</sub>]</code> (<strong>inclusive</strong>). For each query, you need to find the <strong>number</strong> of plates <strong>between candles</strong> that are <strong>in the substring</strong>. A plate is considered <strong>between candles</strong> if there is at least one candle to its left <strong>and</strong> at least one candle to its right <strong>in the substring</strong>.</p>\n\n<ul>\n\t<li>For example, <code>s = &quot;||**||**|*&quot;</code>, and a query <code>[3, 8]</code> denotes the substring <code>&quot;*||<strong><u>**</u></strong>|&quot;</code>. The number of plates between candles in this substring is <code>2</code>, as each of the two plates has at least one candle <strong>in the substring</strong> to its left <strong>and</strong> right.</li>\n</ul>\n\n<p>Return <em>an integer array</em> <code>answer</code> <em>where</em> <code>answer[i]</code> <em>is the answer to the</em> <code>i<sup>th</sup></code> <em>query</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"ex-1\" src=\"https://assets.leetcode.com/uploads/2021/10/04/ex-1.png\" style=\"width: 400px; height: 134px;\" />\n<pre>\n<strong>Input:</strong> s = &quot;**|**|***|&quot;, queries = [[2,5],[5,9]]\n<strong>Output:</strong> [2,3]\n<strong>Explanation:</strong>\n- queries[0] has two plates between candles.\n- queries[1] has three plates between candles.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"ex-2\" src=\"https://assets.leetcode.com/uploads/2021/10/04/ex-2.png\" style=\"width: 600px; height: 193px;\" />\n<pre>\n<strong>Input:</strong> s = &quot;***|**|*****|**||**|*&quot;, queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]\n<strong>Output:</strong> [9,0,0,0,0]\n<strong>Explanation:</strong>\n- queries[0] has nine plates between candles.\n- The other queries have zero plates between candles.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of <code>&#39;*&#39;</code> and <code>&#39;|&#39;</code> characters.</li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt; s.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1110,
            "dislikes": 47,
            "similarQuestions": "[{\"title\": \"Find First and Last Position of Element in Sorted Array\", \"titleSlug\": \"find-first-and-last-position-of-element-in-sorted-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Can Make Palindrome from Substring\", \"titleSlug\": \"can-make-palindrome-from-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.1K\", \"totalSubmission\": \"86K\", \"totalAcceptedRaw\": 38131, \"totalSubmissionRaw\": 85969, \"acRate\": \"44.4%\"}",
            "hints": [
                "Can you find the indices of the most left and right candles for a given substring, perhaps by using binary search (or better) over an array of indices of all the bars?",
                "Once the indices of the most left and right bars are determined, how can you efficiently count the number of plates within the range? Prefix sums?"
            ],
            "rephrased": {
                "body": "You are given a 0-indexed string `s` consisting of characters '*' (plate) and '|' (candle). Given a 0-indexed 2D integer array `queries` where `queries[i] = [left_i, right_i]` denotes the substring `s[left_i...right_i]` (inclusive), find the number of plates between candles in each substring. A plate is between candles if there's at least one candle to its left and one to its right within the substring. Return an integer array `answer` where `answer[i]` is the answer to the i-th query.",
                "constraints": [
                    "3 <= s.length <= 10^5",
                    "s consists of '*' and '|' characters.",
                    "1 <= queries.length <= 10^5",
                    "queries[i].length == 2",
                    "0 <= left_i <= right_i < s.length"
                ],
                "testcases": [
                    {
                        "input": "s = \"**|**|***|\", queries = [[2,5],[5,9]]",
                        "output": "[2,3]",
                        "explanation": "For the first query [2, 5], the substring is \"|**|\", which contains two plates between candles. For the second query [5, 9], the substring is \"*|***\", which contains three plates between candles."
                    },
                    {
                        "input": "s = \"***|**|*****|**||**|*\", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]",
                        "output": "[9,0,0,0,0]",
                        "explanation": "For the first query [1, 17], the substring is \"**|**|*****|**||**|*\", which contains nine plates between candles. The other queries do not contain any plates between candles."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
                "title": "Find First and Last Position of Element in Sorted Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "can-make-palindrome-from-substring",
                "title": "Can Make Palindrome from Substring",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can you find the indices of the most left and right candles for a given substring, perhaps by using binary search (or better) over an array of indices of all the bars?",
            "Once the indices of the most left and right bars are determined, how can you efficiently count the number of plates within the range? Prefix sums?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> platesBetweenCandles(string s, vector<vector<int>>& queries) {\n    vector<int> ans;\n    vector<int> A;  // Indices of '|'\n\n    for (int i = 0; i < s.length(); ++i)\n      if (s[i] == '|')\n        A.push_back(i);\n\n    for (const vector<int>& query : queries) {\n      const int left = query[0];\n      const int right = query[1];\n      const int l = lower_bound(A.begin(), A.end(), left) - A.begin();\n      const int r = upper_bound(A.begin(), A.end(), right) - A.begin() - 1;\n      if (l < r) {\n        const int lengthBetweenCandles = A[r] - A[l] + 1;\n        const int numCandles = r - l + 1;\n        ans.push_back(lengthBetweenCandles - numCandles);\n      } else {\n        ans.push_back(0);\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] platesBetweenCandles(String s, int[][] queries) {\n    int[] ans = new int[queries.length];\n    List<Integer> A = new ArrayList<>(); // Indices of '|'\n\n    for (int i = 0; i < s.length(); ++i)\n      if (s.charAt(i) == '|')\n        A.add(i);\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int left = queries[i][0];\n      final int right = queries[i][1];\n      final int l = firstGreaterEqual(A, left);\n      final int r = firstGreaterEqual(A, right + 1) - 1;\n      if (l < r) {\n        final int lengthBetweenCandles = A.get(r) - A.get(l) + 1;\n        final int numCandles = r - l + 1;\n        ans[i] = lengthBetweenCandles - numCandles;\n      }\n    }\n\n    return ans;\n  }\n\n  private int firstGreaterEqual(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def platesBetweenCandles(self, s: str, queries: List[List[int]]) -> List[int]:\n    ans = []\n    A = [i for i, c in enumerate(s) if c == '|']  # Indices of '|'\n\n    for left, right in queries:\n      l = bisect_left(A, left)\n      r = bisect_right(A, right) - 1\n      if l < r:\n        lengthBetweenCandles = A[r] - A[l] + 1\n        numCandles = r - l + 1\n        ans.append(lengthBetweenCandles - numCandles)\n      else:\n        ans.append(0)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}