{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "886",
            "title": "Possible Bipartition",
            "titleSlug": "possible-bipartition",
            "content": "<p>We want to split a group of <code>n</code> people (labeled from <code>1</code> to <code>n</code>) into two groups of <strong>any size</strong>. Each person may dislike some other people, and they should not go into the same group.</p>\n\n<p>Given the integer <code>n</code> and the array <code>dislikes</code> where <code>dislikes[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that the person labeled <code>a<sub>i</sub></code> does not like the person labeled <code>b<sub>i</sub></code>, return <code>true</code> <em>if it is possible to split everyone into two groups in this way</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, dislikes = [[1,2],[1,3],[2,4]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The first group has [1,4], and the second group has [2,3].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, dislikes = [[1,2],[1,3],[2,3]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We need at least 3 groups to divide them. We cannot put them in two groups.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2000</code></li>\n\t<li><code>0 &lt;= dislikes.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>dislikes[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= n</code></li>\n\t<li>All the pairs of <code>dislikes</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4569,
            "dislikes": 106,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"199.4K\", \"totalSubmission\": \"395.6K\", \"totalAcceptedRaw\": 199445, \"totalSubmissionRaw\": 395561, \"acRate\": \"50.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a group of `n` people (labeled from 1 to `n`), determine if they can be split into two groups of any size such that no two people who dislike each other are in the same group. You are provided with an integer `n` and an array `dislikes` where `dislikes[i] = [a_i, b_i]` indicates that person `a_i` dislikes person `b_i`. Return `true` if it's possible to split everyone into two groups, and `false` otherwise.",
                "constraints": [
                    "1 <= n <= 2000",
                    "0 <= dislikes.length <= 10^4",
                    "dislikes[i].length == 2",
                    "1 <= a_i < b_i <= n",
                    "All pairs in `dislikes` are unique."
                ],
                "testcases": [
                    {
                        "input": "n = 4, dislikes = [[1,2],[1,3],[2,4]]",
                        "output": "true",
                        "explanation": "One possible valid split is Group 1: [1, 4], Group 2: [2, 3]. No two people who dislike each other are in the same group."
                    },
                    {
                        "input": "n = 3, dislikes = [[1,2],[1,3],[2,3]]",
                        "output": "false",
                        "explanation": "It is impossible to divide the people into only two groups while satisfying the dislike constraints.  At least three groups are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "enum Color { kWhite, kRed, kGreen };\n\nclass Solution {\n public:\n  bool possibleBipartition(int n, vector<vector<int>>& dislikes) {\n    vector<vector<int>> graph(n + 1);\n    vector<Color> colors(n + 1, Color::kWhite);\n\n    for (const vector<int>& d : dislikes) {\n      const int u = d[0];\n      const int v = d[1];\n      graph[u].push_back(v);\n      graph[v].push_back(u);\n    }\n\n    // Reduce to 785. Is Graph Bipartite?\n    for (int i = 1; i <= n; ++i)\n      if (colors[i] == Color::kWhite &&\n          !isValidColor(graph, i, colors, Color::kRed))\n        return false;\n\n    return true;\n  }\n\n private:\n  bool isValidColor(const vector<vector<int>>& graph, int u,\n                    vector<Color>& colors, Color color) {\n    // The painted color should be same as the `color`\n    if (colors[u] != Color::kWhite)\n      return colors[u] == color;\n\n    colors[u] = color;  // Always paint w/ `color`\n\n    // All children should have valid colors\n    for (const int v : graph[u])\n      if (!isValidColor(graph, v, colors,\n                        color == Color::kRed ? Color::kGreen : Color::kRed))\n        return false;\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "enum Color { kWhite, kRed, kGreen }\n\nclass Solution {\n  public boolean possibleBipartition(int n, int[][] dislikes) {\n    List<Integer>[] graph = new List[n + 1];\n    Color[] colors = new Color[n + 1];\n    Arrays.fill(colors, Color.kWhite);\n\n    for (int i = 1; i <= n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] d : dislikes) {\n      final int u = d[0];\n      final int v = d[1];\n      graph[u].add(v);\n      graph[v].add(u);\n    }\n\n    // Reduce to 785. Is Graph Bipartite?\n    for (int i = 1; i <= n; ++i)\n      if (colors[i] == Color.kWhite && !isValidColor(graph, i, colors, Color.kRed))\n        return false;\n\n    return true;\n  }\n\n  private boolean isValidColor(List<Integer>[] graph, int u, Color[] colors, Color color) {\n    // The painted color should be same as the `color`\n    if (colors[u] != Color.kWhite)\n      return colors[u] == color;\n\n    colors[u] = color; // Always paint w/ `color`\n\n    // All children should have valid colors\n    for (final int v : graph[u])\n      if (!isValidColor(graph, v, colors, color == Color.kRed ? Color.kGreen : Color.kRed))\n        return false;\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from enum import Enum\n\n\nclass Color(Enum):\n  kWhite = 0\n  kRed = 1\n  kGreen = 2\n\n\nclass Solution:\n  def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:\n    graph = [[] for _ in range(n + 1)]\n    colors = [Color.kWhite] * (n + 1)\n\n    for u, v in dislikes:\n      graph[u].append(v)\n      graph[v].append(u)\n\n    # Reduce to 785. Is Graph Bipartite?\n    def isValidColor(u: int, color: Color) -> bool:\n      # The painted color should be same as the `color`\n      if colors[u] != Color.kWhite:\n        return colors[u] == color\n\n      colors[u] = color  # Always paint w/ `color`\n\n      # All children should have valid colors\n      childrenColor = Color.kRed if colors[u] == Color.kGreen else Color.kGreen\n      return all(isValidColor(v, childrenColor) for v in graph[u])\n\n    return all(colors[i] != Color.kWhite or isValidColor(i, Color.kRed)\n               for i in range(1, n + 1))\n",
                "lang_text": "py"
            }
        }
    }
}