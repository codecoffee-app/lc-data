{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "342",
            "title": "Power of Four",
            "titleSlug": "power-of-four",
            "content": "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of four. Otherwise, return <code>false</code></em>.</p>\n\n<p>An integer <code>n</code> is a power of four, if there exists an integer <code>x</code> such that <code>n == 4<sup>x</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 16\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 5\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without loops/recursion?",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3787,
            "dislikes": 382,
            "similarQuestions": "[{\"title\": \"Power of Two\", \"titleSlug\": \"power-of-two\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Power of Three\", \"titleSlug\": \"power-of-three\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"613.5K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 613523, \"totalSubmissionRaw\": 1287646, \"acRate\": \"47.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Determine if a given integer `n` is a power of four. In other words, check if there exists an integer `x` such that `n == 4<sup>x</sup>`.",
                "constraints": [
                    "-2<sup>31</sup> <= n <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "16",
                        "output": "true",
                        "explanation": "16 is a power of four (4<sup>2</sup>)."
                    },
                    {
                        "input": "5",
                        "output": "false",
                        "explanation": "5 is not a power of four."
                    },
                    {
                        "input": "1",
                        "output": "true",
                        "explanation": "1 is a power of four (4<sup>0</sup>)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "power-of-two",
                "title": "Power of Two",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "power-of-three",
                "title": "Power of Three",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isPowerOfFour(int n) {\n    // Why (4^n - 1) % 3 == 0?\n    // (4^n - 1) = (2^n - 1)(2^n + 1) and 2^n - 1, 2^n, 2^n + 1 are\n    // Three consecutive numbers; among one of them, there must be a multiple\n    // Of 3, and that can't be 2^n, so it must be either 2^n - 1 or 2^n + 1.\n    // Therefore, 4^n - 1 is a multiple of 3.\n    return n > 0 && __builtin_popcountll(n) == 1 && (n - 1) % 3 == 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isPowerOfFour(int n) {\n    // Why (4^n - 1) % 3 == 0?\n    // (4^n - 1) = (2^n - 1)(2^n + 1) and 2^n - 1, 2^n, 2^n + 1 are\n    // Three consecutive numbers; among one of them, there must be a multiple\n    // Of 3, and that can't be 2^n, so it must be either 2^n - 1 or 2^n + 1.\n    // Therefore, 4^n - 1 is a multiple of 3\n    return n > 0 && Integer.bitCount(n) == 1 && (n - 1) % 3 == 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isPowerOfFour(self, n: int) -> bool:\n    # Why (4^n - 1) % 3 == 0?\n    # (4^n - 1) = (2^n - 1)(2^n + 1) and 2^n - 1, 2^n, 2^n + 1 are\n    # Three consecutive numbers among one of them, there must be a multiple\n    # Of 3, and that can't be 2^n, so it must be either 2^n - 1 or 2^n + 1.\n    # Therefore, 4^n - 1 is a multiple of 3.\n    return n > 0 and bin(n).count('1') == 1 and (n - 1) % 3 == 0\n",
                "lang_text": "py"
            }
        }
    }
}