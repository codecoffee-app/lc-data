{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "486",
            "title": "Predict the Winner",
            "titleSlug": "predict-the-winner",
            "content": "<p>You are given an integer array <code>nums</code>. Two players are playing a game with this array: player 1 and player 2.</p>\n\n<p>Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of <code>0</code>. At each turn, the player takes one of the numbers from either end of the array (i.e., <code>nums[0]</code> or <code>nums[nums.length - 1]</code>) which reduces the size of the array by <code>1</code>. The player adds the chosen number to their score. The game ends when there are no more elements in the array.</p>\n\n<p>Return <code>true</code> if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return <code>true</code>. You may assume that both players are playing optimally.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,2]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Initially, player 1 can choose between 1 and 2. \nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \nHence, player 1 will never be the winner and you need to return false.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,233,7]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5677,
            "dislikes": 269,
            "similarQuestions": "[{\"title\": \"Can I Win\", \"titleSlug\": \"can-i-win\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"221.1K\", \"totalSubmission\": \"399.2K\", \"totalAcceptedRaw\": 221147, \"totalSubmissionRaw\": 399208, \"acRate\": \"55.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, two players take turns picking numbers from either end of the array. Player 1 goes first, and both players start with a score of 0.  On each turn, a player selects either the leftmost or rightmost element of the remaining array, removes it, and adds its value to their score. The game continues until the array is empty.\n\nDetermine if Player 1 can achieve a score greater than or equal to Player 2's score, assuming both players play optimally.",
                "constraints": [
                    "1 <= nums.length <= 20",
                    "0 <= nums[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "[1,5,2]",
                        "output": "false",
                        "explanation": "Player 1 can choose either 1 or 2. If Player 1 chooses 2, Player 2 can choose either 1 or 5. If Player 2 chooses 5, Player 1 is left with 1. Player 1's score would be 2 + 1 = 3, and Player 2's score would be 5. Similarly, if Player 1 initially chooses 1, Player 2 can choose 5, and Player 1 is left with 2. Player 1's score would be 1 + 2 = 3, and Player 2's score would be 5. Thus, Player 1 can never win."
                    },
                    {
                        "input": "[1,5,233,7]",
                        "output": "true",
                        "explanation": "Player 1 first chooses 1. Player 2 then has to choose between 5 and 7. No matter which number Player 2 chooses, Player 1 can then choose 233. Player 1's score will be 1 + 233 = 234, while Player 2's score will be either 5 or 7.  In either case, Player 1 will have a higher score."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "can-i-win",
                "title": "Can I Win",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool PredictTheWinner(vector<int>& nums) {\n    const int n = nums.size();\n    // dp[i][j] := max number you can get more than your opponent in nums[i..j]\n    vector<vector<int>> dp(n, vector<int>(n));\n\n    for (int i = 0; i < n; ++i)\n      dp[i][i] = nums[i];\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        const int j = i + d;\n        dp[i][j] = max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);\n      }\n\n    return dp[0][n - 1] >= 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean PredictTheWinner(int[] nums) {\n    final int n = nums.length;\n    // dp[i][j] := max number you can get more than your opponent in nums[i..j]\n    int[][] dp = new int[n][n];\n\n    for (int i = 0; i < n; ++i)\n      dp[i][i] = nums[i];\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        final int j = i + d;\n        dp[i][j] = Math.max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);\n      }\n\n    return dp[0][n - 1] >= 0;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}