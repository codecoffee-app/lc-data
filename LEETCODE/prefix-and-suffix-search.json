{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "745",
            "title": "Prefix and Suffix Search",
            "titleSlug": "prefix-and-suffix-search",
            "content": "<p>Design a special dictionary that searches the words in it by a prefix and a suffix.</p>\n\n<p>Implement the <code>WordFilter</code> class:</p>\n\n<ul>\n\t<li><code>WordFilter(string[] words)</code> Initializes the object with the <code>words</code> in the dictionary.</li>\n\t<li><code>f(string pref, string suff)</code> Returns <em>the index of the word in the dictionary,</em> which has the prefix <code>pref</code> and the suffix <code>suff</code>. If there is more than one valid index, return <strong>the largest</strong> of them. If there is no such word in the dictionary, return <code>-1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;WordFilter&quot;, &quot;f&quot;]\n[[[&quot;apple&quot;]], [&quot;a&quot;, &quot;e&quot;]]\n<strong>Output</strong>\n[null, 0]\n<strong>Explanation</strong>\nWordFilter wordFilter = new WordFilter([&quot;apple&quot;]);\nwordFilter.f(&quot;a&quot;, &quot;e&quot;); // return 0, because the word at index 0 has prefix = &quot;a&quot; and suffix = &quot;e&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 7</code></li>\n\t<li><code>1 &lt;= pref.length, suff.length &lt;= 7</code></li>\n\t<li><code>words[i]</code>, <code>pref</code> and <code>suff</code> consist of lowercase English letters only.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to the function <code>f</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2241,
            "dislikes": 478,
            "similarQuestions": "[{\"title\": \"Design Add and Search Words Data Structure\", \"titleSlug\": \"design-add-and-search-words-data-structure\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"93.4K\", \"totalSubmission\": \"227.6K\", \"totalAcceptedRaw\": 93354, \"totalSubmissionRaw\": 227555, \"acRate\": \"41.0%\"}",
            "hints": [
                "Take \"apple\" as an example, we will insert add \"apple{apple\", \"pple{apple\", \"ple{apple\", \"le{apple\", \"e{apple\", \"{apple\" into the Trie Tree.",
                "If the query is: prefix = \"app\", suffix = \"le\", we can find it by querying our trie for\r\n\"le { app\".",
                "We use '{' because in ASCii Table, '{' is next to 'z', so we just need to create new TrieNode[27] instead of 26. Also, compared with traditional Trie, we add the attribute weight in class TrieNode.\r\nYou can still choose any different character."
            ],
            "rephrased": {
                "body": "Design a special dictionary that allows searching for words based on both a prefix and a suffix. Implement the `WordFilter` class with the following methods:\n\n*   `WordFilter(string[] words)`: Initializes the object with the given dictionary of words.\n*   `f(string pref, string suff)`: Returns the index of the word in the dictionary that has the specified `pref` as a prefix and `suff` as a suffix. If multiple words satisfy the criteria, return the largest index. If no such word exists, return -1.",
                "constraints": [
                    "1 <= words.length <= 10^4",
                    "1 <= words[i].length <= 7",
                    "1 <= pref.length, suff.length <= 7",
                    "words[i], pref, and suff consist of lowercase English letters only.",
                    "At most 10^4 calls will be made to the function f."
                ],
                "testcases": [
                    {
                        "input": "[\"WordFilter\", \"f\"]\n[[[\"apple\"]], [\"a\", \"e\"]]",
                        "output": "[null, 0]",
                        "explanation": "The word at index 0, \"apple\", has the prefix \"a\" and suffix \"e\"."
                    },
                    {
                        "input": "[\"WordFilter\", \"f\", \"f\"]\n[[[\"apple\"]], [\"b\", \"e\"], [\"a\", \"le\"]]",
                        "output": "[null, -1, 0]",
                        "explanation": "The word \"apple\" does not have prefix 'b' and suffix 'e', hence returning -1. The word \"apple\" has prefix \"a\" and suffix \"le\", hence returning 0."
                    },
                    {
                        "input": "[\"WordFilter\", \"f\"]\n[[[\"apple\", \"aplle\"]], [\"a\", \"e\"]]",
                        "output": "[null, 1]",
                        "explanation": "Both \"apple\" and \"aplle\" has prefix \"a\" and suffix \"e\", hence returning index 1, largest among the possible values."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-add-and-search-words-data-structure",
                "title": "Design Add and Search Words Data Structure",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Take \"apple\" as an example, we will insert add \"apple{apple\", \"pple{apple\", \"ple{apple\", \"le{apple\", \"e{apple\", \"{apple\" into the Trie Tree.",
            "If the query is: prefix = \"app\", suffix = \"le\", we can find it by querying our trie for\r\n\"le { app\".",
            "We use '{' because in ASCii Table, '{' is next to 'z', so we just need to create new TrieNode[27] instead of 26. Also, compared with traditional Trie, we add the attribute weight in class TrieNode.\r\nYou can still choose any different character."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class WordFilter {\n public:\n  WordFilter(vector<string>& words) {\n    for (int i = 0; i < words.size(); ++i) {\n      const string& word = words[i];\n      vector<string> prefixes;\n      vector<string> suffixes;\n      for (int j = 0; j <= word.length(); ++j) {\n        const string prefix = word.substr(0, j);\n        const string suffix = word.substr(j);\n        prefixes.push_back(prefix);\n        suffixes.push_back(suffix);\n      }\n      for (const string& prefix : prefixes)\n        for (const string& suffix : suffixes)\n          keyToIndex[prefix + '_' + suffix] = i;\n    }\n  }\n\n  int f(string prefix, string suffix) {\n    const string key = prefix + '_' + suffix;\n    if (const auto it = keyToIndex.find(key); it != keyToIndex.cend())\n      return it->second;\n    return -1;\n  }\n\n private:\n  unordered_map<string, int> keyToIndex;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class WordFilter {\n  public WordFilter(String[] words) {\n    for (int i = 0; i < words.length; ++i) {\n      final String word = words[i];\n      List<String> prefixes = new ArrayList<>();\n      List<String> suffixes = new ArrayList<>();\n      for (int j = 0; j <= word.length(); ++j) {\n        final String prefix = word.substring(0, j);\n        final String suffix = word.substring(j);\n        prefixes.add(prefix);\n        suffixes.add(suffix);\n      }\n      for (final String prefix : prefixes)\n        for (final String suffix : suffixes)\n          keyToIndex.put(prefix + '_' + suffix, i);\n    }\n  }\n\n  public int f(String prefix, String suffix) {\n    final String key = prefix + '_' + suffix;\n    if (keyToIndex.containsKey(key))\n      return keyToIndex.get(key);\n    return -1;\n  }\n\n  private Map<String, Integer> keyToIndex = new HashMap<>();\n}\n",
                "lang_text": "java"
            }
        }
    }
}