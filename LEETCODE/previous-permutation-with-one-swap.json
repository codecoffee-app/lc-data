{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1053",
            "title": "Previous Permutation With One Swap",
            "titleSlug": "previous-permutation-with-one-swap",
            "content": "<p>Given an array of positive integers <code>arr</code> (not necessarily distinct), return <em>the </em><span data-keyword=\"lexicographically-smaller-array\"><em>lexicographically</em></span><em> largest permutation that is smaller than</em> <code>arr</code>, that can be <strong>made with exactly one swap</strong>. If it cannot be done, then return the same array.</p>\n\n<p><strong>Note</strong> that a <em>swap</em> exchanges the positions of two numbers <code>arr[i]</code> and <code>arr[j]</code></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,2,1]\n<strong>Output:</strong> [3,1,2]\n<strong>Explanation:</strong> Swapping 2 and 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,1,5]\n<strong>Output:</strong> [1,1,5]\n<strong>Explanation:</strong> This is already the smallest permutation.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,9,4,6,7]\n<strong>Output:</strong> [1,7,4,6,9]\n<strong>Explanation:</strong> Swapping 9 and 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 424,
            "dislikes": 36,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.7K\", \"totalSubmission\": \"77.5K\", \"totalAcceptedRaw\": 38684, \"totalSubmissionRaw\": 77473, \"acRate\": \"49.9%\"}",
            "hints": [
                "You need to swap two values, one larger than the other.  Where is the larger one located?"
            ],
            "rephrased": {
                "body": "Given an array of positive integers `arr` (not necessarily distinct), find the lexicographically largest permutation that is smaller than `arr`, achievable with exactly one swap.  If no such permutation exists, return the original array.",
                "constraints": [
                    "1 <= arr.length <= 10^4",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[3,2,1]",
                        "output": "[3,1,2]",
                        "explanation": "Swapping 2 and 1 results in the lexicographically largest permutation smaller than the input."
                    },
                    {
                        "input": "[1,1,5]",
                        "output": "[1,1,5]",
                        "explanation": "The input array is already the smallest permutation; no swap can produce a smaller one."
                    },
                    {
                        "input": "[1,9,4,6,7]",
                        "output": "[1,7,4,6,9]",
                        "explanation": "Swapping 9 and 7 produces the lexicographically largest permutation smaller than the input."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "You need to swap two values, one larger than the other.  Where is the larger one located?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> prevPermOpt1(vector<int>& arr) {\n    const int n = arr.size();\n    int l = n - 2;\n    int r = n - 1;\n\n    while (l >= 0 && arr[l] <= arr[l + 1])\n      l--;\n    if (l < 0)\n      return arr;\n    while (arr[r] >= arr[l] || arr[r] == arr[r - 1])\n      r--;\n    swap(arr[l], arr[r]);\n\n    return arr;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] prevPermOpt1(int[] arr) {\n    final int n = arr.length;\n    int l = n - 2;\n    int r = n - 1;\n\n    while (l >= 0 && arr[l] <= arr[l + 1])\n      l--;\n    if (l < 0)\n      return arr;\n    while (arr[r] >= arr[l] || arr[r] == arr[r - 1])\n      r--;\n    swap(arr, l, r);\n\n    return arr;\n  }\n\n  private void swap(int[] arr, int l, int r) {\n    int temp = arr[l];\n    arr[l] = arr[r];\n    arr[r] = temp;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def prevPermOpt1(self, arr: List[int]) -> List[int]:\n    n = len(arr)\n    l = n - 2\n    r = n - 1\n\n    while l >= 0 and arr[l] <= arr[l + 1]:\n      l -= 1\n    if l < 0:\n      return arr\n    while arr[r] >= arr[l] or arr[r] == arr[r - 1]:\n      r -= 1\n    arr[l], arr[r] = arr[r], arr[l]\n\n    return arr\n",
                "lang_text": "py"
            }
        }
    }
}