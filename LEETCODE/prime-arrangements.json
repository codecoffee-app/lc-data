{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1175",
            "title": "Prime Arrangements",
            "titleSlug": "prime-arrangements",
            "content": "<p>Return the number of permutations of 1 to <code>n</code> so that prime numbers are at prime indices (1-indexed.)</p>\n\n<p><em>(Recall that an integer&nbsp;is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers&nbsp;both smaller than it.)</em></p>\n\n<p>Since the answer may be large, return the answer <strong>modulo <code>10^9 + 7</code></strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 100\n<strong>Output:</strong> 682289015\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 380,
            "dislikes": 507,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                }
            ],
            "stats": "{\"totalAccepted\": \"28.6K\", \"totalSubmission\": \"50.9K\", \"totalAcceptedRaw\": 28567, \"totalSubmissionRaw\": 50927, \"acRate\": \"56.1%\"}",
            "hints": [
                "Solve the problem for prime numbers and composite numbers separately.",
                "Multiply the number of permutations of prime numbers over prime indices with the number of permutations of composite numbers over composite indices.",
                "The number of permutations equals the factorial."
            ],
            "rephrased": {
                "body": "Given an integer `n`, find the number of permutations of the numbers 1 to `n` such that all prime numbers are located at prime indices (1-indexed). Return the answer modulo 10^9 + 7.",
                "constraints": [
                    "1 <= n <= 100"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "12",
                        "explanation": "For example, the permutation [1, 2, 5, 4, 3] is valid because the prime numbers 2, 3, and 5 are at prime indices 2, 3, and 5 respectively. The permutation [5, 2, 3, 4, 1] is not valid because the prime number 5 is at index 1, which is not a prime index."
                    },
                    {
                        "input": "100",
                        "output": "682289015",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Solve the problem for prime numbers and composite numbers separately.",
            "Multiply the number of permutations of prime numbers over prime indices with the number of permutations of composite numbers over composite indices.",
            "The number of permutations equals the factorial."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numPrimeArrangements(int n) {\n    constexpr int kMod = 1'000'000'007;\n    const int count = countPrimes(n);\n    return (factorial(count, kMod) * factorial(n - count, kMod)) % kMod;\n  }\n\n private:\n  int countPrimes(int n) {\n    vector<bool> prime(n + 1, true);\n    prime[0] = false;\n    prime[1] = false;\n\n    for (int i = 0; i <= sqrt(n); ++i)\n      if (prime[i])\n        for (int j = i * i; j <= n; j += i)\n          prime[j] = false;\n\n    return count(prime.begin(), prime.end(), true);\n  }\n\n  long factorial(int n, const int kMod) {\n    long fact = 1;\n    for (int i = 1; i <= n; ++i)\n      fact = fact * i % kMod;\n    return fact;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numPrimeArrangements(int n) {\n    final int kMod = 1_000_000_007;\n    final int count = countPrimes(n);\n    return (int) ((factorial(count, kMod) * factorial(n - count, kMod)) % kMod);\n  }\n\n  private int countPrimes(int n) {\n    boolean[] prime = new boolean[n + 1];\n    Arrays.fill(prime, 2, n + 1, true);\n\n    for (int i = 0; i * i <= n; ++i)\n      if (prime[i])\n        for (int j = i * i; j <= n; j += i)\n          prime[j] = false;\n\n    int count = 0;\n\n    for (boolean p : prime)\n      if (p)\n        ++count;\n\n    return count;\n  }\n\n  long factorial(int n, final long kMod) {\n    long fact = 1;\n    for (int i = 1; i <= n; ++i)\n      fact = fact * i % kMod;\n    return fact;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numPrimeArrangements(self, n: int) -> int:\n    kMod = 1_000_000_007\n\n    def countPrimes(n: int) -> int:\n      isPrime = [False] * 2 + [True] * (n - 1)\n\n      for i in range(2, int(n**0.5) + 1):\n        if isPrime[i]:\n          for j in range(i * i, n + 1, i):\n            isPrime[j] = False\n\n      return sum(isPrime)\n\n    def factorial(n: int) -> int:\n      fact = 1\n\n      for i in range(1, n + 1):\n        fact = fact * i % kMod\n\n      return fact\n\n    count = countPrimes(n)\n    return factorial(count) * factorial(n - count) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}