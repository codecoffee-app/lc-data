{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2761",
            "title": "Prime Pairs With Target Sum",
            "titleSlug": "prime-pairs-with-target-sum",
            "content": "<p>You are given an integer <code>n</code>. We say that two integers <code>x</code> and <code>y</code> form a prime number pair if:</p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= y &lt;= n</code></li>\n\t<li><code>x + y == n</code></li>\n\t<li><code>x</code> and <code>y</code> are prime numbers</li>\n</ul>\n\n<p>Return <em>the 2D sorted list of prime number pairs</em> <code>[x<sub>i</sub>, y<sub>i</sub>]</code>. The list should be sorted in <strong>increasing</strong> order of <code>x<sub>i</sub></code>. If there are no prime number pairs at all, return <em>an empty array</em>.</p>\n\n<p><strong>Note:</strong> A prime number is a natural number greater than <code>1</code> with only two factors, itself and <code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> [[3,7],[5,5]]\n<strong>Explanation:</strong> In this example, there are two prime pairs that satisfy the criteria. \nThese pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> []\n<strong>Explanation:</strong> We can show that there is no prime number pair that gives a sum of 2, so we return an empty array. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 319,
            "dislikes": 31,
            "similarQuestions": "[{\"title\": \"Count Primes\", \"titleSlug\": \"count-primes\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.3K\", \"totalSubmission\": \"76.8K\", \"totalAcceptedRaw\": 25329, \"totalSubmissionRaw\": 76803, \"acRate\": \"33.0%\"}",
            "hints": [
                "Pre-compute all the prime numbers in the range [1, n] using a sieve, and store them in a data structure where they can be accessed in O(1) time.",
                "For x in the range [2, n/2], we can use the pre-computed list of prime numbers to check if both x and n - x are primes. If they are, we add them to the result."
            ],
            "rephrased": {
                "body": "Given an integer `n`, find all pairs of prime numbers `(x, y)` such that `1 <= x <= y <= n`, `x + y == n`, and both `x` and `y` are prime. Return a 2D sorted list of these prime number pairs `[x_i, y_i]` sorted in increasing order of `x_i`. If no such pairs exist, return an empty array.",
                "constraints": [
                    "1 <= n <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 10",
                        "output": "[[3,7],[5,5]]",
                        "explanation": "The prime pairs that sum to 10 are [3, 7] and [5, 5]. These are returned in sorted order based on the first element."
                    },
                    {
                        "input": "n = 2",
                        "output": "[]",
                        "explanation": "There are no prime number pairs that sum to 2.  Therefore, an empty array is returned."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "count-primes",
                "title": "Count Primes",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Pre-compute all the prime numbers in the range [1, n] using a sieve, and store them in a data structure where they can be accessed in O(1) time.",
            "For x in the range [2, n/2], we can use the pre-computed list of prime numbers to check if both x and n - x are primes. If they are, we add them to the result."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> findPrimePairs(int n) {\n    const vector<bool> isPrime = sieveEratosthenes(n + 1);\n    vector<vector<int>> ans;\n\n    for (int i = 2; i <= n / 2; ++i)\n      if (isPrime[i] && isPrime[n - i])\n        ans.push_back({i, n - i});\n\n    return ans;\n  }\n\n private:\n  vector<bool> sieveEratosthenes(int n) {\n    vector<bool> isPrime(n, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    return isPrime;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> findPrimePairs(int n) {\n    boolean[] isPrime = sieveEratosthenes(n + 1);\n    List<List<Integer>> ans = new ArrayList<>();\n\n    for (int i = 2; i <= n / 2; ++i)\n      if (isPrime[i] && isPrime[n - i])\n        ans.add(List.of(i, n - i));\n\n    return ans;\n  }\n\n  private boolean[] sieveEratosthenes(int n) {\n    boolean[] isPrime = new boolean[n];\n    Arrays.fill(isPrime, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    return isPrime;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findPrimePairs(self, n: int) -> List[List[int]]:\n    isPrime = self._sieveEratosthenes(n + 1)\n    return [[i, n - i] for i in range(2, n // 2 + 1)\n            if isPrime[i] and isPrime[n - i]]\n\n  def _sieveEratosthenes(self, n: int) -> List[bool]:\n    isPrime = [True] * n\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n      if isPrime[i]:\n        for j in range(i * i, n, i):\n          isPrime[j] = False\n    return isPrime\nj\n",
                "lang_text": "py"
            }
        }
    }
}