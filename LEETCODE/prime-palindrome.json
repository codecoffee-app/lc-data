{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "866",
            "title": "Prime Palindrome",
            "titleSlug": "prime-palindrome",
            "content": "<p>Given an integer n, return <em>the smallest <strong>prime palindrome</strong> greater than or equal to </em><code>n</code>.</p>\n\n<p>An integer is <strong>prime</strong> if it has exactly two divisors: <code>1</code> and itself. Note that <code>1</code> is not a prime number.</p>\n\n<ul>\n\t<li>For example, <code>2</code>, <code>3</code>, <code>5</code>, <code>7</code>, <code>11</code>, and <code>13</code> are all primes.</li>\n</ul>\n\n<p>An integer is a <strong>palindrome</strong> if it reads the same from left to right as it does from right to left.</p>\n\n<ul>\n\t<li>For example, <code>101</code> and <code>12321</code> are palindromes.</li>\n</ul>\n\n<p>The test cases are generated so that the answer always exists and is in the range <code>[2, 2 * 10<sup>8</sup>]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 6\n<strong>Output:</strong> 7\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 8\n<strong>Output:</strong> 11\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 13\n<strong>Output:</strong> 101\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 418,
            "dislikes": 817,
            "similarQuestions": "[{\"title\": \"Sum of k-Mirror Numbers\", \"titleSlug\": \"sum-of-k-mirror-numbers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                }
            ],
            "stats": "{\"totalAccepted\": \"31K\", \"totalSubmission\": \"119.5K\", \"totalAcceptedRaw\": 30994, \"totalSubmissionRaw\": 119453, \"acRate\": \"25.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer `n`, find the smallest prime palindrome greater than or equal to `n`.  A prime number is a number greater than 1 that has only two divisors: 1 and itself. A palindrome is a number that reads the same forwards and backward.",
                "constraints": [
                    "1 <= n <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "6",
                        "output": "7",
                        "explanation": null
                    },
                    {
                        "input": "8",
                        "output": "11",
                        "explanation": null
                    },
                    {
                        "input": "13",
                        "output": "101",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-k-mirror-numbers",
                "title": "Sum of k-Mirror Numbers",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int primePalindrome(int n) {\n    if (n <= 2)\n      return 2;\n    if (n == 3)\n      return 3;\n    if (n <= 5)\n      return 5;\n    if (n <= 7)\n      return 7;\n    if (n <= 11)\n      return 11;\n\n    int nLength = to_string(n).length();\n\n    while (true) {\n      for (const int num : getPalindromes(nLength))\n        if (num >= n && isPrime(num))\n          return num;\n      ++nLength;\n    }\n\n    throw;\n  }\n\n private:\n  vector<int> getPalindromes(int n) {\n    vector<int> palindromes;\n    const int length = n / 2;\n\n    for (int i = pow(10, length - 1); i < pow(10, length); ++i) {\n      const string s = to_string(i);\n      string reversedS = s;\n      reverse(reversedS.begin(), reversedS.end());\n      for (int j = 0; j < 10; ++j)\n        palindromes.push_back(stoi(s + to_string(j) + reversedS));\n    }\n\n    return palindromes;\n  }\n\n  bool isPrime(int num) {\n    for (int i = 2; i < sqrt(num) + 1; ++i)\n      if (num % i == 0)\n        return false;\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int primePalindrome(int n) {\n    if (n <= 2)\n      return 2;\n    if (n == 3)\n      return 3;\n    if (n <= 5)\n      return 5;\n    if (n <= 7)\n      return 7;\n    if (n <= 11)\n      return 11;\n\n    int nLength = String.valueOf(n).length();\n\n    while (true) {\n      for (final int num : getPalindromes(nLength))\n        if (num >= n && isPrime(num))\n          return num;\n      ++nLength;\n    }\n  }\n\n  private List<Integer> getPalindromes(int n) {\n    List<Integer> palindromes = new ArrayList<>();\n    int length = n / 2;\n\n    for (int i = (int) Math.pow(10, length - 1); i < (int) Math.pow(10, length); ++i) {\n      String s = String.valueOf(i);\n      String reversedS = new StringBuilder(s).reverse().toString();\n      for (int j = 0; j < 10; ++j)\n        palindromes.add(Integer.valueOf(s + String.valueOf(j) + reversedS));\n    }\n\n    return palindromes;\n  }\n\n  private boolean isPrime(int num) {\n    for (int i = 2; i < (int) Math.sqrt(num) + 1; ++i)\n      if (num % i == 0)\n        return false;\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def primePalindrome(self, n: int) -> int:\n    def getPalindromes(n: int) -> int:\n      length = n // 2\n      for i in range(10**(length - 1), 10**length):\n        s = str(i)\n        for j in range(10):\n          yield int(s + str(j) + s[::-1])\n\n    def isPrime(num: int) -> bool:\n      return not any(num % i == 0 for i in range(2, int(num**0.5 + 1)))\n\n    if n <= 2:\n      return 2\n    if n == 3:\n      return 3\n    if n <= 5:\n      return 5\n    if n <= 7:\n      return 7\n    if n <= 11:\n      return 11\n\n    nLength = len(str(n))\n\n    while True:\n      for num in getPalindromes(nLength):\n        if num >= n and isPrime(num):\n          return num\n      nLength += 1\n",
                "lang_text": "py"
            }
        }
    }
}