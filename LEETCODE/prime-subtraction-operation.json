{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2601",
            "title": "Prime Subtraction Operation",
            "titleSlug": "prime-subtraction-operation",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code>.</p>\n\n<p>You can perform the following operation as many times as you want:</p>\n\n<ul>\n\t<li>Pick an index <code>i</code> that you haven&rsquo;t picked before, and pick a prime <code>p</code> <strong>strictly less than</strong> <code>nums[i]</code>, then subtract <code>p</code> from <code>nums[i]</code>.</li>\n</ul>\n\n<p>Return <em>true if you can make <code>nums</code> a strictly increasing array using the above operation and false otherwise.</em></p>\n\n<p>A <strong>strictly increasing array</strong> is an array whose each element is strictly greater than its preceding element.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,9,6,10]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10].\nIn the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10].\nAfter the second operation, nums is sorted in strictly increasing order, so the answer is true.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,8,11,12]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>Initially nums is sorted in strictly increasing order, so we don&#39;t need to make any operations.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,8,3]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code><font face=\"monospace\">nums.length == n</font></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 357,
            "dislikes": 32,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.1K\", \"totalSubmission\": \"40.8K\", \"totalAcceptedRaw\": 15120, \"totalSubmissionRaw\": 40760, \"acRate\": \"37.1%\"}",
            "hints": [
                "Think about if we have many primes to subtract from nums[i]. Which prime is more optimal?",
                "The most optimal prime to subtract from nums[i] is the one that makes nums[i] the smallest as possible and greater than nums[i-1]."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` of length `n`, determine if it's possible to make `nums` a strictly increasing array by repeatedly performing the following operation:\n\nChoose an index `i` that hasn't been chosen before and a prime number `p` strictly less than `nums[i]`. Subtract `p` from `nums[i]`.\n\nReturn `true` if it is possible to make `nums` strictly increasing, and `false` otherwise.\n\nA strictly increasing array is one where each element is strictly greater than its preceding element.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "1 <= nums[i] <= 1000",
                    "nums.length == n"
                ],
                "testcases": [
                    {
                        "input": "[4,9,6,10]",
                        "output": "true",
                        "explanation": "It is possible to make the array strictly increasing. For example, we can subtract 3 from nums[0] to get [1, 9, 6, 10], then subtract 7 from nums[1] to get [1, 2, 6, 10], which is strictly increasing."
                    },
                    {
                        "input": "[6,8,11,12]",
                        "output": "true",
                        "explanation": "The array is already strictly increasing, so no operations are needed."
                    },
                    {
                        "input": "[5,8,3]",
                        "output": "false",
                        "explanation": "It's not possible to make the array strictly increasing using the given operation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Think about if we have many primes to subtract from nums[i]. Which prime is more optimal?",
            "The most optimal prime to subtract from nums[i] is the one that makes nums[i] the smallest as possible and greater than nums[i-1]."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool primeSubOperation(vector<int>& nums) {\n    constexpr int kMax = 1000;\n    const vector<int> primes = sieveEratosthenes(kMax);\n\n    int prevNum = 0;\n    for (int num : nums) {\n      // Make nums[i] the smallest as possible and still > nums[i - 1].\n      const auto it = lower_bound(primes.begin(), primes.end(), num - prevNum);\n      if (it != primes.begin())\n        num -= *prev(it);\n      if (num <= prevNum)\n        return false;\n      prevNum = num;\n    }\n\n    return true;\n  }\n\n  vector<int> sieveEratosthenes(int n) {\n    vector<int> primes;\n    vector<bool> isPrime(n, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    for (int i = 2; i < n; ++i)\n      if (isPrime[i])\n        primes.push_back(i);\n    return primes;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean primeSubOperation(int[] nums) {\n    final int kMax = 1000;\n    final List<Integer> primes = sieveEratosthenes(kMax);\n\n    int prevNum = 0;\n    for (int num : nums) {\n      // Make nums[i] the smallest as possible and still > nums[i - 1].\n      final int i = firstGreaterEqual(primes, num - prevNum);\n      if (i > 0)\n        num -= primes.get(i - 1);\n      if (num <= prevNum)\n        return false;\n      prevNum = num;\n    }\n\n    return true;\n  }\n\n  private List<Integer> sieveEratosthenes(int n) {\n    List<Integer> primes = new ArrayList<>();\n    boolean[] isPrime = new boolean[n];\n    Arrays.fill(isPrime, true);\n    isPrime[0] = false;\n    isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i)\n      if (isPrime[i])\n        for (int j = i * i; j < n; j += i)\n          isPrime[j] = false;\n    for (int i = 2; i < n; ++i)\n      if (isPrime[i])\n        primes.add(i);\n    return primes;\n  }\n\n  private int firstGreaterEqual(List<Integer> A, int target) {\n    int l = 0;\n    int r = A.size();\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m) >= target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def primeSubOperation(self, nums: List[int]) -> bool:\n    kMax = 1000\n    primes = self._sieveEratosthenes(kMax)\n\n    prevNum = 0\n    for num in nums:\n      # Make nums[i] the smallest as possible and still > nums[i - 1].\n      i = bisect.bisect_left(primes, num - prevNum)\n      if i > 0:\n        num -= primes[i - 1]\n      if num <= prevNum:\n        return False\n      prevNum = num\n\n    return True\n\n  def _sieveEratosthenes(self, n: int) -> List[int]:\n    isPrime = [True] * n\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n      if isPrime[i]:\n        for j in range(i * i, n, i):\n          isPrime[j] = False\n    return [i for i in range(n) if isPrime[i]]\n",
                "lang_text": "py"
            }
        }
    }
}