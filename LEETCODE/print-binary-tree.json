{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "655",
            "title": "Print Binary Tree",
            "titleSlug": "print-binary-tree",
            "content": "<p>Given the <code>root</code> of a binary tree, construct a <strong>0-indexed</strong> <code>m x n</code> string matrix <code>res</code> that represents a <strong>formatted layout</strong> of the tree. The formatted layout matrix should be constructed using the following rules:</p>\n\n<ul>\n\t<li>The <strong>height</strong> of the tree is <code>height</code>&nbsp;and the number of rows <code>m</code> should be equal to <code>height + 1</code>.</li>\n\t<li>The number of columns <code>n</code> should be equal to <code>2<sup>height+1</sup> - 1</code>.</li>\n\t<li>Place the <strong>root node</strong> in the <strong>middle</strong> of the <strong>top row</strong> (more formally, at location <code>res[0][(n-1)/2]</code>).</li>\n\t<li>For each node that has been placed in the matrix at position <code>res[r][c]</code>, place its <strong>left child</strong> at <code>res[r+1][c-2<sup>height-r-1</sup>]</code> and its <strong>right child</strong> at <code>res[r+1][c+2<sup>height-r-1</sup>]</code>.</li>\n\t<li>Continue this process until all the nodes in the tree have been placed.</li>\n\t<li>Any empty cells should contain the empty string <code>&quot;&quot;</code>.</li>\n</ul>\n\n<p>Return <em>the constructed matrix </em><code>res</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/print1-tree.jpg\" style=\"width: 141px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2]\n<strong>Output:</strong> \n[[&quot;&quot;,&quot;1&quot;,&quot;&quot;],\n&nbsp;[&quot;2&quot;,&quot;&quot;,&quot;&quot;]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/print2-tree.jpg\" style=\"width: 207px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,4]\n<strong>Output:</strong> \n[[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;1&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],\n&nbsp;[&quot;&quot;,&quot;2&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;3&quot;,&quot;&quot;],\n&nbsp;[&quot;&quot;,&quot;&quot;,&quot;4&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 2<sup>10</sup>]</code>.</li>\n\t<li><code>-99 &lt;= Node.val &lt;= 99</code></li>\n\t<li>The depth of the tree will be in the range <code>[1, 10]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 444,
            "dislikes": 423,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"63.8K\", \"totalSubmission\": \"101.6K\", \"totalAcceptedRaw\": 63841, \"totalSubmissionRaw\": 101574, \"acRate\": \"62.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, construct a 0-indexed m x n string matrix `res` representing a formatted layout of the tree. The matrix should adhere to these rules:\n\n*   The height of the tree determines the number of rows `m`, where `m = height + 1`.\n*   The number of columns `n` is determined by the height as well, where `n = 2^(height+1) - 1`.\n*   The root node is placed in the middle of the top row, specifically at `res[0][(n-1)/2]`.\n*   For each node at `res[r][c]`, its left child is placed at `res[r+1][c-2^(height-r-1)]`, and its right child is placed at `res[r+1][c+2^(height-r-1)]`.\n*   This placement process continues until all nodes are positioned within the matrix.\n*   Empty cells are filled with an empty string `\"\"`.\n\nReturn the constructed matrix `res`.",
                "constraints": [
                    "The number of nodes in the tree is in the range `[1, 2^10]`.",
                    "`-99 <= Node.val <= 99`",
                    "The depth of the tree will be in the range `[1, 10]`."
                ],
                "testcases": [
                    {
                        "input": "[1,2]",
                        "output": "[[\"\",\"1\",\"\"],\n [\"2\",\"\",\"\"]]",
                        "explanation": "The tree has a height of 1. Therefore, the matrix has 2 rows and 2^(1+1) - 1 = 3 columns. The root (1) is placed at res[0][(3-1)/2] = res[0][1]. The left child (2) is placed at res[1][1-2^(1-0-1)] = res[1][1-1] = res[1][0]."
                    },
                    {
                        "input": "[1,2,3,null,4]",
                        "output": "[[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],\n [\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],\n [\"\",\"\", \"4\",\"\",\"\",\"\",\"\"]]",
                        "explanation": "The tree has a height of 2. Therefore, the matrix has 3 rows and 2^(2+1) - 1 = 7 columns. The root (1) is placed at res[0][(7-1)/2] = res[0][3]. The left child (2) is placed at res[1][3-2^(2-0-1)] = res[1][3-2] = res[1][1]. The right child (3) is placed at res[1][3+2^(2-0-1)] = res[1][3+2] = res[1][5]. The left child of 2 (4) is placed at res[2][1-2^(2-1-1)] = res[2][1-1] = res[2][0]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<string>> printTree(TreeNode* root) {\n    const int m = maxHeight(root);\n    const int n = pow(2, m) - 1;\n    vector<vector<string>> ans(m, vector<string>(n));\n    dfs(root, 0, 0, ans[0].size() - 1, ans);\n    return ans;\n  }\n\n private:\n  int maxHeight(TreeNode* root) {\n    if (root == nullptr)\n      return 0;\n    return 1 + max(maxHeight(root->left), maxHeight(root->right));\n  }\n\n  void dfs(TreeNode* root, int row, int left, int right,\n           vector<vector<string>>& ans) {\n    if (root == nullptr)\n      return;\n\n    const int mid = (left + right) / 2;\n    ans[row][mid] = to_string(root->val);\n    dfs(root->left, row + 1, left, mid - 1, ans);\n    dfs(root->right, row + 1, mid + 1, right, ans);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<String>> printTree(TreeNode root) {\n    final int m = maxHeight(root);\n    final int n = (int) Math.pow(2, m) - 1;\n    List<List<String>> ans = new ArrayList<>();\n    List<String> row = new ArrayList<>();\n\n    for (int i = 0; i < n; ++i)\n      row.add(\"\");\n\n    for (int i = 0; i < m; ++i)\n      ans.add(new ArrayList<>(row));\n\n    dfs(root, 0, 0, n - 1, ans);\n    return ans;\n  }\n\n  private int maxHeight(TreeNode root) {\n    if (root == null)\n      return 0;\n    return 1 + Math.max(maxHeight(root.left), maxHeight(root.right));\n  }\n\n  private void dfs(TreeNode root, int row, int left, int right, List<List<String>> ans) {\n    if (root == null)\n      return;\n\n    final int mid = (left + right) / 2;\n    ans.get(row).set(mid, Integer.toString(root.val));\n    dfs(root.left, row + 1, left, mid - 1, ans);\n    dfs(root.right, row + 1, mid + 1, right, ans);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def printTree(self, root: Optional[TreeNode]) -> List[List[str]]:\n    def maxHeight(root: Optional[TreeNode]) -> int:\n      if not root:\n        return 0\n      return 1 + max(maxHeight(root.left), maxHeight(root.right))\n\n    def dfs(root: Optional[TreeNode], row: int, left: int, right: int) -> None:\n      if not root:\n        return\n\n      mid = (left + right) // 2\n      ans[row][mid] = str(root.val)\n      dfs(root.left, row + 1, left, mid - 1)\n      dfs(root.right, row + 1, mid + 1, right)\n\n    m = maxHeight(root)\n    n = pow(2, m) - 1\n    ans = [[''] * n for _ in range(m)]\n    dfs(root, 0, 0, len(ans[0]) - 1)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}