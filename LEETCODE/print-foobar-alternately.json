{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1115",
            "title": "Print FooBar Alternately",
            "titleSlug": "print-foobar-alternately",
            "content": "<p>Suppose you are given the following code:</p>\n\n<pre>\nclass FooBar {\n  public void foo() {\n    for (int i = 0; i &lt; n; i++) {\n      print(&quot;foo&quot;);\n    }\n  }\n\n  public void bar() {\n    for (int i = 0; i &lt; n; i++) {\n      print(&quot;bar&quot;);\n    }\n  }\n}\n</pre>\n\n<p>The same instance of <code>FooBar</code> will be passed to two different threads:</p>\n\n<ul>\n\t<li>thread <code>A</code> will call <code>foo()</code>, while</li>\n\t<li>thread <code>B</code> will call <code>bar()</code>.</li>\n</ul>\n\n<p>Modify the given program to output <code>&quot;foobar&quot;</code> <code>n</code> times.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> &quot;foobar&quot;\n<strong>Explanation:</strong> There are two threads being fired asynchronously. One of them calls foo(), while the other calls bar().\n&quot;foobar&quot; is being output 1 time.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> &quot;foobarfoobar&quot;\n<strong>Explanation:</strong> &quot;foobar&quot; is being output 2 times.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 661,
            "dislikes": 51,
            "similarQuestions": "[{\"title\": \"Print in Order\", \"titleSlug\": \"print-in-order\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Print Zero Even Odd\", \"titleSlug\": \"print-zero-even-odd\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Concurrency",
                    "slug": "concurrency"
                }
            ],
            "stats": "{\"totalAccepted\": \"76.1K\", \"totalSubmission\": \"117.5K\", \"totalAcceptedRaw\": 76135, \"totalSubmissionRaw\": 117478, \"acRate\": \"64.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Implement a `FooBar` class that prints \"foobar\" `n` times using two threads. Thread A calls `foo()` to print \"foo\", and Thread B calls `bar()` to print \"bar\". Ensure that \"foo\" is always printed before \"bar\" in each iteration.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 1",
                        "output": "\"foobar\"",
                        "explanation": "Two threads are executed asynchronously. One thread calls `foo()` and the other calls `bar()`, resulting in \"foobar\" being printed once."
                    },
                    {
                        "input": "n = 2",
                        "output": "\"foobarfoobar\"",
                        "explanation": "Two threads are executed asynchronously. One thread calls `foo()` and the other calls `bar()`, resulting in \"foobar\" being printed twice."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "print-in-order",
                "title": "Print in Order",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "print-zero-even-odd",
                "title": "Print Zero Even Odd",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Concurrency",
                "slug": "concurrency"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// LeetCode doesn't support C++20 yet, so we don't have std::counting_semaphore\n// or binary_semaphore.\n#include <semaphore.h>\n\nclass FooBar {\n public:\n  FooBar(int n) : n(n) {\n    sem_init(&fooSemaphore, /*pshared=*/0, /*value=*/1);\n    sem_init(&barSemaphore, /*pshared=*/0, /*value=*/0);\n  }\n\n  ~FooBar() {\n    sem_destroy(&fooSemaphore);\n    sem_destroy(&barSemaphore);\n  }\n\n  void foo(function<void()> printFoo) {\n    for (int i = 0; i < n; ++i) {\n      sem_wait(&fooSemaphore);\n      printFoo();\n      sem_post(&barSemaphore);\n    }\n  }\n\n  void bar(function<void()> printBar) {\n    for (int i = 0; i < n; ++i) {\n      sem_wait(&barSemaphore);\n      printBar();\n      sem_post(&fooSemaphore);\n    }\n  }\n\n private:\n  const int n;\n  sem_t fooSemaphore;\n  sem_t barSemaphore;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class FooBar {\n  public FooBar(int n) {\n    this.n = n;\n  }\n\n  public void foo(Runnable printFoo) throws InterruptedException {\n    for (int i = 0; i < n; ++i) {\n      fooSemaphore.acquire();\n      printFoo.run();\n      barSemaphore.release();\n    }\n  }\n\n  public void bar(Runnable printBar) throws InterruptedException {\n    for (int i = 0; i < n; ++i) {\n      barSemaphore.acquire();\n      printBar.run();\n      fooSemaphore.release();\n    }\n  }\n\n  private int n;\n  private Semaphore fooSemaphore = new Semaphore(1);\n  private Semaphore barSemaphore = new Semaphore(0);\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from threading import Semaphore\n\n\nclass FooBar:\n  def __init__(self, n):\n    self.n = n\n    self.fooSemaphore = Semaphore(1)\n    self.barSemaphore = Semaphore(0)\n\n  def foo(self, printFoo: 'Callable[[], None]') -> None:\n    for _ in range(self.n):\n      self.fooSemaphore.acquire()\n      printFoo()\n      self.barSemaphore.release()\n\n  def bar(self, printBar: 'Callable[[], None]') -> None:\n    for _ in range(self.n):\n      self.barSemaphore.acquire()\n      printBar()\n      self.fooSemaphore.release()\n",
                "lang_text": "py"
            }
        }
    }
}