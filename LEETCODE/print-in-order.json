{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1114",
            "title": "Print in Order",
            "titleSlug": "print-in-order",
            "content": "<p>Suppose we have a class:</p>\n\n<pre>\npublic class Foo {\n  public void first() { print(&quot;first&quot;); }\n  public void second() { print(&quot;second&quot;); }\n  public void third() { print(&quot;third&quot;); }\n}\n</pre>\n\n<p>The same instance of <code>Foo</code> will be passed to three different threads. Thread A will call <code>first()</code>, thread B will call <code>second()</code>, and thread C will call <code>third()</code>. Design a mechanism and modify the program to ensure that <code>second()</code> is executed after <code>first()</code>, and <code>third()</code> is executed after <code>second()</code>.</p>\n\n<p><strong>Note:</strong></p>\n\n<p>We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is mainly to ensure our tests&#39; comprehensiveness.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> &quot;firstsecondthird&quot;\n<strong>Explanation:</strong> There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). &quot;firstsecondthird&quot; is the correct output.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2]\n<strong>Output:</strong> &quot;firstsecondthird&quot;\n<strong>Explanation:</strong> The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). &quot;firstsecondthird&quot; is the correct output.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums</code> is a permutation of <code>[1, 2, 3]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1411,
            "dislikes": 197,
            "similarQuestions": "[{\"title\": \"Print FooBar Alternately\", \"titleSlug\": \"print-foobar-alternately\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Concurrency",
                    "slug": "concurrency"
                }
            ],
            "stats": "{\"totalAccepted\": \"146.1K\", \"totalSubmission\": \"211.4K\", \"totalAcceptedRaw\": 146132, \"totalSubmissionRaw\": 211395, \"acRate\": \"69.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a mechanism to control the execution order of three methods (`first()`, `second()`, and `third()`) within a class `Foo` across three different threads (A, B, and C).  Thread A must execute `first()`, thread B must execute `second()`, and thread C must execute `third()`.  The goal is to ensure `second()` is always executed after `first()`, and `third()` is always executed after `second()`, regardless of how the threads are scheduled by the operating system.",
                "constraints": [
                    "`nums` is a permutation of `[1, 2, 3]`."
                ],
                "testcases": [
                    {
                        "input": "[1,2,3]",
                        "output": "\"firstsecondthird\"",
                        "explanation": "Thread A calls `first()`, thread B calls `second()`, and thread C calls `third()`. The output should be the ordered concatenation of their printed results."
                    },
                    {
                        "input": "[1,3,2]",
                        "output": "\"firstsecondthird\"",
                        "explanation": "Thread A calls `first()`, thread B calls `third()`, and thread C calls `second()`. Despite the different calling order, the output should still be the ordered concatenation of their printed results (`firstsecondthird`)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "print-foobar-alternately",
                "title": "Print FooBar Alternately",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Concurrency",
                "slug": "concurrency"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Foo {\n public:\n  Foo() {\n    firstDone.lock();\n    secondDone.lock();\n  }\n\n  void first(function<void()> printFirst) {\n    printFirst();\n    firstDone.unlock();\n  }\n\n  void second(function<void()> printSecond) {\n    firstDone.lock();\n    printSecond();\n    secondDone.unlock();\n  }\n\n  void third(function<void()> printThird) {\n    secondDone.lock();\n    printThird();\n  }\n\n private:\n  mutex firstDone;\n  mutex secondDone;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Foo {\n  public void first(Runnable printFirst) throws InterruptedException {\n    printFirst.run();\n    firstDone.incrementAndGet();\n  }\n\n  public void second(Runnable printSecond) throws InterruptedException {\n    while (firstDone.get() != 1)\n      ;\n    printSecond.run();\n    secondDone.incrementAndGet();\n  }\n\n  public void third(Runnable printThird) throws InterruptedException {\n    while (secondDone.get() != 1)\n      ;\n    printThird.run();\n  }\n\n  private AtomicInteger firstDone = new AtomicInteger();\n  private AtomicInteger secondDone = new AtomicInteger();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from threading import Lock\n\n\nclass Foo:\n  def __init__(self):\n    self.firstDone = Lock()\n    self.secondDone = Lock()\n    self.firstDone.acquire()\n    self.secondDone.acquire()\n\n  def first(self, printFirst: 'Callable[[], None]') -> None:\n    printFirst()\n    self.firstDone.release()\n\n  def second(self, printSecond: 'Callable[[], None]') -> None:\n    self.firstDone.acquire()\n    printSecond()\n    self.secondDone.release()\n\n  def third(self, printThird: 'Callable[[], None]') -> None:\n    self.secondDone.acquire()\n    printThird()\n",
                "lang_text": "py"
            }
        }
    }
}