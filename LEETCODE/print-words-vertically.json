{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1324",
            "title": "Print Words Vertically",
            "titleSlug": "print-words-vertically",
            "content": "<p>Given a string <code>s</code>.&nbsp;Return&nbsp;all the words vertically in the same order in which they appear in <code>s</code>.<br />\r\nWords are returned as a list of strings, complete with&nbsp;spaces when is necessary. (Trailing spaces are not allowed).<br />\r\nEach word would be put on only one column and that in one column there will be only one word.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;HOW ARE YOU&quot;\r\n<strong>Output:</strong> [&quot;HAY&quot;,&quot;ORO&quot;,&quot;WEU&quot;]\r\n<strong>Explanation: </strong>Each word is printed vertically. \r\n &quot;HAY&quot;\r\n&nbsp;&quot;ORO&quot;\r\n&nbsp;&quot;WEU&quot;\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;TO BE OR NOT TO BE&quot;\r\n<strong>Output:</strong> [&quot;TBONTB&quot;,&quot;OEROOE&quot;,&quot;   T&quot;]\r\n<strong>Explanation: </strong>Trailing spaces is not allowed. \r\n&quot;TBONTB&quot;\r\n&quot;OEROOE&quot;\r\n&quot;   T&quot;\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;CONTEST IS COMING&quot;\r\n<strong>Output:</strong> [&quot;CIC&quot;,&quot;OSO&quot;,&quot;N M&quot;,&quot;T I&quot;,&quot;E N&quot;,&quot;S G&quot;,&quot;T&quot;]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= s.length &lt;= 200</code></li>\r\n\t<li><code>s</code>&nbsp;contains only upper case English letters.</li>\r\n\t<li>It&#39;s guaranteed that there is only one&nbsp;space between 2 words.</li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 746,
            "dislikes": 112,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"37.7K\", \"totalSubmission\": \"59.8K\", \"totalAcceptedRaw\": 37736, \"totalSubmissionRaw\": 59824, \"acRate\": \"63.1%\"}",
            "hints": [
                "Use the maximum length of words to determine the length of the returned answer. However, don't forget to remove trailing spaces."
            ],
            "rephrased": {
                "body": "Given a string `s`, return a list of strings representing the words of `s` arranged vertically in the same order as they appear in the original string.  Each word should occupy a single column, and each column should contain only one word.  Trailing spaces in the output strings are not allowed.",
                "constraints": [
                    "1 <= s.length <= 200",
                    "s contains only uppercase English letters.",
                    "There is only one space between any two words."
                ],
                "testcases": [
                    {
                        "input": "HOW ARE YOU",
                        "output": "[\"HAY\",\"ORO\",\"WEU\"]",
                        "explanation": "The input string is \"HOW ARE YOU\".  The output is formed by reading down the columns: H-O-W, A-R-E, Y-O-U."
                    },
                    {
                        "input": "TO BE OR NOT TO BE",
                        "output": "[\"TBONTB\",\"OEROOE\",\"   T\"]",
                        "explanation": "The words are arranged vertically, with trailing spaces removed.  Note the spaces added to \"T\" to align it properly."
                    },
                    {
                        "input": "CONTEST IS COMING",
                        "output": "[\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use the maximum length of words to determine the length of the returned answer. However, don't forget to remove trailing spaces."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> printVertically(string s) {\n    vector<string> ans;\n    vector<string> words = split(s);\n    size_t maxLength = 0;\n\n    for (const string& word : words)\n      maxLength = max(maxLength, word.length());\n\n    for (size_t i = 0; i < maxLength; ++i) {\n      string row;\n      for (const string& word : words)\n        row += i < word.length() ? word[i] : ' ';\n      while (row.back() == ' ')\n        row.pop_back();\n      ans.push_back(row);\n    }\n\n    return ans;\n  }\n\n private:\n  vector<string> split(const string& s) {\n    vector<string> words;\n    istringstream iss(s);\n    for (string token; iss >> token;)\n      words.push_back(token);\n    return words;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> printVertically(String s) {\n    List<String> ans = new ArrayList<>();\n    String[] words = s.split(\" \");\n    int maxLength = 0;\n\n    for (final String word : words)\n      maxLength = Math.max(maxLength, word.length());\n\n    for (int i = 0; i < maxLength; ++i) {\n      StringBuilder sb = new StringBuilder();\n      for (final String word : words)\n        sb.append(i < word.length() ? word.charAt(i) : ' ');\n      while (sb.charAt(sb.length() - 1) == ' ')\n        sb.deleteCharAt(sb.length() - 1);\n      ans.add(sb.toString());\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def printVertically(self, s: str) -> List[str]:\n    ans = []\n    words = s.split()\n    maxLength = max(len(word) for word in words)\n\n    for i in range(maxLength):\n      row = []\n      for word in words:\n        row.append(word[i] if i < len(word) else ' ')\n      ans.append(''.join(row).rstrip())\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}