{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "957",
            "title": "Prison Cells After N Days",
            "titleSlug": "prison-cells-after-n-days",
            "content": "<p>There are <code>8</code> prison cells in a row and each cell is either occupied or vacant.</p>\n\n<p>Each day, whether the cell is occupied or vacant changes according to the following rules:</p>\n\n<ul>\n\t<li>If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.</li>\n\t<li>Otherwise, it becomes vacant.</li>\n</ul>\n\n<p><strong>Note</strong> that because the prison is a row, the first and the last cells in the row can&#39;t have two adjacent neighbors.</p>\n\n<p>You are given an integer array <code>cells</code> where <code>cells[i] == 1</code> if the <code>i<sup>th</sup></code> cell is occupied and <code>cells[i] == 0</code> if the <code>i<sup>th</sup></code> cell is vacant, and you are given an integer <code>n</code>.</p>\n\n<p>Return the state of the prison after <code>n</code> days (i.e., <code>n</code> such changes described above).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cells = [0,1,0,1,1,0,0,1], n = 7\n<strong>Output:</strong> [0,0,1,1,0,0,0,0]\n<strong>Explanation:</strong> The following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cells = [1,0,0,1,0,0,1,0], n = 1000000000\n<strong>Output:</strong> [0,0,1,1,1,1,1,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>cells.length == 8</code></li>\n\t<li><code>cells[i]</code>&nbsp;is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1452,
            "dislikes": 1724,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"156.9K\", \"totalSubmission\": \"402.1K\", \"totalAcceptedRaw\": 156889, \"totalSubmissionRaw\": 402147, \"acRate\": \"39.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given 8 prison cells in a row, each either occupied (1) or vacant (0), determine the state of the prison after N days. Each day, a cell's status changes based on its neighbors:\n\n*   If both adjacent neighbors are occupied or both are vacant, the cell becomes occupied.\n*   Otherwise, the cell becomes vacant.\n\nNote that the first and last cells only have one neighbor.",
                "constraints": [
                    "cells.length == 8",
                    "cells[i] is either 0 or 1",
                    "1 <= n <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "cells = [0,1,0,1,1,0,0,1], n = 7",
                        "output": "[0,0,1,1,0,0,0,0]",
                        "explanation": "The cells evolve over 7 days as follows: Day 0: [0, 1, 0, 1, 1, 0, 0, 1], Day 1: [0, 1, 1, 0, 0, 0, 0, 0], Day 2: [0, 0, 0, 0, 1, 1, 1, 0], Day 3: [0, 1, 1, 0, 0, 1, 0, 0], Day 4: [0, 0, 0, 0, 0, 1, 0, 0], Day 5: [0, 1, 1, 1, 0, 1, 0, 0], Day 6: [0, 0, 1, 0, 1, 1, 0, 0], Day 7: [0, 0, 1, 1, 0, 0, 0, 0]"
                    },
                    {
                        "input": "cells = [1,0,0,1,0,0,1,0], n = 1000000000",
                        "output": "[0,0,1,1,1,1,1,0]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> prisonAfterNDays(vector<int>& cells, int n) {\n    vector<int> firstDayCells;\n    vector<int> nextDayCells(cells.size());\n\n    for (int day = 0; n-- > 0; cells = nextDayCells, ++day) {\n      for (int i = 1; i + 1 < cells.size(); ++i)\n        nextDayCells[i] = cells[i - 1] == cells[i + 1];\n      if (day == 0)\n        firstDayCells = nextDayCells;\n      else if (nextDayCells == firstDayCells)\n        n %= day;\n    }\n\n    return cells;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] prisonAfterNDays(int[] cells, int n) {\n    int[] firstDayCells = new int[cells.length];\n    int[] nextDayCells = new int[cells.length];\n\n    for (int day = 0; n-- > 0; cells = nextDayCells.clone(), ++day) {\n      for (int i = 1; i + 1 < cells.length; ++i)\n        nextDayCells[i] = cells[i - 1] == cells[i + 1] ? 1 : 0;\n      if (day == 0)\n        firstDayCells = nextDayCells.clone();\n      else if (Arrays.equals(nextDayCells, firstDayCells))\n        n %= day;\n    }\n\n    return cells;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def prisonAfterNDays(self, cells: List[int], n: int) -> List[int]:\n    nextDayCells = [0] * len(cells)\n    day = 0\n\n    while n > 0:\n      n -= 1\n      for i in range(1, len(cells) - 1):\n        nextDayCells[i] = 1 if cells[i - 1] == cells[i + 1] else 0\n      if day == 0:\n        firstDayCells = nextDayCells.copy()\n      elif nextDayCells == firstDayCells:\n        n %= day\n      cells = nextDayCells.copy()\n      day += 1\n\n    return cells\n",
                "lang_text": "py"
            }
        }
    }
}