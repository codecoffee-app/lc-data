{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1467",
            "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
            "titleSlug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
            "content": "<p>Given <code>2n</code> balls of <code>k</code> distinct colors. You will be given an integer array <code>balls</code> of size <code>k</code> where <code>balls[i]</code> is the number of balls of color <code>i</code>.</p>\n\n<p>All the balls will be <strong>shuffled uniformly at random</strong>, then we will distribute the first <code>n</code> balls to the first box and the remaining <code>n</code> balls to the other box (Please read the explanation of the second example carefully).</p>\n\n<p>Please note that the two boxes are considered different. For example, if we have two balls of colors <code>a</code> and <code>b</code>, and two boxes <code>[]</code> and <code>()</code>, then the distribution <code>[a] (b)</code> is considered different than the distribution <code>[b] (a) </code>(Please read the explanation of the first example carefully).</p>\n\n<p>Return<em> the probability</em> that the two boxes have the same number of distinct balls. Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted as correct.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> balls = [1,1]\n<strong>Output:</strong> 1.00000\n<strong>Explanation:</strong> Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> balls = [2,1,1]\n<strong>Output:</strong> 0.66667\n<strong>Explanation:</strong> We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that, we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> balls = [1,2,1,2]\n<strong>Output:</strong> 0.60000\n<strong>Explanation:</strong> The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= balls.length &lt;= 8</code></li>\n\t<li><code>1 &lt;= balls[i] &lt;= 6</code></li>\n\t<li><code>sum(balls)</code> is even.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 276,
            "dislikes": 168,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                },
                {
                    "name": "Probability and Statistics",
                    "slug": "probability-and-statistics"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.9K\", \"totalSubmission\": \"13.1K\", \"totalAcceptedRaw\": 7947, \"totalSubmissionRaw\": 13107, \"acRate\": \"60.6%\"}",
            "hints": [
                "Check how many ways you can distribute the balls between the boxes.",
                "Consider that one way you will use (x1, x2, x3, ..., xk) where xi is the number of balls from colour i. The probability of achieving this way randomly is ( (ball1 C x1) * (ball2 C x2) * (ball3 C x3) * ... * (ballk C xk)) / (2n C n).",
                "The probability of a draw is the sigma of probabilities of different ways to achieve draw.",
                "Can you use Dynamic programming to solve this problem in a better complexity ?"
            ],
            "rephrased": {
                "body": "Given `2n` balls of `k` distinct colors, you are provided an integer array `balls` of size `k` where `balls[i]` represents the number of balls of color `i`.  The balls are shuffled uniformly at random, and the first `n` balls are placed into the first box, with the remaining `n` balls going into the second box. The two boxes are distinguishable. Determine the probability that the two boxes contain the same number of distinct colors. Return the probability within an absolute error of 10<sup>-5</sup>.",
                "constraints": [
                    "1 <= balls.length <= 8",
                    "1 <= balls[i] <= 6",
                    "sum(balls) is even."
                ],
                "testcases": [
                    {
                        "input": "[1,1]",
                        "output": "1.00000",
                        "explanation": "There are two possible arrangements: box 1 contains a ball of color 1 and box 2 contains a ball of color 2, or vice-versa.  In both cases, each box contains one distinct color.  Therefore, the probability is 2/2 = 1."
                    },
                    {
                        "input": "[2,1,1]",
                        "output": "0.66667",
                        "explanation": "The set of balls is [1, 1, 2, 3].  There are 12 distinct shuffles with equal probability. The distributions are [1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]. 8 of these 12 possible distributions have the same number of distinct colors of balls in each box. Probability is 8/12 = 0.66667"
                    },
                    {
                        "input": "[1,2,1,2]",
                        "output": "0.60000",
                        "explanation": "The set of balls is [1, 2, 2, 3, 4, 4]. There are 180 possible random shuffles of this set, and 108 of them will have the same number of distinct colors in each box. Probability = 108 / 180 = 0.6"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Check how many ways you can distribute the balls between the boxes.",
            "Consider that one way you will use (x1, x2, x3, ..., xk) where xi is the number of balls from colour i. The probability of achieving this way randomly is ( (ball1 C x1) * (ball2 C x2) * (ball3 C x3) * ... * (ballk C xk)) / (2n C n).",
            "The probability of a draw is the sigma of probabilities of different ways to achieve draw.",
            "Can you use Dynamic programming to solve this problem in a better complexity ?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            },
            {
                "name": "Probability and Statistics",
                "slug": "probability-and-statistics"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "enum class BoxCase { kEqualBalls, kEqualDistantBalls };\n\nclass Solution {\n public:\n  double getProbability(vector<int>& balls) {\n    const int n = accumulate(balls.begin(), balls.end(), 0) / 2;\n    return cases(balls, 0, 0, 0, 0, 0, n, BoxCase::kEqualDistantBalls) /\n           cases(balls, 0, 0, 0, 0, 0, n, BoxCase::kEqualBalls);\n  }\n\n private:\n  const vector<int> fact{1, 1, 2, 6, 24, 120, 720};\n\n  // Assume we have two boxes A and B\n  double cases(const vector<int>& balls, int i, int ballsCountA,\n               int ballsCountB, int colorsCountA, int colorsCountB, int n,\n               BoxCase boxCase) {\n    if (ballsCountA > n || ballsCountB > n)\n      return 0;\n    if (i == balls.size())\n      return boxCase == BoxCase::kEqualBalls ? 1 : colorsCountA == colorsCountB;\n\n    double ans = 0;\n\n    // Balls taken from A for `balls[i]`\n    for (int ballsTakenA = 0; ballsTakenA <= balls[i]; ++ballsTakenA) {\n      const int ballsTakenB = balls[i] - ballsTakenA;\n      const int newcolorsCountA = colorsCountA + (ballsTakenA > 0);\n      const int newcolorsCountB = colorsCountB + (ballsTakenB > 0);\n      ans += cases(balls, i + 1, ballsCountA + ballsTakenA,\n                   ballsCountB + ballsTakenB, newcolorsCountA, newcolorsCountB,\n                   n, boxCase) /\n             (fact[ballsTakenA] * fact[ballsTakenB]);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "enum BoxCase { kEqualBalls, kEqualDistantBalls }\n\nclass Solution {\n  public double getProbability(int[] balls) {\n    final int n = Arrays.stream(balls).sum() / 2;\n    return cases(balls, 0, 0, 0, 0, 0, n, BoxCase.kEqualDistantBalls) /\n        cases(balls, 0, 0, 0, 0, 0, n, BoxCase.kEqualBalls);\n  }\n\n  private int[] fact = {1, 1, 2, 6, 24, 120, 720};\n\n  // Assume we have two boxes A and B\n  double cases(int[] balls, int i, int ballsCountA, int ballsCountB, int colorsCountA,\n               int colorsCountB, int n, BoxCase boxCase) {\n    if (ballsCountA > n || ballsCountB > n)\n      return 0;\n    if (i == balls.length)\n      return boxCase == BoxCase.kEqualBalls ? 1 : (colorsCountA == colorsCountB ? 1 : 0);\n\n    double ans = 0;\n\n    // Balls taken from A for `balls[i]`\n    for (int ballsTakenA = 0; ballsTakenA <= balls[i]; ++ballsTakenA) {\n      final int ballsTakenB = balls[i] - ballsTakenA;\n      final int newcolorsCountA = colorsCountA + (ballsTakenA > 0 ? 1 : 0);\n      final int newcolorsCountB = colorsCountB + (ballsTakenB > 0 ? 1 : 0);\n      ans += cases(balls, i + 1, ballsCountA + ballsTakenA, ballsCountB + ballsTakenB,\n                   newcolorsCountA, newcolorsCountB, n, boxCase) /\n             (fact[ballsTakenA] * fact[ballsTakenB]);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from enum import Enum\n\n\nclass BoxCase(Enum):\n  kEqualDistantBalls = 0\n  kEqualBalls = 1\n\n\nclass Solution:\n  def getProbability(self, balls: List[int]) -> float:\n    n = sum(balls) // 2\n    fact = [1, 1, 2, 6, 24, 120, 720]\n\n    def cases(i: int, ballsCountA: int, ballsCountB: int,\n              colorsCountA: int, colorsCountB, boxCase: BoxCase) -> float:\n      if ballsCountA > n or ballsCountB > n:\n        return 0\n      if i == len(balls):\n        return 1 if boxCase == BoxCase.kEqualBalls else colorsCountA == colorsCountB\n\n      ans = 0.0\n\n      # Balls taken from A for `balls[i]`\n      for ballsTakenA in range(balls[i] + 1):\n        ballsTakenB = balls[i] - ballsTakenA\n        newcolorsCountA = colorsCountA + (ballsTakenA > 0)\n        newcolorsCountB = colorsCountB + (ballsTakenB > 0)\n        ans += cases(i + 1, ballsCountA + ballsTakenA, ballsCountB + ballsTakenB,\n                     newcolorsCountA, newcolorsCountB, boxCase) / \\\n            (fact[ballsTakenA] * fact[ballsTakenB])\n\n      return ans\n\n    return cases(0, 0, 0, 0, 0, BoxCase.kEqualDistantBalls) / \\\n        cases(0, 0, 0, 0, 0, BoxCase.kEqualBalls)\n",
                "lang_text": "py"
            }
        }
    }
}