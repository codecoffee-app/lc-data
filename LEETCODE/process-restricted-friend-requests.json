{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2076",
            "title": "Process Restricted Friend Requests",
            "titleSlug": "process-restricted-friend-requests",
            "content": "<p>You are given an integer <code>n</code> indicating the number of people in a network. Each person is labeled from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are also given a <strong>0-indexed</strong> 2D integer array <code>restrictions</code>, where <code>restrictions[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> means that person <code>x<sub>i</sub></code> and person <code>y<sub>i</sub></code> <strong>cannot </strong>become <strong>friends</strong>,<strong> </strong>either <strong>directly</strong> or <strong>indirectly</strong> through other people.</p>\n\n<p>Initially, no one is friends with each other. You are given a list of friend requests as a <strong>0-indexed</strong> 2D integer array <code>requests</code>, where <code>requests[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> is a friend request between person <code>u<sub>j</sub></code> and person <code>v<sub>j</sub></code>.</p>\n\n<p>A friend request is <strong>successful </strong>if <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> can be <strong>friends</strong>. Each friend request is processed in the given order (i.e., <code>requests[j]</code> occurs before <code>requests[j + 1]</code>), and upon a successful request, <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> <strong>become direct friends</strong> for all future friend requests.</p>\n\n<p>Return <em>a <strong>boolean array</strong> </em><code>result</code>,<em> where each </em><code>result[j]</code><em> is </em><code>true</code><em> if the </em><code>j<sup>th</sup></code><em> friend request is <strong>successful</strong> or </em><code>false</code><em> if it is not</em>.</p>\n\n<p><strong>Note:</strong> If <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> are already direct friends, the request is still <strong>successful</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]\n<strong>Output:</strong> [true,false]\n<strong>Explanation:\n</strong>Request 0: Person 0 and person 2 can be friends, so they become direct friends. \nRequest 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]\n<strong>Output:</strong> [true,false]\n<strong>Explanation:\n</strong>Request 0: Person 1 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]\n<strong>Output:</strong> [true,false,true,false]\n<strong>Explanation:\n</strong>Request 0: Person 0 and person 4 can be friends, so they become direct friends.\nRequest 1: Person 1 and person 2 cannot be friends since they are directly restricted.\nRequest 2: Person 3 and person 1 can be friends, so they become direct friends.\nRequest 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= restrictions.length &lt;= 1000</code></li>\n\t<li><code>restrictions[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>x<sub>i</sub> != y<sub>i</sub></code></li>\n\t<li><code>1 &lt;= requests.length &lt;= 1000</code></li>\n\t<li><code>requests[j].length == 2</code></li>\n\t<li><code>0 &lt;= u<sub>j</sub>, v<sub>j</sub> &lt;= n - 1</code></li>\n\t<li><code>u<sub>j</sub> != v<sub>j</sub></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 586,
            "dislikes": 14,
            "similarQuestions": "[{\"title\": \"Number of Islands II\", \"titleSlug\": \"number-of-islands-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Smallest String With Swaps\", \"titleSlug\": \"smallest-string-with-swaps\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Employees to Be Invited to a Meeting\", \"titleSlug\": \"maximum-employees-to-be-invited-to-a-meeting\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"16K\", \"totalSubmission\": \"29.3K\", \"totalAcceptedRaw\": 15970, \"totalSubmissionRaw\": 29347, \"acRate\": \"54.4%\"}",
            "hints": [
                "For each request, we could loop through all restrictions. Can you think of doing a check-in close to O(1)?",
                "Could you use Union Find?"
            ],
            "rephrased": {
                "body": "Given `n` people in a network (labeled 0 to n-1) and a list of restrictions where `restrictions[i] = [x_i, y_i]` means person `x_i` and person `y_i` cannot be friends (directly or indirectly).  You are also given a list of friend requests `requests`, where `requests[j] = [u_j, v_j]`. Determine whether each friend request is successful. A request is successful if `u_j` and `v_j` can become friends without violating any restrictions. If successful, `u_j` and `v_j` become direct friends for subsequent requests. Return a boolean array indicating the success of each request.",
                "constraints": [
                    "2 <= n <= 1000",
                    "0 <= restrictions.length <= 1000",
                    "restrictions[i].length == 2",
                    "0 <= x_i, y_i <= n - 1",
                    "x_i != y_i",
                    "1 <= requests.length <= 1000",
                    "requests[j].length == 2",
                    "0 <= u_j, v_j <= n - 1",
                    "u_j != v_j"
                ],
                "testcases": [
                    {
                        "input": {
                            "n": 3,
                            "restrictions": [
                                [
                                    0,
                                    1
                                ]
                            ],
                            "requests": [
                                [
                                    0,
                                    2
                                ],
                                [
                                    2,
                                    1
                                ]
                            ]
                        },
                        "output": [
                            true,
                            false
                        ],
                        "explanation": "Request 0: Person 0 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0)."
                    },
                    {
                        "input": {
                            "n": 3,
                            "restrictions": [
                                [
                                    0,
                                    1
                                ]
                            ],
                            "requests": [
                                [
                                    1,
                                    2
                                ],
                                [
                                    0,
                                    2
                                ]
                            ]
                        },
                        "output": [
                            true,
                            false
                        ],
                        "explanation": "Request 0: Person 1 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1)."
                    },
                    {
                        "input": {
                            "n": 5,
                            "restrictions": [
                                [
                                    0,
                                    1
                                ],
                                [
                                    1,
                                    2
                                ],
                                [
                                    2,
                                    3
                                ]
                            ],
                            "requests": [
                                [
                                    0,
                                    4
                                ],
                                [
                                    1,
                                    2
                                ],
                                [
                                    3,
                                    1
                                ],
                                [
                                    3,
                                    4
                                ]
                            ]
                        },
                        "output": [
                            true,
                            false,
                            true,
                            false
                        ],
                        "explanation": "Request 0: Person 0 and person 4 can be friends, so they become direct friends.\nRequest 1: Person 1 and person 2 cannot be friends since they are directly restricted.\nRequest 2: Person 3 and person 1 can be friends, so they become direct friends.\nRequest 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-islands-ii",
                "title": "Number of Islands II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "smallest-string-with-swaps",
                "title": "Smallest String With Swaps",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-employees-to-be-invited-to-a-meeting",
                "title": "Maximum Employees to Be Invited to a Meeting",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For each request, we could loop through all restrictions. Can you think of doing a check-in close to O(1)?",
            "Could you use Union Find?"
        ],
        "relatedTopics": [
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n};\n\nclass Solution {\n public:\n  vector<bool> friendRequests(int n, vector<vector<int>>& restrictions,\n                              vector<vector<int>>& requests) {\n    vector<bool> ans;\n    UnionFind uf(n);\n\n    for (const vector<int>& request : requests) {\n      const int i = uf.find(request[0]);\n      const int j = uf.find(request[1]);\n      bool isValid = true;\n      if (i != j)\n        for (const vector<int>& restriction : restrictions) {\n          const int x = uf.find(restriction[0]);\n          const int y = uf.find(restriction[1]);\n          if (i == x && j == y || i == y && j == x) {\n            isValid = false;\n            break;\n          }\n        }\n      ans.push_back(isValid);\n      if (isValid)\n        uf.unionByRank(i, j);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  private int[] id;\n  private int[] rank;\n}\n\nclass Solution {\n  public boolean[] friendRequests(int n, int[][] restrictions, int[][] requests) {\n    boolean[] ans = new boolean[requests.length];\n    UnionFind uf = new UnionFind(n);\n\n    for (int i = 0; i < requests.length; ++i) {\n      final int pu = uf.find(requests[i][0]);\n      final int pv = uf.find(requests[i][1]);\n      boolean isValid = true;\n      if (pu != pv)\n        for (int[] restriction : restrictions) {\n          final int px = uf.find(restriction[0]);\n          final int py = uf.find(restriction[1]);\n          if (pu == px && pv == py || pu == py && pv == px) {\n            isValid = false;\n            break;\n          }\n        }\n      ans[i] = isValid;\n      if (isValid)\n        uf.unionByRank(pu, pv);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def friendRequests(self, n: int, restrictions: List[List[int]], requests: List[List[int]]) -> List[bool]:\n    ans = []\n    uf = UnionFind(n)\n\n    for u, v in requests:\n      pu = uf.find(u)\n      pv = uf.find(v)\n      isValid = True\n      if pu != pv:\n        for x, y in restrictions:\n          px = uf.find(x)\n          py = uf.find(y)\n          if (pu, pv) in [(px, py), (py, px)]:\n            isValid = False\n            break\n      ans.append(isValid)\n      if isValid:\n        uf.unionByRank(pu, pv)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}