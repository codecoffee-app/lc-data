{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1882",
            "title": "Process Tasks Using Servers",
            "titleSlug": "process-tasks-using-servers",
            "content": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>servers</code> and <code>tasks</code> of lengths <code>n</code>\u200b\u200b\u200b\u200b\u200b\u200b and <code>m</code>\u200b\u200b\u200b\u200b\u200b\u200b respectively. <code>servers[i]</code> is the <strong>weight</strong> of the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code>\u200b\u200b\u200b\u200b server, and <code>tasks[j]</code> is the <strong>time needed</strong> to process the <code>j<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code>\u200b\u200b\u200b\u200b task <strong>in seconds</strong>.</p>\n\n<p>Tasks are assigned to the servers using a <strong>task queue</strong>. Initially, all servers are free, and the queue is <strong>empty</strong>.</p>\n\n<p>At second <code>j</code>, the <code>j<sup>th</sup></code> task is <strong>inserted</strong> into the queue (starting with the <code>0<sup>th</sup></code> task being inserted at second <code>0</code>). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the <strong>smallest weight</strong>, and in case of a tie, it is assigned to a free server with the <strong>smallest index</strong>.</p>\n\n<p>If there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned <strong>in order of insertion</strong> following the weight and index priorities above.</p>\n\n<p>A server that is assigned task <code>j</code> at second <code>t</code> will be free again at second <code>t + tasks[j]</code>.</p>\n\n<p>Build an array <code>ans</code>\u200b\u200b\u200b\u200b of length <code>m</code>, where <code>ans[j]</code> is the <strong>index</strong> of the server the <code>j<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code> task will be assigned to.</p>\n\n<p>Return <em>the array </em><code>ans</code>\u200b\u200b\u200b\u200b.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> servers = [3,3,2], tasks = [1,2,3,2,1,2]\n<strong>Output:</strong> [2,2,0,2,1,2]\n<strong>Explanation: </strong>Events in chronological order go as follows:\n- At second 0, task 0 is added and processed using server 2 until second 1.\n- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.\n- At second 2, task 2 is added and processed using server 0 until second 5.\n- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.\n- At second 4, task 4 is added and processed using server 1 until second 5.\n- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]\n<strong>Output:</strong> [1,4,1,4,1,3,2]\n<strong>Explanation: </strong>Events in chronological order go as follows: \n- At second 0, task 0 is added and processed using server 1 until second 2.\n- At second 1, task 1 is added and processed using server 4 until second 2.\n- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4. \n- At second 3, task 3 is added and processed using server 4 until second 7.\n- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9. \n- At second 5, task 5 is added and processed using server 3 until second 7.\n- At second 6, task 6 is added and processed using server 2 until second 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>servers.length == n</code></li>\n\t<li><code>tasks.length == m</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= servers[i], tasks[j] &lt;= 2 * 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 869,
            "dislikes": 254,
            "similarQuestions": "[{\"title\": \"Parallel Courses III\", \"titleSlug\": \"parallel-courses-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"29.6K\", \"totalSubmission\": \"74.3K\", \"totalAcceptedRaw\": 29605, \"totalSubmissionRaw\": 74329, \"acRate\": \"39.8%\"}",
            "hints": [
                "You can maintain a Heap of available Servers and a Heap of unavailable servers",
                "Note that the tasks will be processed in the input order so you just need to find the x-th server that will be available according to the rules"
            ],
            "rephrased": {
                "body": "You are given two 0-indexed integer arrays `servers` and `tasks` representing server weights and task processing times respectively. Tasks are assigned to servers using a task queue.  Assign tasks to the free server with the smallest weight; in case of a tie, assign to the server with the smallest index. A server assigned a task at time `t` becomes free at time `t + task_duration`. Return an array `ans` where `ans[j]` is the index of the server assigned to task `j`.",
                "constraints": [
                    "servers.length == n",
                    "tasks.length == m",
                    "1 <= n, m <= 2 * 10^5",
                    "1 <= servers[i], tasks[j] <= 2 * 10^5"
                ],
                "testcases": [
                    {
                        "input": "servers = [3,3,2], tasks = [1,2,3,2,1,2]",
                        "output": "[2,2,0,2,1,2]",
                        "explanation": "At time 0, task 0 is assigned to server 2, finishing at time 1.\nAt time 1, task 1 is assigned to server 2, finishing at time 3.\nAt time 2, task 2 is assigned to server 0, finishing at time 5.\nAt time 3, task 3 is assigned to server 2, finishing at time 5.\nAt time 4, task 4 is assigned to server 1, finishing at time 5.\nAt time 5, task 5 is assigned to server 2, finishing at time 7."
                    },
                    {
                        "input": "servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]",
                        "output": "[1,4,1,4,1,3,2]",
                        "explanation": "At time 0, task 0 is assigned to server 1, finishing at time 2.\nAt time 1, task 1 is assigned to server 4, finishing at time 2.\nAt time 2, task 2 is assigned to server 1, finishing at time 4.\nAt time 3, task 3 is assigned to server 4, finishing at time 7.\nAt time 4, task 4 is assigned to server 1, finishing at time 9.\nAt time 5, task 5 is assigned to server 3, finishing at time 7.\nAt time 6, task 6 is assigned to server 2, finishing at time 7."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "parallel-courses-iii",
                "title": "Parallel Courses III",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "You can maintain a Heap of available Servers and a Heap of unavailable servers",
            "Note that the tasks will be processed in the input order so you just need to find the x-th server that will be available according to the rules"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  int weight;\n  int index;\n  int freeTime;\n  T(int weight, int index, int freeTime)\n      : weight(weight), index(index), freeTime(freeTime) {}\n};\n\nclass Solution {\n public:\n  vector<int> assignTasks(vector<int>& servers, vector<int>& tasks) {\n    const int n = servers.size();\n    const int m = tasks.size();\n    vector<int> ans(m);\n    auto compareFree = [](const T& a, const T& b) {\n      return a.weight == b.weight ? a.index > b.index : a.weight > b.weight;\n    };\n    auto compareUsed = [](const T& a, const T& b) {\n      if (a.freeTime != b.freeTime)\n        return a.freeTime > b.freeTime;\n      if (a.weight != b.weight)\n        return a.weight > b.weight;\n      return a.index > b.index;\n    };\n    priority_queue<T, vector<T>, decltype(compareFree)> free(compareFree);\n    priority_queue<T, vector<T>, decltype(compareUsed)> used(compareUsed);\n\n    for (int i = 0; i < n; ++i)\n      free.emplace(servers[i], i, 0);\n\n    for (int i = 0; i < m; ++i) {  // I := current time\n      const int executionTime = tasks[i];\n      // Pop all servers that'll be free at time i\n      while (!used.empty() && used.top().freeTime <= i) {\n        const T curr = used.top();\n        used.pop();\n        free.push(curr);\n      }\n      if (free.empty()) {\n        T server = used.top();\n        used.pop();\n        ans[i] = server.index;\n        server.freeTime += executionTime;\n        used.push(server);\n      } else {\n        T server = free.top();\n        free.pop();\n        ans[i] = server.index;\n        server.freeTime = i + executionTime;\n        used.push(server);\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int weight;\n  public int index;\n  public int freeTime;\n  public T(int weight, int index, int freeTime) {\n    this.weight = weight;\n    this.index = index;\n    this.freeTime = freeTime;\n  }\n}\n\nclass Solution {\n  public int[] assignTasks(int[] servers, int[] tasks) {\n    final int n = servers.length;\n    final int m = tasks.length;\n    int[] ans = new int[m];\n    Queue<T> free = new PriorityQueue<>(\n        (a, b) -> a.weight == b.weight ? a.index - b.index : a.weight - b.weight);\n    Queue<T> used = new PriorityQueue<>(new Comparator<T>() {\n      @Override\n      public int compare(T a, T b) {\n        if (a.freeTime != b.freeTime)\n          return a.freeTime - b.freeTime;\n        if (a.weight != b.weight)\n          return a.weight - b.weight;\n        return a.index - b.index;\n      }\n    });\n\n    for (int i = 0; i < n; ++i)\n      free.offer(new T(servers[i], i, 0));\n\n    for (int i = 0; i < m; ++i) { // I := current time\n      final int executionTime = tasks[i];\n      // Poll all servers that'll be free at time i\n      while (!used.isEmpty() && used.peek().freeTime <= i)\n        free.offer(used.poll());\n      if (free.isEmpty()) {\n        T server = used.poll();\n        ans[i] = server.index;\n        server.freeTime += executionTime;\n        used.offer(server);\n      } else {\n        T server = free.poll();\n        ans[i] = server.index;\n        server.freeTime = i + executionTime;\n        used.offer(server);\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def assignTasks(self, servers: List[int], tasks: List[int]) -> List[int]:\n    ans = []\n    free = []  # (weight, index, freeTime)\n    used = []  # (freeTime, weight, index)\n\n    for i, weight in enumerate(servers):\n      heapq.heappush(free, (weight, i, 0))\n\n    for i, executionTime in enumerate(tasks):\n      # Poll all servers that'll be free at time i\n      while used and used[0][0] <= i:\n        curr = heapq.heappop(used)\n        heapq.heappush(free, (curr[1], curr[2], curr[0]))\n      if free:\n        curr = heapq.heappop(free)\n        ans.append(curr[1])\n        heapq.heappush(used, (i + executionTime, curr[0], curr[1]))\n      else:\n        curr = heapq.heappop(used)\n        ans.append(curr[2])\n        heapq.heappush(used, (curr[0] + executionTime, curr[1], curr[2]))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}