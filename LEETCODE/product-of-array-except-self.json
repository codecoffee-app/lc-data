{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "238",
            "title": "Product of Array Except Self",
            "titleSlug": "product-of-array-except-self",
            "content": "<p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p>\n\n<p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time and without using the division operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> [24,12,8,6]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,1,0,-3,3]\n<strong>Output:</strong> [0,0,9,0,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-30 &lt;= nums[i] &lt;= 30</code></li>\n\t<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Can you solve the problem in <code>O(1)</code>&nbsp;extra&nbsp;space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 20988,
            "dislikes": 1221,
            "similarQuestions": "[{\"title\": \"Trapping Rain Water\", \"titleSlug\": \"trapping-rain-water\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Product Subarray\", \"titleSlug\": \"maximum-product-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint House II\", \"titleSlug\": \"paint-house-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Difference in Sums After Removal of Elements\", \"titleSlug\": \"minimum-difference-in-sums-after-removal-of-elements\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Construct Product Matrix\", \"titleSlug\": \"construct-product-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"2.1M\", \"totalSubmission\": \"3.3M\", \"totalAcceptedRaw\": 2129923, \"totalSubmissionRaw\": 3269061, \"acRate\": \"65.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`. The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer. Your algorithm must run in O(n) time and without using the division operation.  Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)",
                "constraints": [
                    "2 <= nums.length <= 10^5",
                    "-30 <= nums[i] <= 30",
                    "The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer."
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4]",
                        "output": "[24,12,8,6]",
                        "explanation": null
                    },
                    {
                        "input": "[-1,1,0,-3,3]",
                        "output": "[0,0,9,0,0]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "trapping-rain-water",
                "title": "Trapping Rain Water",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-product-subarray",
                "title": "Maximum Product Subarray",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "paint-house-ii",
                "title": "Paint House II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-difference-in-sums-after-removal-of-elements",
                "title": "Minimum Difference in Sums After Removal of Elements",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "construct-product-matrix",
                "title": "Construct Product Matrix",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> productExceptSelf(vector<int>& nums) {\n    const int n = nums.size();\n    vector<int> ans(n);        // Can also use nums as the ans array\n    vector<int> prefix(n, 1);  // Prefix product\n    vector<int> suffix(n, 1);  // Suffix product\n\n    for (int i = 1; i < n; ++i)\n      prefix[i] = prefix[i - 1] * nums[i - 1];\n\n    for (int i = n - 2; i >= 0; --i)\n      suffix[i] = suffix[i + 1] * nums[i + 1];\n\n    for (int i = 0; i < n; ++i)\n      ans[i] = prefix[i] * suffix[i];\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] productExceptSelf(int[] nums) {\n    final int n = nums.length;\n    int[] ans = new int[n];    // Can also use nums as the ans array\n    int[] prefix = new int[n]; // Prefix product\n    int[] suffix = new int[n]; // Suffix product\n\n    prefix[0] = 1;\n    for (int i = 1; i < n; ++i)\n      prefix[i] = prefix[i - 1] * nums[i - 1];\n\n    suffix[n - 1] = 1;\n    for (int i = n - 2; i >= 0; --i)\n      suffix[i] = suffix[i + 1] * nums[i + 1];\n\n    for (int i = 0; i < n; ++i)\n      ans[i] = prefix[i] * suffix[i];\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def productExceptSelf(self, nums: List[int]) -> List[int]:\n    n = len(nums)\n    prefix = [1] * n  # Prefix product\n    suffix = [1] * n  # Suffix product\n\n    for i in range(1, n):\n      prefix[i] = prefix[i - 1] * nums[i - 1]\n\n    for i in reversed(range(n - 1)):\n      suffix[i] = suffix[i + 1] * nums[i + 1]\n\n    return [prefix[i] * suffix[i] for i in range(n)]\n",
                "lang_text": "py"
            }
        }
    }
}