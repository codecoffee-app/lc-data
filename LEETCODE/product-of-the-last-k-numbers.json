{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1352",
            "title": "Product of the Last K Numbers",
            "titleSlug": "product-of-the-last-k-numbers",
            "content": "<p>Design an algorithm that accepts a stream of integers and retrieves the product of the last <code>k</code> integers of the stream.</p>\n\n<p>Implement the <code>ProductOfNumbers</code> class:</p>\n\n<ul>\n\t<li><code>ProductOfNumbers()</code> Initializes the object with an empty stream.</li>\n\t<li><code>void add(int num)</code> Appends the integer <code>num</code> to the stream.</li>\n\t<li><code>int getProduct(int k)</code> Returns the product of the last <code>k</code> numbers in the current list. You can assume that always the current list has at least <code>k</code> numbers.</li>\n</ul>\n\n<p>The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;ProductOfNumbers&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;add&quot;,&quot;getProduct&quot;]\n[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\n\n<strong>Output</strong>\n[null,null,null,null,null,null,20,40,0,null,32]\n\n<strong>Explanation</strong>\nProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3);        // [3]\nproductOfNumbers.add(0);        // [3,0]\nproductOfNumbers.add(2);        // [3,0,2]\nproductOfNumbers.add(5);        // [3,0,2,5]\nproductOfNumbers.add(4);        // [3,0,2,5,4]\nproductOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\nproductOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\nproductOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\nproductOfNumbers.add(8);        // [3,0,2,5,4,8]\nproductOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 4 * 10<sup>4</sup></code></li>\n\t<li>At most <code>4 * 10<sup>4</sup></code> calls will be made to <code>add</code> and <code>getProduct</code>.</li>\n\t<li>The product of the stream at any point in time will fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1412,
            "dislikes": 66,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Data Stream",
                    "slug": "data-stream"
                }
            ],
            "stats": "{\"totalAccepted\": \"78.2K\", \"totalSubmission\": \"154.9K\", \"totalAcceptedRaw\": 78231, \"totalSubmissionRaw\": 154888, \"acRate\": \"50.5%\"}",
            "hints": [
                "Keep all prefix products of numbers in an array, then calculate the product of last K elements in O(1) complexity.",
                "When a zero number is added, clean the array of prefix products."
            ],
            "rephrased": {
                "body": "Design an algorithm to maintain a stream of integers and efficiently retrieve the product of the last `k` integers added to the stream.",
                "constraints": [
                    "0 <= num <= 100",
                    "1 <= k <= 4 * 10^4",
                    "At most 4 * 10^4 calls will be made to `add` and `getProduct`.",
                    "The product of the stream at any point in time will fit in a 32-bit integer."
                ],
                "testcases": [
                    {
                        "input": "[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"] \n[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]",
                        "output": "[null,null,null,null,null,null,20,40,0,null,32]",
                        "explanation": "The ProductOfNumbers object is initialized. Then, the numbers 3, 0, 2, 5, and 4 are added to the stream. The product of the last 2 numbers (5 * 4) is 20. The product of the last 3 numbers (2 * 5 * 4) is 40. The product of the last 4 numbers (0 * 2 * 5 * 4) is 0. The number 8 is added to the stream. Finally, the product of the last 2 numbers (4 * 8) is 32."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Keep all prefix products of numbers in an array, then calculate the product of last K elements in O(1) complexity.",
            "When a zero number is added, clean the array of prefix products."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Stream",
                "slug": "data-stream"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class ProductOfNumbers {\n public:\n  ProductOfNumbers() : prefix{1} {}\n\n  void add(int num) {\n    if (num == 0)\n      prefix = {1};\n    else\n      prefix.push_back(prefix.back() * num);\n  }\n\n  int getProduct(int k) {\n    return k >= prefix.size() ? 0\n                              : prefix.back() / prefix[prefix.size() - k - 1];\n  }\n\n private:\n  vector<int> prefix;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class ProductOfNumbers {\n  public ProductOfNumbers() {\n    prefix = new ArrayList<>(Arrays.asList(1));\n  }\n\n  public void add(int num) {\n    if (num == 0)\n      prefix = new ArrayList<>(Arrays.asList(1));\n    else\n      prefix.add(prefix.get(prefix.size() - 1) * num);\n  }\n\n  public int getProduct(int k) {\n    return k >= prefix.size() ? 0\n                              : prefix.get(prefix.size() - 1) / prefix.get(prefix.size() - k - 1);\n  }\n\n  private List<Integer> prefix = new ArrayList<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class ProductOfNumbers:\n  def __init__(self):\n    self.prefix = [1]\n\n  def add(self, num: int) -> None:\n    if num == 0:\n      self.prefix = [1]\n    else:\n      self.prefix.append(self.prefix[-1] * num)\n\n  def getProduct(self, k: int) -> int:\n    return 0 if k >= len(self.prefix) else self.prefix[-1] // self.prefix[len(self.prefix) - k - 1]\n",
                "lang_text": "py"
            }
        }
    }
}