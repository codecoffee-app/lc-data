{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2637",
            "title": "Promise Time Limit",
            "titleSlug": "promise-time-limit",
            "content": "<p>Given an&nbsp;asynchronous function&nbsp;<code>fn</code>&nbsp;and a time <code>t</code>&nbsp;in milliseconds, return&nbsp;a new&nbsp;<strong>time limited</strong>&nbsp;version of the input function. <code>fn</code> takes arguments provided to the&nbsp;<strong>time limited&nbsp;</strong>function.</p>\n\n<p>The <strong>time limited</strong> function should follow these rules:</p>\n\n<ul>\n\t<li>If the <code>fn</code> completes within the time limit of <code>t</code> milliseconds, the <strong>time limited</strong> function should&nbsp;resolve with the result.</li>\n\t<li>If the execution of the <code>fn</code> exceeds the time limit, the <strong>time limited</strong> function should reject with the string <code>&quot;Time Limit Exceeded&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nfn = async (n) =&gt; { \n&nbsp; await new Promise(res =&gt; setTimeout(res, 100)); \n&nbsp; return n * n; \n}\ninputs = [5]\nt = 50\n<strong>Output:</strong> {&quot;rejected&quot;:&quot;Time Limit Exceeded&quot;,&quot;time&quot;:50}\n<strong>Explanation:</strong>\nconst limited = timeLimit(fn, t)\nconst start = performance.now()\nlet result;\ntry {\n&nbsp; &nbsp;const res = await limited(...inputs)\n&nbsp; &nbsp;result = {&quot;resolved&quot;: res, &quot;time&quot;: Math.floor(performance.now() - start)};\n} catch (err) {\n&nbsp;  result = {&quot;rejected&quot;: err, &quot;time&quot;: Math.floor(performance.now() - start)};\n}\nconsole.log(result) // Output\n\nThe provided function is set to resolve after 100ms. However, the time limit is set to 50ms. It rejects at t=50ms because the time limit was reached.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nfn = async (n) =&gt; { \n&nbsp; await new Promise(res =&gt; setTimeout(res, 100)); \n&nbsp; return n * n; \n}\ninputs = [5]\nt = 150\n<strong>Output:</strong> {&quot;resolved&quot;:25,&quot;time&quot;:100}\n<strong>Explanation:</strong>\nThe function resolved 5 * 5 = 25 at t=100ms. The time limit is never reached.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nfn = async (a, b) =&gt; { \n&nbsp; await new Promise(res =&gt; setTimeout(res, 120)); \n&nbsp; return a + b; \n}\ninputs = [5,10]\nt = 150\n<strong>Output:</strong> {&quot;resolved&quot;:15,&quot;time&quot;:120}\n<strong>Explanation:</strong>\n\u200b\u200b\u200b\u200bThe function resolved 5 + 10 = 15 at t=120ms. The time limit is never reached.\n</pre>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nfn = async () =&gt; { \n&nbsp; throw &quot;Error&quot;;\n}\ninputs = []\nt = 1000\n<strong>Output:</strong> {&quot;rejected&quot;:&quot;Error&quot;,&quot;time&quot;:0}\n<strong>Explanation:</strong>\nThe function immediately throws an error.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= inputs.length &lt;= 10</code></li>\n\t<li><code>0 &lt;= t &lt;= 1000</code></li>\n\t<li><code>fn</code> returns a promise</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 416,
            "dislikes": 52,
            "similarQuestions": "[{\"title\": \"Sleep\", \"titleSlug\": \"sleep\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Debounce\", \"titleSlug\": \"debounce\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Promise Pool\", \"titleSlug\": \"promise-pool\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Cache With Time Limit\", \"titleSlug\": \"cache-with-time-limit\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Throttle\", \"titleSlug\": \"throttle\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [],
            "stats": "{\"totalAccepted\": \"32.4K\", \"totalSubmission\": \"39.8K\", \"totalAcceptedRaw\": 32404, \"totalSubmissionRaw\": 39820, \"acRate\": \"81.4%\"}",
            "hints": [
                "You can return a copy of a function with: \r\n\r\nfunction outerFunction(fn) { \r\n  return function innerFunction(...params) {\r\n    return fn(...params);\r\n  };\r\n}",
                "Inside the inner function, you will need to return a new Promise.",
                "You can create a new promise like: new Promise((resolve, reject) => {}).",
                "You can execute code with a delay with \"setTimeout(fn, delay)\"",
                "To reject a promise after a delay, \"setTimeout(() => reject('err'), delay)\"",
                "You can resolve and reject when the passed promise resolves or rejects with: \"fn(...params).then(resolve).catch(reject)\""
            ],
            "rephrased": {
                "body": "Given an asynchronous function `fn` and a time `t` in milliseconds, create a new, time-limited version of the input function. `fn` accepts arguments provided to the time-limited function.\n\nThe time-limited function should:\n\n*   Resolve with the result if `fn` completes within the time limit `t`.\n*   Reject with the string \"Time Limit Exceeded\" if the execution of `fn` exceeds the time limit.",
                "constraints": [
                    "0 <= inputs.length <= 10",
                    "0 <= t <= 1000",
                    "`fn` returns a promise"
                ],
                "testcases": [
                    {
                        "input": {
                            "fn": "async (n) => { await new Promise(res => setTimeout(res, 100)); return n * n; }",
                            "inputs": "[5]",
                            "t": 50
                        },
                        "output": "{\"rejected\":\"Time Limit Exceeded\",\"time\":50}",
                        "explanation": "The provided function is designed to resolve after 100ms. However, the time limit is set to 50ms. The time-limited function rejects after 50ms because the execution exceeded the defined time limit."
                    },
                    {
                        "input": {
                            "fn": "async (n) => { await new Promise(res => setTimeout(res, 100)); return n * n; }",
                            "inputs": "[5]",
                            "t": 150
                        },
                        "output": "{\"resolved\":25,\"time\":100}",
                        "explanation": "The function resolves with 5 * 5 = 25 after 100ms. The time limit of 150ms is never reached."
                    },
                    {
                        "input": {
                            "fn": "async (a, b) => { await new Promise(res => setTimeout(res, 120)); return a + b; }",
                            "inputs": "[5,10]",
                            "t": 150
                        },
                        "output": "{\"resolved\":15,\"time\":120}",
                        "explanation": "The function resolves with 5 + 10 = 15 after 120ms. The time limit of 150ms is not exceeded."
                    },
                    {
                        "input": {
                            "fn": "async () => { throw \"Error\"; }",
                            "inputs": "[]",
                            "t": 1000
                        },
                        "output": "{\"rejected\":\"Error\",\"time\":0}",
                        "explanation": "The function immediately throws an error, causing the time-limited function to reject with the same error."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "sleep",
                "title": "Sleep",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "debounce",
                "title": "Debounce",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "promise-pool",
                "title": "Promise Pool",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "cache-with-time-limit",
                "title": "Cache With Time Limit",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "throttle",
                "title": "Throttle",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "You can return a copy of a function with: \r\n\r\nfunction outerFunction(fn) { \r\n  return function innerFunction(...params) {\r\n    return fn(...params);\r\n  };\r\n}",
            "Inside the inner function, you will need to return a new Promise.",
            "You can create a new promise like: new Promise((resolve, reject) => {}).",
            "You can execute code with a delay with \"setTimeout(fn, delay)\"",
            "To reject a promise after a delay, \"setTimeout(() => reject('err'), delay)\"",
            "You can resolve and reject when the passed promise resolves or rejects with: \"fn(...params).then(resolve).catch(reject)\""
        ],
        "relatedTopics": [],
        "solutions": {}
    }
}