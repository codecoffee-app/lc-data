{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2551",
            "title": "Put Marbles in Bags",
            "titleSlug": "put-marbles-in-bags",
            "content": "<p>You have <code>k</code> bags. You are given a <strong>0-indexed</strong> integer array <code>weights</code> where <code>weights[i]</code> is the weight of the <code>i<sup>th</sup></code> marble. You are also given the integer <code>k.</code></p>\n\n<p>Divide the marbles into the <code>k</code> bags according to the following rules:</p>\n\n<ul>\n\t<li>No bag is empty.</li>\n\t<li>If the <code>i<sup>th</sup></code> marble and <code>j<sup>th</sup></code> marble are in a bag, then all marbles with an index between the <code>i<sup>th</sup></code> and <code>j<sup>th</sup></code> indices should also be in that same bag.</li>\n\t<li>If a bag consists of all the marbles with an index from <code>i</code> to <code>j</code> inclusively, then the cost of the bag is <code>weights[i] + weights[j]</code>.</li>\n</ul>\n\n<p>The <strong>score</strong> after distributing the marbles is the sum of the costs of all the <code>k</code> bags.</p>\n\n<p>Return <em>the <strong>difference</strong> between the <strong>maximum</strong> and <strong>minimum</strong> scores among marble distributions</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> weights = [1,3,5,1], k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nThe distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6. \nThe distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10. \nThus, we return their difference 10 - 6 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> weights = [1, 3], k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The only distribution possible is [1],[3]. \nSince both the maximal and minimal score are the same, we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= weights.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= weights[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1979,
            "dislikes": 79,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"55.6K\", \"totalSubmission\": \"83.1K\", \"totalAcceptedRaw\": 55574, \"totalSubmissionRaw\": 83122, \"acRate\": \"66.9%\"}",
            "hints": [
                "Each bag will contain a sub-array.",
                "Only the endpoints of the sub-array matter.",
                "Try to use a priority queue."
            ],
            "rephrased": {
                "body": "You are given an array `weights` representing the weights of marbles and an integer `k` representing the number of bags. Divide the marbles into `k` non-empty bags such that if marbles with indices `i` and `j` are in the same bag, all marbles between them must also be in that bag. The cost of a bag is the sum of the weights of the first and last marble in the bag. The score is the sum of the costs of all bags. Find the difference between the maximum and minimum possible scores among all valid marble distributions.",
                "constraints": [
                    "1 <= k <= weights.length <= 10^5",
                    "1 <= weights[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "weights = [1,3,5,1], k = 2",
                        "output": "4",
                        "explanation": "The minimal score is achieved with the distribution [1],[3,5,1], resulting in (1+1) + (3+1) = 6.  The maximal score is achieved with the distribution [1,3],[5,1], resulting in (1+3) + (5+1) = 10.  The difference is 10 - 6 = 4."
                    },
                    {
                        "input": "weights = [1, 3], k = 2",
                        "output": "0",
                        "explanation": "The only possible distribution is [1],[3]. Both the maximal and minimal scores are the same, so the difference is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Each bag will contain a sub-array.",
            "Only the endpoints of the sub-array matter.",
            "Try to use a priority queue."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long putMarbles(vector<int>& weights, int k) {\n    // To distribute marbles into k bags, there will be k - 1 cuts. If there's a\n    // cut after weights[i], then weights[i] and weights[i + 1] will be added to\n    // the cost. Also, no matter how we cut, weights[0] and weights[n - 1] will\n    // be counted. So, the goal is to find the max/min k - 1 weights[i] +\n    // weights[i + 1].\n    vector<int> A;  // weights[i] + weights[i + 1]\n    long long min = 0;\n    long long max = 0;\n\n    for (int i = 0; i + 1 < weights.size(); ++i)\n      A.push_back(weights[i] + weights[i + 1]);\n\n    std::ranges::sort(A);\n\n    for (int i = 0; i < k - 1; ++i) {\n      min += A[i];\n      max += A[A.size() - 1 - i];\n    }\n\n    return max - min;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long putMarbles(int[] weights, int k) {\n    // To distribute marbles into k bags, there will be k - 1 cuts. If there's a\n    // cut after weights[i], then weights[i] and weights[i + 1] will be added to\n    // the cost. Also, no matter how we cut, weights[0] and weights[n - 1] will\n    // be counted. So, the goal is to find the max/min k - 1 weights[i] +\n    // weights[i + 1].\n    int[] A = new int[weights.length - 1]; // weights[i] + weights[i + 1]\n    long min = 0;\n    long max = 0;\n\n    for (int i = 0; i < A.length; ++i)\n      A[i] = weights[i] + weights[i + 1];\n\n    Arrays.sort(A);\n\n    for (int i = 0; i < k - 1; ++i) {\n      min += A[i];\n      max += A[A.length - 1 - i];\n    }\n\n    return max - min;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def putMarbles(self, weights: List[int], k: int) -> int:\n    # To distribute marbles into k bags, there will be k - 1 cuts. If there's a\n    # cut after weights[i], then weights[i] and weights[i + 1] will be added to\n    # the cost. Also, no matter how we cut, weights[0] and weights[n - 1] will\n    # be counted. So, the goal is to find the max//min k - 1 weights[i] +\n    # weights[i + 1].\n\n    # weights[i] + weights[i + 1]\n    A = [a + b for a, b in itertools.pairwise(weights)]\n    return sum(heapq.nlargest(k - 1, A)) - sum(heapq.nsmallest(k - 1, A))\n",
                "lang_text": "py"
            }
        }
    }
}