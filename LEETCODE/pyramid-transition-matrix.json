{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "756",
            "title": "Pyramid Transition Matrix",
            "titleSlug": "pyramid-transition-matrix",
            "content": "<p>You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains <strong>one less block</strong> than the row beneath it and is centered on top.</p>\n\n<p>To make the pyramid aesthetically pleasing, there are only specific <strong>triangular patterns</strong> that are allowed. A triangular pattern consists of a <strong>single block</strong> stacked on top of <strong>two blocks</strong>. The patterns are given&nbsp;as a list of&nbsp;three-letter strings <code>allowed</code>, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.</p>\n\n<ul>\n\t<li>For example, <code>&quot;ABC&quot;</code> represents a triangular pattern with a <code>&#39;C&#39;</code> block stacked on top of an <code>&#39;A&#39;</code> (left) and <code>&#39;B&#39;</code> (right) block. Note that this is different from <code>&quot;BAC&quot;</code> where <code>&#39;B&#39;</code> is on the left bottom and <code>&#39;A&#39;</code> is on the right bottom.</li>\n</ul>\n\n<p>You start with a bottom row of blocks <code>bottom</code>, given as a single string, that you <strong>must</strong> use as the base of the pyramid.</p>\n\n<p>Given <code>bottom</code> and <code>allowed</code>, return <code>true</code><em> if you can build the pyramid all the way to the top such that <strong>every triangular pattern</strong> in the pyramid is in </em><code>allowed</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/26/pyramid1-grid.jpg\" style=\"width: 600px; height: 232px;\" />\n<pre>\n<strong>Input:</strong> bottom = &quot;BCD&quot;, allowed = [&quot;BCC&quot;,&quot;CDE&quot;,&quot;CEA&quot;,&quot;FFF&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 3), we can build &quot;CE&quot; on level 2 and then build &quot;A&quot; on level 1.\nThere are three triangular patterns in the pyramid, which are &quot;BCC&quot;, &quot;CDE&quot;, and &quot;CEA&quot;. All are allowed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/26/pyramid2-grid.jpg\" style=\"width: 600px; height: 359px;\" />\n<pre>\n<strong>Input:</strong> bottom = &quot;AAAA&quot;, allowed = [&quot;AAB&quot;,&quot;AAC&quot;,&quot;BCD&quot;,&quot;BBE&quot;,&quot;DEF&quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= bottom.length &lt;= 6</code></li>\n\t<li><code>0 &lt;= allowed.length &lt;= 216</code></li>\n\t<li><code>allowed[i].length == 3</code></li>\n\t<li>The letters in all input strings are from the set <code>{&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;}</code>.</li>\n\t<li>All the values of <code>allowed</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 516,
            "dislikes": 474,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"31.8K\", \"totalSubmission\": \"60.7K\", \"totalAcceptedRaw\": 31841, \"totalSubmissionRaw\": 60671, \"acRate\": \"52.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are building a pyramid by stacking blocks. Each block has a color represented by a single letter. Each row has one less block than the row below and is centered on top.\n\nTo ensure the pyramid is aesthetically pleasing, only specific triangular patterns are permitted. A triangular pattern is a single block stacked on top of two blocks. These allowed patterns are provided in the `allowed` list, where each string represents a pattern. The first two characters are the left and right bottom blocks, and the third is the top block.\n\nYou start with a bottom row of blocks `bottom` which serves as the pyramid's base.\n\nDetermine if it's possible to build the pyramid all the way to the top such that every triangular pattern is in `allowed`. Return `true` if possible, otherwise return `false`.",
                "constraints": [
                    "2 <= bottom.length <= 6",
                    "0 <= allowed.length <= 216",
                    "allowed[i].length == 3",
                    "The letters in all input strings are from the set {'A', 'B', 'C', 'D', 'E', 'F'}.",
                    "All the values of allowed are unique."
                ],
                "testcases": [
                    {
                        "input": {
                            "bottom": "BCD",
                            "allowed": [
                                "BCC",
                                "CDE",
                                "CEA",
                                "FFF"
                            ]
                        },
                        "output": true,
                        "explanation": "Starting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"A\" on level 1. The triangular patterns in the pyramid, \"BCC\", \"CDE\", and \"CEA\", are all allowed."
                    },
                    {
                        "input": {
                            "bottom": "AAAA",
                            "allowed": [
                                "AAB",
                                "AAC",
                                "BCD",
                                "BBE",
                                "DEF"
                            ]
                        },
                        "output": false,
                        "explanation": "There are multiple ways to build level 3 from the bottom level, but all possibilities will lead to getting stuck before building the top level."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool pyramidTransition(string bottom, vector<string>& allowed) {\n    unordered_map<string, vector<char>> prefixToBlocks;\n\n    for (const string& a : allowed)\n      prefixToBlocks[a.substr(0, 2)].push_back(a[2]);\n\n    return dfs(bottom, \"\", 0, prefixToBlocks);\n  }\n\n private:\n  bool dfs(const string& row, const string& nextRow, int i,\n           const unordered_map<string, vector<char>>& prefixToBlocks) {\n    if (row.length() == 1)\n      return true;\n    if (nextRow.length() + 1 == row.length())\n      return dfs(nextRow, \"\", 0, prefixToBlocks);\n\n    const string& prefix = row.substr(i, 2);\n\n    if (const auto it = prefixToBlocks.find(prefix);\n        it != prefixToBlocks.cend())\n      for (const char c : it->second)\n        if (dfs(row, nextRow + c, i + 1, prefixToBlocks))\n          return true;\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean pyramidTransition(String bottom, List<String> allowed) {\n    Map<String, List<Character>> prefixToBlocks = new HashMap<>();\n\n    for (final String a : allowed) {\n      final String lowerBlocks = a.substring(0, 2);\n      prefixToBlocks.putIfAbsent(lowerBlocks, new LinkedList<>());\n      prefixToBlocks.get(lowerBlocks).add(a.charAt(2));\n    }\n\n    return dfs(bottom, \"\", 0, prefixToBlocks);\n  }\n\n  private boolean dfs(final String row, final String nextRow, int i,\n                      Map<String, List<Character>> prefixToBlocks) {\n    if (row.length() == 1)\n      return true;\n    if (nextRow.length() + 1 == row.length())\n      return dfs(nextRow, \"\", 0, prefixToBlocks);\n\n    final String prefix = row.substring(i, i + 2);\n\n    if (prefixToBlocks.containsKey(prefix))\n      for (final char c : prefixToBlocks.get(prefix))\n        if (dfs(row, nextRow + c, i + 1, prefixToBlocks))\n          return true;\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:\n    prefixToBlocks = collections.defaultdict(list)\n\n    for a in allowed:\n      prefixToBlocks[a[:2]].append(a[2])\n\n    def dfs(row: str, nextRow: str, i: int) -> bool:\n      if len(row) == 1:\n        return True\n      if len(nextRow) + 1 == len(row):\n        return dfs(nextRow, '', 0)\n\n      for c in prefixToBlocks[row[i:i + 2]]:\n        if dfs(row, nextRow + c, i + 1):\n          return True\n\n      return False\n\n    return dfs(bottom, '', 0)\n",
                "lang_text": "py"
            }
        }
    }
}