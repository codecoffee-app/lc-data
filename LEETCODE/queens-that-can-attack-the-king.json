{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1222",
            "title": "Queens That Can Attack the King",
            "titleSlug": "queens-that-can-attack-the-king",
            "content": "<p>On a <strong>0-indexed</strong> <code>8 x 8</code> chessboard, there can be multiple black queens and one white king.</p>\n\n<p>You are given a 2D integer array <code>queens</code> where <code>queens[i] = [xQueen<sub>i</sub>, yQueen<sub>i</sub>]</code> represents the position of the <code>i<sup>th</sup></code> black queen on the chessboard. You are also given an integer array <code>king</code> of length <code>2</code> where <code>king = [xKing, yKing]</code> represents the position of the white king.</p>\n\n<p>Return <em>the coordinates of the black queens that can directly attack the king</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/21/chess1.jpg\" style=\"width: 400px; height: 400px;\" />\n<pre>\n<strong>Input:</strong> queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]\n<strong>Output:</strong> [[0,1],[1,0],[3,3]]\n<strong>Explanation:</strong> The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/21/chess2.jpg\" style=\"width: 400px; height: 400px;\" />\n<pre>\n<strong>Input:</strong> queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]\n<strong>Output:</strong> [[2,2],[3,4],[4,4]]\n<strong>Explanation:</strong> The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queens.length &lt; 64</code></li>\n\t<li><code>queens[i].length == king.length == 2</code></li>\n\t<li><code>0 &lt;= xQueen<sub>i</sub>, yQueen<sub>i</sub>, xKing, yKing &lt; 8</code></li>\n\t<li>All the given positions are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 917,
            "dislikes": 146,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"40.7K\", \"totalSubmission\": \"56.7K\", \"totalAcceptedRaw\": 40694, \"totalSubmissionRaw\": 56708, \"acRate\": \"71.8%\"}",
            "hints": [
                "Check 8 directions around the King.",
                "Find the nearest queen in each direction."
            ],
            "rephrased": {
                "body": "Given a 0-indexed 8 x 8 chessboard with multiple black queens and one white king, determine which queens can directly attack the king. You are provided with a 2D integer array `queens`, where `queens[i] = [xQueen_i, yQueen_i]` represents the position of the i-th black queen. You are also given an integer array `king` of length 2, where `king = [xKing, yKing]` represents the position of the white king. Return the coordinates of the black queens that can directly attack the king. The answer can be in any order. A queen can attack the king if they share the same row, column, or diagonal, and there are no other pieces between them.",
                "constraints": [
                    "1 <= queens.length <= 64",
                    "queens[i].length == king.length == 2",
                    "0 <= xQueen_i, yQueen_i, xKing, yKing < 8",
                    "All the given positions are unique."
                ],
                "testcases": [
                    {
                        "input": "queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]",
                        "output": "[[0,1],[1,0],[3,3]]",
                        "explanation": "The queens at [0,1], [1,0], and [3,3] can directly attack the king at [0,0] along the same row, column, or diagonal, without any obstructions."
                    },
                    {
                        "input": "queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]",
                        "output": "[[2,2],[3,4],[4,4]]",
                        "explanation": "The queens at [2,2], [3,4] and [4,4] can directly attack the king at [3,3] along the same row, column, or diagonal, without any obstructions."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Check 8 directions around the King.",
            "Find the nearest queen in each direction."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> queensAttacktheKing(vector<vector<int>>& queens,\n                                          vector<int>& king) {\n    vector<vector<int>> ans;\n    unordered_set<int> queensSet;\n\n    for (vector<int>& queen : queens)\n      queensSet.insert(hash(queen[0], queen[1]));\n\n    vector<vector<int>> directions = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1},\n                                      {0, 1},   {1, -1}, {1, 0},  {1, 1}};\n    for (vector<int> d : directions)\n      for (int i = king[0] + d[0], j = king[1] + d[1];\n           0 <= i && i < 8 && 0 <= j && j < 8; i += d[0], j += d[1])\n        if (queensSet.count(hash(i, j))) {\n          ans.push_back({i, j});\n          break;\n        }\n\n    return ans;\n  }\n\n private:\n  int hash(int i, int j) {\n    return i * 8 + j;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> queensAttacktheKing(int[][] queens, int[] king) {\n    List<List<Integer>> ans = new ArrayList<>();\n    Set<Integer> queensSet = new HashSet<>();\n\n    for (int[] queen : queens)\n      queensSet.add(hash(queen[0], queen[1]));\n\n    int[][] directions =\n        new int[][] {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};\n    for (int[] d : directions)\n      for (int i = king[0] + d[0], j = king[1] + d[1]; 0 <= i && i < 8 && 0 <= j && j < 8;\n           i += d[0], j += d[1])\n        if (queensSet.contains(hash(i, j))) {\n          ans.add(Arrays.asList(i, j));\n          break;\n        }\n\n    return ans;\n  }\n\n  private int hash(int i, int j) {\n    return i * 8 + j;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def queensAttacktheKing(self, queens: List[List[int]], king: List[int]) -> List[List[int]]:\n    ans = []\n    queens = {(i, j) for i, j in queens}\n\n    for d in [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]:\n      i = king[0] + d[0]\n      j = king[1] + d[1]\n      while 0 <= i < 8 and 0 <= j < 8:\n        if (i, j) in queens:\n          ans.append([i, j])\n          break\n        i += d[0]\n        j += d[1]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}