{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1409",
            "title": "Queries on a Permutation With Key",
            "titleSlug": "queries-on-a-permutation-with-key",
            "content": "<p>Given the array <code>queries</code> of positive integers between <code>1</code> and <code>m</code>, you have to process all <code>queries[i]</code> (from <code>i=0</code> to <code>i=queries.length-1</code>) according to the following rules:</p>\n\n<ul>\n\t<li>In the beginning, you have the permutation <code>P=[1,2,3,...,m]</code>.</li>\n\t<li>For the current <code>i</code>, find the position of <code>queries[i]</code> in the permutation <code>P</code> (<strong>indexing from 0</strong>) and then move this at the beginning of the permutation <code>P</code>. Notice that the position of <code>queries[i]</code> in <code>P</code> is the result for <code>queries[i]</code>.</li>\n</ul>\n\n<p>Return an array containing the result for the given <code>queries</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [3,1,2,1], m = 5\n<strong>Output:</strong> [2,1,2,1] \n<strong>Explanation:</strong> The queries are processed as follow: \nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is <strong>2</strong>, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. \nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is <strong>1</strong>, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. \nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is <strong>2</strong>, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. \nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is <strong>1</strong>, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. \nTherefore, the array containing the result is [2,1,2,1].  \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [4,1,2,2], m = 4\n<strong>Output:</strong> [3,1,2,0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [7,5,5,8,3], m = 8\n<strong>Output:</strong> [6,5,0,7,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m &lt;= 10^3</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= m</code></li>\n\t<li><code>1 &lt;= queries[i] &lt;= m</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 472,
            "dislikes": 616,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"47.4K\", \"totalSubmission\": \"56.5K\", \"totalAcceptedRaw\": 47414, \"totalSubmissionRaw\": 56484, \"acRate\": \"83.9%\"}",
            "hints": [
                "Create the permutation P=[1,2,...,m], it could be a list for example.",
                "For each i, find the position of queries[i] with a simple scan over P and then move this to the beginning."
            ],
            "rephrased": {
                "body": "You are given an array `queries` of positive integers between 1 and `m`. Process each `queries[i]` (from i=0 to i=queries.length-1) as follows:\n\n1.  Initialize a permutation `P` as `[1, 2, 3, ..., m]`. \n2. For each `queries[i]`, find its index in `P` (0-based indexing).\n3.  Move `queries[i]` to the beginning of `P`.\n4.  The index found in step 2 is the result for `queries[i]`.\n\nReturn an array containing the results for all queries.",
                "constraints": [
                    "1 <= m <= 10^3",
                    "1 <= queries.length <= m",
                    "1 <= queries[i] <= m"
                ],
                "testcases": [
                    {
                        "input": "{ \"queries\": [3,1,2,1], \"m\": 5 }",
                        "output": "[2,1,2,1]",
                        "explanation": "Initially, P = [1, 2, 3, 4, 5].\n\n-   queries[0] = 3, index of 3 in P is 2. P becomes [3, 1, 2, 4, 5]. Result: 2\n-   queries[1] = 1, index of 1 in P is 1. P becomes [1, 3, 2, 4, 5]. Result: 1\n-   queries[2] = 2, index of 2 in P is 2. P becomes [2, 1, 3, 4, 5]. Result: 2\n-   queries[3] = 1, index of 1 in P is 1. P becomes [1, 2, 3, 4, 5]. Result: 1"
                    },
                    {
                        "input": "{ \"queries\": [4,1,2,2], \"m\": 4 }",
                        "output": "[3,1,2,0]",
                        "explanation": null
                    },
                    {
                        "input": "{ \"queries\": [7,5,5,8,3], \"m\": 8 }",
                        "output": "[6,5,0,7,5]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Create the permutation P=[1,2,...,m], it could be a list for example.",
            "For each i, find the position of queries[i] with a simple scan over P and then move this to the beginning."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class FenwickTree {\n public:\n  FenwickTree(int n) : sums(n + 1) {}\n\n  void update(int i, int delta) {\n    while (i < sums.size()) {\n      sums[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  int get(int i) const {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n\n private:\n  vector<int> sums;\n\n  static inline int lowbit(int i) {\n    return i & -i;\n  }\n};\n\nclass Solution {\n public:\n  vector<int> processQueries(vector<int>& queries, int m) {\n    vector<int> ans;\n    // Map [-m, m] to [0, 2 * m].\n    FenwickTree tree(2 * m + 1);\n    unordered_map<int, int> numToIndex;\n\n    for (int num = 1; num <= m; ++num) {\n      numToIndex[num] = num + m;\n      tree.update(num + m, 1);\n    }\n\n    int nextEmptyIndex = m;  // Map 0 to m.\n\n    for (const int query : queries) {\n      const int index = numToIndex[query];\n      ans.push_back(tree.get(index - 1));\n      // Move `query` from `index` to `nextEmptyIndex`.\n      tree.update(index, -1);\n      tree.update(nextEmptyIndex, 1);\n      numToIndex[query] = nextEmptyIndex--;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class FenwickTree {\n  public FenwickTree(int n) {\n    sums = new int[n + 1];\n  }\n\n  public void update(int i, int delta) {\n    while (i < sums.length) {\n      sums[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  public int get(int i) {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n\n  private int[] sums;\n\n  private static int lowbit(int i) {\n    return i & -i;\n  }\n}\n\nclass Solution {\n  public int[] processQueries(int[] queries, int m) {\n    int[] ans = new int[queries.length];\n    // Map [-m, m] to [0, 2 * m].\n    FenwickTree tree = new FenwickTree(2 * m + 1);\n    Map<Integer, Integer> numToIndex = new HashMap<>();\n\n    for (int num = 1; num <= m; ++num) {\n      numToIndex.put(num, num + m);\n      tree.update(num + m, 1);\n    }\n\n    int nextEmptyIndex = m; // Map 0 to m.\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int query = queries[i];\n      final int index = numToIndex.get(query);\n      ans[i] = tree.get(index - 1);\n      // Move `query` from `index` to `nextEmptyIndex`.\n      tree.update(index, -1);\n      tree.update(nextEmptyIndex, 1);\n      numToIndex.put(query, nextEmptyIndex--);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class FenwickTree:\n  def __init__(self, n: int):\n    self.sums = [0] * (n + 1)\n\n  def update(self, i: int, delta: int) -> None:\n    while i < len(self.sums):\n      self.sums[i] += delta\n      i += FenwickTree.lowbit(i)\n\n  def get(self, i: int) -> int:\n    summ = 0\n    while i > 0:\n      summ += self.sums[i]\n      i -= FenwickTree.lowbit(i)\n    return summ\n\n  @staticmethod\n  def lowbit(i: int) -> int:\n    return i & -i\n\n\nclass Solution:\n  def processQueries(self, queries: List[int], m: int) -> List[int]:\n    ans = []\n    # Map [-m, m] to [0, 2 * m].\n    tree = FenwickTree(2 * m + 1)\n    numToIndex = {num: num + m for num in range(1, m + 1)}\n\n    for num in range(1, m + 1):\n      tree.update(num + m, 1)\n\n    nextEmptyIndex = m  # Map 0 to m.\n\n    for query in queries:\n      index = numToIndex[query]\n      ans.append(tree.get(index - 1))\n      # Move `query` from `index` to `nextEmptyIndex`.\n      tree.update(index, -1)\n      tree.update(nextEmptyIndex, 1)\n      numToIndex[query] = nextEmptyIndex\n      nextEmptyIndex -= 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}