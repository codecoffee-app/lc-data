{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2343",
            "title": "Query Kth Smallest Trimmed Number",
            "titleSlug": "query-kth-smallest-trimmed-number",
            "content": "<p>You are given a <strong>0-indexed</strong> array of strings <code>nums</code>, where each string is of <strong>equal length</strong> and consists of only digits.</p>\n\n<p>You are also given a <strong>0-indexed</strong> 2D integer array <code>queries</code> where <code>queries[i] = [k<sub>i</sub>, trim<sub>i</sub>]</code>. For each <code>queries[i]</code>, you need to:</p>\n\n<ul>\n\t<li><strong>Trim</strong> each number in <code>nums</code> to its <strong>rightmost</strong> <code>trim<sub>i</sub></code> digits.</li>\n\t<li>Determine the <strong>index</strong> of the <code>k<sub>i</sub><sup>th</sup></code> smallest trimmed number in <code>nums</code>. If two trimmed numbers are equal, the number with the <strong>lower</strong> index is considered to be smaller.</li>\n\t<li>Reset each number in <code>nums</code> to its original length.</li>\n</ul>\n\n<p>Return <em>an array </em><code>answer</code><em> of the same length as </em><code>queries</code>,<em> where </em><code>answer[i]</code><em> is the answer to the </em><code>i<sup>th</sup></code><em> query.</em></p>\n\n<p><strong>Note</strong>:</p>\n\n<ul>\n\t<li>To trim to the rightmost <code>x</code> digits means to keep removing the leftmost digit, until only <code>x</code> digits remain.</li>\n\t<li>Strings in <code>nums</code> may contain leading zeros.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [&quot;102&quot;,&quot;473&quot;,&quot;251&quot;,&quot;814&quot;], queries = [[1,1],[2,3],[4,2],[1,2]]\n<strong>Output:</strong> [2,2,1,0]\n<strong>Explanation:</strong>\n1. After trimming to the last digit, nums = [&quot;2&quot;,&quot;3&quot;,&quot;1&quot;,&quot;4&quot;]. The smallest number is 1 at index 2.\n2. Trimmed to the last 3 digits, nums is unchanged. The 2<sup>nd</sup> smallest number is 251 at index 2.\n3. Trimmed to the last 2 digits, nums = [&quot;02&quot;,&quot;73&quot;,&quot;51&quot;,&quot;14&quot;]. The 4<sup>th</sup> smallest number is 73.\n4. Trimmed to the last 2 digits, the smallest number is 2 at index 0.\n   Note that the trimmed number &quot;02&quot; is evaluated as 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [&quot;24&quot;,&quot;37&quot;,&quot;96&quot;,&quot;04&quot;], queries = [[2,1],[2,2]]\n<strong>Output:</strong> [3,0]\n<strong>Explanation:</strong>\n1. Trimmed to the last digit, nums = [&quot;4&quot;,&quot;7&quot;,&quot;6&quot;,&quot;4&quot;]. The 2<sup>nd</sup> smallest number is 4 at index 3.\n   There are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3.\n2. Trimmed to the last 2 digits, nums is unchanged. The 2<sup>nd</sup> smallest number is 24.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i].length &lt;= 100</code></li>\n\t<li><code>nums[i]</code> consists of only digits.</li>\n\t<li>All <code>nums[i].length</code> are <strong>equal</strong>.</li>\n\t<li><code>1 &lt;= queries.length &lt;= 100</code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>1 &lt;= k<sub>i</sub> &lt;= nums.length</code></li>\n\t<li><code>1 &lt;= trim<sub>i</sub> &lt;= nums[i].length</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you use the <strong>Radix Sort Algorithm</strong> to solve this problem? What will be the complexity of that solution?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 253,
            "dislikes": 405,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Radix Sort",
                    "slug": "radix-sort"
                },
                {
                    "name": "Quickselect",
                    "slug": "quickselect"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.2K\", \"totalSubmission\": \"57.5K\", \"totalAcceptedRaw\": 24249, \"totalSubmissionRaw\": 57517, \"acRate\": \"42.2%\"}",
            "hints": [
                "Run a simulation to follow the requirement of each query."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array of strings `nums`, where each string has equal length and consists of only digits, and a 0-indexed 2D integer array `queries` where `queries[i] = [k_i, trim_i]`, for each query, perform the following:\n\n1.  Trim each number in `nums` to its rightmost `trim_i` digits.\n2.  Find the index of the `k_i`-th smallest trimmed number in `nums`. If two trimmed numbers are equal, the number with the lower index is considered smaller.\n3.  Reset each number in `nums` to its original length.\n\nReturn an array `answer` of the same length as `queries`, where `answer[i]` is the answer to the `i`-th query.",
                "constraints": [
                    "1 <= nums.length <= 100",
                    "1 <= nums[i].length <= 100",
                    "nums[i] consists of only digits.",
                    "All nums[i].length are equal.",
                    "1 <= queries.length <= 100",
                    "queries[i].length == 2",
                    "1 <= k_i <= nums.length",
                    "1 <= trim_i <= nums[i].length"
                ],
                "testcases": [
                    {
                        "input": "nums = [\"102\",\"473\",\"251\",\"814\"], queries = [[1,1],[2,3],[4,2],[1,2]]",
                        "output": "[2,2,1,0]",
                        "explanation": "Query 1: Trimmed to the last digit, nums = [\"2\",\"3\",\"1\",\"4\"]. The smallest number is 1 at index 2.\nQuery 2: Trimmed to the last 3 digits, nums is unchanged. The 2nd smallest number is 251 at index 2.\nQuery 3: Trimmed to the last 2 digits, nums = [\"02\",\"73\",\"51\",\"14\"]. The 4th smallest number is 73 at index 1.\nQuery 4: Trimmed to the last 2 digits, the smallest number is 2 at index 0. Note that the trimmed number \"02\" is evaluated as 2."
                    },
                    {
                        "input": "nums = [\"24\",\"37\",\"96\",\"04\"], queries = [[2,1],[2,2]]",
                        "output": "[3,0]",
                        "explanation": "Query 1: Trimmed to the last digit, nums = [\"4\",\"7\",\"6\",\"4\"]. The 2nd smallest number is 4 at index 3. There are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3.\nQuery 2: Trimmed to the last 2 digits, nums is unchanged. The 2nd smallest number is 24 at index 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Run a simulation to follow the requirement of each query."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Radix Sort",
                "slug": "radix-sort"
            },
            {
                "name": "Quickselect",
                "slug": "quickselect"
            }
        ]
    }
}