{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "406",
            "title": "Queue Reconstruction by Height",
            "titleSlug": "queue-reconstruction-by-height",
            "content": "<p>You are given an array of people, <code>people</code>, which are the attributes of some people in a queue (not necessarily in order). Each <code>people[i] = [h<sub>i</sub>, k<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> person of height <code>h<sub>i</sub></code> with <strong>exactly</strong> <code>k<sub>i</sub></code> other people in front who have a height greater than or equal to <code>h<sub>i</sub></code>.</p>\n\n<p>Reconstruct and return <em>the queue that is represented by the input array </em><code>people</code>. The returned queue should be formatted as an array <code>queue</code>, where <code>queue[j] = [h<sub>j</sub>, k<sub>j</sub>]</code> is the attributes of the <code>j<sup>th</sup></code> person in the queue (<code>queue[0]</code> is the person at the front of the queue).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n<strong>Output:</strong> [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n<strong>Explanation:</strong>\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n<strong>Output:</strong> [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= people.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= h<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li><code>0 &lt;= k<sub>i</sub> &lt; people.length</code></li>\n\t<li>It is guaranteed that the queue can be reconstructed.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6964,
            "dislikes": 702,
            "similarQuestions": "[{\"title\": \"Count of Smaller Numbers After Self\", \"titleSlug\": \"count-of-smaller-numbers-after-self\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Reward Top K Students\", \"titleSlug\": \"reward-top-k-students\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"293.9K\", \"totalSubmission\": \"401.1K\", \"totalAcceptedRaw\": 293883, \"totalSubmissionRaw\": 401079, \"acRate\": \"73.3%\"}",
            "hints": [
                "What can you say about the position of the shortest person? </br>\r\nIf the position of the shortest person is <i>i</i>, how many people would be in front of the shortest person?",
                "Once you fix the position of the shortest person, what can you say about the position of the second shortest person?"
            ],
            "rephrased": {
                "body": "You are given an array of people, `people`, where each `people[i] = [h_i, k_i]` represents a person with height `h_i` and exactly `k_i` people in front of them who have a height greater than or equal to `h_i`. Reconstruct and return the queue represented by the input array `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [h_j, k_j]` is the attributes of the `j^{th}` person in the queue.",
                "constraints": [
                    "1 <= people.length <= 2000",
                    "0 <= h_i <= 10^6",
                    "0 <= k_i < people.length",
                    "It is guaranteed that the queue can be reconstructed."
                ],
                "testcases": [
                    {
                        "input": "[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]",
                        "output": "[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]",
                        "explanation": "The reconstructed queue represents the correct order of people. For instance, the person with height 5 and 0 taller people in front is placed first, the person with height 7 and 0 taller people in front is placed second, and so on, satisfying all given conditions."
                    },
                    {
                        "input": "[[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]",
                        "output": "[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]",
                        "explanation": "The reconstructed queue adheres to the height and front count constraints. Each person's position in the queue correctly reflects the number of people in front of them with equal or greater height."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-of-smaller-numbers-after-self",
                "title": "Count of Smaller Numbers After Self",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "reward-top-k-students",
                "title": "Reward Top K Students",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What can you say about the position of the shortest person? </br>\r\nIf the position of the shortest person is <i>i</i>, how many people would be in front of the shortest person?",
            "Once you fix the position of the shortest person, what can you say about the position of the second shortest person?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {\n    vector<vector<int>> ans;\n\n    sort(people.begin(), people.end(), [](const auto& a, const auto& b) {\n      return a[0] == b[0] ? a[1] < b[1] : a[0] > b[0];\n    });\n\n    for (const vector<int>& p : people)\n      ans.insert(ans.begin() + p[1], p);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] reconstructQueue(int[][] people) {\n    List<int[]> ans = new ArrayList<>();\n\n    Arrays.sort(people, (a, b) -> a[0] == b[0] ? a[1] - b[1] : b[0] - a[0]);\n\n    for (final int[] p : people)\n      ans.add(p[1], p);\n\n    return ans.stream().toArray(int[][] ::new);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}