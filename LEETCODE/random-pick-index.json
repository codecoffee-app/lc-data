{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "398",
            "title": "Random Pick Index",
            "titleSlug": "random-pick-index",
            "content": "<p>Given an integer array <code>nums</code> with possible <strong>duplicates</strong>, randomly output the index of a given <code>target</code> number. You can assume that the given target number must exist in the array.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int[] nums)</code> Initializes the object with the array <code>nums</code>.</li>\n\t<li><code>int pick(int target)</code> Picks a random index <code>i</code> from <code>nums</code> where <code>nums[i] == target</code>. If there are multiple valid i&#39;s, then each index should have an equal probability of returning.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]\n<strong>Output</strong>\n[null, 4, 0, 2]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>target</code> is an integer from <code>nums</code>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>pick</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1223,
            "dislikes": 1257,
            "similarQuestions": "[{\"title\": \"Linked List Random Node\", \"titleSlug\": \"linked-list-random-node\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Random Pick with Blacklist\", \"titleSlug\": \"random-pick-with-blacklist\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Random Pick with Weight\", \"titleSlug\": \"random-pick-with-weight\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Reservoir Sampling",
                    "slug": "reservoir-sampling"
                },
                {
                    "name": "Randomized",
                    "slug": "randomized"
                }
            ],
            "stats": "{\"totalAccepted\": \"204.3K\", \"totalSubmission\": \"325.6K\", \"totalAcceptedRaw\": 204328, \"totalSubmissionRaw\": 325627, \"acRate\": \"62.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` containing possible duplicate values, design a data structure that allows you to randomly pick the index of a given `target` number. The `target` number is guaranteed to exist within the array. Implement a `Solution` class with the following methods:\n\n- `Solution(int[] nums)`: Initializes the object with the input array `nums`.\n- `int pick(int target)`: Randomly selects and returns an index `i` from `nums` where `nums[i] == target`.  If multiple valid indices exist, each index should have an equal probability of being returned.",
                "constraints": [
                    "1 <= nums.length <= 2 * 10^4",
                    "-2^31 <= nums[i] <= 2^31 - 1",
                    "target is an integer from nums.",
                    "At most 10^4 calls will be made to pick."
                ],
                "testcases": [
                    {
                        "input": "[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]",
                        "output": "[null, 4, 0, 2]",
                        "explanation": "Initialize the Solution object with the array [1, 2, 3, 3, 3].\n- `pick(3)`:  One of the indices 2, 3, or 4 should be returned randomly with equal probability.\n- `pick(1)`: Index 0 should be returned since nums[0] is the only element equal to 1.\n- `pick(3)`: Again, one of the indices 2, 3, or 4 should be returned randomly with equal probability."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "linked-list-random-node",
                "title": "Linked List Random Node",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "random-pick-with-blacklist",
                "title": "Random Pick with Blacklist",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "random-pick-with-weight",
                "title": "Random Pick with Weight",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Reservoir Sampling",
                "slug": "reservoir-sampling"
            },
            {
                "name": "Randomized",
                "slug": "randomized"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  Solution(vector<int>& nums) : nums(move(nums)) {}\n\n  int pick(int target) {\n    int ans = -1;\n    int range = 0;\n\n    for (int i = 0; i < nums.size(); ++i)\n      if (nums[i] == target && rand() % ++range == 0)\n        ans = i;\n\n    return ans;\n  }\n\n private:\n  vector<int> nums;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public Solution(int[] nums) {\n    this.nums = nums;\n  }\n\n  public int pick(int target) {\n    int ans = -1;\n    int range = 0;\n\n    for (int i = 0; i < nums.length; ++i)\n      if (nums[i] == target && rand.nextInt(++range) == 0)\n        ans = i;\n\n    return ans;\n  }\n\n  private int[] nums;\n  private Random rand = new Random();\n}\n",
                "lang_text": "java"
            }
        }
    }
}