{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "710",
            "title": "Random Pick with Blacklist",
            "titleSlug": "random-pick-with-blacklist",
            "content": "<p>You are given an integer <code>n</code> and an array of <strong>unique</strong> integers <code>blacklist</code>. Design an algorithm to pick a random integer in the range <code>[0, n - 1]</code> that is <strong>not</strong> in <code>blacklist</code>. Any integer that is in the mentioned range and not in <code>blacklist</code> should be <strong>equally likely</strong> to be returned.</p>\n\n<p>Optimize your algorithm such that it minimizes the number of calls to the <strong>built-in</strong> random function of your language.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int n, int[] blacklist)</code> Initializes the object with the integer <code>n</code> and the blacklisted integers <code>blacklist</code>.</li>\n\t<li><code>int pick()</code> Returns a random integer in the range <code>[0, n - 1]</code> and not in <code>blacklist</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;]\n[[7, [2, 3, 5]], [], [], [], [], [], [], []]\n<strong>Output</strong>\n[null, 0, 4, 1, 6, 1, 0, 4]\n\n<strong>Explanation</strong>\nSolution solution = new Solution(7, [2, 3, 5]);\nsolution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\nsolution.pick(); // return 4\nsolution.pick(); // return 1\nsolution.pick(); // return 6\nsolution.pick(); // return 1\nsolution.pick(); // return 0\nsolution.pick(); // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= blacklist.length &lt;= min(10<sup>5</sup>, n - 1)</code></li>\n\t<li><code>0 &lt;= blacklist[i] &lt; n</code></li>\n\t<li>All the values of <code>blacklist</code> are <strong>unique</strong>.</li>\n\t<li>At most <code>2 * 10<sup>4</sup></code> calls will be made to <code>pick</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 837,
            "dislikes": 118,
            "similarQuestions": "[{\"title\": \"Random Pick Index\", \"titleSlug\": \"random-pick-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Random Pick with Weight\", \"titleSlug\": \"random-pick-with-weight\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Unique Binary String\", \"titleSlug\": \"find-unique-binary-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Randomized",
                    "slug": "randomized"
                }
            ],
            "stats": "{\"totalAccepted\": \"40K\", \"totalSubmission\": \"120K\", \"totalAcceptedRaw\": 40023, \"totalSubmissionRaw\": 120012, \"acRate\": \"33.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design an algorithm to pick a random integer in the range `[0, n - 1]` that is not in a given blacklist of unique integers. Each valid integer within the range should have an equal probability of being returned. Optimize the algorithm to minimize calls to the built-in random function.",
                "constraints": [
                    "1 <= n <= 10^9",
                    "0 <= blacklist.length <= min(10^5, n - 1)",
                    "0 <= blacklist[i] < n",
                    "All values in `blacklist` are unique.",
                    "At most 2 * 10^4 calls will be made to `pick`."
                ],
                "testcases": [
                    {
                        "input": "n = 7, blacklist = [2, 3, 5]",
                        "output": "A sequence of random integers from [0, 1, 4, 6], each having an equal probability of 1/4 for each call to pick(). For example: [0, 4, 1, 6, 1, 0, 4]",
                        "explanation": "Initialized with n=7 and blacklist=[2,3,5]. The pick() function should return random integers from the valid set [0, 1, 4, 6] with equal probability on each call."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "random-pick-index",
                "title": "Random Pick Index",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "random-pick-with-weight",
                "title": "Random Pick with Weight",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-unique-binary-string",
                "title": "Find Unique Binary String",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Randomized",
                "slug": "randomized"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  Solution(int n, vector<int>& blacklist) : validRange(n - blacklist.size()) {\n    for (const int b : blacklist)\n      map[b] = -1;\n\n    int maxAvailable = n - 1;\n\n    for (const int b : blacklist)\n      if (b < validRange) {\n        while (map.count(maxAvailable))  // Find the slot that haven't been used\n          --maxAvailable;\n        map[b] = maxAvailable--;\n      }\n  }\n\n  int pick() {\n    const int num = rand() % validRange;\n    const auto it = map.find(num);\n    return it == map.cend() ? num : it->second;\n  }\n\n private:\n  const int validRange;\n  unordered_map<int, int> map;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public Solution(int n, int[] blacklist) {\n    validRange = n - blacklist.length;\n\n    for (final int b : blacklist)\n      map.put(b, -1);\n\n    int maxAvailable = n - 1;\n\n    for (final int b : blacklist)\n      if (b < validRange) {\n        while (map.containsKey(maxAvailable))\n          --maxAvailable;\n        map.put(b, maxAvailable--);\n      }\n  }\n\n  public int pick() {\n    final int num = rand.nextInt(validRange);\n    return map.getOrDefault(num, num);\n  }\n\n  private int validRange;\n  private Map<Integer, Integer> map = new HashMap<>();\n  private Random rand = new Random();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def __init__(self, n: int, blacklist: List[int]):\n    self.validRange = n - len(blacklist)\n    self.dict = {}\n\n    maxAvailable = n - 1\n\n    for b in blacklist:\n      self.dict[b] = -1\n\n    for b in blacklist:\n      if b < self.validRange:\n        while maxAvailable in self.dict:\n          maxAvailable -= 1\n        self.dict[b] = maxAvailable\n        maxAvailable -= 1\n\n  def pick(self) -> int:\n    value = random.randint(0, self.validRange - 1)\n\n    if value in self.dict:\n      return self.dict[value]\n\n    return value\n",
                "lang_text": "py"
            }
        }
    }
}