{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "528",
            "title": "Random Pick with Weight",
            "titleSlug": "random-pick-with-weight",
            "content": "<p>You are given a <strong>0-indexed</strong> array of positive integers <code>w</code> where <code>w[i]</code> describes the <strong>weight</strong> of the <code>i<sup>th</sup></code> index.</p>\n\n<p>You need to implement the function <code>pickIndex()</code>, which <strong>randomly</strong> picks an index in the range <code>[0, w.length - 1]</code> (<strong>inclusive</strong>) and returns it. The <strong>probability</strong> of picking an index <code>i</code> is <code>w[i] / sum(w)</code>.</p>\n\n<ul>\n\t<li>For example, if <code>w = [1, 3]</code>, the probability of picking index <code>0</code> is <code>1 / (1 + 3) = 0.25</code> (i.e., <code>25%</code>), and the probability of picking index <code>1</code> is <code>3 / (1 + 3) = 0.75</code> (i.e., <code>75%</code>).</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;,&quot;pickIndex&quot;]\n[[[1]],[]]\n<strong>Output</strong>\n[null,0]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]\n[[[1,3]],[],[],[],[],[]]\n<strong>Output</strong>\n[null,1,1,1,1,0]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= w.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= w[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pickIndex</code> will be called at most <code>10<sup>4</sup></code> times.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1702,
            "dislikes": 715,
            "similarQuestions": "[{\"title\": \"Random Pick Index\", \"titleSlug\": \"random-pick-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Random Pick with Blacklist\", \"titleSlug\": \"random-pick-with-blacklist\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Random Point in Non-overlapping Rectangles\", \"titleSlug\": \"random-point-in-non-overlapping-rectangles\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                },
                {
                    "name": "Randomized",
                    "slug": "randomized"
                }
            ],
            "stats": "{\"totalAccepted\": \"403.9K\", \"totalSubmission\": \"871.1K\", \"totalAcceptedRaw\": 403892, \"totalSubmissionRaw\": 871052, \"acRate\": \"46.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a **0-indexed** array `w` of positive integers, where `w[i]` represents the **weight** of the `i<sup>th</sup>` index, implement the `pickIndex()` function. This function should randomly select an index from the range `[0, w.length - 1]` (inclusive) with a probability proportional to its weight, specifically `w[i] / sum(w)`.",
                "constraints": [
                    "1 <= w.length <= 10<sup>4</sup>",
                    "1 <= w[i] <= 10<sup>5</sup>",
                    "`pickIndex` will be called at most 10<sup>4</sup> times."
                ],
                "testcases": [
                    {
                        "input": "[\"Solution\",\"pickIndex\"]\n[[[1]],[]]",
                        "output": "[null,0]",
                        "explanation": "A Solution object is initialized with an array containing only the value 1. Calling pickIndex() will return 0, as it's the only available index."
                    },
                    {
                        "input": "[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"] \n[[[1,3]],[],[],[],[],[]]",
                        "output": "[null,1,1,1,1,0]",
                        "explanation": "A Solution object is initialized with the array [1, 3].  Subsequent calls to pickIndex() will randomly return either index 0 or index 1, where index 1 is three times more likely to be picked than index 0. Since this is a randomization problem, multiple answers are allowed. Output shown is just an example."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "random-pick-index",
                "title": "Random Pick Index",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "random-pick-with-blacklist",
                "title": "Random Pick with Blacklist",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "random-point-in-non-overlapping-rectangles",
                "title": "Random Point in Non-overlapping Rectangles",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Randomized",
                "slug": "randomized"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  Solution(vector<int>& w) : prefix(w.size()) {\n    partial_sum(w.begin(), w.end(), prefix.begin());\n  }\n\n  int pickIndex() {\n    const int target = rand() % prefix.back();\n    int l = 0;\n    int r = prefix.size();\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (prefix[m] > target)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n private:\n  vector<int> prefix;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public Solution(int[] w) {\n    prefix = w;\n    for (int i = 1; i < prefix.length; ++i)\n      prefix[i] += prefix[i - 1];\n  }\n\n  public int pickIndex() {\n    final int target = rand.nextInt(prefix[prefix.length - 1]);\n    int l = 0;\n    int r = prefix.length;\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (prefix[m] > target)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l;\n  }\n\n  private int[] prefix;\n  private Random rand = new Random();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def __init__(self, w: List[int]):\n    self.prefix = list(itertools.accumulate(w))\n\n  def pickIndex(self) -> int:\n    target = random.randint(0, self.prefix[-1] - 1)\n    return bisect.bisect_right(range(len(self.prefix)), target,\n                               key=lambda m: self.prefix[m])\n",
                "lang_text": "py"
            }
        }
    }
}