{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "497",
            "title": "Random Point in Non-overlapping Rectangles",
            "titleSlug": "random-point-in-non-overlapping-rectangles",
            "content": "<p>You are given an array of non-overlapping axis-aligned rectangles <code>rects</code> where <code>rects[i] = [a<sub>i</sub>, b<sub>i</sub>, x<sub>i</sub>, y<sub>i</sub>]</code> indicates that <code>(a<sub>i</sub>, b<sub>i</sub>)</code> is the bottom-left corner point of the <code>i<sup>th</sup></code> rectangle and <code>(x<sub>i</sub>, y<sub>i</sub>)</code> is the top-right corner point of the <code>i<sup>th</sup></code> rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.</p>\n\n<p>Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned.</p>\n\n<p><strong>Note</strong> that an integer point is a point that has integer coordinates.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int[][] rects)</code> Initializes the object with the given rectangles <code>rects</code>.</li>\n\t<li><code>int[] pick()</code> Returns a random integer point <code>[u, v]</code> inside the space covered by one of the given rectangles.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/24/lc-pickrandomrec.jpg\" style=\"width: 419px; height: 539px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\n<strong>Output</strong>\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rects.length &lt;= 100</code></li>\n\t<li><code>rects[i].length == 4</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= a<sub>i</sub> &lt; x<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= b<sub>i</sub> &lt; y<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>x<sub>i</sub> - a<sub>i</sub> &lt;= 2000</code></li>\n\t<li><code>y<sub>i</sub> - b<sub>i</sub> &lt;= 2000</code></li>\n\t<li>All the rectangles do not overlap.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>pick</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 452,
            "dislikes": 663,
            "similarQuestions": "[{\"title\": \"Random Pick with Weight\", \"titleSlug\": \"random-pick-with-weight\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Generate Random Point in a Circle\", \"titleSlug\": \"generate-random-point-in-a-circle\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Reservoir Sampling",
                    "slug": "reservoir-sampling"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                },
                {
                    "name": "Randomized",
                    "slug": "randomized"
                }
            ],
            "stats": "{\"totalAccepted\": \"38.9K\", \"totalSubmission\": \"98.1K\", \"totalAcceptedRaw\": 38856, \"totalSubmissionRaw\": 98142, \"acRate\": \"39.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given an array of non-overlapping axis-aligned rectangles `rects`. Each rectangle `rects[i] = [a_i, b_i, x_i, y_i]` is defined by its bottom-left corner `(a_i, b_i)` and top-right corner `(x_i, y_i)`. Design an algorithm to randomly pick an integer point within the space covered by these rectangles, ensuring each point has an equal probability of being selected. Points on the perimeter are included.",
                "constraints": [
                    "1 <= rects.length <= 100",
                    "rects[i].length == 4",
                    "-10^9 <= a_i < x_i <= 10^9",
                    "-10^9 <= b_i < y_i <= 10^9",
                    "x_i - a_i <= 2000",
                    "y_i - b_i <= 2000",
                    "All the rectangles do not overlap.",
                    "At most 10^4 calls will be made to pick."
                ],
                "testcases": [
                    {
                        "input": "[[\"-2, -2, 1, 1\", \"2, 2, 4, 6\"]]",
                        "output": "[1, -2]",
                        "explanation": "A possible output based on the first pick operation."
                    },
                    {
                        "input": "[[\"-2, -2, 1, 1\", \"2, 2, 4, 6\"]]",
                        "output": "[1, -1]",
                        "explanation": "A possible output based on the second pick operation."
                    },
                    {
                        "input": "[[\"-2, -2, 1, 1\", \"2, 2, 4, 6\"]]",
                        "output": "[-1, -2]",
                        "explanation": "A possible output based on the third pick operation."
                    },
                    {
                        "input": "[[\"-2, -2, 1, 1\", \"2, 2, 4, 6\"]]",
                        "output": "[-2, -2]",
                        "explanation": "A possible output based on the fourth pick operation."
                    },
                    {
                        "input": "[[\"-2, -2, 1, 1\", \"2, 2, 4, 6\"]]",
                        "output": "[0, 0]",
                        "explanation": "A possible output based on the fifth pick operation."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "random-pick-with-weight",
                "title": "Random Pick with Weight",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "generate-random-point-in-a-circle",
                "title": "Generate Random Point in a Circle",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Reservoir Sampling",
                "slug": "reservoir-sampling"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            },
            {
                "name": "Randomized",
                "slug": "randomized"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  Solution(vector<vector<int>>& rects) : rects(move(rects)) {\n    for (const vector<int>& r : this->rects)\n      areas.push_back(getArea(r));\n    partial_sum(areas.begin(), areas.end(), areas.begin());\n  }\n\n  vector<int> pick() {\n    const int target = rand() % areas.back();\n    const int index =\n        upper_bound(areas.begin(), areas.end(), target) - areas.begin();\n    const vector<int>& r = rects[index];\n    return {rand() % (r[2] - r[0] + 1) + r[0],\n            rand() % (r[3] - r[1] + 1) + r[1]};\n  }\n\n private:\n  const vector<vector<int>> rects;\n  vector<int> areas;\n\n  int getArea(const vector<int>& r) {\n    return (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public Solution(int[][] rects) {\n    this.rects = rects;\n    areas = new int[rects.length];\n    for (int i = 0; i < rects.length; ++i)\n      areas[i] = getArea(rects[i]) + (i > 0 ? areas[i - 1] : 0);\n  }\n\n  public int[] pick() {\n    final int target = rand.nextInt(areas[areas.length - 1]);\n    final int index = firstGreater(areas, target);\n    final int[] r = rects[index];\n    return new int[] {\n        rand.nextInt(r[2] - r[0] + 1) + r[0],\n        rand.nextInt(r[3] - r[1] + 1) + r[1],\n    };\n  }\n\n  private int[][] rects;\n  private int[] areas;\n  private Random rand = new Random();\n\n  private int getArea(int[] r) {\n    return (r[2] - r[0] + 1) * (r[3] - r[1] + 1);\n  }\n\n  private int firstGreater(int[] areas, int target) {\n    int l = 0;\n    int r = areas.length;\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (areas[m] > target)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def __init__(self, rects: List[List[int]]):\n    self.rects = rects\n    self.areas = list(itertools.accumulate(\n        [(x2 - x1 + 1) * (y2 - y1 + 1) for x1, y1, x2, y2 in rects]))\n\n  def pick(self) -> List[int]:\n    index = bisect_right(self.areas, random.randint(0, self.areas[-1] - 1))\n    x1, y1, x2, y2 = self.rects[index]\n    return [random.randint(x1, x2), random.randint(y1, y2)]\n",
                "lang_text": "py"
            }
        }
    }
}