{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "715",
            "title": "Range Module",
            "titleSlug": "range-module",
            "content": "<p>A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as <strong>half-open intervals</strong> and query about them.</p>\n\n<p>A <strong>half-open interval</strong> <code>[left, right)</code> denotes all the real numbers <code>x</code> where <code>left &lt;= x &lt; right</code>.</p>\n\n<p>Implement the <code>RangeModule</code> class:</p>\n\n<ul>\n\t<li><code>RangeModule()</code> Initializes the object of the data structure.</li>\n\t<li><code>void addRange(int left, int right)</code> Adds the <strong>half-open interval</strong> <code>[left, right)</code>, tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval <code>[left, right)</code> that are not already tracked.</li>\n\t<li><code>boolean queryRange(int left, int right)</code> Returns <code>true</code> if every real number in the interval <code>[left, right)</code> is currently being tracked, and <code>false</code> otherwise.</li>\n\t<li><code>void removeRange(int left, int right)</code> Stops tracking every real number currently being tracked in the <strong>half-open interval</strong> <code>[left, right)</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;RangeModule&quot;, &quot;addRange&quot;, &quot;removeRange&quot;, &quot;queryRange&quot;, &quot;queryRange&quot;, &quot;queryRange&quot;]\n[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]\n<strong>Output</strong>\n[null, null, null, true, false, true]\n\n<strong>Explanation</strong>\nRangeModule rangeModule = new RangeModule();\nrangeModule.addRange(10, 20);\nrangeModule.removeRange(14, 16);\nrangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)\nrangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\nrangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= left &lt; right &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>addRange</code>, <code>queryRange</code>, and <code>removeRange</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1394,
            "dislikes": 115,
            "similarQuestions": "[{\"title\": \"Merge Intervals\", \"titleSlug\": \"merge-intervals\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Insert Interval\", \"titleSlug\": \"insert-interval\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Data Stream as Disjoint Intervals\", \"titleSlug\": \"data-stream-as-disjoint-intervals\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"65.4K\", \"totalSubmission\": \"147.4K\", \"totalAcceptedRaw\": 65426, \"totalSubmissionRaw\": 147430, \"acRate\": \"44.4%\"}",
            "hints": [
                "Maintain a sorted set of disjoint intervals.  addRange and removeRange can be performed with time complexity linear to the size of this set; queryRange can be performed with time complexity logarithmic to the size of this set."
            ],
            "rephrased": {
                "body": "Design a Range Module to track ranges of numbers represented as half-open intervals `[left, right)`, where `left <= x < right`. Implement the following methods:\n\n*   `RangeModule()`: Initializes the object.\n*   `addRange(int left, int right)`: Adds the half-open interval `[left, right)` to the tracked ranges. If the interval overlaps with existing ranges, add any numbers in `[left, right)` that are not already tracked.\n*   `queryRange(int left, int right)`: Returns `true` if every number in the interval `[left, right)` is currently being tracked, and `false` otherwise.\n*   `removeRange(int left, int right)`: Stops tracking every number currently being tracked in the half-open interval `[left, right)`.",
                "constraints": [
                    "1 <= left < right <= 10^9",
                    "At most 10^4 calls will be made to addRange, queryRange, and removeRange."
                ],
                "testcases": [
                    {
                        "input": "[\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]\n[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]",
                        "output": "[null, null, null, true, false, true]",
                        "explanation": "RangeModule rangeModule = new RangeModule();\nrangeModule.addRange(10, 20);\nrangeModule.removeRange(14, 16);\nrangeModule.queryRange(10, 14); // return True, Every number in [10, 14) is being tracked\nrangeModule.queryRange(13, 15); // return False, Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked\nrangeModule.queryRange(16, 17); // return True, The number 16 in [16, 17) is still being tracked, despite the remove operation"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "merge-intervals",
                "title": "Merge Intervals",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "insert-interval",
                "title": "Insert Interval",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "data-stream-as-disjoint-intervals",
                "title": "Data Stream as Disjoint Intervals",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Maintain a sorted set of disjoint intervals.  addRange and removeRange can be performed with time complexity linear to the size of this set; queryRange can be performed with time complexity logarithmic to the size of this set."
        ],
        "relatedTopics": [
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct SegmentTreeNode {\n  int lo;\n  int hi;\n  bool tracked = false;\n  SegmentTreeNode* left;\n  SegmentTreeNode* right;\n  SegmentTreeNode(int lo, int hi, bool tracked, SegmentTreeNode* left = nullptr,\n                  SegmentTreeNode* right = nullptr)\n      : lo(lo), hi(hi), tracked(tracked), left(left), right(right) {}\n  ~SegmentTreeNode() {\n    delete left;\n    delete right;\n    left = nullptr;\n    right = nullptr;\n  }\n};\n\nclass SegmentTree {\n public:\n  explicit SegmentTree() : root(make_unique<SegmentTreeNode>(0, 1e9, false)) {}\n\n  void addRange(int i, int j) {\n    update(root.get(), i, j, true);\n  }\n\n  bool queryRange(int i, int j) {\n    return query(root.get(), i, j);\n  }\n\n  void removeRange(int i, int j) {\n    update(root.get(), i, j, false);\n  }\n\n private:\n  std::unique_ptr<SegmentTreeNode> root;\n\n  void update(SegmentTreeNode* root, int i, int j, bool tracked) {\n    if (root->lo == i && root->hi == j) {\n      root->tracked = tracked;\n      root->left = nullptr;\n      root->right = nullptr;\n      return;\n    }\n    const int mid = root->lo + (root->hi - root->lo) / 2;\n    if (root->left == nullptr) {\n      root->left = new SegmentTreeNode(root->lo, mid, root->tracked);\n      root->right = new SegmentTreeNode(mid + 1, root->hi, root->tracked);\n    }\n    if (j <= mid)\n      update(root->left, i, j, tracked);\n    else if (i > mid)\n      update(root->right, i, j, tracked);\n    else {\n      update(root->left, i, mid, tracked);\n      update(root->right, mid + 1, j, tracked);\n    }\n    root->tracked = root->left->tracked && root->right->tracked;\n  }\n\n  bool query(SegmentTreeNode* root, int i, int j) {\n    if (root->left == nullptr)\n      return root->tracked;\n    if (root->lo == i && root->hi == j)\n      return root->tracked;\n    const int mid = root->lo + (root->hi - root->lo) / 2;\n    if (j <= mid)\n      return query(root->left, i, j);\n    if (i > mid)\n      return query(root->right, i, j);\n    return query(root->left, i, mid) && query(root->right, mid + 1, j);\n  }\n};\n\nclass RangeModule {\n public:\n  void addRange(int left, int right) {\n    tree.addRange(left, right - 1);\n  }\n\n  bool queryRange(int left, int right) {\n    return tree.queryRange(left, right - 1);\n  }\n\n  void removeRange(int left, int right) {\n    tree.removeRange(left, right - 1);\n  }\n\n private:\n  SegmentTree tree;\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}