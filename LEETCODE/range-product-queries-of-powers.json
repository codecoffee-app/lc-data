{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2438",
            "title": "Range Product Queries of Powers",
            "titleSlug": "range-product-queries-of-powers",
            "content": "<p>Given a positive integer <code>n</code>, there exists a <strong>0-indexed</strong> array called <code>powers</code>, composed of the <strong>minimum</strong> number of powers of <code>2</code> that sum to <code>n</code>. The array is sorted in <strong>non-decreasing</strong> order, and there is <strong>only one</strong> way to form the array.</p>\n\n<p>You are also given a <strong>0-indexed</strong> 2D integer array <code>queries</code>, where <code>queries[i] = [left<sub>i</sub>, right<sub>i</sub>]</code>. Each <code>queries[i]</code> represents a query where you have to find the product of all <code>powers[j]</code> with <code>left<sub>i</sub> &lt;= j &lt;= right<sub>i</sub></code>.</p>\n\n<p>Return<em> an array </em><code>answers</code><em>, equal in length to </em><code>queries</code><em>, where </em><code>answers[i]</code><em> is the answer to the </em><code>i<sup>th</sup></code><em> query</em>. Since the answer to the <code>i<sup>th</sup></code> query may be too large, each <code>answers[i]</code> should be returned <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 15, queries = [[0,1],[2,2],[0,3]]\n<strong>Output:</strong> [2,4,64]\n<strong>Explanation:</strong>\nFor n = 15, powers = [1,2,4,8]. It can be shown that powers cannot be a smaller size.\nAnswer to 1st query: powers[0] * powers[1] = 1 * 2 = 2.\nAnswer to 2nd query: powers[2] = 4.\nAnswer to 3rd query: powers[0] * powers[1] * powers[2] * powers[3] = 1 * 2 * 4 * 8 = 64.\nEach answer modulo 10<sup>9</sup> + 7 yields the same answer, so [2,4,64] is returned.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, queries = [[0,0]]\n<strong>Output:</strong> [2]\n<strong>Explanation:</strong>\nFor n = 2, powers = [2].\nThe answer to the only query is powers[0] = 2. The answer modulo 10<sup>9</sup> + 7 is the same, so [2] is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt; powers.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 285,
            "dislikes": 45,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.1K\", \"totalSubmission\": \"38K\", \"totalAcceptedRaw\": 15061, \"totalSubmissionRaw\": 38045, \"acRate\": \"39.6%\"}",
            "hints": [
                "The <code>powers</code> array can be created using the binary representation of <code>n</code>.",
                "Once <code>powers</code> is formed, the products can be taken using brute force."
            ],
            "rephrased": {
                "body": "Given a positive integer `n`, construct an array `powers` containing the minimum number of powers of 2 that sum to `n`.  The `powers` array should be sorted in non-decreasing order. There is only one way to form this array. You are also given a 2D integer array `queries`, where `queries[i] = [left<sub>i</sub>, right<sub>i</sub>]`. For each query, calculate the product of elements in `powers` from index `left<sub>i</sub>` to `right<sub>i</sub>` (inclusive). Return an array `answers` where `answers[i]` is the product for the `i<sup>th</sup>` query, modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= n <= 10<sup>9</sup>",
                    "1 <= queries.length <= 10<sup>5</sup>",
                    "0 <= start<sub>i</sub> <= end<sub>i</sub> < powers.length"
                ],
                "testcases": [
                    {
                        "input": "n = 15, queries = [[0,1],[2,2],[0,3]]",
                        "output": "[2,4,64]",
                        "explanation": "For n = 15, powers = [1, 2, 4, 8]. \nQuery 1: powers[0] * powers[1] = 1 * 2 = 2.\nQuery 2: powers[2] = 4.\nQuery 3: powers[0] * powers[1] * powers[2] * powers[3] = 1 * 2 * 4 * 8 = 64.  Each answer is already modulo 10<sup>9</sup> + 7."
                    },
                    {
                        "input": "n = 2, queries = [[0,0]]",
                        "output": "[2]",
                        "explanation": "For n = 2, powers = [2]. The answer to the only query is powers[0] = 2, which is already modulo 10<sup>9</sup> + 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The <code>powers</code> array can be created using the binary representation of <code>n</code>.",
            "Once <code>powers</code> is formed, the products can be taken using brute force."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ]
    }
}