{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1508",
            "title": "Range Sum of Sorted Subarray Sums",
            "titleSlug": "range-sum-of-sorted-subarray-sums",
            "content": "<p>You are given the array <code>nums</code> consisting of <code>n</code> positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of <code>n * (n + 1) / 2</code> numbers.</p>\n\n<p><em>Return the sum of the numbers from index </em><code>left</code><em> to index </em><code>right</code> (<strong>indexed from 1</strong>)<em>, inclusive, in the new array. </em>Since the answer can be a huge number return it modulo <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4], n = 4, left = 1, right = 5\n<strong>Output:</strong> 13 \n<strong>Explanation:</strong> All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4], n = 4, left = 3, right = 4\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4], n = 4, left = 1, right = 10\n<strong>Output:</strong> 50\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= left &lt;= right &lt;= n * (n + 1) / 2</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 901,
            "dislikes": 148,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"36.4K\", \"totalSubmission\": \"62.2K\", \"totalAcceptedRaw\": 36394, \"totalSubmissionRaw\": 62159, \"acRate\": \"58.5%\"}",
            "hints": [
                "Compute all sums and save it in array.",
                "Then just go from LEFT to RIGHT index and calculate answer modulo 1e9 + 7."
            ],
            "rephrased": {
                "body": "Given an array `nums` of `n` positive integers, calculate the sum of all non-empty continuous subarrays. Sort these sums in non-decreasing order to create a new array of size `n * (n + 1) / 2`. Return the sum of the numbers from index `left` to index `right` (1-indexed) in this sorted array, modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "n == nums.length",
                    "1 <= nums.length <= 1000",
                    "1 <= nums[i] <= 100",
                    "1 <= left <= right <= n * (n + 1) / 2"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3,4], n = 4, left = 1, right = 5",
                        "output": "13",
                        "explanation": "The subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, and 4. Sorting them yields [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum from index 1 to 5 is 1 + 2 + 3 + 3 + 4 = 13."
                    },
                    {
                        "input": "nums = [1,2,3,4], n = 4, left = 3, right = 4",
                        "output": "6",
                        "explanation": "Using the same array as Example 1, the sorted subarray sums are [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum from index 3 to 4 is 3 + 3 = 6."
                    },
                    {
                        "input": "nums = [1,2,3,4], n = 4, left = 1, right = 10",
                        "output": "50",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Compute all sums and save it in array.",
            "Then just go from LEFT to RIGHT index and calculate answer modulo 1e9 + 7."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int rangeSum(vector<int>& nums, int n, int left, int right) {\n    constexpr int kMod = 1'000'000'007;\n\n    auto subarraysAndSumNoGreaterThan = [&](int m) -> pair<int, long> {\n      int count = 0;   // # of subarrays <= m\n      long total = 0;  // Sum(subarrays)\n      int sum = 0;     // Current sum (will be added to `total` in each loop)\n      int window = 0;  // Window sum (can be extend and shrink)\n\n      for (int i = 0, j = 0; j < n; ++j) {\n        sum += nums[j] * (j - i + 1);\n        window += nums[j];  // Extend each subarray ends w/ j\n        while (window > m) {\n          sum -= window;\n          window -= nums[i++];  // Shrink the window\n        }\n        count += j - i + 1;\n        total += sum;\n      }\n\n      return {count, total};\n    };\n\n    // [L, R] is the possible range of the sum of any subarray\n    const int L = *min_element(nums.begin(), nums.end());\n    const int R = accumulate(nums.begin(), nums.end(), 0);\n\n    auto firstKSubarraysSum = [&](int k) -> long {\n      int l = L;\n      int r = R;\n\n      while (l < r) {\n        const int m = l + (r - l) / 2;\n        if (subarraysAndSumNoGreaterThan(m).first < k)\n          l = m + 1;\n        else\n          r = m;\n      }\n\n      const auto& [count, total] = subarraysAndSumNoGreaterThan(l);\n      // When count != k, there're subarray(s) have the same sum as l\n      return total - l * (count - k);\n    };\n\n    return (firstKSubarraysSum(right) - firstKSubarraysSum(left - 1)) % kMod;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}