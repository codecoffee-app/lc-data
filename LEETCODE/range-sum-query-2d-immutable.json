{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "304",
            "title": "Range Sum Query 2D - Immutable",
            "titleSlug": "range-sum-query-2d-immutable",
            "content": "<p>Given a 2D matrix <code>matrix</code>, handle multiple queries of the following type:</p>\n\n<ul>\n\t<li>Calculate the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li>\n</ul>\n\n<p>Implement the <code>NumMatrix</code> class:</p>\n\n<ul>\n\t<li><code>NumMatrix(int[][] matrix)</code> Initializes the object with the integer matrix <code>matrix</code>.</li>\n\t<li><code>int sumRegion(int row1, int col1, int row2, int col2)</code> Returns the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li>\n</ul>\n\n<p>You must design an algorithm where <code>sumRegion</code> works on <code>O(1)</code> time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/sum-grid.jpg\" style=\"width: 415px; height: 415px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;NumMatrix&quot;, &quot;sumRegion&quot;, &quot;sumRegion&quot;, &quot;sumRegion&quot;]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\n<strong>Output</strong>\n[null, 8, 11, 12]\n\n<strong>Explanation</strong>\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= matrix[i][j] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= row1 &lt;= row2 &lt; m</code></li>\n\t<li><code>0 &lt;= col1 &lt;= col2 &lt; n</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>sumRegion</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4803,
            "dislikes": 335,
            "similarQuestions": "[{\"title\": \"Range Sum Query - Immutable\", \"titleSlug\": \"range-sum-query-immutable\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Range Sum Query 2D - Mutable\", \"titleSlug\": \"range-sum-query-2d-mutable\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"347.2K\", \"totalSubmission\": \"644K\", \"totalAcceptedRaw\": 347240, \"totalSubmissionRaw\": 643982, \"acRate\": \"53.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a 2D matrix `matrix`, design a data structure that allows efficient calculation of the sum of elements within a specified rectangular region. Implement the `NumMatrix` class with the following functionalities:\n\n- `NumMatrix(int[][] matrix)`: Initializes the object with the given integer matrix.\n- `int sumRegion(int row1, int col1, int row2, int col2)`: Returns the sum of the elements within the rectangle defined by the upper-left corner `(row1, col1)` and the lower-right corner `(row2, col2)`. The algorithm should achieve O(1) time complexity for this operation.",
                "constraints": [
                    "m == matrix.length",
                    "n == matrix[i].length",
                    "1 <= m, n <= 200",
                    "-10^4 <= matrix[i][j] <= 10^4",
                    "0 <= row1 <= row2 < m",
                    "0 <= col1 <= col2 < n",
                    "At most 10^4 calls will be made to sumRegion."
                ],
                "testcases": [
                    {
                        "input": "[[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"],\n[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]",
                        "output": "[null, 8, 11, 12]",
                        "explanation": "The initial matrix is [[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]].\n- sumRegion(2, 1, 4, 3) calculates the sum of the rectangle with corners (2, 1) and (4, 3), resulting in 2 + 0 + 1 + 1 + 1 + 0 + 3 + 0 = 8.\n- sumRegion(1, 1, 2, 2) calculates the sum of the rectangle with corners (1, 1) and (2, 2), resulting in 6 + 3 + 2 + 0 = 11.\n- sumRegion(1, 2, 2, 4) calculates the sum of the rectangle with corners (1, 2) and (2, 4), resulting in 3 + 2 + 1 + 0 + 1 + 5 = 12."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "range-sum-query-immutable",
                "title": "Range Sum Query - Immutable",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "range-sum-query-2d-mutable",
                "title": "Range Sum Query 2D - Mutable",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class NumMatrix {\n public:\n  NumMatrix(vector<vector<int>>& matrix) {\n    if (matrix.empty())\n      return;\n\n    const int m = matrix.size();\n    const int n = matrix[0].size();\n    // prefix[i][j] := sum of matrix[0..i)[0..j)\n    prefix.resize(m + 1, vector<int>(n + 1));\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        prefix[i + 1][j + 1] =\n            matrix[i][j] + prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j];\n  }\n\n  int sumRegion(int row1, int col1, int row2, int col2) {\n    return prefix[row2 + 1][col2 + 1] - prefix[row1][col2 + 1] -\n           prefix[row2 + 1][col1] + prefix[row1][col1];\n  }\n\n private:\n  vector<vector<int>> prefix;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class NumMatrix {\n  public NumMatrix(int[][] matrix) {\n    if (matrix.length == 0)\n      return;\n\n    final int m = matrix.length;\n    final int n = matrix[0].length;\n    // prefix[i][j] := sum of matrix[0..i)[0..j)\n    prefix = new int[m + 1][n + 1];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        prefix[i + 1][j + 1] = matrix[i][j] + prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j];\n  }\n\n  public int sumRegion(int row1, int col1, int row2, int col2) {\n    return prefix[row2 + 1][col2 + 1] - prefix[row1][col2 + 1] //\n        - prefix[row2 + 1][col1] + prefix[row1][col1];\n  }\n\n  private int[][] prefix;\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class NumMatrix:\n  def __init__(self, matrix: List[List[int]]):\n    if not matrix:\n      return\n\n    m = len(matrix)\n    n = len(matrix[0])\n    # prefix[i][j] := sum of matrix[0..i)[0..j)\n    self.prefix = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m):\n      for j in range(n):\n        self.prefix[i + 1][j + 1] = \\\n            matrix[i][j] + self.prefix[i][j + 1] + \\\n            self.prefix[i + 1][j] - self.prefix[i][j]\n\n  def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n    return self.prefix[row2 + 1][col2 + 1] - self.prefix[row1][col2 + 1] - \\\n        self.prefix[row2 + 1][col1] + self.prefix[row1][col1]\n",
                "lang_text": "py"
            }
        }
    }
}