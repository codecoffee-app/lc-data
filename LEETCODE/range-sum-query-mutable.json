{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "307",
            "title": "Range Sum Query - Mutable",
            "titleSlug": "range-sum-query-mutable",
            "content": "<p>Given an integer array <code>nums</code>, handle multiple queries of the following types:</p>\n\n<ol>\n\t<li><strong>Update</strong> the value of an element in <code>nums</code>.</li>\n\t<li>Calculate the <strong>sum</strong> of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> <strong>inclusive</strong> where <code>left &lt;= right</code>.</li>\n</ol>\n\n<p>Implement the <code>NumArray</code> class:</p>\n\n<ul>\n\t<li><code>NumArray(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li>\n\t<li><code>void update(int index, int val)</code> <strong>Updates</strong> the value of <code>nums[index]</code> to be <code>val</code>.</li>\n\t<li><code>int sumRange(int left, int right)</code> Returns the <strong>sum</strong> of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> <strong>inclusive</strong> (i.e. <code>nums[left] + nums[left + 1] + ... + nums[right]</code>).</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;NumArray&quot;, &quot;sumRange&quot;, &quot;update&quot;, &quot;sumRange&quot;]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\n<strong>Output</strong>\n[null, 9, null, 8]\n\n<strong>Explanation</strong>\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= index &lt; nums.length</code></li>\n\t<li><code>-100 &lt;= val &lt;= 100</code></li>\n\t<li><code>0 &lt;= left &lt;= right &lt; nums.length</code></li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>update</code> and <code>sumRange</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4614,
            "dislikes": 244,
            "similarQuestions": "[{\"title\": \"Range Sum Query - Immutable\", \"titleSlug\": \"range-sum-query-immutable\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Range Sum Query 2D - Mutable\", \"titleSlug\": \"range-sum-query-2d-mutable\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Shifting Letters II\", \"titleSlug\": \"shifting-letters-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"260.8K\", \"totalSubmission\": \"639K\", \"totalAcceptedRaw\": 260768, \"totalSubmissionRaw\": 638951, \"acRate\": \"40.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, implement a data structure that supports the following operations efficiently:\n\n*   **Update:** Modify the value of an element at a given index in `nums`.\n*   **Sum Range:** Calculate the sum of elements within a specified range of indices (inclusive) in `nums`.\n\nImplement the `NumArray` class with the following methods:\n\n*   `NumArray(int[] nums)`: Initializes the object with the given integer array `nums`.\n*   `void update(int index, int val)`: Updates the value of `nums[index]` to `val`.\n*   `int sumRange(int left, int right)`: Returns the sum of the elements of `nums` between indices `left` and `right` (inclusive).",
                "constraints": [
                    "1 <= nums.length <= 3 * 10^4",
                    "-100 <= nums[i] <= 100",
                    "0 <= index < nums.length",
                    "-100 <= val <= 100",
                    "0 <= left <= right < nums.length",
                    "At most 3 * 10^4 calls will be made to `update` and `sumRange`."
                ],
                "testcases": [
                    {
                        "input": "[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]",
                        "output": "[null, 9, null, 8]",
                        "explanation": "First, initialize NumArray with [1, 3, 5].  Then, sumRange(0, 2) returns 1 + 3 + 5 = 9. Next, update(1, 2) modifies the array to [1, 2, 5]. Finally, sumRange(0, 2) returns 1 + 2 + 5 = 8."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "range-sum-query-immutable",
                "title": "Range Sum Query - Immutable",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "range-sum-query-2d-mutable",
                "title": "Range Sum Query 2D - Mutable",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "shifting-letters-ii",
                "title": "Shifting Letters II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            }
        ]
    }
}