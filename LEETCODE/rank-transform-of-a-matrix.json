{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1632",
            "title": "Rank Transform of a Matrix",
            "titleSlug": "rank-transform-of-a-matrix",
            "content": "<p>Given an <code>m x n</code> <code>matrix</code>, return <em>a new matrix </em><code>answer</code><em> where </em><code>answer[row][col]</code><em> is the </em><em><strong>rank</strong> of </em><code>matrix[row][col]</code>.</p>\n\n<p>The <strong>rank</strong> is an <strong>integer</strong> that represents how large an element is compared to other elements. It is calculated using the following rules:</p>\n\n<ul>\n\t<li>The rank is an integer starting from <code>1</code>.</li>\n\t<li>If two elements <code>p</code> and <code>q</code> are in the <strong>same row or column</strong>, then:\n\t<ul>\n\t\t<li>If <code>p &lt; q</code> then <code>rank(p) &lt; rank(q)</code></li>\n\t\t<li>If <code>p == q</code> then <code>rank(p) == rank(q)</code></li>\n\t\t<li>If <code>p &gt; q</code> then <code>rank(p) &gt; rank(q)</code></li>\n\t</ul>\n\t</li>\n\t<li>The <strong>rank</strong> should be as <strong>small</strong> as possible.</li>\n</ul>\n\n<p>The test cases are generated so that <code>answer</code> is unique under the given rules.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/18/rank1.jpg\" style=\"width: 442px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2],[3,4]]\n<strong>Output:</strong> [[1,2],[2,3]]\n<strong>Explanation:</strong>\nThe rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.\nThe rank of matrix[0][1] is 2 because matrix[0][1] &gt; matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][0] is 2 because matrix[1][0] &gt; matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][1] is 3 because matrix[1][1] &gt; matrix[0][1], matrix[1][1] &gt; matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/18/rank2.jpg\" style=\"width: 442px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[7,7],[7,7]]\n<strong>Output:</strong> [[1,1],[1,1]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/18/rank3.jpg\" style=\"width: 601px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]\n<strong>Output:</strong> [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 500</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matrix[row][col] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 852,
            "dislikes": 55,
            "similarQuestions": "[{\"title\": \"Rank Transform of an Array\", \"titleSlug\": \"rank-transform-of-an-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"GCD Sort of an Array\", \"titleSlug\": \"gcd-sort-of-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"21.4K\", \"totalSubmission\": \"52.1K\", \"totalAcceptedRaw\": 21355, \"totalSubmissionRaw\": 52123, \"acRate\": \"41.0%\"}",
            "hints": [
                "Sort the cells by value and process them in increasing order.",
                "The rank of a cell is the maximum rank in its row and column plus one.",
                "Handle the equal cells by treating them as components using a union-find data structure."
            ],
            "rephrased": {
                "body": "Given an `m x n` `matrix`, return a new matrix `answer` where `answer[row][col]` is the **rank** of `matrix[row][col]`. The rank is an integer that represents how large an element is compared to other elements and is calculated based on comparisons within the same row or column. The goal is to determine the smallest possible rank for each element while adhering to the specified rules.",
                "constraints": [
                    "m == matrix.length",
                    "n == matrix[i].length",
                    "1 <= m, n <= 500",
                    "-10<sup>9</sup> <= matrix[row][col] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[3,4]]",
                        "output": "[[1,2],[2,3]]",
                        "explanation": "The rank of matrix[0][0] is 1 because it's the smallest in its row and column. matrix[0][1] is 2 because it's greater than matrix[0][0] (rank 1). matrix[1][0] is 2 because it's greater than matrix[0][0] (rank 1).  matrix[1][1] is 3 because it's greater than matrix[0][1] and matrix[1][0] (both rank 2)."
                    },
                    {
                        "input": "[[7,7],[7,7]]",
                        "output": "[[1,1],[1,1]]",
                        "explanation": "Since all elements are equal, they all have the same rank, which starts from 1."
                    },
                    {
                        "input": "[[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]",
                        "output": "[[4,2,3],[1,3,4],[5,1,6],[1,3,4]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "rank-transform-of-an-array",
                "title": "Rank Transform of an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "gcd-sort-of-an-array",
                "title": "GCD Sort of an Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort the cells by value and process them in increasing order.",
            "The rank of a cell is the maximum rank in its row and column plus one.",
            "Handle the equal cells by treating them as components using a union-find data structure."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  void union_(int u, int v) {\n    if (!id.count(u))\n      id[u] = u;\n    if (!id.count(v))\n      id[v] = v;\n    const int i = find(u);\n    const int j = find(v);\n    if (i != j)\n      id[i] = j;\n  }\n\n  unordered_map<int, vector<int>> getGroupIdToValues() {\n    unordered_map<int, vector<int>> groupIdToValues;\n    for (const auto& [u, _] : id)\n      groupIdToValues[find(u)].push_back(u);\n    return groupIdToValues;\n  }\n\n private:\n  unordered_map<int, int> id;\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n};\n\nclass Solution {\n public:\n  vector<vector<int>> matrixRankTransform(vector<vector<int>>& matrix) {\n    const int m = matrix.size();\n    const int n = matrix[0].size();\n    vector<vector<int>> ans(m, vector<int>(n));\n    // {val: [(i, j)]}\n    map<int, vector<pair<int, int>>> valToGrids;\n    // rank[i] := max rank of the row or column so far\n    vector<int> maxRankSoFar(m + n);\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        valToGrids[matrix[i][j]].emplace_back(i, j);\n\n    for (const auto& [val, grids] : valToGrids) {\n      UnionFind uf;\n      for (const auto& [i, j] : grids)\n        // Union i-th row with j-th col.\n        uf.union_(i, j + m);\n      for (const auto& [groupId, values] : uf.getGroupIdToValues()) {\n        // Get the max rank of all the included rows and cols.\n        int maxRank = 0;\n        for (const int i : values)\n          maxRank = max(maxRank, maxRankSoFar[i]);\n        // Update all the rows and columns to maxRank + 1.\n        for (const int i : values)\n          maxRankSoFar[i] = maxRank + 1;\n      }\n      for (const auto& [i, j] : grids)\n        ans[i][j] = maxRankSoFar[i];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public void union(int u, int v) {\n    id.putIfAbsent(u, u);\n    id.putIfAbsent(v, v);\n    final int i = find(u);\n    final int j = find(v);\n    if (i != j)\n      id.put(i, j);\n  }\n\n  public Map<Integer, List<Integer>> getGroupIdToValues() {\n    Map<Integer, List<Integer>> groupIdToValues = new HashMap<>();\n    for (Map.Entry<Integer, Integer> entry : id.entrySet()) {\n      final int u = entry.getKey();\n      final int i = find(u);\n      groupIdToValues.putIfAbsent(i, new ArrayList<>());\n      groupIdToValues.get(i).add(u);\n    }\n    return groupIdToValues;\n  }\n\n  private Map<Integer, Integer> id = new HashMap<>();\n\n  private int find(int u) {\n    return id.getOrDefault(u, u) == u ? u : find(id.get(u));\n  }\n}\n\nclass Solution {\n  public int[][] matrixRankTransform(int[][] matrix) {\n    final int m = matrix.length;\n    final int n = matrix[0].length;\n    int[][] ans = new int[m][n];\n    // {val: [(i, j)]}\n    TreeMap<Integer, List<Pair<Integer, Integer>>> valToGrids = new TreeMap<>();\n    // rank[i] := max rank of the row or column so far\n    int[] maxRankSoFar = new int[m + n];\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        final int val = matrix[i][j];\n        valToGrids.putIfAbsent(val, new ArrayList<>());\n        valToGrids.get(val).add(new Pair<>(i, j));\n      }\n\n    for (Map.Entry<Integer, List<Pair<Integer, Integer>>> entry : valToGrids.entrySet()) {\n      final int val = entry.getKey();\n      List<Pair<Integer, Integer>> grids = entry.getValue();\n      UnionFind uf = new UnionFind();\n      for (Pair<Integer, Integer> grid : grids) {\n        final int i = grid.getKey();\n        final int j = grid.getValue();\n        // Union i-th row with j-th col.\n        uf.union(i, j + m);\n      }\n      for (List<Integer> values : uf.getGroupIdToValues().values()) {\n        // Get the max rank of all the included rows and cols.\n        int maxRank = 0;\n        for (final int i : values)\n          maxRank = Math.max(maxRank, maxRankSoFar[i]);\n        // Update all the rows and columns to maxRank + 1.\n        for (final int i : values)\n          maxRankSoFar[i] = maxRank + 1;\n      }\n      for (Pair<Integer, Integer> grid : grids) {\n        final int i = grid.getKey();\n        final int j = grid.getValue();\n        ans[i][j] = maxRankSoFar[i];\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self):\n    self.id = {}\n\n  def union(self, u: int, v: int) -> None:\n    self.id.setdefault(u, u)\n    self.id.setdefault(v, v)\n    i = self._find(u)\n    j = self._find(v)\n    if i != j:\n      self.id[i] = j\n\n  def getGroupIdToValues(self) -> Dict[int, List[int]]:\n    groupIdToValues = collections.defaultdict(list)\n    for u in self.id.keys():\n      groupIdToValues[self._find(u)].append(u)\n    return groupIdToValues\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def matrixRankTransform(self, matrix: List[List[int]]) -> List[List[int]]:\n    m = len(matrix)\n    n = len(matrix[0])\n    ans = [[0] * n for _ in range(m)]\n    # {val: [(i, j)]}\n    valToGrids = collections.defaultdict(list)\n    # rank[i] := max rank of the row or column so far\n    maxRankSoFar = [0] * (m + n)\n\n    for i, row in enumerate(matrix):\n      for j, val in enumerate(row):\n        valToGrids[val].append((i, j))\n\n    for _, grids in sorted(valToGrids.items()):\n      uf = UnionFind()\n      for i, j in grids:\n        # Union i-th row with j-th col.\n        uf.union(i, j + m)\n      for values in uf.getGroupIdToValues().values():\n        # Get the max rank of all the included rows and cols.\n        maxRank = max(maxRankSoFar[i] for i in values)\n        for i in values:\n          # Update all the rows and columns to maxRank + 1.\n          maxRankSoFar[i] = maxRank + 1\n      for i, j in grids:\n        ans[i][j] = maxRankSoFar[i]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}