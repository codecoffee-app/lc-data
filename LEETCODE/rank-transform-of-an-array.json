{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1331",
            "title": "Rank Transform of an Array",
            "titleSlug": "rank-transform-of-an-array",
            "content": "<p>Given an array of integers&nbsp;<code>arr</code>, replace each element with its rank.</p>\n\n<p>The rank represents how large the element is. The rank has the following rules:</p>\n\n<ul>\n\t<li>Rank is an integer starting from 1.</li>\n\t<li>The larger the element, the larger the rank. If two elements are equal, their rank must be the same.</li>\n\t<li>Rank should be as small as possible.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [40,10,20,30]\n<strong>Output:</strong> [4,1,2,3]\n<strong>Explanation</strong>: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [100,100,100]\n<strong>Output:</strong> [1,1,1]\n<strong>Explanation</strong>: Same elements share the same rank.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [37,12,28,9,100,56,80,5,12]\n<strong>Output:</strong> [5,3,4,2,8,6,7,1,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1613,
            "dislikes": 82,
            "similarQuestions": "[{\"title\": \"Rank Transform of a Matrix\", \"titleSlug\": \"rank-transform-of-a-matrix\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Target Indices After Sorting Array\", \"titleSlug\": \"find-target-indices-after-sorting-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"101.2K\", \"totalSubmission\": \"165.9K\", \"totalAcceptedRaw\": 101165, \"totalSubmissionRaw\": 165897, \"acRate\": \"61.0%\"}",
            "hints": [
                "Use a temporary array to copy the array and sort it.",
                "The rank of each element is the number of elements smaller than it in the sorted array plus one."
            ],
            "rephrased": {
                "body": "Given an array of integers `arr`, replace each element with its rank. The rank indicates the element's relative size within the array.",
                "constraints": [
                    "0 <= arr.length <= 10^5",
                    "-10^9 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[40,10,20,30]",
                        "output": "[4,1,2,3]",
                        "explanation": "The elements are ranked based on their magnitude: 10 is the smallest (rank 1), 20 is the second smallest (rank 2), 30 is the third smallest (rank 3), and 40 is the largest (rank 4)."
                    },
                    {
                        "input": "[100,100,100]",
                        "output": "[1,1,1]",
                        "explanation": "All elements are equal, so they share the same rank, which is 1."
                    },
                    {
                        "input": "[37,12,28,9,100,56,80,5,12]",
                        "output": "[5,3,4,2,8,6,7,1,3]",
                        "explanation": "The ranks are assigned as follows: 5 (rank 1), 9 (rank 2), 12 (rank 3), 28 (rank 4), 37 (rank 5), 56 (rank 6), 80 (rank 7), and 100 (rank 8). Note that the duplicate value 12 receives the same rank (3)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "rank-transform-of-a-matrix",
                "title": "Rank Transform of a Matrix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-target-indices-after-sorting-array",
                "title": "Find Target Indices After Sorting Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use a temporary array to copy the array and sort it.",
            "The rank of each element is the number of elements smaller than it in the sorted array plus one."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> arrayRankTransform(vector<int>& arr) {\n    vector<int> sortedArr(arr);\n    unordered_map<int, int> rank;\n\n    std::ranges::sort(sortedArr);\n\n    for (const int a : sortedArr)\n      if (!rank.count(a))\n        rank[a] = rank.size() + 1;\n\n    for (int& a : arr)\n      a = rank[a];\n\n    return arr;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] arrayRankTransform(int[] arr) {\n    int[] sortedArr = arr.clone();\n    Map<Integer, Integer> rank = new HashMap<>();\n\n    Arrays.sort(sortedArr);\n\n    for (final int a : sortedArr)\n      rank.putIfAbsent(a, rank.size() + 1);\n\n    for (int i = 0; i < arr.length; ++i)\n      arr[i] = rank.get(arr[i]);\n\n    return arr;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def arrayRankTransform(self, arr: List[int]) -> List[int]:\n    rank = {}\n\n    for a in sorted(arr):\n      if a not in rank:\n        rank[a] = len(rank) + 1\n\n    return map(rank.get, arr)\n",
                "lang_text": "py"
            }
        }
    }
}