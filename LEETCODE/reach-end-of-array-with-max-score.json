{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3282",
            "title": "Reach End of Array With Max Score",
            "titleSlug": "reach-end-of-array-with-max-score",
            "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code>.</p>\n\n<p>Your goal is to start at index <code>0</code> and reach index <code>n - 1</code>. You can only jump to indices <strong>greater</strong> than your current index.</p>\n\n<p>The score for a jump from index <code>i</code> to index <code>j</code> is calculated as <code>(j - i) * nums[i]</code>.</p>\n\n<p>Return the <strong>maximum</strong> possible <b>total score</b> by the time you reach the last index.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,3,1,5]</span></p>\n\n<p><strong>Output:</strong> 7</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>First, jump to index 1 and then jump to the last index. The final score is <code>1 * 1 + 2 * 3 = 7</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,3,1,3,2]</span></p>\n\n<p><strong>Output:</strong> 16</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Jump directly to the last index. The final score is <code>4 * 4 = 16</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 182,
            "dislikes": 13,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"23K\", \"totalSubmission\": \"74K\", \"totalAcceptedRaw\": 23038, \"totalSubmissionRaw\": 74038, \"acRate\": \"31.1%\"}",
            "hints": [
                "It can be proven that from each index <code>i</code>, the optimal solution is to jump to the nearest index <code>j > i</code> such that <code>nums[j] > nums[i]</code>."
            ],
            "rephrased": {
                "body": "Given an integer array `nums` of length `n`, your goal is to find the maximum possible total score by starting at index 0 and reaching index `n - 1`. You can only jump to indices greater than your current index. The score for a jump from index `i` to index `j` is calculated as `(j - i) * nums[i]`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1,3,1,5]",
                        "output": "7",
                        "explanation": "The optimal path is to jump from index 0 to index 1 (score: 1 * 1 = 1), and then from index 1 to index 3 (score: 2 * 3 = 6). The total score is 1 + 6 = 7."
                    },
                    {
                        "input": "[4,3,1,3,2]",
                        "output": "16",
                        "explanation": "The optimal path is to jump directly from index 0 to index 4 (score: 4 * 4 = 16)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "It can be proven that from each index <code>i</code>, the optimal solution is to jump to the nearest index <code>j > i</code> such that <code>nums[j] > nums[i]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 3205. Maximum Array Hopping Score I\n  long long findMaximumScore(vector<int>& nums) {\n    // The optimal jump is the nearest index j > i s.t. nums[j] > nums[i].\n    long ans = 0;\n    int mx = 0;\n\n    for (const int num : nums) {\n      ans += mx;\n      mx = max(mx, num);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 3205. Maximum Array Hopping Score I\n  public long findMaximumScore(List<Integer> nums) {\n    // The optimal jump is the nearest index j > i s.t. nums[j] > nums[i].\n    long ans = 0;\n    int mx = 0;\n\n    for (final int num : nums) {\n      ans += mx;\n      mx = Math.max(mx, num);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 3205. Maximum Array Hopping Score I\n  def findMaximumScore(self, nums: list[int]) -> int:\n    return sum(itertools.accumulate(nums[:-1], max))\n",
                "lang_text": "py"
            }
        }
    }
}