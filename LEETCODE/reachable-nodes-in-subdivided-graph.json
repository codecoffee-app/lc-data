{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "882",
            "title": "Reachable Nodes In Subdivided Graph",
            "titleSlug": "reachable-nodes-in-subdivided-graph",
            "content": "<p>You are given an undirected graph (the <strong>&quot;original graph&quot;</strong>) with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You decide to <strong>subdivide</strong> each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.</p>\n\n<p>The graph is given as a 2D array of <code>edges</code> where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, cnt<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the original graph, and <code>cnt<sub>i</sub></code> is the total number of new nodes that you will <strong>subdivide</strong> the edge into. Note that <code>cnt<sub>i</sub> == 0</code> means you will not subdivide the edge.</p>\n\n<p>To <strong>subdivide</strong> the edge <code>[u<sub>i</sub>, v<sub>i</sub>]</code>, replace it with <code>(cnt<sub>i</sub> + 1)</code> new edges and <code>cnt<sub>i</sub></code> new nodes. The new nodes are <code>x<sub>1</sub></code>, <code>x<sub>2</sub></code>, ..., <code>x<sub>cnt<sub>i</sub></sub></code>, and the new edges are <code>[u<sub>i</sub>, x<sub>1</sub>]</code>, <code>[x<sub>1</sub>, x<sub>2</sub>]</code>, <code>[x<sub>2</sub>, x<sub>3</sub>]</code>, ..., <code>[x<sub>cnt<sub>i</sub>-1</sub>, x<sub>cnt<sub>i</sub></sub>]</code>, <code>[x<sub>cnt<sub>i</sub></sub>, v<sub>i</sub>]</code>.</p>\n\n<p>In this <strong>new graph</strong>, you want to know how many nodes are <strong>reachable</strong> from the node <code>0</code>, where a node is <strong>reachable</strong> if the distance is <code>maxMoves</code> or less.</p>\n\n<p>Given the original graph and <code>maxMoves</code>, return <em>the number of nodes that are <strong>reachable</strong> from node </em><code>0</code><em> in the new graph</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png\" style=\"width: 600px; height: 247px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> The edge subdivisions are shown in the image above.\nThe nodes that are reachable are highlighted in yellow.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4\n<strong>Output:</strong> 23\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= edges.length &lt;= min(n * (n - 1) / 2, 10<sup>4</sup>)</code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub> &lt; v<sub>i</sub> &lt; n</code></li>\n\t<li>There are <strong>no multiple edges</strong> in the graph.</li>\n\t<li><code>0 &lt;= cnt<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= maxMoves &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= n &lt;= 3000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 768,
            "dislikes": 220,
            "similarQuestions": "[{\"title\": \"Find All People With Secret\", \"titleSlug\": \"find-all-people-with-secret\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Paths in Maze That Lead to Same Room\", \"titleSlug\": \"paths-in-maze-that-lead-to-same-room\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Shortest Path",
                    "slug": "shortest-path"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.9K\", \"totalSubmission\": \"51.8K\", \"totalAcceptedRaw\": 25912, \"totalSubmissionRaw\": 51755, \"acRate\": \"50.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an undirected graph with 'n' nodes labeled from 0 to n-1, you are allowed to subdivide each edge into a chain of new nodes. The graph is represented by a 2D array 'edges' where edges[i] = [ui, vi, cnti] signifies an edge between nodes ui and vi, with cnti being the number of new nodes to subdivide the edge into (cnti == 0 implies no subdivision).  Subdividing an edge [ui, vi] means replacing it with (cnti + 1) new edges and cnti new nodes (x1, x2, ..., xcnti), adding edges [ui, x1], [x1, x2], ..., [xcnti-1, xcnti], [xcnti, vi].  In the resulting graph, determine the number of nodes reachable from node 0 within a maximum distance of 'maxMoves'.",
                "constraints": [
                    "0 <= edges.length <= min(n * (n - 1) / 2, 10<sup>4</sup>)",
                    "edges[i].length == 3",
                    "0 <= u<sub>i</sub> < v<sub>i</sub> < n",
                    "There are no multiple edges in the graph.",
                    "0 <= cnt<sub>i</sub> <= 10<sup>4</sup>",
                    "0 <= maxMoves <= 10<sup>9</sup>",
                    "1 <= n <= 3000"
                ],
                "testcases": [
                    {
                        "input": "edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3",
                        "output": "13",
                        "explanation": "After subdividing the edges and considering a maximum move limit of 6, there are 13 nodes reachable from node 0."
                    },
                    {
                        "input": "edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4",
                        "output": "23",
                        "explanation": "After subdividing the edges and considering a maximum move limit of 10, there are 23 nodes reachable from node 0."
                    },
                    {
                        "input": "edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5",
                        "output": "1",
                        "explanation": "Node 0 is disconnected from the rest of the graph, so only node 0 is reachable, resulting in a reachable count of 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "find-all-people-with-secret",
                "title": "Find All People With Secret",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "paths-in-maze-that-lead-to-same-room",
                "title": "Paths in Maze That Lead to Same Room",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int reachableNodes(vector<vector<int>>& edges, int maxMoves, int n) {\n    vector<vector<pair<int, int>>> graph(n);\n    vector<int> dist(graph.size(), maxMoves + 1);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int cnt = edge[2];\n      graph[u].emplace_back(v, cnt);\n      graph[v].emplace_back(u, cnt);\n    }\n\n    const int reachableNodes = dijkstra(graph, 0, maxMoves, dist);\n    int reachableSubnodes = 0;\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      const int cnt = edge[2];\n      // reachable nodes of `edge` from `u`\n      const int a = dist[u] > maxMoves ? 0 : min(maxMoves - dist[u], cnt);\n      // reachable nodes of `edge` from `v`\n      const int b = dist[v] > maxMoves ? 0 : min(maxMoves - dist[v], cnt);\n      reachableSubnodes += min(a + b, cnt);\n    }\n\n    return reachableNodes + reachableSubnodes;\n  }\n\n private:\n  int dijkstra(const vector<vector<pair<int, int>>>& graph, int src,\n               int maxMoves, vector<int>& dist) {\n    using P = pair<int, int>;  // (d, u)\n    priority_queue<P, vector<P>, greater<>> minHeap;\n\n    dist[src] = 0;\n    minHeap.emplace(dist[src], src);\n\n    while (!minHeap.empty()) {\n      const auto [d, u] = minHeap.top();\n      minHeap.pop();\n      // Already takes `maxMoves` to reach `u`, can't explore anymore.\n      if (d >= maxMoves)\n        break;\n      for (const auto& [v, w] : graph[u])\n        if (d + w + 1 < dist[v]) {\n          dist[v] = d + w + 1;\n          minHeap.emplace(dist[v], v);\n        }\n    }\n\n    return count_if(dist.begin(), dist.end(),\n                    [&](int d) { return d <= maxMoves; });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int reachableNodes(int[][] edges, int maxMoves, int n) {\n    List<Pair<Integer, Integer>>[] graph = new List[n];\n    Queue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]); // (d, u)\n    int[] dist = new int[n];\n    Arrays.fill(dist, maxMoves + 1);\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int cnt = edge[2];\n      graph[u].add(new Pair<>(v, cnt));\n      graph[v].add(new Pair<>(u, cnt));\n    }\n\n    final int reachableNodes = dijkstra(graph, 0, maxMoves, dist);\n    int reachableSubnodes = 0;\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      final int cnt = edge[2];\n      // reachable nodes of `edge` from `u`\n      final int a = dist[u] > maxMoves ? 0 : Math.min(maxMoves - dist[u], cnt);\n      // reachable nodes of `edge` from `v`\n      final int b = dist[v] > maxMoves ? 0 : Math.min(maxMoves - dist[v], cnt);\n      reachableSubnodes += Math.min(a + b, cnt);\n    }\n\n    return reachableNodes + reachableSubnodes;\n  }\n\n  private int dijkstra(List<Pair<Integer, Integer>>[] graph, int src, int maxMoves, int[] dist) {\n    // (d, u)\n    Queue<Pair<Integer, Integer>> minHeap = new PriorityQueue<>(Comparator.comparing(Pair::getKey));\n\n    dist[src] = 0;\n    minHeap.offer(new Pair<>(dist[src], src));\n\n    while (!minHeap.isEmpty()) {\n      final int d = minHeap.peek().getKey();\n      final int u = minHeap.poll().getValue();\n      // Already takes `maxMoves` to reach `u`, can't explore anymore.\n      if (d >= maxMoves)\n        break;\n      for (Pair<Integer, Integer> pair : graph[u]) {\n        final int v = pair.getKey();\n        final int w = pair.getValue();\n        if (d + w + 1 < dist[v]) {\n          dist[v] = d + w + 1;\n          minHeap.offer(new Pair<>(dist[v], v));\n        }\n      }\n    }\n\n    return (int) Arrays.stream(dist).filter(d -> d <= maxMoves).count();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def reachableNodes(self, edges: List[List[int]], maxMoves: int, n: int) -> int:\n    graph = [[] for _ in range(n)]\n    dist = [maxMoves + 1] * n\n\n    for u, v, cnt in edges:\n      graph[u].append((v, cnt))\n      graph[v].append((u, cnt))\n\n    reachableNodes = self._dijkstra(graph, 0, maxMoves, dist)\n    reachableSubnodes = 0\n\n    for u, v, cnt in edges:\n      # reachable nodes of (u, v) from `u`\n      a = 0 if dist[u] > maxMoves else min(maxMoves - dist[u], cnt)\n      # reachable nodes of (u, v) from `v`\n      b = 0 if dist[v] > maxMoves else min(maxMoves - dist[v], cnt)\n      reachableSubnodes += min(a + b, cnt)\n\n    return reachableNodes + reachableSubnodes\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int, maxMoves: int, dist: List[int]) -> int:\n    dist[src] = 0\n    minHeap = [(dist[src], src)]  # (d, u)\n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      # Already takes `maxMoves` to reach `u`, can't explore anymore.\n      if dist[u] >= maxMoves:\n        break\n      for v, w in graph[u]:\n        newDist = d + w + 1\n        if newDist < dist[v]:\n          dist[v] = newDist\n          heapq.heappush(minHeap, (newDist, v))\n\n    return sum(d <= maxMoves for d in dist)\n",
                "lang_text": "py"
            }
        }
    }
}