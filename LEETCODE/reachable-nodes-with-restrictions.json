{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2368",
            "title": "Reachable Nodes With Restrictions",
            "titleSlug": "reachable-nodes-with-restrictions",
            "content": "<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> edges.</p>\n\n<p>You are given a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree. You are also given an integer array <code>restricted</code> which represents <strong>restricted</strong> nodes.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of nodes you can reach from node </em><code>0</code><em> without visiting a restricted node.</em></p>\n\n<p>Note that node <code>0</code> will <strong>not</strong> be a restricted node.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/06/15/ex1drawio.png\" style=\"width: 402px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The diagram above shows the tree.\nWe have that [0,1,2,3] are the only nodes that can be reached from node 0 without visiting a restricted node.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/06/15/ex2drawio.png\" style=\"width: 412px; height: 312px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The diagram above shows the tree.\nWe have that [0,5,6] are the only nodes that can be reached from node 0 without visiting a restricted node.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n\t<li><code>1 &lt;= restricted.length &lt; n</code></li>\n\t<li><code>1 &lt;= restricted[i] &lt; n</code></li>\n\t<li>All the values of <code>restricted</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 627,
            "dislikes": 26,
            "similarQuestions": "[{\"title\": \"Open the Lock\", \"titleSlug\": \"open-the-lock\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Jumps to Reach Home\", \"titleSlug\": \"minimum-jumps-to-reach-home\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"44.3K\", \"totalSubmission\": \"75.8K\", \"totalAcceptedRaw\": 44344, \"totalSubmissionRaw\": 75822, \"acRate\": \"58.5%\"}",
            "hints": [
                "Can we find all the reachable nodes in a single traversal?",
                "Traverse the graph from node 0 while avoiding the nodes in restricted and do not revisit nodes that have been visited.",
                "Keep count of how many nodes are visited in total."
            ],
            "rephrased": {
                "body": "Given an undirected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges. You are provided with a 2D integer array `edges` of length `n - 1` where `edges[i] = [a_i, b_i]` indicates an edge between nodes `a_i` and `b_i`.  You are also given an integer array `restricted` containing nodes that cannot be visited. Return the maximum number of nodes reachable from node `0` without visiting any restricted nodes. Note that node `0` is not a restricted node.",
                "constraints": [
                    "2 <= n <= 10^5",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= a_i, b_i < n",
                    "a_i != b_i",
                    "edges represents a valid tree.",
                    "1 <= restricted.length < n",
                    "1 <= restricted[i] < n",
                    "All the values of restricted are unique."
                ],
                "testcases": [
                    {
                        "input": "n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]",
                        "output": "4",
                        "explanation": "The nodes reachable from node 0 without visiting restricted nodes are [0, 1, 2, 3]. Therefore, the maximum number of reachable nodes is 4."
                    },
                    {
                        "input": "n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1]",
                        "output": "3",
                        "explanation": "The nodes reachable from node 0 without visiting restricted nodes are [0, 5, 6]. Therefore, the maximum number of reachable nodes is 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "open-the-lock",
                "title": "Open the Lock",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-jumps-to-reach-home",
                "title": "Minimum Jumps to Reach Home",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we find all the reachable nodes in a single traversal?",
            "Traverse the graph from node 0 while avoiding the nodes in restricted and do not revisit nodes that have been visited.",
            "Keep count of how many nodes are visited in total."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int reachableNodes(int n, vector<vector<int>>& edges,\n                     vector<int>& restricted) {\n    vector<vector<int>> tree(n);\n    vector<bool> seen(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      tree[u].push_back(v);\n      tree[v].push_back(u);\n    }\n\n    for (const int r : restricted)\n      seen[r] = true;\n\n    return dfs(tree, 0, seen);\n  }\n\n private:\n  int dfs(const vector<vector<int>>& tree, int u, vector<bool>& seen) {\n    if (seen[u])\n      return 0;\n\n    seen[u] = true;\n    int ans = 1;\n\n    for (const int v : tree[u])\n      ans += dfs(tree, v, seen);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int reachableNodes(int n, int[][] edges, int[] restricted) {\n    List<Integer>[] tree = new List[n];\n    boolean[] seen = new boolean[n];\n\n    for (int i = 0; i < n; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      tree[u].add(v);\n      tree[v].add(u);\n    }\n\n    for (final int r : restricted)\n      seen[r] = true;\n\n    return dfs(tree, 0, seen);\n  }\n\n  private int dfs(List<Integer>[] tree, int u, boolean[] seen) {\n    if (seen[u])\n      return 0;\n\n    seen[u] = true;\n    int ans = 1;\n\n    for (final int v : tree[u])\n      ans += dfs(tree, v, seen);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def reachableNodes(self, n: int, edges: List[List[int]], restricted: List[int]) -> int:\n    tree = [[] for _ in range(n)]\n    seen = set(restricted)\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    def dfs(u: int) -> int:\n      if u in seen:\n        return 0\n      seen.add(u)\n      return 1 + sum(dfs(v) for v in tree[u])\n\n    return dfs(0)\n",
                "lang_text": "py"
            }
        }
    }
}