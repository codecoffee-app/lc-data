{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2587",
            "title": "Rearrange Array to Maximize Prefix Score",
            "titleSlug": "rearrange-array-to-maximize-prefix-score",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. You can rearrange the elements of <code>nums</code> to <strong>any order</strong> (including the given order).</p>\n\n<p>Let <code>prefix</code> be the array containing the prefix sums of <code>nums</code> after rearranging it. In other words, <code>prefix[i]</code> is the sum of the elements from <code>0</code> to <code>i</code> in <code>nums</code> after rearranging it. The <strong>score</strong> of <code>nums</code> is the number of positive integers in the array <code>prefix</code>.</p>\n\n<p>Return <em>the maximum score you can achieve</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,-1,0,1,-3,3,-3]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> We can rearrange the array into nums = [2,3,1,-1,-3,0,-3].\nprefix = [2,5,6,5,2,2,-1], so the score is 6.\nIt can be shown that 6 is the maximum score we can obtain.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,-3,0]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Any rearrangement of the array will result in a score of 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 270,
            "dislikes": 41,
            "similarQuestions": "[{\"title\": \"Two City Scheduling\", \"titleSlug\": \"two-city-scheduling\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"26.3K\", \"totalSubmission\": \"65.3K\", \"totalAcceptedRaw\": 26347, \"totalSubmissionRaw\": 65316, \"acRate\": \"40.3%\"}",
            "hints": [
                "The best order of the array is in decreasing order.",
                "Sort the array in decreasing order and count the number of positive values in the prefix sum array."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums`, rearrange its elements in any order. Define `prefix` as the array of prefix sums of the rearranged `nums`. The score of `nums` is the number of positive integers in the `prefix` array.  Determine the maximum possible score.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-10^6 <= nums[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2,-1,0,1,-3,3,-3]",
                        "output": "6",
                        "explanation": "Rearrange the array to [2,3,1,-1,-3,0,-3]. The prefix sum array becomes [2, 5, 6, 5, 2, 2, -1].  There are 6 positive numbers in the prefix sum, resulting in a score of 6. This is the maximum achievable score."
                    },
                    {
                        "input": "[-2,-3,0]",
                        "output": "0",
                        "explanation": "Any rearrangement of the array will result in a prefix sum array with no positive numbers, resulting in a score of 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "two-city-scheduling",
                "title": "Two City Scheduling",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The best order of the array is in decreasing order.",
            "Sort the array in decreasing order and count the number of positive values in the prefix sum array."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxScore(vector<int>& nums) {\n    long long prefix = 0;\n\n    std::ranges::sort(nums, greater<>());\n\n    for (int i = 0; i < nums.size(); ++i) {\n      prefix += nums[i];\n      if (prefix <= 0)\n        return i;\n    }\n\n    return nums.size();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxScore(int[] nums) {\n    long prefix = 0;\n\n    nums = Arrays.stream(nums)\n               .boxed()\n               .sorted(Collections.reverseOrder())\n               .mapToInt(Integer::intValue)\n               .toArray();\n\n    for (int i = 0; i < nums.length; ++i) {\n      prefix += nums[i];\n      if (prefix <= 0)\n        return i;\n    }\n\n    return nums.length;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxScore(self, nums: List[int]) -> int:\n    return sum(num > 0\n               for num in itertools.accumulate(sorted(nums, reverse=True)))\n",
                "lang_text": "py"
            }
        }
    }
}