{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2287",
            "title": "Rearrange Characters to Make Target String",
            "titleSlug": "rearrange-characters-to-make-target-string",
            "content": "<p>You are given two <strong>0-indexed</strong> strings <code>s</code> and <code>target</code>. You can take some letters from <code>s</code> and rearrange them to form new strings.</p>\n\n<p>Return<em> the <strong>maximum</strong> number of copies of </em><code>target</code><em> that can be formed by taking letters from </em><code>s</code><em> and rearranging them.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ilovecodingonleetcode&quot;, target = &quot;code&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nFor the first copy of &quot;code&quot;, take the letters at indices 4, 5, 6, and 7.\nFor the second copy of &quot;code&quot;, take the letters at indices 17, 18, 19, and 20.\nThe strings that are formed are &quot;ecod&quot; and &quot;code&quot; which can both be rearranged into &quot;code&quot;.\nWe can make at most two copies of &quot;code&quot;, so we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcba&quot;, target = &quot;abc&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nWe can make one copy of &quot;abc&quot; by taking the letters at indices 0, 1, and 2.\nWe can make at most one copy of &quot;abc&quot;, so we return 1.\nNote that while there is an extra &#39;a&#39; and &#39;b&#39; at indices 3 and 4, we cannot reuse the letter &#39;c&#39; at index 2, so we cannot make a second copy of &quot;abc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abbaccaddaeea&quot;, target = &quot;aaaaa&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nWe can make one copy of &quot;aaaaa&quot; by taking the letters at indices 0, 3, 6, 9, and 12.\nWe can make at most one copy of &quot;aaaaa&quot;, so we return 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= target.length &lt;= 10</code></li>\n\t<li><code>s</code> and <code>target</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 450,
            "dislikes": 33,
            "similarQuestions": "[{\"title\": \"Find Words That Can Be Formed by Characters\", \"titleSlug\": \"find-words-that-can-be-formed-by-characters\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Occurrences of a Substring\", \"titleSlug\": \"maximum-number-of-occurrences-of-a-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"37K\", \"totalSubmission\": \"63.3K\", \"totalAcceptedRaw\": 37030, \"totalSubmissionRaw\": 63293, \"acRate\": \"58.5%\"}",
            "hints": [
                "Count the frequency of each character in s and target.",
                "Consider each letter one at a time. If there are x occurrences of a letter in s and y occurrences of the same letter in target, how many copies of this letter can we make?",
                "We can make floor(x / y) copies of the letter."
            ],
            "rephrased": {
                "body": "Given two 0-indexed strings `s` and `target`, determine the maximum number of copies of `target` that can be formed by taking letters from `s` and rearranging them.",
                "constraints": [
                    "1 <= s.length <= 100",
                    "1 <= target.length <= 10",
                    "s and target consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"ilovecodingonleetcode\", target = \"code\"",
                        "output": "2",
                        "explanation": "The string `s` contains the letters 'c', 'o', 'd', and 'e' multiple times. We can form the word 'code' twice using the letters from `s`. Therefore, the maximum number of copies of 'code' is 2."
                    },
                    {
                        "input": "s = \"abcba\", target = \"abc\"",
                        "output": "1",
                        "explanation": "The string `s` contains the letters 'a', 'b', and 'c'. We can form the word 'abc' once using these letters. Although there are extra 'a' and 'b' characters, we only have one 'c', limiting us to one copy of 'abc'."
                    },
                    {
                        "input": "s = \"abbaccaddaeea\", target = \"aaaaa\"",
                        "output": "1",
                        "explanation": "The string `s` contains five 'a' characters.  Therefore, we can form the word 'aaaaa' once."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "find-words-that-can-be-formed-by-characters",
                "title": "Find Words That Can Be Formed by Characters",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-occurrences-of-a-substring",
                "title": "Maximum Number of Occurrences of a Substring",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Count the frequency of each character in s and target.",
            "Consider each letter one at a time. If there are x occurrences of a letter in s and y occurrences of the same letter in target, how many copies of this letter can we make?",
            "We can make floor(x / y) copies of the letter."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int rearrangeCharacters(string s, string target) {\n    int ans = s.length();\n    vector<int> countS(128);\n    vector<int> countT(128);\n\n    for (const char c : s)\n      ++countS[c];\n\n    for (const char c : target)\n      ++countT[c];\n\n    for (const char c : target)\n      ans = min(ans, countS[c] / countT[c]);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int rearrangeCharacters(String s, String target) {\n    int ans = s.length();\n    int[] countS = new int[128];\n    int[] countT = new int[128];\n\n    for (final char c : s.toCharArray())\n      ++countS[c];\n\n    for (final char c : target.toCharArray())\n      ++countT[c];\n\n    for (final char c : target.toCharArray())\n      ans = Math.min(ans, countS[c] / countT[c]);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def rearrangeCharacters(self, s: str, target: str) -> int:\n    countS = collections.Counter(s)\n    countT = collections.Counter(target)\n    return min(countS[c] // countT[c] for c in target)\n",
                "lang_text": "py"
            }
        }
    }
}