{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1253",
            "title": "Reconstruct a 2-Row Binary Matrix",
            "titleSlug": "reconstruct-a-2-row-binary-matrix",
            "content": "<p>Given the following details of a matrix with <code>n</code> columns and <code>2</code> rows :</p>\n\n<ul>\n\t<li>The matrix is a binary matrix, which means each element in the matrix can be <code>0</code> or <code>1</code>.</li>\n\t<li>The sum of elements of the 0-th(upper) row is given as <code>upper</code>.</li>\n\t<li>The sum of elements of the 1-st(lower) row is given as <code>lower</code>.</li>\n\t<li>The sum of elements in the i-th column(0-indexed) is <code>colsum[i]</code>, where <code>colsum</code> is given as an integer array with length <code>n</code>.</li>\n</ul>\n\n<p>Your task is to reconstruct the matrix with <code>upper</code>, <code>lower</code> and <code>colsum</code>.</p>\n\n<p>Return it as a 2-D integer array.</p>\n\n<p>If there are more than one valid solution, any of them will be accepted.</p>\n\n<p>If no valid solution exists, return an empty 2-D array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> upper = 2, lower = 1, colsum = [1,1,1]\n<strong>Output:</strong> [[1,1,0],[0,0,1]]\n<strong>Explanation: </strong>[[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> upper = 2, lower = 3, colsum = [2,2,1,1]\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]\n<strong>Output:</strong> [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= colsum.length &lt;= 10^5</code></li>\n\t<li><code>0 &lt;= upper, lower &lt;= colsum.length</code></li>\n\t<li><code>0 &lt;= colsum[i] &lt;= 2</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 434,
            "dislikes": 28,
            "similarQuestions": "[{\"title\": \"Find Valid Matrix Given Row and Column Sums\", \"titleSlug\": \"find-valid-matrix-given-row-and-column-sums\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.9K\", \"totalSubmission\": \"54.9K\", \"totalAcceptedRaw\": 24872, \"totalSubmissionRaw\": 54850, \"acRate\": \"45.3%\"}",
            "hints": [
                "You cannot do anything about colsum[i] = 2 case or colsum[i] = 0 case. Then you put colsum[i] = 1 case to the upper row until upper has reached. Then put the rest into lower row.",
                "Fill 0 and 2 first, then fill 1 in the upper row or lower row in turn but be careful about exhausting permitted 1s in each row."
            ],
            "rephrased": {
                "body": "You are given `upper`, `lower`, and `colsum` representing the details of a matrix with `n` columns and 2 rows. The matrix is binary, meaning each element is either 0 or 1. `upper` is the sum of elements in the first row, `lower` is the sum of elements in the second row, and `colsum[i]` is the sum of elements in the i-th column. Reconstruct the matrix and return it as a 2D integer array. If multiple valid solutions exist, return any one of them. If no valid solution exists, return an empty 2D array.",
                "constraints": [
                    "1 <= colsum.length <= 10^5",
                    "0 <= upper, lower <= colsum.length",
                    "0 <= colsum[i] <= 2"
                ],
                "testcases": [
                    {
                        "input": "upper = 2, lower = 1, colsum = [1,1,1]",
                        "output": "[[1,1,0],[0,0,1]]",
                        "explanation": "Other possible correct answers include [[1,0,1],[0,1,0]] and [[0,1,1],[1,0,0]]."
                    },
                    {
                        "input": "upper = 2, lower = 3, colsum = [2,2,1,1]",
                        "output": "[]",
                        "explanation": "No valid solution exists for these inputs."
                    },
                    {
                        "input": "upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]",
                        "output": "[[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]",
                        "explanation": "null"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-valid-matrix-given-row-and-column-sums",
                "title": "Find Valid Matrix Given Row and Column Sums",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "You cannot do anything about colsum[i] = 2 case or colsum[i] = 0 case. Then you put colsum[i] = 1 case to the upper row until upper has reached. Then put the rest into lower row.",
            "Fill 0 and 2 first, then fill 1 in the upper row or lower row in turn but be careful about exhausting permitted 1s in each row."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> reconstructMatrix(int upper, int lower,\n                                        vector<int>& colsum) {\n    if (upper + lower != accumulate(colsum.begin(), colsum.end(), 0))\n      return {};\n    if (min(upper, lower) <\n        count_if(colsum.begin(), colsum.end(), [](int c) { return c == 2; }))\n      return {};\n\n    vector<vector<int>> ans(2, vector<int>(colsum.size()));\n\n    for (int j = 0; j < colsum.size(); ++j)\n      if (colsum[j] == 2) {\n        ans[0][j] = 1;\n        ans[1][j] = 1;\n        --upper;\n        --lower;\n      }\n\n    for (int j = 0; j < colsum.size(); ++j) {\n      if (colsum[j] == 1 && upper > 0) {\n        ans[0][j] = 1;\n        --colsum[j];\n        --upper;\n      }\n\n      if (colsum[j] == 1 && lower > 0) {\n        ans[1][j] = 1;\n        --lower;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> reconstructMatrix(int upper, int lower, int[] colsum) {\n    if (upper + lower != Arrays.stream(colsum).sum())\n      return new ArrayList<>();\n\n    int count = 0;\n    for (int c : colsum)\n      if (c == 2)\n        ++count;\n\n    if (Math.min(upper, lower) < count)\n      return new ArrayList<>();\n\n    int[][] ans = new int[2][colsum.length];\n\n    for (int j = 0; j < colsum.length; ++j)\n      if (colsum[j] == 2) {\n        ans[0][j] = 1;\n        ans[1][j] = 1;\n        --upper;\n        --lower;\n      }\n\n    for (int j = 0; j < colsum.length; ++j) {\n      if (colsum[j] == 1 && upper > 0) {\n        ans[0][j] = 1;\n        --colsum[j];\n        --upper;\n      }\n\n      if (colsum[j] == 1 && lower > 0) {\n        ans[1][j] = 1;\n        --lower;\n      }\n    }\n\n    return new ArrayList(Arrays.asList(ans[0], ans[1]));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def reconstructMatrix(self, upper: int, lower: int, colsum: List[int]) -> List[List[int]]:\n    if upper + lower != sum(colsum):\n      return []\n    if min(upper, lower) < colsum.count(2):\n      return []\n\n    ans = [[0] * len(colsum) for _ in range(2)]\n\n    for j, c in enumerate(colsum):\n      if c == 2:\n        ans[0][j] = 1\n        ans[1][j] = 1\n        upper -= 1\n        lower -= 1\n\n    for j, c in enumerate(colsum):\n      if c == 1 and upper > 0:\n        ans[0][j] = 1\n        c -= 1\n        upper -= 1\n      if c == 1 and lower > 0:\n        ans[1][j] = 1\n        lower -= 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}