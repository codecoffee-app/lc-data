{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "332",
            "title": "Reconstruct Itinerary",
            "titleSlug": "reconstruct-itinerary",
            "content": "<p>You are given a list of airline <code>tickets</code> where <code>tickets[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.</p>\n\n<p>All of the tickets belong to a man who departs from <code>&quot;JFK&quot;</code>, thus, the itinerary must begin with <code>&quot;JFK&quot;</code>. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.</p>\n\n<ul>\n\t<li>For example, the itinerary <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> has a smaller lexical order than <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code>.</li>\n</ul>\n\n<p>You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg\" style=\"width: 382px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> tickets = [[&quot;MUC&quot;,&quot;LHR&quot;],[&quot;JFK&quot;,&quot;MUC&quot;],[&quot;SFO&quot;,&quot;SJC&quot;],[&quot;LHR&quot;,&quot;SFO&quot;]]\n<strong>Output:</strong> [&quot;JFK&quot;,&quot;MUC&quot;,&quot;LHR&quot;,&quot;SFO&quot;,&quot;SJC&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg\" style=\"width: 222px; height: 230px;\" />\n<pre>\n<strong>Input:</strong> tickets = [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]\n<strong>Output:</strong> [&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]\n<strong>Explanation:</strong> Another possible reconstruction is [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;] but it is larger in lexical order.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tickets.length &lt;= 300</code></li>\n\t<li><code>tickets[i].length == 2</code></li>\n\t<li><code>from<sub>i</sub>.length == 3</code></li>\n\t<li><code>to<sub>i</sub>.length == 3</code></li>\n\t<li><code>from<sub>i</sub></code> and <code>to<sub>i</sub></code> consist of uppercase English letters.</li>\n\t<li><code>from<sub>i</sub> != to<sub>i</sub></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5713,
            "dislikes": 1836,
            "similarQuestions": "[{\"title\": \"Longest Common Subpath\", \"titleSlug\": \"longest-common-subpath\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Valid Arrangement of Pairs\", \"titleSlug\": \"valid-arrangement-of-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Eulerian Circuit",
                    "slug": "eulerian-circuit"
                }
            ],
            "stats": "{\"totalAccepted\": \"407.2K\", \"totalSubmission\": \"939.4K\", \"totalAcceptedRaw\": 407200, \"totalSubmissionRaw\": 939377, \"acRate\": \"43.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a list of airline tickets, where each ticket represents a flight from one airport to another ( `tickets[i] = [from_i, to_i]` ), reconstruct the itinerary in order and return it. The itinerary must start from \"JFK\". If multiple valid itineraries exist, return the one with the smallest lexical order when considered as a single string. You can assume that at least one valid itinerary exists and that all tickets must be used exactly once.",
                "constraints": [
                    "1 <= tickets.length <= 300",
                    "tickets[i].length == 2",
                    "from_i.length == 3",
                    "to_i.length == 3",
                    "from_i and to_i consist of uppercase English letters.",
                    "from_i != to_i"
                ],
                "testcases": [
                    {
                        "input": "[[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]",
                        "output": "[\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]",
                        "explanation": null
                    },
                    {
                        "input": "[[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]",
                        "output": "[\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]",
                        "explanation": "Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "longest-common-subpath",
                "title": "Longest Common Subpath",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "valid-arrangement-of-pairs",
                "title": "Valid Arrangement of Pairs",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Eulerian Circuit",
                "slug": "eulerian-circuit"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> findItinerary(vector<vector<string>>& tickets) {\n    vector<string> ans;\n    unordered_map<string, multiset<string>> graph;\n\n    for (const vector<string>& ticket : tickets)\n      graph[ticket[0]].insert(ticket[1]);\n\n    dfs(graph, \"JFK\", ans);\n    reverse(ans.begin(), ans.end());\n    return ans;\n  }\n\n private:\n  void dfs(unordered_map<string, multiset<string>>& graph, const string& u,\n           vector<string>& ans) {\n    while (graph.count(u) && !graph[u].empty()) {\n      const string v = *graph[u].begin();\n      graph[u].erase(graph[u].begin());\n      dfs(graph, v, ans);\n    }\n    ans.push_back(u);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> findItinerary(List<List<String>> tickets) {\n    LinkedList<String> ans = new LinkedList<>();\n    Map<String, Queue<String>> graph = new HashMap<>();\n\n    for (final List<String> ticket : tickets) {\n      graph.putIfAbsent(ticket.get(0), new PriorityQueue<>());\n      graph.get(ticket.get(0)).offer(ticket.get(1));\n    }\n\n    dfs(graph, \"JFK\", ans);\n    return ans;\n  }\n\n  private void dfs(Map<String, Queue<String>> graph, final String u, LinkedList<String> ans) {\n    final Queue<String> arrivals = graph.get(u);\n    while (arrivals != null && !arrivals.isEmpty())\n      dfs(graph, arrivals.poll(), ans);\n    ans.addFirst(u);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n    ans = []\n    graph = collections.defaultdict(list)\n\n    for a, b in reversed(sorted(tickets)):\n      graph[a].append(b)\n\n    def dfs(u: str) -> None:\n      while u in graph and graph[u]:\n        dfs(graph[u].pop())\n      ans.append(u)\n\n    dfs('JFK')\n    return ans[::-1]\n",
                "lang_text": "py"
            }
        }
    }
}