{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "99",
            "title": "Recover Binary Search Tree",
            "titleSlug": "recover-binary-search-tree",
            "content": "<p>You are given the <code>root</code> of a binary search tree (BST), where the values of <strong>exactly</strong> two nodes of the tree were swapped by mistake. <em>Recover the tree without changing its structure</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg\" style=\"width: 422px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,null,null,2]\n<strong>Output:</strong> [3,1,null,null,2]\n<strong>Explanation:</strong> 3 cannot be a left child of 1 because 3 &gt; 1. Swapping 1 and 3 makes the BST valid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg\" style=\"width: 581px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,1,4,null,null,2]\n<strong>Output:</strong> [2,1,4,null,null,3]\n<strong>Explanation:</strong> 2 cannot be in the right subtree of 3 because 2 &lt; 3. Swapping 2 and 3 makes the BST valid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 1000]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> A solution using <code>O(n)</code> space is pretty straight-forward. Could you devise a constant <code>O(1)</code> space solution?",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7626,
            "dislikes": 245,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"429K\", \"totalSubmission\": \"818.5K\", \"totalAcceptedRaw\": 429037, \"totalSubmissionRaw\": 818475, \"acRate\": \"52.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary search tree (BST) in which exactly two nodes have been swapped by mistake, recover the tree to its correct BST structure without altering its original shape. Your solution should modify the values of the misplaced nodes to restore the BST property.",
                "constraints": [
                    "The number of nodes in the tree is in the range [2, 1000].",
                    "-2<sup>31</sup> <= Node.val <= 2<sup>31</sup> - 1"
                ],
                "testcases": [
                    {
                        "input": "[1,3,null,null,2]",
                        "output": "[3,1,null,null,2]",
                        "explanation": "The node with value 3 is incorrectly placed as a left child of the node with value 1, violating the BST property. Swapping the values of nodes 1 and 3 restores the correct order."
                    },
                    {
                        "input": "[3,1,4,null,null,2]",
                        "output": "[2,1,4,null,null,3]",
                        "explanation": "The node with value 2 is incorrectly placed within the right subtree of the node with value 3, violating the BST property. Swapping the values of nodes 2 and 3 restores the correct order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ]
    }
}