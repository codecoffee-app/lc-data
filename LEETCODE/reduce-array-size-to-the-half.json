{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1338",
            "title": "Reduce Array Size to The Half",
            "titleSlug": "reduce-array-size-to-the-half",
            "content": "<p>You are given an integer array <code>arr</code>. You can choose a set of integers and remove all the occurrences of these integers in the array.</p>\n\n<p>Return <em>the minimum size of the set so that <strong>at least</strong> half of the integers of the array are removed</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,3,3,3,5,5,5,2,2,7]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [7,7,7,7,7,7]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The only possible set you can choose is {7}. This will make the new array empty.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>arr.length</code> is even.</li>\n\t<li><code>1 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3188,
            "dislikes": 148,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"184.2K\", \"totalSubmission\": \"266.7K\", \"totalAcceptedRaw\": 184163, \"totalSubmissionRaw\": 266742, \"acRate\": \"69.0%\"}",
            "hints": [
                "Count the frequency of each integer in the array.",
                "Start with an empty set, add to the set the integer with the maximum frequency.",
                "Keep Adding the integer with the max frequency until you remove at least half of the integers."
            ],
            "rephrased": {
                "body": "Given an integer array `arr`, you can choose a set of integers and remove all occurrences of these integers in the array. Return the minimum size of the set such that at least half of the integers of the array are removed.",
                "constraints": [
                    "2 <= arr.length <= 10^5",
                    "arr.length is even.",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[3,3,3,3,5,5,5,2,2,7]",
                        "output": "2",
                        "explanation": "By choosing the set {3, 7}, the array becomes [5, 5, 5, 2, 2] which has a length of 5, equal to half the original array's length (10). Other possible sets of size 2 include {3, 5}, {3, 2}, and {5, 2}. Choosing {2, 7} is invalid because the resulting array [3, 3, 3, 3, 5, 5, 5] has a length (7) greater than half the original array's length."
                    },
                    {
                        "input": "[7,7,7,7,7,7]",
                        "output": "1",
                        "explanation": "The only possible set is {7}, which removes all elements and results in an empty array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Count the frequency of each integer in the array.",
            "Start with an empty set, add to the set the integer with the maximum frequency.",
            "Keep Adding the integer with the max frequency until you remove at least half of the integers."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minSetSize(vector<int>& arr) {\n    const int n = arr.size();\n    int sum = 0;\n    unordered_map<int, int> map;\n    vector<pair<int, int>> count;\n\n    for (const int a : arr)\n      ++map[a];\n\n    for (const auto& [a, freq] : map)\n      count.push_back(make_pair(a, freq));\n\n    sort(count.begin(), count.end(),\n         [](const auto& a, const auto& b) { return a.second > b.second; });\n\n    for (int i = 0; i < count.size(); ++i) {\n      sum += count[i].second;\n      if (sum >= n / 2)\n        return i + 1;\n    }\n\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minSetSize(int[] arr) {\n    final int n = arr.length;\n    int sum = 0;\n    Map<Integer, Integer> map = new HashMap<>();\n\n    for (final int a : arr)\n      map.merge(a, 1, Integer::sum);\n\n    int[][] count = new int[map.size()][2];\n    int i = 0;\n\n    for (final int key : map.keySet()) {\n      count[i][0] = key;\n      count[i++][1] = map.get(key);\n    }\n\n    Arrays.sort(count, (c1, c2) -> c2[1] - c1[1]);\n\n    for (i = 0; i < count.length; ++i) {\n      sum += count[i][1];\n      if (sum >= n / 2)\n        return i + 1;\n    }\n\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minSetSize(self, arr: List[int]) -> int:\n    n = len(arr)\n\n    count = collections.Counter(arr).most_common()\n    count.sort(key=lambda c: -c[1])\n\n    summ = 0\n    for i, c in enumerate(count):\n      summ += c[1]\n      if summ >= n // 2:\n        return i + 1\n",
                "lang_text": "py"
            }
        }
    }
}