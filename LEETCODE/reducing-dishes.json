{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1402",
            "title": "Reducing Dishes",
            "titleSlug": "reducing-dishes",
            "content": "<p>A chef has collected data on the <code>satisfaction</code> level of his <code>n</code> dishes. Chef can cook any dish in 1 unit of time.</p>\n\n<p><strong>Like-time coefficient</strong> of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. <code>time[i] * satisfaction[i]</code>.</p>\n\n<p>Return the maximum sum of <strong>like-time coefficient </strong>that the chef can obtain after preparing some amount of dishes.</p>\n\n<p>Dishes can be prepared in <strong>any </strong>order and the chef can discard some dishes to get this maximum value.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> satisfaction = [-1,-8,0,5,-9]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> After Removing the second and last dish, the maximum total <strong>like-time coefficient</strong> will be equal to (-1*1 + 0*2 + 5*3 = 14).\nEach dish is prepared in one unit of time.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> satisfaction = [4,3,2]\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> satisfaction = [-1,-4,-5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> People do not like the dishes. No dish is prepared.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == satisfaction.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>-1000 &lt;= satisfaction[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3175,
            "dislikes": 296,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"131.2K\", \"totalSubmission\": \"171.9K\", \"totalAcceptedRaw\": 131188, \"totalSubmissionRaw\": 171913, \"acRate\": \"76.3%\"}",
            "hints": [
                "Use dynamic programming to find the optimal solution by saving the previous best like-time coefficient and its corresponding element sum.",
                "If adding the current element to the previous best like-time coefficient and its corresponding element sum would increase the best like-time coefficient, then go ahead and add it. Otherwise, keep the previous best like-time coefficient."
            ],
            "rephrased": {
                "body": "A chef has data on the satisfaction levels of `n` dishes. Each dish takes 1 unit of time to cook.  The 'like-time coefficient' of a dish is the product of its satisfaction level and the time it takes to cook, considering previously cooked dishes (time[i] * satisfaction[i]). The goal is to find the maximum sum of like-time coefficients the chef can achieve by preparing some of the dishes, possibly discarding some. Dishes can be cooked in any order.",
                "constraints": [
                    "n == satisfaction.length",
                    "1 <= n <= 500",
                    "-1000 <= satisfaction[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[-1,-8,0,5,-9]",
                        "output": "14",
                        "explanation": "By removing the second and last dishes, the maximum total like-time coefficient is achieved: (-1*1 + 0*2 + 5*3 = 14). Each dish takes one unit of time to prepare."
                    },
                    {
                        "input": "[4,3,2]",
                        "output": "20",
                        "explanation": "Dishes can be prepared in any order. The optimal order yields: (2*1 + 3*2 + 4*3 = 20)."
                    },
                    {
                        "input": "[-1,-4,-5]",
                        "output": "0",
                        "explanation": "Since all satisfaction levels are negative, preparing no dishes maximizes the like-time coefficient sum."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use dynamic programming to find the optimal solution by saving the previous best like-time coefficient and its corresponding element sum.",
            "If adding the current element to the previous best like-time coefficient and its corresponding element sum would increase the best like-time coefficient, then go ahead and add it. Otherwise, keep the previous best like-time coefficient."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxSatisfaction(vector<int>& satisfaction) {\n    int ans = 0;\n    int sumSatisfaction = 0;\n\n    std::ranges::sort(satisfaction, greater<>());\n\n    for (const int s : satisfaction) {\n      sumSatisfaction += s;\n      if (sumSatisfaction <= 0)\n        return ans;\n      ans += sumSatisfaction;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxSatisfaction(int[] satisfaction) {\n    int ans = 0;\n    int sumSatisfaction = 0;\n\n    satisfaction = Arrays.stream(satisfaction)\n                       .boxed()\n                       .sorted(Collections.reverseOrder())\n                       .mapToInt(Integer::intValue)\n                       .toArray();\n\n    for (final int s : satisfaction) {\n      sumSatisfaction += s;\n      if (sumSatisfaction <= 0)\n        return ans;\n      ans += sumSatisfaction;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSatisfaction(self, satisfaction: List[int]) -> int:\n    ans = 0\n    sumSatisfaction = 0\n\n    for s in sorted(satisfaction, reverse=True):\n      sumSatisfaction += s\n      if sumSatisfaction <= 0:\n        return ans\n      ans += sumSatisfaction\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}