{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "959",
            "title": "Regions Cut By Slashes",
            "titleSlug": "regions-cut-by-slashes",
            "content": "<p>An <code>n x n</code> grid is composed of <code>1 x 1</code> squares where each <code>1 x 1</code> square consists of a <code>&#39;/&#39;</code>, <code>&#39;\\&#39;</code>, or blank space <code>&#39; &#39;</code>. These characters divide the square into contiguous regions.</p>\n\n<p>Given the grid <code>grid</code> represented as a string array, return <em>the number of regions</em>.</p>\n\n<p>Note that backslash characters are escaped, so a <code>&#39;\\&#39;</code> is represented as <code>&#39;\\\\&#39;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/1.png\" style=\"width: 200px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot; /&quot;,&quot;/ &quot;]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/2.png\" style=\"width: 200px; height: 198px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot; /&quot;,&quot;  &quot;]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/4.png\" style=\"width: 200px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;/\\\\&quot;,&quot;\\\\/&quot;]\n<strong>Output:</strong> 5\n<strong>Explanation: </strong>Recall that because \\ characters are escaped, &quot;\\\\/&quot; refers to \\/, and &quot;/\\\\&quot; refers to /\\.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 30</code></li>\n\t<li><code>grid[i][j]</code> is either <code>&#39;/&#39;</code>, <code>&#39;\\&#39;</code>, or <code>&#39; &#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3014,
            "dislikes": 565,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"49.6K\", \"totalSubmission\": \"71.5K\", \"totalAcceptedRaw\": 49605, \"totalSubmissionRaw\": 71530, \"acRate\": \"69.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Consider an `n x n` grid composed of `1 x 1` squares. Each square contains either a '/', '\\', or a blank space ' '. These characters divide the square into contiguous regions.\n\nGiven a string array `grid` representing the grid, determine the number of regions.",
                "constraints": [
                    "n == grid.length == grid[i].length",
                    "1 <= n <= 30",
                    "grid[i][j] is either '/', '\\', or ' '."
                ],
                "testcases": [
                    {
                        "input": "[\" /\",\"/ \"]",
                        "output": "2",
                        "explanation": null
                    },
                    {
                        "input": "[\" /\",\"  \"]",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "[\"/\\\",\"\\/\"]",
                        "output": "5",
                        "explanation": "The grid contains '/\\' in the first row and '\\/' in the second. Each backslash character is escaped in the input."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int regionsBySlashes(vector<string>& grid) {\n    const int n = grid.size();\n    // G := upscaled grid\n    vector<vector<int>> g(n * 3, vector<int>(n * 3));\n\n    for (int i = 0; i < n; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i][j] == '/') {\n          g[i * 3][j * 3 + 2] = 1;\n          g[i * 3 + 1][j * 3 + 1] = 1;\n          g[i * 3 + 2][j * 3] = 1;\n        } else if (grid[i][j] == '\\\\') {\n          g[i * 3][j * 3] = 1;\n          g[i * 3 + 1][j * 3 + 1] = 1;\n          g[i * 3 + 2][j * 3 + 2] = 1;\n        }\n\n    int ans = 0;\n\n    for (int i = 0; i < n * 3; ++i)\n      for (int j = 0; j < n * 3; ++j)\n        if (g[i][j] == 0) {\n          dfs(g, i, j);\n          ++ans;\n        }\n\n    return ans;\n  }\n\n private:\n  void dfs(vector<vector<int>>& g, int i, int j) {\n    if (i < 0 || i == g.size() || j < 0 || j == g[0].size())\n      return;\n    if (g[i][j] != 0)\n      return;\n\n    g[i][j] = 2;  // Mark 2 as visited\n    dfs(g, i + 1, j);\n    dfs(g, i - 1, j);\n    dfs(g, i, j + 1);\n    dfs(g, i, j - 1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int regionsBySlashes(String[] grid) {\n    final int n = grid.length;\n    // G := upscaled grid\n    int[][] g = new int[n * 3][n * 3];\n\n    for (int i = 0; i < n; ++i)\n      for (int j = 0; j < n; ++j)\n        if (grid[i].charAt(j) == '/') {\n          g[i * 3][j * 3 + 2] = 1;\n          g[i * 3 + 1][j * 3 + 1] = 1;\n          g[i * 3 + 2][j * 3] = 1;\n        } else if (grid[i].charAt(j) == '\\\\') {\n          g[i * 3][j * 3] = 1;\n          g[i * 3 + 1][j * 3 + 1] = 1;\n          g[i * 3 + 2][j * 3 + 2] = 1;\n        }\n\n    int ans = 0;\n\n    for (int i = 0; i < n * 3; ++i)\n      for (int j = 0; j < n * 3; ++j)\n        if (g[i][j] == 0) {\n          dfs(g, i, j);\n          ++ans;\n        }\n\n    return ans;\n  }\n\n  private void dfs(int[][] g, int i, int j) {\n    if (i < 0 || i == g.length || j < 0 || j == g[0].length)\n      return;\n    if (g[i][j] != 0)\n      return;\n\n    g[i][j] = 2; // Mark 2 as visited\n    dfs(g, i + 1, j);\n    dfs(g, i - 1, j);\n    dfs(g, i, j + 1);\n    dfs(g, i, j - 1);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}