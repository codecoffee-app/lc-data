{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1122",
            "title": "Relative Sort Array",
            "titleSlug": "relative-sort-array",
            "content": "<p>Given two arrays <code>arr1</code> and <code>arr2</code>, the elements of <code>arr2</code> are distinct, and all elements in <code>arr2</code> are also in <code>arr1</code>.</p>\n\n<p>Sort the elements of <code>arr1</code> such that the relative ordering of items in <code>arr1</code> are the same as in <code>arr2</code>. Elements that do not appear in <code>arr2</code> should be placed at the end of <code>arr1</code> in <strong>ascending</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\n<strong>Output:</strong> [2,2,2,1,4,3,3,9,6,7,19]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]\n<strong>Output:</strong> [22,28,8,6,17,44]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr1.length, arr2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= arr1[i], arr2[i] &lt;= 1000</code></li>\n\t<li>All the elements of <code>arr2</code> are <strong>distinct</strong>.</li>\n\t<li>Each&nbsp;<code>arr2[i]</code> is in <code>arr1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2473,
            "dislikes": 140,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting Sort",
                    "slug": "counting-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"174.9K\", \"totalSubmission\": \"254.1K\", \"totalAcceptedRaw\": 174950, \"totalSubmissionRaw\": 254135, \"acRate\": \"68.8%\"}",
            "hints": [
                "Using a hashmap, we can map the values of arr2 to their position in arr2.",
                "After, we can use a custom sorting function."
            ],
            "rephrased": {
                "body": "Given two arrays, `arr1` and `arr2`, where all elements in `arr2` are distinct and present in `arr1`, sort `arr1` according to the relative order of elements in `arr2`. Elements in `arr1` that are not present in `arr2` should be appended to the end of the sorted `arr1` in ascending order.",
                "constraints": [
                    "1 <= arr1.length, arr2.length <= 1000",
                    "0 <= arr1[i], arr2[i] <= 1000",
                    "All the elements of arr2 are distinct.",
                    "Each arr2[i] is in arr1."
                ],
                "testcases": [
                    {
                        "input": "arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]",
                        "output": "[2,2,2,1,4,3,3,9,6,7,19]",
                        "explanation": "The elements in arr2 (2, 1, 4, 3, 9, 6) appear in that order at the beginning of the output. The remaining elements (7, 19) are sorted in ascending order and appended to the end."
                    },
                    {
                        "input": "arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]",
                        "output": "[22,28,8,6,17,44]",
                        "explanation": "The elements in arr2 (22, 28, 8, 6) appear in that order at the beginning of the output. The remaining elements (17, 44) are sorted in ascending order and appended to the end."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Using a hashmap, we can map the values of arr2 to their position in arr2.",
            "After, we can use a custom sorting function."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting Sort",
                "slug": "counting-sort"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {\n    vector<int> ans;\n    vector<int> count(1001);\n\n    for (int a : arr1)\n      ++count[a];\n\n    for (int a : arr2)\n      while (count[a]-- > 0)\n        ans.push_back(a);\n\n    for (int num = 0; num < 1001; ++num)\n      while (count[num]-- > 0)\n        ans.push_back(num);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] relativeSortArray(int[] arr1, int[] arr2) {\n    int[] ans = new int[arr1.length];\n    int[] count = new int[1001];\n    int i = 0;\n\n    for (int a : arr1)\n      ++count[a];\n\n    for (int a : arr2)\n      while (count[a]-- > 0)\n        ans[i++] = a;\n\n    for (int num = 0; num < 1001; ++num)\n      while (count[num]-- > 0)\n        ans[i++] = num;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:\n    ans = []\n    count = [0] * 1001\n\n    for a in arr1:\n      count[a] += 1\n\n    for a in arr2:\n      while count[a] > 0:\n        ans.append(a)\n        count[a] -= 1\n\n    for num in range(1001):\n      for _ in range(count[num]):\n        ans.append(num)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}