{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2766",
            "title": "Relocate Marbles",
            "titleSlug": "relocate-marbles",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> representing the initial positions of some marbles. You are also given two <strong>0-indexed </strong>integer arrays <code>moveFrom</code> and <code>moveTo</code> of <strong>equal</strong> length.</p>\n\n<p>Throughout <code>moveFrom.length</code> steps, you will change the positions of the marbles. On the <code>i<sup>th</sup></code> step, you will move <strong>all</strong> marbles at position <code>moveFrom[i]</code> to position <code>moveTo[i]</code>.</p>\n\n<p>After completing all the steps, return <em>the sorted list of <strong>occupied</strong> positions</em>.</p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>We call a position <strong>occupied</strong> if there is at least one marble in that position.</li>\n\t<li>There may be multiple marbles in a single position.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]\n<strong>Output:</strong> [5,6,8,9]\n<strong>Explanation:</strong> Initially, the marbles are at positions 1,6,7,8.\nAt the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.\nAt the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.\nAt the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.\nAt the end, the final positions containing at least one marbles are [5,6,8,9].</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]\n<strong>Output:</strong> [2]\n<strong>Explanation:</strong> Initially, the marbles are at positions [1,1,3,3].\nAt the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].\nAt the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].\nSince 2 is the only occupied position, we return [2].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= moveFrom.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>moveFrom.length == moveTo.length</code></li>\n\t<li><code>1 &lt;= nums[i], moveFrom[i], moveTo[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>The test cases are generated such that there is at least a marble in&nbsp;<code>moveFrom[i]</code>&nbsp;at the moment we want to apply&nbsp;the <code>i<sup>th</sup></code>&nbsp;move.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 175,
            "dislikes": 13,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"17.8K\", \"totalSubmission\": \"34.9K\", \"totalAcceptedRaw\": 17795, \"totalSubmissionRaw\": 34901, \"acRate\": \"51.0%\"}",
            "hints": [
                "Can we solve this problem using a set or map?",
                "Sequentially process pairs from moveFrom[i] and moveTo[i]. In each step, remove the occurrence of moveFrom[i] and add moveTo[i] into the set."
            ],
            "rephrased": {
                "body": "You are given an integer array `nums` representing the initial positions of some marbles. You are also given two integer arrays `moveFrom` and `moveTo` of equal length.\n\nThroughout `moveFrom.length` steps, you will change the positions of the marbles. On the `i`-th step, you will move all marbles at position `moveFrom[i]` to position `moveTo[i]`.\n\nAfter completing all the steps, return the sorted list of occupied positions.\n\nA position is considered occupied if there is at least one marble in that position. There may be multiple marbles in a single position.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= moveFrom.length <= 10^5",
                    "moveFrom.length == moveTo.length",
                    "1 <= nums[i], moveFrom[i], moveTo[i] <= 10^9",
                    "The test cases are generated such that there is at least a marble in moveFrom[i] at the moment we want to apply the i-th move."
                ],
                "testcases": [
                    {
                        "input": "nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]",
                        "output": "[5,6,8,9]",
                        "explanation": "Initially, the marbles are at positions 1, 6, 7, and 8.  The moves are applied sequentially: marbles at position 1 are moved to 2, marbles at position 7 are moved to 9, and marbles at position 2 are moved to 5. The final occupied positions are 5, 6, 8, and 9."
                    },
                    {
                        "input": "nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]",
                        "output": "[2]",
                        "explanation": "Initially, the marbles are at positions 1, 1, 3, and 3. The moves are applied sequentially: marbles at position 1 are moved to 2, and marbles at position 3 are moved to 2. All marbles end up at position 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can we solve this problem using a set or map?",
            "Sequentially process pairs from moveFrom[i] and moveTo[i]. In each step, remove the occurrence of moveFrom[i] and add moveTo[i] into the set."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> relocateMarbles(vector<int>& nums, vector<int>& moveFrom,\n                              vector<int>& moveTo) {\n    set<int> numsSet{nums.begin(), nums.end()};\n\n    for (int i = 0; i < moveFrom.size(); ++i) {\n      numsSet.erase(numsSet.find(moveFrom[i]));\n      numsSet.insert(moveTo[i]);\n    }\n\n    return {numsSet.begin(), numsSet.end()};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> relocateMarbles(int[] nums, int[] moveFrom, int[] moveTo) {\n    Set<Integer> numsSet = Arrays.stream(nums).boxed().collect(Collectors.toSet());\n\n    for (int i = 0; i < moveFrom.length; ++i) {\n      numsSet.remove(moveFrom[i]);\n      numsSet.add(moveTo[i]);\n    }\n\n    return numsSet.stream().sorted().toList();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def relocateMarbles(self, nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    numsSet = set(nums)\n\n    for f, t in zip(moveFrom, moveTo):\n      numsSet.remove(f)\n      numsSet.add(t)\n\n    return sorted(numsSet)\n",
                "lang_text": "py"
            }
        }
    }
}