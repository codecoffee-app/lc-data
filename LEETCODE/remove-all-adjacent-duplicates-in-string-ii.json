{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1209",
            "title": "Remove All Adjacent Duplicates in String II",
            "titleSlug": "remove-all-adjacent-duplicates-in-string-ii",
            "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>, a <code>k</code> <strong>duplicate removal</strong> consists of choosing <code>k</code> adjacent and equal letters from <code>s</code> and removing them, causing the left and the right side of the deleted substring to concatenate together.</p>\n\n<p>We repeatedly make <code>k</code> <strong>duplicate removals</strong> on <code>s</code> until we no longer can.</p>\n\n<p>Return <em>the final string after all such duplicate removals have been made</em>. It is guaranteed that the answer is <strong>unique</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, k = 2\n<strong>Output:</strong> &quot;abcd&quot;\n<strong>Explanation: </strong>There&#39;s nothing to delete.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;deeedbbcccbdaa&quot;, k = 3\n<strong>Output:</strong> &quot;aa&quot;\n<strong>Explanation: \n</strong>First delete &quot;eee&quot; and &quot;ccc&quot;, get &quot;ddbbbdaa&quot;\nThen delete &quot;bbb&quot;, get &quot;dddaa&quot;\nFinally delete &quot;ddd&quot;, get &quot;aa&quot;</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pbbcggttciiippooaais&quot;, k = 2\n<strong>Output:</strong> &quot;ps&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> only contains lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5599,
            "dislikes": 108,
            "similarQuestions": "[{\"title\": \"Remove All Adjacent Duplicates In String\", \"titleSlug\": \"remove-all-adjacent-duplicates-in-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Replace Non-Coprime Numbers in Array\", \"titleSlug\": \"replace-non-coprime-numbers-in-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimize String Length\", \"titleSlug\": \"minimize-string-length\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"294.9K\", \"totalSubmission\": \"516.5K\", \"totalAcceptedRaw\": 294931, \"totalSubmissionRaw\": 516460, \"acRate\": \"57.1%\"}",
            "hints": [
                "Use a stack to store the characters, when there are k same characters, delete them.",
                "To make it more efficient, use a pair to store the value and the count of each character."
            ],
            "rephrased": {
                "body": "Given a string `s` and an integer `k`, perform `k` duplicate removals. A `k` duplicate removal involves selecting `k` adjacent and identical characters from `s` and removing them.  This removal concatenates the substrings to the left and right of the deleted portion.\n\nRepeatedly apply `k` duplicate removals to `s` until no further removals are possible.\n\nReturn the final string after all duplicate removals. The answer is guaranteed to be unique.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "2 <= k <= 10^4",
                    "`s` consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"abcd\", k = 2",
                        "output": "\"abcd\"",
                        "explanation": "No duplicate removals are possible as there are no adjacent characters appearing k (2) times."
                    },
                    {
                        "input": "s = \"deeedbbcccbdaa\", k = 3",
                        "output": "\"aa\"",
                        "explanation": "1. Remove \"eee\" and \"ccc\" resulting in \"ddbbbdaa\".\n2. Remove \"bbb\" resulting in \"dddaa\".\n3. Remove \"ddd\" resulting in \"aa\"."
                    },
                    {
                        "input": "s = \"pbbcggttciiippooaais\", k = 2",
                        "output": "\"ps\"",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "remove-all-adjacent-duplicates-in-string",
                "title": "Remove All Adjacent Duplicates In String",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "replace-non-coprime-numbers-in-array",
                "title": "Replace Non-Coprime Numbers in Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "minimize-string-length",
                "title": "Minimize String Length",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use a stack to store the characters, when there are k same characters, delete them.",
            "To make it more efficient, use a pair to store the value and the count of each character."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string removeDuplicates(const string& s, int k) {\n    string ans;\n    vector<pair<char, int>> stack;\n\n    for (const char c : s)\n      if (stack.empty() || stack.back().first != c)\n        stack.emplace_back(c, 1);\n      else if (++stack.back().second == k)  // Stack.back() == c\n        stack.pop_back();\n\n    for (const auto& [c, count] : stack)\n      ans.append(count, c);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Item {\n  char c;\n  int freq;\n\n  public Item(char c, int freq) {\n    this.c = c;\n    this.freq = freq;\n  }\n}\n\nclass Solution {\n  public String removeDuplicates(String s, int k) {\n    StringBuilder sb = new StringBuilder();\n    LinkedList<Item> stack = new LinkedList<>();\n\n    for (final char c : s.toCharArray()) {\n      if (!stack.isEmpty() && stack.peek().c == c)\n        ++stack.peek().freq;\n      else\n        stack.push(new Item(c, 1));\n      if (stack.peek().freq == k)\n        stack.pop();\n    }\n\n    while (!stack.isEmpty()) {\n      Item item = stack.pop();\n      for (int i = 0; i < item.freq; ++i)\n        sb.append(item.c);\n    }\n\n    return sb.reverse().toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def removeDuplicates(self, s: str, k: int) -> str:\n    stack = []\n\n    for c in s:\n      if not stack or stack[-1][0] != c:\n        stack.append([c, 1])\n      else:  # stack[-1][0] == c\n        stack[-1][1] += 1\n        if stack[-1][1] == k:\n          stack.pop()\n\n    return ''.join(c * count for c, count in stack)\n",
                "lang_text": "py"
            }
        }
    }
}