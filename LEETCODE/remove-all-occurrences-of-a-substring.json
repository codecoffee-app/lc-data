{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1910",
            "title": "Remove All Occurrences of a Substring",
            "titleSlug": "remove-all-occurrences-of-a-substring",
            "content": "<p>Given two strings <code>s</code> and <code>part</code>, perform the following operation on <code>s</code> until <strong>all</strong> occurrences of the substring <code>part</code> are removed:</p>\n\n<ul>\n\t<li>Find the <strong>leftmost</strong> occurrence of the substring <code>part</code> and <strong>remove</strong> it from <code>s</code>.</li>\n</ul>\n\n<p>Return <code>s</code><em> after removing all occurrences of </em><code>part</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;daabcbaabcbc&quot;, part = &quot;abc&quot;\n<strong>Output:</strong> &quot;dab&quot;\n<strong>Explanation</strong>: The following operations are done:\n- s = &quot;da<strong><u>abc</u></strong>baabcbc&quot;, remove &quot;abc&quot; starting at index 2, so s = &quot;dabaabcbc&quot;.\n- s = &quot;daba<strong><u>abc</u></strong>bc&quot;, remove &quot;abc&quot; starting at index 4, so s = &quot;dababc&quot;.\n- s = &quot;dab<strong><u>abc</u></strong>&quot;, remove &quot;abc&quot; starting at index 3, so s = &quot;dab&quot;.\nNow s has no occurrences of &quot;abc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;axxxxyyyyb&quot;, part = &quot;xy&quot;\n<strong>Output:</strong> &quot;ab&quot;\n<strong>Explanation</strong>: The following operations are done:\n- s = &quot;axxx<strong><u>xy</u></strong>yyyb&quot;, remove &quot;xy&quot; starting at index 4 so s = &quot;axxxyyyb&quot;.\n- s = &quot;axx<strong><u>xy</u></strong>yyb&quot;, remove &quot;xy&quot; starting at index 3 so s = &quot;axxyyb&quot;.\n- s = &quot;ax<strong><u>xy</u></strong>yb&quot;, remove &quot;xy&quot; starting at index 2 so s = &quot;axyb&quot;.\n- s = &quot;a<strong><u>xy</u></strong>b&quot;, remove &quot;xy&quot; starting at index 1 so s = &quot;ab&quot;.\nNow s has no occurrences of &quot;xy&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= part.length &lt;= 1000</code></li>\n\t<li><code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b and <code>part</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1676,
            "dislikes": 56,
            "similarQuestions": "[{\"title\": \"Maximum Deletions on a String\", \"titleSlug\": \"maximum-deletions-on-a-string\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"94.9K\", \"totalSubmission\": \"123.9K\", \"totalAcceptedRaw\": 94883, \"totalSubmissionRaw\": 123895, \"acRate\": \"76.6%\"}",
            "hints": [
                "Note that a new occurrence of pattern can appear if you remove an old one, For example, s = \"ababcc\" and pattern = \"abc\".",
                "You can maintain a stack of characters and if the last character of the pattern size in the stack match the pattern remove them"
            ],
            "rephrased": {
                "body": "Given two strings `s` and `part`, repeatedly remove the leftmost occurrence of `part` from `s` until `s` no longer contains `part` as a substring. Return the final modified string `s`.",
                "constraints": [
                    "1 <= s.length <= 1000",
                    "1 <= part.length <= 1000",
                    "s and part consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": {
                            "s": "daabcbaabcbc",
                            "part": "abc"
                        },
                        "output": "dab",
                        "explanation": "Initially, s = \"daabcbaabcbc\".\n1. Remove \"abc\" at index 2: s becomes \"dabaabcbc\".\n2. Remove \"abc\" at index 4: s becomes \"dababc\".\n3. Remove \"abc\" at index 3: s becomes \"dab\".\nNo more occurrences of \"abc\" are found."
                    },
                    {
                        "input": {
                            "s": "axxxxyyyyb",
                            "part": "xy"
                        },
                        "output": "ab",
                        "explanation": "Initially, s = \"axxxxyyyyb\".\n1. Remove \"xy\" at index 4: s becomes \"axxxyyyb\".\n2. Remove \"xy\" at index 3: s becomes \"axxyyb\".\n3. Remove \"xy\" at index 2: s becomes \"axyb\".\n4. Remove \"xy\" at index 1: s becomes \"ab\".\nNo more occurrences of \"xy\" are found."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-deletions-on-a-string",
                "title": "Maximum Deletions on a String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Note that a new occurrence of pattern can appear if you remove an old one, For example, s = \"ababcc\" and pattern = \"abc\".",
            "You can maintain a stack of characters and if the last character of the pattern size in the stack match the pattern remove them"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string removeOccurrences(string s, string part) {\n    const int n = s.length();\n    const int k = part.length();\n\n    string t(n, ' ');\n    int j = 0;  // t's index\n\n    for (int i = 0; i < n; ++i) {\n      t[j++] = s[i];\n      if (j >= k && t.substr(j - k, k) == part)\n        j -= k;\n    }\n\n    return t.substr(0, j);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String removeOccurrences(String s, String part) {\n    final int n = s.length();\n    final int k = part.length();\n\n    StringBuilder sb = new StringBuilder(s);\n    int j = 0; // sb's index\n\n    for (int i = 0; i < n; ++i) {\n      sb.setCharAt(j++, s.charAt(i));\n      if (j >= k && sb.substring(j - k, j).toString().equals(part))\n        j -= k;\n    }\n\n    return sb.substring(0, j).toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def removeOccurrences(self, s: str, part: str) -> str:\n    n = len(s)\n    k = len(part)\n\n    t = [' '] * n\n    j = 0  # t's index\n\n    for i, c in enumerate(s):\n      t[j] = c\n      j += 1\n      if j >= k and ''.join(t[j - k:j]) == part:\n        j -= k\n\n    return ''.join(t[:j])\n",
                "lang_text": "py"
            }
        }
    }
}