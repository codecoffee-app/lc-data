{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "546",
            "title": "Remove Boxes",
            "titleSlug": "remove-boxes",
            "content": "<p>You are given several <code>boxes</code> with different colors represented by different positive numbers.</p>\n\n<p>You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of <code>k</code> boxes, <code>k &gt;= 1</code>), remove them and get <code>k * k</code> points.</p>\n\n<p>Return <em>the maximum points you can get</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> boxes = [1,3,2,2,2,3,4,3,1]\n<strong>Output:</strong> 23\n<strong>Explanation:</strong>\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----&gt; [1, 3, 3, 4, 3, 1] (3*3=9 points) \n----&gt; [1, 3, 3, 3, 1] (1*1=1 points) \n----&gt; [1, 1] (3*3=9 points) \n----&gt; [] (2*2=4 points)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> boxes = [1,1,1]\n<strong>Output:</strong> 9\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> boxes = [1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= boxes.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= boxes[i]&nbsp;&lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2194,
            "dislikes": 121,
            "similarQuestions": "[{\"title\": \"Strange Printer\", \"titleSlug\": \"strange-printer\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Unique Flavors After Sharing K Candies\", \"titleSlug\": \"number-of-unique-flavors-after-sharing-k-candies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"43.7K\", \"totalSubmission\": \"91.8K\", \"totalAcceptedRaw\": 43697, \"totalSubmissionRaw\": 91828, \"acRate\": \"47.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given an array of boxes, where each box has a color represented by a positive integer. Your goal is to maximize the total points earned by removing boxes in rounds. In each round, you can choose a contiguous group of boxes with the same color (of length *k*, where *k* >= 1), remove them, and earn *k* * *k* points. Return the maximum total points achievable by removing all boxes.",
                "constraints": [
                    "1 <= boxes.length <= 100",
                    "1 <= boxes[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1,3,2,2,2,3,4,3,1]",
                        "output": "23",
                        "explanation": "One optimal sequence of moves is:\n1. Remove the three '2's: [1, 3, 2, 2, 2, 3, 4, 3, 1] -> [1, 3, 3, 4, 3, 1] (3 * 3 = 9 points)\n2. Remove a single '1': [1, 3, 3, 4, 3, 1] -> [3, 3, 4, 3, 1] (1*1 = 1 point).\n3. Remove the three '3's: [3, 3, 4, 3] -> [3,3,3,4] (3 * 3 = 9 points).\n4. Remove the two '1's: [1,1] -> [] (2 * 2 = 4 points)\nTotal points: 9 + 1 + 9 + 4 = 23"
                    },
                    {
                        "input": "[1,1,1]",
                        "output": "9",
                        "explanation": null
                    },
                    {
                        "input": "[1]",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "strange-printer",
                "title": "Strange Printer",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-unique-flavors-after-sharing-k-candies",
                "title": "Number of Unique Flavors After Sharing K Candies",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int removeBoxes(vector<int>& boxes) {\n    const int n = boxes.size();\n    // dp[i][j][k] := max score of boxes[i..j] if k boxes eqaul to boxes[j]\n    dp.resize(n, vector<vector<int>>(n, vector<int>(n)));\n    return removeBoxes(boxes, 0, n - 1, 0);\n  }\n\n private:\n  vector<vector<vector<int>>> dp;\n\n  int removeBoxes(const vector<int>& boxes, int i, int j, int k) {\n    if (i > j)\n      return 0;\n    if (dp[i][j][k] > 0)\n      return dp[i][j][k];\n\n    int r = j;\n    int sameBoxes = k + 1;\n    while (r > 0 && boxes[r - 1] == boxes[r]) {\n      --r;\n      ++sameBoxes;\n    }\n    dp[i][j][k] = removeBoxes(boxes, i, r - 1, 0) + sameBoxes * sameBoxes;\n\n    for (int p = i; p < r; ++p)\n      if (boxes[p] == boxes[r])\n        dp[i][j][k] = max(dp[i][j][k], removeBoxes(boxes, i, p, sameBoxes) +\n                                           removeBoxes(boxes, p + 1, r - 1, 0));\n\n    return dp[i][j][k];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int removeBoxes(int[] boxes) {\n    final int n = boxes.length;\n    // dp[i][j][k] := max score of boxes[i..j] if k boxes eqaul to boxes[j]\n    dp = new int[n][n][n];\n    return removeBoxes(boxes, 0, n - 1, 0);\n  }\n\n  private int[][][] dp;\n\n  private int removeBoxes(int[] boxes, int i, int j, int k) {\n    if (i > j)\n      return 0;\n    if (dp[i][j][k] > 0)\n      return dp[i][j][k];\n\n    int r = j;\n    int sameBoxes = k + 1;\n    while (r > 0 && boxes[r - 1] == boxes[r]) {\n      --r;\n      ++sameBoxes;\n    }\n    dp[i][j][k] = removeBoxes(boxes, i, r - 1, 0) + sameBoxes * sameBoxes;\n\n    for (int p = i; p < r; ++p)\n      if (boxes[p] == boxes[r])\n        dp[i][j][k] = Math.max(dp[i][j][k], removeBoxes(boxes, i, p, sameBoxes) +\n                                                removeBoxes(boxes, p + 1, r - 1, 0));\n\n    return dp[i][j][k];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def removeBoxes(self, boxes: List[int]) -> int:\n    # dp(i, j, k) := max score of boxes[i..j] if k boxes equal to boxes[j]\n    @functools.lru_cache(None)\n    def dp(i: int, j: int, k: int) -> int:\n      if i > j:\n        return 0\n\n      r = j\n      sameBoxes = k + 1\n      while r > 0 and boxes[r - 1] == boxes[r]:\n        r -= 1\n        sameBoxes += 1\n      ans = dp(i, r - 1, 0) + sameBoxes * sameBoxes\n\n      for p in range(i, r):\n        if boxes[p] == boxes[r]:\n          ans = max(ans, dp(i, p, sameBoxes) + dp(p + 1, r - 1, 0))\n\n      return ans\n\n    return dp(0, len(boxes) - 1, 0)\n",
                "lang_text": "py"
            }
        }
    }
}