{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1288",
            "title": "Remove Covered Intervals",
            "titleSlug": "remove-covered-intervals",
            "content": "<p>Given an array <code>intervals</code> where <code>intervals[i] = [l<sub>i</sub>, r<sub>i</sub>]</code> represent the interval <code>[l<sub>i</sub>, r<sub>i</sub>)</code>, remove all intervals that are covered by another interval in the list.</p>\n\n<p>The interval <code>[a, b)</code> is covered by the interval <code>[c, d)</code> if and only if <code>c &lt;= a</code> and <code>b &lt;= d</code>.</p>\n\n<p>Return <em>the number of remaining intervals</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[3,6],[2,8]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Interval [3,6] is covered by [2,8], therefore it is removed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[2,3]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 1000</code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= l<sub>i</sub> &lt; r<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li>All the given intervals are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2185,
            "dislikes": 58,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"115.1K\", \"totalSubmission\": \"203.5K\", \"totalAcceptedRaw\": 115111, \"totalSubmissionRaw\": 203455, \"acRate\": \"56.6%\"}",
            "hints": [
                "How to check if an interval is covered by another?",
                "Compare each interval to all others and check if it is covered by any interval."
            ],
            "rephrased": {
                "body": "Given an array of intervals, `intervals`, where each `intervals[i] = [l_i, r_i]` represents the interval `[l_i, r_i)`, remove all intervals that are covered by another interval in the list.  An interval `[a, b)` is covered by the interval `[c, d)` if and only if `c <= a` and `b <= d`. Return the number of remaining intervals after removing the covered intervals.",
                "constraints": [
                    "1 <= intervals.length <= 1000",
                    "intervals[i].length == 2",
                    "0 <= l_i < r_i <= 10^5",
                    "All the given intervals are unique."
                ],
                "testcases": [
                    {
                        "input": "[[1,4],[3,6],[2,8]]",
                        "output": "2",
                        "explanation": "The interval [3,6] is covered by [2,8], as 2 <= 3 and 6 <= 8. Therefore, it is removed, leaving [1,4] and [2,8]."
                    },
                    {
                        "input": "[[1,4],[2,3]]",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "How to check if an interval is covered by another?",
            "Compare each interval to all others and check if it is covered by any interval."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int removeCoveredIntervals(vector<vector<int>>& intervals) {\n    // If two intervals have the same start, put the one with larger end first.\n    sort(intervals.begin(), intervals.end(),\n         [](const vector<int>& a, const vector<int>& b) {\n      return a[0] == b[0] ? a[1] > b[1] : a[0] < b[0];\n    });\n\n    int ans = 0;\n    int prevEnd = 0;\n\n    for (const vector<int>& interval : intervals)\n      // Current interval is not covered by the previous one.\n      if (prevEnd < interval[1]) {\n        ++ans;\n        prevEnd = interval[1];\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int removeCoveredIntervals(int[][] intervals) {\n    // If two intervals have the same start, put the one with larger end first.\n    Arrays.sort(intervals, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);\n\n    int ans = 0;\n    int prevEnd = 0;\n\n    for (int[] interval : intervals)\n      // Current interval is not covered by the previous one.\n      if (prevEnd < interval[1]) {\n        ++ans;\n        prevEnd = interval[1];\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:\n    ans = 0\n    prevEnd = 0\n\n    # If two intervals have the same start, put the one with larger end first.\n    for _, end in sorted(intervals, key=lambda x: (x[0], -x[1])):\n      # Current interval is not covered by the previous one.\n      if prevEnd < end:\n        ans += 1\n        prevEnd = end\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}