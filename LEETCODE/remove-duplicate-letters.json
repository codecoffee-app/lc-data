{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "316",
            "title": "Remove Duplicate Letters",
            "titleSlug": "remove-duplicate-letters",
            "content": "<p>Given a string <code>s</code>, remove duplicate letters so that every letter appears once and only once. You must make sure your result is <span data-keyword=\"lexicographically-smaller-string\"><strong>the smallest in lexicographical order</strong></span> among all possible results.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bcabc&quot;\n<strong>Output:</strong> &quot;abc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbacdcbc&quot;\n<strong>Output:</strong> &quot;acdb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 1081: <a href=\"https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\" target=\"_blank\">https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/</a></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8378,
            "dislikes": 593,
            "similarQuestions": "[{\"title\": \"Smallest K-Length Subsequence With Occurrences of a Letter\", \"titleSlug\": \"smallest-k-length-subsequence-with-occurrences-of-a-letter\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"313.3K\", \"totalSubmission\": \"637.9K\", \"totalAcceptedRaw\": 313273, \"totalSubmissionRaw\": 637872, \"acRate\": \"49.1%\"}",
            "hints": [
                "Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i."
            ],
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase English letters, find the smallest lexicographical subsequence that contains each distinct character exactly once. In other words, remove duplicate letters such that each letter appears only once, ensuring the resulting string is the smallest possible in lexicographical order.",
                "constraints": [
                    "1 <= s.length <= 10<sup>4</sup>",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "bcabc",
                        "output": "abc",
                        "explanation": "The string \"abc\" contains each unique character from \"bcabc\" exactly once and is the smallest lexicographical subsequence."
                    },
                    {
                        "input": "cbacdcbc",
                        "output": "acdb",
                        "explanation": "The string \"acdb\" contains each unique character from \"cbacdcbc\" exactly once and is the smallest lexicographical subsequence."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
                "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string removeDuplicateLetters(string s) {\n    string ans;\n    vector<int> count(128);\n    vector<bool> used(128);\n\n    for (const char c : s)\n      ++count[c];\n\n    for (const char c : s) {\n      --count[c];\n      if (used[c])\n        continue;\n      while (!ans.empty() && ans.back() > c && count[ans.back()] > 0) {\n        used[ans.back()] = false;\n        ans.pop_back();\n      }\n      used[c] = true;\n      ans.push_back(c);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String removeDuplicateLetters(String s) {\n    StringBuilder sb = new StringBuilder();\n    int[] count = new int[128];\n    boolean[] used = new boolean[128];\n\n    for (final char c : s.toCharArray())\n      ++count[c];\n\n    for (final char c : s.toCharArray()) {\n      --count[c];\n      if (used[c])\n        continue;\n      while (sb.length() > 0 && last(sb) > c && count[last(sb)] > 0) {\n        used[last(sb)] = false;\n        sb.setLength(sb.length() - 1);\n      }\n      used[c] = true;\n      sb.append(c);\n    }\n\n    return sb.toString();\n  }\n\n  private char last(StringBuilder sb) {\n    return sb.charAt(sb.length() - 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def removeDuplicateLetters(self, s: str) -> str:\n    ans = []\n    count = collections.Counter(s)\n    used = [False] * 26\n\n    for c in s:\n      count[c] -= 1\n      if used[ord(c) - ord('a')]:\n        continue\n      while ans and ans[-1] > c and count[ans[-1]] > 0:\n        used[ord(ans[-1]) - ord('a')] = False\n        ans.pop()\n      ans.append(c)\n      used[ord(ans[-1]) - ord('a')] = True\n\n    return ''.join(ans)\n",
                "lang_text": "py"
            }
        }
    }
}