{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "301",
            "title": "Remove Invalid Parentheses",
            "titleSlug": "remove-invalid-parentheses",
            "content": "<p>Given a string <code>s</code> that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.</p>\n\n<p>Return <em>a list of <strong>unique strings</strong> that are valid with the minimum number of removals</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()())()&quot;\n<strong>Output:</strong> [&quot;(())()&quot;,&quot;()()()&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(a)())()&quot;\n<strong>Output:</strong> [&quot;(a())()&quot;,&quot;(a)()()&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)(&quot;\n<strong>Output:</strong> [&quot;&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 25</code></li>\n\t<li><code>s</code> consists of lowercase English letters and parentheses <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>.</li>\n\t<li>There will be at most <code>20</code> parentheses in <code>s</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5730,
            "dislikes": 274,
            "similarQuestions": "[{\"title\": \"Valid Parentheses\", \"titleSlug\": \"valid-parentheses\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Minimum Number of Swaps to Make the String Balanced\", \"titleSlug\": \"minimum-number-of-swaps-to-make-the-string-balanced\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"408K\", \"totalSubmission\": \"855K\", \"totalAcceptedRaw\": 407998, \"totalSubmissionRaw\": 854958, \"acRate\": \"47.7%\"}",
            "hints": [
                "Since we do not know which brackets can be removed, we try all the options! We can use recursion.",
                "In the recursion, for each bracket, we can either use it or remove it.",
                "Recursion will generate all the valid parentheses strings but we want the ones with the least number of parentheses deleted.",
                "We can count the number of invalid brackets to be deleted and only generate the valid strings in the recusrion."
            ],
            "rephrased": {
                "body": "Given a string `s` containing parentheses and letters, determine the minimum number of invalid parentheses that need to be removed to make the input string valid. Return a list of unique, valid strings achieved with this minimum number of removals. The order of strings in the list does not matter.",
                "constraints": [
                    "1 <= s.length <= 25",
                    "s consists of lowercase English letters and parentheses '(' and ')'.",
                    "There will be at most 20 parentheses in s."
                ],
                "testcases": [
                    {
                        "input": "\"()())\"\"",
                        "output": "[\"(())()\",\"()()()\"]",
                        "explanation": "The input string \"()())\"\" has an extra closing parenthesis. Removing it results in two valid strings: \"(())()\" and \"()()()\"."
                    },
                    {
                        "input": "\"(a)())\"\"",
                        "output": "[\"(a())()\",\"(a)()()\"]",
                        "explanation": "The input string \"(a)())\"\" also has an extra closing parenthesis. Removing it results in two valid strings: \"(a())()\" and \"(a)()()\"."
                    },
                    {
                        "input": "\")(\"",
                        "output": "[\"\"]",
                        "explanation": "The input string \")(\" has mismatched parentheses. Removing both results in an empty string, which is considered a valid result as it represents the minimal number of removals."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "valid-parentheses",
                "title": "Valid Parentheses",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-number-of-swaps-to-make-the-string-balanced",
                "title": "Minimum Number of Swaps to Make the String Balanced",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Since we do not know which brackets can be removed, we try all the options! We can use recursion.",
            "In the recursion, for each bracket, we can either use it or remove it.",
            "Recursion will generate all the valid parentheses strings but we want the ones with the least number of parentheses deleted.",
            "We can count the number of invalid brackets to be deleted and only generate the valid strings in the recusrion."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> removeInvalidParentheses(string s) {\n    vector<string> ans;\n    const auto [l, r] = getLeftAndRightCounts(s);\n    dfs(s, 0, l, r, ans);\n    return ans;\n  }\n\n private:\n  // Similar to 921. Minimum Add to Make Parentheses Valid\n  // Returns how many '(' and ')' need to be deleted.\n  pair<int, int> getLeftAndRightCounts(const string& s) {\n    int l = 0;\n    int r = 0;\n\n    for (const char c : s)\n      if (c == '(')\n        ++l;\n      else if (c == ')') {\n        if (l == 0)\n          ++r;\n        else\n          --l;\n      }\n\n    return {l, r};\n  }\n\n  void dfs(const string& s, int start, int l, int r, vector<string>& ans) {\n    if (l == 0 && r == 0 && isValid(s)) {\n      ans.push_back(s);\n      return;\n    }\n\n    for (int i = start; i < s.length(); ++i) {\n      if (i > start && s[i] == s[i - 1])\n        continue;\n      if (l > 0 && s[i] == '(')  // Delete s[i].\n        dfs(s.substr(0, i) + s.substr(i + 1), i, l - 1, r, ans);\n      if (r > 0 && s[i] == ')')  // Delete s[i].\n        dfs(s.substr(0, i) + s.substr(i + 1), i, l, r - 1, ans);\n    }\n  }\n\n  bool isValid(const string& s) {\n    int opened = 0;  // # of '(' - # of ')'\n    for (const char c : s) {\n      if (c == '(')\n        ++opened;\n      else if (c == ')')\n        --opened;\n      if (opened < 0)\n        return false;\n    }\n    return true;  // opened == 0\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> removeInvalidParentheses(String s) {\n    List<String> ans = new ArrayList<>();\n    final int[] counts = getLeftAndRightCounts(s);\n    dfs(s, 0, counts[0], counts[1], ans);\n    return ans;\n  }\n\n  // Similar to 921. Minimum Add to Make Parentheses Valid\n  // Returns how many '(' and ')' need to be deleted.\n  private int[] getLeftAndRightCounts(final String s) {\n    int l = 0;\n    int r = 0;\n\n    for (final char c : s.toCharArray())\n      if (c == '(')\n        ++l;\n      else if (c == ')') {\n        if (l == 0)\n          ++r;\n        else\n          --l;\n      }\n\n    return new int[] {l, r};\n  }\n\n  private void dfs(final String s, int start, int l, int r, List<String> ans) {\n    if (l == 0 && r == 0 && isValid(s)) {\n      ans.add(s);\n      return;\n    }\n\n    for (int i = start; i < s.length(); ++i) {\n      if (i > start && s.charAt(i) == s.charAt(i - 1))\n        continue;\n      if (l > 0 && s.charAt(i) == '(') // Delete s[i].\n        dfs(s.substring(0, i) + s.substring(i + 1), i, l - 1, r, ans);\n      else if (r > 0 && s.charAt(i) == ')') // Delete s[i].\n        dfs(s.substring(0, i) + s.substring(i + 1), i, l, r - 1, ans);\n    }\n  }\n\n  private boolean isValid(final String s) {\n    int opened = 0; // # of '(' - # of ')'\n    for (final char c : s.toCharArray()) {\n      if (c == '(')\n        ++opened;\n      else if (c == ')')\n        --opened;\n      if (opened < 0)\n        return false;\n    }\n    return true; // opened == 0\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def removeInvalidParentheses(self, s: str) -> List[str]:\n    # Similar to 921. Minimum Add to Make Parentheses Valid\n    def getLeftAndRightCounts(s: str) -> Tuple[int, int]:\n      \"\"\"Returns how many '(' and ')' need to be deleted.\"\"\"\n      l = 0\n      r = 0\n\n      for c in s:\n        if c == '(':\n          l += 1\n        elif c == ')':\n          if l == 0:\n            r += 1\n          else:\n            l -= 1\n\n      return l, r\n\n    def isValid(s: str):\n      opened = 0  # number of '(' - # of ')'\n      for c in s:\n        if c == '(':\n          opened += 1\n        elif c == ')':\n          opened -= 1\n        if opened < 0:\n          return False\n      return True  # opened == 0\n\n    ans = []\n\n    def dfs(s: str, start: int, l: int, r: int) -> None:\n      if l == 0 and r == 0 and isValid(s):\n        ans.append(s)\n        return\n\n      for i in range(start, len(s)):\n        if i > start and s[i] == s[i - 1]:\n          continue\n        if r > 0 and s[i] == ')':  # Delete s[i]\n          dfs(s[:i] + s[i + 1:], i, l, r - 1)\n        elif l > 0 and s[i] == '(':  # Delete s[i]\n          dfs(s[:i] + s[i + 1:], i, l - 1, r)\n\n    l, r = getLeftAndRightCounts(s)\n    dfs(s, 0, l, r)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}