{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1579",
            "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
            "titleSlug": "remove-max-number-of-edges-to-keep-graph-fully-traversable",
            "content": "<p>Alice and Bob have an undirected graph of <code>n</code> nodes and three types of edges:</p>\n\n<ul>\n\t<li>Type 1: Can be traversed by Alice only.</li>\n\t<li>Type 2: Can be traversed by Bob only.</li>\n\t<li>Type 3: Can be traversed by both Alice and Bob.</li>\n</ul>\n\n<p>Given an array <code>edges</code> where <code>edges[i] = [type<sub>i</sub>, u<sub>i</sub>, v<sub>i</sub>]</code> represents a bidirectional edge of type <code>type<sub>i</sub></code> between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.</p>\n\n<p>Return <em>the maximum number of edges you can remove, or return</em> <code>-1</code> <em>if Alice and Bob cannot fully traverse the graph.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/19/ex1.png\" style=\"width: 179px; height: 191px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/19/ex2.png\" style=\"width: 178px; height: 190px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>Notice that removing any edge will not make the graph fully traversable by Alice and Bob.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/19/ex3.png\" style=\"width: 178px; height: 190px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]\n<strong>Output:</strong> -1\n<b>Explanation: </b>In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it&#39;s impossible to make the graph fully traversable.</pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= edges.length &lt;= min(10<sup>5</sup>, 3 * n * (n - 1) / 2)</code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>1 &lt;= type<sub>i</sub> &lt;= 3</code></li>\n\t<li><code>1 &lt;= u<sub>i</sub> &lt; v<sub>i</sub> &lt;= n</code></li>\n\t<li>All tuples <code>(type<sub>i</sub>, u<sub>i</sub>, v<sub>i</sub>)</code> are distinct.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1978,
            "dislikes": 28,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"56.4K\", \"totalSubmission\": \"87.6K\", \"totalAcceptedRaw\": 56403, \"totalSubmissionRaw\": 87571, \"acRate\": \"64.4%\"}",
            "hints": [
                "Build the network instead of removing extra edges.",
                "Suppose you have the final graph (after removing extra edges). Consider the subgraph with only the edges that Alice can traverse. What structure does this subgraph have? How many edges are there?",
                "Use disjoint set union data structure for both Alice and Bob.",
                "Always use Type 3 edges first, and connect the still isolated ones using other edges."
            ],
            "rephrased": {
                "body": "Alice and Bob share an undirected graph with 'n' nodes and three types of edges:\n\n*   Type 1: Alice can traverse these edges only.\n*   Type 2: Bob can traverse these edges only.\n*   Type 3: Both Alice and Bob can traverse these edges.\n\nGiven an array 'edges' where 'edges[i] = [type<sub>i</sub>, u<sub>i</sub>, v<sub>i</sub>]' represents a bidirectional edge of type 'type<sub>i</sub>' between nodes 'u<sub>i</sub>' and 'v<sub>i</sub>', determine the maximum number of edges that can be removed while ensuring both Alice and Bob can still fully traverse the graph. A graph is fully traversable if, starting from any node, they can reach all other nodes.\n\nReturn the maximum number of removable edges. If Alice and Bob cannot fully traverse the graph, return -1.",
                "constraints": [
                    "1 <= n <= 10<sup>5</sup>",
                    "1 <= edges.length <= min(10<sup>5</sup>, 3 * n * (n - 1) / 2)",
                    "edges[i].length == 3",
                    "1 <= type<sub>i</sub> <= 3",
                    "1 <= u<sub>i</sub> < v<sub>i</sub> <= n",
                    "All tuples (type<sub>i</sub>, u<sub>i</sub>, v<sub>i</sub>) are distinct."
                ],
                "testcases": [
                    {
                        "input": "n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]",
                        "output": "2",
                        "explanation": "Removing the edges [1,1,2] and [1,1,3] allows Alice and Bob to fully traverse the graph. Removing any further edges would prevent full traversal. Hence, the maximum number of removable edges is 2."
                    },
                    {
                        "input": "n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]",
                        "output": "0",
                        "explanation": "Removing any edge would prevent full traversal of the graph by either Alice or Bob."
                    },
                    {
                        "input": "n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]",
                        "output": "-1",
                        "explanation": "Alice cannot reach node 4 from other nodes, and Bob cannot reach node 1. Therefore, it's impossible to make the graph fully traversable."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Build the network instead of removing extra edges.",
            "Suppose you have the final graph (after removing extra edges). Consider the subgraph with only the edges that Alice can traverse. What structure does this subgraph have? How many edges are there?",
            "Use disjoint set union data structure for both Alice and Bob.",
            "Always use Type 3 edges first, and connect the still isolated ones using other edges."
        ],
        "relatedTopics": [
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : count(n), id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  bool unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return false;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n    --count;\n    return true;\n  }\n\n  int getCount() const {\n    return count;\n  }\n\n private:\n  int count;\n  vector<int> id;\n  vector<int> rank;\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n};\n\nclass Solution {\n public:\n  int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {\n    UnionFind alice(n);\n    UnionFind bob(n);\n    int requiredEdges = 0;\n\n    // Greedily put type 3 edges in the front.\n    sort(\n        edges.begin(), edges.end(),\n        [](const vector<int>& a, const vector<int>& b) { return a[0] > b[0]; });\n\n    for (const vector<int>& edge : edges) {\n      const int type = edge[0];\n      const int u = edge[1] - 1;\n      const int v = edge[2] - 1;\n      switch (type) {\n        case 3:  // Can be traversed by Alice and Bob.\n          // Note that we should use | instead of || because if the first\n          // expression is true, short-circuiting will skip the second\n          // expression.\n          if (alice.unionByRank(u, v) | bob.unionByRank(u, v))\n            ++requiredEdges;\n          break;\n        case 2:  // Can be traversed by Bob.\n          if (bob.unionByRank(u, v))\n            ++requiredEdges;\n        case 1:  // Can be traversed by Alice.\n          if (alice.unionByRank(u, v))\n            ++requiredEdges;\n      }\n    }\n\n    return alice.getCount() == 1 && bob.getCount() == 1\n               ? edges.size() - requiredEdges\n               : -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    count = n;\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public boolean unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return false;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n    --count;\n    return true;\n  }\n\n  public int getCount() {\n    return count;\n  }\n\n  private int count;\n  private int[] id;\n  private int[] rank;\n\n  private int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n}\n\nclass Solution {\n  public int maxNumEdgesToRemove(int n, int[][] edges) {\n    UnionFind alice = new UnionFind(n);\n    UnionFind bob = new UnionFind(n);\n    int requiredEdges = 0;\n\n    // Greedily put type 3 edges in the front.\n    Arrays.sort(edges, (a, b) -> b[0] - a[0]);\n\n    for (int[] edge : edges) {\n      final int type = edge[0];\n      final int u = edge[1] - 1;\n      final int v = edge[2] - 1;\n      switch (type) {\n        case 3: // Can be traversed by Alice and Bob.\n          // Note that we should use | instead of || because if the first\n          // expression is true, short-circuiting will skip the second\n          // expression.\n          if (alice.unionByRank(u, v) | bob.unionByRank(u, v))\n            ++requiredEdges;\n          break;\n        case 2: // Can be traversed by Bob.\n          if (bob.unionByRank(u, v))\n            ++requiredEdges;\n        case 1: // Can be traversed by Alice.\n          if (alice.unionByRank(u, v))\n            ++requiredEdges;\n      }\n    }\n\n    return alice.getCount() == 1 && bob.getCount() == 1 ? edges.length - requiredEdges : -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.count = n\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> bool:\n    i = self._find(u)\n    j = self._find(v)\n    if i == j:\n      return False\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n    self.count -= 1\n    return True\n\n  def _find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self._find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def maxNumEdgesToRemove(self, n: int, edges: List[List[int]]) -> int:\n    alice = UnionFind(n)\n    bob = UnionFind(n)\n    requiredEdges = 0\n\n    # Greedily put type 3 edges in the front.\n    for type, u, v in sorted(edges, reverse=True):\n      u -= 1\n      v -= 1\n      if type == 3:  # Can be traversed by Alice and Bob.\n          # Note that we should use | instead of or because if the first\n          # expression is True, short-circuiting will skip the second\n          # expression.\n        if alice.unionByRank(u, v) | bob.unionByRank(u, v):\n          requiredEdges += 1\n      elif type == 2:  # Can be traversed by Bob.\n        if bob.unionByRank(u, v):\n          requiredEdges += 1\n      else:  # type == 1 Can be traversed by Alice.\n        if alice.unionByRank(u, v):\n          requiredEdges += 1\n\n    return len(edges) - requiredEdges \\\n        if alice.count == 1 and bob.count == 1 \\\n        else -1\n",
                "lang_text": "py"
            }
        }
    }
}