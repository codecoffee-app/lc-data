{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2487",
            "title": "Remove Nodes From Linked List",
            "titleSlug": "remove-nodes-from-linked-list",
            "content": "<p>You are given the <code>head</code> of a linked list.</p>\n\n<p>Remove every node which has a node with a greater value anywhere to the right side of it.</p>\n\n<p>Return <em>the </em><code>head</code><em> of the modified linked list.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/02/drawio.png\" style=\"width: 631px; height: 51px;\" />\n<pre>\n<strong>Input:</strong> head = [5,2,13,3,8]\n<strong>Output:</strong> [13,8]\n<strong>Explanation:</strong> The nodes that should be removed are 5, 2 and 3.\n- Node 13 is to the right of node 5.\n- Node 13 is to the right of node 2.\n- Node 8 is to the right of node 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1,1,1,1]\n<strong>Output:</strong> [1,1,1,1]\n<strong>Explanation:</strong> Every node has value 1, so no nodes are removed.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the given list is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1267,
            "dislikes": 33,
            "similarQuestions": "[{\"title\": \"Reverse Linked List\", \"titleSlug\": \"reverse-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Delete Node in a Linked List\", \"titleSlug\": \"delete-node-in-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Next Greater Element I\", \"titleSlug\": \"next-greater-element-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"50.4K\", \"totalSubmission\": \"76.7K\", \"totalAcceptedRaw\": 50433, \"totalSubmissionRaw\": 76746, \"acRate\": \"65.7%\"}",
            "hints": [
                "Iterate on nodes in reversed order.",
                "When iterating in reversed order, save the maximum value that was passed before."
            ],
            "rephrased": {
                "body": "Given the head of a singly linked list, remove all nodes that have a node with a greater value to its right. Return the head of the modified linked list.",
                "constraints": [
                    "The number of nodes in the list is between 1 and 10^5 (inclusive).",
                    "The value of each node is between 1 and 10^5 (inclusive)."
                ],
                "testcases": [
                    {
                        "input": "[5,2,13,3,8]",
                        "output": "[13,8]",
                        "explanation": "Nodes 5, 2, and 3 are removed because there are nodes with greater values to their right. Specifically, 13 is to the right of 5 and 2, and 8 is to the right of 3."
                    },
                    {
                        "input": "[1,1,1,1]",
                        "output": "[1,1,1,1]",
                        "explanation": "Since all nodes have the same value, no nodes are removed as there is no node to the right with a greater value."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "reverse-linked-list",
                "title": "Reverse Linked List",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "delete-node-in-a-linked-list",
                "title": "Delete Node in a Linked List",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "next-greater-element-i",
                "title": "Next Greater Element I",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Iterate on nodes in reversed order.",
            "When iterating in reversed order, save the maximum value that was passed before."
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  ListNode* removeNodes(ListNode* head) {\n    if (head == nullptr)\n      return nullptr;\n    head->next = removeNodes(head->next);\n    return head->next != nullptr && head->val < head->next->val ? head->next\n                                                                : head;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public ListNode removeNodes(ListNode head) {\n    if (head == null)\n      return null;\n    head.next = removeNodes(head.next);\n    return head.next != null && head.val < head.next.val ? head.next : head;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:\n    if not head:\n      return None\n    head.next = self.removeNodes(head.next)\n    return head.next if head.next and head.val < head.next.val else head\n",
                "lang_text": "py"
            }
        }
    }
}