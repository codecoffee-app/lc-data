{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1021",
            "title": "Remove Outermost Parentheses",
            "titleSlug": "remove-outermost-parentheses",
            "content": "<p>A valid parentheses string is either empty <code>&quot;&quot;</code>, <code>&quot;(&quot; + A + &quot;)&quot;</code>, or <code>A + B</code>, where <code>A</code> and <code>B</code> are valid parentheses strings, and <code>+</code> represents string concatenation.</p>\n\n<ul>\n\t<li>For example, <code>&quot;&quot;</code>, <code>&quot;()&quot;</code>, <code>&quot;(())()&quot;</code>, and <code>&quot;(()(()))&quot;</code> are all valid parentheses strings.</li>\n</ul>\n\n<p>A valid parentheses string <code>s</code> is primitive if it is nonempty, and there does not exist a way to split it into <code>s = A + B</code>, with <code>A</code> and <code>B</code> nonempty valid parentheses strings.</p>\n\n<p>Given a valid parentheses string <code>s</code>, consider its primitive decomposition: <code>s = P<sub>1</sub> + P<sub>2</sub> + ... + P<sub>k</sub></code>, where <code>P<sub>i</sub></code> are primitive valid parentheses strings.</p>\n\n<p>Return <code>s</code> <em>after removing the outermost parentheses of every primitive string in the primitive decomposition of </em><code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(()())(())&quot;\n<strong>Output:</strong> &quot;()()()&quot;\n<strong>Explanation:</strong> \nThe input string is &quot;(()())(())&quot;, with primitive decomposition &quot;(()())&quot; + &quot;(())&quot;.\nAfter removing outer parentheses of each part, this is &quot;()()&quot; + &quot;()&quot; = &quot;()()()&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(()())(())(()(()))&quot;\n<strong>Output:</strong> &quot;()()()()(())&quot;\n<strong>Explanation:</strong> \nThe input string is &quot;(()())(())(()(()))&quot;, with primitive decomposition &quot;(()())&quot; + &quot;(())&quot; + &quot;(()(()))&quot;.\nAfter removing outer parentheses of each part, this is &quot;()()&quot; + &quot;()&quot; + &quot;()(())&quot; = &quot;()()()()(())&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()()&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> \nThe input string is &quot;()()&quot;, with primitive decomposition &quot;()&quot; + &quot;()&quot;.\nAfter removing outer parentheses of each part, this is &quot;&quot; + &quot;&quot; = &quot;&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;(&#39;</code> or <code>&#39;)&#39;</code>.</li>\n\t<li><code>s</code> is a valid parentheses string.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2673,
            "dislikes": 1534,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"270.9K\", \"totalSubmission\": \"330.7K\", \"totalAcceptedRaw\": 270917, \"totalSubmissionRaw\": 330715, \"acRate\": \"81.9%\"}",
            "hints": [
                "Can you find the primitive decomposition?  The number of ( and ) characters must be equal."
            ],
            "rephrased": {
                "body": "Given a valid parentheses string `s`, decompose it into its primitive components. A valid parentheses string is either empty, `(A)`, or `A + B`, where A and B are valid parentheses strings. A primitive string is a non-empty valid parentheses string that cannot be split into two non-empty valid parentheses strings. Return the string `s` after removing the outermost parentheses of each primitive string in the decomposition.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s[i] is either '(' or ')'.",
                    "s is a valid parentheses string."
                ],
                "testcases": [
                    {
                        "input": "(()())(())",
                        "output": "()()()",
                        "explanation": "The primitive decomposition is (()()) + (()). Removing the outermost parentheses results in ()() + () = ()()()."
                    },
                    {
                        "input": "(()())(())(()(()))",
                        "output": "()()()()(())",
                        "explanation": "The primitive decomposition is (()()) + (()) + (()(())) . Removing the outermost parentheses gives ()() + () + ()(()) = ()()()()(())"
                    },
                    {
                        "input": "()()",
                        "output": "",
                        "explanation": "The primitive decomposition is () + (). Removing the outermost parentheses results in empty string + empty string = empty string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can you find the primitive decomposition?  The number of ( and ) characters must be equal."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string removeOuterParentheses(string s) {\n    string ans;\n    int opened = 0;\n\n    for (const char c : s)\n      if (c == '(') {\n        if (++opened > 1)\n          ans += c;\n      } else if (--opened > 0) {  // c == ')'\n        ans += c;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String removeOuterParentheses(String s) {\n    StringBuilder sb = new StringBuilder();\n    int opened = 0;\n\n    for (final char c : s.toCharArray())\n      if (c == '(') {\n        if (++opened > 1)\n          sb.append(c);\n      } else if (--opened > 0) { // c == ')'\n        sb.append(c);\n      }\n\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def removeOuterParentheses(self, s: str) -> str:\n    ans = []\n    opened = 0\n\n    for c in s:\n      if c == '(':\n        opened += 1\n        if opened > 1:\n          ans.append(c)\n      else:  # c == ')'\n        opened -= 1\n        if opened > 0:\n          ans.append(c)\n\n    return ''.join(ans)\n",
                "lang_text": "py"
            }
        }
    }
}