{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1962",
            "title": "Remove Stones to Minimize the Total",
            "titleSlug": "remove-stones-to-minimize-the-total",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>piles</code>, where <code>piles[i]</code> represents the number of stones in the <code>i<sup>th</sup></code> pile, and an integer <code>k</code>. You should apply the following operation <strong>exactly</strong> <code>k</code> times:</p>\n\n<ul>\n\t<li>Choose any <code>piles[i]</code> and <strong>remove</strong> <code>floor(piles[i] / 2)</code> stones from it.</li>\n</ul>\n\n<p><strong>Notice</strong> that you can apply the operation on the <strong>same</strong> pile more than once.</p>\n\n<p>Return <em>the <strong>minimum</strong> possible total number of stones remaining after applying the </em><code>k</code><em> operations</em>.</p>\n\n<p><code>floor(x)</code> is the <b>greatest</b> integer that is <strong>smaller</strong> than or <strong>equal</strong> to <code>x</code> (i.e., rounds <code>x</code> down).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [5,4,9], k = 2\n<strong>Output:</strong> 12\n<strong>Explanation:</strong>&nbsp;Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [5,4,<u>5</u>].\n- Apply the operation on pile 0. The resulting piles are [<u>3</u>,4,5].\nThe total number of stones in [3,4,5] is 12.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [4,3,6,7], k = 3\n<strong>Output:</strong> 12\n<strong>Explanation:</strong>&nbsp;Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [4,3,<u>3</u>,7].\n- Apply the operation on pile 3. The resulting piles are [4,3,3,<u>4</u>].\n- Apply the operation on pile 0. The resulting piles are [<u>2</u>,3,3,4].\nThe total number of stones in [2,3,3,4] is 12.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= piles.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= piles[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1754,
            "dislikes": 146,
            "similarQuestions": "[{\"title\": \"Minimum Operations to Halve Array Sum\", \"titleSlug\": \"minimum-operations-to-halve-array-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximal Score After Applying K Operations\", \"titleSlug\": \"maximal-score-after-applying-k-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Take Gifts From the Richest Pile\", \"titleSlug\": \"take-gifts-from-the-richest-pile\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"90.2K\", \"totalSubmission\": \"146.9K\", \"totalAcceptedRaw\": 90185, \"totalSubmissionRaw\": 146927, \"acRate\": \"61.4%\"}",
            "hints": [
                "Choose the pile with the maximum number of stones each time.",
                "Use a data structure that helps you find the mentioned pile each time efficiently.",
                "One such data structure is a Priority Queue."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `piles`, where `piles[i]` represents the number of stones in the i-th pile, and an integer `k`, you are allowed to perform the following operation exactly `k` times:\n\nChoose any `piles[i]` and remove `floor(piles[i] / 2)` stones from it.\n\nNote that you can apply the operation on the same pile more than once.\n\nReturn the minimum possible total number of stones remaining after applying the `k` operations.",
                "constraints": [
                    "1 <= piles.length <= 10^5",
                    "1 <= piles[i] <= 10^4",
                    "1 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "piles = [5,4,9], k = 2",
                        "output": "12",
                        "explanation": "One possible sequence of operations is: Apply the operation on pile 2 (piles[2] = 9). The resulting piles are [5, 4, 5]. Apply the operation on pile 0 (piles[0] = 5). The resulting piles are [3, 4, 5]. The total number of stones in [3, 4, 5] is 12."
                    },
                    {
                        "input": "piles = [4,3,6,7], k = 3",
                        "output": "12",
                        "explanation": "One possible sequence of operations is: Apply the operation on pile 2 (piles[2] = 6). The resulting piles are [4, 3, 3, 7]. Apply the operation on pile 3 (piles[3] = 7). The resulting piles are [4, 3, 3, 4]. Apply the operation on pile 0 (piles[0] = 4). The resulting piles are [2, 3, 3, 4]. The total number of stones in [2, 3, 3, 4] is 12."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-halve-array-sum",
                "title": "Minimum Operations to Halve Array Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximal-score-after-applying-k-operations",
                "title": "Maximal Score After Applying K Operations",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "take-gifts-from-the-richest-pile",
                "title": "Take Gifts From the Richest Pile",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Choose the pile with the maximum number of stones each time.",
            "Use a data structure that helps you find the mentioned pile each time efficiently.",
            "One such data structure is a Priority Queue."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minStoneSum(vector<int>& piles, int k) {\n    int ans = accumulate(piles.begin(), piles.end(), 0);\n    priority_queue<int> maxHeap;\n\n    for (const int pile : piles)\n      maxHeap.push(pile);\n\n    for (int i = 0; i < k; ++i) {\n      const int maxPile = maxHeap.top();\n      maxHeap.pop();\n      maxHeap.push(maxPile - maxPile / 2);\n      ans -= maxPile / 2;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minStoneSum(int[] piles, int k) {\n    int ans = Arrays.stream(piles).sum();\n    Queue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n    for (final int pile : piles)\n      maxHeap.offer(pile);\n\n    for (int i = 0; i < k; ++i) {\n      final int maxPile = maxHeap.poll();\n      maxHeap.offer(maxPile - maxPile / 2);\n      ans -= maxPile / 2;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minStoneSum(self, piles: List[int], k: int) -> int:\n    maxHeap = [-pile for pile in piles]\n    heapq.heapify(maxHeap)\n\n    for _ in range(k):\n      heapq.heapreplace(maxHeap, maxHeap[0] // 2)\n\n    return -sum(maxHeap)\n",
                "lang_text": "py"
            }
        }
    }
}