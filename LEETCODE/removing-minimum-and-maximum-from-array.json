{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2091",
            "title": "Removing Minimum and Maximum From Array",
            "titleSlug": "removing-minimum-and-maximum-from-array",
            "content": "<p>You are given a <strong>0-indexed</strong> array of <strong>distinct</strong> integers <code>nums</code>.</p>\n\n<p>There is an element in <code>nums</code> that has the <strong>lowest</strong> value and an element that has the <strong>highest</strong> value. We call them the <strong>minimum</strong> and <strong>maximum</strong> respectively. Your goal is to remove <strong>both</strong> these elements from the array.</p>\n\n<p>A <strong>deletion</strong> is defined as either removing an element from the <strong>front</strong> of the array or removing an element from the <strong>back</strong> of the array.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of deletions it would take to remove <strong>both</strong> the minimum and maximum element from the array.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,<u><strong>10</strong></u>,7,5,4,<u><strong>1</strong></u>,8,6]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nThe minimum element in the array is nums[5], which is 1.\nThe maximum element in the array is nums[1], which is 10.\nWe can remove both the minimum and maximum by removing 2 elements from the front and 3 elements from the back.\nThis results in 2 + 3 = 5 deletions, which is the minimum number possible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,<u><strong>-4</strong></u>,<u><strong>19</strong></u>,1,8,-2,-3,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nThe minimum element in the array is nums[1], which is -4.\nThe maximum element in the array is nums[2], which is 19.\nWe can remove both the minimum and maximum by removing 3 elements from the front.\nThis results in only 3 deletions, which is the minimum number possible.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [<u><strong>101</strong></u>]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>  \nThere is only one element in the array, which makes it both the minimum and maximum element.\nWe can remove it with 1 deletion.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>The integers in <code>nums</code> are <strong>distinct</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 903,
            "dislikes": 47,
            "similarQuestions": "[{\"title\": \"Maximum Points You Can Obtain from Cards\", \"titleSlug\": \"maximum-points-you-can-obtain-from-cards\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Deletions to Make Character Frequencies Unique\", \"titleSlug\": \"minimum-deletions-to-make-character-frequencies-unique\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"37.8K\", \"totalSubmission\": \"69K\", \"totalAcceptedRaw\": 37783, \"totalSubmissionRaw\": 69033, \"acRate\": \"54.7%\"}",
            "hints": [
                "There can only be three scenarios for deletions such that both minimum and maximum elements are removed:",
                "Scenario 1: Both elements are removed by only deleting from the front.",
                "Scenario 2: Both elements are removed by only deleting from the back.",
                "Scenario 3: Delete from the front to remove one of the elements, and delete from the back to remove the other element.",
                "Compare which of the three scenarios results in the minimum number of moves."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `nums` of distinct integers, find the minimum number of deletions required to remove both the minimum and maximum elements from the array. A deletion can be performed either from the front or the back of the array.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-10^5 <= nums[i] <= 10^5",
                    "The integers in nums are distinct."
                ],
                "testcases": [
                    {
                        "input": "[2,10,7,5,4,1,8,6]",
                        "output": "5",
                        "explanation": "The minimum element is 1 (at index 5) and the maximum element is 10 (at index 1).  One optimal solution is to remove 2 elements from the front and 3 elements from the back, resulting in 2 + 3 = 5 deletions."
                    },
                    {
                        "input": "[0,-4,19,1,8,-2,-3,5]",
                        "output": "3",
                        "explanation": "The minimum element is -4 (at index 1) and the maximum element is 19 (at index 2). One optimal solution is to remove 3 elements from the front, resulting in 3 deletions."
                    },
                    {
                        "input": "[101]",
                        "output": "1",
                        "explanation": "There is only one element in the array, which is both the minimum and maximum. Removing it requires 1 deletion."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-points-you-can-obtain-from-cards",
                "title": "Maximum Points You Can Obtain from Cards",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-deletions-to-make-character-frequencies-unique",
                "title": "Minimum Deletions to Make Character Frequencies Unique",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "There can only be three scenarios for deletions such that both minimum and maximum elements are removed:",
            "Scenario 1: Both elements are removed by only deleting from the front.",
            "Scenario 2: Both elements are removed by only deleting from the back.",
            "Scenario 3: Delete from the front to remove one of the elements, and delete from the back to remove the other element.",
            "Compare which of the three scenarios results in the minimum number of moves."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumDeletions(vector<int>& nums) {\n    const int n = nums.size();\n    int a = min_element(nums.begin(), nums.end()) - nums.begin();\n    int b = max_element(nums.begin(), nums.end()) - nums.begin();\n    if (a > b)\n      swap(a, b);\n    return min({a + 1 + n - b, b + 1, n - a});\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumDeletions(int[] nums) {\n    final int n = nums.length;\n\n    int min = Integer.MAX_VALUE;\n    int max = Integer.MIN_VALUE;\n    int minIndex = -1;\n    int maxIndex = -1;\n\n    for (int i = 0; i < n; ++i) {\n      if (nums[i] < min) {\n        min = nums[i];\n        minIndex = i;\n      }\n      if (nums[i] > max) {\n        max = nums[i];\n        maxIndex = i;\n      }\n    }\n\n    final int a = Math.min(minIndex, maxIndex);\n    final int b = Math.max(minIndex, maxIndex);\n\n    // Min(delete from front and back,\n    //     delete from front,\n    //     delete from back)\n    return Math.min(a + 1 + n - b, Math.min(b + 1, n - a));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumDeletions(self, nums: List[int]) -> int:\n    n = len(nums)\n    a = nums.index(min(nums))\n    b = nums.index(max(nums))\n    if a > b:\n      a, b = b, a\n    return min(a + 1 + n - b, b + 1, n - a)\n",
                "lang_text": "py"
            }
        }
    }
}