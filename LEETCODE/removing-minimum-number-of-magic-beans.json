{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2171",
            "title": "Removing Minimum Number of Magic Beans",
            "titleSlug": "removing-minimum-number-of-magic-beans",
            "content": "<p>You are given an array of <strong>positive</strong> integers <code>beans</code>, where each integer represents the number of magic beans found in a particular magic bag.</p>\n\n<p><strong>Remove</strong> any number of beans (<strong>possibly none</strong>) from each bag such that the number of beans in each remaining <strong>non-empty</strong> bag (still containing <strong>at least one</strong> bean) is <strong>equal</strong>. Once a bean has been removed from a bag, you are <strong>not</strong> allowed to return it to any of the bags.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of magic beans that you have to remove</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> beans = [4,1,6,5]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \n- We remove 1 bean from the bag with only 1 bean.\n  This results in the remaining bags: [4,<strong><u>0</u></strong>,6,5]\n- Then we remove 2 beans from the bag with 6 beans.\n  This results in the remaining bags: [4,0,<strong><u>4</u></strong>,5]\n- Then we remove 1 bean from the bag with 5 beans.\n  This results in the remaining bags: [4,0,4,<strong><u>4</u></strong>]\nWe removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that remove 4 beans or fewer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> beans = [2,10,3,2]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong>\n- We remove 2 beans from one of the bags with 2 beans.\n  This results in the remaining bags: [<u><strong>0</strong></u>,10,3,2]\n- Then we remove 2 beans from the other bag with 2 beans.\n  This results in the remaining bags: [0,10,3,<u><strong>0</strong></u>]\n- Then we remove 3 beans from the bag with 3 beans. \n  This results in the remaining bags: [0,10,<u><strong>0</strong></u>,0]\nWe removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that removes 7 beans or fewer.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= beans.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= beans[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 828,
            "dislikes": 46,
            "similarQuestions": "[{\"title\": \"Minimum Moves to Equal Array Elements II\", \"titleSlug\": \"minimum-moves-to-equal-array-elements-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Reduce X to Zero\", \"titleSlug\": \"minimum-operations-to-reduce-x-to-zero\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.6K\", \"totalSubmission\": \"57.9K\", \"totalAcceptedRaw\": 24583, \"totalSubmissionRaw\": 57913, \"acRate\": \"42.4%\"}",
            "hints": [
                "Notice that if we choose to make x bags of beans empty, we should choose the x bags with the least amount of beans.",
                "Notice that if the minimum number of beans in a non-empty bag is m, then the best way to make all bags have an equal amount of beans is to reduce all the bags to have m beans.",
                "Can we iterate over how many bags we should remove and choose the one that minimizes the total amount of beans to remove?",
                "Sort the bags of beans first."
            ],
            "rephrased": {
                "body": "You are given an array of positive integers `beans`, where each integer represents the number of magic beans in a particular magic bag.  You can remove any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag is equal. You are not allowed to return beans to any of the bags once removed.  Return the minimum number of magic beans that you have to remove.",
                "constraints": [
                    "1 <= beans.length <= 10^5",
                    "1 <= beans[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[4,1,6,5]",
                        "output": "4",
                        "explanation": "We aim to equalize the remaining non-empty bags. If we choose to equalize to 4, we remove 1 from the bag with 1 bean, 2 from the bag with 6 beans, and 1 from the bag with 5 beans, resulting in a total of 1 + 2 + 1 = 4 beans removed. This is the minimum possible removal count."
                    },
                    {
                        "input": "[2,10,3,2]",
                        "output": "7",
                        "explanation": "We want to minimize the number of beans removed to equalize the remaining bags. If we choose to equalize to 2, we remove 2 from one of the bags with 2 beans, then remove 2 beans from the other bag with 2 beans. Then we remove 3 beans from the bag with 3 beans, giving a total of 2 + 2 + 3 = 7 beans removed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-moves-to-equal-array-elements-ii",
                "title": "Minimum Moves to Equal Array Elements II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-reduce-x-to-zero",
                "title": "Minimum Operations to Reduce X to Zero",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Notice that if we choose to make x bags of beans empty, we should choose the x bags with the least amount of beans.",
            "Notice that if the minimum number of beans in a non-empty bag is m, then the best way to make all bags have an equal amount of beans is to reduce all the bags to have m beans.",
            "Can we iterate over how many bags we should remove and choose the one that minimizes the total amount of beans to remove?",
            "Sort the bags of beans first."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumRemoval(vector<int>& beans) {\n    const long n = beans.size();\n    const long sum = accumulate(beans.begin(), beans.end(), 0L);\n    long ans = LONG_MAX;\n\n    std::ranges::sort(beans);\n\n    for (int i = 0; i < n; ++i)\n      ans = min(ans, sum - (n - i) * beans[i]);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minimumRemoval(int[] beans) {\n    final long n = beans.length;\n    final long sum = Arrays.stream(beans).asLongStream().sum();\n    long ans = Long.MAX_VALUE;\n\n    Arrays.sort(beans);\n\n    for (int i = 0; i < n; ++i)\n      ans = Math.min(ans, sum - (n - i) * beans[i]);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumRemoval(self, beans: List[int]) -> int:\n    n = len(beans)\n    summ = sum(beans)\n    return min(summ - (n - i) * bean\n               for i, bean in enumerate(sorted(beans)))\n",
                "lang_text": "py"
            }
        }
    }
}