{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2390",
            "title": "Removing Stars From a String",
            "titleSlug": "removing-stars-from-a-string",
            "content": "<p>You are given a string <code>s</code>, which contains stars <code>*</code>.</p>\n\n<p>In one operation, you can:</p>\n\n<ul>\n\t<li>Choose a star in <code>s</code>.</li>\n\t<li>Remove the closest <strong>non-star</strong> character to its <strong>left</strong>, as well as remove the star itself.</li>\n</ul>\n\n<p>Return <em>the string after <strong>all</strong> stars have been removed</em>.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>The input will be generated such that the operation is always possible.</li>\n\t<li>It can be shown that the resulting string will always be unique.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leet**cod*e&quot;\n<strong>Output:</strong> &quot;lecoe&quot;\n<strong>Explanation:</strong> Performing the removals from left to right:\n- The closest character to the 1<sup>st</sup> star is &#39;t&#39; in &quot;lee<strong><u>t</u></strong>**cod*e&quot;. s becomes &quot;lee*cod*e&quot;.\n- The closest character to the 2<sup>nd</sup> star is &#39;e&#39; in &quot;le<strong><u>e</u></strong>*cod*e&quot;. s becomes &quot;lecod*e&quot;.\n- The closest character to the 3<sup>rd</sup> star is &#39;d&#39; in &quot;leco<strong><u>d</u></strong>*e&quot;. s becomes &quot;lecoe&quot;.\nThere are no more stars, so we return &quot;lecoe&quot;.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;erase*****&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> The entire string is removed, so we return an empty string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters and stars <code>*</code>.</li>\n\t<li>The operation above can be performed on <code>s</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2671,
            "dislikes": 183,
            "similarQuestions": "[{\"title\": \"Backspace String Compare\", \"titleSlug\": \"backspace-string-compare\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Remove All Adjacent Duplicates In String\", \"titleSlug\": \"remove-all-adjacent-duplicates-in-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"219.9K\", \"totalSubmission\": \"297.2K\", \"totalAcceptedRaw\": 219900, \"totalSubmissionRaw\": 297164, \"acRate\": \"74.0%\"}",
            "hints": [
                "What data structure could we use to efficiently perform these removals?",
                "Use a stack to store the characters. Pop one character off the stack at each star. Otherwise, we push the character onto the stack."
            ],
            "rephrased": {
                "body": "You are given a string `s` containing lowercase English letters and stars `*`.  In each operation, you can select a star in `s` and remove it along with the closest non-star character to its left.  Your task is to return the string after all stars have been removed from `s`.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "`s` consists of lowercase English letters and stars `*`.",
                    "The operation can always be performed on `s`."
                ],
                "testcases": [
                    {
                        "input": "leet**cod*e",
                        "output": "lecoe",
                        "explanation": "The process unfolds as follows:\n1. 't' is removed due to the first star: \"leet**cod*e\" becomes \"lee*cod*e\".\n2. 'e' is removed due to the second star: \"lee*cod*e\" becomes \"lecod*e\".\n3. 'd' is removed due to the third star: \"lecod*e\" becomes \"lecoe\".\nTherefore, the final string is \"lecoe\"."
                    },
                    {
                        "input": "erase*****",
                        "output": "",
                        "explanation": "The entire string is removed because each star removes a character to its left. Hence, the output is an empty string."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "backspace-string-compare",
                "title": "Backspace String Compare",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "remove-all-adjacent-duplicates-in-string",
                "title": "Remove All Adjacent Duplicates In String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What data structure could we use to efficiently perform these removals?",
            "Use a stack to store the characters. Pop one character off the stack at each star. Otherwise, we push the character onto the stack."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string removeStars(string s) {\n    string ans;\n    for (const char c : s)\n      if (c == '*')\n        ans.pop_back();\n      else\n        ans.push_back(c);\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String removeStars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (final char c : s.toCharArray())\n      if (c == '*')\n        sb.deleteCharAt(sb.length() - 1);\n      else\n        sb.append(c);\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def removeStars(self, s: str) -> str:\n    ans = []\n    for c in s:\n      if c == '*':\n        ans.pop()\n      else:\n        ans.append(c)\n    return ''.join(ans)\n",
                "lang_text": "py"
            }
        }
    }
}