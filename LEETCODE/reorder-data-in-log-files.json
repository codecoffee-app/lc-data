{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "937",
            "title": "Reorder Data in Log Files",
            "titleSlug": "reorder-data-in-log-files",
            "content": "<p>You are given an array of <code>logs</code>. Each log is a space-delimited string of words, where the first word is the <strong>identifier</strong>.</p>\n\n<p>There are two types of logs:</p>\n\n<ul>\n\t<li><b>Letter-logs</b>: All words (except the identifier) consist of lowercase English letters.</li>\n\t<li><strong>Digit-logs</strong>: All words (except the identifier) consist of digits.</li>\n</ul>\n\n<p>Reorder these logs so that:</p>\n\n<ol>\n\t<li>The <strong>letter-logs</strong> come before all <strong>digit-logs</strong>.</li>\n\t<li>The <strong>letter-logs</strong> are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.</li>\n\t<li>The <strong>digit-logs</strong> maintain their relative ordering.</li>\n</ol>\n\n<p>Return <em>the final order of the logs</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> logs = [&quot;dig1 8 1 5 1&quot;,&quot;let1 art can&quot;,&quot;dig2 3 6&quot;,&quot;let2 own kit dig&quot;,&quot;let3 art zero&quot;]\n<strong>Output:</strong> [&quot;let1 art can&quot;,&quot;let3 art zero&quot;,&quot;let2 own kit dig&quot;,&quot;dig1 8 1 5 1&quot;,&quot;dig2 3 6&quot;]\n<strong>Explanation:</strong>\nThe letter-log contents are all different, so their ordering is &quot;art can&quot;, &quot;art zero&quot;, &quot;own kit dig&quot;.\nThe digit-logs have a relative order of &quot;dig1 8 1 5 1&quot;, &quot;dig2 3 6&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> logs = [&quot;a1 9 2 3 1&quot;,&quot;g1 act car&quot;,&quot;zo4 4 7&quot;,&quot;ab1 off key dog&quot;,&quot;a8 act zoo&quot;]\n<strong>Output:</strong> [&quot;g1 act car&quot;,&quot;a8 act zoo&quot;,&quot;ab1 off key dog&quot;,&quot;a1 9 2 3 1&quot;,&quot;zo4 4 7&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= logs.length &lt;= 100</code></li>\n\t<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>\n\t<li>All the tokens of <code>logs[i]</code> are separated by a <strong>single</strong> space.</li>\n\t<li><code>logs[i]</code> is guaranteed to have an identifier and at least one word after the identifier.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2054,
            "dislikes": 4361,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"353.2K\", \"totalSubmission\": \"626.8K\", \"totalAcceptedRaw\": 353213, \"totalSubmissionRaw\": 626765, \"acRate\": \"56.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.\n\nThere are two types of logs:\n\nLetter-logs: All words (except the identifier) consist of lowercase English letters.\nDigit-logs: All words (except the identifier) consist of digits.\n\nReorder the logs so that:\n\nThe letter-logs come before all digit-logs.\nThe letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.\nThe digit-logs maintain their relative ordering.\n\nReturn the final order of the logs.",
                "constraints": [
                    "1 <= logs.length <= 100",
                    "3 <= logs[i].length <= 100",
                    "All the tokens of logs[i] are separated by a single space.",
                    "logs[i] is guaranteed to have an identifier and at least one word after the identifier."
                ],
                "testcases": [
                    {
                        "input": "[\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]",
                        "output": "[\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]",
                        "explanation": "The letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\". The digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\"."
                    },
                    {
                        "input": "[\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]",
                        "output": "[\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> reorderLogFiles(vector<string>& logs) {\n    vector<string> ans;\n    vector<string> digitLogs;\n    vector<pair<string, string>> letterLogs;\n\n    for (const string& log : logs) {\n      const int i = log.find_first_of(' ');\n      if (isdigit(log[i + 1]))\n        digitLogs.push_back(log);\n      else\n        letterLogs.emplace_back(log.substr(0, i), log.substr(i + 1));\n    }\n\n    sort(letterLogs.begin(), letterLogs.end(),\n         [](const auto& a, const auto& b) {\n      return a.second == b.second ? a.first < b.first : a.second < b.second;\n    });\n\n    for (const auto& [identifier, letters] : letterLogs)\n      ans.push_back(identifier + ' ' + letters);\n\n    for (const string& digitLog : digitLogs)\n      ans.push_back(digitLog);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String[] reorderLogFiles(String[] logs) {\n    List<String> ans = new ArrayList<>();\n    List<String> digitLogs = new ArrayList<>();\n    List<String[]> letterLogs = new ArrayList<>();\n\n    for (final String log : logs) {\n      final int i = log.indexOf(' ');\n      if (Character.isDigit(log.charAt(i + 1)))\n        digitLogs.add(log);\n      else\n        letterLogs.add(new String[] {log.substring(0, i), log.substring(i + 1)});\n    }\n\n    Collections.sort(letterLogs, new Comparator<String[]>() {\n      @Override\n      public int compare(String[] l1, String[] l2) {\n        return l1[1].compareTo(l2[1]) == 0 ? l1[0].compareTo(l2[0]) : l1[1].compareTo(l2[1]);\n      }\n    });\n\n    for (String[] letterLog : letterLogs)\n      ans.add(letterLog[0] + \" \" + letterLog[1]);\n\n    for (final String digitLog : digitLogs)\n      ans.add(digitLog);\n\n    return ans.toArray(new String[0]);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def reorderLogFiles(self, logs: List[str]) -> List[str]:\n    digitLogs = []\n    letterLogs = []\n\n    for log in logs:\n      i = log.index(' ')\n      if log[i + 1].isdigit():\n        digitLogs.append(log)\n      else:\n        letterLogs.append((log[:i], log[i + 1:]))\n\n    letterLogs.sort(key=lambda l: (l[1], l[0]))\n\n    return [identifier + ' ' + letters for identifier, letters in letterLogs] + digitLogs\n",
                "lang_text": "py"
            }
        }
    }
}