{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "869",
            "title": "Reordered Power of 2",
            "titleSlug": "reordered-power-of-2",
            "content": "<p>You are given an integer <code>n</code>. We reorder the digits in any order (including the original order) such that the leading digit is not zero.</p>\n\n<p>Return <code>true</code> <em>if and only if we can do this so that the resulting number is a power of two</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2089,
            "dislikes": 431,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"110.6K\", \"totalSubmission\": \"175.7K\", \"totalAcceptedRaw\": 110582, \"totalSubmissionRaw\": 175708, \"acRate\": \"62.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer `n`, determine if it's possible to reorder its digits (without leading zeros) to form a power of two.",
                "constraints": [
                    "1 <= n <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "true",
                        "explanation": null
                    },
                    {
                        "input": "10",
                        "output": "false",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Counting",
                "slug": "counting"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool reorderedPowerOf2(int n) {\n    int count = counter(n);\n\n    for (int i = 0; i < 30; ++i)\n      if (counter(1 << i) == count)\n        return true;\n\n    return false;\n  }\n\n private:\n  int counter(int n) {\n    int count = 0;\n\n    for (; n > 0; n /= 10)\n      count += pow(10, n % 10);\n\n    return count;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean reorderedPowerOf2(int n) {\n    int count = counter(n);\n\n    for (int i = 0; i < 30; ++i)\n      if (counter(1 << i) == count)\n        return true;\n\n    return false;\n  }\n\n  private int counter(int n) {\n    int count = 0;\n\n    for (; n > 0; n /= 10)\n      count += Math.pow(10, n % 10);\n\n    return count;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def reorderedPowerOf2(self, n: int) -> bool:\n    count = collections.Counter(str(n))\n    return any(Counter(str(1 << i)) == count for i in range(30))\n",
                "lang_text": "py"
            }
        }
    }
}