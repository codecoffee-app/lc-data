{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "767",
            "title": "Reorganize String",
            "titleSlug": "reorganize-string",
            "content": "<p>Given a string <code>s</code>, rearrange the characters of <code>s</code> so that any two adjacent characters are not the same.</p>\n\n<p>Return <em>any possible rearrangement of</em> <code>s</code> <em>or return</em> <code>&quot;&quot;</code> <em>if not possible</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"aab\"\n<strong>Output:</strong> \"aba\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"aaab\"\n<strong>Output:</strong> \"\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8201,
            "dislikes": 240,
            "similarQuestions": "[{\"title\": \"Rearrange String k Distance Apart\", \"titleSlug\": \"rearrange-string-k-distance-apart\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Task Scheduler\", \"titleSlug\": \"task-scheduler\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Happy String\", \"titleSlug\": \"longest-happy-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"356.3K\", \"totalSubmission\": \"655.3K\", \"totalAcceptedRaw\": 356283, \"totalSubmissionRaw\": 655307, \"acRate\": \"54.4%\"}",
            "hints": [
                "Alternate placing the most common letters."
            ],
            "rephrased": {
                "body": "Rearrange the characters of a given string `s` such that no two adjacent characters are the same. Return any possible rearrangement of `s`. If no such rearrangement is possible, return an empty string.",
                "constraints": [
                    "1 <= s.length <= 500",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "aab",
                        "output": "aba",
                        "explanation": null
                    },
                    {
                        "input": "aaab",
                        "output": "",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "rearrange-string-k-distance-apart",
                "title": "Rearrange String k Distance Apart",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "task-scheduler",
                "title": "Task Scheduler",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-happy-string",
                "title": "Longest Happy String",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Alternate placing the most common letters."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string reorganizeString(string s) {\n    unordered_map<char, int> count;\n    int maxFreq = 0;\n\n    for (const char c : s)\n      maxFreq = max(maxFreq, ++count[c]);\n\n    if (maxFreq > (s.length() + 1) / 2)\n      return \"\";\n\n    string ans;\n    priority_queue<pair<int, char>> maxHeap;  // (freq, c)\n    int prevFreq = 0;\n    char prevChar = '@';\n\n    for (const auto& [c, freq] : count)\n      maxHeap.emplace(freq, c);\n\n    while (!maxHeap.empty()) {\n      // Get the most freq letter.\n      const auto [freq, c] = maxHeap.top();\n      maxHeap.pop();\n      ans += c;\n      // Add the previous letter back so that any two adjacent characters are\n      // not the same.\n      if (prevFreq > 0)\n        maxHeap.emplace(prevFreq, prevChar);\n      prevFreq = freq - 1;\n      prevChar = c;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public String reorganizeString(String s) {\n    Map<Character, Integer> count = new HashMap<>();\n    int maxFreq = 0;\n\n    for (final char c : s.toCharArray())\n      maxFreq = Math.max(maxFreq, count.merge(c, 1, Integer::sum));\n\n    if (maxFreq > (s.length() + 1) / 2)\n      return \"\";\n\n    StringBuilder sb = new StringBuilder();\n    // (freq, c)\n    Queue<Pair<Integer, Character>> maxHeap =\n        new PriorityQueue<>((a, b) -> b.getKey() - a.getKey());\n    int prevFreq = 0;\n    char prevChar = '@';\n\n    for (final char c : count.keySet())\n      maxHeap.offer(new Pair<>(count.get(c), c));\n\n    while (!maxHeap.isEmpty()) {\n      // Get the most freq letter.\n      final int freq = maxHeap.peek().getKey();\n      final char c = maxHeap.poll().getValue();\n      sb.append(c);\n      // Add the previous letter back so that any two adjacent characters are\n      // not the same.\n      if (prevFreq > 0)\n        maxHeap.offer(new Pair<>(prevFreq, prevChar));\n      prevFreq = freq - 1;\n      prevChar = c;\n    }\n\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def reorganizeString(self, s: str) -> str:\n    count = collections.Counter(s)\n    if max(count.values()) > (len(s) + 1) // 2:\n      return ''\n\n    ans = []\n    maxHeap = [(-freq, c) for c, freq in count.items()]\n    heapq.heapify(maxHeap)\n    prevFreq = 0\n    prevChar = '@'\n\n    while maxHeap:\n      # Get the most freq letter.\n      freq, c = heapq.heappop(maxHeap)\n      ans.append(c)\n      # Add the previous letter back so that any two adjacent characters are not\n      # the same.\n      if prevFreq < 0:\n        heapq.heappush(maxHeap, (prevFreq, prevChar))\n      prevFreq = freq + 1\n      prevChar = c\n\n    return ''.join(ans)\n",
                "lang_text": "py"
            }
        }
    }
}