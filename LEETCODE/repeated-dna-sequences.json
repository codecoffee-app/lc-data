{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "187",
            "title": "Repeated DNA Sequences",
            "titleSlug": "repeated-dna-sequences",
            "content": "<p>The <strong>DNA sequence</strong> is composed of a series of nucleotides abbreviated as <code>&#39;A&#39;</code>, <code>&#39;C&#39;</code>, <code>&#39;G&#39;</code>, and <code>&#39;T&#39;</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;ACGAATTCCG&quot;</code> is a <strong>DNA sequence</strong>.</li>\n</ul>\n\n<p>When studying <strong>DNA</strong>, it is useful to identify repeated sequences within the DNA.</p>\n\n<p>Given a string <code>s</code> that represents a <strong>DNA sequence</strong>, return all the <strong><code>10</code>-letter-long</strong> sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n<strong>Output:</strong> [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"AAAAAAAAAAAAA\"\n<strong>Output:</strong> [\"AAAAAAAAAA\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;A&#39;</code>, <code>&#39;C&#39;</code>, <code>&#39;G&#39;</code>, or <code>&#39;T&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3199,
            "dislikes": 512,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"355.4K\", \"totalSubmission\": \"737.7K\", \"totalAcceptedRaw\": 355444, \"totalSubmissionRaw\": 737673, \"acRate\": \"48.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a DNA sequence represented by a string `s`, identify and return all 10-letter-long sequences (substrings) that appear more than once in the sequence. The DNA sequence consists of nucleotides 'A', 'C', 'G', and 'T'. The order of the returned sequences does not matter.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s[i] is either 'A', 'C', 'G', or 'T'"
                ],
                "testcases": [
                    {
                        "input": "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT",
                        "output": "['AAAAACCCCC','CCCCCAAAAA']",
                        "explanation": "The substrings 'AAAAACCCCC' and 'CCCCCAAAAA' both appear twice in the input string."
                    },
                    {
                        "input": "AAAAAAAAAAAAA",
                        "output": "['AAAAAAAAAA']",
                        "explanation": "The substring 'AAAAAAAAAA' appears multiple times in the input string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> findRepeatedDnaSequences(string s) {\n    unordered_set<string> ans;\n    unordered_set<string_view> seen;\n    const string_view sv(s);\n\n    for (int i = 0; i + 10 <= s.length(); ++i) {\n      if (seen.count(sv.substr(i, 10)))\n        ans.insert(s.substr(i, 10));\n      seen.insert(sv.substr(i, 10));\n    }\n\n    return {ans.begin(), ans.end()};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> findRepeatedDnaSequences(String s) {\n    Set<String> ans = new HashSet<>();\n    Set<String> seen = new HashSet<>();\n\n    for (int i = 0; i + 10 <= s.length(); ++i) {\n      final String seq = s.substring(i, i + 10);\n      if (seen.contains(seq))\n        ans.add(seq);\n      seen.add(seq);\n    }\n\n    return new ArrayList<>(ans);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findRepeatedDnaSequences(self, s: str) -> List[str]:\n    ans = set()\n    seen = set()\n\n    for i in range(len(s) - 9):\n      seq = s[i:i + 10]\n      if seq in seen:\n        ans.add(seq)\n      seen.add(seq)\n\n    return list(ans)\n",
                "lang_text": "py"
            }
        }
    }
}