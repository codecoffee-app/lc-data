{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2197",
            "title": "Replace Non-Coprime Numbers in Array",
            "titleSlug": "replace-non-coprime-numbers-in-array",
            "content": "<p>You are given an array of integers <code>nums</code>. Perform the following steps:</p>\n\n<ol>\n\t<li>Find <strong>any</strong> two <strong>adjacent</strong> numbers in <code>nums</code> that are <strong>non-coprime</strong>.</li>\n\t<li>If no such numbers are found, <strong>stop</strong> the process.</li>\n\t<li>Otherwise, delete the two numbers and <strong>replace</strong> them with their <strong>LCM (Least Common Multiple)</strong>.</li>\n\t<li><strong>Repeat</strong> this process as long as you keep finding two adjacent non-coprime numbers.</li>\n</ol>\n\n<p>Return <em>the <strong>final</strong> modified array.</em> It can be shown that replacing adjacent non-coprime numbers in <strong>any</strong> arbitrary order will lead to the same result.</p>\n\n<p>The test cases are generated such that the values in the final array are <strong>less than or equal</strong> to <code>10<sup>8</sup></code>.</p>\n\n<p>Two values <code>x</code> and <code>y</code> are <strong>non-coprime</strong> if <code>GCD(x, y) &gt; 1</code> where <code>GCD(x, y)</code> is the <strong>Greatest Common Divisor</strong> of <code>x</code> and <code>y</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,4,3,2,7,6,2]\n<strong>Output:</strong> [12,7,6]\n<strong>Explanation:</strong> \n- (6, 4) are non-coprime with LCM(6, 4) = 12. Now, nums = [<strong><u>12</u></strong>,3,2,7,6,2].\n- (12, 3) are non-coprime with LCM(12, 3) = 12. Now, nums = [<strong><u>12</u></strong>,2,7,6,2].\n- (12, 2) are non-coprime with LCM(12, 2) = 12. Now, nums = [<strong><u>12</u></strong>,7,6,2].\n- (6, 2) are non-coprime with LCM(6, 2) = 6. Now, nums = [12,7,<u><strong>6</strong></u>].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [12,7,6].\nNote that there are other ways to obtain the same resultant array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,1,1,3,3,3]\n<strong>Output:</strong> [2,1,1,3]\n<strong>Explanation:</strong> \n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,<u><strong>3</strong></u>,3].\n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,<u><strong>3</strong></u>].\n- (2, 2) are non-coprime with LCM(2, 2) = 2. Now, nums = [<u><strong>2</strong></u>,1,1,3].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [2,1,1,3].\nNote that there are other ways to obtain the same resultant array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>The test cases are generated such that the values in the final array are <strong>less than or equal</strong> to <code>10<sup>8</sup></code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 417,
            "dislikes": 12,
            "similarQuestions": "[{\"title\": \"Remove All Adjacent Duplicates in String II\", \"titleSlug\": \"remove-all-adjacent-duplicates-in-string-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Pairs of Interchangeable Rectangles\", \"titleSlug\": \"number-of-pairs-of-interchangeable-rectangles\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split the Array to Make Coprime Products\", \"titleSlug\": \"split-the-array-to-make-coprime-products\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"13.3K\", \"totalSubmission\": \"34.4K\", \"totalAcceptedRaw\": 13290, \"totalSubmissionRaw\": 34389, \"acRate\": \"38.6%\"}",
            "hints": [
                "Notice that the order of merging two numbers into their LCM does not matter so we can greedily merge elements to its left if possible.",
                "If a new value is formed, we should recursively check if it can be merged with the value to its left.",
                "To simulate the merge efficiently, we can maintain a stack that stores processed elements. When we iterate through the array, we only compare with the top of the stack (which is the value to its left)."
            ],
            "rephrased": {
                "body": "Given an array of integers `nums`, repeatedly merge adjacent non-coprime numbers until no more merges are possible.  Specifically, find any two adjacent numbers in `nums` whose greatest common divisor (GCD) is greater than 1.  If such numbers exist, delete them and replace them with their least common multiple (LCM). Repeat this process until no such adjacent non-coprime numbers can be found. Return the final modified array.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^5",
                    "The values in the final array are less than or equal to 10^8."
                ],
                "testcases": [
                    {
                        "input": "[6,4,3,2,7,6,2]",
                        "output": "[12,7,6]",
                        "explanation": "Initially, nums = [6,4,3,2,7,6,2]. 6 and 4 are non-coprime; replace with their LCM (12). nums becomes [12,3,2,7,6,2]. 12 and 3 are non-coprime; replace with their LCM (12). nums becomes [12,2,7,6,2]. 12 and 2 are non-coprime; replace with their LCM (12). nums becomes [12,7,6,2]. 6 and 2 are non-coprime; replace with their LCM (6). nums becomes [12,7,6]. No further merges are possible."
                    },
                    {
                        "input": "[2,2,1,1,3,3,3]",
                        "output": "[2,1,1,3]",
                        "explanation": "Initially, nums = [2,2,1,1,3,3,3]. 3 and 3 are non-coprime; replace with their LCM (3). nums becomes [2,2,1,1,3,3]. 3 and 3 are non-coprime; replace with their LCM (3). nums becomes [2,2,1,1,3]. 2 and 2 are non-coprime; replace with their LCM (2). nums becomes [2,1,1,3]. No further merges are possible."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "remove-all-adjacent-duplicates-in-string-ii",
                "title": "Remove All Adjacent Duplicates in String II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-pairs-of-interchangeable-rectangles",
                "title": "Number of Pairs of Interchangeable Rectangles",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "split-the-array-to-make-coprime-products",
                "title": "Split the Array to Make Coprime Products",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Notice that the order of merging two numbers into their LCM does not matter so we can greedily merge elements to its left if possible.",
            "If a new value is formed, we should recursively check if it can be merged with the value to its left.",
            "To simulate the merge efficiently, we can maintain a stack that stores processed elements. When we iterate through the array, we only compare with the top of the stack (which is the value to its left)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> replaceNonCoprimes(vector<int>& nums) {\n    vector<int> ans;\n\n    for (int num : nums) {\n      while (!ans.empty() && std::gcd(ans.back(), num) > 1)\n        num = std::lcm(ans.back(), num), ans.pop_back();\n      ans.push_back(num);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> replaceNonCoprimes(int[] nums) {\n    LinkedList<Integer> ans = new LinkedList<>();\n\n    for (int num : nums) {\n      while (!ans.isEmpty() && gcd(ans.getLast(), num) > 1)\n        num = lcm(ans.removeLast(), num);\n      ans.addLast(num);\n    }\n\n    return ans;\n  }\n\n  private int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n\n  private int lcm(int a, int b) {\n    return a * (b / gcd(a, b));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def replaceNonCoprimes(self, nums: List[int]) -> List[int]:\n    ans = []\n\n    for num in nums:\n      while ans and math.gcd(ans[-1], num) > 1:\n        num = math.lcm(ans.pop(), num)\n      ans.append(num)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}