{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3081",
            "title": "Replace Question Marks in String to Minimize Its Value",
            "titleSlug": "replace-question-marks-in-string-to-minimize-its-value",
            "content": "<p>You are given a string <code>s</code>. <code>s[i]</code> is either a lowercase English letter or <code>&#39;?&#39;</code>.</p>\n\n<p>For a string <code>t</code> having length <code>m</code> containing <strong>only</strong> lowercase English letters, we define the function <code>cost(i)</code> for an index <code>i</code>&nbsp;as the number of characters <strong>equal</strong> to <code>t[i]</code>&nbsp;that appeared before it, i.e. in the range <code>[0, i - 1]</code>.</p>\n\n<p>The <strong>value</strong> of <code>t</code> is the <strong>sum</strong> of <code>cost(i)</code> for all indices <code>i</code>.</p>\n\n<p>For example, for the string <code>t = &quot;aab&quot;</code>:</p>\n\n<ul>\n\t<li><code>cost(0) = 0</code></li>\n\t<li><code>cost(1) = 1</code></li>\n\t<li><code>cost(2) = 0</code></li>\n\t<li>Hence, the value of <code>&quot;aab&quot;</code> is <code>0 + 1 + 0 = 1</code>.</li>\n</ul>\n\n<p>Your task is to <strong>replace all</strong> occurrences of <code>&#39;?&#39;</code> in <code>s</code> with any lowercase English letter so that the <strong>value</strong> of <code>s</code> is <strong>minimized</strong>.</p>\n\n<p>Return <em>a string denoting the modified string with replaced occurrences of </em><code>&#39;?&#39;</code><em>. If there are multiple strings resulting in the <strong>minimum value</strong>, return the <span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest</span> one.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> s = &quot;???&quot; </span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\"> &quot;abc&quot; </span></p>\n\n<p><strong>Explanation: </strong> In this example, we can replace the occurrences of <code>&#39;?&#39;</code> to make <code>s</code> equal to <code>&quot;abc&quot;</code>.</p>\n\n<p>For <code>&quot;abc&quot;</code>, <code>cost(0) = 0</code>, <code>cost(1) = 0</code>, and <code>cost(2) = 0</code>.</p>\n\n<p>The value of <code>&quot;abc&quot;</code> is <code>0</code>.</p>\n\n<p>Some other modifications of <code>s</code> that have a value of <code>0</code> are <code>&quot;cba&quot;</code>, <code>&quot;abz&quot;</code>, and, <code>&quot;hey&quot;</code>.</p>\n\n<p>Among all of them, we choose the lexicographically smallest.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">s = &quot;a?a?&quot;</span></p>\n\n<p><strong>Output: </strong> <span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">&quot;abac&quot;</span></p>\n\n<p><strong>Explanation: </strong> In this example, the occurrences of <code>&#39;?&#39;</code> can be replaced to make <code>s</code> equal to <code>&quot;abac&quot;</code>.</p>\n\n<p>For <code>&quot;abac&quot;</code>, <code>cost(0) = 0</code>, <code>cost(1) = 0</code>, <code>cost(2) = 1</code>, and <code>cost(3) = 0</code>.</p>\n\n<p>The value of <code>&quot;abac&quot;</code> is&nbsp;<code>1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either a lowercase English letter or <code>&#39;?&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 155,
            "dislikes": 25,
            "similarQuestions": "[{\"title\": \"Lexicographically Smallest String After Substring Operation\", \"titleSlug\": \"lexicographically-smallest-string-after-substring-operation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.6K\", \"totalSubmission\": \"46.8K\", \"totalAcceptedRaw\": 12564, \"totalSubmissionRaw\": 46771, \"acRate\": \"26.9%\"}",
            "hints": [
                "<p>The cost does not depend on the order of characters. If a character <code>c</code> appears <code>x</code> times, the cost is exactly <code>0 + 1 + 2 + \u2026 + (x \u2212 1) = x * (x \u2212 1) / 2</code>.</p>",
                "<p>We know the total number of question marks; for each one, we should select the letter with the minimum frequency to replace it.</p>",
                "<p>The letter selection can be achieved by a min-heap (or even by brute-forcing the <code>26</code> possibilities).</p>",
                "<p>So, we know the extra letters we need to replace finally. However, we must put those letters in order from left to right so that the resulting string is the lexicographically smallest one.</p>"
            ],
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase English letters and '?', replace all '?' characters with lowercase English letters to minimize the value of the string. The value of a string `t` is defined as the sum of `cost(i)` for all indices `i`, where `cost(i)` is the number of characters equal to `t[i]` that appear before index `i` in `t`.  Return the lexicographically smallest string with the minimum value.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s[i] is either a lowercase English letter or '?'."
                ],
                "testcases": [
                    {
                        "input": "\"???\"",
                        "output": "\"abc\"",
                        "explanation": "Replacing the '?' characters with 'a', 'b', and 'c' results in the string \"abc\". For \"abc\", cost(0) = 0, cost(1) = 0, and cost(2) = 0. The value of \"abc\" is 0. Several other modifications of `s` that have a value of 0 are \"cba\", \"abz\", and \"hey\". Among all of them, we choose the lexicographically smallest."
                    },
                    {
                        "input": "\"a?a?\"",
                        "output": "\"abac\"",
                        "explanation": "Replacing the '?' characters with 'b' and 'c' results in the string \"abac\". For \"abac\", cost(0) = 0, cost(1) = 0, cost(2) = 1, and cost(3) = 0. The value of \"abac\" is 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "lexicographically-smallest-string-after-substring-operation",
                "title": "Lexicographically Smallest String After Substring Operation",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "<p>The cost does not depend on the order of characters. If a character <code>c</code> appears <code>x</code> times, the cost is exactly <code>0 + 1 + 2 + \u2026 + (x \u2212 1) = x * (x \u2212 1) / 2</code>.</p>",
            "<p>We know the total number of question marks; for each one, we should select the letter with the minimum frequency to replace it.</p>",
            "<p>The letter selection can be achieved by a min-heap (or even by brute-forcing the <code>26</code> possibilities).</p>",
            "<p>So, we know the extra letters we need to replace finally. However, we must put those letters in order from left to right so that the resulting string is the lexicographically smallest one.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string minimizeStringValue(string s) {\n    string ans;\n    vector<int> count(26);\n    vector<char> letters;\n\n    for (const char c : s)\n      if (c != '?')\n        ++count[c - 'a'];\n\n    for (const char c : s) {\n      if (c != '?')\n        continue;\n      const char minFreqLetter = getMinFreqLetter(count);\n      letters.push_back(minFreqLetter);\n      ++count[minFreqLetter - 'a'];\n    }\n\n    ranges::sort(letters);\n    int i = 0;  // letters' index\n\n    for (const char c : s)\n      ans += c == '?' ? letters[i++] : c;\n\n    return ans;\n  }\n\n private:\n  char getMinFreqLetter(const vector<int>& count) {\n    char minFreqLetter = 'a';\n    for (char c = 'b'; c <= 'z'; ++c)\n      if (count[c - 'a'] < count[minFreqLetter - 'a'])\n        minFreqLetter = c;\n    return minFreqLetter;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String minimizeStringValue(String s) {\n    StringBuilder sb = new StringBuilder();\n    int[] count = new int[26];\n    List<Character> letters = new ArrayList<>();\n\n    for (final char c : s.toCharArray())\n      if (c != '?')\n        ++count[c - 'a'];\n\n    for (final char c : s.toCharArray()) {\n      if (c != '?')\n        continue;\n      final char minFreqLetter = getMinFreqLetter(count);\n      letters.add(minFreqLetter);\n      ++count[minFreqLetter - 'a'];\n    }\n\n    Collections.sort(letters);\n    int i = 0; // letters' index\n\n    for (final char c : s.toCharArray())\n      sb.append(c == '?' ? letters.get(i++) : c);\n\n    return sb.toString();\n  }\n\n  private char getMinFreqLetter(int[] count) {\n    char minFreqLetter = 'a';\n    for (char c = 'b'; c <= 'z'; ++c)\n      if (count[c - 'a'] < count[minFreqLetter - 'a'])\n        minFreqLetter = c;\n    return minFreqLetter;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimizeStringValue(self, s: str) -> str:\n    ans = []\n    count = collections.Counter(s)\n    letters = []\n\n    del count['?']\n\n    def getMinFreqLetter(count: Dict[str, int]) -> str:\n      minFreqLetter = 'a'\n      for c in string.ascii_lowercase:\n        if count[c] < count[minFreqLetter]:\n          minFreqLetter = c\n      return minFreqLetter\n\n    for c in s:\n      if c == '?':\n        minFreqLetter = getMinFreqLetter(count)\n        letters.append(minFreqLetter)\n        count[minFreqLetter] += 1\n\n    letters.sort()\n    i = 0  # letters' index\n\n    for c in s:\n      if c == '?':\n        ans.append(letters[i])\n        i += 1\n      else:\n        ans.append(c)\n\n    return ''.join(ans)\n",
                "lang_text": "py"
            }
        }
    }
}