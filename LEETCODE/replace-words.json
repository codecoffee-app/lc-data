{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "648",
            "title": "Replace Words",
            "titleSlug": "replace-words",
            "content": "<p>In English, we have a concept called <strong>root</strong>, which can be followed by some other word to form another longer word - let&#39;s call this word <strong>successor</strong>. For example, when the <strong>root</strong> <code>&quot;an&quot;</code> is followed by the <strong>successor</strong> word <code>&quot;other&quot;</code>, we can form a new word <code>&quot;another&quot;</code>.</p>\n\n<p>Given a <code>dictionary</code> consisting of many <strong>roots</strong> and a <code>sentence</code> consisting of words separated by spaces, replace all the <strong>successors</strong> in the sentence with the <strong>root</strong> forming it. If a <strong>successor</strong> can be replaced by more than one <strong>root</strong>, replace it with the <strong>root</strong> that has <strong>the shortest length</strong>.</p>\n\n<p>Return <em>the <code>sentence</code></em> after the replacement.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dictionary = [&quot;cat&quot;,&quot;bat&quot;,&quot;rat&quot;], sentence = &quot;the cattle was rattled by the battery&quot;\n<strong>Output:</strong> &quot;the cat was rat by the bat&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dictionary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], sentence = &quot;aadsfasf absbs bbab cadsfafs&quot;\n<strong>Output:</strong> &quot;a a b c&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= dictionary.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li>\n\t<li><code>dictionary[i]</code> consists of only lower-case letters.</li>\n\t<li><code>1 &lt;= sentence.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>sentence</code> consists of only lower-case letters and spaces.</li>\n\t<li>The number of words in <code>sentence</code> is in the range <code>[1, 1000]</code></li>\n\t<li>The length of each word in <code>sentence</code> is in the range <code>[1, 1000]</code></li>\n\t<li>Every two consecutive words in <code>sentence</code> will be separated by exactly one space.</li>\n\t<li><code>sentence</code> does not have leading or trailing spaces.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2181,
            "dislikes": 172,
            "similarQuestions": "[{\"title\": \"Implement Trie (Prefix Tree)\", \"titleSlug\": \"implement-trie-prefix-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                }
            ],
            "stats": "{\"totalAccepted\": \"130.8K\", \"totalSubmission\": \"208.4K\", \"totalAcceptedRaw\": 130801, \"totalSubmissionRaw\": 208424, \"acRate\": \"62.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "In English, a 'root' is a word that can be followed by another word ('successor') to form a longer word (e.g., 'an' + 'other' = 'another'). Given a dictionary of roots and a sentence, replace each successor in the sentence with the shortest root that can form it. Return the modified sentence.",
                "constraints": [
                    "1 <= dictionary.length <= 1000",
                    "1 <= dictionary[i].length <= 100",
                    "dictionary[i] consists of only lower-case letters.",
                    "1 <= sentence.length <= 10^6",
                    "sentence consists of only lower-case letters and spaces.",
                    "The number of words in sentence is in the range [1, 1000]",
                    "The length of each word in sentence is in the range [1, 1000]",
                    "Every two consecutive words in sentence will be separated by exactly one space.",
                    "sentence does not have leading or trailing spaces."
                ],
                "testcases": [
                    {
                        "input": {
                            "dictionary": [
                                "cat",
                                "bat",
                                "rat"
                            ],
                            "sentence": "the cattle was rattled by the battery"
                        },
                        "output": "the cat was rat by the bat",
                        "explanation": null
                    },
                    {
                        "input": {
                            "dictionary": [
                                "a",
                                "b",
                                "c"
                            ],
                            "sentence": "aadsfasf absbs bbab cadsfafs"
                        },
                        "output": "a a b c",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "implement-trie-prefix-tree",
                "title": "Implement Trie (Prefix Tree)",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  const string* word = nullptr;\n  TrieNode() : children(26) {}\n};\n\nclass Solution {\n public:\n  string replaceWords(vector<string>& dictionary, string sentence) {\n    for (const string& word : dictionary)\n      insert(word);\n\n    string ans;\n    istringstream iss(sentence);\n\n    for (string s; iss >> s;)\n      ans += search(s) + ' ';\n    ans.pop_back();\n\n    return ans;\n  }\n\n private:\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n\n  void insert(const string& word) {\n    shared_ptr<TrieNode> node = root;\n    for (const char c : word) {\n      const int i = c - 'a';\n      if (node->children[i] == nullptr)\n        node->children[i] = make_shared<TrieNode>();\n      node = node->children[i];\n    }\n    node->word = &word;\n  }\n\n  string search(const string& word) {\n    shared_ptr<TrieNode> node = root;\n    for (const char c : word) {\n      if (node->word)\n        return *node->word;\n      const int i = c - 'a';\n      if (node->children[i] == nullptr)\n        return word;\n      node = node->children[i];\n    }\n    return word;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  private TrieNode[] children = new TrieNode[26];\n  private String word;\n}\n\nclass Solution {\n  public String replaceWords(List<String> dictionary, String sentence) {\n    StringBuilder sb = new StringBuilder();\n\n    for (final String word : dictionary)\n      insert(word);\n\n    final String[] words = sentence.split(\" \");\n    for (final String word : words)\n      sb.append(' ').append(search(word));\n\n    return sb.substring(1).toString();\n  }\n\n  private TrieNode root = new TrieNode();\n\n  private void insert(final String word) {\n    TrieNode node = root;\n    for (char c : word.toCharArray()) {\n      final int i = c - 'a';\n      if (node.children[i] == null)\n        node.children[i] = new TrieNode();\n      node = node.children[i];\n    }\n    node.word = word;\n  }\n\n  private String search(final String word) {\n    TrieNode node = root;\n    for (char c : word.toCharArray()) {\n      if (node.word != null)\n        return node.word;\n      final int i = c - 'a';\n      if (node.children[i] == null)\n        return word;\n      node = node.children[i];\n    }\n    return word;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def __init__(self):\n    self.root = {}\n\n  def insert(self, word: str) -> None:\n    node = self.root\n    for c in word:\n      if c not in node:\n        node[c] = {}\n      node = node[c]\n    node['word'] = word\n\n  def search(self, word: str) -> str:\n    node = self.root\n    for c in word:\n      if 'word' in node:\n        return node['word']\n      if c not in node:\n        return word\n      node = node[c]\n    return word\n\n  def replaceWords(self, dictionary: List[str], sentence: str) -> str:\n    for word in dictionary:\n      self.insert(word)\n\n    words = sentence.split(' ')\n    return ' '.join([self.search(word) for word in words])\n",
                "lang_text": "py"
            }
        }
    }
}