{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "566",
            "title": "Reshape the Matrix",
            "titleSlug": "reshape-the-matrix",
            "content": "<p>In MATLAB, there is a handy function called <code>reshape</code> which can reshape an <code>m x n</code> matrix into a new one with a different size <code>r x c</code> keeping its original data.</p>\n\n<p>You are given an <code>m x n</code> matrix <code>mat</code> and two integers <code>r</code> and <code>c</code> representing the number of rows and the number of columns of the wanted reshaped matrix.</p>\n\n<p>The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.</p>\n\n<p>If the <code>reshape</code> operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/reshape1-grid.jpg\" style=\"width: 613px; height: 173px;\" />\n<pre>\n<strong>Input:</strong> mat = [[1,2],[3,4]], r = 1, c = 4\n<strong>Output:</strong> [[1,2,3,4]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/24/reshape2-grid.jpg\" style=\"width: 453px; height: 173px;\" />\n<pre>\n<strong>Input:</strong> mat = [[1,2],[3,4]], r = 2, c = 4\n<strong>Output:</strong> [[1,2],[3,4]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-1000 &lt;= mat[i][j] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= r, c &lt;= 300</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3423,
            "dislikes": 401,
            "similarQuestions": "[{\"title\": \"Convert 1D Array Into 2D Array\", \"titleSlug\": \"convert-1d-array-into-2d-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"365.7K\", \"totalSubmission\": \"580.4K\", \"totalAcceptedRaw\": 365703, \"totalSubmissionRaw\": 580373, \"acRate\": \"63.0%\"}",
            "hints": [
                "Do you know how 2d matrix is stored in 1d memory? Try to map 2-dimensions into one.",
                "M[i][j]=M[n*i+j] , where n is the number of cols. \r\nThis is the one way of converting 2-d indices into one 1-d index.  \r\nNow, how will you convert 1-d index into 2-d indices?",
                "Try to use division and modulus to convert 1-d index into 2-d indices.",
                "M[i] =>  M[i/n][i%n] Will it result in right mapping? Take some example and check this formula."
            ],
            "rephrased": {
                "body": "You are given a matrix `mat` with dimensions `m x n` and two integers `r` and `c`. Your task is to reshape the matrix `mat` into a new matrix with dimensions `r x c` while preserving the original data's order. The elements of the reshaped matrix should be filled in row-traversing order from the original matrix. If the reshaping is possible (i.e., `m * n == r * c`), return the reshaped matrix. Otherwise, return the original matrix.",
                "constraints": [
                    "m == mat.length",
                    "n == mat[i].length",
                    "1 <= m, n <= 100",
                    "-1000 <= mat[i][j] <= 1000",
                    "1 <= r, c <= 300"
                ],
                "testcases": [
                    {
                        "input": "mat = [[1,2],[3,4]], r = 1, c = 4",
                        "output": "[[1,2,3,4]]",
                        "explanation": null
                    },
                    {
                        "input": "mat = [[1,2],[3,4]], r = 2, c = 4",
                        "output": "[[1,2],[3,4]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "convert-1d-array-into-2d-array",
                "title": "Convert 1D Array Into 2D Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Do you know how 2d matrix is stored in 1d memory? Try to map 2-dimensions into one.",
            "M[i][j]=M[n*i+j] , where n is the number of cols. \r\nThis is the one way of converting 2-d indices into one 1-d index.  \r\nNow, how will you convert 1-d index into 2-d indices?",
            "Try to use division and modulus to convert 1-d index into 2-d indices.",
            "M[i] =>  M[i/n][i%n] Will it result in right mapping? Take some example and check this formula."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {\n    if (nums.empty() || r * c != nums.size() * nums[0].size())\n      return nums;\n\n    vector<vector<int>> ans(r, vector<int>(c));\n    int k = 0;\n\n    for (const vector<int>& row : nums)\n      for (const int num : row) {\n        ans[k / c][k % c] = num;\n        ++k;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] matrixReshape(int[][] nums, int r, int c) {\n    if (nums.length == 0 || r * c != nums.length * nums[0].length)\n      return nums;\n\n    int[][] ans = new int[r][c];\n    int k = 0;\n\n    for (int[] row : nums)\n      for (final int num : row) {\n        ans[k / c][k % c] = num;\n        ++k;\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def matrixReshape(self, nums: List[List[int]], r: int, c: int) -> List[List[int]]:\n    if nums == [] or r * c != len(nums) * len(nums[0]):\n      return nums\n\n    ans = [[0 for j in range(c)] for i in range(r)]\n    k = 0\n\n    for row in nums:\n      for num in row:\n        ans[k // c][k % c] = num\n        k += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}