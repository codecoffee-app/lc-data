{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1416",
            "title": "Restore The Array",
            "titleSlug": "restore-the-array",
            "content": "<p>A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits <code>s</code> and all we know is that all integers in the array were in the range <code>[1, k]</code> and there are no leading zeros in the array.</p>\n\n<p>Given the string <code>s</code> and the integer <code>k</code>, return <em>the number of the possible arrays that can be printed as </em><code>s</code><em> using the mentioned program</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1000&quot;, k = 10000\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The only possible array is [1000]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1000&quot;, k = 10\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There cannot be an array that was printed this way and has all integer &gt;= 1 and &lt;= 10.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1317&quot;, k = 2000\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only digits and does not contain leading zeros.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1547,
            "dislikes": 52,
            "similarQuestions": "[{\"title\": \"Number of Ways to Separate Numbers\", \"titleSlug\": \"number-of-ways-to-separate-numbers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Beautiful Partitions\", \"titleSlug\": \"number-of-beautiful-partitions\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"56.6K\", \"totalSubmission\": \"117.3K\", \"totalAcceptedRaw\": 56631, \"totalSubmissionRaw\": 117348, \"acRate\": \"48.3%\"}",
            "hints": [
                "Use dynamic programming. Build an array dp where dp[i] is the number of ways you can divide the string starting from index i to the end.",
                "Keep in mind that the answer is modulo 10^9 + 7 and take the mod for each operation."
            ],
            "rephrased": {
                "body": "Given a string `s` representing a concatenated array of integers without spaces, and an integer `k` representing the upper bound of the integers in the original array (inclusive), determine the number of possible arrays that could have been printed as string `s`.  Each integer in the array must be within the range `[1, k]` and must not contain leading zeros.  Return the number of possible arrays modulo `10^9 + 7`.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "`s` consists of only digits and does not contain leading zeros.",
                    "1 <= k <= 10^9"
                ],
                "testcases": [
                    {
                        "input": {
                            "s": "1000",
                            "k": 10000
                        },
                        "output": 1,
                        "explanation": "The only possible array is [1000]"
                    },
                    {
                        "input": {
                            "s": "1000",
                            "k": 10
                        },
                        "output": 0,
                        "explanation": "There are no possible arrays with elements between 1 and 10 that could be concatenated to form '1000'."
                    },
                    {
                        "input": {
                            "s": "1317",
                            "k": 2000
                        },
                        "output": 8,
                        "explanation": "Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-ways-to-separate-numbers",
                "title": "Number of Ways to Separate Numbers",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-beautiful-partitions",
                "title": "Number of Beautiful Partitions",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use dynamic programming. Build an array dp where dp[i] is the number of ways you can divide the string starting from index i to the end.",
            "Keep in mind that the answer is modulo 10^9 + 7 and take the mod for each operation."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numberOfArrays(string s, int k) {\n    // dp[i] := # of arrays to restore s[i..n) w/ k\n    dp.resize(s.length(), -1);\n    return numberOfArrays(s, 0, k);\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  vector<int> dp;\n\n  int numberOfArrays(const string& s, int i, int k) {\n    if (i == s.length())\n      return 1;  // Empty string \"\"\"\"\n    if (s[i] == '0')\n      return 0;  // Leading zero\n    if (dp[i] >= 0)\n      return dp[i];\n\n    int ans = 0;\n    long num = 0;\n\n    for (int j = i; j < s.length(); ++j) {\n      num = num * 10 + (s[j] - '0');\n      if (num > k)\n        break;\n      ans = (ans + numberOfArrays(s, j + 1, k)) % kMod;\n    }\n\n    return dp[i] = ans;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}