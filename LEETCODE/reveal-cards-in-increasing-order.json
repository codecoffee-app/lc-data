{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "950",
            "title": "Reveal Cards In Increasing Order",
            "titleSlug": "reveal-cards-in-increasing-order",
            "content": "<p>You are given an integer array <code>deck</code>. There is a deck of cards where every card has a unique integer. The integer on the <code>i<sup>th</sup></code> card is <code>deck[i]</code>.</p>\n\n<p>You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.</p>\n\n<p>You will do the following steps repeatedly until all cards are revealed:</p>\n\n<ol>\n\t<li>Take the top card of the deck, reveal it, and take it out of the deck.</li>\n\t<li>If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.</li>\n\t<li>If there are still unrevealed cards, go back to step 1. Otherwise, stop.</li>\n</ol>\n\n<p>Return <em>an ordering of the deck that would reveal the cards in increasing order</em>.</p>\n\n<p><strong>Note</strong> that the first entry in the answer is considered to be the top of the deck.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> deck = [17,13,11,2,3,5,7]\n<strong>Output:</strong> [2,13,3,11,5,17,7]\n<strong>Explanation:</strong> \nWe get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> deck = [1,1000]\n<strong>Output:</strong> [1,1000]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= deck.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= deck[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>All the values of <code>deck</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2455,
            "dislikes": 342,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"73.1K\", \"totalSubmission\": \"93.7K\", \"totalAcceptedRaw\": 73120, \"totalSubmissionRaw\": 93739, \"acRate\": \"78.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `deck` representing a deck of cards with unique integer values, determine an ordering of the deck such that revealing the cards one by one following a specific procedure results in revealing them in increasing order. The procedure involves repeatedly taking the top card, revealing it, and moving the next top card to the bottom of the deck until all cards are revealed.",
                "constraints": [
                    "1 <= deck.length <= 1000",
                    "1 <= deck[i] <= 10^6",
                    "All the values of deck are unique."
                ],
                "testcases": [
                    {
                        "input": "[17,13,11,2,3,5,7]",
                        "output": "[2,13,3,11,5,17,7]",
                        "explanation": "The deck is reordered to [2,13,3,11,5,17,7].  Revealing the cards in order and moving the next to the bottom results in the sequence 2, 3, 5, 7, 11, 13, 17 which are in increasing order."
                    },
                    {
                        "input": "[1,1000]",
                        "output": "[1,1000]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> deckRevealedIncreasing(vector<int>& deck) {\n    sort(deck.begin(), deck.end(), greater<int>());\n\n    deque<int> dq{deck[0]};\n\n    for (int i = 1; i < deck.size(); ++i) {\n      dq.push_front(dq.back());\n      dq.pop_back();\n      dq.push_front(deck[i]);\n    }\n\n    return {dq.begin(), dq.end()};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] deckRevealedIncreasing(int[] deck) {\n    final int n = deck.length;\n\n    Arrays.sort(deck);\n\n    Deque<Integer> dq = new ArrayDeque<>();\n    dq.addFirst(deck[n - 1]);\n\n    for (int i = n - 2; i >= 0; --i) {\n      dq.addFirst(dq.getLast());\n      dq.pollLast();\n      dq.addFirst(deck[i]);\n    }\n\n    for (int i = 0; i < n; ++i)\n      deck[i] = dq.pollFirst();\n\n    return deck;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def deckRevealedIncreasing(self, deck: List[int]) -> List[int]:\n    dq = collections.deque()\n\n    for card in reversed(sorted(deck)):\n      dq.rotate()\n      dq.appendleft(card)\n\n    return list(dq)\n",
                "lang_text": "py"
            }
        }
    }
}