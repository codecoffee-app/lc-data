{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "92",
            "title": "Reverse Linked List II",
            "titleSlug": "reverse-linked-list-ii",
            "content": "<p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return <em>the reversed list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], left = 2, right = 4\n<strong>Output:</strong> [1,4,3,2,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [5], left = 1, right = 1\n<strong>Output:</strong> [5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>n</code>.</li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>-500 &lt;= Node.val &lt;= 500</code></li>\n\t<li><code>1 &lt;= left &lt;= right &lt;= n</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you do it in one pass?",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 11130,
            "dislikes": 542,
            "similarQuestions": "[{\"title\": \"Reverse Linked List\", \"titleSlug\": \"reverse-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                }
            ],
            "stats": "{\"totalAccepted\": \"792.4K\", \"totalSubmission\": \"1.7M\", \"totalAcceptedRaw\": 792373, \"totalSubmissionRaw\": 1673860, \"acRate\": \"47.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the head of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list.",
                "constraints": [
                    "The number of nodes in the list is `n`.",
                    "1 <= n <= 500",
                    "-500 <= Node.val <= 500",
                    "1 <= left <= right <= n"
                ],
                "testcases": [
                    {
                        "input": "head = [1,2,3,4,5], left = 2, right = 4",
                        "output": "[1,4,3,2,5]",
                        "explanation": "Reverse the portion of the list from the 2nd node (value 2) to the 4th node (value 4).  The reversed section becomes 4->3->2. The overall list becomes 1->4->3->2->5."
                    },
                    {
                        "input": "head = [5], left = 1, right = 1",
                        "output": "[5]",
                        "explanation": "Since left and right are the same, there is nothing to reverse. The list remains unchanged."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "reverse-linked-list",
                "title": "Reverse Linked List",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  ListNode* reverseBetween(ListNode* head, int left, int right) {\n    if (left == 1)\n      return reverseN(head, right);\n\n    head->next = reverseBetween(head->next, left - 1, right - 1);\n\n    return head;\n  }\n\n private:\n  ListNode* reverseN(ListNode* head, int n) {\n    if (n == 1)\n      return head;\n\n    ListNode* newHead = reverseN(head->next, n - 1);\n    ListNode* headNext = head->next;\n    head->next = headNext->next;\n    headNext->next = head;\n\n    return newHead;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public ListNode reverseBetween(ListNode head, int left, int right) {\n    if (left == 1)\n      return reverseN(head, right);\n\n    head.next = reverseBetween(head.next, left - 1, right - 1);\n\n    return head;\n  }\n\n  private ListNode reverseN(ListNode head, int n) {\n    if (n == 1)\n      return head;\n\n    ListNode newHead = reverseN(head.next, n - 1);\n    ListNode headNext = head.next;\n    head.next = headNext.next;\n    headNext.next = head;\n\n    return newHead;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\n    if left == 1:\n      return self.reverseN(head, right)\n\n    head.next = self.reverseBetween(head.next, left - 1, right - 1)\n    return head\n\n  def reverseN(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n    if n == 1:\n      return head\n\n    newHead = self.reverseN(head.next, n - 1)\n    headNext = head.next\n    head.next = headNext.next\n    headNext.next = head\n    return newHead\n",
                "lang_text": "py"
            }
        }
    }
}