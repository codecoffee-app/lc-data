{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "25",
            "title": "Reverse Nodes in k-Group",
            "titleSlug": "reverse-nodes-in-k-group",
            "content": "<p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return <em>the modified list</em>.</p>\n\n<p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p>\n\n<p>You may not alter the values in the list&#39;s nodes, only nodes themselves may be changed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 2\n<strong>Output:</strong> [2,1,4,3,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 3\n<strong>Output:</strong> [3,2,1,4,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>n</code>.</li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Can you solve the problem in <code>O(1)</code> extra memory space?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 13003,
            "dislikes": 641,
            "similarQuestions": "[{\"title\": \"Swap Nodes in Pairs\", \"titleSlug\": \"swap-nodes-in-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Swapping Nodes in a Linked List\", \"titleSlug\": \"swapping-nodes-in-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Reverse Nodes in Even Length Groups\", \"titleSlug\": \"reverse-nodes-in-even-length-groups\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"831.2K\", \"totalSubmission\": \"1.4M\", \"totalAcceptedRaw\": 831235, \"totalSubmissionRaw\": 1448040, \"acRate\": \"57.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the head of a linked list, reverse the nodes of the list in groups of k. Return the modified list. k is a positive integer less than or equal to the length of the linked list. If the number of nodes is not a multiple of k, the remaining nodes at the end should not be reversed.",
                "constraints": [
                    "The number of nodes in the list is n.",
                    "1 <= k <= n <= 5000",
                    "0 <= Node.val <= 1000"
                ],
                "testcases": [
                    {
                        "input": "head = [1,2,3,4,5], k = 2",
                        "output": "[2,1,4,3,5]",
                        "explanation": "The list is divided into groups of 2: (1, 2), (3, 4), and (5). The first two groups are reversed. The last element is left out and not reversed since it is not part of a complete group of 2."
                    },
                    {
                        "input": "head = [1,2,3,4,5], k = 3",
                        "output": "[3,2,1,4,5]",
                        "explanation": "The list is divided into groups of 3: (1, 2, 3), and (4, 5). The first group is reversed. The last two elements are left out and not reversed since they do not form a complete group of 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "swap-nodes-in-pairs",
                "title": "Swap Nodes in Pairs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "swapping-nodes-in-a-linked-list",
                "title": "Swapping Nodes in a Linked List",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "reverse-nodes-in-even-length-groups",
                "title": "Reverse Nodes in Even Length Groups",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  ListNode* reverseKGroup(ListNode* head, int k) {\n    if (head == nullptr)\n      return nullptr;\n\n    ListNode* tail = head;\n\n    for (int i = 0; i < k; ++i) {\n      if (tail == nullptr)  // Less than k nodes, do nothing\n        return head;\n      tail = tail->next;\n    }\n\n    ListNode* newHead = reverse(head, tail);\n    head->next = reverseKGroup(tail, k);\n    return newHead;\n  }\n\n private:\n  // Reverses [head, tail)\n  ListNode* reverse(ListNode* head, ListNode* tail) {\n    ListNode* prev = nullptr;\n    ListNode* curr = head;\n\n    while (curr != tail) {\n      ListNode* next = curr->next;\n      curr->next = prev;\n      prev = curr;\n      curr = next;\n    }\n\n    return prev;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public ListNode reverseKGroup(ListNode head, int k) {\n    if (head == null)\n      return null;\n\n    ListNode tail = head;\n\n    for (int i = 0; i < k; ++i) {\n      if (tail == null) // Less than k nodes, do nothing\n        return head;\n      tail = tail.next;\n    }\n\n    ListNode newHead = reverse(head, tail);\n    head.next = reverseKGroup(tail, k);\n    return newHead;\n  }\n\n  // Reverses [head, tail)\n  private ListNode reverse(ListNode head, ListNode tail) {\n    ListNode prev = null;\n    ListNode curr = head;\n\n    while (curr != tail) {\n      ListNode next = curr.next;\n      curr.next = prev;\n      prev = curr;\n      curr = next;\n    }\n\n    return prev;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n    if not head:\n      return None\n\n    tail = head\n\n    for _ in range(k):\n      if not tail:  # Less than k nodes, do nothing\n        return head\n      tail = tail.next\n\n    newHead = self._reverse(head, tail)\n    head.next = self.reverseKGroup(tail, k)\n    return newHead\n\n  # Reverses [head, tail)\n  def _reverse(self, head: Optional[ListNode], tail: Optional[ListNode]) -> Optional[ListNode]:\n    prev = None\n    curr = head\n\n    while curr != tail:\n      next = curr.next\n      curr.next = prev\n      prev = curr\n      curr = next\n\n    return prev\n",
                "lang_text": "py"
            }
        }
    }
}