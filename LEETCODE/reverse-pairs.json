{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "493",
            "title": "Reverse Pairs",
            "titleSlug": "reverse-pairs",
            "content": "<p>Given an integer array <code>nums</code>, return <em>the number of <strong>reverse pairs</strong> in the array</em>.</p>\n\n<p>A <strong>reverse pair</strong> is a pair <code>(i, j)</code> where:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt; nums.length</code> and</li>\n\t<li><code>nums[i] &gt; 2 * nums[j]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The reverse pairs are:\n(1, 4) --&gt; nums[1] = 3, nums[4] = 1, 3 &gt; 2 * 1\n(3, 4) --&gt; nums[3] = 3, nums[4] = 1, 3 &gt; 2 * 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,3,5,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The reverse pairs are:\n(1, 4) --&gt; nums[1] = 4, nums[4] = 1, 4 &gt; 2 * 1\n(2, 4) --&gt; nums[2] = 3, nums[4] = 1, 3 &gt; 2 * 1\n(3, 4) --&gt; nums[3] = 5, nums[4] = 1, 5 &gt; 2 * 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5818,
            "dislikes": 250,
            "similarQuestions": "[{\"title\": \"Count of Smaller Numbers After Self\", \"titleSlug\": \"count-of-smaller-numbers-after-self\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count of Range Sum\", \"titleSlug\": \"count-of-range-sum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Merge Sort",
                    "slug": "merge-sort"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"156K\", \"totalSubmission\": \"510.5K\", \"totalAcceptedRaw\": 155971, \"totalSubmissionRaw\": 510498, \"acRate\": \"30.6%\"}",
            "hints": [
                "Use the merge-sort technique.",
                "Divide the array into two parts and sort them.",
                "For each integer in the first part, count the number of integers that satisfy the condition from the second part. Use the pointer to help you in the counting process."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, find the total number of reverse pairs in the array. A reverse pair (i, j) satisfies the conditions: 0 <= i < j < nums.length and nums[i] > 2 * nums[j].",
                "constraints": [
                    "1 <= nums.length <= 5 * 10^4",
                    "-2^31 <= nums[i] <= 2^31 - 1"
                ],
                "testcases": [
                    {
                        "input": "[1,3,2,3,1]",
                        "output": "2",
                        "explanation": "The reverse pairs are:\n(1, 4) -> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) -> nums[3] = 3, nums[4] = 1, 3 > 2 * 1"
                    },
                    {
                        "input": "[2,4,3,5,1]",
                        "output": "3",
                        "explanation": "The reverse pairs are:\n(1, 4) -> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\n(2, 4) -> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) -> nums[3] = 5, nums[4] = 1, 5 > 2 * 1"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-of-smaller-numbers-after-self",
                "title": "Count of Smaller Numbers After Self",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "count-of-range-sum",
                "title": "Count of Range Sum",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use the merge-sort technique.",
            "Divide the array into two parts and sort them.",
            "For each integer in the first part, count the number of integers that satisfy the condition from the second part. Use the pointer to help you in the counting process."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class FenwickTree {\n public:\n  FenwickTree(int n) : sums(n + 1) {}\n\n  void update(int i, int delta) {\n    while (i < sums.size()) {\n      sums[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  int get(int i) const {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n\n private:\n  vector<int> sums;\n\n  static inline int lowbit(int i) {\n    return i & -i;\n  }\n};\n\nclass Solution {\n public:\n  int reversePairs(vector<int>& nums) {\n    int ans = 0;\n    unordered_map<long, int> ranks;\n    getRanks(nums, ranks);\n    FenwickTree tree(ranks.size());\n\n    for (int i = nums.size() - 1; i >= 0; --i) {\n      const long num = nums[i];\n      ans += tree.get(ranks[num] - 1);\n      tree.update(ranks[num * 2], 1);\n    }\n\n    return ans;\n  }\n\n private:\n  void getRanks(const vector<int>& nums, unordered_map<long, int>& ranks) {\n    set<long> sorted(nums.begin(), nums.end());\n    for (const long num : nums)\n      sorted.insert(num * 2);\n    int rank = 0;\n    for (const long num : sorted)\n      ranks[num] = ++rank;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}