{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "151",
            "title": "Reverse Words in a String",
            "titleSlug": "reverse-words-in-a-string",
            "content": "<p>Given an input string <code>s</code>, reverse the order of the <strong>words</strong>.</p>\n\n<p>A <strong>word</strong> is defined as a sequence of non-space characters. The <strong>words</strong> in <code>s</code> will be separated by at least one space.</p>\n\n<p>Return <em>a string of the words in reverse order concatenated by a single space.</em></p>\n\n<p><b>Note</b> that <code>s</code> may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;the sky is blue&quot;\n<strong>Output:</strong> &quot;blue is sky the&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;  hello world  &quot;\n<strong>Output:</strong> &quot;world hello&quot;\n<strong>Explanation:</strong> Your reversed string should not contain leading or trailing spaces.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a good   example&quot;\n<strong>Output:</strong> &quot;example good a&quot;\n<strong>Explanation:</strong> You need to reduce multiple spaces between two words to a single space in the reversed string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> contains English letters (upper-case and lower-case), digits, and spaces <code>&#39; &#39;</code>.</li>\n\t<li>There is <strong>at least one</strong> word in <code>s</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b data-stringify-type=\"bold\">Follow-up:&nbsp;</b>If the string data type is mutable in your language, can&nbsp;you solve it&nbsp;<b data-stringify-type=\"bold\">in-place</b>&nbsp;with&nbsp;<code data-stringify-type=\"code\">O(1)</code>&nbsp;extra space?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7791,
            "dislikes": 5000,
            "similarQuestions": "[{\"title\": \"Reverse Words in a String II\", \"titleSlug\": \"reverse-words-in-a-string-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"3.2M\", \"totalAcceptedRaw\": 1262020, \"totalSubmissionRaw\": 3228531, \"acRate\": \"39.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an input string `s`, reverse the order of the words. A word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space. Return a string of the words in reverse order concatenated by a single space. Note that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words and should not include any extra spaces.",
                "constraints": [
                    "1 <= s.length <= 10<sup>4</sup>",
                    "s contains English letters (upper-case and lower-case), digits, and spaces ' '.",
                    "There is at least one word in s."
                ],
                "testcases": [
                    {
                        "input": "the sky is blue",
                        "output": "blue is sky the",
                        "explanation": null
                    },
                    {
                        "input": "  hello world  ",
                        "output": "world hello",
                        "explanation": "The reversed string should not contain leading or trailing spaces."
                    },
                    {
                        "input": "a good   example",
                        "output": "example good a",
                        "explanation": "Multiple spaces between two words are reduced to a single space in the reversed string."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "reverse-words-in-a-string-ii",
                "title": "Reverse Words in a String II",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string reverseWords(string s) {\n    reverse(s.begin(), s.end());        // Reverse the whole string\n    reverseWords(s, s.length());        // Reverse each word\n    return cleanSpaces(s, s.length());  // Clean up spaces\n  }\n\n private:\n  void reverseWords(string& s, int n) {\n    int i = 0;\n    int j = 0;\n\n    while (i < n) {\n      while (i < j || i < n && s[i] == ' ')  // Skip spaces\n        ++i;\n      while (j < i || j < n && s[j] != ' ')  // Skip non spaces\n        ++j;\n      reverse(s.begin() + i, s.begin() + j);  // Reverse the word\n    }\n  }\n\n  // Trim leading, trailing, and middle spaces\n  string cleanSpaces(string& s, int n) {\n    int i = 0;\n    int j = 0;\n\n    while (j < n) {\n      while (j < n && s[j] == ' ')  // Skip spaces\n        ++j;\n      while (j < n && s[j] != ' ')  // Keep non spaces\n        s[i++] = s[j++];\n      while (j < n && s[j] == ' ')  // Skip spaces\n        ++j;\n      if (j < n)  // Keep only one space\n        s[i++] = ' ';\n    }\n\n    return s.substr(0, i);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String reverseWords(String s) {\n    StringBuilder sb = new StringBuilder(s).reverse(); // Reverse the whole string\n    reverseWords(sb, sb.length());                     // Reverse each word\n    return cleanSpaces(sb, sb.length());               // Clean up spaces\n  }\n\n  private void reverseWords(StringBuilder sb, int n) {\n    int i = 0;\n    int j = 0;\n\n    while (i < n) {\n      while (i < j || i < n && sb.charAt(i) == ' ') // Skip spaces\n        ++i;\n      while (j < i || j < n && sb.charAt(j) != ' ') // Skip non spaces\n        ++j;\n      reverse(sb, i, j - 1); // Reverse the word\n    }\n  }\n\n  // Trim leading, trailing, and middle spaces\n  private String cleanSpaces(StringBuilder sb, int n) {\n    int i = 0;\n    int j = 0;\n\n    while (j < n) {\n      while (j < n && sb.charAt(j) == ' ') // Skip spaces\n        ++j;\n      while (j < n && sb.charAt(j) != ' ') // Keep non spaces\n        sb.setCharAt(i++, sb.charAt(j++));\n      while (j < n && sb.charAt(j) == ' ') // Skip spaces\n        ++j;\n      if (j < n) // Keep only one space\n        sb.setCharAt(i++, ' ');\n    }\n\n    return sb.substring(0, i).toString();\n  }\n\n  private void reverse(StringBuilder sb, int l, int r) {\n    while (l < r) {\n      final char temp = sb.charAt(l);\n      sb.setCharAt(l++, sb.charAt(r));\n      sb.setCharAt(r--, temp);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def reverseWords(self, s: str) -> str:\n    return ' '.join(reversed(s.split()))\n",
                "lang_text": "py"
            }
        }
    }
}