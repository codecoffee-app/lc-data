{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2512",
            "title": "Reward Top K Students",
            "titleSlug": "reward-top-k-students",
            "content": "<p>You are given two string arrays <code>positive_feedback</code> and <code>negative_feedback</code>, containing the words denoting positive and negative feedback, respectively. Note that <strong>no</strong> word is both positive and negative.</p>\n\n<p>Initially every student has <code>0</code> points. Each positive word in a feedback report <strong>increases</strong> the points of a student by <code>3</code>, whereas each negative word <strong>decreases</strong> the points by <code>1</code>.</p>\n\n<p>You are given <code>n</code> feedback reports, represented by a <strong>0-indexed</strong> string array <code>report</code>&nbsp;and a <strong>0-indexed</strong> integer array <code>student_id</code>, where <code>student_id[i]</code> represents the ID of the student who has received the feedback report <code>report[i]</code>. The ID of each student is <strong>unique</strong>.</p>\n\n<p>Given an integer <code>k</code>, return <em>the top </em><code>k</code><em> students after ranking them in <strong>non-increasing</strong> order by their points</em>. In case more than one student has the same points, the one with the lower ID ranks higher.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> positive_feedback = [&quot;smart&quot;,&quot;brilliant&quot;,&quot;studious&quot;], negative_feedback = [&quot;not&quot;], report = [&quot;this student is studious&quot;,&quot;the student is smart&quot;], student_id = [1,2], k = 2\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> \nBoth the students have 1 positive feedback and 3 points but since student 1 has a lower ID he ranks higher.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> positive_feedback = [&quot;smart&quot;,&quot;brilliant&quot;,&quot;studious&quot;], negative_feedback = [&quot;not&quot;], report = [&quot;this student is not studious&quot;,&quot;the student is smart&quot;], student_id = [1,2], k = 2\n<strong>Output:</strong> [2,1]\n<strong>Explanation:</strong> \n- The student with ID 1 has 1 positive feedback and 1 negative feedback, so he has 3-1=2 points. \n- The student with ID 2 has 1 positive feedback, so he has 3 points. \nSince student 2 has more points, [2,1] is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= positive_feedback.length, negative_feedback.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= positive_feedback[i].length, negative_feedback[j].length &lt;= 100</code></li>\n\t<li>Both <code>positive_feedback[i]</code> and <code>negative_feedback[j]</code> consists of lowercase English letters.</li>\n\t<li>No word is present in both <code>positive_feedback</code> and <code>negative_feedback</code>.</li>\n\t<li><code>n == report.length == student_id.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>report[i]</code> consists of lowercase English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li>There is a single space between consecutive words of <code>report[i]</code>.</li>\n\t<li><code>1 &lt;= report[i].length &lt;= 100</code></li>\n\t<li><code>1 &lt;= student_id[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>All the values of <code>student_id[i]</code> are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 300,
            "dislikes": 71,
            "similarQuestions": "[{\"title\": \"Queue Reconstruction by Height\", \"titleSlug\": \"queue-reconstruction-by-height\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Highest Ranked Items Within a Price Range\", \"titleSlug\": \"k-highest-ranked-items-within-a-price-range\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"17.4K\", \"totalSubmission\": \"38.7K\", \"totalAcceptedRaw\": 17387, \"totalSubmissionRaw\": 38666, \"acRate\": \"45.0%\"}",
            "hints": [
                "Hash the positive and negative feedback words separately.",
                "Calculate the points for each student\u2019s feedback.",
                "Sort the students accordingly to find the top <em>k</em> among them."
            ],
            "rephrased": {
                "body": "Given two string arrays, `positive_feedback` and `negative_feedback`, representing positive and negative words respectively (no word exists in both).  Each student starts with 0 points. A positive word in their feedback report increases their points by 3, and a negative word decreases their points by 1.  You are given `n` feedback reports in the `report` array, along with a corresponding `student_id` array indicating which student received each report. All student IDs are unique.  Return the top `k` students, ranked in non-increasing order by their points. If students have the same points, the student with the lower ID ranks higher.",
                "constraints": [
                    "1 <= positive_feedback.length, negative_feedback.length <= 10^4",
                    "1 <= positive_feedback[i].length, negative_feedback[j].length <= 100",
                    "positive_feedback[i] and negative_feedback[j] consist of lowercase English letters.",
                    "No word is present in both positive_feedback and negative_feedback.",
                    "n == report.length == student_id.length",
                    "1 <= n <= 10^4",
                    "report[i] consists of lowercase English letters and spaces ' '.",
                    "There is a single space between consecutive words of report[i].",
                    "1 <= report[i].length <= 100",
                    "1 <= student_id[i] <= 10^9",
                    "All the values of student_id[i] are unique.",
                    "1 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is studious\",\"the student is smart\"], student_id = [1,2], k = 2",
                        "output": "[1,2]",
                        "explanation": "Both students have one positive feedback word each, resulting in 3 points. Student 1 has a lower ID, so they rank higher, leading to [1,2]."
                    },
                    {
                        "input": "positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is not studious\",\"the student is smart\"], student_id = [1,2], k = 2",
                        "output": "[2,1]",
                        "explanation": "Student 1 has \"studious\" (3 points) and \"not\" (-1 point), for a total of 2 points. Student 2 has \"smart\" (3 points). Since student 2 has more points, the output is [2,1]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "queue-reconstruction-by-height",
                "title": "Queue Reconstruction by Height",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "k-highest-ranked-items-within-a-price-range",
                "title": "K Highest Ranked Items Within a Price Range",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Hash the positive and negative feedback words separately.",
            "Calculate the points for each student\u2019s feedback.",
            "Sort the students accordingly to find the top <em>k</em> among them."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> topStudents(vector<string>& positive_feedback,\n                          vector<string>& negative_feedback,\n                          vector<string>& report, vector<int>& student_id,\n                          int k) {\n    vector<int> ans;\n    vector<pair<int, int>> scoreAndIds;\n    unordered_set<string> pos{positive_feedback.begin(),\n                              positive_feedback.end()};\n    unordered_set<string> neg{negative_feedback.begin(),\n                              negative_feedback.end()};\n\n    for (int i = 0; i < report.size(); ++i) {\n      int score = 0;\n      istringstream iss(report[i]);\n      for (string word; iss >> word;) {\n        if (pos.count(word))\n          score += 3;\n        if (neg.count(word))\n          score -= 1;\n      }\n      scoreAndIds.emplace_back(-score, student_id[i]);\n    }\n\n    partial_sort(scoreAndIds.begin(), scoreAndIds.begin() + k,\n                 scoreAndIds.end());\n    transform(\n        scoreAndIds.begin(), scoreAndIds.begin() + k, back_inserter(ans),\n        [](const pair<int, int>& scoreAndId) { return scoreAndId.second; });\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback,\n                                   String[] report, int[] student_id, int k) {\n    List<Integer> ans = new ArrayList<>();\n    Pair<Integer, Integer>[] scoreAndIds = new Pair[report.length];\n    Set<String> pos = Arrays.stream(positive_feedback).collect(Collectors.toSet());\n    Set<String> neg = Arrays.stream(negative_feedback).collect(Collectors.toSet());\n\n    for (int i = 0; i < report.length; ++i) {\n      int score = 0;\n      for (final String word : report[i].split(\" \")) {\n        if (pos.contains(word))\n          score += 3;\n        if (neg.contains(word))\n          score -= 1;\n      }\n      scoreAndIds[i] = new Pair<>(score, student_id[i]);\n    }\n\n    Arrays.sort(scoreAndIds,\n                (a, b)\n                    -> a.getKey().equals(b.getKey()) ? a.getValue() - b.getValue()\n                                                     : b.getKey() - a.getKey());\n\n    for (int i = 0; i < k; ++i)\n      ans.add(scoreAndIds[i].getValue());\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def topStudents(self, positive_feedback: List[str], negative_feedback: List[str], report: List[str], student_id: List[int], k: int) -> List[int]:\n    scoreAndIds = []\n    pos = set(positive_feedback)\n    neg = set(negative_feedback)\n\n    for sid, r in zip(student_id, report):\n      score = 0\n      for word in r.split():\n        if word in pos:\n          score += 3\n        if word in neg:\n          score -= 1\n      scoreAndIds.append((-score, sid))\n\n    return [sid for _, sid in sorted(scoreAndIds)[:k]]\n",
                "lang_text": "py"
            }
        }
    }
}