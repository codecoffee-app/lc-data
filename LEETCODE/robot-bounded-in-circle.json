{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1041",
            "title": "Robot Bounded In Circle",
            "titleSlug": "robot-bounded-in-circle",
            "content": "<p>On an infinite plane, a robot initially stands at <code>(0, 0)</code> and faces north. Note that:</p>\n\n<ul>\n\t<li>The <strong>north direction</strong> is the positive direction of the y-axis.</li>\n\t<li>The <strong>south direction</strong> is the negative direction of the y-axis.</li>\n\t<li>The <strong>east direction</strong> is the positive direction of the x-axis.</li>\n\t<li>The <strong>west direction</strong> is the negative direction of the x-axis.</li>\n</ul>\n\n<p>The robot can receive one of three instructions:</p>\n\n<ul>\n\t<li><code>&quot;G&quot;</code>: go straight 1 unit.</li>\n\t<li><code>&quot;L&quot;</code>: turn 90 degrees to the left (i.e., anti-clockwise direction).</li>\n\t<li><code>&quot;R&quot;</code>: turn 90 degrees to the right (i.e., clockwise direction).</li>\n</ul>\n\n<p>The robot performs the <code>instructions</code> given in order, and repeats them forever.</p>\n\n<p>Return <code>true</code> if and only if there exists a circle in the plane such that the robot never leaves the circle.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> instructions = &quot;GGLLGG&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The robot is initially at (0, 0) facing the north direction.\n&quot;G&quot;: move one step. Position: (0, 1). Direction: North.\n&quot;G&quot;: move one step. Position: (0, 2). Direction: North.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.\n&quot;G&quot;: move one step. Position: (0, 1). Direction: South.\n&quot;G&quot;: move one step. Position: (0, 0). Direction: South.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --&gt; (0, 1) --&gt; (0, 2) --&gt; (0, 1) --&gt; (0, 0).\nBased on that, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> instructions = &quot;GG&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The robot is initially at (0, 0) facing the north direction.\n&quot;G&quot;: move one step. Position: (0, 1). Direction: North.\n&quot;G&quot;: move one step. Position: (0, 2). Direction: North.\nRepeating the instructions, keeps advancing in the north direction and does not go into cycles.\nBased on that, we return false.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> instructions = &quot;GL&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The robot is initially at (0, 0) facing the north direction.\n&quot;G&quot;: move one step. Position: (0, 1). Direction: North.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.\n&quot;G&quot;: move one step. Position: (-1, 1). Direction: West.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.\n&quot;G&quot;: move one step. Position: (-1, 0). Direction: South.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.\n&quot;G&quot;: move one step. Position: (0, 0). Direction: East.\n&quot;L&quot;: turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --&gt; (0, 1) --&gt; (-1, 1) --&gt; (-1, 0) --&gt; (0, 0).\nBased on that, we return true.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= instructions.length &lt;= 100</code></li>\n\t<li><code>instructions[i]</code> is <code>&#39;G&#39;</code>, <code>&#39;L&#39;</code> or, <code>&#39;R&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3645,
            "dislikes": 685,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"223.9K\", \"totalSubmission\": \"403K\", \"totalAcceptedRaw\": 223878, \"totalSubmissionRaw\": 402959, \"acRate\": \"55.6%\"}",
            "hints": [
                "Calculate the final vector of how the robot travels after executing all instructions once - it consists of a change in position plus a change in direction.",
                "The robot stays in the circle if and only if (looking at the final vector) it changes direction (ie. doesn't stay pointing north), or it moves 0."
            ],
            "rephrased": {
                "body": "A robot starts at coordinates (0, 0) facing North on an infinite plane. The robot can receive the following instructions:\n\n*   \"G\": Move one unit straight in the current direction.\n*   \"L\": Turn 90 degrees left (anti-clockwise).\n*   \"R\": Turn 90 degrees right (clockwise).\n\nThe robot executes the given instructions repeatedly. Determine if the robot stays within a bounded circular area.",
                "constraints": [
                    "1 <= instructions.length <= 100",
                    "instructions[i] is 'G', 'L' or 'R'."
                ],
                "testcases": [
                    {
                        "input": "GGLLGG",
                        "output": "true",
                        "explanation": "After executing the instructions once, the robot returns to the origin (0, 0).  The robot moves (0,0)->(0,1)->(0,2)->(0,2)->(0,1)->(0,0).  Since the robot returns to the origin and therefore stays within a bounded area, the output is true."
                    },
                    {
                        "input": "GG",
                        "output": "false",
                        "explanation": "After executing the instructions once, the robot ends up at (0, 2) and continues to move in the North direction indefinitely. Thus, it doesn't stay within a bounded area and the output is false."
                    },
                    {
                        "input": "GL",
                        "output": "true",
                        "explanation": "After executing the instructions once, the robot returns to the origin (0, 0). The robot goes (0,0)->(0,1)->(-1,1)->(-1,0)->(0,0). Therefore, the output is true because it stays within a bounded area."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Calculate the final vector of how the robot travels after executing all instructions once - it consists of a change in position plus a change in direction.",
            "The robot stays in the circle if and only if (looking at the final vector) it changes direction (ie. doesn't stay pointing north), or it moves 0."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isRobotBounded(string instructions) {\n    int x = 0;\n    int y = 0;\n    int d = 0;\n    vector<vector<int>> directions{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    for (char instruction : instructions) {\n      if (instruction == 'G') {\n        x += directions[d][0];\n        y += directions[d][1];\n      } else if (instruction == 'L')\n        d = (d + 3) % 4;\n      else\n        d = (d + 1) % 4;\n    }\n\n    return x == 0 && y == 0 || d > 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isRobotBounded(String instructions) {\n    int x = 0;\n    int y = 0;\n    int d = 0;\n    int[][] directions = new int[][] {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    for (char instruction : instructions.toCharArray()) {\n      if (instruction == 'G') {\n        x += directions[d][0];\n        y += directions[d][1];\n      } else if (instruction == 'L')\n        d = (d + 3) % 4;\n      else\n        d = (d + 1) % 4;\n    }\n\n    return x == 0 && y == 0 || d > 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isRobotBounded(self, instructions: str) -> bool:\n    x = 0\n    y = 0\n    d = 0\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    for instruction in instructions:\n      if instruction == 'G':\n        x += directions[d][0]\n        y += directions[d][1]\n      elif instruction == 'L':\n        d = (d + 3) % 4\n      else:\n        d = (d + 1) % 4\n\n    return (x, y) == (0, 0) or d > 0\n",
                "lang_text": "py"
            }
        }
    }
}