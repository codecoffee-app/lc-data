{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "657",
            "title": "Robot Return to Origin",
            "titleSlug": "robot-return-to-origin",
            "content": "<p>There is a robot starting at the position <code>(0, 0)</code>, the origin, on a 2D plane. Given a sequence of its moves, judge if this robot <strong>ends up at </strong><code>(0, 0)</code> after it completes its moves.</p>\n\n<p>You are given a string <code>moves</code> that represents the move sequence of the robot where <code>moves[i]</code> represents its <code>i<sup>th</sup></code> move. Valid moves are <code>&#39;R&#39;</code> (right), <code>&#39;L&#39;</code> (left), <code>&#39;U&#39;</code> (up), and <code>&#39;D&#39;</code> (down).</p>\n\n<p>Return <code>true</code><em> if the robot returns to the origin after it finishes all of its moves, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p><strong>Note</strong>: The way that the robot is &quot;facing&quot; is irrelevant. <code>&#39;R&#39;</code> will always make the robot move to the right once, <code>&#39;L&#39;</code> will always make it move left, etc. Also, assume that the magnitude of the robot&#39;s movement is the same for each move.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> moves = &quot;UD&quot;\n<strong>Output:</strong> true\n<strong>Explanation</strong>: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> moves = &quot;LL&quot;\n<strong>Output:</strong> false\n<strong>Explanation</strong>: The robot moves left twice. It ends up two &quot;moves&quot; to the left of the origin. We return false because it is not at the origin at the end of its moves.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= moves.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>moves</code> only contains the characters <code>&#39;U&#39;</code>, <code>&#39;D&#39;</code>, <code>&#39;L&#39;</code> and <code>&#39;R&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2341,
            "dislikes": 739,
            "similarQuestions": "[{\"title\": \"Number of Provinces\", \"titleSlug\": \"number-of-provinces\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Execution of All Suffix Instructions Staying in a Grid\", \"titleSlug\": \"execution-of-all-suffix-instructions-staying-in-a-grid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Furthest Point From Origin\", \"titleSlug\": \"furthest-point-from-origin\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"405K\", \"totalSubmission\": \"536K\", \"totalAcceptedRaw\": 405020, \"totalSubmissionRaw\": 536042, \"acRate\": \"75.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "A robot starts at the origin (0, 0) on a 2D plane. Given a string of moves, determine if the robot returns to the origin after completing all moves. The string `moves` represents the sequence of moves, where 'R' is right, 'L' is left, 'U' is up, and 'D' is down.  Each move has the same magnitude. Return `true` if the robot returns to the origin, and `false` otherwise.",
                "constraints": [
                    "1 <= moves.length <= 2 * 10^4",
                    "moves only contains the characters 'U', 'D', 'L' and 'R'."
                ],
                "testcases": [
                    {
                        "input": "UD",
                        "output": "true",
                        "explanation": "The robot moves up, then down, returning to the origin.  Equal and opposite moves result in returning to the starting position."
                    },
                    {
                        "input": "LL",
                        "output": "false",
                        "explanation": "The robot moves left twice. It ends up two units to the left of the origin."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-provinces",
                "title": "Number of Provinces",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "execution-of-all-suffix-instructions-staying-in-a-grid",
                "title": "Execution of All Suffix Instructions Staying in a Grid",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "furthest-point-from-origin",
                "title": "Furthest Point From Origin",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool judgeCircle(string moves) {\n    int right = 0;\n    int up = 0;\n\n    for (const char move : moves) {\n      switch (move) {\n        case 'R':\n          ++right;\n          break;\n        case 'L':\n          --right;\n          break;\n        case 'U':\n          ++up;\n          break;\n        case 'D':\n          --up;\n          break;\n      }\n    }\n\n    return right == 0 && up == 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean judgeCircle(String moves) {\n    int right = 0;\n    int up = 0;\n\n    for (final char move : moves.toCharArray()) {\n      switch (move) {\n        case 'R':\n          ++right;\n          break;\n        case 'L':\n          --right;\n          break;\n        case 'U':\n          ++up;\n          break;\n        case 'D':\n          --up;\n          break;\n      }\n    }\n\n    return right == 0 && up == 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def judgeCircle(self, moves: str) -> bool:\n    return moves.count('R') == moves.count('L') and moves.count('U') == moves.count('D')\n",
                "lang_text": "py"
            }
        }
    }
}