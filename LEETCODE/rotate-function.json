{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "396",
            "title": "Rotate Function",
            "titleSlug": "rotate-function",
            "content": "<p>You are given an integer array <code>nums</code> of length <code>n</code>.</p>\n\n<p>Assume <code>arr<sub>k</sub></code> to be an array obtained by rotating <code>nums</code> by <code>k</code> positions clock-wise. We define the <strong>rotation function</strong> <code>F</code> on <code>nums</code> as follow:</p>\n\n<ul>\n\t<li><code>F(k) = 0 * arr<sub>k</sub>[0] + 1 * arr<sub>k</sub>[1] + ... + (n - 1) * arr<sub>k</sub>[n - 1].</code></li>\n</ul>\n\n<p>Return <em>the maximum value of</em> <code>F(0), F(1), ..., F(n-1)</code>.</p>\n\n<p>The test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,3,2,6]\n<strong>Output:</strong> 26\n<strong>Explanation:</strong>\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [100]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1490,
            "dislikes": 261,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"80.6K\", \"totalSubmission\": \"192K\", \"totalAcceptedRaw\": 80644, \"totalSubmissionRaw\": 191953, \"acRate\": \"42.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` of length `n`, imagine rotating `nums` by `k` positions clockwise to create a new array `arr_k`. Define the rotation function `F(k)` as the sum of `i * arr_k[i]` for `i` from 0 to `n-1`.  The task is to find the maximum value among `F(0), F(1), ..., F(n-1)`.",
                "constraints": [
                    "`n == nums.length`",
                    "`1 <= n <= 10^5`",
                    "`-100 <= nums[i] <= 100`"
                ],
                "testcases": [
                    {
                        "input": "[4,3,2,6]",
                        "output": "26",
                        "explanation": "F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nThe maximum value is F(3) = 26."
                    },
                    {
                        "input": "[100]",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxRotateFunction(vector<int>& nums) {\n    const int sum = accumulate(nums.begin(), nums.end(), 0);\n    int f = 0;\n\n    // Calculate F(0) first\n    for (int i = 0; i < nums.size(); ++i)\n      f += i * nums[i];\n\n    int ans = f;\n\n    for (int i = nums.size() - 1; i > 0; --i) {\n      f += sum - nums.size() * nums[i];\n      ans = max(ans, f);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxRotateFunction(int[] nums) {\n    final int sum = Arrays.stream(nums).sum();\n    int f = 0;\n\n    // Calculate F(0) first\n    for (int i = 0; i < nums.length; ++i)\n      f += i * nums[i];\n\n    int ans = f;\n\n    for (int i = nums.length - 1; i >= 0; --i) {\n      f += sum - nums.length * nums[i];\n      ans = Math.max(ans, f);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxRotateFunction(self, nums: List[int]) -> int:\n    f = sum(i * num for i, num in enumerate(nums))\n    ans = f\n    summ = sum(nums)\n\n    for a in reversed(nums):\n      f += summ - len(nums) * a\n      ans = max(ans, f)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}