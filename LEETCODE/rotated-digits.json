{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "788",
            "title": "Rotated Digits",
            "titleSlug": "rotated-digits",
            "content": "<p>An integer <code>x</code> is a <strong>good</strong> if after rotating each digit individually by 180 degrees, we get a valid number that is different from <code>x</code>. Each digit must be rotated - we cannot choose to leave it alone.</p>\n\n<p>A number is valid if each digit remains a digit after rotation. For example:</p>\n\n<ul>\n\t<li><code>0</code>, <code>1</code>, and <code>8</code> rotate to themselves,</li>\n\t<li><code>2</code> and <code>5</code> rotate to each other (in this case they are rotated in a different direction, in other words, <code>2</code> or <code>5</code> gets mirrored),</li>\n\t<li><code>6</code> and <code>9</code> rotate to each other, and</li>\n\t<li>the rest of the numbers do not rotate to any other number and become invalid.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>the number of <strong>good</strong> integers in the range </em><code>[1, n]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 730,
            "dislikes": 1905,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"102.5K\", \"totalSubmission\": \"181.6K\", \"totalAcceptedRaw\": 102464, \"totalSubmissionRaw\": 181556, \"acRate\": \"56.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "An integer `x` is considered **good** if, after rotating each digit individually by 180 degrees, the resulting number is valid and different from `x`.  Each digit must be rotated. Digits rotate as follows:\n\n*   0, 1, and 8 rotate to themselves.\n*   2 and 5 rotate to each other.\n*   6 and 9 rotate to each other.\n*   Other digits are invalid after rotation.\n\nGiven an integer `n`, determine the number of **good** integers within the range `[1, n]`.",
                "constraints": [
                    "1 <= n <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "4",
                        "explanation": "The good numbers in the range [1, 10] are 2, 5, 6, and 9. 1 and 10 are not good because they remain unchanged after rotation."
                    },
                    {
                        "input": "1",
                        "output": "0",
                        "explanation": null
                    },
                    {
                        "input": "2",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int rotatedDigits(int n) {\n    int ans = 0;\n\n    for (int i = 1; i <= n; ++i)\n      if (isGoodNumber(i))\n        ++ans;\n\n    return ans;\n  }\n\n private:\n  bool isGoodNumber(int i) {\n    bool isRotated = false;\n\n    for (const char c : to_string(i)) {\n      if (c == '0' || c == '1' || c == '8')\n        continue;\n      if (c == '2' || c == '5' || c == '6' || c == '9')\n        isRotated = true;\n      else\n        return false;\n    }\n\n    return isRotated;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int rotatedDigits(int n) {\n    int ans = 0;\n\n    for (int i = 1; i <= n; ++i)\n      if (isGoodNumber(i))\n        ++ans;\n\n    return ans;\n  }\n\n  private boolean isGoodNumber(int i) {\n    boolean isRotated = false;\n\n    for (final char c : String.valueOf(i).toCharArray()) {\n      if (c == '0' || c == '1' || c == '8')\n        continue;\n      if (c == '2' || c == '5' || c == '6' || c == '9')\n        isRotated = true;\n      else\n        return false;\n    }\n\n    return isRotated;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def rotatedDigits(self, n: int) -> int:\n    def isGoodNumber(i: int) -> bool:\n      isRotated = False\n\n      for c in str(i):\n        if c == '0' or c == '1' or c == '8':\n          continue\n        if c == '2' or c == '5' or c == '6' or c == '9':\n          isRotated = True\n        else:\n          return False\n\n      return isRotated\n\n    return sum(isGoodNumber(i) for i in range(1, n + 1))\n",
                "lang_text": "py"
            }
        }
    }
}