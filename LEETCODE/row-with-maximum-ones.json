{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2643",
            "title": "Row With Maximum Ones",
            "titleSlug": "row-with-maximum-ones",
            "content": "<p>Given a <code>m x n</code> binary matrix <code>mat</code>, find the <strong>0-indexed</strong> position of the row that contains the <strong>maximum</strong> count of <strong>ones,</strong> and the number of ones in that row.</p>\n\n<p>In case there are multiple rows that have the maximum count of ones, the row with the <strong>smallest row number</strong> should be selected.</p>\n\n<p>Return<em> an array containing the index of the row, and the number of ones in it.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[0,1],[1,0]]\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Both rows have the same number of 1&#39;s. So we return the index of the smaller row, 0, and the maximum count of ones (1<code>)</code>. So, the answer is [0,1]. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[0,0,0],[0,1,1]]\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The row indexed 1 has the maximum count of ones <code>(2)</code>. So we return its index, <code>1</code>, and the count. So, the answer is [1,2].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = [[0,0],[1,1],[0,0]]\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The row indexed 1 has the maximum count of ones (2). So the answer is [1,2].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code>&nbsp;</li>\n\t<li><code>n == mat[i].length</code>&nbsp;</li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code>&nbsp;</li>\n\t<li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 382,
            "dislikes": 11,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"45.3K\", \"totalSubmission\": \"60K\", \"totalAcceptedRaw\": 45300, \"totalSubmissionRaw\": 59962, \"acRate\": \"75.5%\"}",
            "hints": [
                "Iterate through each row and keep the count of ones."
            ],
            "rephrased": {
                "body": "Given a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row. In case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected. Return an array containing the index of the row, and the number of ones in it.",
                "constraints": [
                    "m == mat.length",
                    "n == mat[i].length",
                    "1 <= m, n <= 100",
                    "mat[i][j] is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[[0,1],[1,0]]",
                        "output": "[0,1]",
                        "explanation": "Both rows have an equal number of 1s.  The row with the smaller index, 0, is selected. The maximum count of ones is 1."
                    },
                    {
                        "input": "[[0,0,0],[0,1,1]]",
                        "output": "[1,2]",
                        "explanation": "The row at index 1 has the highest count of ones, which is 2."
                    },
                    {
                        "input": "[[0,0],[1,1],[0,0]]",
                        "output": "[1,2]",
                        "explanation": "The row at index 1 has the highest count of ones, which is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Iterate through each row and keep the count of ones."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {\n    vector<int> ans{0, 0};\n\n    for (int i = 0; i < mat.size(); ++i) {\n      const int ones = count(mat[i].begin(), mat[i].end(), 1);\n      if (ones > ans[1]) {\n        ans[0] = i;\n        ans[1] = ones;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] rowAndMaximumOnes(int[][] mat) {\n    int[] ans = new int[2];\n\n    for (int i = 0; i < mat.length; ++i) {\n      final int ones = (int) Arrays.stream(mat[i]).filter(a -> a == 1).count();\n      if (ones > ans[1]) {\n        ans[0] = i;\n        ans[1] = ones;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def rowAndMaximumOnes(self, mat: List[List[int]]) -> List[int]:\n    ans = [0, 0]\n\n    for i, row in enumerate(mat):\n      ones = row.count(1)\n      if ones > ans[1]:\n        ans[0] = i\n        ans[1] = ones\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}