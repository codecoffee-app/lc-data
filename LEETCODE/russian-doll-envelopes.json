{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "354",
            "title": "Russian Doll Envelopes",
            "titleSlug": "russian-doll-envelopes",
            "content": "<p>You are given a 2D array of integers <code>envelopes</code> where <code>envelopes[i] = [w<sub>i</sub>, h<sub>i</sub>]</code> represents the width and the height of an envelope.</p>\n\n<p>One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope&#39;s width and height.</p>\n\n<p>Return <em>the maximum number of envelopes you can Russian doll (i.e., put one inside the other)</em>.</p>\n\n<p><strong>Note:</strong> You cannot rotate an envelope.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> envelopes = [[5,4],[6,4],[6,7],[2,3]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The maximum number of envelopes you can Russian doll is <code>3</code> ([2,3] =&gt; [5,4] =&gt; [6,7]).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> envelopes = [[1,1],[1,1],[1,1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= envelopes.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>envelopes[i].length == 2</code></li>\n\t<li><code>1 &lt;= w<sub>i</sub>, h<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5733,
            "dislikes": 140,
            "similarQuestions": "[{\"title\": \"Longest Increasing Subsequence\", \"titleSlug\": \"longest-increasing-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"The Number of Weak Characters in the Game\", \"titleSlug\": \"the-number-of-weak-characters-in-the-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Non-decreasing Subarray From Two Arrays\", \"titleSlug\": \"longest-non-decreasing-subarray-from-two-arrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"206.1K\", \"totalSubmission\": \"553.8K\", \"totalAcceptedRaw\": 206060, \"totalSubmissionRaw\": 553761, \"acRate\": \"37.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given a 2D array of integers `envelopes` where `envelopes[i] = [w_i, h_i]` represents the width and the height of an envelope. Determine the maximum number of envelopes that can be nested inside each other, adhering to the following rule: One envelope can fit inside another if and only if both the width and height of the containing envelope are strictly greater than the width and height of the enclosed envelope. You cannot rotate any envelope.",
                "constraints": [
                    "1 <= envelopes.length <= 10^5",
                    "envelopes[i].length == 2",
                    "1 <= w_i, h_i <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[[5,4],[6,4],[6,7],[2,3]]",
                        "output": "3",
                        "explanation": "The longest sequence of nested envelopes is [2,3] -> [5,4] -> [6,7], resulting in a count of 3."
                    },
                    {
                        "input": "[[1,1],[1,1],[1,1]]",
                        "output": "1",
                        "explanation": "Since no envelope can strictly fit inside another, the maximum number of nested envelopes is 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-increasing-subsequence",
                "title": "Longest Increasing Subsequence",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "the-number-of-weak-characters-in-the-game",
                "title": "The Number of Weak Characters in the Game",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-non-decreasing-subarray-from-two-arrays",
                "title": "Longest Non-decreasing Subarray From Two Arrays",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxEnvelopes(vector<vector<int>>& envelopes) {\n    sort(envelopes.begin(), envelopes.end(), [](const auto& a, const auto& b) {\n      return a[0] == b[0] ? a[1] > b[1] : a[0] < b[0];\n    });\n\n    // Same as 300. Longest Increasing Subsequence\n    int ans = 0;\n    vector<int> dp(envelopes.size());\n\n    for (const vector<int>& e : envelopes) {\n      int l = 0;\n      int r = ans;\n      while (l < r) {\n        const int m = (l + r) / 2;\n        if (dp[m] >= e[1])\n          r = m;\n        else\n          l = m + 1;\n      }\n      dp[l] = e[1];\n      if (l == ans)\n        ++ans;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxEnvelopes(int[][] envelopes) {\n    Arrays.sort(envelopes, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);\n\n    // Same as 300. Longest Increasing Subsequence\n    int ans = 0;\n    int[] dp = new int[envelopes.length];\n\n    for (int[] e : envelopes) {\n      int i = Arrays.binarySearch(dp, 0, ans, e[1]);\n      if (i < 0)\n        i = -(i + 1);\n      dp[i] = e[1];\n      if (i == ans)\n        ++ans;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n    envelopes.sort(key=lambda x: (x[0], -x[1]))\n    # Same as 300. Longest Increasing Subsequence\n    ans = 0\n    dp = [0] * len(envelopes)\n\n    for _, h in envelopes:\n      l = 0\n      r = ans\n      while l < r:\n        m = (l + r) // 2\n        if dp[m] >= h:\n          r = m\n        else:\n          l = m + 1\n      dp[l] = h\n      if l == ans:\n        ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}