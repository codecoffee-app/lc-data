{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "990",
            "title": "Satisfiability of Equality Equations",
            "titleSlug": "satisfiability-of-equality-equations",
            "content": "<p>You are given an array of strings <code>equations</code> that represent relationships between variables where each string <code>equations[i]</code> is of length <code>4</code> and takes one of two different forms: <code>&quot;x<sub>i</sub>==y<sub>i</sub>&quot;</code> or <code>&quot;x<sub>i</sub>!=y<sub>i</sub>&quot;</code>.Here, <code>x<sub>i</sub></code> and <code>y<sub>i</sub></code> are lowercase letters (not necessarily different) that represent one-letter variable names.</p>\n\n<p>Return <code>true</code><em> if it is possible to assign integers to variable names so as to satisfy all the given equations, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [&quot;a==b&quot;,&quot;b!=a&quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> equations = [&quot;b==a&quot;,&quot;a==b&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We could assign a = 1 and b = 1 to satisfy both equations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= equations.length &lt;= 500</code></li>\n\t<li><code>equations[i].length == 4</code></li>\n\t<li><code>equations[i][0]</code> is a lowercase letter.</li>\n\t<li><code>equations[i][1]</code> is either <code>&#39;=&#39;</code> or <code>&#39;!&#39;</code>.</li>\n\t<li><code>equations[i][2]</code> is <code>&#39;=&#39;</code>.</li>\n\t<li><code>equations[i][3]</code> is a lowercase letter.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3620,
            "dislikes": 57,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"120.7K\", \"totalSubmission\": \"239.3K\", \"totalAcceptedRaw\": 120678, \"totalSubmissionRaw\": 239333, \"acRate\": \"50.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of strings `equations` representing relationships between variables, determine if it's possible to assign integer values to the variables such that all equations are satisfied. Each equation in `equations` has a length of 4 and is in the form `\"x==y\"` or `\"x!=y\"`, where `x` and `y` are lowercase letters representing one-letter variable names.",
                "constraints": [
                    "1 <= equations.length <= 500",
                    "equations[i].length == 4",
                    "equations[i][0] is a lowercase letter.",
                    "equations[i][1] is either '=' or '!'",
                    "equations[i][2] is '='.",
                    "equations[i][3] is a lowercase letter."
                ],
                "testcases": [
                    {
                        "input": "[\"a==b\",\"b!=a\"]",
                        "output": "false",
                        "explanation": "Assigning the same integer value to both 'a' and 'b' satisfies the first equation but violates the second. There is no assignment that can satisfy both."
                    },
                    {
                        "input": "[\"b==a\",\"a==b\"]",
                        "output": "true",
                        "explanation": "Assigning the same integer value to both 'a' and 'b' will satisfy both equations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void union_(int u, int v) {\n    id[find(u)] = find(v);\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n};\n\nclass Solution {\n public:\n  bool equationsPossible(vector<string>& equations) {\n    UnionFind uf(26);\n\n    for (const string& e : equations)\n      if (e[1] == '=') {\n        const int x = e[0] - 'a';\n        const int y = e[3] - 'a';\n        uf.union_(x, y);\n      }\n\n    for (const string& e : equations)\n      if (e[1] == '!') {\n        const int x = e[0] - 'a';\n        const int y = e[3] - 'a';\n        if (uf.find(x) == uf.find(y))\n          return false;\n      }\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  private int[] id;\n  private int[] rank;\n}\n\nclass Solution {\n  public boolean equationsPossible(String[] equations) {\n    UnionFind uf = new UnionFind(26);\n\n    for (final String e : equations)\n      if (e.charAt(1) == '=') {\n        final int x = e.charAt(0) - 'a';\n        final int y = e.charAt(3) - 'a';\n        uf.unionByRank(x, y);\n      }\n\n    for (final String e : equations)\n      if (e.charAt(1) == '!') {\n        final int x = e.charAt(0) - 'a';\n        final int y = e.charAt(3) - 'a';\n        if (uf.find(x) == uf.find(y))\n          return false;\n      }\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n\n  def union(self, u: int, v: int) -> None:\n    self.id[self.find(u)] = self.find(v)\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def equationsPossible(self, equations: List[str]) -> bool:\n    uf = UnionFind(26)\n\n    for x, op, _, y in equations:\n      if op == '=':\n        uf.union(ord(x) - ord('a'), ord(y) - ord('a'))\n\n    return all(uf.find(ord(x) - ord('a')) != uf.find(ord(y) - ord('a'))\n               for x, op, _, y in equations\n               if op == '!')\n",
                "lang_text": "py"
            }
        }
    }
}