{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "856",
            "title": "Score of Parentheses",
            "titleSlug": "score-of-parentheses",
            "content": "<p>Given a balanced parentheses string <code>s</code>, return <em>the <strong>score</strong> of the string</em>.</p>\n\n<p>The <strong>score</strong> of a balanced parentheses string is based on the following rule:</p>\n\n<ul>\n\t<li><code>&quot;()&quot;</code> has score <code>1</code>.</li>\n\t<li><code>AB</code> has score <code>A + B</code>, where <code>A</code> and <code>B</code> are balanced parentheses strings.</li>\n\t<li><code>(A)</code> has score <code>2 * A</code>, where <code>A</code> is a balanced parentheses string.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(())&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()()&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 50</code></li>\n\t<li><code>s</code> consists of only <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>.</li>\n\t<li><code>s</code> is a balanced parentheses string.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5314,
            "dislikes": 186,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"175K\", \"totalSubmission\": \"272.1K\", \"totalAcceptedRaw\": 175049, \"totalSubmissionRaw\": 272056, \"acRate\": \"64.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a balanced parentheses string `s`, calculate and return the score of the string based on the following rules:\n\n*   \"()\" has a score of 1.\n*   AB has a score of A + B, where A and B are balanced parentheses strings.\n*   (A) has a score of 2 * A, where A is a balanced parentheses string.",
                "constraints": [
                    "2 <= s.length <= 50",
                    "s consists of only '(' and ')'.",
                    "s is a balanced parentheses string."
                ],
                "testcases": [
                    {
                        "input": "\"()\"",
                        "output": "1",
                        "explanation": "The input string is \"()\", which has a score of 1 according to the rules."
                    },
                    {
                        "input": "\"(())\"",
                        "output": "2",
                        "explanation": "The input string is \"(())\".  Following the rules:  The inner \"()\" has a score of 1.  The outer \"()\" surrounding it multiplies the inner score by 2, resulting in 2 * 1 = 2."
                    },
                    {
                        "input": "\"()()\"",
                        "output": "2",
                        "explanation": "The input string is \"()()\".  The string can be viewed as \"()\" + \"()\".  Each \"()\" has a score of 1.  Therefore, the total score is 1 + 1 = 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int scoreOfParentheses(string s) {\n    int ans = 0;\n    int layer = 0;\n\n    for (int i = 0; i + 1 < s.length(); ++i) {\n      const char a = s[i];\n      const char b = s[i + 1];\n      if (a == '(' && b == ')')\n        ans += 1 << layer;\n      layer += a == '(' ? 1 : -1;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int scoreOfParentheses(String s) {\n    int ans = 0;\n    int layer = 0;\n\n    for (int i = 0; i + 1 < s.length(); ++i) {\n      final char a = s.charAt(i);\n      final char b = s.charAt(i + 1);\n      if (a == '(' && b == ')')\n        ans += 1 << layer;\n      layer += a == '(' ? 1 : -1;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def scoreOfParentheses(self, s: str) -> int:\n    ans = 0\n    layer = 0\n\n    for a, b in itertools.pairwise(s):\n      if a + b == '()':\n        ans += 1 << layer\n      layer += 1 if a == '(' else -1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}