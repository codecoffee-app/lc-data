{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "87",
            "title": "Scramble String",
            "titleSlug": "scramble-string",
            "content": "<p>We can scramble a string s to get a string t using the following algorithm:</p>\n\n<ol>\n\t<li>If the length of the string is 1, stop.</li>\n\t<li>If the length of the string is &gt; 1, do the following:\n\t<ul>\n\t\t<li>Split the string into two non-empty substrings at a random index, i.e., if the string is <code>s</code>, divide it to <code>x</code> and <code>y</code> where <code>s = x + y</code>.</li>\n\t\t<li><strong>Randomly</strong>&nbsp;decide to swap the two substrings or to keep them in the same order. i.e., after this step, <code>s</code> may become <code>s = x + y</code> or <code>s = y + x</code>.</li>\n\t\t<li>Apply step 1 recursively on each of the two substrings <code>x</code> and <code>y</code>.</li>\n\t</ul>\n\t</li>\n</ol>\n\n<p>Given two strings <code>s1</code> and <code>s2</code> of <strong>the same length</strong>, return <code>true</code> if <code>s2</code> is a scrambled string of <code>s1</code>, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> One possible scenario applied on s1 is:\n&quot;great&quot; --&gt; &quot;gr/eat&quot; // divide at random index.\n&quot;gr/eat&quot; --&gt; &quot;gr/eat&quot; // random decision is not to swap the two substrings and keep them in order.\n&quot;gr/eat&quot; --&gt; &quot;g/r / e/at&quot; // apply the same algorithm recursively on both substrings. divide at random index each of them.\n&quot;g/r / e/at&quot; --&gt; &quot;r/g / e/at&quot; // random decision was to swap the first substring and to keep the second substring in the same order.\n&quot;r/g / e/at&quot; --&gt; &quot;r/g / e/ a/t&quot; // again apply the algorithm recursively, divide &quot;at&quot; to &quot;a/t&quot;.\n&quot;r/g / e/ a/t&quot; --&gt; &quot;r/g / e/ a/t&quot; // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is &quot;rgeat&quot; which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;a&quot;, s2 = &quot;a&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s1.length == s2.length</code></li>\n\t<li><code>1 &lt;= s1.length &lt;= 30</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3213,
            "dislikes": 1258,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"217.5K\", \"totalSubmission\": \"550.2K\", \"totalAcceptedRaw\": 217512, \"totalSubmissionRaw\": 550176, \"acRate\": \"39.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Two strings, s1 and s2, of the same length are given. Determine if s2 is a scrambled string of s1. A scrambled string is created by recursively splitting a string into two non-empty substrings, optionally swapping the substrings, and applying this process to the substrings. Return true if s2 is a scrambled string of s1, otherwise return false.",
                "constraints": [
                    "s1.length == s2.length",
                    "1 <= s1.length <= 30",
                    "s1 and s2 consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"great\", s2 = \"rgeat\"",
                        "output": "true",
                        "explanation": "One possible scenario involves splitting \"great\" into \"gr\" and \"eat\", then potentially swapping to get \"eatgr\". Further recursive scrambling of the substrings can result in \"rgeat\"."
                    },
                    {
                        "input": "s1 = \"abcde\", s2 = \"caebd\"",
                        "output": "false",
                        "explanation": null
                    },
                    {
                        "input": "s1 = \"a\", s2 = \"a\"",
                        "output": "true",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isScramble(string s1, string s2) {\n    if (s1 == s2)\n      return true;\n    const string hashKey = s1 + '+' + s2;\n    if (const auto it = memo.find(hashKey); it != memo.cend())\n      return it->second;\n\n    vector<int> count(128);\n\n    for (int i = 0; i < s1.length(); ++i) {\n      ++count[s1[i]];\n      --count[s2[i]];\n    }\n\n    if (any_of(count.begin(), count.end(), [](int c) { return c != 0; }))\n      return memo[hashKey] = false;\n\n    for (int i = 1; i < s1.length(); ++i) {\n      if (isScramble(s1.substr(0, i), s2.substr(0, i)) &&\n          isScramble(s1.substr(i), s2.substr(i)))\n        return memo[hashKey] = true;\n      if (isScramble(s1.substr(0, i), s2.substr(s2.length() - i)) &&\n          isScramble(s1.substr(i), s2.substr(0, s2.length() - i)))\n        return memo[hashKey] = true;\n    }\n\n    return memo[hashKey] = false;\n  }\n\n private:\n  unordered_map<string, bool> memo;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isScramble(String s1, String s2) {\n    if (s1.equals(s2))\n      return true;\n    final String hashKey = s1 + \"+\" + s2;\n    if (memo.containsKey(hashKey))\n      return memo.get(hashKey);\n\n    int[] count = new int[128];\n\n    for (int i = 0; i < s1.length(); ++i) {\n      ++count[s1.charAt(i)];\n      --count[s2.charAt(i)];\n    }\n\n    for (final int c : count)\n      if (c != 0) {\n        memo.put(hashKey, false);\n        return false;\n      }\n\n    for (int i = 1; i < s1.length(); ++i) {\n      if (isScramble(s1.substring(0, i), s2.substring(0, i)) &&\n          isScramble(s1.substring(i), s2.substring(i))) {\n        memo.put(hashKey, true);\n        return true;\n      }\n      if (isScramble(s1.substring(0, i), s2.substring(s2.length() - i)) &&\n          isScramble(s1.substring(i), s2.substring(0, s2.length() - i))) {\n        memo.put(hashKey, true);\n        return true;\n      }\n    }\n\n    memo.put(hashKey, false);\n    return false;\n  }\n\n  private Map<String, Boolean> memo = new HashMap<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  @functools.lru_cache(None)\n  def isScramble(self, s1: str, s2: str) -> bool:\n    if s1 == s2:\n      return True\n    if collections.Counter(s1) != collections.Counter(s2):\n      return False\n\n    for i in range(1, len(s1)):\n      if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n        return True\n      if self.isScramble(s1[:i], s2[len(s2) - i:]) and self.isScramble(s1[i:], s2[:len(s2) - i]):\n        return True\n\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}