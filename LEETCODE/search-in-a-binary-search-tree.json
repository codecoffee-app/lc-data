{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "700",
            "title": "Search in a Binary Search Tree",
            "titleSlug": "search-in-a-binary-search-tree",
            "content": "<p>You are given the <code>root</code> of a binary search tree (BST) and an integer <code>val</code>.</p>\n\n<p>Find the node in the BST that the node&#39;s value equals <code>val</code> and return the subtree rooted with that node. If such a node does not exist, return <code>null</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg\" style=\"width: 422px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3], val = 2\n<strong>Output:</strong> [2,1,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/12/tree2.jpg\" style=\"width: 422px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,7,1,3], val = 5\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 5000]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>7</sup></code></li>\n\t<li><code>root</code> is a binary search tree.</li>\n\t<li><code>1 &lt;= val &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5710,
            "dislikes": 181,
            "similarQuestions": "[{\"title\": \"Closest Binary Search Tree Value\", \"titleSlug\": \"closest-binary-search-tree-value\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Insert into a Binary Search Tree\", \"titleSlug\": \"insert-into-a-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Closest Nodes Queries in a Binary Search Tree\", \"titleSlug\": \"closest-nodes-queries-in-a-binary-search-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"773.7K\", \"totalSubmission\": \"978.7K\", \"totalAcceptedRaw\": 773694, \"totalSubmissionRaw\": 978687, \"acRate\": \"79.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary search tree (BST) and an integer `val`, find the node in the BST whose value equals `val`. Return the subtree rooted with that node. If such a node does not exist, return `null`.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 5000].",
                    "1 <= Node.val <= 10^7",
                    "root is a binary search tree.",
                    "1 <= val <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "root = [4,2,7,1,3], val = 2",
                        "output": "[2,1,3]",
                        "explanation": "The node with value 2 is found in the BST. The subtree rooted at that node is [2,1,3]."
                    },
                    {
                        "input": "root = [4,2,7,1,3], val = 5",
                        "output": "[]",
                        "explanation": "The value 5 is not present in the BST, so null is returned."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "closest-binary-search-tree-value",
                "title": "Closest Binary Search Tree Value",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "insert-into-a-binary-search-tree",
                "title": "Insert into a Binary Search Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "closest-nodes-queries-in-a-binary-search-tree",
                "title": "Closest Nodes Queries in a Binary Search Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* searchBST(TreeNode* root, int val) {\n    if (root == nullptr)\n      return nullptr;\n    if (root->val == val)\n      return root;\n    if (root->val > val)\n      return searchBST(root->left, val);\n    return searchBST(root->right, val);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public TreeNode searchBST(TreeNode root, int val) {\n    if (root == null)\n      return null;\n    if (root.val == val)\n      return root;\n    if (root.val > val)\n      return searchBST(root.left, val);\n    return searchBST(root.right, val);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n    if not root:\n      return None\n    if root.val == val:\n      return root\n    if root.val > val:\n      return self.searchBST(root.left, val)\n    return self.searchBST(root.right, val)\n",
                "lang_text": "py"
            }
        }
    }
}