{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "33",
            "title": "Search in Rotated Sorted Array",
            "titleSlug": "search-in-rotated-sorted-array",
            "content": "<p>There is an integer array <code>nums</code> sorted in ascending order (with <strong>distinct</strong> values).</p>\n\n<p>Prior to being passed to your function, <code>nums</code> is <strong>possibly rotated</strong> at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p>\n\n<p>Given the array <code>nums</code> <strong>after</strong> the possible rotation and an integer <code>target</code>, return <em>the index of </em><code>target</code><em> if it is in </em><code>nums</code><em>, or </em><code>-1</code><em> if it is not in </em><code>nums</code>.</p>\n\n<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 0\n<strong>Output:</strong> 4\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 3\n<strong>Output:</strong> -1\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1], target = 0\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>All values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is an ascending array that is possibly rotated.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 25112,
            "dislikes": 1475,
            "similarQuestions": "[{\"title\": \"Search in Rotated Sorted Array II\", \"titleSlug\": \"search-in-rotated-sorted-array-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Minimum in Rotated Sorted Array\", \"titleSlug\": \"find-minimum-in-rotated-sorted-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Pour Water Between Buckets to Make Water Levels Equal\", \"titleSlug\": \"pour-water-between-buckets-to-make-water-levels-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"2.5M\", \"totalSubmission\": \"6.2M\", \"totalAcceptedRaw\": 2477945, \"totalSubmissionRaw\": 6157229, \"acRate\": \"40.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a rotated sorted integer array `nums` with distinct values, find the index of a given integer `target`. The array was originally sorted in ascending order, but may have been rotated at an unknown pivot index `k` (1 <= k < nums.length). Return the index of `target` if it is in `nums`, otherwise return -1. You must write an algorithm with O(log n) runtime complexity.",
                "constraints": [
                    "1 <= nums.length <= 5000",
                    "-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup>",
                    "All values of nums are unique.",
                    "nums is an ascending array that is possibly rotated.",
                    "-10<sup>4</sup> <= target <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "nums = [4,5,6,7,0,1,2], target = 0",
                        "output": "4",
                        "explanation": "The target 0 is located at index 4 in the given array."
                    },
                    {
                        "input": "nums = [4,5,6,7,0,1,2], target = 3",
                        "output": "-1",
                        "explanation": "The target 3 is not present in the given array."
                    },
                    {
                        "input": "nums = [1], target = 0",
                        "output": "-1",
                        "explanation": "The target 0 is not present in the given array."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "search-in-rotated-sorted-array-ii",
                "title": "Search in Rotated Sorted Array II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-minimum-in-rotated-sorted-array",
                "title": "Find Minimum in Rotated Sorted Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "pour-water-between-buckets-to-make-water-levels-equal",
                "title": "Pour Water Between Buckets to Make Water Levels Equal",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int search(vector<int>& nums, int target) {\n    int l = 0;\n    int r = nums.size() - 1;\n\n    while (l <= r) {\n      const int m = (l + r) / 2;\n      if (nums[m] == target)\n        return m;\n      if (nums[l] <= nums[m]) {  // nums[l..m] are sorted\n        if (nums[l] <= target && target < nums[m])\n          r = m - 1;\n        else\n          l = m + 1;\n      } else {  // nums[m..n - 1] are sorted\n        if (nums[m] < target && target <= nums[r])\n          l = m + 1;\n        else\n          r = m - 1;\n      }\n    }\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int search(int[] nums, int target) {\n    int l = 0;\n    int r = nums.length - 1;\n\n    while (l <= r) {\n      final int m = (l + r) / 2;\n      if (nums[m] == target)\n        return m;\n      if (nums[l] <= nums[m]) { // nums[l..m] are sorted\n        if (nums[l] <= target && target < nums[m])\n          r = m - 1;\n        else\n          l = m + 1;\n      } else { // nums[m..n - 1] are sorted\n        if (nums[m] < target && target <= nums[r])\n          l = m + 1;\n        else\n          r = m - 1;\n      }\n    }\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def search(self, nums: List[int], target: int) -> int:\n    l = 0\n    r = len(nums) - 1\n\n    while l <= r:\n      m = (l + r) // 2\n      if nums[m] == target:\n        return m\n      if nums[l] <= nums[m]:  # nums[l..m] are sorted\n        if nums[l] <= target < nums[m]:\n          r = m - 1\n        else:\n          l = m + 1\n      else:  # nums[m..n - 1] are sorted\n        if nums[m] < target <= nums[r]:\n          l = m + 1\n        else:\n          r = m - 1\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}