{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1268",
            "title": "Search Suggestions System",
            "titleSlug": "search-suggestions-system",
            "content": "<p>You are given an array of strings <code>products</code> and a string <code>searchWord</code>.</p>\n\n<p>Design a system that suggests at most three product names from <code>products</code> after each character of <code>searchWord</code> is typed. Suggested products should have common prefix with <code>searchWord</code>. If there are more than three products with a common prefix return the three lexicographically minimums products.</p>\n\n<p>Return <em>a list of lists of the suggested products after each character of </em><code>searchWord</code><em> is typed</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> products = [&quot;mobile&quot;,&quot;mouse&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mousepad&quot;], searchWord = &quot;mouse&quot;\n<strong>Output:</strong> [[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],[&quot;mouse&quot;,&quot;mousepad&quot;],[&quot;mouse&quot;,&quot;mousepad&quot;],[&quot;mouse&quot;,&quot;mousepad&quot;]]\n<strong>Explanation:</strong> products sorted lexicographically = [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mouse&quot;,&quot;mousepad&quot;].\nAfter typing m and mo all products match and we show user [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;].\nAfter typing mou, mous and mouse the system suggests [&quot;mouse&quot;,&quot;mousepad&quot;].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> products = [&quot;havana&quot;], searchWord = &quot;havana&quot;\n<strong>Output:</strong> [[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;]]\n<strong>Explanation:</strong> The only word &quot;havana&quot; will be always suggested while typing the search word.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= products.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= products[i].length &lt;= 3000</code></li>\n\t<li><code>1 &lt;= sum(products[i].length) &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li>All the strings of <code>products</code> are <strong>unique</strong>.</li>\n\t<li><code>products[i]</code> consists of lowercase English letters.</li>\n\t<li><code>1 &lt;= searchWord.length &lt;= 1000</code></li>\n\t<li><code>searchWord</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4509,
            "dislikes": 225,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"275.7K\", \"totalSubmission\": \"420.4K\", \"totalAcceptedRaw\": 275741, \"totalSubmissionRaw\": 420390, \"acRate\": \"65.6%\"}",
            "hints": [
                "Brute force is a good choice because length of the string is \u2264 1000.",
                "Binary search the answer.",
                "Use Trie data structure to store the best three matching. Traverse the Trie."
            ],
            "rephrased": {
                "body": "Given an array of strings `products` and a string `searchWord`, design a system that suggests at most three product names from `products` after each character of `searchWord` is typed. Suggested products must share a common prefix with `searchWord`. If more than three products have a common prefix, return the three lexicographically smallest products.\n\nReturn a list of lists representing the suggested products after each character of `searchWord` is typed.",
                "constraints": [
                    "1 <= products.length <= 1000",
                    "1 <= products[i].length <= 3000",
                    "1 <= sum(products[i].length) <= 2 * 10^4",
                    "All strings in `products` are unique.",
                    "`products[i]` consists of lowercase English letters.",
                    "1 <= searchWord.length <= 1000",
                    "`searchWord` consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"",
                        "output": "[[\"mobile\",\"moneypot\",\"monitor\"],[\"mobile\",\"moneypot\",\"monitor\"],[\"mouse\",\"mousepad\"],[\"mouse\",\"mousepad\"],[\"mouse\",\"mousepad\"]]",
                        "explanation": "The lexicographically sorted products are [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"]. After typing 'm' and 'mo', all products match, suggesting [\"mobile\",\"moneypot\",\"monitor\"].  After typing 'mou', 'mous', and 'mouse', the system suggests [\"mouse\",\"mousepad\"]."
                    },
                    {
                        "input": "products = [\"havana\"], searchWord = \"havana\"",
                        "output": "[[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]",
                        "explanation": "The only word \"havana\" is suggested while typing the search word."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Brute force is a good choice because length of the string is \u2264 1000.",
            "Binary search the answer.",
            "Use Trie data structure to store the best three matching. Traverse the Trie."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  const string* word = nullptr;\n  TrieNode() : children(26) {}\n};\n\nclass Solution {\n public:\n  vector<vector<string>> suggestedProducts(vector<string>& products,\n                                           string searchWord) {\n    vector<vector<string>> ans;\n\n    for (const string& product : products)\n      insert(product);\n\n    shared_ptr<TrieNode> node = root;\n\n    for (const char c : searchWord) {\n      if (node == nullptr || node->children[c - 'a'] == nullptr) {\n        node = nullptr;\n        ans.push_back({});\n        continue;\n      }\n      node = node->children[c - 'a'];\n      ans.push_back(search(node));\n    }\n\n    return ans;\n  }\n\n private:\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n\n  void insert(const string& word) {\n    shared_ptr<TrieNode> node = root;\n    for (const char c : word) {\n      const int i = c - 'a';\n      if (node->children[i] == nullptr)\n        node->children[i] = make_shared<TrieNode>();\n      node = node->children[i];\n    }\n    node->word = &word;\n  }\n\n  vector<string> search(shared_ptr<TrieNode> node) {\n    vector<string> res;\n    dfs(node, res);\n    return res;\n  }\n\n  void dfs(shared_ptr<TrieNode> node, vector<string>& ans) {\n    if (ans.size() == 3)\n      return;\n    if (node == nullptr)\n      return;\n    if (node->word != nullptr)\n      ans.push_back(*node->word);\n    for (shared_ptr<TrieNode> child : node->children)\n      dfs(child, ans);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[26];\n  public String word;\n}\n\nclass Solution {\n  public List<List<String>> suggestedProducts(String[] products, String searchWord) {\n    List<List<String>> ans = new ArrayList<>();\n\n    for (final String product : products)\n      insert(product);\n\n    TrieNode node = root;\n\n    for (final char c : searchWord.toCharArray()) {\n      if (node == null || node.children[c - 'a'] == null) {\n        node = null;\n        ans.add(new ArrayList<>());\n        continue;\n      }\n      node = node.children[c - 'a'];\n      ans.add(search(node));\n    }\n\n    return ans;\n  }\n\n  private TrieNode root = new TrieNode();\n\n  private void insert(final String word) {\n    TrieNode node = root;\n    for (final char c : word.toCharArray()) {\n      final int i = c - 'a';\n      if (node.children[i] == null)\n        node.children[i] = new TrieNode();\n      node = node.children[i];\n    }\n    node.word = word;\n  }\n\n  private List<String> search(TrieNode node) {\n    List<String> res = new ArrayList<>();\n    dfs(node, res);\n    return res;\n  }\n\n  private void dfs(TrieNode node, List<String> ans) {\n    if (ans.size() == 3)\n      return;\n    if (node == null)\n      return;\n    if (node.word != null)\n      ans.add(node.word);\n    for (TrieNode child : node.children)\n      dfs(child, ans);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children: Dict[str, TrieNode] = {}\n    self.word: Optional[str] = None\n\n\nclass Solution:\n  def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:\n    ans = []\n    root = TrieNode()\n\n    def insert(word: str) -> None:\n      node = root\n      for c in word:\n        node = node.children.setdefault(c, TrieNode())\n      node.word = word\n\n    def search(node: Optional[TrieNode]) -> List[str]:\n      res: List[str] = []\n      dfs(node, res)\n      return res\n\n    def dfs(node: Optional[TrieNode], res: List[str]) -> None:\n      if len(res) == 3:\n        return\n      if not node:\n        return\n      if node.word:\n        res.append(node.word)\n      for c in string.ascii_lowercase:\n        if c in node.children:\n          dfs(node.children[c], res)\n\n    for product in products:\n      insert(product)\n\n    node = root\n\n    for c in searchWord:\n      if not node or c not in node.children:\n        node = None\n        ans.append([])\n        continue\n      node = node.children[c]\n      ans.append(search(node))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}