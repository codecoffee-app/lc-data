{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1845",
            "title": "Seat Reservation Manager",
            "titleSlug": "seat-reservation-manager",
            "content": "<p>Design a system that manages the reservation state of <code>n</code> seats that are numbered from <code>1</code> to <code>n</code>.</p>\n\n<p>Implement the <code>SeatManager</code> class:</p>\n\n<ul>\n\t<li><code>SeatManager(int n)</code> Initializes a <code>SeatManager</code> object that will manage <code>n</code> seats numbered from <code>1</code> to <code>n</code>. All seats are initially available.</li>\n\t<li><code>int reserve()</code> Fetches the <strong>smallest-numbered</strong> unreserved seat, reserves it, and returns its number.</li>\n\t<li><code>void unreserve(int seatNumber)</code> Unreserves the seat with the given <code>seatNumber</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;SeatManager&quot;, &quot;reserve&quot;, &quot;reserve&quot;, &quot;unreserve&quot;, &quot;reserve&quot;, &quot;reserve&quot;, &quot;reserve&quot;, &quot;reserve&quot;, &quot;unreserve&quot;]\n[[5], [], [], [2], [], [], [], [], [5]]\n<strong>Output</strong>\n[null, 1, 2, null, 2, 3, 4, 5, null]\n\n<strong>Explanation</strong>\nSeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.\nseatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.\nseatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.\nseatManager.reserve();    // The only available seat is seat 5, so return 5.\nseatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= seatNumber &lt;= n</code></li>\n\t<li>For each call to <code>reserve</code>, it is guaranteed that there will be at least one unreserved seat.</li>\n\t<li>For each call to <code>unreserve</code>, it is guaranteed that <code>seatNumber</code> will be reserved.</li>\n\t<li>At most <code>10<sup>5</sup></code> calls <strong>in total</strong> will be made to <code>reserve</code> and <code>unreserve</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1361,
            "dislikes": 83,
            "similarQuestions": "[{\"title\": \"Design Phone Directory\", \"titleSlug\": \"design-phone-directory\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design a Number Container System\", \"titleSlug\": \"design-a-number-container-system\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"114K\", \"totalSubmission\": \"165.3K\", \"totalAcceptedRaw\": 114047, \"totalSubmissionRaw\": 165259, \"acRate\": \"69.0%\"}",
            "hints": [
                "You need a data structure that maintains the states of the seats. This data structure should also allow you to get the first available seat and flip the state of a seat in a reasonable time.",
                "You can let the data structure contain the available seats. Then you want to be able to get the lowest element and erase an element, in a reasonable time.",
                "Ordered sets support these operations."
            ],
            "rephrased": {
                "body": "Design a system to manage the reservation status of `n` seats, numbered from 1 to `n`. Implement the `SeatManager` class with the following methods:\n\n*   `SeatManager(int n)`: Initializes a `SeatManager` object to manage `n` seats, all initially available.\n*   `int reserve()`:  Finds, reserves, and returns the number of the smallest-numbered unreserved seat.\n*   `void unreserve(int seatNumber)`: Unreserves the seat with the given `seatNumber`.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= seatNumber <= n",
                    "It is guaranteed that at least one unreserved seat is available for each call to `reserve`.",
                    "It is guaranteed that `seatNumber` will be reserved for each call to `unreserve`.",
                    "At most 10^5 calls in total will be made to `reserve` and `unreserve`."
                ],
                "testcases": [
                    {
                        "input": "[\"SeatManager\", \"reserve\", \"reserve\", \"unreserve\", \"reserve\", \"reserve\", \"reserve\", \"reserve\", \"unreserve\"]\n[[5], [], [], [2], [], [], [], [], [5]]",
                        "output": "[null, 1, 2, null, 2, 3, 4, 5, null]",
                        "explanation": "SeatManager is initialized with 5 seats. The first reserve() returns seat 1. The second reserve() returns seat 2. unreserve(2) makes seat 2 available again. The next reserve() returns seat 2. The following reserve() calls return seats 3, 4, and 5 respectively. Finally, unreserve(5) makes seat 5 available."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-phone-directory",
                "title": "Design Phone Directory",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "design-a-number-container-system",
                "title": "Design a Number Container System",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "You need a data structure that maintains the states of the seats. This data structure should also allow you to get the first available seat and flip the state of a seat in a reasonable time.",
            "You can let the data structure contain the available seats. Then you want to be able to get the lowest element and erase an element, in a reasonable time.",
            "Ordered sets support these operations."
        ],
        "relatedTopics": [
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class SeatManager {\n public:\n  SeatManager(int n) {}\n\n  int reserve() {\n    if (minHeap.empty())\n      return ++num;\n\n    const int minNum = minHeap.top();\n    minHeap.pop();\n    return minNum;\n  }\n\n  void unreserve(int seatNumber) {\n    minHeap.push(seatNumber);\n  }\n\n private:\n  priority_queue<int, vector<int>, greater<>> minHeap;\n  int num = 0;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class SeatManager {\n  public SeatManager(int n) {}\n\n  public int reserve() {\n    if (minHeap.isEmpty())\n      return ++num;\n    return minHeap.poll();\n  }\n\n  public void unreserve(int seatNumber) {\n    minHeap.offer(seatNumber);\n  }\n\n  private Queue<Integer> minHeap = new PriorityQueue<>();\n  private int num = 0;\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class SeatManager:\n  def __init__(self, n: int):\n    self.minHeap = [i + 1 for i in range(n)]\n\n  def reserve(self) -> int:\n    return heapq.heappop(self.minHeap)\n\n  def unreserve(self, seatNumber: int) -> None:\n    heapq.heappush(self.minHeap, seatNumber)\n",
                "lang_text": "py"
            }
        }
    }
}