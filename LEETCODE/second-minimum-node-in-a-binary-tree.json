{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "671",
            "title": "Second Minimum Node In a Binary Tree",
            "titleSlug": "second-minimum-node-in-a-binary-tree",
            "content": "<p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly <code>two</code> or <code>zero</code> sub-node. If the node has two sub-nodes, then this node&#39;s value is the smaller value among its two sub-nodes. More formally, the property&nbsp;<code>root.val = min(root.left.val, root.right.val)</code>&nbsp;always holds.</p>\n\n<p>Given such a binary tree, you need to output the <b>second minimum</b> value in the set made of all the nodes&#39; value in the whole tree.</p>\n\n<p>If no such second minimum value exists, output -1 instead.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg\" style=\"width: 431px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,5,null,null,5,7]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The smallest value is 2, the second smallest value is 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg\" style=\"width: 321px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,2]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The smallest value is 2, but there isn&#39;t any second smallest value.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 25]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>root.val == min(root.left.val, root.right.val)</code>&nbsp;for each internal node of the tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1773,
            "dislikes": 1842,
            "similarQuestions": "[{\"title\": \"Kth Smallest Element in a BST\", \"titleSlug\": \"kth-smallest-element-in-a-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"182.5K\", \"totalSubmission\": \"411.5K\", \"totalAcceptedRaw\": 182452, \"totalSubmissionRaw\": 411472, \"acRate\": \"44.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a special binary tree where each node has a non-negative value and either two or zero children.  If a node has two children, its value is the minimum of its children's values (i.e., `root.val = min(root.left.val, root.right.val)`). Find the second smallest value among all node values in the tree.\n\nIf no second smallest value exists, return -1.",
                "constraints": [
                    "The number of nodes in the tree is in the range `[1, 25]`.",
                    "`1 <= Node.val <= 2<sup>31</sup> - 1`",
                    "`root.val == min(root.left.val, root.right.val)` for each internal node of the tree."
                ],
                "testcases": [
                    {
                        "input": "[2,2,5,null,null,5,7]",
                        "output": "5",
                        "explanation": "The smallest value is 2, and the second smallest value is 5."
                    },
                    {
                        "input": "[2,2,2]",
                        "output": "-1",
                        "explanation": "The smallest value is 2, but there isn't any second smallest value."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "kth-smallest-element-in-a-bst",
                "title": "Kth Smallest Element in a BST",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findSecondMinimumValue(TreeNode* root) {\n    if (root == nullptr)\n      return -1;\n    return findSecondMinimumValue(root, root->val);\n  }\n\n private:\n  int findSecondMinimumValue(TreeNode* root, int mini) {\n    if (root == nullptr)\n      return -1;\n    if (root->val > mini)\n      return root->val;\n\n    const int leftMin = findSecondMinimumValue(root->left, mini);\n    const int rightMin = findSecondMinimumValue(root->right, mini);\n\n    if (leftMin == -1 || rightMin == -1)\n      return max(leftMin, rightMin);\n    return min(leftMin, rightMin);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findSecondMinimumValue(TreeNode root) {\n    if (root == null)\n      return -1;\n    return findSecondMinimumValue(root, root.val);\n  }\n\n  private int findSecondMinimumValue(TreeNode root, int min) {\n    if (root == null)\n      return -1;\n    if (root.val > min)\n      return root.val;\n\n    final int leftMin = findSecondMinimumValue(root.left, min);\n    final int rightMin = findSecondMinimumValue(root.right, min);\n\n    if (leftMin == -1 || rightMin == -1)\n      return Math.max(leftMin, rightMin);\n    return Math.min(leftMin, rightMin);\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}