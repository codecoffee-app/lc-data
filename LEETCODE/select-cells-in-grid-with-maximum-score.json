{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3276",
            "title": "Select Cells in Grid With Maximum Score",
            "titleSlug": "select-cells-in-grid-with-maximum-score",
            "content": "<p>You are given a 2D matrix <code>grid</code> consisting of positive integers.</p>\n\n<p>You have to select <em>one or more</em> cells from the matrix such that the following conditions are satisfied:</p>\n\n<ul>\n\t<li>No two selected cells are in the <strong>same</strong> row of the matrix.</li>\n\t<li>The values in the set of selected cells are <strong>unique</strong>.</li>\n</ul>\n\n<p>Your score will be the <strong>sum</strong> of the values of the selected cells.</p>\n\n<p>Return the <strong>maximum</strong> score you can achieve.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,2,3],[4,3,2],[1,1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">8</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/07/29/grid1drawio.png\" /></p>\n\n<p>We can select the cells with values 1, 3, and 4 that are colored above.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[8,7,6],[8,3,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/07/29/grid8_8drawio.png\" style=\"width: 170px; height: 114px;\" /></p>\n\n<p>We can select the cells with values 7 and 8 that are colored above.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length, grid[i].length &lt;= 10</code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 193,
            "dislikes": 6,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.2K\", \"totalSubmission\": \"68.9K\", \"totalAcceptedRaw\": 9190, \"totalSubmissionRaw\": 68874, \"acRate\": \"13.3%\"}",
            "hints": [
                "Sort all the cells in the grid by their values and keep track of their original positions.",
                "Try dynamic programming with the following states: the current cell that we might select and a bitmask representing all the rows from which we have already selected a cell so far."
            ],
            "rephrased": {
                "body": "Given a 2D matrix `grid` of positive integers, select one or more cells such that no two selected cells are in the same row and the values of the selected cells are unique. Maximize the sum of the selected cell values.",
                "constraints": [
                    "1 <= grid.length, grid[i].length <= 10",
                    "1 <= grid[i][j] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[[1,2,3],[4,3,2],[1,1,1]]",
                        "output": "8",
                        "explanation": "The optimal selection is to pick the cells with values 1, 3, and 4.  Any other selection will result in a lower score or violate the constraints."
                    },
                    {
                        "input": "[[8,7,6],[8,3,2]]",
                        "output": "15",
                        "explanation": "The optimal selection is to pick the cells with values 7 and 8. Selecting both 8's will violate the uniqueness constraint."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Sort all the cells in the grid by their values and keep track of their original positions.",
            "Try dynamic programming with the following states: the current cell that we might select and a bitmask representing all the rows from which we have already selected a cell so far."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxScore(vector<vector<int>>& grid) {\n    unordered_map<int, unordered_set<int>> numToIndices;\n    for (int index = 0; index < grid.size(); ++index)\n      for (const int num : grid[index])\n        numToIndices[num].insert(index);\n    vector<vector<int>> mem(numToIndices.size(), vector<int>(1 << grid.size()));\n    return maxScore({numToIndices.begin(), numToIndices.end()}, 0, 0, mem);\n  }\n\n private:\n  // Returns the maximum score by selecting numbers from numToIndices[i..],\n  // where `mask` is the bitmask of the used row indices.\n  int maxScore(const vector<pair<int, unordered_set<int>>>& numToIndices, int i,\n               int mask, vector<vector<int>>& mem) {\n    if (i == numToIndices.size())\n      return 0;\n    if (mem[i][mask] != 0)\n      return mem[i][mask];\n    // Skip numToIndices[i].first.\n    int res = maxScore(numToIndices, i + 1, mask, mem);\n    for (const int index : numToIndices[i].second)\n      if ((mask >> index & 1) == 0)\n        // Take numToIndices[i].first.\n        res =\n            max(res, numToIndices[i].first +\n                         maxScore(numToIndices, i + 1, mask | 1 << index, mem));\n    return mem[i][mask] = res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxScore(List<List<Integer>> grid) {\n    Map<Integer, Set<Integer>> numToIndices = new HashMap<>();\n    for (int index = 0; index < grid.size(); ++index)\n      for (final int num : grid.get(index)) {\n        numToIndices.putIfAbsent(num, new HashSet<>());\n        numToIndices.get(num).add(index);\n      }\n    int[][] mem = new int[numToIndices.size()][1 << grid.size()];\n    return maxScore(new ArrayList<>(numToIndices.entrySet()), 0, 0, mem);\n  }\n\n  // Returns the maximum score by selecting numbers from numToIndices[i..],\n  // where `mask` is the bitmask of the used row indices.\n  private int maxScore(List<Map.Entry<Integer, Set<Integer>>> numToIndices, int i, int mask,\n                       int[][] mem) {\n    if (i == numToIndices.size())\n      return 0;\n    if (mem[i][mask] != 0)\n      return mem[i][mask];\n    // Skip numToIndices[i].getKey().\n    int res = maxScore(numToIndices, i + 1, mask, mem);\n    for (int index : numToIndices.get(i).getValue())\n      if ((mask >> index & 1) == 0)\n        // Take numToIndices[i].getKey().\n        res = Math.max(res, numToIndices.get(i).getKey() +\n                                maxScore(numToIndices, i + 1, mask | (1 << index), mem));\n    return mem[i][mask] = res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxScore(self, grid: list[list[int]]) -> int:\n    numToIndices = collections.defaultdict(set)\n    for index, row in enumerate(grid):\n      for num in row:\n        numToIndices[num].add(index)\n    numToIndices = list(numToIndices.items())\n\n    @functools.lru_cache(None)\n    def dp(i: int, mask: int) -> int:\n      \"\"\"\n      Returns the maximum score by selecting numbers from numToIndices[i..],\n      where `mask` is the bitmask of the used row indices.\n      \"\"\"\n      if i == len(numToIndices):\n        return 0\n      # Skip numToIndices[i][0].\n      res = dp(i + 1, mask)\n      for index in numToIndices[i][1]:\n        if (mask >> index & 1) == 0:\n          # Take numToIndices[i][0].\n          res = max(res, numToIndices[i][0] + dp(i + 1, mask | 1 << index))\n      return res\n\n    return dp(0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}