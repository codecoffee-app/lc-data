{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1648",
            "title": "Sell Diminishing-Valued Colored Balls",
            "titleSlug": "sell-diminishing-valued-colored-balls",
            "content": "<p>You have an <code>inventory</code> of different colored balls, and there is a customer that wants <code>orders</code> balls of <strong>any</strong> color.</p>\n\n<p>The customer weirdly values the colored balls. Each colored ball&#39;s value is the number of balls <strong>of that color&nbsp;</strong>you currently have in your <code>inventory</code>. For example, if you own <code>6</code> yellow balls, the customer would pay <code>6</code> for the first yellow ball. After the transaction, there are only <code>5</code> yellow balls left, so the next yellow ball is then valued at <code>5</code> (i.e., the value of the balls decreases as you sell more to the customer).</p>\n\n<p>You are given an integer array, <code>inventory</code>, where <code>inventory[i]</code> represents the number of balls of the <code>i<sup>th</sup></code> color that you initially own. You are also given an integer <code>orders</code>, which represents the total number of balls that the customer wants. You can sell the balls <strong>in any order</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> total value that you can attain after selling </em><code>orders</code><em> colored balls</em>. As the answer may be too large, return it <strong>modulo </strong><code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/05/jj.gif\" style=\"width: 480px; height: 270px;\" />\n<pre>\n<strong>Input:</strong> inventory = [2,5], orders = 4\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).\nThe maximum total value is 2 + 5 + 4 + 3 = 14.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> inventory = [3,5], orders = 6\n<strong>Output:</strong> 19\n<strong>Explanation: </strong>Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).\nThe maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= inventory.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= inventory[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= orders &lt;= min(sum(inventory[i]), 10<sup>9</sup>)</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1053,
            "dislikes": 376,
            "similarQuestions": "[{\"title\": \"Maximum Running Time of N Computers\", \"titleSlug\": \"maximum-running-time-of-n-computers\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"36.7K\", \"totalSubmission\": \"121.8K\", \"totalAcceptedRaw\": 36673, \"totalSubmissionRaw\": 121850, \"acRate\": \"30.1%\"}",
            "hints": [
                "Greedily sell the most expensive ball.",
                "There is some value k where all balls of value > k are sold, and some, (maybe 0) of balls of value k are sold.",
                "Use binary search to find this value k, and use maths to find the total sum."
            ],
            "rephrased": {
                "body": "You have an inventory of colored balls, and a customer wants to buy a specific number of balls. The value of each ball is equal to the current number of balls of that color in your inventory.  You can sell the balls in any order. Given the initial inventory of each color and the number of orders, determine the maximum total value you can attain after selling the required number of balls. Return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= inventory.length <= 10^5",
                    "1 <= inventory[i] <= 10^9",
                    "1 <= orders <= min(sum(inventory[i]), 10^9)"
                ],
                "testcases": [
                    {
                        "input": "inventory = [2,5], orders = 4",
                        "output": "14",
                        "explanation": "Sell one ball of color 1 (value 2) and three balls of color 2 (values 5, 4, and 3).  The total value is 2 + 5 + 4 + 3 = 14."
                    },
                    {
                        "input": "inventory = [3,5], orders = 6",
                        "output": "19",
                        "explanation": "Sell two balls of color 1 (values 3 and 2) and four balls of color 2 (values 5, 4, 3, and 2). The total value is 3 + 2 + 5 + 4 + 3 + 2 = 19."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-running-time-of-n-computers",
                "title": "Maximum Running Time of N Computers",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Greedily sell the most expensive ball.",
            "There is some value k where all balls of value > k are sold, and some, (maybe 0) of balls of value k are sold.",
            "Use binary search to find this value k, and use maths to find the total sum."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxProfit(vector<int>& inventory, int orders) {\n    constexpr int kMod = 1'000'000'007;\n    long ans = 0;\n    long largestCount = 1;\n\n    std::ranges::sort(inventory, greater<>());\n\n    for (int i = 0; i < inventory.size(); ++i, ++largestCount)\n      if (i == inventory.size() - 1 || inventory[i] > inventory[i + 1]) {\n        // If we are at the last inventory, or inventory[i] > inventory[i + 1].\n        // In either case, we will pick inventory[i - largestCount + 1..i].\n        const int pick = (i == inventory.size() - 1)\n                             ? inventory[i]\n                             : inventory[i] - inventory[i + 1];\n        if (largestCount * pick >= orders) {\n          // We have run out of orders, so we need to recalculate the number of\n          // balls that we actually pick for inventory[i - largestCount + 1..i].\n          const int actualPick = orders / largestCount;\n          const int remaining = orders % largestCount;\n          return (ans +\n                  largestCount *\n                      trapezoid(inventory[i], inventory[i] - actualPick + 1) +\n                  remaining * static_cast<long>(inventory[i] - actualPick)) %\n                 kMod;\n        }\n        ans += largestCount * trapezoid(inventory[i], inventory[i] - pick + 1);\n        ans %= kMod;\n        orders -= largestCount * pick;\n      }\n\n    throw;\n  }\n\n private:\n  long trapezoid(long a, long b) {\n    return (a + b) * (a - b + 1) / 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxProfit(int[] inventory, int orders) {\n    final int kMod = 1_000_000_007;\n    long ans = 0;\n    long largestCount = 1;\n\n    Arrays.sort(inventory);\n\n    for (int i = inventory.length - 1; i >= 0; --i, ++largestCount)\n      if (i == 0 || inventory[i] > inventory[i - 1]) {\n        // If we are at the first inventory, or inventory[i] > inventory[i + 1].\n        // In either case, we will pick inventory[i..i + largestCount - 1].\n        final long pick = (i == 0) ? inventory[i] : inventory[i] - inventory[i - 1];\n        if (largestCount * pick >= orders) {\n          // We have run out of orders, so we need to recalculate the number of\n          // balls that we actually pick for inventory[i..i + largestCount - 1].\n          final long actualPick = orders / largestCount;\n          final long remaining = orders % largestCount;\n          return (int) ((ans +\n                         largestCount * trapezoid(inventory[i], inventory[i] - actualPick + 1) +\n                         remaining * (inventory[i] - actualPick)) %\n                        kMod);\n        }\n        ans += largestCount * trapezoid(inventory[i], inventory[i] - pick + 1);\n        ans %= kMod;\n        orders -= largestCount * pick;\n      }\n\n    throw new IllegalArgumentException();\n  }\n\n  private long trapezoid(long a, long b) {\n    return (a + b) * (a - b + 1) / 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxProfit(self, inventory: List[int], orders: int) -> int:\n    kMod = 1_000_000_007\n    ans = 0\n    largestCount = 1\n\n    def trapezoid(a: int, b: int) -> int:\n      return (a + b) * (a - b + 1) // 2\n\n    for a, b in itertools.pairwise(sorted(inventory, reverse=True) + [0]):\n      if a > b:\n        # If we are at the last inventory, or inventory[i] > inventory[i + 1].\n        # In either case, we will pick inventory[i - largestCount + 1..i].\n        pick = a - b\n        # We have run out of orders, so we need to recalculate the number of\n        # balls that we actually pick for inventory[i - largestCount + 1..i].\n        if largestCount * pick >= orders:\n          actualPick, remaining = divmod(orders, largestCount)\n          return (ans +\n                  largestCount * trapezoid(a, a - actualPick + 1) +\n                  remaining * (a - actualPick)) % kMod\n        ans += largestCount * trapezoid(a, a - pick + 1)\n        ans %= kMod\n        orders -= largestCount * pick\n      largestCount += 1\n",
                "lang_text": "py"
            }
        }
    }
}