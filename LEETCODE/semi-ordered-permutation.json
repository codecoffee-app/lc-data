{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2717",
            "title": "Semi-Ordered Permutation",
            "titleSlug": "semi-ordered-permutation",
            "content": "<p>You are given a <strong>0-indexed</strong> permutation of <code>n</code> integers <code>nums</code>.</p>\n\n<p>A permutation is called <strong>semi-ordered</strong> if the first number equals <code>1</code> and the last number equals <code>n</code>. You can perform the below operation as many times as you want until you make <code>nums</code> a <strong>semi-ordered</strong> permutation:</p>\n\n<ul>\n\t<li>Pick two adjacent elements in <code>nums</code>, then swap them.</li>\n</ul>\n\n<p>Return <em>the minimum number of operations to make </em><code>nums</code><em> a <strong>semi-ordered permutation</strong></em>.</p>\n\n<p>A <strong>permutation</strong> is a sequence of integers from <code>1</code> to <code>n</code> of length <code>n</code> containing each number exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,4,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can make the permutation semi-ordered using these sequence of operations: \n1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,1,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can make the permutation semi-ordered using these sequence of operations:\n1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3].\n2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,4,2,5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The permutation is already a semi-ordered permutation.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length == n &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i]&nbsp;&lt;= 50</code></li>\n\t<li><code>nums is a permutation.</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 198,
            "dislikes": 12,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"28K\", \"totalSubmission\": \"44.6K\", \"totalAcceptedRaw\": 28006, \"totalSubmissionRaw\": 44598, \"acRate\": \"62.8%\"}",
            "hints": [
                "Find the index of elements 1 and n.",
                "Let x be the position of 1 and y be the position of n. the answer is x + (n-y-1) if x < y and x + (n-y-1) - 1 if x > y."
            ],
            "rephrased": {
                "body": "Given a 0-indexed permutation `nums` of `n` integers, determine the minimum number of adjacent swaps required to make `nums` a semi-ordered permutation. A permutation is semi-ordered if the first element is 1 and the last element is `n`.  You can perform adjacent swaps any number of times.",
                "constraints": [
                    "2 <= nums.length == n <= 50",
                    "1 <= nums[i] <= 50",
                    "nums is a permutation."
                ],
                "testcases": [
                    {
                        "input": "[2,1,4,3]",
                        "output": "2",
                        "explanation": "Moving '1' to the beginning requires one swap. Moving '4' to the end requires another swap. Therefore, a total of 2 swaps are needed."
                    },
                    {
                        "input": "[2,4,1,3]",
                        "output": "3",
                        "explanation": "Moving '1' to the beginning requires two swaps. Moving '3' to the end requires one swap. Therefore, a total of 3 swaps are needed."
                    },
                    {
                        "input": "[1,3,4,2,5]",
                        "output": "0",
                        "explanation": "The permutation is already semi-ordered, as the first element is 1 and the last element is 5. No swaps are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Find the index of elements 1 and n.",
            "Let x be the position of 1 and y be the position of n. the answer is x + (n-y-1) if x < y and x + (n-y-1) - 1 if x > y."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int semiOrderedPermutation(vector<int>& nums) {\n    const int n = nums.size();\n    const int index1 = find(nums.begin(), nums.end(), 1) - nums.begin();\n    const int indexN = find(nums.begin(), nums.end(), n) - nums.begin();\n    return index1 + (n - 1 - indexN) - (index1 > indexN ? 1 : 0);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int semiOrderedPermutation(int[] nums) {\n    final int n = nums.length;\n    int index1 = -1;\n    int indexN = -1;\n    for (int i = 0; i < nums.length; ++i) {\n      if (nums[i] == 1)\n        index1 = i;\n      else if (nums[i] == n)\n        indexN = i;\n    }\n    return index1 + (n - 1 - indexN) - (index1 > indexN ? 1 : 0);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def semiOrderedPermutation(self, nums: List[int]) -> int:\n    n = len(nums)\n    index1 = nums.index(1)\n    indexN = nums.index(n)\n    return index1 + (n - 1 - indexN) - int(index1 > indexN)\n",
                "lang_text": "py"
            }
        }
    }
}