{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2284",
            "title": "Sender With Largest Word Count",
            "titleSlug": "sender-with-largest-word-count",
            "content": "<p>You have a chat log of <code>n</code> messages. You are given two string arrays <code>messages</code> and <code>senders</code> where <code>messages[i]</code> is a <strong>message</strong> sent by <code>senders[i]</code>.</p>\n\n<p>A <strong>message</strong> is list of <strong>words</strong> that are separated by a single space with no leading or trailing spaces. The <strong>word count</strong> of a sender is the total number of <strong>words</strong> sent by the sender. Note that a sender may send more than one message.</p>\n\n<p>Return <em>the sender with the <strong>largest</strong> word count</em>. If there is more than one sender with the largest word count, return <em>the one with the <strong>lexicographically largest</strong> name</em>.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Uppercase letters come before lowercase letters in lexicographical order.</li>\n\t<li><code>&quot;Alice&quot;</code> and <code>&quot;alice&quot;</code> are distinct.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> messages = [&quot;Hello userTwooo&quot;,&quot;Hi userThree&quot;,&quot;Wonderful day Alice&quot;,&quot;Nice day userThree&quot;], senders = [&quot;Alice&quot;,&quot;userTwo&quot;,&quot;userThree&quot;,&quot;Alice&quot;]\n<strong>Output:</strong> &quot;Alice&quot;\n<strong>Explanation:</strong> Alice sends a total of 2 + 3 = 5 words.\nuserTwo sends a total of 2 words.\nuserThree sends a total of 3 words.\nSince Alice has the largest word count, we return &quot;Alice&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> messages = [&quot;How is leetcode for everyone&quot;,&quot;Leetcode is useful for practice&quot;], senders = [&quot;Bob&quot;,&quot;Charlie&quot;]\n<strong>Output:</strong> &quot;Charlie&quot;\n<strong>Explanation:</strong> Bob sends a total of 5 words.\nCharlie sends a total of 5 words.\nSince there is a tie for the largest word count, we return the sender with the lexicographically larger name, Charlie.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == messages.length == senders.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= messages[i].length &lt;= 100</code></li>\n\t<li><code>1 &lt;= senders[i].length &lt;= 10</code></li>\n\t<li><code>messages[i]</code> consists of uppercase and lowercase English letters and <code>&#39; &#39;</code>.</li>\n\t<li>All the words in <code>messages[i]</code> are separated by <strong>a single space</strong>.</li>\n\t<li><code>messages[i]</code> does not have leading or trailing spaces.</li>\n\t<li><code>senders[i]</code> consists of uppercase and lowercase English letters only.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 399,
            "dislikes": 36,
            "similarQuestions": "[{\"title\": \"Top K Frequent Elements\", \"titleSlug\": \"top-k-frequent-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Top K Frequent Words\", \"titleSlug\": \"top-k-frequent-words\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"30.9K\", \"totalSubmission\": \"54.7K\", \"totalAcceptedRaw\": 30854, \"totalSubmissionRaw\": 54746, \"acRate\": \"56.4%\"}",
            "hints": [
                "The number of words in a message is equal to the number of spaces + 1.",
                "Use a hash map to count the total number of words from each sender."
            ],
            "rephrased": {
                "body": "Given a chat log represented by two string arrays, `messages` and `senders`, determine the sender with the largest word count. `messages[i]` is the message sent by `senders[i]`. The word count of a sender is the total number of words they have sent across all messages. If multiple senders have the same largest word count, return the sender with the lexicographically largest name.",
                "constraints": [
                    "n == messages.length == senders.length",
                    "1 <= n <= 10^4",
                    "1 <= messages[i].length <= 100",
                    "1 <= senders[i].length <= 10",
                    "messages[i] consists of uppercase and lowercase English letters and ' '.",
                    "All the words in messages[i] are separated by a single space.",
                    "messages[i] does not have leading or trailing spaces.",
                    "senders[i] consists of uppercase and lowercase English letters only."
                ],
                "testcases": [
                    {
                        "input": "messages = [\"Hello userTwooo\",\"Hi userThree\",\"Wonderful day Alice\",\"Nice day userThree\"], senders = [\"Alice\",\"userTwo\",\"userThree\",\"Alice\"]",
                        "output": "\"Alice\"",
                        "explanation": "Alice sent 'Hello userTwooo' and 'Nice day userThree', totaling 2 + 3 = 5 words. userTwo sent 'Hi userThree' totaling 2 words. userThree sent 'Wonderful day Alice' totaling 3 words. Alice has the largest word count."
                    },
                    {
                        "input": "messages = [\"How is leetcode for everyone\",\"Leetcode is useful for practice\"], senders = [\"Bob\",\"Charlie\"]",
                        "output": "\"Charlie\"",
                        "explanation": "Bob sent 'How is leetcode for everyone' totaling 5 words. Charlie sent 'Leetcode is useful for practice' totaling 5 words. Since Bob and Charlie both have the same word count the function returns Charlie because Charlie is lexicographically larger than Bob."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "top-k-frequent-elements",
                "title": "Top K Frequent Elements",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "top-k-frequent-words",
                "title": "Top K Frequent Words",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The number of words in a message is equal to the number of spaces + 1.",
            "Use a hash map to count the total number of words from each sender."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string largestWordCount(vector<string>& messages, vector<string>& senders) {\n    const int n = messages.size();\n    string ans;\n    int maxWordsSent = 0;\n    unordered_map<string, int> count;  // {sender, # words sent}\n\n    for (int i = 0; i < n; ++i) {\n      const string& message = messages[i];\n      const string& sender = senders[i];\n      const int wordsCount =\n          std::count(message.begin(), message.end(), ' ') + 1;\n      count[sender] += wordsCount;\n      const int numWordsSent = count[sender];\n      if (numWordsSent > maxWordsSent) {\n        ans = sender;\n        maxWordsSent = numWordsSent;\n      } else if (numWordsSent == maxWordsSent && sender > ans) {\n        ans = sender;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String largestWordCount(String[] messages, String[] senders) {\n    final int n = messages.length;\n    String ans = \"\";\n    int maxWordsSent = 0;\n    Map<String, Integer> count = new HashMap<>(); // {sender, # words sent}\n\n    for (int i = 0; i < n; ++i) {\n      final String message = messages[i];\n      final String sender = senders[i];\n      final int wordsCount = (int) message.chars().filter(c -> c == ' ').count() + 1;\n      final int numWordsSent = count.merge(sender, wordsCount, Integer::sum);\n      if (numWordsSent > maxWordsSent) {\n        ans = sender;\n        maxWordsSent = numWordsSent;\n      } else if (numWordsSent == maxWordsSent && sender.compareTo(ans) > 0) {\n        ans = sender;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestWordCount(self, messages: List[str], senders: List[str]) -> str:\n    n = len(messages)\n    ans = ''\n    maxWordsSent = 0\n    count = collections.Counter()  # [sender, # Words sent]\n\n    for message, sender in zip(messages, senders):\n      wordsCount = message.count(' ') + 1\n      count[sender] += wordsCount\n      numWordsSent = count[sender]\n      if numWordsSent > maxWordsSent:\n        ans = sender\n        maxWordsSent = numWordsSent\n      elif numWordsSent == maxWordsSent and sender > ans:\n        ans = sender\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}