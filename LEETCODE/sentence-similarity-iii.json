{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1813",
            "title": "Sentence Similarity III",
            "titleSlug": "sentence-similarity-iii",
            "content": "<p>A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, <code>&quot;Hello World&quot;</code>, <code>&quot;HELLO&quot;</code>, <code>&quot;hello world hello world&quot;</code> are all sentences. Words consist of <strong>only</strong> uppercase and lowercase English letters.</p>\n\n<p>Two sentences <code>sentence1</code> and <code>sentence2</code> are <strong>similar</strong> if it is possible to insert an arbitrary sentence <strong>(possibly empty)</strong> inside one of these sentences such that the two sentences become equal. For example, <code>sentence1 = &quot;Hello my name is Jane&quot;</code> and <code>sentence2 = &quot;Hello Jane&quot;</code> can be made equal by inserting <code>&quot;my name is&quot;</code> between <code>&quot;Hello&quot;</code> and <code>&quot;Jane&quot;</code> in <code>sentence2</code>.</p>\n\n<p>Given two sentences <code>sentence1</code> and <code>sentence2</code>, return <code>true</code> <em>if </em><code>sentence1</code> <em>and </em><code>sentence2</code> <em>are similar.</em> Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence1 = &quot;My name is Haley&quot;, sentence2 = &quot;My Haley&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> sentence2 can be turned to sentence1 by inserting &quot;name is&quot; between &quot;My&quot; and &quot;Haley&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence1 = &quot;of&quot;, sentence2 = &quot;A lot of words&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>No single sentence can be inserted inside one of the sentences to make it equal to the other.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> sentence1 = &quot;Eating right now&quot;, sentence2 = &quot;Eating&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> sentence2 can be turned to sentence1 by inserting &quot;right now&quot; at the end of the sentence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sentence1.length, sentence2.length &lt;= 100</code></li>\n\t<li><code>sentence1</code> and <code>sentence2</code> consist of lowercase and uppercase English letters and spaces.</li>\n\t<li>The words in <code>sentence1</code> and <code>sentence2</code> are separated by a single space.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 384,
            "dislikes": 61,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.4K\", \"totalSubmission\": \"46K\", \"totalAcceptedRaw\": 15358, \"totalSubmissionRaw\": 45976, \"acRate\": \"33.4%\"}",
            "hints": [
                "One way to look at it is to find one sentence as a concatenation of a prefix and suffix from the other sentence.",
                "Get the longest common prefix between them and the longest common suffix."
            ],
            "rephrased": {
                "body": "Given two sentences, `sentence1` and `sentence2`, determine if they are similar. Two sentences are considered similar if one can be made equal to the other by inserting an arbitrary sentence (possibly empty) into it. A sentence is a list of words separated by a single space, containing only uppercase and lowercase English letters.",
                "constraints": [
                    "1 <= sentence1.length, sentence2.length <= 100",
                    "sentence1 and sentence2 consist of lowercase and uppercase English letters and spaces.",
                    "The words in sentence1 and sentence2 are separated by a single space."
                ],
                "testcases": [
                    {
                        "input": "sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"",
                        "output": "true",
                        "explanation": "sentence2 can be transformed into sentence1 by inserting \"name is\" between \"My\" and \"Haley\"."
                    },
                    {
                        "input": "sentence1 = \"of\", sentence2 = \"A lot of words\"",
                        "output": "false",
                        "explanation": "It's impossible to insert a sentence into either sentence to make them equal."
                    },
                    {
                        "input": "sentence1 = \"Eating right now\", sentence2 = \"Eating\"",
                        "output": "true",
                        "explanation": "sentence2 can be transformed into sentence1 by inserting \"right now\" at the end of the sentence."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "One way to look at it is to find one sentence as a concatenation of a prefix and suffix from the other sentence.",
            "Get the longest common prefix between them and the longest common suffix."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool areSentencesSimilar(string sentence1, string sentence2) {\n    if (sentence1.length() == sentence2.length())\n      return sentence1 == sentence2;\n\n    vector<string> words1 = split(sentence1);\n    vector<string> words2 = split(sentence2);\n    const int m = words1.size();\n    const int n = words2.size();\n    if (m > n)\n      return areSentencesSimilar(sentence2, sentence1);\n\n    int i = 0;  // words1's index\n    while (i < m && words1[i] == words2[i])\n      ++i;\n    while (i < m && words1[i] == words2[i + n - m])\n      ++i;\n\n    return i == m;\n  }\n\n private:\n  vector<string> split(const string& sentence) {\n    vector<string> words;\n    istringstream iss(sentence);\n\n    for (string s; iss >> s;)\n      words.push_back(s);\n\n    return words;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean areSentencesSimilar(String sentence1, String sentence2) {\n    if (sentence1.length() == sentence2.length())\n      return sentence1.equals(sentence2);\n\n    String[] words1 = sentence1.split(\" \");\n    String[] words2 = sentence2.split(\" \");\n    final int m = words1.length;\n    final int n = words2.length;\n    if (m > n)\n      return areSentencesSimilar(sentence2, sentence1);\n\n    int i = 0; // words1's index\n    while (i < m && words1[i].equals(words2[i]))\n      ++i;\n    while (i < m && words1[i].equals(words2[i + n - m]))\n      ++i;\n\n    return i == m;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def areSentencesSimilar(self, sentence1: str, sentence2: str) -> bool:\n    if len(sentence1) == len(sentence2):\n      return sentence1 == sentence2\n\n    words1 = sentence1.split()\n    words2 = sentence2.split()\n    m, n = map(len, (words1, words2))\n    if m > n:\n      return self.areSentencesSimilar(sentence2, sentence1)\n\n    i = 0  # words1's index\n    while i < m and words1[i] == words2[i]:\n      i += 1\n    while i < m and words1[i] == words2[i + n - m]:\n      i += 1\n\n    return i == m\n",
                "lang_text": "py"
            }
        }
    }
}