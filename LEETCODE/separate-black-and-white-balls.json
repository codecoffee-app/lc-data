{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2938",
            "title": "Separate Black and White Balls",
            "titleSlug": "separate-black-and-white-balls",
            "content": "<p>There are <code>n</code> balls on a table, each ball has a color black or white.</p>\n\n<p>You are given a <strong>0-indexed</strong> binary string <code>s</code> of length <code>n</code>, where <code>1</code> and <code>0</code> represent black and white balls, respectively.</p>\n\n<p>In each step, you can choose two adjacent balls and swap them.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of steps to group all the black balls to the right and all the white balls to the left</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;101&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = &quot;011&quot;.\nInitially, 1s are not grouped together, requiring at least 1 step to group them to the right.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;100&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = &quot;010&quot;.\n- Swap s[1] and s[2], s = &quot;001&quot;.\nIt can be proven that the minimum number of steps needed is 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0111&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All the black balls are already grouped to the right.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 181,
            "dislikes": 6,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.1K\", \"totalSubmission\": \"43.4K\", \"totalAcceptedRaw\": 23081, \"totalSubmissionRaw\": 43411, \"acRate\": \"53.2%\"}",
            "hints": [
                "Every <code>1</code> in the string <code>s</code> should be swapped with every <code>0</code> on its right side.",
                "Iterate right to left and count the number of <code>0</code> that have already occurred, whenever you iterate on <code>1</code> add that counter to the answer."
            ],
            "rephrased": {
                "body": "Given a 0-indexed binary string `s` of length `n`, where '1' represents a black ball and '0' represents a white ball, determine the minimum number of adjacent swaps required to group all black balls to the right and all white balls to the left.",
                "constraints": [
                    "1 <= n == s.length <= 10^5",
                    "s[i] is either '0' or '1'."
                ],
                "testcases": [
                    {
                        "input": "101",
                        "output": 1,
                        "explanation": "The optimal sequence of swaps is to swap s[0] and s[1], resulting in \"011\". This groups the black balls to the right with only one swap."
                    },
                    {
                        "input": "100",
                        "output": 2,
                        "explanation": "The optimal sequence of swaps is as follows:\n1. Swap s[0] and s[1], resulting in \"010\".\n2. Swap s[1] and s[2], resulting in \"001\".\nTherefore, the minimum number of swaps required is 2."
                    },
                    {
                        "input": "0111",
                        "output": 0,
                        "explanation": "The black balls are already grouped to the right, requiring no swaps."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Every <code>1</code> in the string <code>s</code> should be swapped with every <code>0</code> on its right side.",
            "Iterate right to left and count the number of <code>0</code> that have already occurred, whenever you iterate on <code>1</code> add that counter to the answer."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long minimumSteps(string s) {\n    long long ans = 0;\n    int ones = 0;\n\n    for (const char c : s)\n      if (c == '1')\n        ++ones;\n      else  // Move 1s to the front of the current '0'.\n        ans += ones;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long minimumSteps(String s) {\n    long ans = 0;\n    int ones = 0;\n\n    for (final char c : s.toCharArray())\n      if (c == '1')\n        ++ones;\n      else // Move 1s to the front of the current '0'.\n        ans += ones;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumSteps(self, s: str) -> int:\n    ans = 0\n    ones = 0\n\n    for c in s:\n      if c == '1':\n        ones += 1\n      else:  # Move 1s to the front of the current '0'.\n        ans += ones\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}