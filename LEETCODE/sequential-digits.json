{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1291",
            "title": "Sequential Digits",
            "titleSlug": "sequential-digits",
            "content": "<p>An&nbsp;integer has <em>sequential digits</em> if and only if each digit in the number is one more than the previous digit.</p>\n\n<p>Return a <strong>sorted</strong> list of all the integers&nbsp;in the range <code>[low, high]</code>&nbsp;inclusive that have sequential digits.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> low = 100, high = 300\n<strong>Output:</strong> [123,234]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> low = 1000, high = 13000\n<strong>Output:</strong> [1234,2345,3456,4567,5678,6789,12345]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>10 &lt;= low &lt;= high &lt;= 10^9</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1953,
            "dislikes": 109,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"92.9K\", \"totalSubmission\": \"151.5K\", \"totalAcceptedRaw\": 92864, \"totalSubmissionRaw\": 151461, \"acRate\": \"61.3%\"}",
            "hints": [
                "Generate all numbers with sequential digits and check if they are in the given range.",
                "Fix the starting digit then do a recursion that tries to append all valid digits."
            ],
            "rephrased": {
                "body": "Find all integers within a given range [low, high] that have sequential digits. An integer has sequential digits if each digit in the number is one more than the previous digit. Return a sorted list of these integers.",
                "constraints": [
                    "10 <= low <= high <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "low = 100, high = 300",
                        "output": "[123, 234]",
                        "explanation": "Integers with sequential digits between 100 and 300 are 123 and 234."
                    },
                    {
                        "input": "low = 1000, high = 13000",
                        "output": "[1234, 2345, 3456, 4567, 5678, 6789, 12345]",
                        "explanation": "Integers with sequential digits between 1000 and 13000 are 1234, 2345, 3456, 4567, 5678, 6789, and 12345."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Generate all numbers with sequential digits and check if they are in the given range.",
            "Fix the starting digit then do a recursion that tries to append all valid digits."
        ],
        "relatedTopics": [
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> sequentialDigits(int low, int high) {\n    vector<int> ans;\n    queue<int> q{{1, 2, 3, 4, 5, 6, 7, 8, 9}};\n\n    while (!q.empty()) {\n      const int num = q.front();\n      q.pop();\n      if (num > high)\n        return ans;\n      if (low <= num && num <= high)\n        ans.push_back(num);\n      const int lastDigit = num % 10;\n      if (lastDigit < 9)\n        q.push(num * 10 + lastDigit + 1);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<Integer> sequentialDigits(int low, int high) {\n    List<Integer> ans = new ArrayList<>();\n    Queue<Integer> q = new ArrayDeque<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));\n\n    while (!q.isEmpty()) {\n      final int num = q.poll();\n      if (num > high)\n        return ans;\n      if (low <= num && num <= high)\n        ans.add(num);\n      final int lastDigit = num % 10;\n      if (lastDigit < 9)\n        q.offer(num * 10 + lastDigit + 1);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sequentialDigits(self, low: int, high: int) -> List[int]:\n    ans = []\n    q = collections.deque([num for num in range(1, 10)])\n\n    while q:\n      num = q.popleft()\n      if num > high:\n        return ans\n      if low <= num and num <= high:\n        ans.append(num)\n      lastDigit = num % 10\n      if lastDigit < 9:\n        q.push(num * 10 + lastDigit + 1)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}