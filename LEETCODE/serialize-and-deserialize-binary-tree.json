{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "297",
            "title": "Serialize and Deserialize Binary Tree",
            "titleSlug": "serialize-and-deserialize-binary-tree",
            "content": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n\n<p><strong>Clarification:</strong> The input/output format is the same as <a href=\"https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-\" target=\"_blank\">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" style=\"width: 442px; height: 324px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,null,4,5]\n<strong>Output:</strong> [1,2,3,null,null,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 9770,
            "dislikes": 360,
            "similarQuestions": "[{\"title\": \"Encode and Decode Strings\", \"titleSlug\": \"encode-and-decode-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize BST\", \"titleSlug\": \"serialize-and-deserialize-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Duplicate Subtrees\", \"titleSlug\": \"find-duplicate-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize N-ary Tree\", \"titleSlug\": \"serialize-and-deserialize-n-ary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"815.9K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 815923, \"totalSubmissionRaw\": 1450644, \"acRate\": \"56.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design an algorithm to serialize and deserialize a binary tree. Serialization is the process of converting a binary tree into a string representation. Deserialization is the process of reconstructing the original binary tree from its string representation. The goal is to ensure that a binary tree can be serialized into a string, and that string can be deserialized to produce a binary tree identical to the original.",
                "constraints": [
                    "The number of nodes in the tree is in the range [0, 10<sup>4</sup>].",
                    "-1000 <= Node.val <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,null,null,4,5]",
                        "output": "[1,2,3,null,null,4,5]",
                        "explanation": "Represents a binary tree where 1 is the root, 2 is the left child, 3 is the right child. 4 and 5 are the left and right child of 3 respectively."
                    },
                    {
                        "input": "[]",
                        "output": "[]",
                        "explanation": "Represents an empty binary tree."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "encode-and-decode-strings",
                "title": "Encode and Decode Strings",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "serialize-and-deserialize-bst",
                "title": "Serialize and Deserialize BST",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-duplicate-subtrees",
                "title": "Find Duplicate Subtrees",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "serialize-and-deserialize-n-ary-tree",
                "title": "Serialize and Deserialize N-ary Tree",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Codec {\n public:\n  // Encodes a tree to a single string.\n  string serialize(TreeNode* root) {\n    if (root == nullptr)\n      return \"\";\n\n    string s;\n    queue<TreeNode*> q{{root}};\n\n    while (!q.empty()) {\n      TreeNode* node = q.front();\n      q.pop();\n      if (node != nullptr) {\n        s += to_string(node->val) + \" \";\n        q.push(node->left);\n        q.push(node->right);\n      } else {\n        s += \"n \";\n      }\n    }\n\n    return s;\n  }\n\n  // Decodes your encoded data to tree.\n  TreeNode* deserialize(string data) {\n    if (data.empty())\n      return nullptr;\n\n    istringstream iss(data);\n    string word;\n    iss >> word;\n    TreeNode* root = new TreeNode(stoi(word));\n    queue<TreeNode*> q{{root}};\n\n    while (iss >> word) {\n      TreeNode* node = q.front();\n      q.pop();\n      if (word != \"n\") {\n        node->left = new TreeNode(stoi(word));\n        q.push(node->left);\n      }\n      iss >> word;\n      if (word != \"n\") {\n        node->right = new TreeNode(stoi(word));\n        q.push(node->right);\n      }\n    }\n\n    return root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Codec {\n  // Encodes a tree to a single string.\n  public String serialize(TreeNode root) {\n    if (root == null)\n      return \"\";\n\n    StringBuilder sb = new StringBuilder();\n    Queue<TreeNode> q = new LinkedList<>(Arrays.asList(root));\n\n    while (!q.isEmpty()) {\n      TreeNode node = q.poll();\n      if (node == null) {\n        sb.append(\"n \");\n      } else {\n        sb.append(node.val).append(\" \");\n        q.offer(node.left);\n        q.offer(node.right);\n      }\n    }\n\n    return sb.toString();\n  }\n\n  // Decodes your encoded data to tree.\n  public TreeNode deserialize(String data) {\n    if (data.equals(\"\"))\n      return null;\n\n    final String[] vals = data.split(\" \");\n    TreeNode root = new TreeNode(Integer.parseInt(vals[0]));\n    Queue<TreeNode> q = new LinkedList<>(Arrays.asList(root));\n\n    for (int i = 1; i < vals.length; i += 2) {\n      TreeNode node = q.poll();\n      if (!vals[i].equals(\"n\")) {\n        node.left = new TreeNode(Integer.parseInt(vals[i]));\n        q.offer(node.left);\n      }\n      if (!vals[i + 1].equals(\"n\")) {\n        node.right = new TreeNode(Integer.parseInt(vals[i + 1]));\n        q.offer(node.right);\n      }\n    }\n\n    return root;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Codec:\n  def serialize(self, root: 'TreeNode') -> str:\n    \"\"\"Encodes a tree to a single string.\"\"\"\n    if not root:\n      return ''\n\n    s = ''\n    q = collections.deque([root])\n\n    while q:\n      node = q.popleft()\n      if node:\n        s += str(node.val) + ' '\n        q.append(node.left)\n        q.append(node.right)\n      else:\n        s += 'n '\n\n    return s\n\n  def deserialize(self, data: str) -> 'TreeNode':\n    \"\"\"Decodes your encoded data to tree.\"\"\"\n    if not data:\n      return None\n\n    vals = data.split()\n    root = TreeNode(vals[0])\n    q = collections.deque([root])\n\n    for i in range(1, len(vals), 2):\n      node = q.popleft()\n      if vals[i] != 'n':\n        node.left = TreeNode(vals[i])\n        q.append(node.left)\n      if vals[i + 1] != 'n':\n        node.right = TreeNode(vals[i + 1])\n        q.append(node.right)\n\n    return root\n",
                "lang_text": "py"
            }
        }
    }
}