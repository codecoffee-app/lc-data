{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "449",
            "title": "Serialize and Deserialize BST",
            "titleSlug": "serialize-and-deserialize-bst",
            "content": "<p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a <b>binary search tree</b>. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p>\n\n<p><b>The encoded string should be as compact as possible.</b></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> [2,1,3]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The input tree is <strong>guaranteed</strong> to be a binary search tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3430,
            "dislikes": 162,
            "similarQuestions": "[{\"title\": \"Serialize and Deserialize Binary Tree\", \"titleSlug\": \"serialize-and-deserialize-binary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find Duplicate Subtrees\", \"titleSlug\": \"find-duplicate-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize N-ary Tree\", \"titleSlug\": \"serialize-and-deserialize-n-ary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"228.3K\", \"totalSubmission\": \"397.5K\", \"totalAcceptedRaw\": 228338, \"totalSubmissionRaw\": 397528, \"acRate\": \"57.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Serialization is the process of converting a data structure, such as a binary search tree, into a linear sequence of bits. This allows it to be stored in a file, memory buffer, or transmitted over a network. Deserialization is the reverse process, reconstructing the original data structure from the serialized representation.\n\nDesign an algorithm to serialize and deserialize a binary search tree. The encoded string should be as compact as possible, ensuring the original tree structure can be accurately restored.",
                "constraints": [
                    "The number of nodes in the tree is in the range [0, 10<sup>4</sup>].",
                    "0 <= Node.val <= 10<sup>4</sup>",
                    "The input tree is guaranteed to be a binary search tree."
                ],
                "testcases": [
                    {
                        "input": "[2,1,3]",
                        "output": "[2,1,3]",
                        "explanation": null
                    },
                    {
                        "input": "[]",
                        "output": "[]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "serialize-and-deserialize-binary-tree",
                "title": "Serialize and Deserialize Binary Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-duplicate-subtrees",
                "title": "Find Duplicate Subtrees",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "serialize-and-deserialize-n-ary-tree",
                "title": "Serialize and Deserialize N-ary Tree",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Codec {\n public:\n  string serialize(TreeNode* root) {\n    if (root == nullptr)\n      return \"\";\n\n    string s;\n\n    serialize(root, s);\n    return s;\n  }\n\n  TreeNode* deserialize(string data) {\n    if (data.empty())\n      return nullptr;\n\n    istringstream iss(data);\n    queue<int> q;\n\n    for (string s; iss >> s;)\n      q.push(stoi(s));\n\n    return deserialize(INT_MIN, INT_MAX, q);\n  }\n\n private:\n  void serialize(TreeNode* root, string& s) {\n    if (root == nullptr)\n      return;\n\n    s += to_string(root->val) + \" \";\n    serialize(root->left, s);\n    serialize(root->right, s);\n  }\n\n  TreeNode* deserialize(int min, int max, queue<int>& q) {\n    if (q.empty())\n      return nullptr;\n\n    const int val = q.front();\n    if (val < min || val > max)\n      return nullptr;\n\n    q.pop();\n    TreeNode* root = new TreeNode(val);\n    root->left = deserialize(min, val, q);\n    root->right = deserialize(val, max, q);\n    return root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Codec {\n  // Encodes a tree to a single string.\n  public String serialize(TreeNode root) {\n    if (root == null)\n      return \"\";\n\n    StringBuilder sb = new StringBuilder();\n\n    serialize(root, sb);\n    return sb.toString();\n  }\n\n  // Decodes your encoded data to tree.\n  public TreeNode deserialize(String data) {\n    if (data.isEmpty())\n      return null;\n\n    final String[] vals = data.split(\" \");\n    Queue<Integer> q = new ArrayDeque<>();\n\n    for (final String val : vals)\n      q.offer(Integer.parseInt(val));\n\n    return deserialize(Integer.MIN_VALUE, Integer.MAX_VALUE, q);\n  }\n\n  private void serialize(TreeNode root, StringBuilder sb) {\n    if (root == null)\n      return;\n\n    sb.append(root.val).append(\" \");\n    serialize(root.left, sb);\n    serialize(root.right, sb);\n  }\n\n  private TreeNode deserialize(int min, int max, Queue<Integer> q) {\n    if (q.isEmpty())\n      return null;\n\n    final int val = q.peek();\n    if (val < min || val > max)\n      return null;\n\n    q.poll();\n    TreeNode root = new TreeNode(val);\n    root.left = deserialize(min, val, q);\n    root.right = deserialize(val, max, q);\n    return root;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}