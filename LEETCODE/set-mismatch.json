{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "645",
            "title": "Set Mismatch",
            "titleSlug": "set-mismatch",
            "content": "<p>You have a set of integers <code>s</code>, which originally contains all the numbers from <code>1</code> to <code>n</code>. Unfortunately, due to some error, one of the numbers in <code>s</code> got duplicated to another number in the set, which results in <strong>repetition of one</strong> number and <strong>loss of another</strong> number.</p>\n\n<p>You are given an integer array <code>nums</code> representing the data status of this set after the error.</p>\n\n<p>Find the number that occurs twice and the number that is missing and return <em>them in the form of an array</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,2,4]\n<strong>Output:</strong> [2,3]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1]\n<strong>Output:</strong> [1,2]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3969,
            "dislikes": 926,
            "similarQuestions": "[{\"title\": \"Find the Duplicate Number\", \"titleSlug\": \"find-the-duplicate-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"296.4K\", \"totalSubmission\": \"698.2K\", \"totalAcceptedRaw\": 296414, \"totalSubmissionRaw\": 698226, \"acRate\": \"42.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given an integer array `nums` that represents a set of integers which originally contained all numbers from 1 to `n`. Due to an error, one number in the set was duplicated, causing another number to be lost. Your task is to identify the duplicated number and the missing number in the set.",
                "constraints": [
                    "2 <= nums.length <= 10^4",
                    "1 <= nums[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[1,2,2,4]",
                        "output": "[2,3]",
                        "explanation": "The number 2 appears twice, and the number 3 is missing from the original set [1, 2, 3, 4]."
                    },
                    {
                        "input": "[1,1]",
                        "output": "[1,2]",
                        "explanation": "The number 1 appears twice, and the number 2 is missing from the original set [1, 2]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-the-duplicate-number",
                "title": "Find the Duplicate Number",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findErrorNums(vector<int>& nums) {\n    int duplicate;\n\n    for (const int num : nums)\n      if (nums[abs(num) - 1] < 0)\n        duplicate = abs(num);\n      else\n        nums[abs(num) - 1] *= -1;\n\n    for (int i = 0; i < nums.size(); ++i)\n      if (nums[i] > 0)\n        return {duplicate, i + 1};\n\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] findErrorNums(int[] nums) {\n    int duplicate = 0;\n\n    for (final int num : nums) {\n      if (nums[Math.abs(num) - 1] < 0)\n        duplicate = Math.abs(num);\n      else\n        nums[Math.abs(num) - 1] *= -1;\n    }\n\n    for (int i = 0; i < nums.length; ++i)\n      if (nums[i] > 0)\n        return new int[] {duplicate, i + 1};\n\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findErrorNums(self, nums: List[int]) -> List[int]:\n    for num in nums:\n      if nums[abs(num) - 1] < 0:\n        duplicate = abs(num)\n      else:\n        nums[abs(num) - 1] *= -1\n\n    for i, num in enumerate(nums):\n      if num > 0:\n        return [duplicate, i + 1]\n",
                "lang_text": "py"
            }
        }
    }
}