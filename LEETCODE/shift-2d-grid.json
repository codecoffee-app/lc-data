{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1260",
            "title": "Shift 2D Grid",
            "titleSlug": "shift-2d-grid",
            "content": "<p>Given a 2D <code>grid</code> of size <code>m x n</code>&nbsp;and an integer <code>k</code>. You need to shift the <code>grid</code>&nbsp;<code>k</code> times.</p>\n\n<p>In one shift operation:</p>\n\n<ul>\n\t<li>Element at <code>grid[i][j]</code> moves to <code>grid[i][j + 1]</code>.</li>\n\t<li>Element at <code>grid[i][n - 1]</code> moves to <code>grid[i + 1][0]</code>.</li>\n\t<li>Element at <code>grid[m&nbsp;- 1][n - 1]</code> moves to <code>grid[0][0]</code>.</li>\n</ul>\n\n<p>Return the <em>2D grid</em> after applying shift operation <code>k</code> times.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/05/e1.png\" style=\"width: 400px; height: 178px;\" />\n<pre>\n<strong>Input:</strong> <code>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 1\n<strong>Output:</strong> [[9,1,2],[3,4,5],[6,7,8]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/05/e2.png\" style=\"width: 400px; height: 166px;\" />\n<pre>\n<strong>Input:</strong> <code>grid</code> = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\n<strong>Output:</strong> [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> <code>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 9\n<strong>Output:</strong> [[1,2,3],[4,5,6],[7,8,9]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m ==&nbsp;grid.length</code></li>\n\t<li><code>n ==&nbsp;grid[i].length</code></li>\n\t<li><code>1 &lt;= m &lt;= 50</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>-1000 &lt;= grid[i][j] &lt;= 1000</code></li>\n\t<li><code>0 &lt;= k &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1703,
            "dislikes": 338,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"102.1K\", \"totalSubmission\": \"151.4K\", \"totalAcceptedRaw\": 102126, \"totalSubmissionRaw\": 151428, \"acRate\": \"67.4%\"}",
            "hints": [
                "Simulate step by step. move grid[i][j] to grid[i][j+1]. handle last column of the grid.",
                "Put the matrix row by row to a vector. take k % vector.length and move last k of the vector to the beginning. put the vector to the matrix back the same way."
            ],
            "rephrased": {
                "body": "Given a 2D grid of size m x n and an integer k, shift the grid k times. In each shift operation:\n\n* Element at grid[i][j] moves to grid[i][j + 1].\n* Element at grid[i][n - 1] moves to grid[i + 1][0].\n* Element at grid[m - 1][n - 1] moves to grid[0][0].\n\nReturn the 2D grid after applying the shift operation k times.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m <= 50",
                    "1 <= n <= 50",
                    "-1000 <= grid[i][j] <= 1000",
                    "0 <= k <= 100"
                ],
                "testcases": [
                    {
                        "input": "grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
                        "output": "[[9,1,2],[3,4,5],[6,7,8]]",
                        "explanation": null
                    },
                    {
                        "input": "grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4",
                        "output": "[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]",
                        "explanation": null
                    },
                    {
                        "input": "grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9",
                        "output": "[[1,2,3],[4,5,6],[7,8,9]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Simulate step by step. move grid[i][j] to grid[i][j+1]. handle last column of the grid.",
            "Put the matrix row by row to a vector. take k % vector.length and move last k of the vector to the beginning. put the vector to the matrix back the same way."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    vector<vector<int>> ans(m, vector<int>(n));\n\n    k %= m * n;\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        int index = (i * n + j + k) % (m * n);\n        int x = index / n;\n        int y = index % n;\n        ans[x][y] = grid[i][j];\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> shiftGrid(int[][] grid, int k) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    List<List<Integer>> ans = new ArrayList<>();\n    int[][] arr = new int[m][n];\n\n    k %= m * n;\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j) {\n        int index = (i * n + j + k) % (m * n);\n        int x = index / n;\n        int y = index % n;\n        arr[x][y] = grid[i][j];\n      }\n\n    for (int[] row : arr)\n      ans.add(Arrays.stream(row).boxed().collect(Collectors.toList()));\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n    m = len(grid)\n    n = len(grid[0])\n    ans = [[0] * n for _ in range(m)]\n\n    k %= m * n\n\n    for i in range(m):\n      for j in range(n):\n        index = (i * n + j + k) % (m * n)\n        x = index // n\n        y = index % n\n        ans[x][y] = grid[i][j]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}