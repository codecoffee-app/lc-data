{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "638",
            "title": "Shopping Offers",
            "titleSlug": "shopping-offers",
            "content": "<p>In LeetCode Store, there are <code>n</code> items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.</p>\n\n<p>You are given an integer array <code>price</code> where <code>price[i]</code> is the price of the <code>i<sup>th</sup></code> item, and an integer array <code>needs</code> where <code>needs[i]</code> is the number of pieces of the <code>i<sup>th</sup></code> item you want to buy.</p>\n\n<p>You are also given an array <code>special</code> where <code>special[i]</code> is of size <code>n + 1</code> where <code>special[i][j]</code> is the number of pieces of the <code>j<sup>th</sup></code> item in the <code>i<sup>th</sup></code> offer and <code>special[i][n]</code> (i.e., the last integer in the array) is the price of the <code>i<sup>th</sup></code> offer.</p>\n\n<p>Return <em>the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers</em>. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The price of A is $2, and $3 for B, $4 for C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == price.length == needs.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 6</code></li>\n\t<li><code>0 &lt;= price[i], needs[i] &lt;= 10</code></li>\n\t<li><code>1 &lt;= special.length &lt;= 100</code></li>\n\t<li><code>special[i].length == n + 1</code></li>\n\t<li><code>0 &lt;= special[i][j] &lt;= 50</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1435,
            "dislikes": 738,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"57.4K\", \"totalSubmission\": \"109.7K\", \"totalAcceptedRaw\": 57356, \"totalSubmissionRaw\": 109706, \"acRate\": \"52.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "In a store, there are 'n' items, each with a base price. Special offers are available, each consisting of one or more items at a bundled price. Given the base prices of individual items, the quantities of each item you need to buy, and a list of special offers (each specifying the quantity of each item included and the offer price), find the minimum total cost to purchase exactly the required quantities, using any combination of individual items and special offers. You cannot buy more items than needed.",
                "constraints": [
                    "n == price.length == needs.length",
                    "1 <= n <= 6",
                    "0 <= price[i], needs[i] <= 10",
                    "1 <= special.length <= 100",
                    "special[i].length == n + 1",
                    "0 <= special[i][j] <= 50"
                ],
                "testcases": [
                    {
                        "input": "price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]",
                        "output": "14",
                        "explanation": "The base prices are $2 for item A and $5 for item B. Special offer 1: 3A for $5. Special offer 2: 1A and 2B for $10.  Optimal strategy: Use special offer 2 once (1A, 2B for $10) and buy the remaining 2A individually for $4 (2 * $2). Total cost: $10 + $4 = $14."
                    },
                    {
                        "input": "price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]",
                        "output": "11",
                        "explanation": "The base prices are $2 for item A, $3 for item B, and $4 for item C. Special offer 1: 1A and 1B for $4. Special offer 2: 2A, 2B, and 1C for $9. Optimal strategy: Use special offer 1 once (1A, 1B for $4), buy 1B individually for $3, and buy 1C individually for $4. Total cost: $4 + $3 + $4 = $11."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int shoppingOffers(vector<int>& price, vector<vector<int>>& special,\n                     vector<int>& needs) {\n    return dfs(price, special, needs, 0);\n  }\n\n private:\n  int dfs(const vector<int>& price, const vector<vector<int>>& special,\n          vector<int>& needs, int s) {\n    int ans = 0;\n    for (int i = 0; i < price.size(); ++i)\n      ans += price[i] * needs[i];\n\n    for (int i = s; i < special.size(); ++i)\n      if (isValid(special[i], needs)) {\n        // Use special[i]\n        for (int j = 0; j < needs.size(); ++j)\n          needs[j] -= special[i][j];\n        ans = min(ans, special[i].back() + dfs(price, special, needs, i));\n        // Backtracking - unuse special[i]\n        for (int j = 0; j < needs.size(); ++j)\n          needs[j] += special[i][j];\n      }\n\n    return ans;\n  }\n\n  // Check if this special offer is a valid one\n  bool isValid(const vector<int>& offer, const vector<int>& needs) {\n    for (int i = 0; i < needs.size(); ++i)\n      if (needs[i] < offer[i])\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {\n    return dfs(price, special, needs, 0);\n  }\n\n  private int dfs(List<Integer> price, List<List<Integer>> special, List<Integer> needs, int s) {\n    int ans = 0;\n    for (int i = 0; i < needs.size(); ++i)\n      ans += needs.get(i) * price.get(i);\n\n    for (int i = s; i < special.size(); ++i) {\n      List<Integer> offer = special.get(i);\n      if (isValid(offer, needs)) {\n        // Use special[i]\n        for (int j = 0; j < needs.size(); ++j)\n          needs.set(j, needs.get(j) - offer.get(j));\n        ans = Math.min(ans, offer.get(offer.size() - 1) + dfs(price, special, needs, i));\n        // Backtracking - unuse special[i]\n        for (int j = 0; j < needs.size(); ++j)\n          needs.set(j, needs.get(j) + offer.get(j));\n      }\n    }\n\n    return ans;\n  }\n\n  // Check if this special offer is a valid one\n  private boolean isValid(List<Integer> offer, List<Integer> needs) {\n    for (int i = 0; i < needs.size(); ++i)\n      if (offer.get(i) > needs.get(i))\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def shoppingOffers(self, price: List[int], special: List[List[int]], needs: List[int]) -> int:\n    def dfs(s: int) -> int:\n      ans = 0\n      for i, need in enumerate(needs):\n        ans += need * price[i]\n\n      for i in range(s, len(special)):\n        offer = special[i]\n        if all(offer[j] <= need for j, need in enumerate(needs)):\n          # Use special[i]\n          for j in range(len(needs)):\n            needs[j] -= offer[j]\n          ans = min(ans, offer[-1] + dfs(i))\n          # Backtracking - unuse special[i]\n          for j in range(len(needs)):\n            needs[j] += offer[j]\n\n      return ans\n\n    return dfs(0)\n",
                "lang_text": "py"
            }
        }
    }
}