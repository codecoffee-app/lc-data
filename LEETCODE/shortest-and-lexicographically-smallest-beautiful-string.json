{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2904",
            "title": "Shortest and Lexicographically Smallest Beautiful String",
            "titleSlug": "shortest-and-lexicographically-smallest-beautiful-string",
            "content": "<p>You are given a binary string <code>s</code> and a positive integer <code>k</code>.</p>\n\n<p>A substring of <code>s</code> is <strong>beautiful</strong> if the number of <code>1</code>&#39;s in it is exactly <code>k</code>.</p>\n\n<p>Let <code>len</code> be the length of the <strong>shortest</strong> beautiful substring.</p>\n\n<p>Return <em>the lexicographically <strong>smallest</strong> beautiful substring of string </em><code>s</code><em> with length equal to </em><code>len</code>. If <code>s</code> doesn&#39;t contain a beautiful substring, return <em>an <strong>empty</strong> string</em>.</p>\n\n<p>A string <code>a</code> is lexicographically <strong>larger</strong> than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, <code>a</code> has a character strictly larger than the corresponding character in <code>b</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;abcd&quot;</code> is lexicographically larger than <code>&quot;abcc&quot;</code> because the first position they differ is at the fourth character, and <code>d</code> is greater than <code>c</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;100011001&quot;, k = 3\n<strong>Output:</strong> &quot;11001&quot;\n<strong>Explanation:</strong> There are 7 beautiful substrings in this example:\n1. The substring &quot;<u>100011</u>001&quot;.\n2. The substring &quot;<u>1000110</u>01&quot;.\n3. The substring &quot;<u>10001100</u>1&quot;.\n4. The substring &quot;1<u>00011001</u>&quot;.\n5. The substring &quot;10<u>0011001</u>&quot;.\n6. The substring &quot;100<u>011001</u>&quot;.\n7. The substring &quot;1000<u>11001</u>&quot;.\nThe length of the shortest beautiful substring is 5.\nThe lexicographically smallest beautiful substring with length 5 is the substring &quot;11001&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1011&quot;, k = 2\n<strong>Output:</strong> &quot;11&quot;\n<strong>Explanation:</strong> There are 3 beautiful substrings in this example:\n1. The substring &quot;<u>101</u>1&quot;.\n2. The substring &quot;1<u>011</u>&quot;.\n3. The substring &quot;10<u>11</u>&quot;.\nThe length of the shortest beautiful substring is 2.\nThe lexicographically smallest beautiful substring with length 2 is the substring &quot;11&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;000&quot;, k = 1\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There are no beautiful substrings in this example.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= s.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 173,
            "dislikes": 9,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.6K\", \"totalSubmission\": \"63.4K\", \"totalAcceptedRaw\": 24585, \"totalSubmissionRaw\": 63404, \"acRate\": \"38.8%\"}",
            "hints": [
                "Notice that if we consider that index <code>i</code> is the leftmost index of a beautiful substring, it has only one candidate <code>j</code>, such that <code>s[i:j]</code> is beautiful and shortest too.",
                "We can iterate over all possibilities of leftmost index <code>i</code> take <code>s[i:j]</code> and compare with the shortest and the lexicographically smallest beautiful string we could get before index <code>i</code>."
            ],
            "rephrased": {
                "body": "Given a binary string `s` and a positive integer `k`, a substring of `s` is considered **beautiful** if it contains exactly `k` ones. The goal is to find the lexicographically smallest beautiful substring of `s` with the shortest possible length. If no such substring exists, return an empty string.",
                "constraints": [
                    "1 <= s.length <= 100",
                    "1 <= k <= s.length"
                ],
                "testcases": [
                    {
                        "input": "s = \"100011001\", k = 3",
                        "output": "\"11001\"",
                        "explanation": "The shortest beautiful substring has length 5. Among all beautiful substrings of length 5, \"11001\" is lexicographically the smallest."
                    },
                    {
                        "input": "s = \"1011\", k = 2",
                        "output": "\"11\"",
                        "explanation": "The shortest beautiful substring has length 2. The lexicographically smallest beautiful substring with length 2 is \"11\"."
                    },
                    {
                        "input": "s = \"000\", k = 1",
                        "output": "\"\"",
                        "explanation": "There are no substrings with exactly one '1', so the output is an empty string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Notice that if we consider that index <code>i</code> is the leftmost index of a beautiful substring, it has only one candidate <code>j</code>, such that <code>s[i:j]</code> is beautiful and shortest too.",
            "We can iterate over all possibilities of leftmost index <code>i</code> take <code>s[i:j]</code> and compare with the shortest and the lexicographically smallest beautiful string we could get before index <code>i</code>."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ]
    }
}