{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "748",
            "title": "Shortest Completing Word",
            "titleSlug": "shortest-completing-word",
            "content": "<p>Given a string <code>licensePlate</code> and an array of strings <code>words</code>, find the <strong>shortest completing</strong> word in <code>words</code>.</p>\n\n<p>A <strong>completing</strong> word is a word that <strong>contains all the letters</strong> in <code>licensePlate</code>. <strong>Ignore numbers and spaces</strong> in <code>licensePlate</code>, and treat letters as <strong>case insensitive</strong>. If a letter appears more than once in <code>licensePlate</code>, then it must appear in the word the same number of times or more.</p>\n\n<p>For example, if <code>licensePlate</code><code> = &quot;aBc 12c&quot;</code>, then it contains letters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code> (ignoring case), and <code>&#39;c&#39;</code> twice. Possible <strong>completing</strong> words are <code>&quot;abccdef&quot;</code>, <code>&quot;caaacab&quot;</code>, and <code>&quot;cbca&quot;</code>.</p>\n\n<p>Return <em>the shortest <strong>completing</strong> word in </em><code>words</code><em>.</em> It is guaranteed an answer exists. If there are multiple shortest <strong>completing</strong> words, return the <strong>first</strong> one that occurs in <code>words</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> licensePlate = &quot;1s3 PSt&quot;, words = [&quot;step&quot;,&quot;steps&quot;,&quot;stripe&quot;,&quot;stepple&quot;]\n<strong>Output:</strong> &quot;steps&quot;\n<strong>Explanation:</strong> licensePlate contains letters &#39;s&#39;, &#39;p&#39;, &#39;s&#39; (ignoring case), and &#39;t&#39;.\n&quot;step&quot; contains &#39;t&#39; and &#39;p&#39;, but only contains 1 &#39;s&#39;.\n&quot;steps&quot; contains &#39;t&#39;, &#39;p&#39;, and both &#39;s&#39; characters.\n&quot;stripe&quot; is missing an &#39;s&#39;.\n&quot;stepple&quot; is missing an &#39;s&#39;.\nSince &quot;steps&quot; is the only word containing all the letters, that is the answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> licensePlate = &quot;1s3 456&quot;, words = [&quot;looks&quot;,&quot;pest&quot;,&quot;stew&quot;,&quot;show&quot;]\n<strong>Output:</strong> &quot;pest&quot;\n<strong>Explanation:</strong> licensePlate only contains the letter &#39;s&#39;. All the words contain &#39;s&#39;, but among these &quot;pest&quot;, &quot;stew&quot;, and &quot;show&quot; are shortest. The answer is &quot;pest&quot; because it is the word that appears earliest of the 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= licensePlate.length &lt;= 7</code></li>\n\t<li><code>licensePlate</code> contains digits, letters (uppercase or lowercase), or space <code>&#39; &#39;</code>.</li>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 15</code></li>\n\t<li><code>words[i]</code> consists of lower case English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 518,
            "dislikes": 1079,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"69.4K\", \"totalSubmission\": \"116.7K\", \"totalAcceptedRaw\": 69416, \"totalSubmissionRaw\": 116713, \"acRate\": \"59.5%\"}",
            "hints": [
                "Count only the letters (possibly converted to lowercase) of each word.  If a word is shorter and the count of each letter is at least the count of that letter in the licensePlate, it is the best answer we've seen yet."
            ],
            "rephrased": {
                "body": "Given a string `licensePlate` and an array of strings `words`, find the shortest completing word in `words`.\n\nA completing word is a word that contains all the letters in `licensePlate`. Ignore numbers and spaces in `licensePlate`, and treat letters as case insensitive. If a letter appears more than once in `licensePlate`, then it must appear in the word the same number of times or more.\n\nFor example, if `licensePlate` = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are \"abccdef\", \"caaacab\", and \"cbca\".\n\nReturn the shortest completing word in `words`. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in `words`.",
                "constraints": [
                    "1 <= licensePlate.length <= 7",
                    "licensePlate contains digits, letters (uppercase or lowercase), or space ' '.",
                    "1 <= words.length <= 1000",
                    "1 <= words[i].length <= 15",
                    "words[i] consists of lower case English letters."
                ],
                "testcases": [
                    {
                        "input": {
                            "licensePlate": "1s3 PSt",
                            "words": [
                                "step",
                                "steps",
                                "stripe",
                                "stepple"
                            ]
                        },
                        "output": "steps",
                        "explanation": "The license plate requires the letters 's', 'p', 's', and 't' (case-insensitive). \"steps\" is the shortest word containing all required letters with sufficient counts."
                    },
                    {
                        "input": {
                            "licensePlate": "1s3 456",
                            "words": [
                                "looks",
                                "pest",
                                "stew",
                                "show"
                            ]
                        },
                        "output": "pest",
                        "explanation": "The license plate only contains the letter 's'. Among the words containing 's', \"pest\" is the first shortest word in the given order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Count only the letters (possibly converted to lowercase) of each word.  If a word is shorter and the count of each letter is at least the count of that letter in the licensePlate, it is the best answer we've seen yet."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string shortestCompletingWord(string licensePlate, vector<string>& words) {\n    string ans(16, '.');\n    vector<int> count(26);\n\n    for (const char c : licensePlate)\n      if (isalpha(c))\n        ++count[tolower(c) - 'a'];\n\n    for (const string& word : words)\n      if (word.length() < ans.length() && isComplete(count, getCount(word)))\n        ans = word;\n\n    return ans;\n  }\n\n private:\n  // Check if c1 is a subset of c2\n  bool isComplete(const vector<int>& c1, const vector<int> c2) {\n    for (int i = 0; i < 26; ++i)\n      if (c1[i] > c2[i])\n        return false;\n    return true;\n  }\n\n  vector<int> getCount(const string& word) {\n    vector<int> count(26);\n    for (const char c : word)\n      ++count[c - 'a'];\n    return count;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String shortestCompletingWord(String licensePlate, String[] words) {\n    String ans = \"****************\";\n    int[] count = new int[26];\n\n    for (char c : licensePlate.toCharArray())\n      if (Character.isLetter(c))\n        ++count[Character.toLowerCase(c) - 'a'];\n\n    for (final String word : words)\n      if (word.length() < ans.length() && isComplete(count, getCount(word)))\n        ans = word;\n\n    return ans;\n  }\n\n  // Check if c1 is a subset of c2\n  private boolean isComplete(int[] c1, int[] c2) {\n    for (int i = 0; i < 26; ++i)\n      if (c1[i] > c2[i])\n        return false;\n    return true;\n  }\n\n  private int[] getCount(final String word) {\n    int[] count = new int[26];\n    for (final char c : word.toCharArray())\n      ++count[c - 'a'];\n    return count;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def shortestCompletingWord(self, licensePlate: str, words: List[str]) -> str:\n    def isMatch(word: str) -> bool:\n      wordCount = collections.Counter(word)\n      return False if any(wordCount[i] < count[i] for i in string.ascii_letters) else True\n\n    ans = '*' * 16\n    count = collections.defaultdict(int)\n\n    for c in licensePlate:\n      if c.isalpha():\n        count[c.lower()] += 1\n\n    for word in words:\n      if len(word) < len(ans) and isMatch(word):\n        ans = word\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}