{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3243",
            "title": "Shortest Distance After Road Addition Queries I",
            "titleSlug": "shortest-distance-after-road-addition-queries-i",
            "content": "<p>You are given an integer <code>n</code> and a 2D integer array <code>queries</code>.</p>\n\n<p>There are <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code>. Initially, there is a <strong>unidirectional</strong> road from city <code>i</code> to city <code>i + 1</code> for all <code>0 &lt;= i &lt; n - 1</code>.</p>\n\n<p><code>queries[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> represents the addition of a new <strong>unidirectional</strong> road from city <code>u<sub>i</sub></code> to city <code>v<sub>i</sub></code>. After each query, you need to find the <strong>length</strong> of the <strong>shortest path</strong> from city <code>0</code> to city <code>n - 1</code>.</p>\n\n<p>Return an array <code>answer</code> where for each <code>i</code> in the range <code>[0, queries.length - 1]</code>, <code>answer[i]</code> is the <em>length of the shortest path</em> from city <code>0</code> to city <code>n - 1</code> after processing the <strong>first </strong><code>i + 1</code> queries.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, queries = [[2,4],[0,2],[0,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,2,1]</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image8.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>After the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image9.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>After the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image10.jpg\" style=\"width: 350px; height: 96px;\" /></p>\n\n<p>After the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, queries = [[0,3],[0,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image11.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>After the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image12.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>After the addition of the road from 0 to 2, the length of the shortest path remains 1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 500</code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt; queries[i][1] &lt; n</code></li>\n\t<li><code>1 &lt; queries[i][1] - queries[i][0]</code></li>\n\t<li>There are no repeated roads among the queries.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 105,
            "dislikes": 5,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.9K\", \"totalSubmission\": \"54.7K\", \"totalAcceptedRaw\": 25892, \"totalSubmissionRaw\": 54694, \"acRate\": \"47.3%\"}",
            "hints": [
                "Maintain the graph and use an efficient shortest path algorithm after each update.",
                "We use BFS/Dijkstra for each query."
            ],
            "rephrased": {
                "body": "You are given an integer `n` representing the number of cities and a 2D integer array `queries`. There are `n` cities numbered from 0 to `n - 1`. Initially, there is a unidirectional road from city `i` to city `i + 1` for all `0 <= i < n - 1`. Each query `queries[i] = [u_i, v_i]` represents the addition of a new unidirectional road from city `u_i` to city `v_i`.  For each query, determine the length of the shortest path from city 0 to city `n - 1` after processing the first `i + 1` queries. Return an array `answer` where `answer[i]` is the length of the shortest path after processing the first `i + 1` queries.",
                "constraints": [
                    "3 <= n <= 500",
                    "1 <= queries.length <= 500",
                    "queries[i].length == 2",
                    "0 <= queries[i][0] < queries[i][1] < n",
                    "1 < queries[i][1] - queries[i][0]",
                    "There are no repeated roads among the queries."
                ],
                "testcases": [
                    {
                        "input": {
                            "n": 5,
                            "queries": [
                                [
                                    2,
                                    4
                                ],
                                [
                                    0,
                                    2
                                ],
                                [
                                    0,
                                    4
                                ]
                            ]
                        },
                        "output": [
                            3,
                            2,
                            1
                        ],
                        "explanation": "Initially, the shortest path from 0 to 4 is 4. After adding the road from 2 to 4, the shortest path becomes 0 -> 1 -> 2 -> 4, which has a length of 3. Adding the road from 0 to 2 makes the shortest path 0 -> 2 -> 4, with a length of 2. Finally, adding the road from 0 to 4 results in a shortest path of 0 -> 4, with a length of 1."
                    },
                    {
                        "input": {
                            "n": 4,
                            "queries": [
                                [
                                    0,
                                    3
                                ],
                                [
                                    0,
                                    2
                                ]
                            ]
                        },
                        "output": [
                            1,
                            1
                        ],
                        "explanation": "Initially, the shortest path from 0 to 3 is 3. Adding the road from 0 to 3 makes the shortest path 0 -> 3, length 1. Then adding the road from 0 to 2 does not change the shortest path from 0 to 3, which remains 0 -> 3, length 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Maintain the graph and use an efficient shortest path algorithm after each update.",
            "We use BFS/Dijkstra for each query."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> shortestDistanceAfterQueries(int n,\n                                           vector<vector<int>>& queries) {\n    vector<int> ans;\n    vector<int> dist(n);\n    vector<vector<int>> graph(n);\n\n    iota(dist.begin(), dist.end(), 0);\n\n    for (int i = 0; i < n - 1; ++i)\n      graph[i].push_back(i + 1);\n\n    for (const vector<int>& query : queries) {\n      const int u = query[0];\n      const int v = query[1];\n      graph[u].push_back(v);\n      if (dist[u] + 1 < dist[v]) {\n        dist[v] = dist[u] + 1;\n        bfs(graph, v, dist);\n      }\n      ans.push_back(dist[n - 1]);\n    }\n\n    return ans;\n  }\n\n private:\n  // Performs a BFS to update the shortest distances from the given `start` node\n  // to all other reachable nodes in the graph. It updates the `dist` vector\n  // with the new shortest distances.\n  void bfs(const vector<vector<int>>& graph, int start, vector<int>& dist) {\n    queue<int> q{{start}};\n    while (!q.empty()) {\n      const int u = q.front();\n      q.pop();\n      for (const int v : graph[u]) {\n        if (dist[u] + 1 < dist[v]) {\n          dist[v] = dist[u] + 1;\n          q.push(v);\n        }\n      }\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n    int[] ans = new int[queries.length];\n    int[] dist = new int[n];\n    List<Integer>[] graph = new List[n];\n\n    for (int i = 0; i < n; ++i) {\n      dist[i] = i;\n      graph[i] = new ArrayList<>();\n    }\n\n    for (int i = 0; i < n - 1; ++i)\n      graph[i].add(i + 1);\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int u = queries[i][0];\n      final int v = queries[i][1];\n      graph[u].add(v);\n      if (dist[u] + 1 < dist[v]) {\n        dist[v] = dist[u] + 1;\n        bfs(graph, v, dist);\n      }\n      ans[i] = dist[n - 1];\n    }\n\n    return ans;\n  }\n\n  // Performs a BFS to update the shortest distances from the given `start` node\n  // to all other reachable nodes in the graph. It updates the `dist` vector\n  // with the new shortest distances.\n  private void bfs(List<Integer>[] graph, int start, int[] dist) {\n    Queue<Integer> q = new LinkedList<>(Arrays.asList(start));\n    while (!q.isEmpty()) {\n      final int u = q.poll();\n      for (final int v : graph[u]) {\n        if (dist[u] + 1 < dist[v]) {\n          dist[v] = dist[u] + 1;\n          q.offer(v);\n        }\n      }\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def shortestDistanceAfterQueries(\n      self,\n      n: int,\n      queries: list[list[int]],\n  ) -> list[int]:\n    ans = []\n    dist = list(range(n))\n    graph = [[] for _ in range(n)]\n\n    for i in range(n - 1):\n      graph[i].append(i + 1)\n\n    for u, v in queries:\n      graph[u].append(v)\n      if dist[u] + 1 < dist[v]:\n        dist[v] = dist[u] + 1\n        self._bfs(graph, v, dist)\n      ans.append(dist[n - 1])\n\n    return ans\n\n  def _bfs(self, graph: list[list[int]], start: int, dist: list[int]) -> None:\n    \"\"\"\n    Performs a BFS to update the shortest distances from the given `start` node\n    to all other reachable nodes in the graph. It updates the `dist` vector\n    with the new shortest distances.\n    \"\"\"\n    q = collections.deque([start])\n    while q:\n      u = q.popleft()\n      for v in graph[u]:\n        if dist[u] + 1 < dist[v]:\n          dist[v] = dist[u] + 1\n          q.append(v)\n",
                "lang_text": "py"
            }
        }
    }
}