{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3244",
            "title": "Shortest Distance After Road Addition Queries II",
            "titleSlug": "shortest-distance-after-road-addition-queries-ii",
            "content": "<p>You are given an integer <code>n</code> and a 2D integer array <code>queries</code>.</p>\n\n<p>There are <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code>. Initially, there is a <strong>unidirectional</strong> road from city <code>i</code> to city <code>i + 1</code> for all <code>0 &lt;= i &lt; n - 1</code>.</p>\n\n<p><code>queries[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> represents the addition of a new <strong>unidirectional</strong> road from city <code>u<sub>i</sub></code> to city <code>v<sub>i</sub></code>. After each query, you need to find the <strong>length</strong> of the <strong>shortest path</strong> from city <code>0</code> to city <code>n - 1</code>.</p>\n\n<p>There are no two queries such that <code>queries[i][0] &lt; queries[j][0] &lt; queries[i][1] &lt; queries[j][1]</code>.</p>\n\n<p>Return an array <code>answer</code> where for each <code>i</code> in the range <code>[0, queries.length - 1]</code>, <code>answer[i]</code> is the <em>length of the shortest path</em> from city <code>0</code> to city <code>n - 1</code> after processing the <strong>first </strong><code>i + 1</code> queries.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, queries = [[2,4],[0,2],[0,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,2,1]</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image8.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>After the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image9.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>After the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image10.jpg\" style=\"width: 350px; height: 96px;\" /></p>\n\n<p>After the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, queries = [[0,3],[0,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image11.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>After the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image12.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>After the addition of the road from 0 to 2, the length of the shortest path remains 1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt; queries[i][1] &lt; n</code></li>\n\t<li><code>1 &lt; queries[i][1] - queries[i][0]</code></li>\n\t<li>There are no repeated roads among the queries.</li>\n\t<li>There are no two queries such that <code>i != j</code> and <code>queries[i][0] &lt; queries[j][0] &lt; queries[i][1] &lt; queries[j][1]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 153,
            "dislikes": 5,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"11K\", \"totalSubmission\": \"46.2K\", \"totalAcceptedRaw\": 10953, \"totalSubmissionRaw\": 46175, \"acRate\": \"23.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given an integer `n` representing the number of cities numbered from 0 to `n - 1`. Initially, there's a unidirectional road from city `i` to city `i + 1` for all `0 <= i < n - 1`. You are also given a 2D integer array `queries`. Each `queries[i] = [u_i, v_i]` represents the addition of a new unidirectional road from city `u_i` to city `v_i`. After each query, determine the length of the shortest path from city 0 to city `n - 1`. There are no two queries such that `queries[i][0] < queries[j][0] < queries[i][1] < queries[j][1]`. Return an array `answer` where `answer[i]` is the length of the shortest path from city 0 to city `n - 1` after processing the first `i + 1` queries.",
                "constraints": [
                    "3 <= n <= 10^5",
                    "1 <= queries.length <= 10^5",
                    "queries[i].length == 2",
                    "0 <= queries[i][0] < queries[i][1] < n",
                    "1 < queries[i][1] - queries[i][0]",
                    "There are no repeated roads among the queries.",
                    "There are no two queries such that i != j and queries[i][0] < queries[j][0] < queries[i][1] < queries[j][1]."
                ],
                "testcases": [
                    {
                        "input": "n = 5, queries = [[2,4],[0,2],[0,4]]",
                        "output": "[3,2,1]",
                        "explanation": "Initially, the shortest path from 0 to 4 is 4. \n\nAfter adding the road from 2 to 4, the shortest path from 0 to 4 is 0 -> 1 -> 2 -> 4, with length 3.\n\nAfter adding the road from 0 to 2, the shortest path from 0 to 4 is 0 -> 2 -> 4, with length 2.\n\nAfter adding the road from 0 to 4, the shortest path from 0 to 4 is 0 -> 4, with length 1."
                    },
                    {
                        "input": "n = 4, queries = [[0,3],[0,2]]",
                        "output": "[1,1]",
                        "explanation": "Initially, the shortest path from 0 to 3 is 3.\n\nAfter adding the road from 0 to 3, the shortest path from 0 to 3 is 0 -> 3, with length 1.\n\nAfter adding the road from 0 to 2, the shortest path from 0 to 3 remains 0 -> 3, with length 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> shortestDistanceAfterQueries(int n,\n                                           vector<vector<int>>& queries) {\n    vector<int> ans;\n    unordered_map<int, int> nodeToFarthestNode;\n\n    for (int i = 0; i < n - 1; ++i)\n      nodeToFarthestNode[i] = i + 1;\n\n    for (const vector<int>& query : queries) {\n      const int u = query[0];\n      const int v = query[1];\n      // If `u` exists in the map and `v` is farther than the current farthest\n      // node for `u`, we need to update the map and remove intermediate nodes.\n      if (nodeToFarthestNode.contains(u) && nodeToFarthestNode[u] < v) {\n        int node = nodeToFarthestNode[u];\n        while (node < v) {\n          const int cache = node;\n          node = nodeToFarthestNode[node];\n          nodeToFarthestNode.erase(cache);\n        }\n        nodeToFarthestNode[u] = v;\n      }\n      ans.push_back(nodeToFarthestNode.size());\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n    int[] ans = new int[queries.length];\n    Map<Integer, Integer> nodeToFarthestNode = new HashMap<>();\n\n    for (int i = 0; i < n - 1; ++i)\n      nodeToFarthestNode.put(i, i + 1);\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int u = queries[i][0];\n      final int v = queries[i][1];\n      // If `u` exists in the map and `v` is farther than the current farthest\n      // node for `u`, we need to update the map and remove intermediate nodes.\n      if (nodeToFarthestNode.containsKey(u) && nodeToFarthestNode.get(u) < v) {\n        int node = nodeToFarthestNode.get(u);\n        while (node < v)\n          node = nodeToFarthestNode.remove(node);\n        nodeToFarthestNode.put(u, v);\n      }\n      ans[i] = nodeToFarthestNode.size();\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def shortestDistanceAfterQueries(\n      self,\n      n: int,\n      queries: list[list[int]],\n  ) -> list[int]:\n    ans = []\n    nodeToFarthestNode = {i: i + 1 for i in range(n - 1)}\n\n    for u, v in queries:\n      # If `u` exists in the map and `v` is farther than the current farthest\n      # node for `u`, we need to update the map and remove intermediate nodes.\n      if u in nodeToFarthestNode and nodeToFarthestNode[u] < v:\n        node = nodeToFarthestNode[u]\n        while node < v:\n          node = nodeToFarthestNode.pop(node)\n        nodeToFarthestNode[u] = v\n      ans.append(len(nodeToFarthestNode))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}