{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "214",
            "title": "Shortest Palindrome",
            "titleSlug": "shortest-palindrome",
            "content": "<p>You are given a string <code>s</code>. You can convert <code>s</code> to a <span data-keyword=\"palindrome-string\">palindrome</span> by adding characters in front of it.</p>\n\n<p>Return <em>the shortest palindrome you can find by performing this transformation</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"aacecaaa\"\n<strong>Output:</strong> \"aaacecaaa\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"abcd\"\n<strong>Output:</strong> \"dcbabcd\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters only.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3465,
            "dislikes": 232,
            "similarQuestions": "[{\"title\": \"Longest Palindromic Substring\", \"titleSlug\": \"longest-palindromic-substring\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find the Index of the First Occurrence in a String\", \"titleSlug\": \"find-the-index-of-the-first-occurrence-in-a-string\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Palindrome Pairs\", \"titleSlug\": \"palindrome-pairs\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Deletions on a String\", \"titleSlug\": \"maximum-deletions-on-a-string\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"169.9K\", \"totalSubmission\": \"516.3K\", \"totalAcceptedRaw\": 169945, \"totalSubmissionRaw\": 516264, \"acRate\": \"32.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s`, find the shortest palindrome that can be formed by adding characters to the beginning of `s`.",
                "constraints": [
                    "0 <= s.length <= 5 * 10^4",
                    "s consists of lowercase English letters only."
                ],
                "testcases": [
                    {
                        "input": "aacecaaa",
                        "output": "aaacecaaa",
                        "explanation": null
                    },
                    {
                        "input": "abcd",
                        "output": "dcbabcd",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-palindromic-substring",
                "title": "Longest Palindromic Substring",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-the-index-of-the-first-occurrence-in-a-string",
                "title": "Find the Index of the First Occurrence in a String",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "palindrome-pairs",
                "title": "Palindrome Pairs",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-deletions-on-a-string",
                "title": "Maximum Deletions on a String",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string shortestPalindrome(string s) {\n    string t = s;\n    reverse(t.begin(), t.end());\n\n    const string_view sv_s(s);\n    const string_view sv_t(t);\n\n    for (int i = 0; i < s.length(); ++i)\n      if (sv_s.substr(0, s.length() - i) == sv_t.substr(i))\n        return t.substr(0, i) + s;\n\n    return t + s;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String shortestPalindrome(String s) {\n    final String t = new StringBuilder(s).reverse().toString();\n\n    for (int i = 0; i < t.length(); ++i)\n      if (s.startsWith(t.substring(i)))\n        return t.substring(0, i) + s;\n\n    return t + s;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def shortestPalindrome(self, s: str) -> str:\n    t = s[::-1]\n\n    for i in range(len(t)):\n      if s.startswith(t[i:]):\n        return t[:i] + s\n\n    return t + s\n",
                "lang_text": "py"
            }
        }
    }
}