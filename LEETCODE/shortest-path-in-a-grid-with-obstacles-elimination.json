{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1293",
            "title": "Shortest Path in a Grid with Obstacles Elimination",
            "titleSlug": "shortest-path-in-a-grid-with-obstacles-elimination",
            "content": "<p>You are given an <code>m x n</code> integer matrix <code>grid</code> where each cell is either <code>0</code> (empty) or <code>1</code> (obstacle). You can move up, down, left, or right from and to an empty cell in <strong>one step</strong>.</p>\n\n<p>Return <em>the minimum number of <strong>steps</strong> to walk from the upper left corner </em><code>(0, 0)</code><em> to the lower right corner </em><code>(m - 1, n - 1)</code><em> given that you can eliminate <strong>at most</strong> </em><code>k</code><em> obstacles</em>. If it is not possible to find such walk return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/30/short1-grid.jpg\" style=\"width: 244px; height: 405px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \nThe shortest path without eliminating any obstacle is 10.\nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; <strong>(3,2)</strong> -&gt; (4,2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/30/short2-grid.jpg\" style=\"width: 244px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> We need to eliminate at least two obstacles to find such a walk.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 40</code></li>\n\t<li><code>1 &lt;= k &lt;= m * n</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> <strong>or</strong> <code>1</code>.</li>\n\t<li><code>grid[0][0] == grid[m - 1][n - 1] == 0</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4394,
            "dislikes": 82,
            "similarQuestions": "[{\"title\": \"Shortest Path to Get Food\", \"titleSlug\": \"shortest-path-to-get-food\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Obstacle Removal to Reach Corner\", \"titleSlug\": \"minimum-obstacle-removal-to-reach-corner\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"197.6K\", \"totalSubmission\": \"437.1K\", \"totalAcceptedRaw\": 197614, \"totalSubmissionRaw\": 437066, \"acRate\": \"45.2%\"}",
            "hints": [
                "Use BFS.",
                "BFS on (x,y,r) x,y is coordinate, r is remain number of obstacles you can remove."
            ],
            "rephrased": {
                "body": "Given an `m x n` integer matrix `grid` representing a grid where each cell is either `0` (empty) or `1` (obstacle), find the minimum number of steps required to walk from the upper left corner `(0, 0)` to the lower right corner `(m - 1, n - 1)`. You can move up, down, left, or right from and to an empty cell in one step. You are allowed to eliminate at most `k` obstacles. If no such path exists, return `-1`.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 40",
                    "1 <= k <= m * n",
                    "grid[i][j] is either 0 or 1.",
                    "grid[0][0] == grid[m - 1][n - 1] == 0"
                ],
                "testcases": [
                    {
                        "input": "grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1",
                        "output": "6",
                        "explanation": "The shortest path without eliminating any obstacle requires 10 steps. By eliminating one obstacle at position (3,2), a path with 6 steps can be found: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2)."
                    },
                    {
                        "input": "grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1",
                        "output": "-1",
                        "explanation": "At least two obstacles must be eliminated to find a valid path from the start to the end."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "shortest-path-to-get-food",
                "title": "Shortest Path to Get Food",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-obstacle-removal-to-reach-corner",
                "title": "Minimum Obstacle Removal to Reach Corner",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use BFS.",
            "BFS on (x,y,r) x,y is coordinate, r is remain number of obstacles you can remove."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int shortestPath(vector<vector<int>>& grid, int k) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    if (m == 1 && n == 1)\n      return 0;\n\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    int steps = 0;\n    queue<tuple<int, int, int>> q{{{0, 0, k}}};  // (i, j, eliminate)\n    vector<vector<vector<bool>>> seen(\n        m, vector<vector<bool>>(n, vector<bool>(k + 1)));\n    seen[0][0][k] = true;\n\n    while (!q.empty()) {\n      ++steps;\n      for (int sz = q.size(); sz > 0; --sz) {\n        const auto [i, j, eliminate] = q.front();\n        q.pop();\n        for (int l = 0; l < 4; ++l) {\n          const int x = i + dirs[l];\n          const int y = j + dirs[l + 1];\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          if (x == m - 1 && y == n - 1)\n            return steps;\n          if (grid[x][y] == 1 && eliminate == 0)\n            continue;\n          const int newEliminate = eliminate - grid[x][y];\n          if (seen[x][y][newEliminate])\n            continue;\n          q.emplace(x, y, newEliminate);\n          seen[x][y][newEliminate] = true;\n        }\n      }\n    }\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int i;\n  public int j;\n  public int eliminate;\n  public T(int i, int j, int eliminate) {\n    this.i = i;\n    this.j = j;\n    this.eliminate = eliminate;\n  }\n}\n\nclass Solution {\n  public int shortestPath(int[][] grid, int k) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    if (m == 1 && n == 1)\n      return 0;\n\n    final int[] dirs = {0, 1, 0, -1, 0};\n    int steps = 0;\n    Queue<T> q = new ArrayDeque<>();\n    q.offer(new T(0, 0, k));\n    boolean[][][] seen = new boolean[m][n][k + 1];\n    seen[0][0][k] = true;\n\n    while (!q.isEmpty()) {\n      ++steps;\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int i = q.peek().i;\n        final int j = q.peek().j;\n        final int eliminate = q.poll().eliminate;\n        for (int l = 0; l < 4; ++l) {\n          final int x = i + dirs[l];\n          final int y = j + dirs[l + 1];\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          if (x == m - 1 && y == n - 1)\n            return steps;\n          if (grid[x][y] == 1 && eliminate == 0)\n            continue;\n          final int newEliminate = eliminate - grid[x][y];\n          if (seen[x][y][newEliminate])\n            continue;\n          q.offer(new T(x, y, newEliminate));\n          seen[x][y][newEliminate] = true;\n        }\n      }\n    }\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def shortestPath(self, grid: List[List[int]], k: int) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    if m == 1 and n == 1:\n      return 0\n\n    dirs = [0, 1, 0, -1, 0]\n    steps = 0\n    q = collections.deque([(0, 0, k)])\n    seen = {(0, 0, k)}\n\n    while q:\n      steps += 1\n      for _ in range(len(q)):\n        i, j, eliminate = q.popleft()\n        for l in range(4):\n          x = i + dirs[l]\n          y = j + dirs[l + 1]\n          if x < 0 or x == m or y < 0 or y == n:\n            continue\n          if x == m - 1 and y == n - 1:\n            return steps\n          if grid[x][y] == 1 and eliminate == 0:\n            continue\n          newEliminate = eliminate - grid[x][y]\n          if (x, y, newEliminate) in seen:\n            continue\n          q.append((x, y, newEliminate))\n          seen.add((x, y, newEliminate))\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}