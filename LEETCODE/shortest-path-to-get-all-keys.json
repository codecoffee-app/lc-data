{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "864",
            "title": "Shortest Path to Get All Keys",
            "titleSlug": "shortest-path-to-get-all-keys",
            "content": "<p>You are given an <code>m x n</code> grid <code>grid</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> is an empty cell.</li>\n\t<li><code>&#39;#&#39;</code> is a wall.</li>\n\t<li><code>&#39;@&#39;</code> is the starting point.</li>\n\t<li>Lowercase letters represent keys.</li>\n\t<li>Uppercase letters represent locks.</li>\n</ul>\n\n<p>You start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.</p>\n\n<p>If you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.</p>\n\n<p>For some <code><font face=\"monospace\">1 &lt;= k &lt;= 6</font></code>, there is exactly one lowercase and one uppercase letter of the first <code>k</code> letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.</p>\n\n<p>Return <em>the lowest number of moves to acquire all keys</em>. If it is impossible, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-keys2.jpg\" style=\"width: 404px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;@.a..&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Note that the goal is to obtain all the keys not to open all the locks.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-key2.jpg\" style=\"width: 404px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-keys3.jpg\" style=\"width: 244px; height: 85px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;@Aa&quot;]\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 30</code></li>\n\t<li><code>grid[i][j]</code> is either an English letter, <code>&#39;.&#39;</code>, <code>&#39;#&#39;</code>, or <code>&#39;@&#39;</code>.&nbsp;</li>\n\t<li>There is exactly one&nbsp;<code>&#39;@&#39;</code>&nbsp;in the grid.</li>\n\t<li>The number of keys in the grid is in the range <code>[1, 6]</code>.</li>\n\t<li>Each key in the grid is <strong>unique</strong>.</li>\n\t<li>Each key in the grid has a matching lock.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2268,
            "dislikes": 97,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"71.8K\", \"totalSubmission\": \"133.3K\", \"totalAcceptedRaw\": 71838, \"totalSubmissionRaw\": 133347, \"acRate\": \"53.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given an `m x n` grid `grid` where:\n\n*   `'.'` is an empty cell.\n*   `'#'` is a wall.\n*   `'@'` is the starting point.\n*   Lowercase letters represent keys.\n*   Uppercase letters represent locks.\n\nYou start at the starting point and can move one space in one of the four cardinal directions (up, down, left, right). You cannot move outside the grid or into a wall.\n\nIf you step on a key, you pick it up. You cannot step on a lock unless you possess its corresponding key.\n\nThere are `k` keys and `k` locks (1 <= k <= 6), represented by the first `k` lowercase and uppercase letters of the English alphabet, respectively. Each key has exactly one corresponding lock, and vice-versa.\n\nReturn the minimum number of moves required to collect all keys. If it is impossible to collect all keys, return -1.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 30",
                    "grid[i][j] is either an English letter, '.', '#', or '@'.",
                    "There is exactly one '@' in the grid.",
                    "The number of keys in the grid is in the range [1, 6].",
                    "Each key in the grid is unique.",
                    "Each key in the grid has a matching lock."
                ],
                "testcases": [
                    {
                        "input": "grid = [\"@.a..\",\"###.#\",\"b.A.B\"]",
                        "output": "8",
                        "explanation": "The goal is to obtain all the keys, not necessarily to open all the locks. One possible optimal path is to collect 'a', then 'b', requiring 8 moves."
                    },
                    {
                        "input": "grid = [\"@..aA\",\"..B#.\",\"....b\"]",
                        "output": "6",
                        "explanation": "One possible path is to collect key 'a', open lock 'A', then collect key 'b', taking 6 moves."
                    },
                    {
                        "input": "grid = [\"@Aa\"]",
                        "output": "-1",
                        "explanation": "It's impossible to collect key 'a' since lock 'A' blocks the path and there's no way to obtain key 'a' first."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  int i;\n  int j;\n  int keys;  // Keys in bitmask\n  T(int i, int j, int keys) : i(i), j(j), keys(keys) {}\n};\n\nclass Solution {\n public:\n  int shortestPathAllKeys(vector<string>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].length();\n    const int keysCount = getKeysCount(grid);\n    const int kKeys = (1 << keysCount) - 1;\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    const vector<int> start = getStart(grid);\n    int ans = 0;\n    queue<T> q{{{start[0], start[1], 0}}};\n    vector<vector<vector<bool>>> seen(\n        m, vector<vector<bool>>(n, vector<bool>(kKeys)));\n    seen[start[0]][start[1]][0] = true;\n\n    while (!q.empty()) {\n      ++ans;\n      for (int sz = q.size(); sz > 0; --sz) {\n        const auto [i, j, keys] = q.front();\n        q.pop();\n        for (int k = 0; k < 4; ++k) {\n          const int x = i + dirs[k];\n          const int y = j + dirs[k + 1];\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          const char c = grid[x][y];\n          if (c == '#')\n            continue;\n          const int newKeys = 'a' <= c && c <= 'f' ? keys | 1 << c - 'a' : keys;\n          if (newKeys == kKeys)\n            return ans;\n          if (seen[x][y][newKeys])\n            continue;\n          if ('A' <= c && c <= 'F' && ((newKeys >> c - 'A') & 1) == 0)\n            continue;\n          q.emplace(x, y, newKeys);\n          seen[x][y][newKeys] = true;\n        }\n      }\n    }\n\n    return -1;\n  }\n\n private:\n  int getKeysCount(const vector<string>& grid) {\n    int count = 0;\n    for (const string& s : grid)\n      count += std::count_if(s.begin(), s.end(),\n                             [](char c) { return 'a' <= c && c <= 'f'; });\n    return count;\n  }\n\n  vector<int> getStart(const vector<string>& grid) {\n    for (int i = 0; i < grid.size(); ++i)\n      for (int j = 0; j < grid[0].length(); ++j)\n        if (grid[i][j] == '@')\n          return {i, j};\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int i;\n  public int j;\n  public int keys; // Keys in bitmask\n  public T(int i, int j, int keys) {\n    this.i = i;\n    this.j = j;\n    this.keys = keys;\n  }\n}\n\nclass Solution {\n  public int shortestPathAllKeys(String[] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length();\n    final int keysCount = getKeysCount(grid);\n    final int kKeys = (1 << keysCount) - 1;\n    final int[] dirs = {0, 1, 0, -1, 0};\n    final int[] start = getStart(grid);\n    int ans = 0;\n    Queue<T> q = new ArrayDeque<>(Arrays.asList(new T(start[0], start[1], 0)));\n    boolean[][][] seen = new boolean[m][n][kKeys];\n    seen[start[0]][start[1]][0] = true;\n\n    while (!q.isEmpty()) {\n      ++ans;\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int i = q.peek().i;\n        final int j = q.peek().j;\n        final int keys = q.poll().keys;\n        for (int k = 0; k < 4; ++k) {\n          final int x = i + dirs[k];\n          final int y = j + dirs[k + 1];\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          final char c = grid[x].charAt(y);\n          if (c == '#')\n            continue;\n          final int newKeys = 'a' <= c && c <= 'f' ? keys | 1 << c - 'a' : keys;\n          if (newKeys == kKeys)\n            return ans;\n          if (seen[x][y][newKeys])\n            continue;\n          if ('A' <= c && c <= 'F' && (newKeys >> c - 'A' & 1) == 0)\n            continue;\n          q.offer(new T(x, y, newKeys));\n          seen[x][y][newKeys] = true;\n        }\n      }\n    }\n\n    return -1;\n  }\n\n  private int getKeysCount(String[] grid) {\n    int count = 0;\n    for (final String s : grid)\n      count += (int) s.chars().filter(c -> 'a' <= c && c <= 'f').count();\n    return count;\n  }\n\n  private int[] getStart(String[] grid) {\n    for (int i = 0; i < grid.length; ++i)\n      for (int j = 0; j < grid[0].length(); ++j)\n        if (grid[i].charAt(j) == '@')\n          return new int[] {i, j};\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}