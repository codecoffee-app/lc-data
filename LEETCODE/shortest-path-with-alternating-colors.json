{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1129",
            "title": "Shortest Path with Alternating Colors",
            "titleSlug": "shortest-path-with-alternating-colors",
            "content": "<p>You are given an integer <code>n</code>, the number of nodes in a directed graph where the nodes are labeled from <code>0</code> to <code>n - 1</code>. Each edge is red or blue in this graph, and there could be self-edges and parallel edges.</p>\n\n<p>You are given two arrays <code>redEdges</code> and <code>blueEdges</code> where:</p>\n\n<ul>\n\t<li><code>redEdges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is a directed red edge from node <code>a<sub>i</sub></code> to node <code>b<sub>i</sub></code> in the graph, and</li>\n\t<li><code>blueEdges[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> indicates that there is a directed blue edge from node <code>u<sub>j</sub></code> to node <code>v<sub>j</sub></code> in the graph.</li>\n</ul>\n\n<p>Return an array <code>answer</code> of length <code>n</code>, where each <code>answer[x]</code> is the length of the shortest path from node <code>0</code> to node <code>x</code> such that the edge colors alternate along the path, or <code>-1</code> if such a path does not exist.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, redEdges = [[0,1],[1,2]], blueEdges = []\n<strong>Output:</strong> [0,1,-1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]\n<strong>Output:</strong> [0,1,-1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= redEdges.length,&nbsp;blueEdges.length &lt;= 400</code></li>\n\t<li><code>redEdges[i].length == blueEdges[j].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub>, u<sub>j</sub>, v<sub>j</sub> &lt; n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3394,
            "dislikes": 176,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"108.5K\", \"totalSubmission\": \"228.7K\", \"totalAcceptedRaw\": 108466, \"totalSubmissionRaw\": 228676, \"acRate\": \"47.4%\"}",
            "hints": [
                "Do a breadth-first search, where the \"nodes\" are actually (Node, color of last edge taken)."
            ],
            "rephrased": {
                "body": "Given a directed graph with `n` nodes labeled from 0 to `n - 1`. Edges are colored either red or blue, and self-edges and parallel edges may exist. You are provided with two arrays: `redEdges` and `blueEdges`. `redEdges[i] = [a_i, b_i]` signifies a directed red edge from node `a_i` to node `b_i`. Similarly, `blueEdges[j] = [u_j, v_j]` signifies a directed blue edge from node `u_j` to node `v_j`. The objective is to determine the shortest path from node 0 to each node `x` (0 <= x < n) such that the edge colors alternate along the path. If no such path exists to node `x`, the corresponding value in the `answer` array should be -1.",
                "constraints": [
                    "1 <= n <= 100",
                    "0 <= redEdges.length, blueEdges.length <= 400",
                    "redEdges[i].length == blueEdges[j].length == 2",
                    "0 <= a_i, b_i, u_j, v_j < n"
                ],
                "testcases": [
                    {
                        "input": {
                            "n": 3,
                            "redEdges": [
                                [
                                    0,
                                    1
                                ],
                                [
                                    1,
                                    2
                                ]
                            ],
                            "blueEdges": []
                        },
                        "output": [
                            0,
                            1,
                            -1
                        ],
                        "explanation": null
                    },
                    {
                        "input": {
                            "n": 3,
                            "redEdges": [
                                [
                                    0,
                                    1
                                ]
                            ],
                            "blueEdges": [
                                [
                                    2,
                                    1
                                ]
                            ]
                        },
                        "output": [
                            0,
                            1,
                            -1
                        ],
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Do a breadth-first search, where the \"nodes\" are actually (Node, color of last edge taken)."
        ],
        "relatedTopics": [
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "enum class Color { kInit, kRed, kBlue };\n\nclass Solution {\n public:\n  vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges,\n                                       vector<vector<int>>& blueEdges) {\n    vector<int> ans(n, -1);\n    vector<vector<pair<int, Color>>> graph(n);  // graph[u] := [(v, edgeColor)]\n    queue<pair<int, Color>> q{{{0, Color::kInit}}};  // [(u, prevColor)]\n\n    for (const vector<int>& edge : redEdges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].emplace_back(v, Color::kRed);\n    }\n\n    for (const vector<int>& edge : blueEdges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      graph[u].emplace_back(v, Color::kBlue);\n    }\n\n    for (int step = 0; !q.empty(); ++step)\n      for (int sz = q.size(); sz > 0; --sz) {\n        const auto [u, prevColor] = q.front();\n        q.pop();\n        ans[u] = ans[u] == -1 ? step : ans[u];\n        for (auto& [v, edgeColor] : graph[u]) {\n          if (v == -1 || edgeColor == prevColor)\n            continue;\n          q.emplace(v, edgeColor);\n          v = -1;  // Mark (u, v) as used.\n        }\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "enum Color { kInit, kRed, kBlue }\n\nclass Solution {\n  public int[] shortestAlternatingPaths(int n, int[][] redEdges, int[][] blueEdges) {\n    int[] ans = new int[n];\n    Arrays.fill(ans, -1);\n    // graph[u] := [(v, edgeColor)]\n    List<Pair<Integer, Color>>[] graph = new List[n];\n    // [(u, prevColor)]\n    Queue<Pair<Integer, Color>> q = new ArrayDeque<>(Arrays.asList(new Pair<>(0, Color.kInit)));\n\n    for (int i = 0; i < n; ++i)\n      graph[i] = new ArrayList<>();\n\n    for (int[] edge : redEdges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].add(new Pair<>(v, Color.kRed));\n    }\n\n    for (int[] edge : blueEdges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      graph[u].add(new Pair<>(v, Color.kBlue));\n    }\n\n    for (int step = 0; !q.isEmpty(); ++step)\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int u = q.peek().getKey();\n        Color prevColor = q.poll().getValue();\n        ans[u] = ans[u] == -1 ? step : ans[u];\n        for (int i = 0; i < graph[u].size(); ++i) {\n          Pair<Integer, Color> node = graph[u].get(i);\n          final int v = node.getKey();\n          Color edgeColor = node.getValue();\n          if (v == -1 || edgeColor == prevColor)\n            continue;\n          q.add(new Pair<>(v, edgeColor));\n          // Mark (u, v) as used.\n          graph[u].set(i, new Pair<>(-1, edgeColor));\n        }\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from enum import Enum\n\n\nclass Color(Enum):\n  kInit = 0\n  kRed = 1\n  kBlue = 2\n\n\nclass Solution:\n  def shortestAlternatingPaths(self, n: int, redEdges: List[List[int]], blueEdges: List[List[int]]) -> List[int]:\n    ans = [-1] * n\n    graph = [[] for _ in range(n)]  # graph[u] := [(v, edgeColor)]\n    q = collections.deque([(0, Color.kInit)])  # [(u, prevColor)]\n\n    for u, v in redEdges:\n      graph[u].append((v, Color.kRed))\n\n    for u, v in blueEdges:\n      graph[u].append((v, Color.kBlue))\n\n    step = 0\n    while q:\n      for _ in range(len(q)):\n        u, prevColor = q.popleft()\n        if ans[u] == -1:\n          ans[u] = step\n        for i, (v, edgeColor) in enumerate(graph[u]):\n          if v == -1 or edgeColor == prevColor:\n            continue\n          q.append((v, edgeColor))\n          graph[u][i] = (-1, edgeColor)  # Mark (u, v) as used.\n      step += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}