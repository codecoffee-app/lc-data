{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2800",
            "title": "Shortest String That Contains Three Strings",
            "titleSlug": "shortest-string-that-contains-three-strings",
            "content": "Given three strings <code>a</code>, <code>b</code>, and <code>c</code>, your task is to find a string that has the<strong> minimum</strong> length and contains all three strings as <strong>substrings</strong>.\n<p>If there are multiple such strings, return the<em> </em><strong>lexicographically<em> </em>smallest </strong>one.</p>\n\n<p>Return <em>a string denoting the answer to the problem.</em></p>\n\n<p><strong>Notes</strong></p>\n\n<ul>\n\t<li>A string <code>a</code> is <strong>lexicographically smaller</strong> than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears <strong>earlier </strong>in the alphabet than the corresponding letter in <code>b</code>.</li>\n\t<li>A <strong>substring</strong> is a contiguous sequence of characters within a string.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;abc&quot;, b = &quot;bca&quot;, c = &quot;aaa&quot;\n<strong>Output:</strong> &quot;aaabca&quot;\n<strong>Explanation:</strong>  We show that &quot;aaabca&quot; contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and &quot;aaabca&quot; is the lexicographically smallest one.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;ab&quot;, b = &quot;ba&quot;, c = &quot;aba&quot;\n<strong>Output:</strong> &quot;aba&quot;\n<strong>Explanation: </strong>We show that the string &quot;aba&quot; contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that &quot;aba&quot; is the lexicographically smallest one.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length, c.length &lt;= 100</code></li>\n\t<li><code>a</code>, <code>b</code>, <code>c</code> consist only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 318,
            "dislikes": 260,
            "similarQuestions": "[{\"title\": \"Shortest Common Supersequence \", \"titleSlug\": \"shortest-common-supersequence\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.3K\", \"totalSubmission\": \"50.4K\", \"totalAcceptedRaw\": 15283, \"totalSubmissionRaw\": 50357, \"acRate\": \"30.3%\"}",
            "hints": [
                "Think about how you can generate all possible strings that contain all three input strings as substrings. Can you come up with an efficient algorithm to do this?",
                "Check all permutations of the words a, b, and c. For each permutation, begin by appending some letters to the end of the first word to form the second word. Then, proceed to add more letters to generate the third word."
            ],
            "rephrased": {
                "body": "Given three strings `a`, `b`, and `c`, find the shortest string that contains all three as substrings. If multiple such strings exist, return the lexicographically smallest one.",
                "constraints": [
                    "1 <= a.length, b.length, c.length <= 100",
                    "a, b, c consist only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "a = \"abc\", b = \"bca\", c = \"aaa\"",
                        "output": "\"aaabca\"",
                        "explanation": "The string \"aaabca\" contains \"abc\" (index 2-4), \"bca\" (index 3-5), and \"aaa\" (index 0-2). It is the shortest and lexicographically smallest string satisfying the condition."
                    },
                    {
                        "input": "a = \"ab\", b = \"ba\", c = \"aba\"",
                        "output": "\"aba\"",
                        "explanation": "The string \"aba\" contains \"ab\" (index 0-1), \"ba\" (index 1-2), and \"aba\" (index 0-2). It is the shortest possible string containing all three substrings."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "shortest-common-supersequence",
                "title": "Shortest Common Supersequence ",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think about how you can generate all possible strings that contain all three input strings as substrings. Can you come up with an efficient algorithm to do this?",
            "Check all permutations of the words a, b, and c. For each permutation, begin by appending some letters to the end of the first word to form the second word. Then, proceed to add more letters to generate the third word."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string minimumString(string a, string b, string c) {\n    const string abc = merge(a, merge(b, c));\n    const string acb = merge(a, merge(c, b));\n    const string bac = merge(b, merge(a, c));\n    const string bca = merge(b, merge(c, a));\n    const string cab = merge(c, merge(a, b));\n    const string cba = merge(c, merge(b, a));\n    return getMin({abc, acb, bac, bca, cab, cba});\n  }\n\n private:\n  // Merges a and b.\n  string merge(const string& a, const string& b) {\n    if (b.find(a) != string::npos)  // a is a substring of b.\n      return b;\n    for (int i = 0; i < a.length(); ++i) {\n      const string aSuffix = a.substr(i);\n      const string bPrefix = b.substr(0, min(b.length(), aSuffix.length()));\n      if (aSuffix == bPrefix)\n        return a + b.substr(bPrefix.length());\n    }\n    return a + b;\n  }\n\n  // Returns the lexicographically smallest string.\n  string getMin(const vector<string>& words) {\n    string res = words[0];\n    for (int i = 1; i < words.size(); ++i)\n      res = getMin(res, words[i]);\n    return res;\n  }\n\n  // Returns the lexicographically smaller string.\n  string getMin(const string& a, const string& b) {\n    return (a.length() < b.length() || (a.length() == b.length() && a < b)) ? a\n                                                                            : b;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public String minimumString(String a, String b, String c) {\n    final String abc = merge(a, merge(b, c));\n    final String acb = merge(a, merge(c, b));\n    final String bac = merge(b, merge(a, c));\n    final String bca = merge(b, merge(c, a));\n    final String cab = merge(c, merge(a, b));\n    final String cba = merge(c, merge(b, a));\n    return getMin(Arrays.asList(abc, acb, bac, bca, cab, cba));\n  }\n\n  // Merges a and b.\n  private String merge(String a, String b) {\n    if (b.contains(a)) // a is a substring of b.\n      return b;\n    for (int i = 0; i < a.length(); ++i) {\n      final String aSuffix = a.substring(i);\n      final String bPrefix = b.substring(0, Math.min(b.length(), aSuffix.length()));\n      if (aSuffix.equals(bPrefix))\n        return a + b.substring(bPrefix.length());\n    }\n    return a + b;\n  }\n\n  // Returns the lexicographically smallest string.\n  private String getMin(List<String> words) {\n    String res = words.get(0);\n    for (int i = 1; i < words.size(); ++i)\n      res = getMin(res, words.get(i));\n    return res;\n  }\n\n  // Returns the lexicographically smaller string.\n  private String getMin(String a, String b) {\n    return (a.length() < b.length() || (a.length() == b.length() && a.compareTo(b) < 0)) ? a : b;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumString(self, a: str, b: str, c: str) -> str:\n    def merge(a: str, b: str) -> str:\n      \"\"\"Merges a and b.\"\"\"\n      if a in b:  # a is a substring of b.\n        return b\n      for i in range(len(a)):\n        aSuffix = a[i:]\n        bPrefix = b[:len(aSuffix)]\n        if aSuffix == bPrefix:\n          return a + b[len(bPrefix):]\n      return a + b\n\n    abc = merge(a, merge(b, c))\n    acb = merge(a, merge(c, b))\n    bac = merge(b, merge(a, c))\n    bca = merge(b, merge(c, a))\n    cab = merge(c, merge(a, b))\n    cba = merge(c, merge(b, a))\n    return self._getMin([abc, acb, bac, bca, cab, cba])\n\n  def _getMin(self, words: List[str]) -> str:\n    \"\"\"Returns the lexicographically smallest string.\"\"\"\n\n    def getMin(a: str, b: str) -> str:\n      \"\"\"Returns the lexicographically smaller string.\"\"\"\n      return a if len(a) < len(b) or (len(a) == len(b) and a < b) else b\n\n    res = words[0]\n    for i in range(1, len(words)):\n      res = getMin(res, words[i])\n    return res\n",
                "lang_text": "py"
            }
        }
    }
}