{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1574",
            "title": "Shortest Subarray to be Removed to Make Array Sorted",
            "titleSlug": "shortest-subarray-to-be-removed-to-make-array-sorted",
            "content": "<p>Given an integer array <code>arr</code>, remove a subarray (can be empty) from <code>arr</code> such that the remaining elements in <code>arr</code> are <strong>non-decreasing</strong>.</p>\n\n<p>Return <em>the length of the shortest subarray to remove</em>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous subsequence of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3,10,4,2,3,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\nAnother correct solution is to remove the subarray [3,10,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [5,4,3,2,1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The array is already non-decreasing. We do not need to remove any elements.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1554,
            "dislikes": 55,
            "similarQuestions": "[{\"title\": \"Count the Number of Incremovable Subarrays II\", \"titleSlug\": \"count-the-number-of-incremovable-subarrays-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Count the Number of Incremovable Subarrays I\", \"titleSlug\": \"count-the-number-of-incremovable-subarrays-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"28.7K\", \"totalSubmission\": \"76.2K\", \"totalAcceptedRaw\": 28696, \"totalSubmissionRaw\": 76239, \"acRate\": \"37.6%\"}",
            "hints": [
                "The key is to find the longest non-decreasing subarray starting with the first element or ending with the last element, respectively.",
                "After removing some subarray, the result is the concatenation of a sorted prefix and a sorted suffix, where the last element of the prefix is smaller than the first element of the suffix."
            ],
            "rephrased": {
                "body": "Given an integer array `arr`, find the shortest subarray (which can be empty) that needs to be removed so that the remaining elements in `arr` form a non-decreasing sequence. Return the length of this shortest subarray.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,10,4,2,3,5]",
                        "output": "3",
                        "explanation": "Removing the subarray [10,4,2] results in the non-decreasing sequence [1,2,3,3,5]. The length of the removed subarray is 3. Another valid solution is removing [3,10,4]."
                    },
                    {
                        "input": "[5,4,3,2,1]",
                        "output": "4",
                        "explanation": "The array is strictly decreasing. To make it non-decreasing, we must remove all but one element. Removing [5,4,3,2] leaves [1], which is non-decreasing. Other solutions include removing [4,3,2,1]."
                    },
                    {
                        "input": "[1,2,3]",
                        "output": "0",
                        "explanation": "The array is already non-decreasing, so no elements need to be removed."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-the-number-of-incremovable-subarrays-ii",
                "title": "Count the Number of Incremovable Subarrays II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "count-the-number-of-incremovable-subarrays-i",
                "title": "Count the Number of Incremovable Subarrays I",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The key is to find the longest non-decreasing subarray starting with the first element or ending with the last element, respectively.",
            "After removing some subarray, the result is the concatenation of a sorted prefix and a sorted suffix, where the last element of the prefix is smaller than the first element of the suffix."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findLengthOfShortestSubarray(vector<int>& arr) {\n    const int n = arr.size();\n    int l = 0;\n    int r = n - 1;\n\n    // arr[0..l] is non-decreasing.\n    while (l < n - 1 && arr[l + 1] >= arr[l])\n      ++l;\n    // arr[r..n - 1] is non-decreasing.\n    while (r > 0 && arr[r - 1] <= arr[r])\n      --r;\n    // Remove arr[l + 1..n - 1] or arr[0..r - 1].\n    int ans = min(n - 1 - l, r);\n\n    // Since arr[0..l] and arr[r..n - 1] are non-decreasing, we place pointers\n    // at the rightmost indices, l and n - 1, and greedily shrink them towards\n    // the leftmost indices, 0 and r, respectively. By removing arr[i + 1..j],\n    // we ensure that arr becomes non-decreasing.\n    int i = l;\n    int j = n - 1;\n    while (i >= 0 && j >= r && j > i) {\n      if (arr[i] <= arr[j])\n        --j;\n      else\n        --i;\n      ans = min(ans, j - i);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findLengthOfShortestSubarray(int[] arr) {\n    final int n = arr.length;\n    int l = 0;\n    int r = n - 1;\n\n    // arr[0..l] is non-decreasing prefix.\n    while (l < n - 1 && arr[l + 1] >= arr[l])\n      ++l;\n    // arr[r..n - 1] is non-decreasing suffix.\n    while (r > 0 && arr[r - 1] <= arr[r])\n      --r;\n    // Remove arr[l + 1..n - 1] or arr[0..r - 1]\n    int ans = Math.min(n - 1 - l, r);\n\n    // Since arr[0..l] and arr[r..n - 1] are non-decreasing, we place pointers\n    // at the rightmost indices, l and n - 1, and greedily shrink them towards\n    // the leftmost indices, 0 and r, respectively. By removing arr[i + 1..j],\n    // we ensure that arr becomes non-decreasing.\n    int i = l;\n    int j = n - 1;\n    while (i >= 0 && j >= r && j > i) {\n      if (arr[i] <= arr[j])\n        --j;\n      else\n        --i;\n      ans = Math.min(ans, j - i);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findLengthOfShortestSubarray(self, arr: List[int]) -> int:\n    n = len(arr)\n    l = 0\n    r = n - 1\n\n    # arr[0..l] is non-decreasing.\n    while l < n - 1 and arr[l + 1] >= arr[l]:\n      l += 1\n    # arr[r..n - 1] is non-decreasing.\n    while r > 0 and arr[r - 1] <= arr[r]:\n      r -= 1\n    # Remove arr[l + 1..n - 1] or arr[0..r - 1].\n    ans = min(n - 1 - l, r)\n\n    # Since arr[0..l] and arr[r..n - 1] are non-decreasing, we place pointers\n    # at the rightmost indices, l and n - 1, and greedily shrink them towards\n    # the leftmost indices, 0 and r, respectively. By removing arr[i + 1..j],\n    # we ensure that arr becomes non-decreasing.\n    i = l\n    j = n - 1\n    while i >= 0 and j >= r and j > i:\n      if arr[i] <= arr[j]:\n        j -= 1\n      else:\n        i -= 1\n      ans = min(ans, j - i)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}