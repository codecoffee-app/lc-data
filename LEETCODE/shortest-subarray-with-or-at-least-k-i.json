{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3095",
            "title": "Shortest Subarray With OR at Least K I",
            "titleSlug": "shortest-subarray-with-or-at-least-k-i",
            "content": "<p>You are given an array <code>nums</code> of <strong>non-negative</strong> integers and an integer <code>k</code>.</p>\n\n<p>An array is called <strong>special</strong> if the bitwise <code>OR</code> of all of its elements is <strong>at least</strong> <code>k</code>.</p>\n\n<p>Return <em>the length of the <strong>shortest</strong> <strong>special</strong> <strong>non-empty</strong> <span data-keyword=\"subarray-nonempty\">subarray</span> of</em> <code>nums</code>, <em>or return</em> <code>-1</code> <em>if no special subarray exists</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[3]</code> has <code>OR</code> value of <code>3</code>. Hence, we return <code>1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,1,8], k = 10</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[2,1,8]</code> has <code>OR</code> value of <code>11</code>. Hence, we return <code>3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2], k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray <code>[1]</code> has <code>OR</code> value of <code>1</code>. Hence, we return <code>1</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>0 &lt;= k &lt; 64</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 78,
            "dislikes": 9,
            "similarQuestions": "[{\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Shortest Subarray with Sum at Least K\", \"titleSlug\": \"shortest-subarray-with-sum-at-least-k\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"25.9K\", \"totalSubmission\": \"63.1K\", \"totalAcceptedRaw\": 25879, \"totalSubmissionRaw\": 63144, \"acRate\": \"41.0%\"}",
            "hints": [
                "The constraints are small. Brute force checking all the subarrays."
            ],
            "rephrased": {
                "body": "Given an array `nums` of non-negative integers and an integer `k`, find the length of the shortest non-empty subarray whose bitwise OR of all elements is at least `k`. Return the length of the shortest special subarray, or -1 if no such subarray exists.",
                "constraints": [
                    "1 <= nums.length <= 50",
                    "0 <= nums[i] <= 50",
                    "0 <= k < 64"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,2,3], k = 2",
                        "output": "1",
                        "explanation": "The subarray [3] has an OR value of 3, which is greater than or equal to 2. Therefore, the shortest special subarray has a length of 1."
                    },
                    {
                        "input": "nums = [2,1,8], k = 10",
                        "output": "3",
                        "explanation": "The subarray [2,1,8] has an OR value of 11, which is greater than or equal to 10. Therefore, the shortest special subarray has a length of 3."
                    },
                    {
                        "input": "nums = [1,2], k = 0",
                        "output": "1",
                        "explanation": "The subarray [1] has an OR value of 1, which is greater than or equal to 0. Therefore, the shortest special subarray has a length of 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-size-subarray-sum",
                "title": "Minimum Size Subarray Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "shortest-subarray-with-sum-at-least-k",
                "title": "Shortest Subarray with Sum at Least K",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The constraints are small. Brute force checking all the subarrays."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumSubarrayLength(vector<int>& nums, int k) {\n    constexpr int kMax = 50;\n    const int n = nums.size();\n    int ans = n + 1;\n    int ors = 0;\n    vector<int> count(kMax + 1);\n\n    for (int l = 0, r = 0; r < n; r++) {\n      ors = orNum(ors, nums[r], count);\n      while (ors >= k && l <= r) {\n        ans = min(ans, r - l + 1);\n        ors = undoOrNum(ors, nums[l], count);\n        ++l;\n      }\n    }\n\n    return (ans == n + 1) ? -1 : ans;\n  }\n\n private:\n  static constexpr int kMaxBit = 30;\n\n  int orNum(int ors, int num, vector<int>& count) {\n    for (int i = 0; i < kMaxBit; ++i)\n      if (num >> i & 1 && ++count[i] == 1)\n        ors += 1 << i;\n    return ors;\n  }\n\n  int undoOrNum(int ors, int num, vector<int>& count) {\n    for (int i = 0; i < kMaxBit; ++i)\n      if (num >> i & 1 && --count[i] == 0)\n        ors -= 1 << i;\n    return ors;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumSubarrayLength(int[] nums, int k) {\n    final int kMax = 50;\n    final int n = nums.length;\n    int ans = n + 1;\n    int ors = 0;\n    int[] count = new int[kMax + 1];\n\n    for (int l = 0, r = 0; r < n; ++r) {\n      ors = orNum(ors, nums[r], count);\n      while (ors >= k && l <= r) {\n        ans = Math.min(ans, r - l + 1);\n        ors = undoOrNum(ors, nums[l], count);\n        ++l;\n      }\n    }\n\n    return (ans == n + 1) ? -1 : ans;\n  }\n\n  private static final int kMaxBit = 30;\n\n  private int orNum(int ors, int num, int[] count) {\n    for (int i = 0; i < kMaxBit; ++i)\n      if ((num >> i & 1) == 1 && ++count[i] == 1)\n        ors += 1 << i;\n    return ors;\n  }\n\n  private int undoOrNum(int ors, int num, int[] count) {\n    for (int i = 0; i < kMaxBit; ++i)\n      if ((num >> i & 1) == 1 && --count[i] == 0)\n        ors -= 1 << i;\n    return ors;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumSubarrayLength(self, nums: List[int], k: int) -> int:\n    ans = len(nums) + 1\n    ors = 0\n    count = collections.Counter()\n\n    l = 0\n    for r, num in enumerate(nums):\n      ors = self._orNum(ors, num, count)\n      while ors >= k and l <= r:\n        ans = min(ans, r - l + 1)\n        ors = self._undoOrNum(ors, nums[l], count)\n        l += 1\n\n    return -1 if ans == len(nums) + 1 else ans\n\n  def _orNum(self, ors: int, num: int, count: Dict[int, int]) -> int:\n    for i in range(30):\n      if num >> i & 1:\n        count[i] += 1\n        if count[i] == 1:\n          ors += 1 << i\n    return ors\n\n  def _undoOrNum(self, ors: int, num: int, count: Dict[int, int]) -> int:\n    for i in range(30):\n      if num >> i & 1:\n        count[i] -= 1\n        if count[i] == 0:\n          ors -= 1 << i\n    return ors\n",
                "lang_text": "py"
            }
        }
    }
}