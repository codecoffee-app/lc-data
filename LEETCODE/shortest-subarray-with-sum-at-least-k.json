{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "862",
            "title": "Shortest Subarray with Sum at Least K",
            "titleSlug": "shortest-subarray-with-sum-at-least-k",
            "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the length of the shortest non-empty <strong>subarray</strong> of </em><code>nums</code><em> with a sum of at least </em><code>k</code>. If there is no such <strong>subarray</strong>, return <code>-1</code>.</p>\n\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> 1\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2], k = 4\n<strong>Output:</strong> -1\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [2,-1,2], k = 3\n<strong>Output:</strong> 3\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4122,
            "dislikes": 112,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                },
                {
                    "name": "Monotonic Queue",
                    "slug": "monotonic-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"94.1K\", \"totalSubmission\": \"362K\", \"totalAcceptedRaw\": 94090, \"totalSubmissionRaw\": 361999, \"acRate\": \"26.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of integers `nums` and an integer `k`, find the length of the shortest non-empty contiguous subarray of `nums` whose sum is at least `k`. If no such subarray exists, return -1.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-10^5 <= nums[i] <= 10^5",
                    "1 <= k <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [1], k = 1",
                        "output": "1",
                        "explanation": "The subarray [1] has a sum of 1, which is at least k=1. Its length is 1."
                    },
                    {
                        "input": "nums = [1,2], k = 4",
                        "output": "-1",
                        "explanation": "There is no subarray whose sum is at least 4."
                    },
                    {
                        "input": "nums = [2,-1,2], k = 3",
                        "output": "3",
                        "explanation": "The subarray [2,-1,2] has a sum of 3, which is at least k=3. Its length is 3. The subarray [2, -1, 2] is the shortest such subarray."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Monotonic Queue",
                "slug": "monotonic-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int shortestSubarray(vector<int>& nums, int k) {\n    const int n = nums.size();\n    int ans = n + 1;\n    deque<int> dq;\n    vector<long> prefix{0};\n\n    for (int i = 0; i < n; ++i)\n      prefix.push_back(prefix.back() + nums[i]);\n\n    for (int i = 0; i < n + 1; ++i) {\n      while (!dq.empty() && prefix[i] - prefix[dq.front()] >= k)\n        ans = min(ans, i - dq.front()), dq.pop_front();\n      while (!dq.empty() && prefix[i] <= prefix[dq.back()])\n        dq.pop_back();\n      dq.push_back(i);\n    }\n\n    return ans <= n ? ans : -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int shortestSubarray(int[] nums, int k) {\n    final int n = nums.length;\n    int ans = n + 1;\n    Deque<Integer> dq = new ArrayDeque<>();\n    long[] prefix = new long[n + 1];\n\n    for (int i = 0; i < n; ++i)\n      prefix[i + 1] = (long) nums[i] + prefix[i];\n\n    for (int i = 0; i < n + 1; ++i) {\n      while (!dq.isEmpty() && prefix[i] - prefix[dq.getFirst()] >= k)\n        ans = Math.min(ans, i - dq.pollFirst());\n      while (!dq.isEmpty() && prefix[i] <= prefix[dq.getLast()])\n        dq.pollLast();\n      dq.addLast(i);\n    }\n\n    return ans <= n ? ans : -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def shortestSubarray(self, nums: List[int], k: int) -> int:\n    n = len(nums)\n    ans = n + 1\n    dq = collections.deque()\n    prefix = [0] + list(itertools.accumulate(nums))\n\n    for i in range(n + 1):\n      while dq and prefix[i] - prefix[dq[0]] >= k:\n        ans = min(ans, i - dq.popleft())\n      while dq and prefix[i] <= prefix[dq[-1]]:\n        dq.pop()\n      dq.append(i)\n\n    return ans if ans <= n else -1\n",
                "lang_text": "py"
            }
        }
    }
}