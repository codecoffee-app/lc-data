{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "384",
            "title": "Shuffle an Array",
            "titleSlug": "shuffle-an-array",
            "content": "<p>Given an integer array <code>nums</code>, design an algorithm to randomly shuffle the array. All permutations of the array should be <strong>equally likely</strong> as a result of the shuffling.</p>\n\n<p>Implement the <code>Solution</code> class:</p>\n\n<ul>\n\t<li><code>Solution(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li>\n\t<li><code>int[] reset()</code> Resets the array to its original configuration and returns it.</li>\n\t<li><code>int[] shuffle()</code> Returns a random shuffling of the array.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;, &quot;shuffle&quot;, &quot;reset&quot;, &quot;shuffle&quot;]\n[[[1, 2, 3]], [], [], []]\n<strong>Output</strong>\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                       // Any permutation of [1,2,3] must be equally likely to be returned.\n                       // Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>All the elements of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>reset</code> and <code>shuffle</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1312,
            "dislikes": 902,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Randomized",
                    "slug": "randomized"
                }
            ],
            "stats": "{\"totalAccepted\": \"323.4K\", \"totalSubmission\": \"556.9K\", \"totalAcceptedRaw\": 323411, \"totalSubmissionRaw\": 556911, \"acRate\": \"58.1%\"}",
            "hints": [
                "The solution expects that we always use the original array to shuffle() else some of the test cases fail. (Credits; @snehasingh31)"
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, implement a data structure that allows you to randomly shuffle the array such that all permutations are equally likely.",
                "constraints": [
                    "1 <= nums.length <= 50",
                    "-10<sup>6</sup> <= nums[i] <= 10<sup>6</sup>",
                    "All the elements of nums are unique.",
                    "At most 10<sup>4</sup> calls in total will be made to reset and shuffle."
                ],
                "testcases": [
                    {
                        "input": "[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]",
                        "output": "[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]",
                        "explanation": "First, the Solution object is initialized with the array [1, 2, 3].  The `shuffle()` method is called, which returns a random permutation of the array. Example: [3, 1, 2]. The `reset()` method restores the array to its original configuration [1, 2, 3] and returns it. Finally, `shuffle()` is called again, returning another random permutation. Example: [1, 3, 2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The solution expects that we always use the original array to shuffle() else some of the test cases fail. (Credits; @snehasingh31)"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Randomized",
                "slug": "randomized"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  Solution(vector<int>& nums) : nums(move(nums)) {}\n\n  /** Resets the array to its original configuration and return it. */\n  vector<int> reset() {\n    return nums;\n  }\n\n  /** Returns a random shuffling of the array. */\n  vector<int> shuffle() {\n    vector<int> A(nums);\n    for (int i = A.size() - 1; i > 0; --i) {\n      const int j = rand() % (i + 1);\n      swap(A[i], A[j]);\n    }\n    return A;\n  }\n\n private:\n  vector<int> nums;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public Solution(int[] nums) {\n    this.nums = nums;\n  }\n\n  /** Resets the array to its original configuration and return it. */\n  public int[] reset() {\n    return nums;\n  }\n\n  /** Returns a random shuffling of the array. */\n  public int[] shuffle() {\n    int[] A = nums.clone();\n    for (int i = A.length - 1; i > 0; --i) {\n      final int j = rand.nextInt(i + 1);\n      swap(A, i, j);\n    }\n    return A;\n  }\n\n  private int[] nums;\n  private Random rand = new Random();\n\n  private void swap(int[] A, int i, int j) {\n    final int temp = A[i];\n    A[i] = A[j];\n    A[j] = temp;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def __init__(self, nums: List[int]):\n    self.nums = nums\n\n  def reset(self) -> List[int]:\n    \"\"\"\n    Resets the array to its original configuration and return it.\n    \"\"\"\n    return self.nums\n\n  def shuffle(self) -> List[int]:\n    \"\"\"\n    Returns a random shuffling of the array.\n    \"\"\"\n    A = self.nums.copy()\n    for i in range(len(A) - 1, 0, -1):\n      j = random.randint(0, i)\n      A[i], A[j] = A[j], A[i]\n    return A\n",
                "lang_text": "py"
            }
        }
    }
}