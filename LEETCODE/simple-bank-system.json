{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2043",
            "title": "Simple Bank System",
            "titleSlug": "simple-bank-system",
            "content": "<p>You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has <code>n</code> accounts numbered from <code>1</code> to <code>n</code>. The initial balance of each account is stored in a <strong>0-indexed</strong> integer array <code>balance</code>, with the <code>(i + 1)<sup>th</sup></code> account having an initial balance of <code>balance[i]</code>.</p>\n\n<p>Execute all the <strong>valid</strong> transactions. A transaction is <strong>valid</strong> if:</p>\n\n<ul>\n\t<li>The given account number(s) are between <code>1</code> and <code>n</code>, and</li>\n\t<li>The amount of money withdrawn or transferred from is <strong>less than or equal</strong> to the balance of the account.</li>\n</ul>\n\n<p>Implement the <code>Bank</code> class:</p>\n\n<ul>\n\t<li><code>Bank(long[] balance)</code> Initializes the object with the <strong>0-indexed</strong> integer array <code>balance</code>.</li>\n\t<li><code>boolean transfer(int account1, int account2, long money)</code> Transfers <code>money</code> dollars from the account numbered <code>account1</code> to the account numbered <code>account2</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li>\n\t<li><code>boolean deposit(int account, long money)</code> Deposit <code>money</code> dollars into the account numbered <code>account</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li>\n\t<li><code>boolean withdraw(int account, long money)</code> Withdraw <code>money</code> dollars from the account numbered <code>account</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Bank&quot;, &quot;withdraw&quot;, &quot;transfer&quot;, &quot;deposit&quot;, &quot;transfer&quot;, &quot;withdraw&quot;]\n[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]\n<strong>Output</strong>\n[null, true, true, true, false, false]\n\n<strong>Explanation</strong>\nBank bank = new Bank([10, 100, 20, 50, 30]);\nbank.withdraw(3, 10);    // return true, account 3 has a balance of $20, so it is valid to withdraw $10.\n                         // Account 3 has $20 - $10 = $10.\nbank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.\n                         // Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.\nbank.deposit(5, 20);     // return true, it is valid to deposit $20 to account 5.\n                         // Account 5 has $10 + $20 = $30.\nbank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,\n                         // so it is invalid to transfer $15 from it.\nbank.withdraw(10, 50);   // return false, it is invalid because account 10 does not exist.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == balance.length</code></li>\n\t<li><code>1 &lt;= n, account, account1, account2 &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= balance[i], money &lt;= 10<sup>12</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <strong>each</strong> function <code>transfer</code>, <code>deposit</code>, <code>withdraw</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 226,
            "dislikes": 205,
            "similarQuestions": "[{\"title\": \"Design an ATM Machine\", \"titleSlug\": \"design-an-atm-machine\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"23K\", \"totalSubmission\": \"35.8K\", \"totalAcceptedRaw\": 23029, \"totalSubmissionRaw\": 35829, \"acRate\": \"64.3%\"}",
            "hints": [
                "How do you determine if a transaction will fail?",
                "Simply apply the operations if the transaction is valid."
            ],
            "rephrased": {
                "body": "Design a `Bank` class to manage transactions (transfer, deposit, and withdraw) for `n` accounts.  The bank accounts are numbered from 1 to `n`, and the initial balance of each account is stored in a 0-indexed integer array `balance`, where `balance[i]` represents the initial balance of account `i + 1`. Implement the following methods:\n\n*   `Bank(long[] balance)`: Initializes the object with the `balance` array.\n*   `boolean transfer(int account1, int account2, long money)`: Transfers `money` from `account1` to `account2`. Return `true` if successful, `false` otherwise.\n*   `boolean deposit(int account, long money)`: Deposits `money` into `account`. Return `true` if successful, `false` otherwise.\n*   `boolean withdraw(int account, long money)`: Withdraws `money` from `account`. Return `true` if successful, `false` otherwise.\n\nA transaction is considered valid if:\n\n*   All account numbers are within the range of 1 to `n`.\n*   The withdrawal/transfer amount is less than or equal to the account's current balance.",
                "constraints": [
                    "n == balance.length",
                    "1 <= n, account, account1, account2 <= 10^5",
                    "0 <= balance[i], money <= 10^12",
                    "At most 10^4 calls will be made to each function transfer, deposit, withdraw."
                ],
                "testcases": [
                    {
                        "input": "[\"Bank\", \"withdraw\", \"transfer\", \"deposit\", \"transfer\", \"withdraw\"]\n[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]",
                        "output": "[null, true, true, true, false, false]",
                        "explanation": "Initially, balances are [10, 100, 20, 50, 30].\nwithdraw(3, 10): Account 3's balance is 20. After withdrawal, balance becomes 10. Returns true.\ntransfer(5, 1, 20): Account 5's balance is 30, Account 1's balance is 10. After transfer, Account 5 becomes 10, Account 1 becomes 30. Returns true.\ndeposit(5, 20): Account 5's balance is 10. After deposit, balance becomes 30. Returns true.\ntransfer(3, 4, 15): Account 3's balance is 10, which is less than 15. Returns false.\nwithdraw(10, 50): Account 10 does not exist. Returns false."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-an-atm-machine",
                "title": "Design an ATM Machine",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How do you determine if a transaction will fail?",
            "Simply apply the operations if the transaction is valid."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ]
    }
}