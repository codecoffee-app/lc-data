{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "71",
            "title": "Simplify Path",
            "titleSlug": "simplify-path",
            "content": "<p>Given a string <code>path</code>, which is an <strong>absolute path</strong> (starting with a slash <code>&#39;/&#39;</code>) to a file or directory in a Unix-style file system, convert it to the simplified <strong>canonical path</strong>.</p>\n\n<p>In a Unix-style file system, a period <code>&#39;.&#39;</code> refers to the current directory, a double period <code>&#39;..&#39;</code> refers to the directory up a level, and any multiple consecutive slashes (i.e. <code>&#39;//&#39;</code>) are treated as a single slash <code>&#39;/&#39;</code>. For this problem, any other format of periods such as <code>&#39;...&#39;</code> are treated as file/directory names.</p>\n\n<p>The <strong>canonical path</strong> should have the following format:</p>\n\n<ul>\n\t<li>The path starts with a single slash <code>&#39;/&#39;</code>.</li>\n\t<li>Any two directories are separated by a single slash <code>&#39;/&#39;</code>.</li>\n\t<li>The path does not end with a trailing <code>&#39;/&#39;</code>.</li>\n\t<li>The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period <code>&#39;.&#39;</code> or double period <code>&#39;..&#39;</code>)</li>\n</ul>\n\n<p>Return <em>the simplified <strong>canonical path</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> path = &quot;/home/&quot;\n<strong>Output:</strong> &quot;/home&quot;\n<strong>Explanation:</strong> Note that there is no trailing slash after the last directory name.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> path = &quot;/../&quot;\n<strong>Output:</strong> &quot;/&quot;\n<strong>Explanation:</strong> Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> path = &quot;/home//foo/&quot;\n<strong>Output:</strong> &quot;/home/foo&quot;\n<strong>Explanation:</strong> In the canonical path, multiple consecutive slashes are replaced by a single one.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= path.length &lt;= 3000</code></li>\n\t<li><code>path</code> consists of English letters, digits, period <code>&#39;.&#39;</code>, slash <code>&#39;/&#39;</code> or <code>&#39;_&#39;</code>.</li>\n\t<li><code>path</code> is a valid absolute Unix path.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5226,
            "dislikes": 1146,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"661.2K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 661171, \"totalSubmissionRaw\": 1595991, \"acRate\": \"41.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an absolute Unix path `path`, simplify it to its canonical form. The canonical path should:\n\n*   Start with a single slash '/'.\n*   Have directories separated by single slashes.\n*   Not end with a trailing slash.\n*   Exclude '.' (current directory) and '..' (parent directory) references, resolving the path to its final state.\nMultiple consecutive slashes should be treated as a single slash.",
                "constraints": [
                    "1 <= path.length <= 3000",
                    "path consists of English letters, digits, period '.', slash '/', or '_'.",
                    "path is a valid absolute Unix path."
                ],
                "testcases": [
                    {
                        "input": "/home/",
                        "output": "/home",
                        "explanation": "The trailing slash is removed."
                    },
                    {
                        "input": "/../",
                        "output": "/",
                        "explanation": "Moving up from the root directory has no effect."
                    },
                    {
                        "input": "/home//foo/",
                        "output": "/home/foo",
                        "explanation": "Multiple consecutive slashes are reduced to a single slash, and the trailing slash is removed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string simplifyPath(string path) {\n    string ans;\n    istringstream iss(path);\n    vector<string> stack;\n\n    for (string dir; getline(iss, dir, '/');) {\n      if (dir.empty() || dir == \".\")\n        continue;\n      if (dir == \"..\") {\n        if (!stack.empty())\n          stack.pop_back();\n      } else {\n        stack.push_back(dir);\n      }\n    }\n\n    for (const string& s : stack)\n      ans += \"/\" + s;\n\n    return ans.empty() ? \"/\" : ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String simplifyPath(String path) {\n    final String[] dirs = path.split(\"/\");\n    Stack<String> stack = new Stack<>();\n\n    for (final String dir : dirs) {\n      if (dir.isEmpty() || dir.equals(\".\"))\n        continue;\n      if (dir.equals(\"..\")) {\n        if (!stack.isEmpty())\n          stack.pop();\n      } else {\n        stack.push(dir);\n      }\n    }\n\n    return \"/\" + String.join(\"/\", stack);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def simplifyPath(self, path: str) -> str:\n    stack = []\n\n    for str in path.split('/'):\n      if str in ('', '.'):\n        continue\n      if str == '..':\n        if stack:\n          stack.pop()\n      else:\n        stack.append(str)\n\n    return '/' + '/'.join(stack)\n",
                "lang_text": "py"
            }
        }
    }
}