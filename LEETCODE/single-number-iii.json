{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "260",
            "title": "Single Number III",
            "titleSlug": "single-number-iii",
            "content": "<p>Given an integer array <code>nums</code>, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in <strong>any order</strong>.</p>\n\n<p>You must write an&nbsp;algorithm that runs in linear runtime complexity and uses&nbsp;only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,3,2,5]\n<strong>Output:</strong> [3,5]\n<strong>Explanation: </strong> [5, 3] is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0]\n<strong>Output:</strong> [-1,0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> [1,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>Each integer in <code>nums</code> will appear twice, only two integers will appear once.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5545,
            "dislikes": 225,
            "similarQuestions": "[{\"title\": \"Single Number\", \"titleSlug\": \"single-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Single Number II\", \"titleSlug\": \"single-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find The Original Array of Prefix Xor\", \"titleSlug\": \"find-the-original-array-of-prefix-xor\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"330K\", \"totalSubmission\": \"484.6K\", \"totalAcceptedRaw\": 330005, \"totalSubmissionRaw\": 484573, \"acRate\": \"68.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, where exactly two elements appear only once and all other elements appear exactly twice, find the two unique elements. The order of the returned elements does not matter. Your algorithm must have linear runtime complexity and use only constant extra space.",
                "constraints": [
                    "2 <= nums.length <= 3 * 10^4",
                    "-2^31 <= nums[i] <= 2^31 - 1",
                    "Each integer in nums will appear twice, except for two integers which will appear once."
                ],
                "testcases": [
                    {
                        "input": "[1,2,1,3,2,5]",
                        "output": "[3,5]",
                        "explanation": "One possible valid answer is [5, 3]."
                    },
                    {
                        "input": "[-1,0]",
                        "output": "[-1,0]",
                        "explanation": null
                    },
                    {
                        "input": "[0,1]",
                        "output": "[1,0]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "single-number",
                "title": "Single Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "single-number-ii",
                "title": "Single Number II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-the-original-array-of-prefix-xor",
                "title": "Find The Original Array of Prefix Xor",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> singleNumber(vector<int>& nums) {\n    const int xors = accumulate(nums.begin(), nums.end(), 0, bit_xor<>());\n    const int lowbit = xors & -xors;\n    vector<int> ans(2);\n\n    // Seperate nums into two groups by the lowbit\n    for (const int num : nums)\n      if (num & lowbit)\n        ans[0] ^= num;\n      else\n        ans[1] ^= num;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] singleNumber(int[] nums) {\n    final int xors = Arrays.stream(nums).reduce((a, b) -> a ^ b).getAsInt();\n    final int lowbit = xors & -xors;\n    int[] ans = new int[2];\n\n    // Seperate nums into two groups by the lowbit\n    for (final int num : nums)\n      if ((num & lowbit) > 0)\n        ans[0] ^= num;\n      else\n        ans[1] ^= num;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def singleNumber(self, nums: List[int]) -> List[int]:\n    xors = functools.reduce(operator.xor, nums)\n    lowbit = xors & -xors\n    ans = [0, 0]\n\n    # Seperate nums into two groups by the lowbit\n    for num in nums:\n      if num & lowbit:\n        ans[0] ^= num\n      else:\n        ans[1] ^= num\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}