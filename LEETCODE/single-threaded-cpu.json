{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1834",
            "title": "Single-Threaded CPU",
            "titleSlug": "single-threaded-cpu",
            "content": "<p>You are given <code>n</code>\u200b\u200b\u200b\u200b\u200b\u200b tasks labeled from <code>0</code> to <code>n - 1</code> represented by a 2D integer array <code>tasks</code>, where <code>tasks[i] = [enqueueTime<sub>i</sub>, processingTime<sub>i</sub>]</code> means that the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code>\u200b\u200b\u200b\u200b task will be available to process at <code>enqueueTime<sub>i</sub></code> and will take <code>processingTime<sub>i</sub></code><sub> </sub>to finish processing.</p>\n\n<p>You have a single-threaded CPU that can process <strong>at most one</strong> task at a time and will act in the following way:</p>\n\n<ul>\n\t<li>If the CPU is idle and there are no available tasks to process, the CPU remains idle.</li>\n\t<li>If the CPU is idle and there are available tasks, the CPU will choose the one with the <strong>shortest processing time</strong>. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.</li>\n\t<li>Once a task is started, the CPU will <strong>process the entire task</strong> without stopping.</li>\n\t<li>The CPU can finish a task then start a new one instantly.</li>\n</ul>\n\n<p>Return <em>the order in which the CPU will process the tasks.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [[1,2],[2,4],[3,2],[4,1]]\n<strong>Output:</strong> [0,2,3,1]\n<strong>Explanation: </strong>The events go as follows: \n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]\n<strong>Output:</strong> [4,3,2,0,1]\n<strong>Explanation</strong><strong>: </strong>The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>tasks.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= enqueueTime<sub>i</sub>, processingTime<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3018,
            "dislikes": 257,
            "similarQuestions": "[{\"title\": \"Parallel Courses III\", \"titleSlug\": \"parallel-courses-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Minimum Time to Complete All Tasks\", \"titleSlug\": \"minimum-time-to-complete-all-tasks\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"97.7K\", \"totalSubmission\": \"214.3K\", \"totalAcceptedRaw\": 97685, \"totalSubmissionRaw\": 214298, \"acRate\": \"45.6%\"}",
            "hints": [
                "To simulate the problem we first need to note that if at any point in time there are no enqueued tasks we need to wait to the smallest enqueue time of a non-processed element",
                "We need a data structure like a min-heap to support choosing the task with the smallest processing time from all the enqueued tasks"
            ],
            "rephrased": {
                "body": "You are given a list of tasks, where each task is defined by its enqueue time and processing time. You have a single-threaded CPU that processes tasks one at a time. The CPU prioritizes tasks with the shortest processing time. If multiple tasks have the same shortest processing time, the CPU chooses the task with the smallest index. Return the order in which the CPU processes the tasks.",
                "constraints": [
                    "tasks.length == n",
                    "1 <= n <= 10^5",
                    "1 <= enqueueTime_i, processingTime_i <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[2,4],[3,2],[4,1]]",
                        "output": "[0,2,3,1]",
                        "explanation": "At time 1, task 0 is enqueued and processed. At time 2, task 1 is enqueued. At time 3, task 2 is enqueued. The CPU finishes task 0 and starts task 2 because it has the shortest processing time (2). At time 4, task 3 is enqueued. The CPU finishes task 2 and starts task 3 because it has the shortest processing time (1). Finally, the CPU processes task 1."
                    },
                    {
                        "input": "[[7,10],[7,12],[7,5],[7,4],[7,2]]",
                        "output": "[4,3,2,0,1]",
                        "explanation": "At time 7, all tasks are enqueued. The CPU starts task 4 because it has the shortest processing time (2).  Then the CPU starts task 3 because it has the shortest remaining processing time (4), then task 2(5), task 0(10) and finally task 1(12)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "parallel-courses-iii",
                "title": "Parallel Courses III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-time-to-complete-all-tasks",
                "title": "Minimum Time to Complete All Tasks",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "To simulate the problem we first need to note that if at any point in time there are no enqueued tasks we need to wait to the smallest enqueue time of a non-processed element",
            "We need a data structure like a min-heap to support choosing the task with the smallest processing time from all the enqueued tasks"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> getOrder(vector<vector<int>>& tasks) {\n    const int n = tasks.size();\n\n    // Add index information.\n    for (int i = 0; i < tasks.size(); ++i)\n      tasks[i].push_back(i);\n\n    vector<int> ans;\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> minHeap;\n    int i = 0;      // tasks' pointer\n    long time = 0;  // current time\n\n    std::ranges::sort(tasks);\n    while (i < n || !minHeap.empty()) {\n      if (minHeap.empty())\n        time = max(time, static_cast<long>(tasks[i][0]));\n      while (i < n && time >= tasks[i][0]) {\n        minHeap.emplace(tasks[i][1], tasks[i][2]);\n        ++i;\n      }\n      const auto [procTime, index] = minHeap.top();\n      minHeap.pop();\n      time += procTime;\n      ans.push_back(index);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int procTime;\n  public int index;\n\n  public T(int procTime, int index) {\n    this.procTime = procTime;\n    this.index = index;\n  }\n}\n\nclass Solution {\n  public int[] getOrder(int[][] tasks) {\n    final int n = tasks.length;\n    int[][] A = new int[n][3];\n\n    for (int i = 0; i < n; ++i) {\n      A[i][0] = tasks[i][0];\n      A[i][1] = tasks[i][1];\n      A[i][2] = i;\n    }\n\n    int[] ans = new int[n];\n    int ansIndex = 0;\n    Queue<T> minHeap = new PriorityQueue<>(\n        (a, b) -> a.procTime == b.procTime ? a.index - b.index : a.procTime - b.procTime);\n    int i = 0;     // tasks' pointer\n    long time = 0; // current time\n\n    Arrays.sort(A, Comparator.comparing(a -> a[0]));\n\n    while (i < n || !minHeap.isEmpty()) {\n      if (minHeap.isEmpty())\n        time = Math.max(time, (long) A[i][0]);\n      while (i < n && time >= (long) A[i][0]) {\n        minHeap.offer(new T(A[i][1], A[i][2]));\n        ++i;\n      }\n      final int procTime = minHeap.peek().procTime;\n      final int index = minHeap.poll().index;\n      time += procTime;\n      ans[ansIndex++] = index;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getOrder(self, tasks: List[List[int]]) -> List[int]:\n    n = len(tasks)\n    A = [[*task, i] for i, task in enumerate(tasks)]\n    ans = []\n    minHeap = []\n    i = 0     # tasks' pointer\n    time = 0  # current time\n\n    A.sort()\n\n    while i < n or minHeap:\n      if not minHeap:\n        time = max(time, A[i][0])\n      while i < n and time >= A[i][0]:\n        heapq.heappush(minHeap, (A[i][1], A[i][2]))\n        i += 1\n      procTime, index = heapq.heappop(minHeap)\n      time += procTime\n      ans.append(index)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}