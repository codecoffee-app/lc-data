{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "773",
            "title": "Sliding Puzzle",
            "titleSlug": "sliding-puzzle",
            "content": "<p>On an <code>2 x 3</code> board, there are five tiles labeled from <code>1</code> to <code>5</code>, and an empty square represented by <code>0</code>. A <strong>move</strong> consists of choosing <code>0</code> and a 4-directionally adjacent number and swapping it.</p>\n\n<p>The state of the board is solved if and only if the board is <code>[[1,2,3],[4,5,0]]</code>.</p>\n\n<p>Given the puzzle board <code>board</code>, return <em>the least number of moves required so that the state of the board is solved</em>. If it is impossible for the state of the board to be solved, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/slide1-grid.jpg\" style=\"width: 244px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[1,2,3],[4,0,5]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Swap the 0 and the 5 in one move.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/slide2-grid.jpg\" style=\"width: 244px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[1,2,3],[5,4,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> No number of moves will make the board solved.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/slide3-grid.jpg\" style=\"width: 244px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[4,1,2],[5,0,3]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> 5 is the smallest number of moves that solves the board.\nAn example path:\nAfter move 0: [[4,1,2],[5,0,3]]\nAfter move 1: [[4,1,2],[0,5,3]]\nAfter move 2: [[0,1,2],[4,5,3]]\nAfter move 3: [[1,0,2],[4,5,3]]\nAfter move 4: [[1,2,0],[4,5,3]]\nAfter move 5: [[1,2,3],[4,5,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 2</code></li>\n\t<li><code>board[i].length == 3</code></li>\n\t<li><code>0 &lt;= board[i][j] &lt;= 5</code></li>\n\t<li>Each value <code>board[i][j]</code> is <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1973,
            "dislikes": 49,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"90.6K\", \"totalSubmission\": \"140.4K\", \"totalAcceptedRaw\": 90605, \"totalSubmissionRaw\": 140438, \"acRate\": \"64.5%\"}",
            "hints": [
                "Perform a breadth-first-search, where the nodes are the puzzle boards and edges are if two puzzle boards can be transformed into one another with one move."
            ],
            "rephrased": {
                "body": "On a 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping them. The goal is to find the least number of moves required to transform the given board into the solved state [[1,2,3],[4,5,0]]. If it is impossible to solve the board, return -1.",
                "constraints": [
                    "board.length == 2",
                    "board[i].length == 3",
                    "0 <= board[i][j] <= 5",
                    "Each value board[i][j] is unique."
                ],
                "testcases": [
                    {
                        "input": "[[1,2,3],[4,0,5]]",
                        "output": "1",
                        "explanation": "Swap the 0 and the 5 in one move."
                    },
                    {
                        "input": "[[1,2,3],[5,4,0]]",
                        "output": "-1",
                        "explanation": "No number of moves will make the board solved."
                    },
                    {
                        "input": "[[4,1,2],[5,0,3]]",
                        "output": "5",
                        "explanation": "5 is the smallest number of moves that solves the board. An example path:\nAfter move 0: [[4,1,2],[5,0,3]]\nAfter move 1: [[4,1,2],[0,5,3]]\nAfter move 2: [[0,1,2],[4,5,3]]\nAfter move 3: [[1,0,2],[4,5,3]]\nAfter move 4: [[1,2,0],[4,5,3]]\nAfter move 5: [[1,2,3],[4,5,0]]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Perform a breadth-first-search, where the nodes are the puzzle boards and edges are if two puzzle boards can be transformed into one another with one move."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int slidingPuzzle(vector<vector<int>>& board) {\n    constexpr int m = 2;\n    constexpr int n = 3;\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    const string goal = \"123450\";\n    int steps = 0;\n    string start;\n\n    // Hash 2D vector to string\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        start += '0' + board[i][j];\n\n    if (start == goal)\n      return 0;\n\n    queue<string> q{{start}};\n    unordered_set<string> seen{start};\n\n    while (!q.empty()) {\n      ++steps;\n      for (int sz = q.size(); sz > 0; --sz) {\n        string s = q.front();\n        q.pop();\n        const int zeroIndex = s.find('0');\n        const int i = zeroIndex / n;\n        const int j = zeroIndex % n;\n        for (int k = 0; k < 4; ++k) {\n          const int x = i + dirs[k];\n          const int y = j + dirs[k + 1];\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          const int swappedIndex = x * n + y;\n          swap(s[zeroIndex], s[swappedIndex]);\n          if (s == goal)\n            return steps;\n          if (!seen.count(s)) {\n            q.push(s);\n            seen.insert(s);\n          }\n          swap(s[zeroIndex], s[swappedIndex]);\n        }\n      }\n    }\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int slidingPuzzle(int[][] board) {\n    final int m = 2;\n    final int n = 3;\n    final int[] dirs = {0, 1, 0, -1, 0};\n    final String goal = \"123450\";\n    int steps = 0;\n    StringBuilder startSb = new StringBuilder();\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        startSb.append((char) ('0' + board[i][j]));\n\n    final String start = startSb.toString();\n\n    if (start.equals(goal))\n      return 0;\n\n    Queue<String> q = new ArrayDeque<>(Arrays.asList(start));\n    Set<String> seen = new HashSet<>(Arrays.asList(start));\n\n    while (!q.isEmpty()) {\n      ++steps;\n      for (int sz = q.size(); sz > 0; --sz) {\n        final String s = q.poll();\n        final int zeroIndex = s.indexOf(\"0\");\n        final int i = zeroIndex / n;\n        final int j = zeroIndex % n;\n        for (int k = 0; k < 4; ++k) {\n          final int x = i + dirs[k];\n          final int y = j + dirs[k + 1];\n          if (x < 0 || x == m || y < 0 || y == n)\n            continue;\n          final int swappedIndex = x * n + y;\n          StringBuilder sb = new StringBuilder(s);\n          sb.setCharAt(zeroIndex, s.charAt(swappedIndex));\n          sb.setCharAt(swappedIndex, s.charAt(zeroIndex));\n          final String t = sb.toString();\n          if (t.equals(goal))\n            return steps;\n          if (!seen.contains(t)) {\n            q.offer(t);\n            seen.add(t);\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}