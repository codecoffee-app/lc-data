{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "239",
            "title": "Sliding Window Maximum",
            "titleSlug": "sliding-window-maximum",
            "content": "<p>You are given an array of integers&nbsp;<code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p>\n\n<p>Return <em>the max sliding window</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,-1,-3,5,3,6,7], k = 3\n<strong>Output:</strong> [3,3,5,5,6,7]\n<strong>Explanation:</strong> \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       <strong>3</strong>\n 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>\n 1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>\n 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>\n 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>\n 1  3  -1  -3  5 [3  6  7]      <strong>7</strong>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 17529,
            "dislikes": 620,
            "similarQuestions": "[{\"title\": \"Minimum Window Substring\", \"titleSlug\": \"minimum-window-substring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Min Stack\", \"titleSlug\": \"min-stack\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Substring with At Most Two Distinct Characters\", \"titleSlug\": \"longest-substring-with-at-most-two-distinct-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Paint House II\", \"titleSlug\": \"paint-house-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Jump Game VI\", \"titleSlug\": \"jump-game-vi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Robots Within Budget\", \"titleSlug\": \"maximum-number-of-robots-within-budget\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Tastiness of Candy Basket\", \"titleSlug\": \"maximum-tastiness-of-candy-basket\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximal Score After Applying K Operations\", \"titleSlug\": \"maximal-score-after-applying-k-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Monotonic Queue",
                    "slug": "monotonic-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"947.4K\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 947374, \"totalSubmissionRaw\": 2035579, \"acRate\": \"46.5%\"}",
            "hints": [
                "How about using a data structure such as deque (double-ended queue)?",
                "The queue size need not be the same as the window\u2019s size.",
                "Remove redundant elements and the queue should store only elements that need to be considered."
            ],
            "rephrased": {
                "body": "Given an array of integers `nums`, a sliding window of size `k` moves from the beginning to the end of the array.  You can only see the `k` numbers within the window.  Each time the window shifts one position to the right. Return an array containing the maximum value within each sliding window.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-10^4 <= nums[i] <= 10^4",
                    "1 <= k <= nums.length"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,3,-1,-3,5,3,6,7], k = 3",
                        "output": "[3,3,5,5,6,7]",
                        "explanation": "The sliding window moves across the array. The maximum value for each window of size 3 is: [1, 3, -1] -> 3, [3, -1, -3] -> 3, [-1, -3, 5] -> 5, [-3, 5, 3] -> 5, [5, 3, 6] -> 6, [3, 6, 7] -> 7."
                    },
                    {
                        "input": "nums = [1], k = 1",
                        "output": "[1]",
                        "explanation": "The window size is 1, so the maximum element is simply the element in the array."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-window-substring",
                "title": "Minimum Window Substring",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "min-stack",
                "title": "Min Stack",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "longest-substring-with-at-most-two-distinct-characters",
                "title": "Longest Substring with At Most Two Distinct Characters",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "paint-house-ii",
                "title": "Paint House II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-vi",
                "title": "Jump Game VI",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-robots-within-budget",
                "title": "Maximum Number of Robots Within Budget",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-tastiness-of-candy-basket",
                "title": "Maximum Tastiness of Candy Basket",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximal-score-after-applying-k-operations",
                "title": "Maximal Score After Applying K Operations",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How about using a data structure such as deque (double-ended queue)?",
            "The queue size need not be the same as the window\u2019s size.",
            "Remove redundant elements and the queue should store only elements that need to be considered."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Monotonic Queue",
                "slug": "monotonic-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n    vector<int> ans;\n    deque<int> dq;  // max queue\n\n    for (int i = 0; i < nums.size(); ++i) {\n      while (!dq.empty() && dq.back() < nums[i])\n        dq.pop_back();\n      dq.push_back(nums[i]);\n      if (i >= k && nums[i - k] == dq.front())  // out of bound\n        dq.pop_front();\n      if (i >= k - 1)\n        ans.push_back(dq.front());\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] maxSlidingWindow(int[] nums, int k) {\n    int[] ans = new int[nums.length - k + 1];\n    Deque<Integer> dq = new ArrayDeque<>(); // max queue\n\n    for (int i = 0; i < nums.length; ++i) {\n      while (!dq.isEmpty() && dq.peekLast() < nums[i])\n        dq.pollLast();\n      dq.offerLast(nums[i]);\n      if (i >= k && nums[i - k] == dq.peekFirst()) // out of bound\n        dq.pollFirst();\n      if (i >= k - 1)\n        ans[i - k + 1] = dq.peekFirst();\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n    ans = []\n    dq = collections.deque()  # Max queue\n\n    for i, num in enumerate(nums):\n      while dq and dq[-1] < num:\n        dq.pop()\n      dq.append(num)\n      if i >= k and nums[i - k] == dq[0]:  # Out of bound\n        dq.popleft()\n      if i >= k - 1:\n        ans.append(dq[0])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}