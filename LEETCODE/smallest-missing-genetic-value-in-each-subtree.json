{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2003",
            "title": "Smallest Missing Genetic Value in Each Subtree",
            "titleSlug": "smallest-missing-genetic-value-in-each-subtree",
            "content": "<p>There is a <strong>family tree</strong> rooted at <code>0</code> consisting of <code>n</code> nodes numbered <code>0</code> to <code>n - 1</code>. You are given a <strong>0-indexed</strong> integer array <code>parents</code>, where <code>parents[i]</code> is the parent for node <code>i</code>. Since node <code>0</code> is the <strong>root</strong>, <code>parents[0] == -1</code>.</p>\n\n<p>There are <code>10<sup>5</sup></code> genetic values, each represented by an integer in the <strong>inclusive</strong> range <code>[1, 10<sup>5</sup>]</code>. You are given a <strong>0-indexed</strong> integer array <code>nums</code>, where <code>nums[i]</code> is a <strong>distinct </strong>genetic value for node <code>i</code>.</p>\n\n<p>Return <em>an array </em><code>ans</code><em> of length </em><code>n</code><em> where </em><code>ans[i]</code><em> is</em> <em>the <strong>smallest</strong> genetic value that is <strong>missing</strong> from the subtree rooted at node</em> <code>i</code>.</p>\n\n<p>The <strong>subtree</strong> rooted at a node <code>x</code> contains node <code>x</code> and all of its <strong>descendant</strong> nodes.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/23/case-1.png\" style=\"width: 204px; height: 167px;\" />\n<pre>\n<strong>Input:</strong> parents = [-1,0,0,2], nums = [1,2,3,4]\n<strong>Output:</strong> [5,1,1,1]\n<strong>Explanation:</strong> The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value.\n- 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.\n- 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value.\n- 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/23/case-2.png\" style=\"width: 247px; height: 168px;\" />\n<pre>\n<strong>Input:</strong> parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]\n<strong>Output:</strong> [7,1,1,4,2,1]\n<strong>Explanation:</strong> The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value.\n- 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value.\n- 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.\n- 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value.\n- 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.\n- 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]\n<strong>Output:</strong> [1,1,1,1,1,1,1]\n<strong>Explanation:</strong> The value 1 is missing from all the subtrees.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == parents.length == nums.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= parents[i] &lt;= n - 1</code> for <code>i != 0</code></li>\n\t<li><code>parents[0] == -1</code></li>\n\t<li><code>parents</code> represents a valid tree.</li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>Each <code>nums[i]</code> is distinct.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 431,
            "dislikes": 21,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.7K\", \"totalSubmission\": \"16.7K\", \"totalAcceptedRaw\": 7720, \"totalSubmissionRaw\": 16678, \"acRate\": \"46.3%\"}",
            "hints": [
                "If the subtree doesn't contain 1, then the missing value will always be 1.",
                "What data structure allows us to dynamically update the values that are currently not present?"
            ],
            "rephrased": {
                "body": "Given a family tree represented by an array `parents` where `parents[i]` is the parent of node `i` (0 is the root, so `parents[0] == -1`), and an array `nums` representing the distinct genetic value of each node, find the smallest missing genetic value in the subtree rooted at each node.  Return an array `ans` where `ans[i]` is the smallest missing genetic value in the subtree rooted at node `i`.",
                "constraints": [
                    "n == parents.length == nums.length",
                    "2 <= n <= 10^5",
                    "0 <= parents[i] <= n - 1 for i != 0",
                    "parents[0] == -1",
                    "parents represents a valid tree.",
                    "1 <= nums[i] <= 10^5",
                    "Each nums[i] is distinct."
                ],
                "testcases": [
                    {
                        "input": "parents = [-1,0,0,2], nums = [1,2,3,4]",
                        "output": "[5,1,1,1]",
                        "explanation": "For node 0, the subtree contains values [1,2,3,4], so the smallest missing value is 5. For node 1, the subtree contains only the value 2, so the smallest missing value is 1. For node 2, the subtree contains values [3,4], so the smallest missing value is 1. For node 3, the subtree contains only the value 4, so the smallest missing value is 1."
                    },
                    {
                        "input": "parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]",
                        "output": "[7,1,1,4,2,1]",
                        "explanation": "For node 0, the subtree contains values [5,4,6,2,1,3], so the smallest missing value is 7. For node 1, the subtree contains values [4,6], so the smallest missing value is 1. For node 2, the subtree contains only the value 6, so the smallest missing value is 1. For node 3, the subtree contains values [2,1,3], so the smallest missing value is 4. For node 4, the subtree contains only the value 1, so the smallest missing value is 2. For node 5, the subtree contains only the value 3, so the smallest missing value is 1."
                    },
                    {
                        "input": "parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]",
                        "output": "[1,1,1,1,1,1,1]",
                        "explanation": "The value 1 is missing from all the subtrees."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "If the subtree doesn't contain 1, then the missing value will always be 1.",
            "What data structure allows us to dynamically update the values that are currently not present?"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> smallestMissingValueSubtree(vector<int>& parents,\n                                          vector<int>& nums) {\n    const int n = parents.size();\n    vector<int> ans(n, 1);\n    vector<vector<int>> tree(n);\n    unordered_set<int> seen;\n    int minMiss = 1;\n\n    for (int i = 1; i < n; ++i)\n      tree[parents[i]].push_back(i);\n\n    int nodeThatsOne = getNode(nums);\n    if (nodeThatsOne == -1)\n      return ans;\n\n    int u = nodeThatsOne;\n    int prev = -1;  // The u that just handled\n\n    // Upward from nodeThatsOne to root u\n    while (u != -1) {\n      for (const int v : tree[u]) {\n        if (v == prev)\n          continue;\n        dfs(v, tree, seen, nums);\n      }\n      seen.insert(nums[u]);\n      while (seen.count(minMiss))\n        ++minMiss;\n      ans[u] = minMiss;\n      prev = u;\n      u = parents[u];\n    }\n\n    return ans;\n  }\n\n private:\n  int getNode(const vector<int>& nums) {\n    for (int i = 0; i < nums.size(); ++i)\n      if (nums[i] == 1)\n        return i;\n    return -1;\n  }\n\n  void dfs(int u, const vector<vector<int>>& tree, unordered_set<int>& seen,\n           const vector<int>& nums) {\n    seen.insert(nums[u]);\n    for (const int v : tree[u])\n      dfs(v, tree, seen, nums);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] smallestMissingValueSubtree(int[] parents, int[] nums) {\n    final int n = parents.length;\n    int[] ans = new int[n];\n    Arrays.fill(ans, 1);\n    List<Integer>[] tree = new List[n];\n    Set<Integer> seen = new HashSet<>();\n    int minMiss = 1;\n\n    for (int i = 0; i < n; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int i = 1; i < n; ++i)\n      tree[parents[i]].add(i);\n\n    final int nodeThatsOne = getNode(nums);\n    if (nodeThatsOne == -1)\n      return ans;\n\n    int u = nodeThatsOne;\n    int prev = -1; // The u that just handled\n\n    // Upward from nodeThatsOne to root u\n    while (u != -1) {\n      for (final int v : tree[u]) {\n        if (v == prev)\n          continue;\n        dfs(v, tree, seen, nums);\n      }\n      seen.add(nums[u]);\n      while (seen.contains(minMiss))\n        ++minMiss;\n      ans[u] = minMiss;\n      prev = u;\n      u = parents[u];\n    }\n\n    return ans;\n  }\n\n  private void dfs(int u, List<Integer>[] tree, Set<Integer> seen, int[] nums) {\n    seen.add(nums[u]);\n    for (final int v : tree[u])\n      dfs(v, tree, seen, nums);\n  }\n\n  private int getNode(int[] nums) {\n    for (int i = 0; i < nums.length; ++i)\n      if (nums[i] == 1)\n        return i;\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def smallestMissingValueSubtree(self, parents: List[int], nums: List[int]) -> List[int]:\n    n = len(parents)\n    ans = [1] * n\n    tree = [[] for _ in range(n)]\n    seen = set()\n    minMiss = 1\n\n    for i in range(1, n):\n      tree[parents[i]].append(i)\n\n    def getNode(nums: List[int]) -> int:\n      for i, num in enumerate(nums):\n        if num == 1:\n          return i\n      return -1\n\n    nodeThatsOne = getNode(nums)\n    if nodeThatsOne == -1:\n      return ans\n\n    u = nodeThatsOne\n    prev = -1  # The u that just handled\n\n    def dfs(u: int) -> None:\n      seen.add(nums[u])\n      for v in tree[u]:\n        dfs(v)\n\n    # Upward from nodeThatsOne to root u\n    while u != -1:\n      for v in tree[u]:\n        if v == prev:\n          continue\n        dfs(v)\n      seen.add(nums[u])\n      while minMiss in seen:\n        minMiss += 1\n      ans[u] = minMiss\n      prev = u\n      u = parents[u]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}