{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2336",
            "title": "Smallest Number in Infinite Set",
            "titleSlug": "smallest-number-in-infinite-set",
            "content": "<p>You have a set which contains all positive integers <code>[1, 2, 3, 4, 5, ...]</code>.</p>\n\n<p>Implement the <code>SmallestInfiniteSet</code> class:</p>\n\n<ul>\n\t<li><code>SmallestInfiniteSet()</code> Initializes the <strong>SmallestInfiniteSet</strong> object to contain <strong>all</strong> positive integers.</li>\n\t<li><code>int popSmallest()</code> <strong>Removes</strong> and returns the smallest integer contained in the infinite set.</li>\n\t<li><code>void addBack(int num)</code> <strong>Adds</strong> a positive integer <code>num</code> back into the infinite set, if it is <strong>not</strong> already in the infinite set.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;SmallestInfiniteSet&quot;, &quot;addBack&quot;, &quot;popSmallest&quot;, &quot;popSmallest&quot;, &quot;popSmallest&quot;, &quot;addBack&quot;, &quot;popSmallest&quot;, &quot;popSmallest&quot;, &quot;popSmallest&quot;]\n[[], [2], [], [], [], [1], [], [], []]\n<strong>Output</strong>\n[null, null, 1, 2, 3, null, 1, 4, 5]\n\n<strong>Explanation</strong>\nSmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();\nsmallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.\nsmallestInfiniteSet.addBack(1);    // 1 is added back to the set.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and\n                                   // is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 5, and remove it from the set.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 1000</code></li>\n\t<li>At most <code>1000</code> calls will be made <strong>in total</strong> to <code>popSmallest</code> and <code>addBack</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1541,
            "dislikes": 165,
            "similarQuestions": "[{\"title\": \"First Missing Positive\", \"titleSlug\": \"first-missing-positive\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"113.7K\", \"totalSubmission\": \"156.2K\", \"totalAcceptedRaw\": 113651, \"totalSubmissionRaw\": 156248, \"acRate\": \"72.7%\"}",
            "hints": [
                "Based on the constraints, what is the maximum element that can possibly be popped?",
                "Maintain whether elements are in or not in the set. How many elements do we consider?"
            ],
            "rephrased": {
                "body": "Implement a `SmallestInfiniteSet` class that manages a set containing all positive integers.  It should support the following operations:\n\n*   `SmallestInfiniteSet()`: Initializes the set to contain all positive integers.\n*   `int popSmallest()`: Removes and returns the smallest integer currently in the set.\n*   `void addBack(int num)`: Adds a positive integer `num` back into the set if it's not already present.",
                "constraints": [
                    "1 <= num <= 1000",
                    "At most 1000 calls will be made in total to `popSmallest` and `addBack`."
                ],
                "testcases": [
                    {
                        "input": "[\"SmallestInfiniteSet\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\"]\n[[], [2], [], [], [], [1], [], [], []]",
                        "output": "[null, null, 1, 2, 3, null, 1, 4, 5]",
                        "explanation": "1. `SmallestInfiniteSet()`: Initializes the set.\n2. `addBack(2)`: Adds 2 to the set (no change, as it's implicitly there).\n3. `popSmallest()`: Returns 1 and removes it.\n4. `popSmallest()`: Returns 2 and removes it.\n5. `popSmallest()`: Returns 3 and removes it.\n6. `addBack(1)`: Adds 1 back into the set.\n7. `popSmallest()`: Returns 1 and removes it.\n8. `popSmallest()`: Returns 4 and removes it.\n9. `popSmallest()`: Returns 5 and removes it."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "first-missing-positive",
                "title": "First Missing Positive",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Based on the constraints, what is the maximum element that can possibly be popped?",
            "Maintain whether elements are in or not in the set. How many elements do we consider?"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ]
    }
}