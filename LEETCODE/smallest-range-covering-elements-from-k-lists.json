{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "632",
            "title": "Smallest Range Covering Elements from K Lists",
            "titleSlug": "smallest-range-covering-elements-from-k-lists",
            "content": "<p>You have <code>k</code> lists of sorted integers in <strong>non-decreasing&nbsp;order</strong>. Find the <b>smallest</b> range that includes at least one number from each of the <code>k</code> lists.</p>\n\n<p>We define the range <code>[a, b]</code> is smaller than range <code>[c, d]</code> if <code>b - a &lt; d - c</code> <strong>or</strong> <code>a &lt; c</code> if <code>b - a == d - c</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\n<strong>Output:</strong> [20,24]\n<strong>Explanation: </strong>\nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[1,2,3],[1,2,3],[1,2,3]]\n<strong>Output:</strong> [1,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length == k</code></li>\n\t<li><code>1 &lt;= k &lt;= 3500</code></li>\n\t<li><code>1 &lt;= nums[i].length &lt;= 50</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i][j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code>&nbsp;is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3310,
            "dislikes": 61,
            "similarQuestions": "[{\"title\": \"Minimum Window Substring\", \"titleSlug\": \"minimum-window-substring\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"97.6K\", \"totalSubmission\": \"157.3K\", \"totalAcceptedRaw\": 97644, \"totalSubmissionRaw\": 157298, \"acRate\": \"62.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given `k` sorted lists of integers in non-decreasing order, find the smallest range that includes at least one number from each of the `k` lists.\n\nThe range `[a, b]` is considered smaller than range `[c, d]` if `b - a < d - c` or `a < c` if `b - a == d - c`.",
                "constraints": [
                    "nums.length == k",
                    "1 <= k <= 3500",
                    "1 <= nums[i].length <= 50",
                    "-10^5 <= nums[i][j] <= 10^5",
                    "nums[i] is sorted in non-decreasing order."
                ],
                "testcases": [
                    {
                        "input": "[[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]",
                        "output": "[20,24]",
                        "explanation": "The range [20, 24] includes 24 from the first list, 20 from the second list, and 22 from the third list.  No smaller range exists that satisfies the condition."
                    },
                    {
                        "input": "[[1,2,3],[1,2,3],[1,2,3]]",
                        "output": "[1,1]",
                        "explanation": "The range [1, 1] includes 1 from each of the lists.  Any range smaller than this is not possible as 1 is the smallest number present in all lists."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-window-substring",
                "title": "Minimum Window Substring",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  int i;\n  int j;\n  int num;  // nums[i][j]\n  T(int i, int j, int num) : i(i), j(j), num(num) {}\n};\n\nclass Solution {\n public:\n  vector<int> smallestRange(vector<vector<int>>& nums) {\n    auto compare = [&](const T& a, const T& b) { return a.num > b.num; };\n    priority_queue<T, vector<T>, decltype(compare)> minHeap(compare);\n    int mini = INT_MAX;\n    int maxi = INT_MIN;\n\n    for (int i = 0; i < nums.size(); ++i) {\n      const int num = nums[i][0];\n      minHeap.emplace(i, 0, num);\n      mini = min(mini, num);\n      maxi = max(maxi, num);\n    }\n\n    int minRange = mini;\n    int maxRange = maxi;\n\n    while (minHeap.size() == nums.size()) {\n      const auto [i, j, _] = minHeap.top();\n      minHeap.pop();\n      if (j + 1 < nums[i].size()) {\n        minHeap.emplace(i, j + 1, nums[i][j + 1]);\n        maxi = max(maxi, nums[i][j + 1]);\n        mini = minHeap.top().num;\n        if (maxi - mini < maxRange - minRange) {\n          minRange = mini;\n          maxRange = maxi;\n        }\n      }\n    }\n\n    return {minRange, maxRange};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int i;\n  public int j;\n  public int num; // nums[i][j]\n  public T(int i, int j, int num) {\n    this.i = i;\n    this.j = j;\n    this.num = num;\n  }\n}\n\nclass Solution {\n  public int[] smallestRange(List<List<Integer>> nums) {\n    Queue<T> minHeap = new PriorityQueue<>((a, b) -> a.num - b.num);\n    int min = Integer.MAX_VALUE;\n    int max = Integer.MIN_VALUE;\n\n    for (int i = 0; i < nums.size(); ++i) {\n      final int num = nums.get(i).get(0);\n      minHeap.offer(new T(i, 0, num));\n      min = Math.min(min, num);\n      max = Math.max(max, num);\n    }\n\n    int minRange = min;\n    int maxRange = max;\n\n    while (minHeap.size() == nums.size()) {\n      final int i = minHeap.peek().i;\n      final int j = minHeap.poll().j;\n      if (j + 1 < nums.get(i).size()) {\n        minHeap.offer(new T(i, j + 1, nums.get(i).get(j + 1)));\n        max = Math.max(max, nums.get(i).get(j + 1));\n        min = minHeap.peek().num;\n      }\n      if (max - min < maxRange - minRange) {\n        minRange = min;\n        maxRange = max;\n      }\n    }\n\n    return new int[] {minRange, maxRange};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def smallestRange(self, nums: List[List[int]]) -> List[int]:\n    minHeap = [(row[0], i, 0) for i, row in enumerate(nums)]\n    heapq.heapify(minHeap)\n\n    maxRange = max(row[0] for row in nums)\n    minRange = heapq.nsmallest(1, minHeap)[0][0]\n    ans = [minRange, maxRange]\n\n    while len(minHeap) == len(nums):\n      num, r, c = heapq.heappop(minHeap)\n      if c + 1 < len(nums[r]):\n        heapq.heappush(minHeap, (nums[r][c + 1], r, c + 1))\n        maxRange = max(maxRange, nums[r][c + 1])\n        minRange = heapq.nsmallest(1, minHeap)[0][0]\n        if maxRange - minRange < ans[1] - ans[0]:\n          ans[0], ans[1] = minRange, maxRange\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}