{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1663",
            "title": "Smallest String With A Given Numeric Value",
            "titleSlug": "smallest-string-with-a-given-numeric-value",
            "content": "<p>The <strong>numeric value</strong> of a <strong>lowercase character</strong> is defined as its position <code>(1-indexed)</code> in the alphabet, so the numeric value of <code>a</code> is <code>1</code>, the numeric value of <code>b</code> is <code>2</code>, the numeric value of <code>c</code> is <code>3</code>, and so on.</p>\n\n<p>The <strong>numeric value</strong> of a <strong>string</strong> consisting of lowercase characters is defined as the sum of its characters&#39; numeric values. For example, the numeric value of the string <code>&quot;abe&quot;</code> is equal to <code>1 + 2 + 5 = 8</code>.</p>\n\n<p>You are given two integers <code>n</code> and <code>k</code>. Return <em>the <strong>lexicographically smallest string</strong> with <strong>length</strong> equal to <code>n</code> and <strong>numeric value</strong> equal to <code>k</code>.</em></p>\n\n<p>Note that a string <code>x</code> is lexicographically smaller than string <code>y</code> if <code>x</code> comes before <code>y</code> in dictionary order, that is, either <code>x</code> is a prefix of <code>y</code>, or if <code>i</code> is the first position such that <code>x[i] != y[i]</code>, then <code>x[i]</code> comes before <code>y[i]</code> in alphabetic order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 27\n<strong>Output:</strong> &quot;aay&quot;\n<strong>Explanation:</strong> The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, k = 73\n<strong>Output:</strong> &quot;aaszz&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>n &lt;= k &lt;= 26 * n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1842,
            "dislikes": 59,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"91.9K\", \"totalSubmission\": \"137.6K\", \"totalAcceptedRaw\": 91876, \"totalSubmissionRaw\": 137586, \"acRate\": \"66.8%\"}",
            "hints": [
                "Think greedily.",
                "If you build the string from the end to the beginning, it will always be optimal to put the highest possible character at the current index."
            ],
            "rephrased": {
                "body": "Given two integers `n` and `k`, construct the lexicographically smallest string of length `n` such that the sum of the numeric values of its characters equals `k`. The numeric value of a lowercase character is its 1-indexed position in the alphabet (e.g., 'a' = 1, 'b' = 2, 'c' = 3). The numeric value of a string is the sum of its characters' numeric values.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "n <= k <= 26 * n"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 27",
                        "output": "\"aay\"",
                        "explanation": "The numeric value of the string \"aay\" is 1 + 1 + 25 = 27, and it's the lexicographically smallest string with length 3 that satisfies this condition."
                    },
                    {
                        "input": "n = 5, k = 73",
                        "output": "\"aaszz\"",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Think greedily.",
            "If you build the string from the end to the beginning, it will always be optimal to put the highest possible character at the current index."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string getSmallestString(int n, int k) {\n    string ans;\n\n    for (int i = 0; i < n; ++i) {\n      const int remainingLetters = n - i - 1;\n      const int rank = max(1, k - remainingLetters * 26);\n      ans += 'a' + rank - 1;\n      k -= rank;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String getSmallestString(int n, int k) {\n    StringBuilder sb = new StringBuilder();\n\n    for (int i = 0; i < n; ++i) {\n      final int remainingLetters = n - i - 1;\n      final int rank = Math.max(1, k - remainingLetters * 26);\n      sb.append((char) ('a' + rank - 1));\n      k -= rank;\n    }\n\n    return sb.toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getSmallestString(self, n: int, k: int) -> str:\n    ans = []\n\n    for i in range(n):\n      remainingLetters = n - i - 1\n      rank = max(1, k - remainingLetters * 26)\n      ans.append(chr(ord('a') + rank - 1))\n      k -= rank\n\n    return ''.join(ans)\n",
                "lang_text": "py"
            }
        }
    }
}