{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1202",
            "title": "Smallest String With Swaps",
            "titleSlug": "smallest-string-with-swaps",
            "content": "<p>You are given a string <code>s</code>, and an array of pairs of indices in the string&nbsp;<code>pairs</code>&nbsp;where&nbsp;<code>pairs[i] =&nbsp;[a, b]</code>&nbsp;indicates 2 indices(0-indexed) of the string.</p>\n\n<p>You can&nbsp;swap the characters at any pair of indices in the given&nbsp;<code>pairs</code>&nbsp;<strong>any number of times</strong>.</p>\n\n<p>Return the&nbsp;lexicographically smallest string that <code>s</code>&nbsp;can be changed to after using the swaps.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;dcab&quot;, pairs = [[0,3],[1,2]]\n<strong>Output:</strong> &quot;bacd&quot;\n<strong>Explaination:</strong> \nSwap s[0] and s[3], s = &quot;bcad&quot;\nSwap s[1] and s[2], s = &quot;bacd&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;dcab&quot;, pairs = [[0,3],[1,2],[0,2]]\n<strong>Output:</strong> &quot;abcd&quot;\n<strong>Explaination: </strong>\nSwap s[0] and s[3], s = &quot;bcad&quot;\nSwap s[0] and s[2], s = &quot;acbd&quot;\nSwap s[1] and s[2], s = &quot;abcd&quot;</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cba&quot;, pairs = [[0,1],[1,2]]\n<strong>Output:</strong> &quot;abc&quot;\n<strong>Explaination: </strong>\nSwap s[0] and s[1], s = &quot;bca&quot;\nSwap s[1] and s[2], s = &quot;bac&quot;\nSwap s[0] and s[1], s = &quot;abc&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10^5</code></li>\n\t<li><code>0 &lt;= pairs.length &lt;= 10^5</code></li>\n\t<li><code>0 &lt;= pairs[i][0], pairs[i][1] &lt;&nbsp;s.length</code></li>\n\t<li><code>s</code>&nbsp;only contains lower case English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3595,
            "dislikes": 134,
            "similarQuestions": "[{\"title\": \"Minimize Hamming Distance After Swap Operations\", \"titleSlug\": \"minimize-hamming-distance-after-swap-operations\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Process Restricted Friend Requests\", \"titleSlug\": \"process-restricted-friend-requests\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Largest Number After Digit Swaps by Parity\", \"titleSlug\": \"largest-number-after-digit-swaps-by-parity\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Lexicographically Smallest Beautiful String\", \"titleSlug\": \"lexicographically-smallest-beautiful-string\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Make Lexicographically Smallest Array by Swapping Elements\", \"titleSlug\": \"make-lexicographically-smallest-array-by-swapping-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"109.3K\", \"totalSubmission\": \"188.1K\", \"totalAcceptedRaw\": 109260, \"totalSubmissionRaw\": 188111, \"acRate\": \"58.1%\"}",
            "hints": [
                "Think of it as a graph problem.",
                "Consider the pairs as connected nodes in the graph, what can you do with a connected component of indices ?",
                "We can sort each connected component alone to get the lexicographically minimum string."
            ],
            "rephrased": {
                "body": "Given a string `s` and a list of index pairs `pairs`, where `pairs[i] = [a, b]` indicates that characters at indices `a` and `b` (0-indexed) can be swapped.  You can swap the characters at any pair of indices in the given `pairs` any number of times.\n\nReturn the lexicographically smallest string that `s` can be transformed into by performing these swaps.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "0 <= pairs.length <= 10^5",
                    "0 <= pairs[i][0], pairs[i][1] < s.length",
                    "`s` only contains lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": {
                            "s": "dcab",
                            "pairs": [
                                [
                                    0,
                                    3
                                ],
                                [
                                    1,
                                    2
                                ]
                            ]
                        },
                        "output": "bacd",
                        "explanation": "1. Swap s[0] and s[3]: s becomes \"bcad\".\n2. Swap s[1] and s[2]: s becomes \"bacd\"."
                    },
                    {
                        "input": {
                            "s": "dcab",
                            "pairs": [
                                [
                                    0,
                                    3
                                ],
                                [
                                    1,
                                    2
                                ],
                                [
                                    0,
                                    2
                                ]
                            ]
                        },
                        "output": "abcd",
                        "explanation": "1. Swap s[0] and s[3]: s becomes \"bcad\".\n2. Swap s[0] and s[2]: s becomes \"acbd\".\n3. Swap s[1] and s[2]: s becomes \"abcd\"."
                    },
                    {
                        "input": {
                            "s": "cba",
                            "pairs": [
                                [
                                    0,
                                    1
                                ],
                                [
                                    1,
                                    2
                                ]
                            ]
                        },
                        "output": "abc",
                        "explanation": "1. Swap s[0] and s[1]: s becomes \"bca\".\n2. Swap s[1] and s[2]: s becomes \"bac\".\n3. Swap s[0] and s[1]: s becomes \"abc\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "minimize-hamming-distance-after-swap-operations",
                "title": "Minimize Hamming Distance After Swap Operations",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "process-restricted-friend-requests",
                "title": "Process Restricted Friend Requests",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "largest-number-after-digit-swaps-by-parity",
                "title": "Largest Number After Digit Swaps by Parity",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "lexicographically-smallest-beautiful-string",
                "title": "Lexicographically Smallest Beautiful String",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "make-lexicographically-smallest-array-by-swapping-elements",
                "title": "Make Lexicographically Smallest Array by Swapping Elements",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think of it as a graph problem.",
            "Consider the pairs as connected nodes in the graph, what can you do with a connected component of indices ?",
            "We can sort each connected component alone to get the lexicographically minimum string."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class UnionFind {\n public:\n  UnionFind(int n) : id(n), rank(n) {\n    iota(id.begin(), id.end(), 0);\n  }\n\n  void unionByRank(int u, int v) {\n    const int i = find(u);\n    const int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  int find(int u) {\n    return id[u] == u ? u : id[u] = find(id[u]);\n  }\n\n private:\n  vector<int> id;\n  vector<int> rank;\n};\n\nclass Solution {\n public:\n  string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {\n    string ans;\n    UnionFind uf(s.length());\n    unordered_map<int, priority_queue<char, vector<char>, greater<>>> map;\n\n    for (const vector<int>& pair : pairs)\n      uf.unionByRank(pair[0], pair[1]);\n\n    for (int i = 0; i < s.length(); ++i)\n      map[uf.find(i)].push(s[i]);\n\n    for (int i = 0; i < s.length(); ++i)\n      ans += map[uf.find(i)].top(), map[uf.find(i)].pop();\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class UnionFind {\n  public UnionFind(int n) {\n    id = new int[n];\n    rank = new int[n];\n    for (int i = 0; i < n; ++i)\n      id[i] = i;\n  }\n\n  public void unionByRank(int u, int v) {\n    final int i = find(u);\n    final int j = find(v);\n    if (i == j)\n      return;\n    if (rank[i] < rank[j]) {\n      id[i] = j;\n    } else if (rank[i] > rank[j]) {\n      id[j] = i;\n    } else {\n      id[i] = j;\n      ++rank[j];\n    }\n  }\n\n  public int find(int u) {\n    return id[u] == u ? u : (id[u] = find(id[u]));\n  }\n\n  private int[] id;\n  private int[] rank;\n}\n\nclass Solution {\n  public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {\n    StringBuilder ans = new StringBuilder();\n    UnionFind uf = new UnionFind(s.length());\n    Map<Integer, Queue<Character>> map = new HashMap<>();\n\n    for (List<Integer> pair : pairs)\n      uf.unionByRank(pair.get(0), pair.get(1));\n\n    for (int i = 0; i < s.length(); ++i)\n      map.computeIfAbsent(uf.find(i), k -> new PriorityQueue<>()).offer(s.charAt(i));\n\n    for (int i = 0; i < s.length(); ++i)\n      ans.append(map.get(uf.find(i)).poll());\n\n    return ans.toString();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:\n    ans = ''\n    uf = UnionFind(len(s))\n    map = collections.defaultdict(list)\n\n    for a, b in pairs:\n      uf.unionByRank(a, b)\n\n    for i, c in enumerate(s):\n      map[uf.find(i)].append(c)\n\n    for key in map.keys():\n      map[key].sort(reverse=True)\n\n    for i in range(len(s)):\n      ans += map[uf.find(i)].pop()\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}