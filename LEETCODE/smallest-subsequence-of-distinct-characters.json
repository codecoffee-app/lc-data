{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1081",
            "title": "Smallest Subsequence of Distinct Characters",
            "titleSlug": "smallest-subsequence-of-distinct-characters",
            "content": "<p>Given a string <code>s</code>, return <em>the </em><span data-keyword=\"lexicographically-smaller-string\"><em>lexicographically smallest</em></span> <span data-keyword=\"subsequence-string\"><em>subsequence</em></span><em> of</em> <code>s</code> <em>that contains all the distinct characters of</em> <code>s</code> <em>exactly once</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bcabc&quot;\n<strong>Output:</strong> &quot;abc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbacdcbc&quot;\n<strong>Output:</strong> &quot;acdb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Note:</strong> This question is the same as 316: <a href=\"https://leetcode.com/problems/remove-duplicate-letters/\" target=\"_blank\">https://leetcode.com/problems/remove-duplicate-letters/</a>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2541,
            "dislikes": 182,
            "similarQuestions": "[{\"title\": \"Find the Most Competitive Subsequence\", \"titleSlug\": \"find-the-most-competitive-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"64K\", \"totalSubmission\": \"105.8K\", \"totalAcceptedRaw\": 64020, \"totalSubmissionRaw\": 105788, \"acRate\": \"60.5%\"}",
            "hints": [
                "Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i."
            ],
            "rephrased": {
                "body": "Given a string `s`, find the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once.",
                "constraints": [
                    "1 <= s.length <= 1000",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "bcabc",
                        "output": "abc",
                        "explanation": null
                    },
                    {
                        "input": "cbacdcbc",
                        "output": "acdb",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-the-most-competitive-subsequence",
                "title": "Find the Most Competitive Subsequence",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string smallestSubsequence(string text) {\n    string ans;\n    vector<int> count(128);\n    vector<bool> used(128);\n\n    for (const char c : text)\n      ++count[c];\n\n    for (const char c : text) {\n      --count[c];\n      if (used[c])\n        continue;\n      while (!ans.empty() && ans.back() > c && count[ans.back()] > 0) {\n        used[ans.back()] = false;\n        ans.pop_back();\n      }\n      used[c] = true;\n      ans.push_back(c);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String smallestSubsequence(String text) {\n    StringBuilder sb = new StringBuilder();\n    int[] count = new int[128];\n    boolean[] used = new boolean[128];\n\n    for (final char c : text.toCharArray())\n      ++count[c];\n\n    for (final char c : text.toCharArray()) {\n      --count[c];\n      if (used[c])\n        continue;\n      while (sb.length() > 0 && last(sb) > c && count[last(sb)] > 0) {\n        used[last(sb)] = false;\n        sb.setLength(sb.length() - 1);\n      }\n      used[c] = true;\n      sb.append(c);\n    }\n\n    return sb.toString();\n  }\n\n  private char last(StringBuilder sb) {\n    return sb.charAt(sb.length() - 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def smallestSubsequence(self, text: str) -> str:\n    ans = []\n    count = collections.Counter(text)\n    used = [False] * 26\n\n    for c in text:\n      count[c] -= 1\n      if used[ord(c) - ord('a')]:\n        continue\n      while ans and ans[-1] > c and count[ans[-1]] > 0:\n        used[ord(ans[-1]) - ord('a')] = False\n        ans.pop()\n      ans.append(c)\n      used[ord(ans[-1]) - ord('a')] = True\n\n    return ''.join(ans)\n",
                "lang_text": "py"
            }
        }
    }
}