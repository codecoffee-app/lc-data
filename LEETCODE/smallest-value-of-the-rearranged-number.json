{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2165",
            "title": "Smallest Value of the Rearranged Number",
            "titleSlug": "smallest-value-of-the-rearranged-number",
            "content": "<p>You are given an integer <code>num.</code> <strong>Rearrange</strong> the digits of <code>num</code> such that its value is <strong>minimized</strong> and it does not contain <strong>any</strong> leading zeros.</p>\n\n<p>Return <em>the rearranged number with minimal value</em>.</p>\n\n<p>Note that the sign of the number does not change after rearranging the digits.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 310\n<strong>Output:</strong> 103\n<strong>Explanation:</strong> The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = -7605\n<strong>Output:</strong> -7650\n<strong>Explanation:</strong> Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>15</sup> &lt;= num &lt;= 10<sup>15</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 605,
            "dislikes": 21,
            "similarQuestions": "[{\"title\": \"Largest Number\", \"titleSlug\": \"largest-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"32.4K\", \"totalSubmission\": \"62.7K\", \"totalAcceptedRaw\": 32397, \"totalSubmissionRaw\": 62686, \"acRate\": \"51.7%\"}",
            "hints": [
                "For positive numbers, the leading digit should be the smallest nonzero digit. Then the remaining digits follow in ascending order.",
                "For negative numbers, the digits should be arranged in descending order."
            ],
            "rephrased": {
                "body": "Given an integer `num`, rearrange its digits to minimize its value, ensuring the rearranged number does not have any leading zeros. Return the rearranged number with the minimal possible value while preserving the original sign.",
                "constraints": [
                    "-10<sup>15</sup> <= num <= 10<sup>15</sup>"
                ],
                "testcases": [
                    {
                        "input": "310",
                        "output": "103",
                        "explanation": "The digits of 310 can be rearranged in several ways (e.g., 013, 031, 103). The smallest valid number, without leading zeros, is 103."
                    },
                    {
                        "input": "-7605",
                        "output": "-7650",
                        "explanation": "Rearranging the digits of -7605 yields possibilities like -7650, -6705.  The smallest number among the valid rearrangements is -7650."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "largest-number",
                "title": "Largest Number",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For positive numbers, the leading digit should be the smallest nonzero digit. Then the remaining digits follow in ascending order.",
            "For negative numbers, the digits should be arranged in descending order."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long smallestNumber(long long num) {\n    string s = to_string(abs(num));\n    sort(s.begin(), s.end(),\n         [&](int a, int b) { return num < 0 ? a > b : a < b; });\n    if (num > 0)\n      swap(s[0], s[s.find_first_not_of('0')]);\n    return stoll(s) * (num < 0 ? -1 : 1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long smallestNumber(long num) {\n    String[] digits = String.valueOf(Math.abs(num)).split(\"\");\n    String s = Stream.of(digits).sorted().collect(Collectors.joining());\n    StringBuilder sb = new StringBuilder(s);\n    if (num <= 0)\n      return -1 * Long.parseLong(sb.reverse().toString());\n    if (sb.charAt(0) == '0') {\n      final int firstNonZeroIndex = sb.lastIndexOf(\"0\") + 1;\n      sb.setCharAt(0, sb.charAt(firstNonZeroIndex));\n      sb.setCharAt(firstNonZeroIndex, '0');\n    }\n    return Long.parseLong(sb.toString());\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def smallestNumber(self, num: int) -> int:\n    s = sorted(str(abs(num)), reverse=num < 0)\n    firstNonZeroIndex = next((i for i, c in enumerate(s) if c != '0'), 0)\n    s[0], s[firstNonZeroIndex] = s[firstNonZeroIndex], s[0]\n    return int(''.join(s)) * (-1 if num < 0 else 1)\n",
                "lang_text": "py"
            }
        }
    }
}