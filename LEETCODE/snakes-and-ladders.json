{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "909",
            "title": "Snakes and Ladders",
            "titleSlug": "snakes-and-ladders",
            "content": "<p>You are given an <code>n x n</code> integer matrix <code>board</code> where the cells are labeled from <code>1</code> to <code>n<sup>2</sup></code> in a <a href=\"https://en.wikipedia.org/wiki/Boustrophedon\" target=\"_blank\"><strong>Boustrophedon style</strong></a> starting from the bottom left of the board (i.e. <code>board[n - 1][0]</code>) and alternating direction each row.</p>\n\n<p>You start on square <code>1</code> of the board. In each move, starting from square <code>curr</code>, do the following:</p>\n\n<ul>\n\t<li>Choose a destination square <code>next</code> with a label in the range <code>[curr + 1, min(curr + 6, n<sup>2</sup>)]</code>.\n\n\t<ul>\n\t\t<li>This choice simulates the result of a standard <strong>6-sided die roll</strong>: i.e., there are always at most 6 destinations, regardless of the size of the board.</li>\n\t</ul>\n\t</li>\n\t<li>If <code>next</code> has a snake or ladder, you <strong>must</strong> move to the destination of that snake or ladder. Otherwise, you move to <code>next</code>.</li>\n\t<li>The game ends when you reach the square <code>n<sup>2</sup></code>.</li>\n</ul>\n\n<p>A board square on row <code>r</code> and column <code>c</code> has a snake or ladder if <code>board[r][c] != -1</code>. The destination of that snake or ladder is <code>board[r][c]</code>. Squares <code>1</code> and <code>n<sup>2</sup></code> do not have a snake or ladder.</p>\n\n<p>Note that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do <strong>not</strong> follow the subsequent&nbsp;snake or ladder.</p>\n\n<ul>\n\t<li>For example, suppose the board is <code>[[-1,4],[-1,3]]</code>, and on the first move, your destination square is <code>2</code>. You follow the ladder to square <code>3</code>, but do <strong>not</strong> follow the subsequent ladder to <code>4</code>.</li>\n</ul>\n\n<p>Return <em>the least number of moves required to reach the square </em><code>n<sup>2</sup></code><em>. If it is not possible to reach the square, return </em><code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/09/23/snakes.png\" style=\"width: 500px; height: 394px;\" />\n<pre>\n<strong>Input:</strong> board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nIn the beginning, you start at square 1 (at row 5, column 0).\nYou decide to move to square 2 and must take the ladder to square 15.\nYou then decide to move to square 17 and must take the snake to square 13.\nYou then decide to move to square 14 and must take the ladder to square 35.\nYou then decide to move to square 36, ending the game.\nThis is the lowest possible number of moves to reach the last square, so return 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = [[-1,-1],[-1,3]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == board.length == board[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 20</code></li>\n\t<li><code>board[i][j]</code> is either <code>-1</code> or in the range <code>[1, n<sup>2</sup>]</code>.</li>\n\t<li>The squares labeled <code>1</code> and <code>n<sup>2</sup></code> do not have any ladders or snakes.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2712,
            "dislikes": 880,
            "similarQuestions": "[{\"title\": \"Most Profitable Path in a Tree\", \"titleSlug\": \"most-profitable-path-in-a-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"164.6K\", \"totalSubmission\": \"373.7K\", \"totalAcceptedRaw\": 164557, \"totalSubmissionRaw\": 373683, \"acRate\": \"44.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given an n x n integer matrix `board` representing a Snakes and Ladders board. The board is labeled in a Boustrophedon style, starting from the bottom left (board[n-1][0]) and alternating directions each row. Your goal is to find the minimum number of moves to reach the square n^2, starting from square 1.  In each move, you can move to a square between `curr + 1` and `min(curr + 6, n^2)`. If the destination square has a snake or ladder, you must move to the destination of the snake or ladder. You can only take a snake or ladder at most once per move. Return the minimum number of moves required to reach the square n^2. If it's impossible to reach the square, return -1.",
                "constraints": [
                    "n == board.length == board[i].length",
                    "2 <= n <= 20",
                    "board[i][j] is either -1 or in the range [1, n^2]",
                    "The squares labeled 1 and n^2 do not have any ladders or snakes."
                ],
                "testcases": [
                    {
                        "input": "[[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]",
                        "output": "4",
                        "explanation": "Starting at square 1, you move to square 2, which takes you to square 15 via a ladder. Then, you move to square 17, which takes you to square 13 via a snake. Next, you move to square 14, which takes you to square 35 via a ladder. Finally, you move to square 36, reaching the end. This requires 4 moves."
                    },
                    {
                        "input": "[[-1,-1],[-1,3]]",
                        "output": "1",
                        "explanation": "Starting at square 1, you move to square 2, which takes you to square 3 via a ladder. This requires 1 move."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "most-profitable-path-in-a-tree",
                "title": "Most Profitable Path in a Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int snakesAndLadders(vector<vector<int>>& board) {\n    const int n = board.size();\n    int ans = 0;\n    queue<int> q{{1}};\n    vector<bool> seen(1 + n * n);\n    vector<int> A(1 + n * n);  // 2D -> 1D\n\n    for (int i = 0; i < n; ++i)\n      for (int j = 0; j < n; ++j)\n        A[(n - 1 - i) * n + (n - i & 1 ? j + 1 : n - j)] = board[i][j];\n\n    while (!q.empty()) {\n      ++ans;\n      for (int sz = q.size(); sz > 0; --sz) {\n        const int curr = q.front();\n        q.pop();\n        for (int next = curr + 1; next <= min(curr + 6, n * n); ++next) {\n          const int dest = A[next] > 0 ? A[next] : next;\n          if (dest == n * n)\n            return ans;\n          if (seen[dest])\n            continue;\n          q.push(dest);\n          seen[dest] = true;\n        }\n      }\n    }\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int snakesAndLadders(int[][] board) {\n    final int n = board.length;\n    int ans = 0;\n    Queue<Integer> q = new ArrayDeque<>(Arrays.asList(1));\n    boolean[] seen = new boolean[1 + n * n];\n    int[] A = new int[1 + n * n]; // 2D -> 1D\n\n    for (int i = 0; i < n; ++i)\n      for (int j = 0; j < n; ++j)\n        A[(n - 1 - i) * n + ((n - i & 1) == 1 ? j + 1 : n - j)] = board[i][j];\n\n    while (!q.isEmpty()) {\n      ++ans;\n      for (int sz = q.size(); sz > 0; --sz) {\n        final int curr = q.poll();\n        for (int next = curr + 1; next <= Math.min(curr + 6, n * n); ++next) {\n          final int dest = A[next] > 0 ? A[next] : next;\n          if (dest == n * n)\n            return ans;\n          if (seen[dest])\n            continue;\n          q.offer(dest);\n          seen[dest] = true;\n        }\n      }\n    }\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def snakesAndLadders(self, board: List[List[int]]) -> int:\n    n = len(board)\n    ans = 0\n    q = collections.deque([1])\n    seen = set()\n    A = [0] * (1 + n * n)  # 2D -> 1D\n\n    for i in range(n):\n      for j in range(n):\n        A[(n - 1 - i) * n + (j + 1 if n - i & 1 else n - j)] = board[i][j]\n\n    while q:\n      ans += 1\n      for _ in range(len(q)):\n        curr = q.popleft()\n        for next in range(curr + 1, min(curr + 6, n * n) + 1):\n          dest = A[next] if A[next] > 0 else next\n          if dest == n * n:\n            return ans\n          if dest in seen:\n            continue\n          q.append(dest)\n          seen.add(dest)\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}