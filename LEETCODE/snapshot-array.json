{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1146",
            "title": "Snapshot Array",
            "titleSlug": "snapshot-array",
            "content": "<p>Implement a SnapshotArray that supports the following interface:</p>\n\n<ul>\n\t<li><code>SnapshotArray(int length)</code> initializes an array-like data structure with the given length. <strong>Initially, each element equals 0</strong>.</li>\n\t<li><code>void set(index, val)</code> sets the element at the given <code>index</code> to be equal to <code>val</code>.</li>\n\t<li><code>int snap()</code> takes a snapshot of the array and returns the <code>snap_id</code>: the total number of times we called <code>snap()</code> minus <code>1</code>.</li>\n\t<li><code>int get(index, snap_id)</code> returns the value at the given <code>index</code>, at the time we took the snapshot with the given <code>snap_id</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> [&quot;SnapshotArray&quot;,&quot;set&quot;,&quot;snap&quot;,&quot;set&quot;,&quot;get&quot;]\n[[3],[0,5],[],[0,6],[0,0]]\n<strong>Output:</strong> [null,null,0,null,5]\n<strong>Explanation: </strong>\nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5);  // Set array[0] = 5\nsnapshotArr.snap();  // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= index &lt; length</code></li>\n\t<li><code>0 &lt;= val &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= snap_id &lt; </code>(the total number of times we call <code>snap()</code>)</li>\n\t<li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>set</code>, <code>snap</code>, and <code>get</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3612,
            "dislikes": 480,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                }
            ],
            "stats": "{\"totalAccepted\": \"206.7K\", \"totalSubmission\": \"556.1K\", \"totalAcceptedRaw\": 206656, \"totalSubmissionRaw\": 556083, \"acRate\": \"37.2%\"}",
            "hints": [
                "Use a list of lists, adding both the element and the snap_id to each index."
            ],
            "rephrased": {
                "body": "Implement a `SnapshotArray` that allows you to manage an array and take snapshots of its state. The array is initialized with a given length, and all elements are initially 0.  You can set values at specific indices, take snapshots of the array (which are assigned a unique ID), and retrieve the value at a given index for a specific snapshot.",
                "constraints": [
                    "1 <= length <= 5 * 10^4",
                    "0 <= index < length",
                    "0 <= val <= 10^9",
                    "0 <= snap_id < (the total number of times we call snap())",
                    "At most 5 * 10^4 calls will be made to set, snap, and get."
                ],
                "testcases": [
                    {
                        "input": "[\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\n[[3],[0,5],[],[0,6],[0,0]]",
                        "output": "[null,null,0,null,5]",
                        "explanation": "SnapshotArray is initialized with length 3.  array[0] is set to 5. A snapshot is taken (snap_id = 0). array[0] is updated to 6.  The value of array[0] at snap_id 0 is retrieved, which was 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use a list of lists, adding both the element and the snap_id to each index."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Design",
                "slug": "design"
            }
        ]
    }
}