{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "912",
            "title": "Sort an Array",
            "titleSlug": "sort-an-array",
            "content": "<p>Given an array of integers <code>nums</code>, sort the array in ascending order and return it.</p>\n\n<p>You must solve the problem <strong>without using any built-in</strong> functions in <code>O(nlog(n))</code> time complexity and with the smallest space complexity possible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,3,1]\n<strong>Output:</strong> [1,2,3,5]\n<strong>Explanation:</strong> After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,1,1,2,0,0]\n<strong>Output:</strong> [0,0,1,1,2,5]\n<strong>Explanation:</strong> Note that the values of nums are not necessairly unique.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-5 * 10<sup>4</sup> &lt;= nums[i] &lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5748,
            "dislikes": 726,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Merge Sort",
                    "slug": "merge-sort"
                },
                {
                    "name": "Bucket Sort",
                    "slug": "bucket-sort"
                },
                {
                    "name": "Radix Sort",
                    "slug": "radix-sort"
                },
                {
                    "name": "Counting Sort",
                    "slug": "counting-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"543.7K\", \"totalSubmission\": \"948.5K\", \"totalAcceptedRaw\": 543693, \"totalSubmissionRaw\": 948529, \"acRate\": \"57.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Sort the given array of integers `nums` in ascending order. You must achieve a time complexity of O(nlog(n)) without using any built-in sorting functions, while minimizing space complexity.",
                "constraints": [
                    "1 <= nums.length <= 5 * 10^4",
                    "-5 * 10^4 <= nums[i] <= 5 * 10^4"
                ],
                "testcases": [
                    {
                        "input": "[5,2,3,1]",
                        "output": "[1,2,3,5]",
                        "explanation": "The array is sorted in ascending order. Notice that some numbers retain their original positions while others change."
                    },
                    {
                        "input": "[5,1,1,2,0,0]",
                        "output": "[0,0,1,1,2,5]",
                        "explanation": "The array is sorted in ascending order. This test case includes duplicate values to demonstrate that the algorithm handles them correctly."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Bucket Sort",
                "slug": "bucket-sort"
            },
            {
                "name": "Radix Sort",
                "slug": "radix-sort"
            },
            {
                "name": "Counting Sort",
                "slug": "counting-sort"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> sortArray(vector<int>& nums) {\n    mergeSort(nums, 0, nums.size() - 1);\n    return nums;\n  }\n\n private:\n  void mergeSort(vector<int>& A, int l, int r) {\n    if (l >= r)\n      return;\n\n    const int m = (l + r) / 2;\n    mergeSort(A, l, m);\n    mergeSort(A, m + 1, r);\n    merge(A, l, m, r);\n  }\n\n  void merge(vector<int>& A, int l, int m, int r) {\n    vector<int> sorted(r - l + 1);\n    int k = 0;      // sorted's index\n    int i = l;      // left's index\n    int j = m + 1;  // right's index\n\n    while (i <= m && j <= r)\n      if (A[i] < A[j])\n        sorted[k++] = A[i++];\n      else\n        sorted[k++] = A[j++];\n\n    // Put the possible remaining left part into the sorted array.\n    while (i <= m)\n      sorted[k++] = A[i++];\n\n    // Put the possible remaining right part into the sorted array.\n    while (j <= r)\n      sorted[k++] = A[j++];\n\n    copy(sorted.begin(), sorted.end(), A.begin() + l);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] sortArray(int[] nums) {\n    mergeSort(nums, 0, nums.length - 1);\n    return nums;\n  }\n\n  private void mergeSort(int[] A, int l, int r) {\n    if (l >= r)\n      return;\n\n    final int m = (l + r) / 2;\n    mergeSort(A, l, m);\n    mergeSort(A, m + 1, r);\n    merge(A, l, m, r);\n  }\n\n  private void merge(int[] A, int l, int m, int r) {\n    int[] sorted = new int[r - l + 1];\n    int k = 0;     // sorted's index\n    int i = l;     // left's index\n    int j = m + 1; // right's index\n\n    while (i <= m && j <= r)\n      if (A[i] < A[j])\n        sorted[k++] = A[i++];\n      else\n        sorted[k++] = A[j++];\n\n    // Put the possible remaining left part into the sorted array.\n    while (i <= m)\n      sorted[k++] = A[i++];\n\n    // Put the possible remaining right part into the sorted array.\n    while (j <= r)\n      sorted[k++] = A[j++];\n\n    System.arraycopy(sorted, 0, A, l, sorted.length);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sortArray(self, nums: List[int]) -> List[int]:\n    def mergeSort(A: List[int], l: int, r: int) -> None:\n      if l >= r:\n        return\n\n      def merge(A: List[int], l: int, m: int, r: int) -> None:\n        sorted = [0] * (r - l + 1)\n        k = 0  # sorted's index\n        i = l  # left's index\n        j = m + 1  # right's index\n\n        while i <= m and j <= r:\n          if A[i] < A[j]:\n            sorted[k] = A[i]\n            k += 1\n            i += 1\n          else:\n            sorted[k] = A[j]\n            k += 1\n            j += 1\n\n        # Put the possible remaining left part into the sorted array.\n        while i <= m:\n          sorted[k] = A[i]\n          k += 1\n          i += 1\n\n        # Put the possible remaining right part into the sorted array.\n        while j <= r:\n          sorted[k] = A[j]\n          k += 1\n          j += 1\n\n        A[l:l + len(sorted)] = sorted\n\n      m = (l + r) // 2\n      mergeSort(A, l, m)\n      mergeSort(A, m + 1, r)\n      merge(A, l, m, r)\n\n    mergeSort(nums, 0, len(nums) - 1)\n    return nums\n",
                "lang_text": "py"
            }
        }
    }
}