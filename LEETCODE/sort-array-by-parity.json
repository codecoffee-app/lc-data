{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "905",
            "title": "Sort Array By Parity",
            "titleSlug": "sort-array-by-parity",
            "content": "<p>Given an integer array <code>nums</code>, move all the even integers at the beginning of the array followed by all the odd integers.</p>\n\n<p>Return <em><strong>any array</strong> that satisfies this condition</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,2,4]\n<strong>Output:</strong> [2,4,3,1]\n<strong>Explanation:</strong> The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 5000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5251,
            "dislikes": 144,
            "similarQuestions": "[{\"title\": \"Sort Even and Odd Indices Independently\", \"titleSlug\": \"sort-even-and-odd-indices-independently\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Largest Number After Digit Swaps by Parity\", \"titleSlug\": \"largest-number-after-digit-swaps-by-parity\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"757.4K\", \"totalSubmission\": \"993.5K\", \"totalAcceptedRaw\": 757417, \"totalSubmissionRaw\": 993491, \"acRate\": \"76.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, rearrange the array such that all even integers appear at the beginning, followed by all odd integers.",
                "constraints": [
                    "1 <= nums.length <= 5000",
                    "0 <= nums[i] <= 5000"
                ],
                "testcases": [
                    {
                        "input": "[3,1,2,4]",
                        "output": "[2,4,3,1]",
                        "explanation": "Other valid outputs include [4,2,3,1], [2,4,1,3], and [4,2,1,3]. The even numbers (2 and 4) must come before the odd numbers (3 and 1)."
                    },
                    {
                        "input": "[0]",
                        "output": "[0]",
                        "explanation": "The array only contains the number 0, which is even, so the output is the same as the input."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "sort-even-and-odd-indices-independently",
                "title": "Sort Even and Odd Indices Independently",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "largest-number-after-digit-swaps-by-parity",
                "title": "Largest Number After Digit Swaps by Parity",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> sortArrayByParity(vector<int>& nums) {\n    int l = 0;\n    int r = nums.size() - 1;\n\n    while (l < r) {\n      if (nums[l] % 2 == 1 && nums[r] % 2 == 0)\n        swap(nums[l], nums[r]);\n      if (nums[l] % 2 == 0)\n        ++l;\n      if (nums[r] % 2 == 1)\n        --r;\n    }\n\n    return nums;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] sortArrayByParity(int[] nums) {\n    int l = 0;\n    int r = nums.length - 1;\n\n    while (l < r) {\n      if (nums[l] % 2 == 1 && nums[r] % 2 == 0) {\n        int temp = nums[l];\n        nums[l] = nums[r];\n        nums[r] = temp;\n      }\n      if (nums[l] % 2 == 0)\n        ++l;\n      if (nums[r] % 2 == 1)\n        --r;\n    }\n\n    return nums;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sortArrayByParity(self, nums: List[int]) -> List[int]:\n    l = 0\n    r = len(nums) - 1\n\n    while l < r:\n      if nums[l] % 2 == 1 and nums[r] % 2 == 0:\n        nums[l], nums[r] = nums[r], nums[l]\n      if nums[l] % 2 == 0:\n        l += 1\n      if nums[r] % 2 == 1:\n        r -= 1\n\n    return nums\n",
                "lang_text": "py"
            }
        }
    }
}