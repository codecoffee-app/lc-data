{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "148",
            "title": "Sort List",
            "titleSlug": "sort-list",
            "content": "<p>Given the <code>head</code> of a linked list, return <em>the list after sorting it in <strong>ascending order</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg\" style=\"width: 450px; height: 194px;\" />\n<pre>\n<strong>Input:</strong> head = [4,2,1,3]\n<strong>Output:</strong> [1,2,3,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg\" style=\"width: 550px; height: 184px;\" />\n<pre>\n<strong>Input:</strong> head = [-1,5,3,4,0]\n<strong>Output:</strong> [-1,0,3,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 5 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Can you sort the linked list in <code>O(n logn)</code> time and <code>O(1)</code> memory (i.e. constant space)?</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 11065,
            "dislikes": 324,
            "similarQuestions": "[{\"title\": \"Merge Two Sorted Lists\", \"titleSlug\": \"merge-two-sorted-lists\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Sort Colors\", \"titleSlug\": \"sort-colors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Insertion Sort List\", \"titleSlug\": \"insertion-sort-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sort Linked List Already Sorted Using Absolute Values\", \"titleSlug\": \"sort-linked-list-already-sorted-using-absolute-values\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Merge Sort",
                    "slug": "merge-sort"
                }
            ],
            "stats": "{\"totalAccepted\": \"720.2K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 720215, \"totalSubmissionRaw\": 1265443, \"acRate\": \"56.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the head of a singly linked list, sort the list in ascending order and return the head of the sorted list.",
                "constraints": [
                    "The number of nodes in the list is in the range [0, 5 * 10^4].",
                    "-10^5 <= Node.val <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[4,2,1,3]",
                        "output": "[1,2,3,4]",
                        "explanation": null
                    },
                    {
                        "input": "[-1,5,3,4,0]",
                        "output": "[-1,0,3,4,5]",
                        "explanation": null
                    },
                    {
                        "input": "[]",
                        "output": "[]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "merge-two-sorted-lists",
                "title": "Merge Two Sorted Lists",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "sort-colors",
                "title": "Sort Colors",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "insertion-sort-list",
                "title": "Insertion Sort List",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "sort-linked-list-already-sorted-using-absolute-values",
                "title": "Sort Linked List Already Sorted Using Absolute Values",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  ListNode* sortList(ListNode* head) {\n    const int length = getLength(head);\n    ListNode dummy(0, head);\n\n    for (int k = 1; k < length; k *= 2) {\n      ListNode* curr = dummy.next;\n      ListNode* tail = &dummy;\n      while (curr) {\n        ListNode* l = curr;\n        ListNode* r = split(l, k);\n        curr = split(r, k);\n        auto [mergedHead, mergedTail] = merge(l, r);\n        tail->next = mergedHead;\n        tail = mergedTail;\n      }\n    }\n\n    return dummy.next;\n  }\n\n private:\n  int getLength(ListNode* head) {\n    int length = 0;\n    for (ListNode* curr = head; curr; curr = curr->next)\n      ++length;\n    return length;\n  }\n\n  ListNode* split(ListNode* head, int k) {\n    while (--k && head)\n      head = head->next;\n    ListNode* rest = head ? head->next : nullptr;\n    if (head != nullptr)\n      head->next = nullptr;\n    return rest;\n  }\n\n  pair<ListNode*, ListNode*> merge(ListNode* l1, ListNode* l2) {\n    ListNode dummy(0);\n    ListNode* tail = &dummy;\n\n    while (l1 && l2) {\n      if (l1->val > l2->val)\n        swap(l1, l2);\n      tail->next = l1;\n      l1 = l1->next;\n      tail = tail->next;\n    }\n    tail->next = l1 ? l1 : l2;\n    while (tail->next)\n      tail = tail->next;\n\n    return {dummy.next, tail};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public ListNode sortList(ListNode head) {\n    final int length = getLength(head);\n    ListNode dummy = new ListNode(0, head);\n\n    for (int k = 1; k < length; k *= 2) {\n      ListNode curr = dummy.next;\n      ListNode tail = dummy;\n      while (curr != null) {\n        ListNode l = curr;\n        ListNode r = split(l, k);\n        curr = split(r, k);\n        ListNode[] merged = merge(l, r);\n        tail.next = merged[0];\n        tail = merged[1];\n      }\n    }\n\n    return dummy.next;\n  }\n\n  private int getLength(ListNode head) {\n    int length = 0;\n    for (ListNode curr = head; curr != null; curr = curr.next)\n      ++length;\n    return length;\n  }\n\n  private ListNode split(ListNode head, int k) {\n    while (--k > 0 && head != null)\n      head = head.next;\n    ListNode rest = head == null ? null : head.next;\n    if (head != null)\n      head.next = null;\n    return rest;\n  }\n\n  private ListNode[] merge(ListNode l1, ListNode l2) {\n    ListNode dummy = new ListNode(0);\n    ListNode tail = dummy;\n\n    while (l1 != null && l2 != null) {\n      if (l1.val > l2.val) {\n        ListNode temp = l1;\n        l1 = l2;\n        l2 = temp;\n      }\n      tail.next = l1;\n      l1 = l1.next;\n      tail = tail.next;\n    }\n    tail.next = l1 == null ? l2 : l1;\n    while (tail.next != null)\n      tail = tail.next;\n\n    return new ListNode[] {dummy.next, tail};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sortList(self, head: ListNode) -> ListNode:\n    def split(head: ListNode, k: int) -> ListNode:\n      while k > 1 and head:\n        head = head.next\n        k -= 1\n      rest = head.next if head else None\n      if head:\n        head.next = None\n      return rest\n\n    def merge(l1: ListNode, l2: ListNode) -> tuple:\n      dummy = ListNode(0)\n      tail = dummy\n\n      while l1 and l2:\n        if l1.val > l2.val:\n          l1, l2 = l2, l1\n        tail.next = l1\n        l1 = l1.next\n        tail = tail.next\n      tail.next = l1 if l1 else l2\n      while tail.next:\n        tail = tail.next\n\n      return dummy.next, tail\n\n    length = 0\n    curr = head\n    while curr:\n      length += 1\n      curr = curr.next\n\n    dummy = ListNode(0, head)\n\n    k = 1\n    while k < length:\n      curr = dummy.next\n      tail = dummy\n      while curr:\n        l = curr\n        r = split(l, k)\n        curr = split(r, k)\n        mergedHead, mergedTail = merge(l, r)\n        tail.next = mergedHead\n        tail = mergedTail\n      k *= 2\n\n    return dummy.next\n",
                "lang_text": "py"
            }
        }
    }
}