{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1859",
            "title": "Sorting the Sentence",
            "titleSlug": "sorting-the-sentence",
            "content": "<p>A <strong>sentence</strong> is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.</p>\r\n\r\n<p>A sentence can be <strong>shuffled</strong> by appending the <strong>1-indexed word position</strong> to each word then rearranging the words in the sentence.</p>\r\n\r\n<ul>\r\n\t<li>For example, the sentence <code>&quot;This is a sentence&quot;</code> can be shuffled as <code>&quot;sentence4 a3 is2 This1&quot;</code> or <code>&quot;is2 sentence4 This1 a3&quot;</code>.</li>\r\n</ul>\r\n\r\n<p>Given a <strong>shuffled sentence</strong> <code>s</code> containing no more than <code>9</code> words, reconstruct and return <em>the original sentence</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;is2 sentence4 This1 a3&quot;\r\n<strong>Output:</strong> &quot;This is a sentence&quot;\r\n<strong>Explanation:</strong> Sort the words in s to their original positions &quot;This1 is2 a3 sentence4&quot;, then remove the numbers.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;Myself2 Me1 I4 and3&quot;\r\n<strong>Output:</strong> &quot;Me Myself and I&quot;\r\n<strong>Explanation:</strong> Sort the words in s to their original positions &quot;Me1 Myself2 and3 I4&quot;, then remove the numbers.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>2 &lt;= s.length &lt;= 200</code></li>\r\n\t<li><code>s</code> consists of lowercase and uppercase English letters, spaces, and digits from <code>1</code> to <code>9</code>.</li>\r\n\t<li>The number of words in <code>s</code> is between <code>1</code> and <code>9</code>.</li>\r\n\t<li>The words in <code>s</code> are separated by a single space.</li>\r\n\t<li><code>s</code> contains no leading or trailing spaces.</li>\r\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2060,
            "dislikes": 70,
            "similarQuestions": "[{\"title\": \"Check if Numbers Are Ascending in a Sentence\", \"titleSlug\": \"check-if-numbers-are-ascending-in-a-sentence\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"144.9K\", \"totalSubmission\": \"174.6K\", \"totalAcceptedRaw\": 144937, \"totalSubmissionRaw\": 174646, \"acRate\": \"83.0%\"}",
            "hints": [
                "Divide the string into the words as an array of strings",
                "Sort the words by removing the last character from each word and sorting according to it"
            ],
            "rephrased": {
                "body": "Given a shuffled sentence `s` containing no more than 9 words, reconstruct and return the original sentence. A sentence is shuffled by appending the 1-indexed word position to each word and then rearranging the words in the sentence. Words are separated by a single space and consist of lowercase and uppercase English letters.",
                "constraints": [
                    "2 <= s.length <= 200",
                    "s consists of lowercase and uppercase English letters, spaces, and digits from 1 to 9.",
                    "The number of words in s is between 1 and 9.",
                    "The words in s are separated by a single space.",
                    "s contains no leading or trailing spaces."
                ],
                "testcases": [
                    {
                        "input": "is2 sentence4 This1 a3",
                        "output": "This is a sentence",
                        "explanation": "The input sentence is shuffled. After rearranging the words based on their appended index and removing the index, the original sentence 'This is a sentence' is reconstructed."
                    },
                    {
                        "input": "Myself2 Me1 I4 and3",
                        "output": "Me Myself and I",
                        "explanation": "The input sentence is shuffled. By rearranging words according to their index and subsequently removing the indices, the original sentence 'Me Myself and I' is obtained."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "check-if-numbers-are-ascending-in-a-sentence",
                "title": "Check if Numbers Are Ascending in a Sentence",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Divide the string into the words as an array of strings",
            "Sort the words by removing the last character from each word and sorting according to it"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string sortSentence(string s) {\n    vector<string> words;\n    istringstream iss(s);\n    string word;\n\n    while (iss >> word)\n      words.push_back(word);\n\n    sort(words.begin(), words.end(),\n         [](const auto& a, const auto& b) { return a.back() < b.back(); });\n\n    string ans = trim(words[0]);\n\n    for (int i = 1; i < words.size(); ++i)\n      ans += \" \" + trim(words[i]);\n\n    return ans;\n  }\n\n private:\n  string trim(const string& s) {\n    return s.substr(0, s.length() - 1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String sortSentence(String s) {\n    String[] words = s.split(\" \");\n\n    Arrays.sort(words, (a, b) -> a.charAt(a.length() - 1) - b.charAt(b.length() - 1));\n\n    StringBuilder sb = new StringBuilder(trim(words[0]));\n\n    for (int i = 1; i < words.length; ++i)\n      sb.append(\" \").append(trim(words[i]));\n\n    return sb.toString();\n  }\n\n  private String trim(final String s) {\n    return s.substring(0, s.length() - 1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sortSentence(self, s: str) -> str:\n    return ' '.join([w[:-1] for w in sorted(s.split(), key=lambda x: x[-1])])\n",
                "lang_text": "py"
            }
        }
    }
}