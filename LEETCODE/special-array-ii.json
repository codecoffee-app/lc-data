{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3152",
            "title": "Special Array II",
            "titleSlug": "special-array-ii",
            "content": "<p>An array is considered <strong>special</strong> if every pair of its adjacent elements contains two numbers with different parity.</p>\n\n<p>You are given an array of integer <code>nums</code> and a 2D integer matrix <code>queries</code>, where for <code>queries[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> your task is to check that <span data-keyword=\"subarray\">subarray</span> <code>nums[from<sub>i</sub>..to<sub>i</sub>]</code> is <strong>special</strong> or not.</p>\n\n<p>Return an array of booleans <code>answer</code> such that <code>answer[i]</code> is <code>true</code> if <code>nums[from<sub>i</sub>..to<sub>i</sub>]</code> is special.<!-- notionvc: e5d6f4e2-d20a-4fbd-9c7f-22fbe52ef730 --></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,4,1,2,6], queries = [[0,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[false]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarray is <code>[3,4,1,2,6]</code>. 2 and 6 are both even.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,3,1,6], queries = [[0,2],[2,3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[false,true]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ol>\n\t<li>The subarray is <code>[4,3,1]</code>. 3 and 1 are both odd. So the answer to this query is <code>false</code>.</li>\n\t<li>The subarray is <code>[1,6]</code>. There is only one pair: <code>(1,6)</code> and it contains numbers with different parity. So the answer to this query is <code>true</code>.</li>\n</ol>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt;= nums.length - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 162,
            "dislikes": 11,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"28.4K\", \"totalSubmission\": \"95.7K\", \"totalAcceptedRaw\": 28357, \"totalSubmissionRaw\": 95683, \"acRate\": \"29.6%\"}",
            "hints": [
                "Try to split the array into some non-intersected continuous special subarrays.",
                "For each query check that the first and the last elements of that query are in the same subarray or not."
            ],
            "rephrased": {
                "body": "An array is considered **special** if every pair of its adjacent elements contains two numbers with different parity (one even, one odd). Given an array of integers `nums` and a 2D integer matrix `queries`, where `queries[i] = [from_i, to_i]`, determine whether the subarray `nums[from_i..to_i]` is **special** for each query. Return an array of booleans `answer` such that `answer[i]` is `true` if the corresponding subarray is special, and `false` otherwise.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^5",
                    "1 <= queries.length <= 10^5",
                    "queries[i].length == 2",
                    "0 <= queries[i][0] <= queries[i][1] <= nums.length - 1"
                ],
                "testcases": [
                    {
                        "input": "nums = [3,4,1,2,6], queries = [[0,4]]",
                        "output": "[false]",
                        "explanation": "The subarray [3, 4, 1, 2, 6] is not special because the adjacent elements 2 and 6 are both even."
                    },
                    {
                        "input": "nums = [4,3,1,6], queries = [[0,2],[2,3]]",
                        "output": "[false,true]",
                        "explanation": "For the first query, the subarray [4, 3, 1] is not special because 3 and 1 are both odd. For the second query, the subarray [1, 6] is special because the only adjacent pair (1, 6) contains numbers with different parity."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Try to split the array into some non-intersected continuous special subarrays.",
            "For each query check that the first and the last elements of that query are in the same subarray or not."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<bool> isArraySpecial(vector<int>& nums, vector<vector<int>>& queries) {\n    vector<bool> ans;\n    int id = 0;\n    // parityIds[i] := the id of the parity group that nums[i] belongs to\n    vector<int> parityIds = {id};\n\n    for (int i = 1; i < nums.size(); ++i) {\n      if (nums[i] % 2 == nums[i - 1] % 2)\n        ++id;\n      parityIds.push_back(id);\n    }\n\n    for (const vector<int> query : queries) {\n      const int from = query[0];\n      const int to = query[1];\n      ans.push_back(parityIds[from] == parityIds[to]);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean[] isArraySpecial(int[] nums, int[][] queries) {\n    boolean[] ans = new boolean[queries.length];\n    // parityIds[i] := the id of the parity group that nums[i] belongs to\n    int[] parityIds = new int[nums.length];\n    int id = 0;\n    parityIds[0] = id;\n\n    for (int i = 1; i < nums.length; ++i) {\n      if (nums[i] % 2 == nums[i - 1] % 2)\n        ++id;\n      parityIds[i] = id;\n    }\n\n    for (int i = 0; i < queries.length; ++i) {\n      final int from = queries[i][0];\n      final int to = queries[i][1];\n      ans[i] = parityIds[from] == parityIds[to];\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isArraySpecial(self, nums: List[int], queries: List[List[int]]) -> List[bool]:\n    ans = []\n    id = 0\n    # parityIds[i] := the id of the parity group that nums[i] belongs to\n    parityIds = [id]\n\n    for i, (a, b) in enumerate(itertools.pairwise(nums)):\n      # for i in range(1, len(nums)):\n      if a % 2 == b % 2:\n        id += 1\n      parityIds.append(id)\n\n    for _from, to in queries:\n      ans.append(parityIds[_from] == parityIds[to])\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}