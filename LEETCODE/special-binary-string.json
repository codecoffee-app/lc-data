{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "761",
            "title": "Special Binary String",
            "titleSlug": "special-binary-string",
            "content": "<p><strong>Special binary strings</strong> are binary strings with the following two properties:</p>\n\n<ul>\n\t<li>The number of <code>0</code>&#39;s is equal to the number of <code>1</code>&#39;s.</li>\n\t<li>Every prefix of the binary string has at least as many <code>1</code>&#39;s as <code>0</code>&#39;s.</li>\n</ul>\n\n<p>You are given a <strong>special binary</strong> string <code>s</code>.</p>\n\n<p>A move consists of choosing two consecutive, non-empty, special substrings of <code>s</code>, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.</p>\n\n<p>Return <em>the lexicographically largest resulting string possible after applying the mentioned operations on the string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;11011000&quot;\n<strong>Output:</strong> &quot;11100100&quot;\n<strong>Explanation:</strong> The strings &quot;10&quot; [occuring at s[1]] and &quot;1100&quot; [at s[3]] are swapped.\nThis is the lexicographically largest string possible after some number of swaps.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;10&quot;\n<strong>Output:</strong> &quot;10&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 50</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li><code>s</code> is a special binary string.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 682,
            "dislikes": 206,
            "similarQuestions": "[{\"title\": \"Valid Parenthesis String\", \"titleSlug\": \"valid-parenthesis-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Good Binary Strings\", \"titleSlug\": \"number-of-good-binary-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.3K\", \"totalSubmission\": \"26.8K\", \"totalAcceptedRaw\": 16294, \"totalSubmissionRaw\": 26785, \"acRate\": \"60.8%\"}",
            "hints": [
                "Draw a line from (x, y) to (x+1, y+1) if we see a \"1\", else to (x+1, y-1).\r\nA special substring is just a line that starts and ends at the same y-coordinate, and that is the lowest y-coordinate reached.\r\nCall a mountain a special substring with no special prefixes - ie. only at the beginning and end is the lowest y-coordinate reached.\r\nIf F is the answer function, and S has mountain decomposition M1,M2,M3,...,Mk,  then the answer is:\r\nreverse_sorted(F(M1), F(M2), ..., F(Mk)).\r\nHowever, you'll also need to deal with the case that S is a mountain, such as 11011000 -> 11100100."
            ],
            "rephrased": {
                "body": "A **special binary string** is defined as a binary string with an equal number of 0s and 1s, where every prefix has at least as many 1s as 0s.\n\nYou are given a special binary string `s`.  A move involves swapping two consecutive, non-empty, special substrings of `s`. Consecutive substrings are those where the end of the first substring is immediately before the start of the second. \n\nReturn the lexicographically largest special binary string achievable after applying any number of such swaps to `s`.",
                "constraints": [
                    "1 <= s.length <= 50",
                    "s[i] is either '0' or '1'.",
                    "s is a special binary string."
                ],
                "testcases": [
                    {
                        "input": "11011000",
                        "output": "11100100",
                        "explanation": "By swapping the substrings \"10\" (starting at index 1) and \"1100\" (starting at index 3), we obtain \"11100100\", which is the lexicographically largest possible result."
                    },
                    {
                        "input": "10",
                        "output": "10",
                        "explanation": "No swaps are possible, so the original string remains unchanged."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "valid-parenthesis-string",
                "title": "Valid Parenthesis String",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-good-binary-strings",
                "title": "Number of Good Binary Strings",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Draw a line from (x, y) to (x+1, y+1) if we see a \"1\", else to (x+1, y-1).\r\nA special substring is just a line that starts and ends at the same y-coordinate, and that is the lowest y-coordinate reached.\r\nCall a mountain a special substring with no special prefixes - ie. only at the beginning and end is the lowest y-coordinate reached.\r\nIf F is the answer function, and S has mountain decomposition M1,M2,M3,...,Mk,  then the answer is:\r\nreverse_sorted(F(M1), F(M2), ..., F(Mk)).\r\nHowever, you'll also need to deal with the case that S is a mountain, such as 11011000 -> 11100100."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string makeLargestSpecial(string s) {\n    vector<string> specials;\n    int count = 0;\n\n    for (int i = 0, j = 0; j < s.length(); ++j) {\n      count += s[j] == '1' ? 1 : -1;\n      if (count == 0) {  // Find a special string\n        const string& inner = s.substr(i + 1, j - i - 1);\n        specials.push_back('1' + makeLargestSpecial(inner) + '0');\n        i = j + 1;\n      }\n    }\n\n    std::ranges::sort(specials, greater<>());\n    return join(specials);\n  }\n\n private:\n  string join(const vector<string>& specials) {\n    string joined;\n    for (const string& special : specials)\n      joined += special;\n    return joined;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String makeLargestSpecial(String s) {\n    List<String> specials = new ArrayList<>();\n    int count = 0;\n\n    for (int i = 0, j = 0; j < s.length(); ++j) {\n      count += s.charAt(j) == '1' ? 1 : -1;\n      if (count == 0) {\n        specials.add(\"1\" + makeLargestSpecial(s.substring(i + 1, j)) + \"0\");\n        i = j + 1;\n      }\n    }\n\n    Collections.sort(specials, Collections.reverseOrder());\n    return String.join(\"\", specials);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def makeLargestSpecial(self, s: str) -> str:\n    specials = []\n    count = 0\n\n    i = 0\n    for j, c in enumerate(s):\n      count += 1 if c == '1' else -1\n      if count == 0:\n        specials.append(\n            '1' + self.makeLargestSpecial(s[i + 1:j]) + '0')\n        i = j + 1\n\n    return ''.join(sorted(specials)[::-1])\n",
                "lang_text": "py"
            }
        }
    }
}