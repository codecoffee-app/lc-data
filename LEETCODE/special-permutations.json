{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2741",
            "title": "Special Permutations",
            "titleSlug": "special-permutations",
            "content": "<p>You are given a&nbsp;<strong>0-indexed</strong>&nbsp;integer array&nbsp;<code>nums</code>&nbsp;containing&nbsp;<code>n</code>&nbsp;<strong>distinct</strong> positive integers. A permutation of&nbsp;<code>nums</code>&nbsp;is called special if:</p>\n\n<ul>\n\t<li>For all indexes&nbsp;<code>0 &lt;= i &lt; n - 1</code>, either&nbsp;<code>nums[i] % nums[i+1] == 0</code>&nbsp;or&nbsp;<code>nums[i+1] % nums[i] == 0</code>.</li>\n</ul>\n\n<p>Return&nbsp;<em>the total number of special permutations.&nbsp;</em>As the answer could be large, return it&nbsp;<strong>modulo&nbsp;</strong><code>10<sup>9&nbsp;</sup>+ 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,6]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> [3,6,2] and [2,6,3] are the two special permutations of nums.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> [3,1,4] and [4,1,3] are the two special permutations of nums.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 14</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 513,
            "dislikes": 59,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.2K\", \"totalSubmission\": \"45K\", \"totalAcceptedRaw\": 12158, \"totalSubmissionRaw\": 45050, \"acRate\": \"27.0%\"}",
            "hints": [
                "Can we solve this problem using DP with bit masking?",
                "You just need two states in DP which are last_ind in the permutation and the mask of numbers already used."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` containing `n` distinct positive integers, find the total number of special permutations. A permutation is considered special if, for all indices `0 <= i < n - 1`, either `nums[i] % nums[i+1] == 0` or `nums[i+1] % nums[i] == 0`. Return the total number of special permutations modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "2 <= nums.length <= 14",
                    "1 <= nums[i] <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "[2,3,6]",
                        "output": "2",
                        "explanation": "The special permutations are [3,6,2] and [2,6,3]."
                    },
                    {
                        "input": "[1,4,3]",
                        "output": "2",
                        "explanation": "The special permutations are [3,1,4] and [4,1,3]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Can we solve this problem using DP with bit masking?",
            "You just need two states in DP which are last_ind in the permutation and the mask of numbers already used."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int specialPerm(vector<int>& nums) {\n    const int n = nums.size();\n    const int maxMask = 1 << n;\n    int ans = 0;\n    // dp[i][j] := # of special permutations where the previous number is\n    // nums[i] and j is the used nums in mask\n    dp.resize(n, vector<int>(maxMask));\n\n    for (int i = 0; i < n; ++i) {\n      ans += specialPerm(nums, i, 1 << i, maxMask);\n      ans %= kMod;\n    }\n\n    return ans;\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n  vector<vector<int>> dp;\n\n  int specialPerm(const vector<int>& nums, int prev, int mask,\n                  const int& maxMask) {\n    if (mask == maxMask - 1)\n      return 1;\n    if (dp[prev][mask] > 0)\n      return dp[prev][mask];\n\n    int res = 0;\n\n    for (int i = 0; i < nums.size(); ++i) {\n      if (mask >> i & 1)\n        continue;\n      if (nums[i] % nums[prev] == 0 || nums[prev] % nums[i] == 0) {\n        res += specialPerm(nums, i, mask | 1 << i, maxMask);\n        res %= kMod;\n      }\n    }\n\n    return dp[prev][mask] = res;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int specialPerm(int[] nums) {\n    final int n = nums.length;\n    final int maxMask = 1 << n;\n    int ans = 0;\n    dp = new int[n][maxMask];\n\n    for (int i = 0; i < n; ++i) {\n      ans += specialPerm(nums, i, 1 << i, maxMask);\n      ans %= kMod;\n    }\n\n    return ans;\n  }\n\n  private static final int kMod = 1_000_000_007;\n  private int[][] dp;\n\n  private int specialPerm(int[] nums, int prev, int mask, int maxMask) {\n    if (mask == maxMask - 1)\n      return 1;\n    if (dp[prev][mask] != 0)\n      return dp[prev][mask];\n\n    int res = 0;\n\n    for (int i = 0; i < nums.length; ++i) {\n      if ((mask >> i & 1) == 1)\n        continue;\n      if (nums[i] % nums[prev] == 0 || nums[prev] % nums[i] == 0) {\n        res += specialPerm(nums, i, mask | 1 << i, maxMask);\n        res %= kMod;\n      }\n    }\n\n    return dp[prev][mask] = res;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def specialPerm(self, nums: List[int]) -> int:\n    kMod = 1_000_000_007\n    maxMask = 1 << len(nums)\n\n    # dp(i, j) := # of special permutations where the previous number is\n    # nums[i] and j is the used nums in mask\n    @functools.lru_cache(None)\n    def dp(prev: int, mask: int) -> int:\n      if mask == maxMask - 1:\n        return 1\n\n      res = 0\n\n      for i, num in enumerate(nums):\n        if mask >> i & 1:\n          continue\n        if num % nums[prev] == 0 or nums[prev] % num == 0:\n          res += dp(i, mask | 1 << i)\n          res %= kMod\n\n      return res\n\n    return sum(dp(i, 1 << i)\n               for i in range(len(nums))) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}