{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "885",
            "title": "Spiral Matrix III",
            "titleSlug": "spiral-matrix-iii",
            "content": "<p>You start at the cell <code>(rStart, cStart)</code> of an <code>rows x cols</code> grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.</p>\n\n<p>You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid&#39;s boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all <code>rows * cols</code> spaces of the grid.</p>\n\n<p>Return <em>an array of coordinates representing the positions of the grid in the order you visited them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png\" style=\"width: 174px; height: 99px;\" />\n<pre>\n<strong>Input:</strong> rows = 1, cols = 4, rStart = 0, cStart = 0\n<strong>Output:</strong> [[0,0],[0,1],[0,2],[0,3]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png\" style=\"width: 202px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> rows = 5, cols = 6, rStart = 1, cStart = 4\n<strong>Output:</strong> [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rows, cols &lt;= 100</code></li>\n\t<li><code>0 &lt;= rStart &lt; rows</code></li>\n\t<li><code>0 &lt;= cStart &lt; cols</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 883,
            "dislikes": 843,
            "similarQuestions": "[{\"title\": \"Spiral Matrix\", \"titleSlug\": \"spiral-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Spiral Matrix II\", \"titleSlug\": \"spiral-matrix-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Spiral Matrix IV\", \"titleSlug\": \"spiral-matrix-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"47K\", \"totalSubmission\": \"63.3K\", \"totalAcceptedRaw\": 46994, \"totalSubmissionRaw\": 63254, \"acRate\": \"74.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given a grid of size `rows x cols`. You begin at cell `(rStart, cStart)` facing east. You will traverse the grid in a clockwise spiral pattern, visiting every position. This spiral may extend beyond the grid boundaries, but you must continue until all `rows * cols` cells have been visited. Return an array of coordinates in the order they are visited.",
                "constraints": [
                    "1 <= rows, cols <= 100",
                    "0 <= rStart < rows",
                    "0 <= cStart < cols"
                ],
                "testcases": [
                    {
                        "input": "rows = 1, cols = 4, rStart = 0, cStart = 0",
                        "output": "[[0,0],[0,1],[0,2],[0,3]]",
                        "explanation": null
                    },
                    {
                        "input": "rows = 5, cols = 6, rStart = 1, cStart = 4",
                        "output": "[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "spiral-matrix",
                "title": "Spiral Matrix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "spiral-matrix-ii",
                "title": "Spiral Matrix II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "spiral-matrix-iv",
                "title": "Spiral Matrix IV",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> spiralMatrixIII(int rows, int cols, int rStart,\n                                      int cStart) {\n    const vector<int> dx{1, 0, -1, 0};\n    const vector<int> dy{0, 1, 0, -1};\n    vector<vector<int>> ans{{rStart, cStart}};\n\n    for (int i = 0; ans.size() < rows * cols; ++i)\n      for (int step = 0; step < i / 2 + 1; ++step) {\n        rStart += dy[i % 4];\n        cStart += dx[i % 4];\n        if (0 <= rStart && rStart < rows && 0 <= cStart && cStart < cols)\n          ans.push_back({rStart, cStart});\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] spiralMatrixIII(int rows, int cols, int rStart, int cStart) {\n    final int[] dx = {1, 0, -1, 0};\n    final int[] dy = {0, 1, 0, -1};\n    List<int[]> ans = new ArrayList<>(Arrays.asList(new int[] {rStart, cStart}));\n\n    for (int i = 0; ans.size() < rows * cols; ++i)\n      for (int step = 0; step < i / 2 + 1; ++step) {\n        rStart += dy[i % 4];\n        cStart += dx[i % 4];\n        if (0 <= rStart && rStart < rows && 0 <= cStart && cStart < cols)\n          ans.add(new int[] {rStart, cStart});\n      }\n\n    return ans.stream().toArray(int[][] ::new);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def spiralMatrixIII(self, rows: int, cols: int, rStart: int, cStart: int) -> List[List[int]]:\n    dx = [1, 0, -1, 0]\n    dy = [0, 1, 0, -1]\n    ans = [[rStart, cStart]]\n    i = 0\n\n    while len(ans) < rows * cols:\n      for _ in range(i // 2 + 1):\n        rStart += dy[i % 4]\n        cStart += dx[i % 4]\n        if 0 <= rStart < rows and 0 <= cStart < cols:\n          ans.append([rStart, cStart])\n      i += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}