{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2326",
            "title": "Spiral Matrix IV",
            "titleSlug": "spiral-matrix-iv",
            "content": "<p>You are given two integers <code>m</code> and <code>n</code>, which represent the dimensions of a matrix.</p>\n\n<p>You are also given the <code>head</code> of a linked list of integers.</p>\n\n<p>Generate an <code>m x n</code> matrix that contains the integers in the linked list presented in <strong>spiral</strong> order <strong>(clockwise)</strong>, starting from the <strong>top-left</strong> of the matrix. If there are remaining empty spaces, fill them with <code>-1</code>.</p>\n\n<p>Return <em>the generated matrix</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/09/ex1new.jpg\" style=\"width: 240px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]\n<strong>Output:</strong> [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]\n<strong>Explanation:</strong> The diagram above shows how the values are printed in the matrix.\nNote that the remaining spaces in the matrix are filled with -1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/11/ex2.jpg\" style=\"width: 221px; height: 60px;\" />\n<pre>\n<strong>Input:</strong> m = 1, n = 4, head = [0,1,2]\n<strong>Output:</strong> [[0,1,2,-1]]\n<strong>Explanation:</strong> The diagram above shows how the values are printed from left to right in the matrix.\nThe last space in the matrix is set to -1.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li>The number of nodes in the list is in the range <code>[1, m * n]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 694,
            "dislikes": 26,
            "similarQuestions": "[{\"title\": \"Spiral Matrix\", \"titleSlug\": \"spiral-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Spiral Matrix II\", \"titleSlug\": \"spiral-matrix-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Spiral Matrix III\", \"titleSlug\": \"spiral-matrix-iii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"35.8K\", \"totalSubmission\": \"47.7K\", \"totalAcceptedRaw\": 35839, \"totalSubmissionRaw\": 47695, \"acRate\": \"75.1%\"}",
            "hints": [
                "First, generate an m x n matrix filled with -1s.",
                "Navigate within the matrix at (i, j) with the help of a direction vector \u27e8di, dj\u27e9. At (i, j), you need to decide if you can keep going in the current direction.",
                "If you cannot keep going, rotate the direction vector clockwise by 90 degrees."
            ],
            "rephrased": {
                "body": "You are given two integers `m` and `n`, representing the dimensions of a matrix. You are also given the `head` of a linked list of integers. Generate an `m x n` matrix filled with the integers from the linked list in a clockwise spiral order, starting from the top-left corner. If there are remaining empty spaces in the matrix after filling it with linked list elements, fill them with `-1`. Return the generated matrix.",
                "constraints": [
                    "1 <= m, n <= 10^5",
                    "1 <= m * n <= 10^5",
                    "The number of nodes in the list is in the range [1, m * n]",
                    "0 <= Node.val <= 1000"
                ],
                "testcases": [
                    {
                        "input": "m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]",
                        "output": "[[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]",
                        "explanation": "The linked list values are populated into the matrix in a clockwise spiral manner.  The remaining empty cells are filled with -1."
                    },
                    {
                        "input": "m = 1, n = 4, head = [0,1,2]",
                        "output": "[[0,1,2,-1]]",
                        "explanation": "The linked list values are populated from left to right in the single row matrix, and the last space is filled with -1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "spiral-matrix",
                "title": "Spiral Matrix",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "spiral-matrix-ii",
                "title": "Spiral Matrix II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "spiral-matrix-iii",
                "title": "Spiral Matrix III",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "First, generate an m x n matrix filled with -1s.",
            "Navigate within the matrix at (i, j) with the help of a direction vector \u27e8di, dj\u27e9. At (i, j), you need to decide if you can keep going in the current direction.",
            "If you cannot keep going, rotate the direction vector clockwise by 90 degrees."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> spiralMatrix(int m, int n, ListNode* head) {\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    vector<vector<int>> ans(m, vector<int>(n, -1));\n    int x = 0;  // Current x position\n    int y = 0;  // Current y position\n    int d = 0;\n\n    for (ListNode* curr = head; curr; curr = curr->next) {\n      ans[x][y] = curr->val;\n      if (x + dirs[d] < 0 || x + dirs[d] == m || y + dirs[d + 1] < 0 ||\n          y + dirs[d + 1] == n || ans[x + dirs[d]][y + dirs[d + 1]] != -1)\n        d = (d + 1) % 4;\n      x += dirs[d];\n      y += dirs[d + 1];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] spiralMatrix(int m, int n, ListNode head) {\n    final int[] dirs = {0, 1, 0, -1, 0};\n    int[][] ans = new int[m][n];\n    Arrays.stream(ans).forEach(A -> Arrays.fill(A, -1));\n    int x = 0; // Current x position\n    int y = 0; // Current y position\n    int d = 0;\n\n    for (ListNode curr = head; curr != null; curr = curr.next) {\n      ans[x][y] = curr.val;\n      if (x + dirs[d] < 0 || x + dirs[d] == m || y + dirs[d + 1] < 0 || y + dirs[d + 1] == n ||\n          ans[x + dirs[d]][y + dirs[d + 1]] != -1)\n        d = (d + 1) % 4;\n      x += dirs[d];\n      y += dirs[d + 1];\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -> List[List[int]]:\n    dirs = [0, 1, 0, -1, 0]\n    ans = [[-1] * n for _ in range(m)]\n    x = 0  # Current x position\n    y = 0  # Current y position\n    d = 0\n\n    curr = head\n    while curr:\n      ans[x][y] = curr.val\n      if x + dirs[d] < 0 or x + dirs[d] == m or y + dirs[d + 1] < 0 or \\\n              y + dirs[d + 1] == n or ans[x + dirs[d]][y + dirs[d + 1]] != -1:\n        d = (d + 1) % 4\n      x += dirs[d]\n      y += dirs[d + 1]\n      curr = curr.next\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}