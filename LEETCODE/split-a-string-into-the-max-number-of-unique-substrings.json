{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1593",
            "title": "Split a String Into the Max Number of Unique Substrings",
            "titleSlug": "split-a-string-into-the-max-number-of-unique-substrings",
            "content": "<p>Given a string&nbsp;<code>s</code><var>,</var>&nbsp;return <em>the maximum&nbsp;number of unique substrings that the given string can be split into</em>.</p>\n\n<p>You can split string&nbsp;<code>s</code> into any list of&nbsp;<strong>non-empty substrings</strong>, where the concatenation of the substrings forms the original string.&nbsp;However, you must split the substrings such that all of them are <strong>unique</strong>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababccc&quot;\n<strong>Output:</strong> 5\n<strong>Explanation</strong>: One way to split maximally is [&#39;a&#39;, &#39;b&#39;, &#39;ab&#39;, &#39;c&#39;, &#39;cc&#39;]. Splitting like [&#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;cc&#39;] is not valid as you have &#39;a&#39; and &#39;b&#39; multiple times.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: One way to split maximally is [&#39;a&#39;, &#39;ba&#39;].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: It is impossible to split the string any further.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>\n\t<p><code>1 &lt;= s.length&nbsp;&lt;= 16</code></p>\n\t</li>\n\t<li>\n\t<p><code>s</code> contains&nbsp;only lower case English letters.</p>\n\t</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 811,
            "dislikes": 32,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"29.1K\", \"totalSubmission\": \"51.9K\", \"totalAcceptedRaw\": 29063, \"totalSubmissionRaw\": 51865, \"acRate\": \"56.0%\"}",
            "hints": [
                "Use a set to keep track of which substrings have been used already",
                "Try each possible substring at every position and backtrack if a complete split is not possible"
            ],
            "rephrased": {
                "body": "Given a string `s`, find the maximum number of unique substrings that `s` can be split into. You must split the string into a list of non-empty substrings, where the concatenation of the substrings forms the original string. All substrings must be unique.",
                "constraints": [
                    "1 <= s.length <= 16",
                    "s contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "ababccc",
                        "output": 5,
                        "explanation": "One possible split is ['a', 'b', 'ab', 'c', 'cc']. This yields 5 unique substrings."
                    },
                    {
                        "input": "aba",
                        "output": 2,
                        "explanation": "One possible split is ['a', 'ba'].  This gives a count of 2 unique substrings."
                    },
                    {
                        "input": "aa",
                        "output": 1,
                        "explanation": "The string cannot be split into more than one unique substring."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use a set to keep track of which substrings have been used already",
            "Try each possible substring at every position and backtrack if a complete split is not possible"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxUniqueSplit(string s) {\n    size_t ans = 0;\n    dfs(s, 0, {}, ans);\n    return ans;\n  }\n\n private:\n  void dfs(const string& s, int start, unordered_set<string>&& seen,\n           size_t& ans) {\n    if (start == s.length()) {\n      ans = max(ans, seen.size());\n      return;\n    }\n\n    for (int i = 1; start + i <= s.length(); ++i) {\n      const string cand = s.substr(start, i);\n      if (seen.count(cand))\n        continue;\n      seen.insert(cand);\n      dfs(s, start + i, move(seen), ans);\n      seen.erase(cand);\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxUniqueSplit(String s) {\n    dfs(s, 0, new HashSet<>());\n    return ans;\n  }\n\n  private int ans = 0;\n\n  private void dfs(final String s, int start, Set<String> seen) {\n    if (start == s.length()) {\n      ans = Math.max(ans, seen.size());\n      return;\n    }\n\n    for (int i = start + 1; i <= s.length(); ++i) {\n      final String cand = s.substring(start, i);\n      if (seen.contains(cand))\n        continue;\n      seen.add(cand);\n      dfs(s, i, seen);\n      seen.remove(cand);\n    }\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}