{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "659",
            "title": "Split Array into Consecutive Subsequences",
            "titleSlug": "split-array-into-consecutive-subsequences",
            "content": "<p>You are given an integer array <code>nums</code> that is <strong>sorted in non-decreasing order</strong>.</p>\n\n<p>Determine if it is possible to split <code>nums</code> into <strong>one or more subsequences</strong> such that <strong>both</strong> of the following conditions are true:</p>\n\n<ul>\n\t<li>Each subsequence is a <strong>consecutive increasing sequence</strong> (i.e. each integer is <strong>exactly one</strong> more than the previous integer).</li>\n\t<li>All subsequences have a length of <code>3</code><strong> or more</strong>.</li>\n</ul>\n\n<p>Return <code>true</code><em> if you can split </em><code>nums</code><em> according to the above conditions, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>A <strong>subsequence</strong> of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., <code>[1,3,5]</code> is a subsequence of <code>[<u>1</u>,2,<u>3</u>,4,<u>5</u>]</code> while <code>[1,3,2]</code> is not).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> nums can be split into the following subsequences:\n[<strong><u>1</u></strong>,<strong><u>2</u></strong>,<strong><u>3</u></strong>,3,4,5] --&gt; 1, 2, 3\n[1,2,3,<strong><u>3</u></strong>,<strong><u>4</u></strong>,<strong><u>5</u></strong>] --&gt; 3, 4, 5\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,3,4,4,5,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> nums can be split into the following subsequences:\n[<strong><u>1</u></strong>,<strong><u>2</u></strong>,<strong><u>3</u></strong>,3,<strong><u>4</u></strong>,4,<strong><u>5</u></strong>,5] --&gt; 1, 2, 3, 4, 5\n[1,2,3,<strong><u>3</u></strong>,4,<strong><u>4</u></strong>,5,<strong><u>5</u></strong>] --&gt; 3, 4, 5\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,4,5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to split nums into consecutive increasing subsequences of length 3 or more.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4344,
            "dislikes": 794,
            "similarQuestions": "[{\"title\": \"Top K Frequent Elements\", \"titleSlug\": \"top-k-frequent-elements\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Divide Array in Sets of K Consecutive Numbers\", \"titleSlug\": \"divide-array-in-sets-of-k-consecutive-numbers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"127.4K\", \"totalSubmission\": \"250.2K\", \"totalAcceptedRaw\": 127449, \"totalSubmissionRaw\": 250157, \"acRate\": \"50.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a sorted integer array `nums`, determine if it can be split into one or more subsequences, where each subsequence is a consecutive increasing sequence of length 3 or more. Return `true` if it's possible, `false` otherwise.",
                "constraints": [
                    "1 <= nums.length <= 10<sup>4</sup>",
                    "-1000 <= nums[i] <= 1000",
                    "`nums` is sorted in non-decreasing order."
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,3,4,5]",
                        "output": "true",
                        "explanation": "The array can be split into subsequences [1,2,3] and [3,4,5]."
                    },
                    {
                        "input": "[1,2,3,3,4,4,5,5]",
                        "output": "true",
                        "explanation": "The array can be split into subsequences [1,2,3,4,5] and [3,4,5]."
                    },
                    {
                        "input": "[1,2,3,4,4,5]",
                        "output": "false",
                        "explanation": "It is impossible to split the array into consecutive increasing subsequences of length 3 or more."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "top-k-frequent-elements",
                "title": "Top K Frequent Elements",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "divide-array-in-sets-of-k-consecutive-numbers",
                "title": "Divide Array in Sets of K Consecutive Numbers",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isPossible(vector<int>& nums) {\n    unordered_map<int, int> count;\n    vector<int> starts;  // Start index of subsequence\n    vector<int> ends;    // End index of subsequence\n\n    for (const int num : nums)\n      ++count[num];\n\n    for (int i = 0; i < nums.size(); ++i) {\n      if (i > 0 && nums[i] == nums[i - 1])\n        continue;\n      const int num = nums[i];\n      const int currCount = count[num];\n      const int prevCount = count.count(num - 1) ? count[num - 1] : 0;\n      const int nextCount = count.count(num + 1) ? count[num + 1] : 0;\n      for (int j = 0; j < currCount - prevCount; ++j)\n        starts.push_back(num);\n      for (int j = 0; j < currCount - nextCount; ++j)\n        ends.push_back(num);\n    }\n\n    for (int i = 0; i < starts.size(); ++i)\n      if (ends[i] - starts[i] < 2)\n        return false;\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isPossible(int[] nums) {\n    Map<Integer, Integer> count = new HashMap<>();\n    List<Integer> starts = new ArrayList<>(); // Start index of subsequence\n    List<Integer> ends = new ArrayList<>();   // End index of subsequence\n\n    for (final int num : nums)\n      count.merge(num, 1, Integer::sum);\n\n    for (int i = 0; i < nums.length; ++i) {\n      if (i > 0 && nums[i] == nums[i - 1])\n        continue;\n      final int num = nums[i];\n      final int currCount = count.get(num);\n      final int prevCount = count.getOrDefault(num - 1, 0);\n      final int nextCount = count.getOrDefault(num + 1, 0);\n      for (int j = 0; j < currCount - prevCount; ++j)\n        starts.add(num);\n      for (int j = 0; j < currCount - nextCount; ++j)\n        ends.add(num);\n    }\n\n    for (int i = 0; i < starts.size(); ++i)\n      if (ends.get(i) - starts.get(i) < 2)\n        return false;\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}