{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "410",
            "title": "Split Array Largest Sum",
            "titleSlug": "split-array-largest-sum",
            "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, split <code>nums</code> into <code>k</code> non-empty subarrays such that the largest sum of any subarray is <strong>minimized</strong>.</p>\n\n<p>Return <em>the minimized largest sum of the split</em>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous part of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,2,5,10,8], k = 2\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5], k = 2\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= min(50, nums.length)</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 9322,
            "dislikes": 197,
            "similarQuestions": "[{\"title\": \"Capacity To Ship Packages Within D Days\", \"titleSlug\": \"capacity-to-ship-packages-within-d-days\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Divide Chocolate\", \"titleSlug\": \"divide-chocolate\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Fair Distribution of Cookies\", \"titleSlug\": \"fair-distribution-of-cookies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subsequence of Size K With the Largest Even Sum\", \"titleSlug\": \"subsequence-of-size-k-with-the-largest-even-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Total Beauty of the Gardens\", \"titleSlug\": \"maximum-total-beauty-of-the-gardens\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Split Array\", \"titleSlug\": \"number-of-ways-to-split-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Cost to Split an Array\", \"titleSlug\": \"minimum-cost-to-split-an-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"310K\", \"totalSubmission\": \"566.7K\", \"totalAcceptedRaw\": 309969, \"totalSubmissionRaw\": 566673, \"acRate\": \"54.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `k`, divide `nums` into `k` non-empty continuous subarrays. The goal is to minimize the largest sum among these `k` subarrays.  Return the smallest possible value for this largest sum.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "0 <= nums[i] <= 10^6",
                    "1 <= k <= min(50, nums.length)"
                ],
                "testcases": [
                    {
                        "input": "nums = [7,2,5,10,8], k = 2",
                        "output": "18",
                        "explanation": "The optimal split is [7, 2, 5] and [10, 8]. The largest sum among these two subarrays is max(14, 18) = 18. This is the minimum possible largest sum across all possible splits into 2 subarrays."
                    },
                    {
                        "input": "nums = [1,2,3,4,5], k = 2",
                        "output": "9",
                        "explanation": "The optimal split is [1, 2, 3] and [4, 5].  The largest sum among these two subarrays is max(6, 9) = 9.  This is the minimum achievable largest sum."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "capacity-to-ship-packages-within-d-days",
                "title": "Capacity To Ship Packages Within D Days",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "divide-chocolate",
                "title": "Divide Chocolate",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "fair-distribution-of-cookies",
                "title": "Fair Distribution of Cookies",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "subsequence-of-size-k-with-the-largest-even-sum",
                "title": "Subsequence of Size K With the Largest Even Sum",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-total-beauty-of-the-gardens",
                "title": "Maximum Total Beauty of the Gardens",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-ways-to-split-array",
                "title": "Number of Ways to Split Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "minimum-cost-to-split-an-array",
                "title": "Minimum Cost to Split an Array",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int splitArray(vector<int>& nums, int m) {\n    const int n = nums.size();\n    // dp[i][k] := min of largest sum to split first i nums into k groups\n    dp.resize(n + 1, vector<int>(m + 1, INT_MAX));\n    prefix.resize(n + 1);\n\n    partial_sum(nums.begin(), nums.end(), prefix.begin() + 1);\n    return splitArray(nums, n, m);\n  }\n\n private:\n  vector<vector<int>> dp;\n  vector<int> prefix;\n\n  int splitArray(const vector<int>& nums, int i, int k) {\n    if (k == 1)\n      return prefix[i];\n    if (dp[i][k] < INT_MAX)\n      return dp[i][k];\n\n    // Try all the possible partitions.\n    for (int j = k - 1; j < i; ++j)\n      dp[i][k] =\n          min(dp[i][k], max(splitArray(nums, j, k - 1), prefix[i] - prefix[j]));\n\n    return dp[i][k];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int splitArray(int[] nums, int m) {\n    final int n = nums.length;\n    // dp[i][k] := min of largest sum to split first i nums into k groups\n    dp = new int[n + 1][m + 1];\n    prefix = new int[n + 1];\n\n    Arrays.stream(dp).forEach(A -> Arrays.fill(A, Integer.MAX_VALUE));\n\n    for (int i = 0; i < n; ++i)\n      prefix[i + 1] = nums[i] + prefix[i];\n\n    return splitArray(nums, n, m);\n  }\n\n  private int[][] dp;\n  private int[] prefix;\n\n  private int splitArray(int[] nums, int i, int k) {\n    if (k == 1)\n      return prefix[i];\n    if (dp[i][k] < Integer.MAX_VALUE)\n      return dp[i][k];\n\n    // Try all the possible partitions.\n    for (int j = k - 1; j < i; ++j)\n      dp[i][k] = Math.min(dp[i][k], Math.max(splitArray(nums, j, k - 1), prefix[i] - prefix[j]));\n\n    return dp[i][k];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def splitArray(self, nums: List[int], m: int) -> int:\n    n = len(nums)\n    prefix = [0] + list(itertools.accumulate(nums))\n\n    # dp(i, k) := min of largest sum to split first i nums into k groups\n    @functools.lru_cache(None)\n    def dp(i: int, k: int) -> int:\n      if k == 1:\n        return prefix[i]\n\n      ans = math.inf\n\n      # Try all the possible partitions.\n      for j in range(k - 1, i):\n        ans = min(ans, max(dp(j, k - 1), prefix[i] - prefix[j]))\n\n      return ans\n\n    return dp(n, m)\n",
                "lang_text": "py"
            }
        }
    }
}