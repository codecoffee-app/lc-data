{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "725",
            "title": "Split Linked List in Parts",
            "titleSlug": "split-linked-list-in-parts",
            "content": "<p>Given the <code>head</code> of a singly linked list and an integer <code>k</code>, split the linked list into <code>k</code> consecutive linked list parts.</p>\n\n<p>The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.</p>\n\n<p>The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.</p>\n\n<p>Return <em>an array of the </em><code>k</code><em> parts</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/13/split1-lc.jpg\" style=\"width: 400px; height: 134px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3], k = 5\n<strong>Output:</strong> [[1],[2],[3],[],[]]\n<strong>Explanation:</strong>\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/13/split2-lc.jpg\" style=\"width: 600px; height: 60px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5,6,7,8,9,10], k = 3\n<strong>Output:</strong> [[1,2,3,4],[5,6,7],[8,9,10]]\n<strong>Explanation:</strong>\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 1000]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n\t<li><code>1 &lt;= k &lt;= 50</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3811,
            "dislikes": 305,
            "similarQuestions": "[{\"title\": \"Rotate List\", \"titleSlug\": \"rotate-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Odd Even Linked List\", \"titleSlug\": \"odd-even-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split a Circular Linked List\", \"titleSlug\": \"split-a-circular-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                }
            ],
            "stats": "{\"totalAccepted\": \"189.2K\", \"totalSubmission\": \"296.4K\", \"totalAcceptedRaw\": 189238, \"totalSubmissionRaw\": 296365, \"acRate\": \"63.9%\"}",
            "hints": [
                "If there are N nodes in the list, and k parts, then every part has N/k elements, except the first N%k parts have an extra one."
            ],
            "rephrased": {
                "body": "Given the head of a singly linked list and an integer k, divide the linked list into k consecutive parts. The length of each part should be as equal as possible, with no two parts differing in size by more than one. Some parts may be null. The parts should maintain the order of the input list, with earlier parts having a size greater than or equal to later parts. Return an array of the k parts.",
                "constraints": [
                    "The number of nodes in the list is in the range [0, 1000].",
                    "0 <= Node.val <= 1000",
                    "1 <= k <= 50"
                ],
                "testcases": [
                    {
                        "input": "head = [1,2,3], k = 5",
                        "output": "[[1],[2],[3],[],[]]",
                        "explanation": "The linked list is split into 5 parts. The first three parts contain the nodes 1, 2, and 3 respectively, while the last two parts are null."
                    },
                    {
                        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 3",
                        "output": "[[1,2,3,4],[5,6,7],[8,9,10]]",
                        "explanation": "The linked list is split into 3 parts, maintaining a size difference of at most 1 between the parts, and earlier parts are larger or equal in size compared to later parts."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "rotate-list",
                "title": "Rotate List",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "odd-even-linked-list",
                "title": "Odd Even Linked List",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "split-a-circular-linked-list",
                "title": "Split a Circular Linked List",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "If there are N nodes in the list, and k parts, then every part has N/k elements, except the first N%k parts have an extra one."
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<ListNode*> splitListToParts(ListNode* root, int k) {\n    vector<ListNode*> ans(k);\n    const int length = getLength(root);\n    const int subLength = length / k;\n    int remainder = length % k;\n\n    ListNode* prev = nullptr;\n    ListNode* head = root;\n\n    for (int i = 0; i < k; ++i, --remainder) {\n      ans[i] = head;\n      for (int j = 0; j < subLength + (remainder > 0); ++j) {\n        prev = head;\n        head = head->next;\n      }\n      if (prev != nullptr)\n        prev->next = nullptr;\n    }\n\n    return ans;\n  }\n\n private:\n  int getLength(ListNode* root) {\n    int length = 0;\n    for (ListNode* curr = root; curr; curr = curr->next)\n      ++length;\n    return length;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public ListNode[] splitListToParts(ListNode root, int k) {\n    ListNode[] ans = new ListNode[k];\n    final int length = getLength(root);\n    final int subLength = length / k;\n    int remainder = length % k;\n\n    ListNode prev = null;\n    ListNode head = root;\n\n    for (int i = 0; i < k; ++i, --remainder) {\n      ans[i] = head;\n      for (int j = 0; j < subLength + (remainder > 0 ? 1 : 0); ++j) {\n        prev = head;\n        head = head.next;\n      }\n      if (prev != null)\n        prev.next = null;\n    }\n\n    return ans;\n  }\n\n  private int getLength(ListNode root) {\n    int length = 0;\n    for (ListNode curr = root; curr != null; curr = curr.next)\n      ++length;\n    return length;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def splitListToParts(self, root: ListNode, k: int) -> List[ListNode]:\n    ans = [[] for _ in range(k)]\n    length = 0\n    curr = root\n    while curr:\n      length += 1\n      curr = curr.next\n    subLength = length // k\n    remainder = length % k\n\n    prev = None\n    head = root\n\n    for i in range(k):\n      ans[i] = head\n      for j in range(subLength + (1 if remainder > 0 else 0)):\n        prev = head\n        head = head.next\n      if prev:\n        prev.next = None\n      remainder -= 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}