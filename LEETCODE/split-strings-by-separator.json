{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2788",
            "title": "Split Strings by Separator",
            "titleSlug": "split-strings-by-separator",
            "content": "<p>Given an array of strings <code>words</code> and a character <code>separator</code>, <strong>split</strong> each string in <code>words</code> by <code>separator</code>.</p>\n\n<p>Return <em>an array of strings containing the new strings formed after the splits, <strong>excluding empty strings</strong>.</em></p>\n\n<p><strong>Notes</strong></p>\n\n<ul>\n\t<li><code>separator</code> is used to determine where the split should occur, but it is not included as part of the resulting strings.</li>\n\t<li>A split may result in more than two strings.</li>\n\t<li>The resulting strings must maintain the same order as they were initially given.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;one.two.three&quot;,&quot;four.five&quot;,&quot;six&quot;], separator = &quot;.&quot;\n<strong>Output:</strong> [&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;,&quot;six&quot;]\n<strong>Explanation: </strong>In this example we split as follows:\n\n&quot;one.two.three&quot; splits into &quot;one&quot;, &quot;two&quot;, &quot;three&quot;\n&quot;four.five&quot; splits into &quot;four&quot;, &quot;five&quot;\n&quot;six&quot; splits into &quot;six&quot; \n\nHence, the resulting array is [&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;,&quot;six&quot;].</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;$easy$&quot;,&quot;$problem$&quot;], separator = &quot;$&quot;\n<strong>Output:</strong> [&quot;easy&quot;,&quot;problem&quot;]\n<strong>Explanation:</strong> In this example we split as follows: \n\n&quot;$easy$&quot; splits into &quot;easy&quot; (excluding empty strings)\n&quot;$problem$&quot; splits into &quot;problem&quot; (excluding empty strings)\n\nHence, the resulting array is [&quot;easy&quot;,&quot;problem&quot;].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;|||&quot;], separator = &quot;|&quot;\n<strong>Output:</strong> []\n<strong>Explanation:</strong> In this example the resulting split of &quot;|||&quot; will contain only empty strings, so we return an empty array []. </pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li>characters in <code>words[i]</code> are either lowercase English letters or characters from the string <code>&quot;.,|$#@&quot;</code> (excluding the quotes)</li>\n\t<li><code>separator</code> is a character from the string <code>&quot;.,|$#@&quot;</code> (excluding the quotes)</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 303,
            "dislikes": 8,
            "similarQuestions": "[{\"title\": \"Split a String in Balanced Strings\", \"titleSlug\": \"split-a-string-in-balanced-strings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"52.5K\", \"totalSubmission\": \"70.9K\", \"totalAcceptedRaw\": 52473, \"totalSubmissionRaw\": 70941, \"acRate\": \"74.0%\"}",
            "hints": [
                "Iterate over each string in the given array using a loop and perform string splitting based on the provided separator character.",
                "Be sure not to return empty strings."
            ],
            "rephrased": {
                "body": "Given an array of strings `words` and a character `separator`, split each string in `words` by `separator`. Return an array of strings containing the new strings formed after the splits, excluding empty strings.\n\nNote that the `separator` is used to determine where the split should occur, but it is not included as part of the resulting strings.  A split may result in more than two strings, and the resulting strings must maintain the same order as they were initially given.",
                "constraints": [
                    "1 <= words.length <= 100",
                    "1 <= words[i].length <= 20",
                    "Characters in words[i] are either lowercase English letters or characters from the string \".,|$#@\"",
                    "separator is a character from the string \".,|$#@\""
                ],
                "testcases": [
                    {
                        "input": "words = [\"one.two.three\",\"four.five\",\"six\"], separator = \".\"",
                        "output": "[\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"]",
                        "explanation": "The string \"one.two.three\" is split into \"one\", \"two\", and \"three\". The string \"four.five\" is split into \"four\" and \"five\". The string \"six\" remains as \"six\". The resulting array is the concatenation of all these strings."
                    },
                    {
                        "input": "words = [\"$easy$\",\"$problem$\"], separator = \"$\"",
                        "output": "[\"easy\",\"problem\"]",
                        "explanation": "The string \"$easy$\" is split into \"easy\", after removing the empty strings resulting from splitting at the '$' character. The string \"$problem$\" is split into \"problem\", similarly handling empty strings. The resulting array is the concatenation of these non-empty strings."
                    },
                    {
                        "input": "words = [\"|||\"], separator = \"|\"",
                        "output": "[]",
                        "explanation": "Splitting the string \"|||\" by \"|\" results in only empty strings, which are excluded from the result. Therefore, the output is an empty array."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "split-a-string-in-balanced-strings",
                "title": "Split a String in Balanced Strings",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Iterate over each string in the given array using a loop and perform string splitting based on the provided separator character.",
            "Be sure not to return empty strings."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> splitWordsBySeparator(vector<string>& words, char separator) {\n    vector<string> ans;\n\n    for (const string& word : words) {\n      istringstream iss(word);\n      for (string word; getline(iss, word, separator);)\n        if (!word.empty())\n          ans.push_back(word);\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public List<String> splitWordsBySeparator(List<String> words, char separator) {\n    return words.stream()\n        .flatMap(word -> Arrays.stream(word.split(\"\\\\\" + separator)))\n        .filter(word -> !word.isEmpty())\n        .collect(Collectors.toList());\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def splitWordsBySeparator(self, words: List[str], separator: str) -> List[str]:\n    return [splitWord\n            for word in words\n            for splitWord in word.split(separator)\n            if splitWord]\n",
                "lang_text": "py"
            }
        }
    }
}