{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2584",
            "title": "Split the Array to Make Coprime Products",
            "titleSlug": "split-the-array-to-make-coprime-products",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code>.</p>\n\n<p>A <strong>split</strong> at an index <code>i</code> where <code>0 &lt;= i &lt;= n - 2</code> is called <strong>valid</strong> if the product of the first <code>i + 1</code> elements and the product of the remaining elements are coprime.</p>\n\n<ul>\n\t<li>For example, if <code>nums = [2, 3, 3]</code>, then a split at the index <code>i = 0</code> is valid because <code>2</code> and <code>9</code> are coprime, while a split at the index <code>i = 1</code> is not valid because <code>6</code> and <code>3</code> are not coprime. A split at the index <code>i = 2</code> is not valid because <code>i == n - 1</code>.</li>\n</ul>\n\n<p>Return <em>the smallest index </em><code>i</code><em> at which the array can be split validly or </em><code>-1</code><em> if there is no such split</em>.</p>\n\n<p>Two values <code>val1</code> and <code>val2</code> are coprime if <code>gcd(val1, val2) == 1</code> where <code>gcd(val1, val2)</code> is the greatest common divisor of <code>val1</code> and <code>val2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/14/second.PNG\" style=\"width: 450px; height: 211px;\" />\n<pre>\n<strong>Input:</strong> nums = [4,7,8,15,3,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i.\nThe only valid split is at index 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/14/capture.PNG\" style=\"width: 450px; height: 215px;\" />\n<pre>\n<strong>Input:</strong> nums = [4,7,15,8,3,5]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i.\nThere is no valid split.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 297,
            "dislikes": 111,
            "similarQuestions": "[{\"title\": \"Replace Non-Coprime Numbers in Array\", \"titleSlug\": \"replace-non-coprime-numbers-in-array\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.6K\", \"totalSubmission\": \"47.3K\", \"totalAcceptedRaw\": 10570, \"totalSubmissionRaw\": 47273, \"acRate\": \"22.4%\"}",
            "hints": [
                "Two numbers with GCD equal to 1 have no common prime divisor.",
                "Find the prime factorization of the left and right sides and check if they share a prime divisor."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` of length `n`, find the smallest index `i` where a valid split can occur. A split at index `i` (0 <= i <= n - 2) is considered valid if the product of the first `i + 1` elements and the product of the remaining elements are coprime (i.e., their greatest common divisor is 1). If no such split exists, return -1.",
                "constraints": [
                    "n == nums.length",
                    "1 <= n <= 10^4",
                    "1 <= nums[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[4,7,8,15,3,5]",
                        "output": "2",
                        "explanation": "At index 2, the product of the first 3 elements (4 * 7 * 8 = 224) and the product of the remaining elements (15 * 3 * 5 = 225) are coprime (GCD(224, 225) = 1). This is the smallest such index."
                    },
                    {
                        "input": "[4,7,15,8,3,5]",
                        "output": "-1",
                        "explanation": "There is no index at which the product of the first i + 1 elements and the product of the remaining elements are coprime."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "replace-non-coprime-numbers-in-array",
                "title": "Replace Non-Coprime Numbers in Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Two numbers with GCD equal to 1 have no common prime divisor.",
            "Find the prime factorization of the left and right sides and check if they share a prime divisor."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findValidSplit(vector<int>& nums) {\n    unordered_map<int, int> leftPrimeFactors;\n    unordered_map<int, int> rightPrimeFactors;\n\n    for (const int num : nums)\n      for (const int primeFactor : getPrimeFactors(num))\n        ++rightPrimeFactors[primeFactor];\n\n    for (int i = 0; i < nums.size() - 1; ++i) {\n      for (const int primeFactor : getPrimeFactors(nums[i])) {\n        if (--rightPrimeFactors[primeFactor] == 0) {\n          // rightPrimeFactors[primeFactor] == 0, so no need to track\n          // leftPrimeFactors[primeFactor].\n          rightPrimeFactors.erase(primeFactor);\n          leftPrimeFactors.erase(primeFactor);\n        } else {\n          // Otherwise, need to track leftPrimeFactors[primeFactor].\n          ++leftPrimeFactors[primeFactor];\n        }\n      }\n      if (leftPrimeFactors.empty())\n        return i;\n    }\n\n    return -1;\n  }\n\n private:\n  // Gets prime factors under sqrt(10^6).\n  vector<int> getPrimeFactors(int num) {\n    vector<int> primeFactors;\n    for (int divisor = 2; divisor <= min(1000, num); ++divisor)\n      if (num % divisor == 0) {\n        primeFactors.push_back(divisor);\n        while (num % divisor == 0)\n          num /= divisor;\n      }\n    // Handle the case that `num` contains a prime factor > 1000.\n    if (num > 1)\n      primeFactors.push_back(num);\n    return primeFactors;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findValidSplit(int[] nums) {\n    Map<Integer, Integer> leftPrimeFactors = new HashMap<>();\n    Map<Integer, Integer> rightPrimeFactors = new HashMap<>();\n\n    for (final int num : nums)\n      for (final int primeFactor : getPrimeFactors(num))\n        rightPrimeFactors.merge(primeFactor, 1, Integer::sum);\n\n    for (int i = 0; i < nums.length - 1; ++i) {\n      for (final int primeFactor : getPrimeFactors(nums[i])) {\n        rightPrimeFactors.merge(primeFactor, -1, Integer::sum);\n        if (rightPrimeFactors.get(primeFactor) == 0) {\n          // rightPrimeFactors[primeFactor] == 0, so no need to track\n          // leftPrimeFactors[primeFactor].\n          rightPrimeFactors.remove(primeFactor);\n          leftPrimeFactors.remove(primeFactor);\n        } else {\n          // Otherwise, need to track leftPrimeFactors[primeFactor].\n          leftPrimeFactors.merge(primeFactor, 1, Integer::sum);\n        }\n      }\n      if (leftPrimeFactors.isEmpty())\n        return i;\n    }\n\n    return -1;\n  }\n\n  // Gets prime factors under sqrt(10^6).\n  private List<Integer> getPrimeFactors(int num) {\n    List<Integer> primeFactors = new ArrayList<>();\n    for (int divisor = 2; divisor <= Math.min(1000, num); ++divisor)\n      if (num % divisor == 0) {\n        primeFactors.add(divisor);\n        while (num % divisor == 0)\n          num /= divisor;\n      }\n    // Handle the case that `num` contains a prime factor > 1000.\n    if (num > 1)\n      primeFactors.add(num);\n    return primeFactors;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findValidSplit(self, nums: List[int]) -> int:\n    leftPrimeFactors = collections.Counter()\n    rightPrimeFactors = collections.Counter()\n\n    def getPrimeFactors(num: int) -> List[int]:\n      \"\"\"Gets prime factors under sqrt(10^6).\"\"\"\n      primeFactors = []\n      for divisor in range(2, min(1000, num) + 1):\n        if num % divisor == 0:\n          primeFactors.append(divisor)\n          while num % divisor == 0:\n            num //= divisor\n      # Handle the case that `num` contains a prime factor > 1000.\n      if num > 1:\n        primeFactors.append(num)\n      return primeFactors\n\n    for num in nums:\n      for primeFactor in getPrimeFactors(num):\n        rightPrimeFactors[primeFactor] += 1\n\n    for i in range(len(nums) - 1):\n      for primeFactor in getPrimeFactors(nums[i]):\n        rightPrimeFactors[primeFactor] -= 1\n        if rightPrimeFactors[primeFactor] == 0:\n          # rightPrimeFactors[primeFactor] == 0, so no need to track\n          # leftPrimeFactors[primeFactor].\n          del rightPrimeFactors[primeFactor]\n          del leftPrimeFactors[primeFactor]\n        else:\n          # Otherwise, need to track leftPrimeFactors[primeFactor].\n          leftPrimeFactors[primeFactor] += 1\n      if not leftPrimeFactors:\n        return i\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}