{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1616",
            "title": "Split Two Strings to Make Palindrome",
            "titleSlug": "split-two-strings-to-make-palindrome",
            "content": "<p>You are given two strings <code>a</code> and <code>b</code> of the same length. Choose an index and split both strings <strong>at the same index</strong>, splitting <code>a</code> into two strings: <code>a<sub>prefix</sub></code> and <code>a<sub>suffix</sub></code> where <code>a = a<sub>prefix</sub> + a<sub>suffix</sub></code>, and splitting <code>b</code> into two strings: <code>b<sub>prefix</sub></code> and <code>b<sub>suffix</sub></code> where <code>b = b<sub>prefix</sub> + b<sub>suffix</sub></code>. Check if <code>a<sub>prefix</sub> + b<sub>suffix</sub></code> or <code>b<sub>prefix</sub> + a<sub>suffix</sub></code> forms a palindrome.</p>\n\n<p>When you split a string <code>s</code> into <code>s<sub>prefix</sub></code> and <code>s<sub>suffix</sub></code>, either <code>s<sub>suffix</sub></code> or <code>s<sub>prefix</sub></code> is allowed to be empty. For example, if <code>s = &quot;abc&quot;</code>, then <code>&quot;&quot; + &quot;abc&quot;</code>, <code>&quot;a&quot; + &quot;bc&quot;</code>, <code>&quot;ab&quot; + &quot;c&quot;</code> , and <code>&quot;abc&quot; + &quot;&quot;</code> are valid splits.</p>\n\n<p>Return <code>true</code><em> if it is possible to form</em><em> a palindrome string, otherwise return </em><code>false</code>.</p>\n\n<p><strong>Notice</strong> that&nbsp;<code>x + y</code> denotes the concatenation of strings <code>x</code> and <code>y</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;x&quot;, b = &quot;y&quot;\n<strong>Output:</strong> true\n<strong>Explaination:</strong> If either a or b are palindromes the answer is true since you can split in the following way:\na<sub>prefix</sub> = &quot;&quot;, a<sub>suffix</sub> = &quot;x&quot;\nb<sub>prefix</sub> = &quot;&quot;, b<sub>suffix</sub> = &quot;y&quot;\nThen, a<sub>prefix</sub> + b<sub>suffix</sub> = &quot;&quot; + &quot;y&quot; = &quot;y&quot;, which is a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;xbdef&quot;, b = &quot;xecab&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = &quot;ulacfd&quot;, b = &quot;jizalu&quot;\n<strong>Output:</strong> true\n<strong>Explaination:</strong> Split them at index 3:\na<sub>prefix</sub> = &quot;ula&quot;, a<sub>suffix</sub> = &quot;cfd&quot;\nb<sub>prefix</sub> = &quot;jiz&quot;, b<sub>suffix</sub> = &quot;alu&quot;\nThen, a<sub>prefix</sub> + b<sub>suffix</sub> = &quot;ula&quot; + &quot;alu&quot; = &quot;ulaalu&quot;, which is a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>a.length == b.length</code></li>\n\t<li><code>a</code> and <code>b</code> consist of lowercase English letters</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 705,
            "dislikes": 238,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.9K\", \"totalSubmission\": \"73.7K\", \"totalAcceptedRaw\": 22908, \"totalSubmissionRaw\": 73727, \"acRate\": \"31.1%\"}",
            "hints": [
                "Try finding the largest prefix form a that matches a suffix in b",
                "Try string matching"
            ],
            "rephrased": {
                "body": "Given two strings `a` and `b` of equal length, your task is to determine if it's possible to split both strings at the same index such that either the concatenation of `a_prefix` and `b_suffix` or the concatenation of `b_prefix` and `a_suffix` forms a palindrome. The split can result in an empty prefix or suffix.",
                "constraints": [
                    "1 <= a.length, b.length <= 10^5",
                    "a.length == b.length",
                    "a and b consist of lowercase English letters"
                ],
                "testcases": [
                    {
                        "input": "a = \"x\", b = \"y\"",
                        "output": "true",
                        "explanation": "If either string `a` or `b` is a palindrome, the result is true. In this case, consider splitting at index 0. `a_prefix` and `b_prefix` would be empty strings.  Therefore `a_prefix` + `b_suffix` = \"\" + \"y\" = \"y\", which is a palindrome."
                    },
                    {
                        "input": "a = \"xbdef\", b = \"xecab\"",
                        "output": "false",
                        "explanation": null
                    },
                    {
                        "input": "a = \"ulacfd\", b = \"jizalu\"",
                        "output": "true",
                        "explanation": "Split both strings at index 3. `a_prefix` becomes \"ula\", `a_suffix` becomes \"cfd\", `b_prefix` becomes \"jiz\", and `b_suffix` becomes \"alu\". Then, `a_prefix` + `b_suffix` = \"ula\" + \"alu\" = \"ulaalu\", which is a palindrome."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Try finding the largest prefix form a that matches a suffix in b",
            "Try string matching"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool checkPalindromeFormation(string a, string b) {\n    return check(a, b) || check(b, a);\n  }\n\n private:\n  bool check(const string& a, const string& b) {\n    for (int i = 0, j = a.length() - 1; i < j; ++i, --j)\n      if (a[i] != b[j])\n        // a[0:i] + a[i..j] + b[j + 1:] or\n        // a[0:i] + b[i..j] + b[j + 1:]\n        return isPalindrome(a, i, j) || isPalindrome(b, i, j);\n    return true;\n  }\n\n  bool isPalindrome(const string& s, int i, int j) {\n    while (i < j)\n      if (s[i++] != s[j--])\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public boolean checkPalindromeFormation(String a, String b) {\n    return check(a, b) || check(b, a);\n  }\n\n  private boolean check(String a, String b) {\n    for (int i = 0, j = a.length() - 1; i < j; ++i, --j)\n      if (a.charAt(i) != b.charAt(j))\n        // a[0:i] + a[i..j] + b[j + 1:] or\n        // a[0:i] + b[i..j] + b[j + 1:]\n        return isPalindrome(a, i, j) || isPalindrome(b, i, j);\n    return true;\n  }\n\n  private boolean isPalindrome(String s, int i, int j) {\n    while (i < j)\n      if (s.charAt(i++) != s.charAt(j--))\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def checkPalindromeFormation(self, a: str, b: str) -> bool:\n    return self._check(a, b) or self._check(b, a)\n\n  def _check(self, a: str, b: str) -> bool:\n    i, j = 0, len(a) - 1\n    while i < j:\n      if a[i] != b[j]:\n        # a[0:i] + a[i..j] + b[j + 1:] or\n        # a[0:i] + b[i..j] + b[j + 1:]\n        return self._isPalindrome(a, i, j) or self._isPalindrome(b, i, j)\n      i += 1\n      j -= 1\n    return True\n\n  def _isPalindrome(self, s: str, i: int, j: int) -> bool:\n    while i < j:\n      if s[i] != s[j]:\n        return False\n      i += 1\n      j -= 1\n    return True\n",
                "lang_text": "py"
            }
        }
    }
}