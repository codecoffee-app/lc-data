{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "936",
            "title": "Stamping The Sequence",
            "titleSlug": "stamping-the-sequence",
            "content": "<p>You are given two strings <code>stamp</code> and <code>target</code>. Initially, there is a string <code>s</code> of length <code>target.length</code> with all <code>s[i] == &#39;?&#39;</code>.</p>\n\n<p>In one turn, you can place <code>stamp</code> over <code>s</code> and replace every letter in the <code>s</code> with the corresponding letter from <code>stamp</code>.</p>\n\n<ul>\n\t<li>For example, if <code>stamp = &quot;abc&quot;</code> and <code>target = &quot;abcba&quot;</code>, then <code>s</code> is <code>&quot;?????&quot;</code> initially. In one turn you can:\n\n\t<ul>\n\t\t<li>place <code>stamp</code> at index <code>0</code> of <code>s</code> to obtain <code>&quot;abc??&quot;</code>,</li>\n\t\t<li>place <code>stamp</code> at index <code>1</code> of <code>s</code> to obtain <code>&quot;?abc?&quot;</code>, or</li>\n\t\t<li>place <code>stamp</code> at index <code>2</code> of <code>s</code> to obtain <code>&quot;??abc&quot;</code>.</li>\n\t</ul>\n\tNote that <code>stamp</code> must be fully contained in the boundaries of <code>s</code> in order to stamp (i.e., you cannot place <code>stamp</code> at index <code>3</code> of <code>s</code>).</li>\n</ul>\n\n<p>We want to convert <code>s</code> to <code>target</code> using <strong>at most</strong> <code>10 * target.length</code> turns.</p>\n\n<p>Return <em>an array of the index of the left-most letter being stamped at each turn</em>. If we cannot obtain <code>target</code> from <code>s</code> within <code>10 * target.length</code> turns, return an empty array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stamp = &quot;abc&quot;, target = &quot;ababc&quot;\n<strong>Output:</strong> [0,2]\n<strong>Explanation:</strong> Initially s = &quot;?????&quot;.\n- Place stamp at index 0 to get &quot;abc??&quot;.\n- Place stamp at index 2 to get &quot;ababc&quot;.\n[1,0,2] would also be accepted as an answer, as well as some other answers.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stamp = &quot;abca&quot;, target = &quot;aabcaca&quot;\n<strong>Output:</strong> [3,0,1]\n<strong>Explanation:</strong> Initially s = &quot;???????&quot;.\n- Place stamp at index 3 to get &quot;???abca&quot;.\n- Place stamp at index 0 to get &quot;abcabca&quot;.\n- Place stamp at index 1 to get &quot;aabcaca&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li>\n\t<li><code>stamp</code> and <code>target</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1529,
            "dislikes": 219,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Queue",
                    "slug": "queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"57.6K\", \"totalSubmission\": \"92.1K\", \"totalAcceptedRaw\": 57632, \"totalSubmissionRaw\": 92113, \"acRate\": \"62.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two strings, `stamp` and `target`. Initially, you have a string `s` of the same length as `target`, filled with question marks ('?'). In each turn, you can place the `stamp` over `s` at any valid index (where the stamp fits entirely within `s`) and replace the characters in `s` with the corresponding characters from `stamp`. The goal is to transform `s` into `target` using at most `10 * target.length` turns.\n\nYour task is to return a list of the starting indices where the `stamp` was placed in each turn to achieve the transformation from initial `s` to `target`. If it's impossible to achieve the transformation within the turn limit, return an empty list. Multiple valid solutions might exist; you can return any one of them.",
                "constraints": [
                    "1 <= stamp.length <= target.length <= 1000",
                    "`stamp` and `target` consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": {
                            "stamp": "abc",
                            "target": "ababc"
                        },
                        "output": "[0,2]",
                        "explanation": "Initially s = \"?????\".\n- Place stamp at index 0 to get \"abc??\".\n- Place stamp at index 2 to get \"ababc\".\n[1,0,2] would also be accepted as an answer, as well as some other answers."
                    },
                    {
                        "input": {
                            "stamp": "abca",
                            "target": "aabcaca"
                        },
                        "output": "[3,0,1]",
                        "explanation": "Initially s = \"???????\".\n- Place stamp at index 3 to get \"???abca\".\n- Place stamp at index 0 to get \"abcabca\".\n- Place stamp at index 1 to get \"aabcaca\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Queue",
                "slug": "queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> movesToStamp(string stamp, string target) {\n    vector<int> ans;\n    // stamped[i] := true if we already stamped target by stamp on index i\n    vector<bool> stamped(target.length());\n    int stampedCount = 0;  // Out goal is to make stampedCount = target.length()\n\n    while (stampedCount < target.length()) {\n      bool isStamped = false;\n      // Try to stamp target[i..i + stamp.length()) for each index\n      for (int i = 0; i <= target.length() - stamp.length(); ++i) {\n        if (stamped[i])\n          continue;\n        const int stampified = stampify(stamp, target, i);\n        if (stampified == 0)\n          continue;\n        stampedCount += stampified;\n        isStamped = true;\n        stamped[i] = true;\n        ans.push_back(i);\n      }\n      // After trying stamp each index, we can't find a valid stamp\n      if (!isStamped)\n        return {};\n    }\n\n    reverse(ans.begin(), ans.end());\n    return ans;\n  }\n\n private:\n  // Stamp target[i..i + stamp.length()) and return # of newly stamped chars\n  // E.g. stampify(\"abc\", \"ababc\", 2) returns 3 because target becomes \"ab***\"\n  int stampify(const string& stamp, string& target, int s) {\n    int stampified = stamp.length();\n\n    for (int i = 0; i < stamp.length(); ++i)\n      if (target[s + i] == '*')  // Already stamped\n        --stampified;\n      else if (target[s + i] != stamp[i])\n        return 0;  // We can't stamp on index i\n\n    if (stampified > 0)\n      fill(target.begin() + s, target.begin() + s + stamp.length(), '*');\n\n    return stampified;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] movesToStamp(String stamp, String target) {\n    List<Integer> ans = new ArrayList<>();\n    char[] T = target.toCharArray();\n    // stamped[i] := true if we already stamped target by stamp on index i\n    boolean[] stamped = new boolean[target.length()];\n    int stampedCount = 0; // Out goal is to make stampedCount = target.length()\n\n    while (stampedCount < T.length) {\n      boolean isStamped = false;\n      // Try to stamp target[i..i + stamp.length()) for each index\n      for (int i = 0; i <= T.length - stamp.length(); ++i) {\n        if (stamped[i])\n          continue;\n        final int stampified = stampify(stamp, T, i);\n        if (stampified == 0)\n          continue;\n        stampedCount += stampified;\n        isStamped = true;\n        stamped[i] = true;\n        ans.add(i);\n      }\n      // After trying stamp each index, we can't find a valid stamp\n      if (!isStamped)\n        return new int[] {};\n    }\n\n    Collections.reverse(ans);\n    return ans.stream().mapToInt(Integer::intValue).toArray();\n  }\n\n  // Stamp target[i..i + stamp.length()) and return # of newly stamped chars\n  // E.g. stampify(\"abc\", \"ababc\", 2) returns 3 because target becomes \"ab***\"\n  private int stampify(final String stamp, char[] T, int s) {\n    int stampified = stamp.length();\n\n    for (int i = 0; i < stamp.length(); ++i)\n      if (T[s + i] == '*') // Already stamped\n        --stampified;\n      else if (T[s + i] != stamp.charAt(i))\n        return 0; // We can't stamp on index i\n\n    Arrays.fill(T, s, s + stamp.length(), '*');\n\n    return stampified;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def movesToStamp(self, stamp: str, target: str) -> List[int]:\n    def stampify(s: int) -> int:\n      stampified = len(stamp)\n\n      for i, st in enumerate(stamp):\n        if target[s + i] == '*':\n          stampified -= 1\n        elif target[s + i] != st:\n          return 0\n\n      for i in range(s, s + len(stamp)):\n        target[i] = '*'\n\n      return stampified\n\n    ans = []\n    target = list(target)\n    stamped = [False] * len(target)\n    stampedCount = 0\n\n    while stampedCount < len(target):\n      isStamped = False\n      for i in range(len(target) - len(stamp) + 1):\n        if stamped[i]:\n          continue\n        stampified = stampify(i)\n        if stampified == 0:\n          continue\n        stampedCount += stampified\n        isStamped = True\n        stamped[i] = True\n        ans.append(i)\n      if not isStamped:\n        return []\n\n    return ans[::-1]\n",
                "lang_text": "py"
            }
        }
    }
}