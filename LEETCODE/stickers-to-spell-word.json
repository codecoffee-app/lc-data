{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "691",
            "title": "Stickers to Spell Word",
            "titleSlug": "stickers-to-spell-word",
            "content": "<p>We are given <code>n</code> different types of <code>stickers</code>. Each sticker has a lowercase English word on it.</p>\n\n<p>You would like to spell out the given string <code>target</code> by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.</p>\n\n<p>Return <em>the minimum number of stickers that you need to spell out </em><code>target</code>. If the task is impossible, return <code>-1</code>.</p>\n\n<p><strong>Note:</strong> In all test cases, all words were chosen randomly from the <code>1000</code> most common US English words, and <code>target</code> was chosen as a concatenation of two random words.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stickers = [&quot;with&quot;,&quot;example&quot;,&quot;science&quot;], target = &quot;thehat&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nWe can use 2 &quot;with&quot; stickers, and 1 &quot;example&quot; sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target &quot;thehat&quot;.\nAlso, this is the minimum number of stickers necessary to form the target string.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stickers = [&quot;notice&quot;,&quot;possible&quot;], target = &quot;basicbasic&quot;\n<strong>Output:</strong> -1\nExplanation:\nWe cannot form the target &quot;basicbasic&quot; from cutting letters from the given stickers.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == stickers.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= stickers[i].length &lt;= 10</code></li>\n\t<li><code>1 &lt;= target.length &lt;= 15</code></li>\n\t<li><code>stickers[i]</code> and <code>target</code> consist of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1129,
            "dislikes": 87,
            "similarQuestions": "[{\"title\": \"Ransom Note\", \"titleSlug\": \"ransom-note\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"51.1K\", \"totalSubmission\": \"108.1K\", \"totalAcceptedRaw\": 51116, \"totalSubmissionRaw\": 108051, \"acRate\": \"47.3%\"}",
            "hints": [
                "We want to perform an exhaustive search, but we need to speed it up based on the input data being random.  \r\n\r\nFor all stickers, we can ignore any letters that are not in the target word.  \r\n\r\nWhen our candidate answer won't be smaller than an answer we have already found, we can stop searching this path.  \r\n\r\nWhen a sticker dominates another, we shouldn't include the dominated sticker in our sticker collection.  [Here, we say a sticker `A` dominates `B` if `A.count(letter) >= B.count(letter)` for all letters.]"
            ],
            "rephrased": {
                "body": "Given a collection of stickers, where each sticker has a lowercase English word on it, the goal is to determine the minimum number of stickers required to spell out a given target string.  You can cut individual letters from the stickers and rearrange them. Each sticker can be used multiple times, and you have an unlimited supply of each.",
                "constraints": [
                    "n == stickers.length",
                    "1 <= n <= 50",
                    "1 <= stickers[i].length <= 10",
                    "1 <= target.length <= 15",
                    "stickers[i] and target consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"",
                        "output": "3",
                        "explanation": "We can use 2 \"with\" stickers and 1 \"example\" sticker. After cutting and rearranging the letters from these stickers, we can form the target string \"thehat\". This is the minimum number of stickers required."
                    },
                    {
                        "input": "stickers = [\"notice\",\"possible\"], target = \"basicbasic\"",
                        "output": "-1",
                        "explanation": "We cannot form the target string \"basicbasic\" by cutting letters from the provided stickers."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "ransom-note",
                "title": "Ransom Note",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We want to perform an exhaustive search, but we need to speed it up based on the input data being random.  \r\n\r\nFor all stickers, we can ignore any letters that are not in the target word.  \r\n\r\nWhen our candidate answer won't be smaller than an answer we have already found, we can stop searching this path.  \r\n\r\nWhen a sticker dominates another, we shouldn't include the dominated sticker in our sticker collection.  [Here, we say a sticker `A` dominates `B` if `A.count(letter) >= B.count(letter)` for all letters.]"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minStickers(vector<string>& stickers, string target) {\n    const int n = target.size();\n    const int maxMask = 1 << n;\n    // dp[i] := min # of stickers to spell out i, where i is the bit mask of\n    // target.\n    vector<int> dp(maxMask, INT_MAX);\n    dp[0] = 0;\n\n    for (int mask = 0; mask < maxMask; ++mask) {\n      if (dp[mask] == INT_MAX)\n        continue;\n      // Try to expand from `mask` by using each sticker.\n      for (const string& sticker : stickers) {\n        int superMask = mask;\n        for (const char c : sticker)\n          for (int i = 0; i < n; ++i)\n            // Try to apply it on a missing char.\n            if (c == target[i] && !(superMask >> i & 1)) {\n              superMask |= 1 << i;\n              break;\n            }\n        dp[superMask] = min(dp[superMask], dp[mask] + 1);\n      }\n    }\n\n    return dp.back() == INT_MAX ? -1 : dp.back();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minStickers(String[] stickers, String target) {\n    final int n = target.length();\n    final int maxMask = 1 << n;\n    // dp[i] := min # of stickers to spell out i, where i is the bit mask of\n    // target.\n    int[] dp = new int[maxMask];\n    Arrays.fill(dp, Integer.MAX_VALUE);\n    dp[0] = 0;\n\n    for (int mask = 0; mask < maxMask; ++mask) {\n      if (dp[mask] == Integer.MAX_VALUE)\n        continue;\n      // Try to expand from `mask` by using each sticker.\n      for (final String sticker : stickers) {\n        int superMask = mask;\n        for (final char c : sticker.toCharArray())\n          for (int i = 0; i < n; ++i)\n            // Try to apply it on a missing char.\n            if (c == target.charAt(i) && (superMask >> i & 1) == 0) {\n              superMask |= 1 << i;\n              break;\n            }\n        dp[superMask] = Math.min(dp[superMask], dp[mask] + 1);\n      }\n    }\n\n    return dp[maxMask - 1] == Integer.MAX_VALUE ? -1 : dp[maxMask - 1];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minStickers(self, stickers: List[str], target: str) -> int:\n    n = len(target)\n    maxMask = 1 << n\n    # dp[i] := min # of stickers to spell out i, where i is the bit mask of\n    # target.\n    dp = [math.inf] * maxMask\n    dp[0] = 0\n\n    for mask in range(maxMask):\n      if dp[mask] == math.inf:\n        continue\n      # Try to expand from `mask` by using each sticker.\n      for sticker in stickers:\n        superMask = mask\n        for c in sticker:\n          for i, t in enumerate(target):\n            # Try to apply it on a missing char.\n            if c == t and not (superMask >> i & 1):\n              superMask |= 1 << i\n              break\n        dp[superMask] = min(dp[superMask], dp[mask] + 1)\n\n    return -1 if dp[-1] == math.inf else dp[-1]\n",
                "lang_text": "py"
            }
        }
    }
}