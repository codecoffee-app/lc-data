{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1406",
            "title": "Stone Game III",
            "titleSlug": "stone-game-iii",
            "content": "<p>Alice and Bob continue their games with piles of stones. There are several stones <strong>arranged in a row</strong>, and each stone has an associated value which is an integer given in the array <code>stoneValue</code>.</p>\n\n<p>Alice and Bob take turns, with Alice starting first. On each player&#39;s turn, that player can take <code>1</code>, <code>2</code>, or <code>3</code> stones from the <strong>first</strong> remaining stones in the row.</p>\n\n<p>The score of each player is the sum of the values of the stones taken. The score of each player is <code>0</code> initially.</p>\n\n<p>The objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.</p>\n\n<p>Assume Alice and Bob <strong>play optimally</strong>.</p>\n\n<p>Return <code>&quot;Alice&quot;</code><em> if Alice will win, </em><code>&quot;Bob&quot;</code><em> if Bob will win, or </em><code>&quot;Tie&quot;</code><em> if they will end the game with the same score</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stoneValue = [1,2,3,7]\n<strong>Output:</strong> &quot;Bob&quot;\n<strong>Explanation:</strong> Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stoneValue = [1,2,3,-9]\n<strong>Output:</strong> &quot;Alice&quot;\n<strong>Explanation:</strong> Alice must choose all the three piles at the first move to win and leave Bob with negative score.\nIf Alice chooses one pile her score will be 1 and the next move Bob&#39;s score becomes 5. In the next move, Alice will take the pile with value = -9 and lose.\nIf Alice chooses two piles her score will be 3 and the next move Bob&#39;s score becomes 3. In the next move, Alice will take the pile with value = -9 and also lose.\nRemember that both play optimally so here Alice will choose the scenario that makes her win.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> stoneValue = [1,2,3,6]\n<strong>Output:</strong> &quot;Tie&quot;\n<strong>Explanation:</strong> Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= stoneValue.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= stoneValue[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2122,
            "dislikes": 68,
            "similarQuestions": "[{\"title\": \"Stone Game V\", \"titleSlug\": \"stone-game-v\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game VI\", \"titleSlug\": \"stone-game-vi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game VII\", \"titleSlug\": \"stone-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game VIII\", \"titleSlug\": \"stone-game-viii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game IX\", \"titleSlug\": \"stone-game-ix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"84.8K\", \"totalSubmission\": \"131.5K\", \"totalAcceptedRaw\": 84788, \"totalSubmissionRaw\": 131469, \"acRate\": \"64.5%\"}",
            "hints": [
                "The game can be mapped to minmax game. Alice tries to maximize the total score and Bob tries to minimize it.",
                "Use dynamic programming to simulate the game. If the total score was 0 the game is \"Tie\", and if it has positive value then \"Alice\" wins, otherwise \"Bob\" wins."
            ],
            "rephrased": {
                "body": "Alice and Bob are playing a game with a row of stones. Each stone has an integer value represented by the `stoneValue` array. Players take turns, with Alice going first. On each turn, a player can take 1, 2, or 3 stones from the beginning of the row. The player's score is the sum of the values of the stones they take, starting from 0. The game continues until all stones are taken.\n\nThe goal is to have the highest score. If Alice wins, return \"Alice\". If Bob wins, return \"Bob\". If they tie, return \"Tie\". Both players play optimally to maximize their score.",
                "constraints": [
                    "1 <= stoneValue.length <= 5 * 10^4",
                    "-1000 <= stoneValue[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,7]",
                        "output": "Bob",
                        "explanation": "Alice's best move is to take the first three stones for a score of 6. Bob then takes the remaining stone with a value of 7, resulting in Bob winning."
                    },
                    {
                        "input": "[1,2,3,-9]",
                        "output": "Alice",
                        "explanation": "Alice must take the first three stones in the first move to obtain a positive score of 6. This will leave Bob with a negative value which makes her win. If Alice takes fewer stones on her first turn, Bob can ensure a higher score, leading to Alice's loss. Since both play optimally, Alice chooses the moves that ensure her win."
                    },
                    {
                        "input": "[1,2,3,6]",
                        "output": "Tie",
                        "explanation": "Alice cannot win this game. The only way for Alice to avoid losing is to take the first three stones on her first turn, resulting in a score of 6. Bob will then take the remaining stone and achieve a score of 6 which leads to a tie."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-v",
                "title": "Stone Game V",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-vi",
                "title": "Stone Game VI",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-vii",
                "title": "Stone Game VII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-viii",
                "title": "Stone Game VIII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-ix",
                "title": "Stone Game IX",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The game can be mapped to minmax game. Alice tries to maximize the total score and Bob tries to minimize it.",
            "Use dynamic programming to simulate the game. If the total score was 0 the game is \"Tie\", and if it has positive value then \"Alice\" wins, otherwise \"Bob\" wins."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string stoneGameIII(vector<int>& stoneValue) {\n    // dp[i] := max \"relative score\" Alice can make w/ stoneValue[i:]\n    dp.resize(stoneValue.size(), INT_MIN);\n\n    const int score = stoneGameIII(stoneValue, 0);\n    return score > 0 ? \"Alice\" : score < 0 ? \"Bob\" : \"Tie\";\n  }\n\n private:\n  vector<int> dp;\n\n  int stoneGameIII(const vector<int>& stoneValue, int i) {\n    if (i == stoneValue.size())\n      return 0;\n    if (dp[i] > INT_MIN)\n      return dp[i];\n\n    int sum = 0;\n    for (int j = i; j < i + 3 && j < stoneValue.size(); ++j) {\n      sum += stoneValue[j];\n      dp[i] = max(dp[i], sum - stoneGameIII(stoneValue, j + 1));\n    }\n\n    return dp[i];\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String stoneGameIII(int[] stoneValue) {\n    // dp[i] := max \"relative score\" Alice can make w/ stoneValue[i:]\n    dp = new int[stoneValue.length];\n    Arrays.fill(dp, Integer.MIN_VALUE);\n\n    final int score = stoneGameIII(stoneValue, 0);\n    return score > 0 ? \"Alice\" : score < 0 ? \"Bob\" : \"Tie\";\n  }\n\n  private int[] dp;\n\n  private int stoneGameIII(int[] stoneValue, int i) {\n    if (i == stoneValue.length)\n      return 0;\n    if (dp[i] > Integer.MIN_VALUE)\n      return dp[i];\n\n    int sum = 0;\n    for (int j = i; j < i + 3 && j < stoneValue.length; ++j) {\n      sum += stoneValue[j];\n      dp[i] = Math.max(dp[i], sum - stoneGameIII(stoneValue, j + 1));\n    }\n\n    return dp[i];\n  };\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def stoneGameIII(self, stoneValue: List[int]) -> str:\n    # Max \"relative score\" Alice can make w/ stoneValue[i:]\n    @functools.lru_cache(None)\n    def dp(i: int) -> int:\n      if i == len(stoneValue):\n        return 0\n\n      res = -math.inf\n      summ = 0\n\n      for j in range(i, i + 3):\n        if j == len(stoneValue):\n          break\n        summ += stoneValue[j]\n        res = max(res, summ - dp(j + 1))\n\n      return res\n\n    score = dp(0)\n    if score == 0:\n      return 'Tie'\n    return 'Alice' if score > 0 else 'Bob'\n",
                "lang_text": "py"
            }
        }
    }
}