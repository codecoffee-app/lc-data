{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1510",
            "title": "Stone Game IV",
            "titleSlug": "stone-game-iv",
            "content": "<p>Alice and Bob take turns playing a game, with Alice starting first.</p>\n\n<p>Initially, there are <code>n</code> stones in a pile. On each player&#39;s turn, that player makes a <em>move</em> consisting of removing <strong>any</strong> non-zero <strong>square number</strong> of stones in the pile.</p>\n\n<p>Also, if a player cannot make a move, he/she loses the game.</p>\n\n<p>Given a positive integer <code>n</code>, return <code>true</code> if and only if Alice wins the game otherwise return <code>false</code>, assuming both players play optimally.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n<strong>Explanation: </strong>Alice can remove 1 stone winning the game because Bob doesn&#39;t have any moves.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> false\n<strong>Explanation: </strong>Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -&gt; 1 -&gt; 0).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> true\n<strong>Explanation:</strong> n is already a perfect square, Alice can win with one move, removing 4 stones (4 -&gt; 0).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1564,
            "dislikes": 68,
            "similarQuestions": "[{\"title\": \"Stone Game V\", \"titleSlug\": \"stone-game-v\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game VI\", \"titleSlug\": \"stone-game-vi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game VII\", \"titleSlug\": \"stone-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game VIII\", \"titleSlug\": \"stone-game-viii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game IX\", \"titleSlug\": \"stone-game-ix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"69.6K\", \"totalSubmission\": \"116.5K\", \"totalAcceptedRaw\": 69640, \"totalSubmissionRaw\": 116538, \"acRate\": \"59.8%\"}",
            "hints": [
                "Use dynamic programming to keep track of winning and losing states. Given some number of stones, Alice can win if she can force Bob onto a losing state."
            ],
            "rephrased": {
                "body": "Alice and Bob are playing a game. They take turns, with Alice going first.  Initially, there are 'n' stones in a pile. On each turn, a player must remove a non-zero square number of stones from the pile. The player who cannot make a move loses. Determine if Alice wins the game, assuming both players play optimally.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "true",
                        "explanation": "Alice removes 1 stone. Bob has no moves and loses."
                    },
                    {
                        "input": "2",
                        "output": "false",
                        "explanation": "Alice removes 1 stone, leaving 1. Bob removes the remaining stone and wins."
                    },
                    {
                        "input": "4",
                        "output": "true",
                        "explanation": "Alice removes 4 stones, winning immediately because Bob has no moves."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-v",
                "title": "Stone Game V",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-vi",
                "title": "Stone Game VI",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-vii",
                "title": "Stone Game VII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-viii",
                "title": "Stone Game VIII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-ix",
                "title": "Stone Game IX",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use dynamic programming to keep track of winning and losing states. Given some number of stones, Alice can win if she can force Bob onto a losing state."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool winnerSquareGame(int n) {\n    // dp[i] := the winning result for n = i\n    vector<bool> dp(n + 1);\n\n    for (int i = 1; i <= n; ++i)\n      for (int j = 1; j * j <= i; ++j)\n        if (!dp[i - j * j]) {  // Remove j^2 stones make the opponent lose\n          dp[i] = true;        // So we win\n          break;\n        }\n\n    return dp[n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean winnerSquareGame(int n) {\n    // dp[i] := the winning result for n = i\n    boolean[] dp = new boolean[n + 1];\n\n    for (int i = 1; i <= n; ++i)\n      for (int j = 1; j * j <= i; ++j)\n        if (!dp[i - j * j]) { // Remove j^2 stones make the opponent lose\n          dp[i] = true;       // So we win\n          break;\n        }\n\n    return dp[n];\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}