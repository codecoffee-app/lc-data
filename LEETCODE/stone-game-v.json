{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1563",
            "title": "Stone Game V",
            "titleSlug": "stone-game-v",
            "content": "<p>There are several stones <strong>arranged in a row</strong>, and each stone has an associated value which is an integer given in the array <code>stoneValue</code>.</p>\n\n<p>In each round of the game, Alice divides the row into <strong>two non-empty rows</strong> (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice&#39;s score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.</p>\n\n<p>The game ends when there is only <strong>one stone remaining</strong>. Alice&#39;s is initially <strong>zero</strong>.</p>\n\n<p>Return <i>the maximum score that Alice can obtain</i>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stoneValue = [6,2,3,4,5,5]\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice&#39;s score is now 11.\nIn the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice&#39;s score becomes 16 (11 + 5).\nThe last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice&#39;s score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stoneValue = [7,7,7,7,7,7,7]\n<strong>Output:</strong> 28\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> stoneValue = [4]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= stoneValue.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= stoneValue[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 627,
            "dislikes": 81,
            "similarQuestions": "[{\"title\": \"Stone Game\", \"titleSlug\": \"stone-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game II\", \"titleSlug\": \"stone-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game III\", \"titleSlug\": \"stone-game-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game IV\", \"titleSlug\": \"stone-game-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game VI\", \"titleSlug\": \"stone-game-vi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game VII\", \"titleSlug\": \"stone-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game VIII\", \"titleSlug\": \"stone-game-viii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game IX\", \"titleSlug\": \"stone-game-ix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.6K\", \"totalSubmission\": \"45.8K\", \"totalAcceptedRaw\": 18598, \"totalSubmissionRaw\": 45764, \"acRate\": \"40.6%\"}",
            "hints": [
                "We need to try all possible divisions for the current row to get the max score.",
                "As calculating all possible divisions will lead us to calculate some sub-problems more than once, we need to think of dynamic programming."
            ],
            "rephrased": {
                "body": "A row of stones, each with an integer value from `stoneValue`, is given. Alice and Bob play a game where Alice divides the row into two non-empty rows in each round. Bob calculates the sum of values for each row and discards the row with the maximum sum. Alice's score increases by the sum of the remaining row. If the sums are equal, Alice chooses the row to discard. The game ends when only one stone remains. The goal is to determine the maximum score Alice can achieve.",
                "constraints": [
                    "1 <= stoneValue.length <= 500",
                    "1 <= stoneValue[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[6,2,3,4,5,5]",
                        "output": "18",
                        "explanation": "In the first round, Alice divides the row into [6,2,3] and [4,5,5]. The left row has a sum of 11, and the right row has a sum of 14. Bob discards the right row, and Alice's score becomes 11.\nIn the second round, Alice divides the row into [6] and [2,3]. Bob discards the left row, and Alice's score becomes 16 (11 + 5).\nIn the last round, Alice divides the row into [2] and [3]. Bob discards the right row, and Alice's score becomes 18 (16 + 2). The game ends with one stone remaining."
                    },
                    {
                        "input": "[7,7,7,7,7,7,7]",
                        "output": "28",
                        "explanation": null
                    },
                    {
                        "input": "[4]",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game",
                "title": "Stone Game",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-ii",
                "title": "Stone Game II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-iii",
                "title": "Stone Game III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-iv",
                "title": "Stone Game IV",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-vi",
                "title": "Stone Game VI",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-vii",
                "title": "Stone Game VII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-viii",
                "title": "Stone Game VIII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-ix",
                "title": "Stone Game IX",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "We need to try all possible divisions for the current row to get the max score.",
            "As calculating all possible divisions will lead us to calculate some sub-problems more than once, we need to think of dynamic programming."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int stoneGameV(vector<int>& stoneValue) {\n    const int n = stoneValue.size();\n    // dp[i][j] := max score that Alice can obtain from stoneValue[i..j]\n    dp.resize(n, vector<int>(n, INT_MIN));\n    prefix.resize(n + 1);\n\n    partial_sum(stoneValue.begin(), stoneValue.end(), prefix.begin() + 1);\n    return stoneGameV(stoneValue, 0, n - 1);\n  }\n\n private:\n  vector<vector<int>> dp;\n  vector<int> prefix;\n\n  int stoneGameV(const vector<int>& stoneValue, int i, int j) {\n    if (i == j)\n      return 0;\n    if (dp[i][j] > 0)\n      return dp[i][j];\n\n    // Try all possible partitions\n    for (int p = i; p < j; ++p) {\n      // Sum of stoneValue[i..p]\n      const int leftSum = prefix[p + 1] - prefix[i];\n      const int throwRight = leftSum + stoneGameV(stoneValue, i, p);\n      // Sum of stoneValue[p + 1..j]\n      const int rightSum = prefix[j + 1] - prefix[p + 1];\n      const int throwLeft = rightSum + stoneGameV(stoneValue, p + 1, j);\n      if (leftSum < rightSum)  // Bob throws right row\n        dp[i][j] = max(dp[i][j], throwRight);\n      else if (leftSum > rightSum)  // Bob throws left row\n        dp[i][j] = max(dp[i][j], throwLeft);\n      else  // Alice decide which row to throw\n        dp[i][j] = max({dp[i][j], throwLeft, throwRight});\n    }\n\n    return dp[i][j];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int stoneGameV(int[] stoneValue) {\n    final int n = stoneValue.length;\n    // dp[i][j] := max score that Alice can obtain from stoneValue[i..j]\n    dp = new int[n][n];\n    Arrays.stream(dp).forEach(row -> Arrays.fill(row, Integer.MIN_VALUE));\n    prefix = new int[n + 1];\n\n    for (int i = 0; i < n; ++i)\n      prefix[i + 1] = stoneValue[i] + prefix[i];\n\n    return stoneGameV(stoneValue, 0, n - 1);\n  }\n\n  private int[][] dp;\n  private int[] prefix;\n\n  private int stoneGameV(int[] stoneValue, int i, int j) {\n    if (i == j)\n      return 0;\n    if (dp[i][j] > 0)\n      return dp[i][j];\n\n    // Try all possible partitions\n    for (int p = i; p < j; ++p) {\n      // Sum of stoneValue[i..p]\n      final int leftSum = prefix[p + 1] - prefix[i];\n      final int throwRight = leftSum + stoneGameV(stoneValue, i, p);\n      // Sum of stoneValue[p + 1..j]\n      final int rightSum = prefix[j + 1] - prefix[p + 1];\n      final int throwLeft = rightSum + stoneGameV(stoneValue, p + 1, j);\n      if (leftSum < rightSum) // Bob throws right row\n        dp[i][j] = Math.max(dp[i][j], throwRight);\n      else if (leftSum > rightSum) // Bob throws left row\n        dp[i][j] = Math.max(dp[i][j], throwLeft);\n      else // Alice decide which row to throw\n        dp[i][j] = Math.max(dp[i][j], Math.max(throwLeft, throwRight));\n    }\n\n    return dp[i][j];\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}