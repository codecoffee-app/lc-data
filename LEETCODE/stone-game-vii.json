{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1690",
            "title": "Stone Game VII",
            "titleSlug": "stone-game-vii",
            "content": "<p>Alice and Bob take turns playing a game, with <strong>Alice starting first</strong>.</p>\n\n<p>There are <code>n</code> stones arranged in a row. On each player&#39;s turn, they can <strong>remove</strong> either the leftmost stone or the rightmost stone from the row and receive points equal to the <strong>sum</strong> of the remaining stones&#39; values in the row. The winner is the one with the higher score when there are no stones left to remove.</p>\n\n<p>Bob found that he will always lose this game (poor Bob, he always loses), so he decided to <strong>minimize the score&#39;s difference</strong>. Alice&#39;s goal is to <strong>maximize the difference</strong> in the score.</p>\n\n<p>Given an array of integers <code>stones</code> where <code>stones[i]</code> represents the value of the <code>i<sup>th</sup></code> stone <strong>from the left</strong>, return <em>the <strong>difference</strong> in Alice and Bob&#39;s score if they both play <strong>optimally</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [5,3,1,4,2]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> \n- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].\n- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].\n- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].\n- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].\n- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].\nThe score difference is 18 - 12 = 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [7,90,5,1,100,10,10,2]\n<strong>Output:</strong> 122</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == stones.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= stones[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 960,
            "dislikes": 160,
            "similarQuestions": "[{\"title\": \"Stone Game\", \"titleSlug\": \"stone-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game II\", \"titleSlug\": \"stone-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game III\", \"titleSlug\": \"stone-game-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game IV\", \"titleSlug\": \"stone-game-iv\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game V\", \"titleSlug\": \"stone-game-v\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game VI\", \"titleSlug\": \"stone-game-vi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Score from Performing Multiplication Operations\", \"titleSlug\": \"maximum-score-from-performing-multiplication-operations\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game VIII\", \"titleSlug\": \"stone-game-viii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game IX\", \"titleSlug\": \"stone-game-ix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"33.9K\", \"totalSubmission\": \"58.5K\", \"totalAcceptedRaw\": 33921, \"totalSubmissionRaw\": 58525, \"acRate\": \"58.0%\"}",
            "hints": [
                "The constraints are small enough for an N^2 solution.",
                "Try using dynamic programming."
            ],
            "rephrased": {
                "body": "Alice and Bob are playing a game with a row of `n` stones. Alice goes first. On each turn, a player removes either the leftmost or rightmost stone and gains points equal to the sum of the remaining stones' values. The player with the higher score at the end wins. Bob, knowing he will always lose, aims to minimize the difference in scores, while Alice tries to maximize it. Given an array `stones` representing the stones' values, return the difference between Alice's and Bob's scores if they both play optimally.",
                "constraints": [
                    "n == stones.length",
                    "2 <= n <= 1000",
                    "1 <= stones[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[5,3,1,4,2]",
                        "output": "6",
                        "explanation": "Alice removes 2 (score: 13, stones: [5,3,1,4]). Bob removes 5 (score: 8, stones: [3,1,4]). Alice removes 3 (score: 5, stones: [1,4]). Bob removes 1 (score: 4, stones: [4]). Alice removes 4 (score: 0, stones: []). Alice's total score is 13 + 5 + 0 = 18. Bob's total score is 8 + 4 = 12. The difference is 18 - 12 = 6."
                    },
                    {
                        "input": "[7,90,5,1,100,10,10,2]",
                        "output": "122",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game",
                "title": "Stone Game",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-ii",
                "title": "Stone Game II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-iii",
                "title": "Stone Game III",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-iv",
                "title": "Stone Game IV",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-v",
                "title": "Stone Game V",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-vi",
                "title": "Stone Game VI",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-score-from-performing-multiplication-operations",
                "title": "Maximum Score from Performing Multiplication Operations",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-viii",
                "title": "Stone Game VIII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-ix",
                "title": "Stone Game IX",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The constraints are small enough for an N^2 solution.",
            "Try using dynamic programming."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int stoneGameVII(vector<int>& stones) {\n    const int n = stones.size();\n    // dp[i][j] := max score you can get more than your opponent in stones[i..j]\n    dp.resize(n, vector<int>(n));\n    prefix.resize(n + 1);\n\n    partial_sum(stones.begin(), stones.end(), prefix.begin() + 1);\n    return stoneGameVII(stones, 0, n - 1);\n  }\n\n private:\n  vector<vector<int>> dp;\n  vector<int> prefix;\n\n  int stoneGameVII(const vector<int>& stones, int i, int j) {\n    if (i == j)\n      return 0;\n    if (dp[i][j] > 0)\n      return dp[i][j];\n\n    dp[i][j] =\n        max({dp[i][j],\n             // Remove stones[i], so get sum of stones[i + 1..j]\n             prefix[j + 1] - prefix[i + 1] - stoneGameVII(stones, i + 1, j),\n             // Remove stones[j], so get sum of stones[i..j - 1]\n             prefix[j] - prefix[i] - stoneGameVII(stones, i, j - 1)});\n\n    return dp[i][j];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int stoneGameVII(int[] stones) {\n    final int n = stones.length;\n    // dp[i][j] := max score you can get more than your opponent in stones[i..j]\n    dp = new int[n][n];\n    prefix = new int[n + 1];\n\n    for (int i = 0; i < n; ++i)\n      prefix[i + 1] = stones[i] + prefix[i];\n\n    return stoneGameVII(stones, 0, n - 1);\n  }\n\n  private int[][] dp;\n  private int[] prefix;\n\n  int stoneGameVII(int[] stones, int i, int j) {\n    if (i == j)\n      return 0;\n    if (dp[i][j] > 0)\n      return dp[i][j];\n\n    dp[i][j] =\n        Math.max(dp[i][j], Math.max(\n                               // Remove stones[i], so get sum of stones[i + 1..j]\n                               prefix[j + 1] - prefix[i + 1] - stoneGameVII(stones, i + 1, j),\n                               // Remove stones[j], so get sum of stones[i..j - 1]\n                               prefix[j] - prefix[i] - stoneGameVII(stones, i, j - 1)));\n\n    return dp[i][j];\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}