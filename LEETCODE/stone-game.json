{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "877",
            "title": "Stone Game",
            "titleSlug": "stone-game",
            "content": "<p>Alice and Bob play a game with piles of stones. There are an <strong>even</strong> number of piles arranged in a row, and each pile has a <strong>positive</strong> integer number of stones <code>piles[i]</code>.</p>\n\n<p>The objective of the game is to end with the most stones. The <strong>total</strong> number of stones across all the piles is <strong>odd</strong>, so there are no ties.</p>\n\n<p>Alice and Bob take turns, with <strong>Alice starting first</strong>. Each turn, a player takes the entire pile of stones either from the <strong>beginning</strong> or from the <strong>end</strong> of the row. This continues until there are no more piles left, at which point the person with the <strong>most stones wins</strong>.</p>\n\n<p>Assuming Alice and Bob play optimally, return <code>true</code><em> if Alice wins the game, or </em><code>false</code><em> if Bob wins</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [5,3,4,5]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nAlice starts first, and can only take the first 5 or the last 5.\nSay she takes the first 5, so that the row becomes [3, 4, 5].\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> piles = [3,7,2,3]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= piles.length &lt;= 500</code></li>\n\t<li><code>piles.length</code> is <strong>even</strong>.</li>\n\t<li><code>1 &lt;= piles[i] &lt;= 500</code></li>\n\t<li><code>sum(piles[i])</code> is <strong>odd</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3100,
            "dislikes": 2828,
            "similarQuestions": "[{\"title\": \"Stone Game V\", \"titleSlug\": \"stone-game-v\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game VI\", \"titleSlug\": \"stone-game-vi\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game VII\", \"titleSlug\": \"stone-game-vii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game VIII\", \"titleSlug\": \"stone-game-viii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Stone Game IX\", \"titleSlug\": \"stone-game-ix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Strictly Palindromic Number\", \"titleSlug\": \"strictly-palindromic-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Visit Array Positions to Maximize Score\", \"titleSlug\": \"visit-array-positions-to-maximize-score\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"218.1K\", \"totalSubmission\": \"310.1K\", \"totalAcceptedRaw\": 218124, \"totalSubmissionRaw\": 310101, \"acRate\": \"70.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Alice and Bob are playing a game using an even number of stone piles arranged in a row. Each pile contains a positive integer number of stones. The goal is to accumulate the most stones by the end of the game.  Players take turns, with Alice going first. On each turn, a player chooses to take the entire pile from either the beginning or the end of the row. The game continues until all piles are taken. Given that Alice and Bob play optimally, determine if Alice wins the game.",
                "constraints": [
                    "2 <= piles.length <= 500",
                    "piles.length is even.",
                    "1 <= piles[i] <= 500",
                    "sum(piles[i]) is odd."
                ],
                "testcases": [
                    {
                        "input": "[5,3,4,5]",
                        "output": "true",
                        "explanation": "Alice can win by strategically picking piles to maximize her total. One possible winning strategy for Alice is as follows: Alice takes 5 (first pile), leaving [3,4,5]. If Bob takes 3, Alice takes 5, winning with 10 points. If Bob takes 5, Alice takes 4, winning with 9 points. Since Alice always wins when picking the first pile, the output is true."
                    },
                    {
                        "input": "[3,7,2,3]",
                        "output": "true",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-v",
                "title": "Stone Game V",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-vi",
                "title": "Stone Game VI",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-vii",
                "title": "Stone Game VII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "stone-game-viii",
                "title": "Stone Game VIII",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game-ix",
                "title": "Stone Game IX",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "strictly-palindromic-number",
                "title": "Strictly Palindromic Number",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "visit-array-positions-to-maximize-score",
                "title": "Visit Array Positions to Maximize Score",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool stoneGame(vector<int>& piles) {\n    const int n = piles.size();\n    // dp[i][j] := max stones you can get more than your opponent in piles[i..j]\n    vector<vector<int>> dp(n, vector<int>(n));\n\n    for (int i = 0; i < n; ++i)\n      dp[i][i] = piles[i];\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        const int j = i + d;\n        dp[i][j] = max(piles[i] - dp[i + 1][j], piles[j] - dp[i][j - 1]);\n      }\n\n    return dp[0][n - 1] > 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean stoneGame(int[] piles) {\n    final int n = piles.length;\n    // dp[i][j] := max stones you can get more than your opponent in piles[i..j]\n    int[][] dp = new int[n][n];\n\n    for (int i = 0; i < n; ++i)\n      dp[i][i] = piles[i];\n\n    for (int d = 1; d < n; ++d)\n      for (int i = 0; i + d < n; ++i) {\n        final int j = i + d;\n        dp[i][j] = Math.max(piles[i] - dp[i + 1][j], piles[j] - dp[i][j - 1]);\n      }\n\n    return dp[0][n - 1] > 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def stoneGame(self, piles: List[int]) -> bool:\n    n = len(piles)\n    # dp[i][j] := max stones you can get more than your opponent in piles[i..j]\n    dp = [[0] * n for _ in range(n)]\n\n    for i, pile in enumerate(piles):\n      dp[i][i] = pile\n\n    for d in range(1, n):\n      for i in range(n - d):\n        j = i + d\n        dp[i][j] = max(piles[i] - dp[i + 1][j],\n                       piles[j] - dp[i][j - 1])\n\n    return dp[0][n - 1] > 0\n",
                "lang_text": "py"
            }
        }
    }
}