{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1591",
            "title": "Strange Printer II",
            "titleSlug": "strange-printer-ii",
            "content": "<p>There is a strange printer with the following two special requirements:</p>\n\n<ul>\n\t<li>On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.</li>\n\t<li>Once the printer has used a color for the above operation, <strong>the same color cannot be used again</strong>.</li>\n</ul>\n\n<p>You are given a <code>m x n</code> matrix <code>targetGrid</code>, where <code>targetGrid[row][col]</code> is the color in the position <code>(row, col)</code> of the grid.</p>\n\n<p>Return <code>true</code><em> if it is possible to print the matrix </em><code>targetGrid</code><em>,</em><em> otherwise, return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/23/print1.jpg\" style=\"width: 600px; height: 175px;\" />\n<pre>\n<strong>Input:</strong> targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/23/print2.jpg\" style=\"width: 600px; height: 367px;\" />\n<pre>\n<strong>Input:</strong> targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> targetGrid = [[1,2,1],[2,1,2],[1,2,1]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to form targetGrid because it is not allowed to print the same color in different turns.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == targetGrid.length</code></li>\n\t<li><code>n == targetGrid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 60</code></li>\n\t<li><code>1 &lt;= targetGrid[row][col] &lt;= 60</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 604,
            "dislikes": 17,
            "similarQuestions": "[{\"title\": \"Strange Printer\", \"titleSlug\": \"strange-printer\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Longest Cycle in a Graph\", \"titleSlug\": \"longest-cycle-in-a-graph\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Sort Array by Moving Items to Empty Space\", \"titleSlug\": \"sort-array-by-moving-items-to-empty-space\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Topological Sort",
                    "slug": "topological-sort"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.2K\", \"totalSubmission\": \"17.4K\", \"totalAcceptedRaw\": 10239, \"totalSubmissionRaw\": 17407, \"acRate\": \"58.8%\"}",
            "hints": [
                "Try thinking in reverse. Given the grid, how can you tell if a colour was painted last?"
            ],
            "rephrased": {
                "body": "A peculiar printer has the following constraints:\n\n1.  In each turn, it prints a solid rectangular pattern of a single color, overwriting any existing colors within the rectangle.\n2.  Once a color is used, it cannot be used again.\n\nGiven a `m x n` matrix `targetGrid` representing the target state of the grid after printing, where `targetGrid[row][col]` denotes the color at position `(row, col)`, determine if it's possible to achieve `targetGrid` with the given printer restrictions.",
                "constraints": [
                    "`m == targetGrid.length`",
                    "`n == targetGrid[i].length`",
                    "`1 <= m, n <= 60`",
                    "`1 <= targetGrid[row][col] <= 60`"
                ],
                "testcases": [
                    {
                        "input": "[[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]",
                        "output": "true",
                        "explanation": null
                    },
                    {
                        "input": "[[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]",
                        "output": "true",
                        "explanation": null
                    },
                    {
                        "input": "[[1,2,1],[2,1,2],[1,2,1]]",
                        "output": "false",
                        "explanation": "It is impossible to form targetGrid because the same color cannot be used in different turns."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "strange-printer",
                "title": "Strange Printer",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "longest-cycle-in-a-graph",
                "title": "Longest Cycle in a Graph",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "sort-array-by-moving-items-to-empty-space",
                "title": "Sort Array by Moving Items to Empty Space",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Try thinking in reverse. Given the grid, how can you tell if a colour was painted last?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Topological Sort",
                "slug": "topological-sort"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "enum class State { kInit, kVisiting, kVisited };\n\nclass Solution {\n public:\n  bool isPrintable(vector<vector<int>>& targetGrid) {\n    constexpr int kMaxColor = 60;\n    const int m = targetGrid.size();\n    const int n = targetGrid[0].size();\n    // graph[u] := {v1, v2} means v1, v2 cover u\n    vector<unordered_set<int>> graph(kMaxColor + 1);\n\n    for (int color = 1; color <= kMaxColor; ++color) {\n      // Get the rectangle of the current color.\n      int minI = m;\n      int minJ = n;\n      int maxI = -1;\n      int maxJ = -1;\n      for (int i = 0; i < m; ++i)\n        for (int j = 0; j < n; ++j)\n          if (targetGrid[i][j] == color) {\n            minI = min(minI, i);\n            minJ = min(minJ, j);\n            maxI = max(maxI, i);\n            maxJ = max(maxJ, j);\n          }\n      // Add any color covering the current as children.\n      for (int i = minI; i <= maxI; ++i)\n        for (int j = minJ; j <= maxJ; ++j)\n          if (targetGrid[i][j] != color)\n            graph[color].insert(targetGrid[i][j]);\n    }\n\n    vector<State> states(kMaxColor + 1);\n\n    for (int color = 1; color <= kMaxColor; ++color)\n      if (hasCycle(graph, color, states))\n        return false;\n\n    return true;\n  }\n\n private:\n  bool hasCycle(const vector<unordered_set<int>>& graph, int u,\n                vector<State>& states) {\n    if (states[u] == State::kVisiting)\n      return true;\n    if (states[u] == State::kVisited)\n      return false;\n\n    states[u] = State::kVisiting;\n    for (const int v : graph[u])\n      if (hasCycle(graph, v, states))\n        return true;\n    states[u] = State::kVisited;\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "enum State { kInit, kVisiting, kVisited }\n\nclass Solution {\n  public boolean isPrintable(int[][] targetGrid) {\n    final int kMaxColor = 60;\n    final int m = targetGrid.length;\n    final int n = targetGrid[0].length;\n    // graph[u] := {v1, v2} means v1, v2 cover u\n    Set<Integer>[] graph = new HashSet[kMaxColor + 1];\n\n    for (int color = 1; color <= kMaxColor; ++color) {\n      // Get the rectangle of the current color.\n      int minI = m;\n      int minJ = n;\n      int maxI = -1;\n      int maxJ = -1;\n      for (int i = 0; i < m; ++i)\n        for (int j = 0; j < n; ++j)\n          if (targetGrid[i][j] == color) {\n            minI = Math.min(minI, i);\n            minJ = Math.min(minJ, j);\n            maxI = Math.max(maxI, i);\n            maxJ = Math.max(maxJ, j);\n          }\n      // Add any color covering the current as children.\n      graph[color] = new HashSet<>();\n      for (int i = minI; i <= maxI; ++i)\n        for (int j = minJ; j <= maxJ; ++j)\n          if (targetGrid[i][j] != color) {\n            graph[color].add(targetGrid[i][j]);\n          }\n    }\n\n    State[] states = new State[kMaxColor + 1];\n\n    for (int color = 1; color <= kMaxColor; ++color)\n      if (hasCycle(graph, color, states))\n        return false;\n\n    return true;\n  }\n\n  private boolean hasCycle(Set<Integer>[] graph, int u, State[] states) {\n    if (states[u] == State.kVisiting)\n      return true;\n    if (states[u] == State.kVisited)\n      return false;\n\n    states[u] = State.kVisiting;\n    for (int v : graph[u])\n      if (hasCycle(graph, v, states))\n        return true;\n    states[u] = State.kVisited;\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from enum import Enum\n\n\nclass State(Enum):\n  kInit = 0\n  kVisiting = 1\n  kVisited = 2\n\n\nclass Solution:\n  def isPrintable(self, targetGrid: List[List[int]]) -> bool:\n    kMaxColor = 60\n    m = len(targetGrid)\n    n = len(targetGrid[0])\n\n    # graph[u] := {v1, v2} means v1, v2 cover u\n    graph = [set() for _ in range(kMaxColor + 1)]\n\n    for color in range(1, kMaxColor + 1):\n      # Get the rectangle of the current color.\n      minI = m\n      minJ = n\n      maxI = -1\n      maxJ = -1\n      for i in range(m):\n        for j in range(n):\n          if targetGrid[i][j] == color:\n            minI = min(minI, i)\n            minJ = min(minJ, j)\n            maxI = max(maxI, i)\n            maxJ = max(maxJ, j)\n\n      # Add any color covering the current as children.\n      for i in range(minI, maxI + 1):\n        for j in range(minJ, maxJ + 1):\n          if targetGrid[i][j] != color:\n            graph[color].add(targetGrid[i][j])\n\n    states = [State.kInit] * (kMaxColor + 1)\n\n    def hasCycle(u: int) -> bool:\n      if states[u] == State.kVisiting:\n        return True\n      if states[u] == State.kVisited:\n        return False\n\n      states[u] = State.kVisiting\n      if any(hasCycle(v) for v in graph[u]):\n        return True\n      states[u] = State.kVisited\n\n      return False\n\n    return not (any(hasCycle(i) for i in range(1, kMaxColor + 1)))\n",
                "lang_text": "py"
            }
        }
    }
}