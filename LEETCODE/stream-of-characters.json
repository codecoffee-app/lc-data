{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1032",
            "title": "Stream of Characters",
            "titleSlug": "stream-of-characters",
            "content": "<p>Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings <code>words</code>.</p>\n\n<p>For example, if <code>words = [&quot;abc&quot;, &quot;xyz&quot;]</code>&nbsp;and the stream added the four characters (one by one) <code>&#39;a&#39;</code>, <code>&#39;x&#39;</code>, <code>&#39;y&#39;</code>, and <code>&#39;z&#39;</code>, your algorithm should detect that the suffix <code>&quot;xyz&quot;</code> of the characters <code>&quot;axyz&quot;</code> matches <code>&quot;xyz&quot;</code> from <code>words</code>.</p>\n\n<p>Implement the <code>StreamChecker</code> class:</p>\n\n<ul>\n\t<li><code>StreamChecker(String[] words)</code> Initializes the object with the strings array <code>words</code>.</li>\n\t<li><code>boolean query(char letter)</code> Accepts a new character from the stream and returns <code>true</code> if any non-empty suffix from the stream forms a word that is in <code>words</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;StreamChecker&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;]\n[[[&quot;cd&quot;, &quot;f&quot;, &quot;kl&quot;]], [&quot;a&quot;], [&quot;b&quot;], [&quot;c&quot;], [&quot;d&quot;], [&quot;e&quot;], [&quot;f&quot;], [&quot;g&quot;], [&quot;h&quot;], [&quot;i&quot;], [&quot;j&quot;], [&quot;k&quot;], [&quot;l&quot;]]\n<strong>Output</strong>\n[null, false, false, false, true, false, true, false, false, false, false, false, true]\n\n<strong>Explanation</strong>\nStreamChecker streamChecker = new StreamChecker([&quot;cd&quot;, &quot;f&quot;, &quot;kl&quot;]);\nstreamChecker.query(&quot;a&quot;); // return False\nstreamChecker.query(&quot;b&quot;); // return False\nstreamChecker.query(&quot;c&quot;); // return False\nstreamChecker.query(&quot;d&quot;); // return True, because &#39;cd&#39; is in the wordlist\nstreamChecker.query(&quot;e&quot;); // return False\nstreamChecker.query(&quot;f&quot;); // return True, because &#39;f&#39; is in the wordlist\nstreamChecker.query(&quot;g&quot;); // return False\nstreamChecker.query(&quot;h&quot;); // return False\nstreamChecker.query(&quot;i&quot;); // return False\nstreamChecker.query(&quot;j&quot;); // return False\nstreamChecker.query(&quot;k&quot;); // return False\nstreamChecker.query(&quot;l&quot;); // return True, because &#39;kl&#39; is in the wordlist\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 200</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li><code>letter</code> is a lowercase English letter.</li>\n\t<li>At most <code>4 * 10<sup>4</sup></code> calls will be made to query.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1782,
            "dislikes": 180,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Data Stream",
                    "slug": "data-stream"
                }
            ],
            "stats": "{\"totalAccepted\": \"86.3K\", \"totalSubmission\": \"166.7K\", \"totalAcceptedRaw\": 86347, \"totalSubmissionRaw\": 166687, \"acRate\": \"51.8%\"}",
            "hints": [
                "Put the words into a trie, and manage a set of pointers within that trie."
            ],
            "rephrased": {
                "body": "Design a data structure to efficiently handle a stream of characters and determine if any suffix of the currently received stream matches a word from a given dictionary of words.",
                "constraints": [
                    "1 <= words.length <= 2000",
                    "1 <= words[i].length <= 200",
                    "words[i] consists of lowercase English letters.",
                    "letter is a lowercase English letter.",
                    "At most 4 * 10^4 calls will be made to query."
                ],
                "testcases": [
                    {
                        "input": "[\"StreamChecker\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\"]\\n[[[\"cd\", \"f\", \"kl\"]], [\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"e\"], [\"f\"], [\"g\"], [\"h\"], [\"i\"], [\"j\"], [\"k\"], [\"l\"]]",
                        "output": "[null, false, false, false, true, false, true, false, false, false, false, false, true]",
                        "explanation": "The StreamChecker is initialized with the words [\"cd\", \"f\", \"kl\"]. The stream receives the characters 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l' one by one. The query method returns true if a suffix of the stream matches a word in the dictionary.  'cd' is matched when 'd' is received. 'f' is matched when 'f' is received. 'kl' is matched when 'l' is received."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Put the words into a trie, and manage a set of pointers within that trie."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Data Stream",
                "slug": "data-stream"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  bool isWord = false;\n  TrieNode() : children(26) {}\n};\n\nclass StreamChecker {\n public:\n  StreamChecker(vector<string>& words) {\n    for (const string& word : words)\n      insert(word);\n  }\n\n  bool query(char letter) {\n    letters += letter;\n    shared_ptr<TrieNode> node = root;\n\n    for (int i = letters.length() - 1; i >= 0; --i) {\n      const int index = letters[i] - 'a';\n      if (node->children[index] == nullptr)\n        return false;\n      node = node->children[index];\n      if (node->isWord)\n        return true;\n    }\n\n    return false;\n  }\n\n private:\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n  string letters;\n\n  void insert(const string& word) {\n    shared_ptr<TrieNode> node = root;\n    for (int i = word.length() - 1; i >= 0; --i) {\n      const int index = word[i] - 'a';\n      if (node->children[index] == nullptr)\n        node->children[index] = make_shared<TrieNode>();\n      node = node->children[index];\n    }\n    node->isWord = true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[26];\n  public boolean isWord = false;\n}\n\nclass StreamChecker {\n  public StreamChecker(String[] words) {\n    for (final String word : words)\n      insert(word);\n  }\n\n  public boolean query(char letter) {\n    letters.append(letter);\n    TrieNode node = root;\n\n    for (int i = letters.length() - 1; i >= 0; --i) {\n      final int index = letters.charAt(i) - 'a';\n      if (node.children[index] == null)\n        return false;\n      node = node.children[index];\n      if (node.isWord)\n        return true;\n    }\n\n    return false;\n  }\n\n  private TrieNode root = new TrieNode();\n  private StringBuilder letters = new StringBuilder();\n\n  private void insert(final String word) {\n    TrieNode node = root;\n    for (int i = word.length() - 1; i >= 0; --i) {\n      final int index = word.charAt(i) - 'a';\n      if (node.children[index] == null)\n        node.children[index] = new TrieNode();\n      node = node.children[index];\n    }\n    node.isWord = true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children: Dict[str, TrieNode] = {}\n    self.isWord = False\n\n\nclass StreamChecker:\n  def __init__(self, words: List[str]):\n    self.root = TrieNode()\n    self.letters = []\n\n    for word in words:\n      self._insert(word)\n\n  def query(self, letter: str) -> bool:\n    self.letters.append(letter)\n    node = self.root\n    for c in reversed(self.letters):\n      if c not in node.children:\n        return False\n      node = node.children[c]\n      if node.isWord:\n        return True\n    return False\n\n  def _insert(self, word: str) -> None:\n    node = self.root\n    for c in reversed(word):\n      node = node.children.setdefault(c, TrieNode())\n    node.isWord = True\n",
                "lang_text": "py"
            }
        }
    }
}