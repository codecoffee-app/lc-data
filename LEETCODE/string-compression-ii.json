{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1531",
            "title": "String Compression II",
            "titleSlug": "string-compression-ii",
            "content": "<p><a href=\"http://en.wikipedia.org/wiki/Run-length_encoding\">Run-length encoding</a> is a string compression method that works by&nbsp;replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string&nbsp;<code>&quot;aabccc&quot;</code>&nbsp;we replace <font face=\"monospace\"><code>&quot;aa&quot;</code></font>&nbsp;by&nbsp;<font face=\"monospace\"><code>&quot;a2&quot;</code></font>&nbsp;and replace <font face=\"monospace\"><code>&quot;ccc&quot;</code></font>&nbsp;by&nbsp;<font face=\"monospace\"><code>&quot;c3&quot;</code></font>. Thus the compressed string becomes <font face=\"monospace\"><code>&quot;a2bc3&quot;</code>.</font></p>\n\n<p>Notice that in this problem, we are not adding&nbsp;<code>&#39;1&#39;</code>&nbsp;after single characters.</p>\n\n<p>Given a&nbsp;string <code>s</code>&nbsp;and an integer <code>k</code>. You need to delete <strong>at most</strong>&nbsp;<code>k</code> characters from&nbsp;<code>s</code>&nbsp;such that the run-length encoded version of <code>s</code>&nbsp;has minimum length.</p>\n\n<p>Find the <em>minimum length of the run-length encoded&nbsp;version of </em><code>s</code><em> after deleting at most </em><code>k</code><em> characters</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaabcccd&quot;, k = 2\n<strong>Output:</strong> 4\n<b>Explanation: </b>Compressing s without deleting anything will give us &quot;a3bc3d&quot; of length 6. Deleting any of the characters &#39;a&#39; or &#39;c&#39; would at most decrease the length of the compressed string to 5, for instance delete 2 &#39;a&#39; then we will have s = &quot;abcccd&quot; which compressed is abc3d. Therefore, the optimal way is to delete &#39;b&#39; and &#39;d&#39;, then the compressed version of s will be &quot;a3c3&quot; of length 4.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabbaa&quot;, k = 2\n<strong>Output:</strong> 2\n<b>Explanation: </b>If we delete both &#39;b&#39; characters, the resulting compressed string would be &quot;a4&quot; of length 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaaaaaaaaaa&quot;, k = 0\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>Since k is zero, we cannot delete anything. The compressed string is &quot;a11&quot; of length 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2348,
            "dislikes": 202,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"94K\", \"totalSubmission\": \"177.1K\", \"totalAcceptedRaw\": 93967, \"totalSubmissionRaw\": 177087, \"acRate\": \"53.1%\"}",
            "hints": [
                "Use dynamic programming.",
                "The state of the DP can be the current index and the remaining characters to delete.",
                "Having a prefix sum for each character can help you determine for a certain character c in some specific range, how many characters you need to delete to merge all occurrences of c in that range."
            ],
            "rephrased": {
                "body": "Given a string `s` and an integer `k`, determine the minimum length of the run-length encoded version of `s` after deleting at most `k` characters. Run-length encoding replaces consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number of repetitions. Single characters are not followed by '1'.",
                "constraints": [
                    "1 <= s.length <= 100",
                    "0 <= k <= s.length",
                    "s contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"aaabcccd\", k = 2",
                        "output": "4",
                        "explanation": "Compressing 'aaabcccd' without deletion yields 'a3bc3d' (length 6). Deleting two 'a's gives 'abcccd' which compresses to 'abc3d' (length 5).  The optimal solution is to delete 'b' and 'd', resulting in 'a3c3' (length 4)."
                    },
                    {
                        "input": "s = \"aabbaa\", k = 2",
                        "output": "2",
                        "explanation": "Deleting both 'b' characters results in 'aa4' or more precisely 'a4'(length 2)."
                    },
                    {
                        "input": "s = \"aaaaaaaaaaa\", k = 0",
                        "output": "3",
                        "explanation": "Since k is 0, no characters can be deleted. The compressed string is 'a11' (length 3)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use dynamic programming.",
            "The state of the DP can be the current index and the remaining characters to delete.",
            "Having a prefix sum for each character can help you determine for a certain character c in some specific range, how many characters you need to delete to merge all occurrences of c in that range."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int getLengthOfOptimalCompression(string s, int k) {\n    // dp[i][k] := length of optimal compression of s[i:] w/ at most k deletion\n    dp.resize(s.length(), vector<int>(k + 1, kMax));\n    return compression(s, 0, k);\n  }\n\n private:\n  static constexpr int kMax = 101;\n  vector<vector<int>> dp;\n\n  int compression(const string& s, int i, int k) {\n    if (k < 0)\n      return kMax;\n    if (i == s.length() || s.length() - i <= k)\n      return 0;\n    if (dp[i][k] != kMax)\n      return dp[i][k];\n\n    int maxFreq = 0;  // Max freq in s[i..j]\n    vector<int> count(128);\n\n    // Make chars in s[i..j] be same\n    // Keep the char that has max freq in this range and remove other chars\n    for (int j = i; j < s.length(); ++j) {\n      maxFreq = max(maxFreq, ++count[s[j]]);\n      dp[i][k] = min(  //\n          dp[i][k],    //\n          getLength(maxFreq) +\n              compression(s, j + 1, k - (j - i + 1 - maxFreq)));\n    }\n\n    return dp[i][k];\n  }\n\n  int getLength(int maxFreq) {  // The length to compress `maxFreq`\n    if (maxFreq == 1)\n      return 1;  // C\n    if (maxFreq < 10)\n      return 2;  // [1-9]c\n    if (maxFreq < 100)\n      return 3;  // [1-9][0-9]c\n    return 4;    // [1-9][0-9][0-9]c\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int getLengthOfOptimalCompression(String s, int k) {\n    // dp[i][k] := length of optimal compression of s[i:] w/ at most k deletion\n    dp = new int[s.length()][k + 1];\n    Arrays.stream(dp).forEach(A -> Arrays.fill(A, kMax));\n    return compression(s, 0, k);\n  }\n\n  private static final int kMax = 101;\n  private int[][] dp;\n\n  private int compression(final String s, int i, int k) {\n    if (k < 0)\n      return kMax;\n    if (i == s.length() || s.length() - i <= k)\n      return 0;\n    if (dp[i][k] != kMax)\n      return dp[i][k];\n\n    int maxFreq = 0;\n    int[] count = new int[128];\n\n    for (int j = i; j < s.length(); ++j) {\n      maxFreq = Math.max(maxFreq, ++count[s.charAt(j)]);\n      dp[i][k] = Math.min( //\n          dp[i][k],        //\n          getLength(maxFreq) + compression(s, j + 1, k - (j - i + 1 - maxFreq)));\n    }\n\n    return dp[i][k];\n  }\n\n  private int getLength(int maxFreq) { // The length to compress `maxFreq`\n    if (maxFreq == 1)\n      return 1; // C\n    if (maxFreq < 10)\n      return 2; // [1-9]c\n    if (maxFreq < 100)\n      return 3; // [1-9][0-9]c\n    return 4;   // [1-9][0-9][0-9]c\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getLengthOfOptimalCompression(self, s: str, k: int) -> int:\n    def getLength(maxFreq):  # The length to compress `maxFreq`\n      if maxFreq == 1:\n        return 1  # C\n      if maxFreq < 10:\n        return 2  # [1-9]c\n      if maxFreq < 100:\n        return 3  # [1-9][0-9]c\n      return 4    # [1-9][0-9][0-9]c\n\n    # Compression(i, k) := length of optimal compression of s[i:] w/ at most k deletion\n    @functools.lru_cache(None)\n    def compression(i, k):\n      if k < 0:\n        return math.inf\n      if i == len(s) or len(s) - i <= k:\n        return 0\n\n      ans = math.inf\n      maxFreq = 0  # Max freq in s[i..j]\n      count = collections.Counter()\n\n      # Make chars in s[i..j] be same\n      # Keep the char that has max freq in this range and remove other chars\n      for j in range(i, len(s)):\n        count[s[j]] += 1\n        maxFreq = max(maxFreq, count[s[j]])\n        ans = min(ans, getLength(maxFreq) +\n                  compression(j + 1, k - (j - i + 1 - maxFreq)))\n\n      return ans\n\n    return compression(0, k)\n",
                "lang_text": "py"
            }
        }
    }
}