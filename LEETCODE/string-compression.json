{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "443",
            "title": "String Compression",
            "titleSlug": "string-compression",
            "content": "<p>Given an array of characters <code>chars</code>, compress it using the following algorithm:</p>\n\n<p>Begin with an empty string <code>s</code>. For each group of <strong>consecutive repeating characters</strong> in <code>chars</code>:</p>\n\n<ul>\n\t<li>If the group&#39;s length is <code>1</code>, append the character to <code>s</code>.</li>\n\t<li>Otherwise, append the character followed by the group&#39;s length.</li>\n</ul>\n\n<p>The compressed string <code>s</code> <strong>should not be returned separately</strong>, but instead, be stored <strong>in the input character array <code>chars</code></strong>. Note that group lengths that are <code>10</code> or longer will be split into multiple characters in <code>chars</code>.</p>\n\n<p>After you are done <strong>modifying the input array,</strong> return <em>the new length of the array</em>.</p>\n\n<p>You must write an algorithm that uses only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n<strong>Output:</strong> Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\n<strong>Explanation:</strong> The groups are &quot;aa&quot;, &quot;bb&quot;, and &quot;ccc&quot;. This compresses to &quot;a2b2c3&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;]\n<strong>Output:</strong> Return 1, and the first character of the input array should be: [&quot;a&quot;]\n<strong>Explanation:</strong> The only group is &quot;a&quot;, which remains uncompressed since it&#39;s a single character.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\n<strong>Output:</strong> Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].\n<strong>Explanation:</strong> The groups are &quot;a&quot; and &quot;bbbbbbbbbbbb&quot;. This compresses to &quot;ab12&quot;.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= chars.length &lt;= 2000</code></li>\n\t<li><code>chars[i]</code> is a lowercase English letter, uppercase English letter, digit, or symbol.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4650,
            "dislikes": 7370,
            "similarQuestions": "[{\"title\": \"Count and Say\", \"titleSlug\": \"count-and-say\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Encode and Decode Strings\", \"titleSlug\": \"encode-and-decode-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Compressed String Iterator\", \"titleSlug\": \"design-compressed-string-iterator\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Decompress Run-Length Encoded List\", \"titleSlug\": \"decompress-run-length-encoded-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"491K\", \"totalSubmission\": \"916.3K\", \"totalAcceptedRaw\": 490992, \"totalSubmissionRaw\": 916277, \"acRate\": \"53.6%\"}",
            "hints": [
                "How do you know if you are at the end of a consecutive group of characters?"
            ],
            "rephrased": {
                "body": "Given an array of characters `chars`, compress it in-place.  Iterate through `chars`, identifying consecutive repeating character groups. If a group's length is 1, append the character to the compressed array. Otherwise, append the character followed by the group's length as individual characters. The compressed array should overwrite the original `chars` array. Return the new length of the compressed array.  This must be done with constant extra space.",
                "constraints": [
                    "1 <= chars.length <= 2000",
                    "chars[i] is a lowercase English letter, uppercase English letter, digit, or symbol."
                ],
                "testcases": [
                    {
                        "input": "[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]",
                        "output": "6",
                        "explanation": "The input array is compressed to [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]. The groups are \"aa\", \"bb\", and \"ccc\", which compress to \"a2b2c3\". The new length of the array is 6."
                    },
                    {
                        "input": "[\"a\"]",
                        "output": "1",
                        "explanation": "The input array remains [\"a\"] because the single character 'a' does not need compression. The length remains 1."
                    },
                    {
                        "input": "[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]",
                        "output": "4",
                        "explanation": "The input array is compressed to [\"a\",\"b\",\"1\",\"2\"]. The groups are \"a\" and \"bbbbbbbbbbbb\", compressing to \"ab12\". The new length is 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "count-and-say",
                "title": "Count and Say",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "encode-and-decode-strings",
                "title": "Encode and Decode Strings",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "design-compressed-string-iterator",
                "title": "Design Compressed String Iterator",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "decompress-run-length-encoded-list",
                "title": "Decompress Run-Length Encoded List",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How do you know if you are at the end of a consecutive group of characters?"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int compress(vector<char>& chars) {\n    int ans = 0;\n\n    for (int i = 0; i < chars.size();) {\n      const char letter = chars[i];\n      int count = 0;\n      while (i < chars.size() && chars[i] == letter) {\n        ++count;\n        ++i;\n      }\n      chars[ans++] = letter;\n      if (count > 1)\n        for (const char c : to_string(count))\n          chars[ans++] = c;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int compress(char[] chars) {\n    int ans = 0;\n\n    for (int i = 0; i < chars.length;) {\n      final char letter = chars[i];\n      int count = 0;\n      while (i < chars.length && chars[i] == letter) {\n        ++count;\n        ++i;\n      }\n      chars[ans++] = letter;\n      if (count > 1)\n        for (final char c : String.valueOf(count).toCharArray())\n          chars[ans++] = c;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def compress(self, chars: List[str]) -> int:\n    ans = 0\n    i = 0\n\n    while i < len(chars):\n      letter = chars[i]\n      count = 0\n      while i < len(chars) and chars[i] == letter:\n        count += 1\n        i += 1\n      chars[ans] = letter\n      ans += 1\n      if count > 1:\n        for c in str(count):\n          chars[ans] = c\n          ans += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}