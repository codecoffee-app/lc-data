{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2851",
            "title": "String Transformation",
            "titleSlug": "string-transformation",
            "content": "<p>You are given two strings <code>s</code> and <code>t</code> of equal length <code>n</code>. You can perform the following operation on the string <code>s</code>:</p>\n\n<ul>\n\t<li>Remove a <strong>suffix</strong> of <code>s</code> of length <code>l</code> where <code>0 &lt; l &lt; n</code> and append it at the start of <code>s</code>.<br />\n\tFor example, let <code>s = &#39;abcd&#39;</code> then in one operation you can remove the suffix <code>&#39;cd&#39;</code> and append it in front of <code>s</code> making <code>s = &#39;cdab&#39;</code>.</li>\n</ul>\n\n<p>You are also given an integer <code>k</code>. Return <em>the number of ways in which </em><code>s</code> <em>can be transformed into </em><code>t</code><em> in <strong>exactly</strong> </em><code>k</code><em> operations.</em></p>\n\n<p>Since the answer can be large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcd&quot;, t = &quot;cdab&quot;, k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nFirst way:\nIn first operation, choose suffix from index = 3, so resulting s = &quot;dabc&quot;.\nIn second operation, choose suffix from index = 3, so resulting s = &quot;cdab&quot;.\n\nSecond way:\nIn first operation, choose suffix from index = 1, so resulting s = &quot;bcda&quot;.\nIn second operation, choose suffix from index = 1, so resulting s = &quot;cdab&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababab&quot;, t = &quot;ababab&quot;, k = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nFirst way:\nChoose suffix from index = 2, so resulting s = &quot;ababab&quot;.\n\nSecond way:\nChoose suffix from index = 4, so resulting s = &quot;ababab&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>15</sup></code></li>\n\t<li><code>s.length == t.length</code></li>\n\t<li><code>s</code> and <code>t</code> consist of only lowercase English alphabets.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 161,
            "dislikes": 32,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.6K\", \"totalSubmission\": \"12.5K\", \"totalAcceptedRaw\": 3650, \"totalSubmissionRaw\": 12510, \"acRate\": \"29.2%\"}",
            "hints": [
                "String <code>t</code> can be only constructed if it is a rotated version of string <code>s</code>.",
                "Use KMP algorithm or Z algorithm to find the number of indices from where <code>s</code> is equal to <code>t</code>.",
                "Use Dynamic Programming to count the number of ways."
            ],
            "rephrased": {
                "body": "Given two strings `s` and `t` of equal length `n`, you can perform an operation on `s` where you remove a suffix of length `l` (0 < l < n) and append it to the beginning of `s`. You are also given an integer `k`. Determine the number of ways `s` can be transformed into `t` in exactly `k` operations. Return the answer modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "2 <= s.length <= 5 * 10<sup>5</sup>",
                    "1 <= k <= 10<sup>15</sup>",
                    "s.length == t.length",
                    "s and t consist of only lowercase English alphabets."
                ],
                "testcases": [
                    {
                        "input": "s = \"abcd\", t = \"cdab\", k = 2",
                        "output": "2",
                        "explanation": "One way: First, remove the suffix \"d\" (l=1) resulting in s = \"dabc\". Then, remove the suffix \"c\" (l=1) resulting in s = \"cdab\".\nAnother way: First, remove the suffix \"bcd\" (l=3) resulting in s = \"bcda\". Then, remove the suffix \"bc\" (l=2) resulting in s = \"cdab\"."
                    },
                    {
                        "input": "s = \"ababab\", t = \"ababab\", k = 1",
                        "output": "2",
                        "explanation": "To transform `s` into `t` in one operation, the chosen suffix must result in no change. This can happen if the removed suffix and the rest of the string are identical. There are two suffix lengths that meet this condition: length 2 and length 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "String <code>t</code> can be only constructed if it is a rotated version of string <code>s</code>.",
            "Use KMP algorithm or Z algorithm to find the number of indices from where <code>s</code> is equal to <code>t</code>.",
            "Use Dynamic Programming to count the number of ways."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // This dynamic programming table dp[k][i] represents the number of ways to\n  // rearrange the string s after k steps such that it starts with s[i].\n  // A string can be rotated from 1 to n - 1 times. The transition rule is\n  // dp[k][i] = sum(dp[k - 1][j]) for all j != i. For example, when n = 4 and\n  // k = 3, the table looks like this:\n  //\n  // -----------------------------------------------------------\n  // |       | i = 0 | i = 1 | i = 2 | i = 3 | sum = (n - 1)^k |\n  // -----------------------------------------------------------\n  // | k = 0 |   1   |   0   |   0   |   0   |        1        |\n  // | k = 1 |   0   |   1   |   1   |   1   |        3        |\n  // | k = 2 |   3   |   2   |   2   |   2   |        9        |\n  // | k = 3 |   6   |   7   |   7   |   7   |       27        |\n  // -----------------------------------------------------------\n  //\n  // By observation, we have\n  //   * dp[k][!0] = ((n - 1)^k - (-1)^k) / n\n  //   * dp[k][0] = dp[k][!0] + (-1)^k\n  int numberOfWays(string s, string t, long long k) {\n    const int n = s.length();\n    const int negOnePowK = (k % 2 == 0 ? 1 : -1);  // (-1)^k\n    const vector<int> z = zFunction(s + t + t);\n    const vector<int> indices = getIndices(z, n);\n    vector<int> dp(2);  // dp[0] := dp[k][0]; dp[1] := dp[k][!0]\n    dp[1] = (modPow(n - 1, k) - negOnePowK + kMod) % kMod *\n            modPow(n, kMod - 2) % kMod;\n    dp[0] = (dp[1] + negOnePowK + kMod) % kMod;\n    return accumulate(indices.begin(), indices.end(), 0LL,\n                      [&](long long subtotal, int index) {\n      return (subtotal + dp[index == 0 ? 0 : 1]) % kMod;\n    });\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n\n  long modPow(long x, long n) {\n    if (n == 0)\n      return 1;\n    if (n & 1)\n      return x * modPow(x, n - 1) % kMod;\n    return modPow(x * x % kMod, n / 2);\n  }\n\n  // https://cp-algorithms.com/string/z-function.html#implementation\n  vector<int> zFunction(const string& s) {\n    const int n = s.length();\n    vector<int> z(n);\n    int l = 0;\n    int r = 0;\n    for (int i = 1; i < n; ++i) {\n      if (i < r)\n        z[i] = min(r - i, z[i - l]);\n      while (i + z[i] < n && s[z[i]] == s[i + z[i]])\n        ++z[i];\n      if (i + z[i] > r) {\n        l = i;\n        r = i + z[i];\n      }\n    }\n    return z;\n  }\n\n  // Returns the indices in the string `s` such that for each `i` in the\n  // returned indices, `s[i:] + s[:i] = t`.\n  vector<int> getIndices(const vector<int>& z, int n) {\n    vector<int> indices;\n    for (int i = n; i < n + n; ++i)\n      if (z[i] >= n)\n        indices.push_back(i - n);\n    return indices;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // This dynamic programming table dp[k][i] represents the number of ways to\n  // rearrange the String s after k steps such that it starts with s[i].\n  // A String can be rotated from 1 to n - 1 times. The transition rule is\n  // dp[k][i] = sum(dp[k - 1][j]) for all j != i. For example, when n = 4 and\n  // k = 3, the table looks like this:\n  //\n  // -----------------------------------------------------------\n  // |       | i = 0 | i = 1 | i = 2 | i = 3 | sum = (n - 1)^k |\n  // -----------------------------------------------------------\n  // | k = 0 |   1   |   0   |   0   |   0   |        1        |\n  // | k = 1 |   0   |   1   |   1   |   1   |        3        |\n  // | k = 2 |   3   |   2   |   2   |   2   |        9        |\n  // | k = 3 |   6   |   7   |   7   |   7   |       27        |\n  // -----------------------------------------------------------\n  //\n  // By observation, we have\n  //   * dp[k][!0] = ((n - 1)^k - (-1)^k) / n\n  //   * dp[k][0] = dp[k][!0] + (-1)^k\n  public int numberOfWays(String s, String t, long k) {\n    final int n = s.length();\n    final int negOnePowK = (k % 2 == 0 ? 1 : -1); // (-1)^k\n    final int[] z = zFunction(s + t + t);\n    final List<Integer> indices = getIndices(z, n);\n    int[] dp = new int[2]; // dp[0] := dp[k][0]; dp[1] := dp[k][!0]\n    dp[1] = (int) ((modPow(n - 1, k) - negOnePowK + kMod) % kMod * modPow(n, kMod - 2) % kMod);\n    dp[0] = (int) ((dp[1] + negOnePowK + kMod) % kMod);\n    int ans = 0;\n    for (final int index : getIndices(z, n)) {\n      ans += dp[index == 0 ? 0 : 1];\n      ans %= kMod;\n    }\n    return ans;\n  }\n\n  private static final int kMod = 1_000_000_007;\n\n  private long modPow(long x, long n) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x, n - 1) % kMod;\n    return modPow(x * x % kMod, n / 2);\n  }\n  // https://cp-algorithms.com/string/z-function.html#implementation\n  private int[] zFunction(final String s) {\n    final int n = s.length();\n    int[] z = new int[n];\n    int l = 0;\n    int r = 0;\n    for (int i = 1; i < n; ++i) {\n      if (i < r)\n        z[i] = Math.min(r - i, z[i - l]);\n      while (i + z[i] < n && s.charAt(z[i]) == s.charAt(i + z[i]))\n        ++z[i];\n      if (i + z[i] > r) {\n        l = i;\n        r = i + z[i];\n      }\n    }\n    return z;\n  }\n\n  // Returns the indices in the String `s` such that for each `i` in the\n  // returned indices, `s[i:] + s[:i] = t`.\n  private List<Integer> getIndices(int[] z, int n) {\n    List<Integer> indices = new ArrayList<>();\n    for (int i = n; i < n + n; ++i)\n      if (z[i] >= n)\n        indices.add(i - n);\n    return indices;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # This dynamic programming table dp[k][i] represents the number of ways to\n  # rearrange the String s after k steps such that it starts with s[i].\n  # A String can be rotated from 1 to n - 1 times. The transition rule is\n  # dp[k][i] = sum(dp[k - 1][j]) for all j != i. For example, when n = 4 and\n  # k = 3, the table looks like this:\n  #\n  # -----------------------------------------------------------\n  # |       | i = 0 | i = 1 | i = 2 | i = 3 | sum = (n - 1)^k |\n  # -----------------------------------------------------------\n  # | k = 0 |   1   |   0   |   0   |   0   |        1        |\n  # | k = 1 |   0   |   1   |   1   |   1   |        3        |\n  # | k = 2 |   3   |   2   |   2   |   2   |        9        |\n  # | k = 3 |   6   |   7   |   7   |   7   |       27        |\n  # -----------------------------------------------------------\n  #\n  # By observation, we have\n  #   * dp[k][!0] = ((n - 1)^k - (-1)^k) / n\n  #   * dp[k][0] = dp[k][!0] + (-1)^k\n  def numberOfWays(self, s: str, t: str, k: int) -> int:\n    kMod = 1_000_000_007\n    n = len(s)\n    negOnePowK = 1 if k % 2 == 0 else -1  # (-1)^k\n    z = self._zFunction(s + t + t)\n    # indices in the `s` such that for each `i` in the returned indices,\n    # `s[i:] + s[:i] = t`.\n    indices = [i - n for i in range(n, n + n) if z[i] >= n]\n    dp = [0] * 2  # dp[0] := dp[k][0]; dp[1] := dp[k][!0]\n    dp[1] = (pow(n - 1, k, kMod) - negOnePowK) * pow(n, kMod - 2, kMod)\n    dp[0] = dp[1] + negOnePowK\n    return sum(dp[0] if index == 0 else dp[1] for index in indices) % kMod\n\n  # https://cp-algorithms.com//string//z-function.html#implementation\n  def _zFunction(self, s: str) -> List[int]:\n    n = len(s)\n    z = [0] * n\n    l = 0\n    r = 0\n    for i in range(1, n):\n      if i < r:\n        z[i] = min(r - i, z[i - l])\n      while i + z[i] < n and s[z[i]] == s[i + z[i]]:\n        z[i] += 1\n      if i + z[i] > r:\n        l = i\n        r = i + z[i]\n    return z\n",
                "lang_text": "py"
            }
        }
    }
}