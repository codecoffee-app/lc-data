{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2299",
            "title": "Strong Password Checker II",
            "titleSlug": "strong-password-checker-ii",
            "content": "<p>A password is said to be <strong>strong</strong> if it satisfies all the following criteria:</p>\n\n<ul>\n\t<li>It has at least <code>8</code> characters.</li>\n\t<li>It contains at least <strong>one lowercase</strong> letter.</li>\n\t<li>It contains at least <strong>one uppercase</strong> letter.</li>\n\t<li>It contains at least <strong>one digit</strong>.</li>\n\t<li>It contains at least <strong>one special character</strong>. The special characters are the characters in the following string: <code>&quot;!@#$%^&amp;*()-+&quot;</code>.</li>\n\t<li>It does <strong>not</strong> contain <code>2</code> of the same character in adjacent positions (i.e., <code>&quot;aab&quot;</code> violates this condition, but <code>&quot;aba&quot;</code> does not).</li>\n</ul>\n\n<p>Given a string <code>password</code>, return <code>true</code><em> if it is a <strong>strong</strong> password</em>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> password = &quot;IloveLe3tcode!&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The password meets all the requirements. Therefore, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> password = &quot;Me+You--IsMyDream&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> password = &quot;1aB!&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The password does not meet the length requirement. Therefore, we return false.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= password.length &lt;= 100</code></li>\n\t<li><code>password</code> consists of letters, digits, and special characters: <code>&quot;!@#$%^&amp;*()-+&quot;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 324,
            "dislikes": 39,
            "similarQuestions": "[{\"title\": \"Strong Password Checker\", \"titleSlug\": \"strong-password-checker\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Validate IP Address\", \"titleSlug\": \"validate-ip-address\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"37.2K\", \"totalSubmission\": \"67.7K\", \"totalAcceptedRaw\": 37169, \"totalSubmissionRaw\": 67719, \"acRate\": \"54.9%\"}",
            "hints": [
                "You can use a boolean flag to define certain types of characters seen in the string.",
                "In the end, check if all boolean flags have ended up True, and do not forget to check the \"adjacent\" and \"length\" criteria."
            ],
            "rephrased": {
                "body": "A password is considered strong if it meets the following criteria:\n\n*   It must be at least 8 characters long.\n*   It must contain at least one lowercase letter.\n*   It must contain at least one uppercase letter.\n*   It must contain at least one digit.\n*   It must contain at least one special character from the set: `!@#$%^&*()-+`.\n*   It must not have any two adjacent characters that are the same.\n\nGiven a password string, determine if it's a strong password according to these rules.",
                "constraints": [
                    "1 <= password.length <= 100",
                    "password consists of letters, digits, and special characters: `!@#$%^&*()-+`."
                ],
                "testcases": [
                    {
                        "input": "IloveLe3tcode!",
                        "output": "true",
                        "explanation": "The password meets all the specified requirements for a strong password."
                    },
                    {
                        "input": "Me+You--IsMyDream",
                        "output": "false",
                        "explanation": "The password fails to meet the criteria because it lacks a digit and contains two identical adjacent characters ('--')."
                    },
                    {
                        "input": "1aB!",
                        "output": "false",
                        "explanation": "The password does not meet the minimum length requirement of 8 characters."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "strong-password-checker",
                "title": "Strong Password Checker",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "validate-ip-address",
                "title": "Validate IP Address",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "You can use a boolean flag to define certain types of characters seen in the string.",
            "In the end, check if all boolean flags have ended up True, and do not forget to check the \"adjacent\" and \"length\" criteria."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool strongPasswordCheckerII(string password) {\n    if (password.length() < 8)\n      return false;\n\n    const bool hasLowerCase = any_of(password.begin(), password.end(),\n                                     [](const char c) { return islower(c); });\n    if (!hasLowerCase)\n      return false;\n\n    const bool hasUpperCase = any_of(password.begin(), password.end(),\n                                     [](const char c) { return isupper(c); });\n    if (!hasUpperCase)\n      return false;\n\n    const bool hasDigit = any_of(password.begin(), password.end(),\n                                 [](const char c) { return isdigit(c); });\n    if (!hasDigit)\n      return false;\n\n    const bool hasSpecial =\n        any_of(password.begin(), password.end(), [](const char c) {\n          return string(\"!@#$%^&*()-+\").find(c) != string::npos;\n        });\n    if (!hasSpecial)\n      return false;\n\n    for (int i = 1; i < password.length(); ++i)\n      if (password[i] == password[i - 1])\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean strongPasswordCheckerII(String password) {\n    if (password.length() < 8)\n      return false;\n\n    final boolean hasLowerCase = password.chars().anyMatch(c -> Character.isLowerCase(c));\n    if (!hasLowerCase)\n      return false;\n\n    final boolean hasUpperCase = password.chars().anyMatch(c -> Character.isUpperCase(c));\n    if (!hasUpperCase)\n      return false;\n\n    final boolean hasDigit = password.chars().anyMatch(c -> Character.isDigit(c));\n    if (!hasDigit)\n      return false;\n\n    final boolean hasSpecial = password.chars().anyMatch(c -> \"!@#$%^&*()-+\".indexOf(c) != -1);\n    if (!hasSpecial)\n      return false;\n\n    for (int i = 1; i < password.length(); ++i)\n      if (password.charAt(i) == password.charAt(i - 1))\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def strongPasswordCheckerII(self, password: str) -> bool:\n    if len(password) < 8:\n      return False\n    if not any(c.islower() for c in password):\n      return False\n    if not any(c.isupper() for c in password):\n      return False\n    if not any(c.isdigit() for c in password):\n      return False\n    if not any(\"!@#$%^&*()-+\".find(c) != -1 for c in password):\n      return False\n    return all(a != b for a, b in zip(password, password[1:]))\n",
                "lang_text": "py"
            }
        }
    }
}