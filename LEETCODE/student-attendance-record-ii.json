{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "552",
            "title": "Student Attendance Record II",
            "titleSlug": "student-attendance-record-ii",
            "content": "<p>An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p>\n\n<ul>\n\t<li><code>&#39;A&#39;</code>: Absent.</li>\n\t<li><code>&#39;L&#39;</code>: Late.</li>\n\t<li><code>&#39;P&#39;</code>: Present.</li>\n</ul>\n\n<p>Any student is eligible for an attendance award if they meet <strong>both</strong> of the following criteria:</p>\n\n<ul>\n\t<li>The student was absent (<code>&#39;A&#39;</code>) for <strong>strictly</strong> fewer than 2 days <strong>total</strong>.</li>\n\t<li>The student was <strong>never</strong> late (<code>&#39;L&#39;</code>) for 3 or more <strong>consecutive</strong> days.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>the <strong>number</strong> of possible attendance records of length</em> <code>n</code><em> that make a student eligible for an attendance award. The answer may be very large, so return it <strong>modulo</strong> </em><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> There are 8 records with length 2 that are eligible for an award:\n&quot;PP&quot;, &quot;AP&quot;, &quot;PA&quot;, &quot;LP&quot;, &quot;PL&quot;, &quot;AL&quot;, &quot;LA&quot;, &quot;LL&quot;\nOnly &quot;AA&quot; is not eligible because there are 2 absences (there need to be fewer than 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10101\n<strong>Output:</strong> 183236316\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1699,
            "dislikes": 248,
            "similarQuestions": "[{\"title\": \"Student Attendance Record I\", \"titleSlug\": \"student-attendance-record-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"63.9K\", \"totalSubmission\": \"151K\", \"totalAcceptedRaw\": 63903, \"totalSubmissionRaw\": 151043, \"acRate\": \"42.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer `n`, representing the length of an attendance record, determine the number of possible attendance records that qualify a student for an award. An attendance record is a string consisting of 'A' (Absent), 'L' (Late), and 'P' (Present). To be eligible, a student must have fewer than 2 absences and never have 3 or more consecutive late days. Return the count of eligible attendance records modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= n <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "8",
                        "explanation": "Possible eligible records are 'PP', 'AP', 'PA', 'LP', 'PL', 'AL', 'LA', 'LL'. 'AA' is not eligible due to having 2 absences."
                    },
                    {
                        "input": "1",
                        "output": "3",
                        "explanation": "Eligible records are 'A', 'L', and 'P'."
                    },
                    {
                        "input": "10101",
                        "output": "183236316",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "student-attendance-record-i",
                "title": "Student Attendance Record I",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int checkRecord(int n) {\n    constexpr int kMod = 1'000'000'007;\n    // dp[i][j] := length so far w/ i A's and the latest chars are j L's\n    vector<vector<long>> dp(2, vector<long>(3));\n    dp[0][0] = 1;\n\n    while (n--) {\n      const auto prev(dp);\n\n      // Append P\n      dp[0][0] = (prev[0][0] + prev[0][1] + prev[0][2]) % kMod;\n\n      // Append L\n      dp[0][1] = prev[0][0];\n\n      // Append L\n      dp[0][2] = prev[0][1];\n\n      // Append A or append P\n      dp[1][0] = (prev[0][0] + prev[0][1] + prev[0][2] +  //\n                  prev[1][0] + prev[1][1] + prev[1][2]) %\n                 kMod;\n\n      // Append L\n      dp[1][1] = prev[1][0];\n\n      // Append L\n      dp[1][2] = prev[1][1];\n    }\n\n    return accumulate(dp.begin(), dp.end(), 0, [](int s, vector<long>& row) {\n      return (s + accumulate(row.begin(), row.end(), 0L)) % kMod;\n    });\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int checkRecord(int n) {\n    final int kMod = 1_000_000_007;\n    // dp[i][j] := length so far w/ i A's and the latest chars are j L's\n    long[][] dp = new long[2][3];\n    dp[0][0] = 1;\n\n    while (n-- > 0) {\n      long[][] prev = Arrays.stream(dp)\n                          .map((long[] A) -> A.clone())\n                          .toArray((int length) -> new long[length][]);\n\n      // Append P\n      dp[0][0] = (prev[0][0] + prev[0][1] + prev[0][2]) % kMod;\n\n      // Append L\n      dp[0][1] = prev[0][0];\n\n      // Append L\n      dp[0][2] = prev[0][1];\n\n      // Append A or append P\n      dp[1][0] =\n          (prev[0][0] + prev[0][1] + prev[0][2] + prev[1][0] + prev[1][1] + prev[1][2]) % kMod;\n\n      // Append L\n      dp[1][1] = prev[1][0];\n\n      // Append L\n      dp[1][2] = prev[1][1];\n    }\n\n    return (int) ((dp[0][0] + dp[0][1] + dp[0][2] + dp[1][0] + dp[1][1] + dp[1][2]) % kMod);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def checkRecord(self, n: int) -> int:\n    kMod = 1_000_000_007\n    # dp[i][j] := length so far w/ i A's and the latest chars are j L's\n    dp = [[0] * 3 for _ in range(2)]\n    dp[0][0] = 1\n\n    for _ in range(n):\n      prev = [A[:] for A in dp]\n\n      # Append P\n      dp[0][0] = (prev[0][0] + prev[0][1] + prev[0][2]) % kMod\n\n      # Append L\n      dp[0][1] = prev[0][0]\n\n      # Append L\n      dp[0][2] = prev[0][1]\n\n      # Append A or append P\n      dp[1][0] = (prev[0][0] + prev[0][1] + prev[0][2] +\n                  prev[1][0] + prev[1][1] + prev[1][2]) % kMod\n\n      # Append L\n      dp[1][1] = prev[1][0]\n\n      # Append L\n      dp[1][2] = prev[1][1]\n\n    return (sum(dp[0]) + sum(dp[1])) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}