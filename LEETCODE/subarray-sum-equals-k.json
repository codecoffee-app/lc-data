{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "560",
            "title": "Subarray Sum Equals K",
            "titleSlug": "subarray-sum-equals-k",
            "content": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the total number of subarrays whose sum equals to</em> <code>k</code>.</p>\n\n<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1], k = 2\n<strong>Output:</strong> 2\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3], k = 3\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>-10<sup>7</sup> &lt;= k &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 20476,
            "dislikes": 611,
            "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Continuous Subarray Sum\", \"titleSlug\": \"continuous-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarray Product Less Than K\", \"titleSlug\": \"subarray-product-less-than-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Pivot Index\", \"titleSlug\": \"find-pivot-index\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Subarray Sums Divisible by K\", \"titleSlug\": \"subarray-sums-divisible-by-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Reduce X to Zero\", \"titleSlug\": \"minimum-operations-to-reduce-x-to-zero\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Radius Subarray Averages\", \"titleSlug\": \"k-radius-subarray-averages\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Sum Score of Array\", \"titleSlug\": \"maximum-sum-score-of-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.1M\", \"totalSubmission\": \"2.6M\", \"totalAcceptedRaw\": 1109834, \"totalSubmissionRaw\": 2565072, \"acRate\": \"43.3%\"}",
            "hints": [
                "Will Brute force work here? Try to optimize it.",
                "Can we optimize it by using some extra space?",
                "What about storing sum frequencies in a hash table? Will it be useful?",
                "sum(i,j)=sum(0,j)-sum(0,i), where sum(i,j) represents the sum of all the elements from index i to j-1.\r\n\r\nCan we use this property to optimize it."
            ],
            "rephrased": {
                "body": "Given an array of integers `nums` and an integer `k`, find the number of contiguous non-empty subarrays within `nums` whose elements sum up to `k`.",
                "constraints": [
                    "1 <= nums.length <= 2 * 10^4",
                    "-1000 <= nums[i] <= 1000",
                    "-10^7 <= k <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,1,1], k = 2",
                        "output": "2",
                        "explanation": "There are two subarrays that sum to 2: [1, 1] and [1,1]."
                    },
                    {
                        "input": "nums = [1,2,3], k = 3",
                        "output": "2",
                        "explanation": "There are two subarrays that sum to 3: [1, 2] and [3]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "two-sum",
                "title": "Two Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "continuous-subarray-sum",
                "title": "Continuous Subarray Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "subarray-product-less-than-k",
                "title": "Subarray Product Less Than K",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-pivot-index",
                "title": "Find Pivot Index",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "subarray-sums-divisible-by-k",
                "title": "Subarray Sums Divisible by K",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-reduce-x-to-zero",
                "title": "Minimum Operations to Reduce X to Zero",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "k-radius-subarray-averages",
                "title": "K Radius Subarray Averages",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-sum-score-of-array",
                "title": "Maximum Sum Score of Array",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Will Brute force work here? Try to optimize it.",
            "Can we optimize it by using some extra space?",
            "What about storing sum frequencies in a hash table? Will it be useful?",
            "sum(i,j)=sum(0,j)-sum(0,i), where sum(i,j) represents the sum of all the elements from index i to j-1.\r\n\r\nCan we use this property to optimize it."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int subarraySum(vector<int>& nums, int k) {\n    int ans = 0;\n    int prefix = 0;\n    unordered_map<int, int> count{{0, 1}};  // {prefix sum: count}\n\n    for (const int num : nums) {\n      prefix += num;\n      const int target = prefix - k;\n      if (const auto it = count.find(target); it != count.cend())\n        ans += it->second;\n      ++count[prefix];\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int subarraySum(int[] nums, int k) {\n    int ans = 0;\n    int prefix = 0;\n    Map<Integer, Integer> count = new HashMap<>();\n    count.put(0, 1);\n\n    for (final int num : nums) {\n      prefix += num;\n      ans += count.getOrDefault(prefix - k, 0);\n      count.merge(prefix, 1, Integer::sum);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def subarraySum(self, nums: List[int], k: int) -> int:\n    ans = 0\n    prefix = 0\n    count = collections.Counter({0: 1})\n\n    for num in nums:\n      prefix += num\n      ans += count[prefix - k]\n      count[prefix] += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}