{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2334",
            "title": "Subarray With Elements Greater Than Varying Threshold",
            "titleSlug": "subarray-with-elements-greater-than-varying-threshold",
            "content": "<p>You are given an integer array <code>nums</code> and an integer <code>threshold</code>.</p>\n\n<p>Find any subarray of <code>nums</code> of length <code>k</code> such that <strong>every</strong> element in the subarray is <strong>greater</strong> than <code>threshold / k</code>.</p>\n\n<p>Return<em> the <strong>size</strong> of <strong>any</strong> such subarray</em>. If there is no such subarray, return <code>-1</code>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,4,3,1], threshold = 6\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2.\nNote that this is the only valid subarray.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,5,6,5,8], threshold = 7\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The subarray [8] has a size of 1, and 8 &gt; 7 / 1 = 7. So 1 is returned.\nNote that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. \nSimilarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions.\nTherefore, 2, 3, 4, or 5 may also be returned.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], threshold &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 510,
            "dislikes": 6,
            "similarQuestions": "[{\"title\": \"Maximum Subarray Min-Product\", \"titleSlug\": \"maximum-subarray-min-product\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest K-Length Subsequence With Occurrences of a Letter\", \"titleSlug\": \"smallest-k-length-subsequence-with-occurrences-of-a-letter\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"K Divisible Elements Subarrays\", \"titleSlug\": \"k-divisible-elements-subarrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"7.7K\", \"totalSubmission\": \"18.1K\", \"totalAcceptedRaw\": 7690, \"totalSubmissionRaw\": 18101, \"acRate\": \"42.5%\"}",
            "hints": [
                "For all elements to be greater than the threshold/length, the minimum element in the subarray must be greater than the threshold/length.",
                "For a given index, could you find the largest subarray such that the given index is the minimum element?",
                "Could you use a monotonic stack to get the next and previous smallest element for every index?"
            ],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `threshold`, find any subarray of `nums` of length `k` such that every element in the subarray is greater than `threshold / k`. Return the size of any such subarray. If no such subarray exists, return `-1`.\n\nA subarray is a contiguous non-empty sequence of elements within an array.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i], threshold <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,3,4,3,1], threshold = 6",
                        "output": "3",
                        "explanation": "The subarray [3,4,3] has a size of 3, and each element (3, 4, and 3) is greater than 6 / 3 = 2. This is the only valid subarray in this example."
                    },
                    {
                        "input": "nums = [6,5,6,5,8], threshold = 7",
                        "output": "1",
                        "explanation": "The subarray [8] has a size of 1, and 8 > 7 / 1 = 7. Therefore, 1 is a valid result. Note that other valid subarrays exist, such as [6,5] (size 2), [6,5,6] (size 3), etc., but the problem asks for the size of *any* such subarray."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-subarray-min-product",
                "title": "Maximum Subarray Min-Product",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
                "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "k-divisible-elements-subarrays",
                "title": "K Divisible Elements Subarrays",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "For all elements to be greater than the threshold/length, the minimum element in the subarray must be greater than the threshold/length.",
            "For a given index, could you find the largest subarray such that the given index is the minimum element?",
            "Could you use a monotonic stack to get the next and previous smallest element for every index?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  // Similar to 907. Sum of Subarray Minimums\n  int validSubarraySize(vector<int>& nums, int threshold) {\n    const int n = nums.size();\n    // prev[i] := index k s.t. nums[k] is the prev min in nums[:i]\n    vector<int> prev(n, -1);\n    // next[i] := index k s.t. nums[k] is the next min in nums[i + 1:]\n    vector<int> next(n, n);\n    stack<int> stack;\n\n    for (int i = 0; i < n; ++i) {\n      while (!stack.empty() && nums[stack.top()] > nums[i]) {\n        const int index = stack.top();\n        stack.pop();\n        next[index] = i;\n      }\n      if (!stack.empty())\n        prev[i] = stack.top();\n      stack.push(i);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      // # of nums in subarray containing nums[i] >= nums[i]\n      const int k = (i - prev[i]) + (next[i] - i) - 1;\n      if (nums[i] > threshold / static_cast<double>(k))\n        return k;\n    }\n\n    return -1;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  // Similar to 907. Sum of Subarray Minimums\n  public int validSubarraySize(int[] nums, int threshold) {\n    final int n = nums.length;\n    long ans = 0;\n    // prev[i] := index k s.t. nums[k] is the prev min in nums[:i]\n    int[] prev = new int[n];\n    // next[i] := index k s.t. nums[k] is the next min in nums[i + 1:]\n    int[] next = new int[n];\n    Deque<Integer> stack = new ArrayDeque<>();\n\n    Arrays.fill(prev, -1);\n    Arrays.fill(next, n);\n\n    for (int i = 0; i < nums.length; ++i) {\n      while (!stack.isEmpty() && nums[stack.peek()] > nums[i]) {\n        final int index = stack.pop();\n        next[index] = i;\n      }\n      if (!stack.isEmpty())\n        prev[i] = stack.peek();\n      stack.push(i);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      // # of nums in subarray containing nums[i] >= nums[i]\n      final int k = (i - prev[i]) + (next[i] - i) - 1;\n      if (nums[i] > threshold / (double) k)\n        return k;\n    }\n\n    return -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  # Similar to 907. Sum of Subarray Minimums\n  def validSubarraySize(self, nums: List[int], threshold: int) -> int:\n    n = len(nums)\n    ans = 0\n    # prev[i] := index k s.t. nums[k] is the prev min in nums[:i]\n    prev = [-1] * n\n    # next[i] := index k s.t. nums[k] is the next min in nums[i + 1:]\n    next = [n] * n\n    stack = []\n\n    for i, a in enumerate(nums):\n      while stack and nums[stack[-1]] > a:\n        index = stack.pop()\n        next[index] = i\n      if stack:\n        prev[i] = stack[-1]\n      stack.append(i)\n\n    for i, (num, prevIndex, nextIndex) in enumerate(zip(nums, prev, next)):\n      k = (i - prevIndex) + (nextIndex - i) - 1\n      if num > threshold / k:\n        return k\n\n    return -1\n",
                "lang_text": "py"
            }
        }
    }
}