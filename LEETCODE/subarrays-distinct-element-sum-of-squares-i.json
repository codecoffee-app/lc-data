{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2913",
            "title": "Subarrays Distinct Element Sum of Squares I",
            "titleSlug": "subarrays-distinct-element-sum-of-squares-i",
            "content": "<p>You are given a <strong>0-indexed </strong>integer array <code>nums</code>.</p>\n\n<p>The <strong>distinct count</strong> of a subarray of <code>nums</code> is defined as:</p>\n\n<ul>\n\t<li>Let <code>nums[i..j]</code> be a subarray of <code>nums</code> consisting of all the indices from <code>i</code> to <code>j</code> such that <code>0 &lt;= i &lt;= j &lt; nums.length</code>. Then the number of distinct values in <code>nums[i..j]</code> is called the distinct count of <code>nums[i..j]</code>.</li>\n</ul>\n\n<p>Return <em>the sum of the <strong>squares</strong> of <strong>distinct counts</strong> of all subarrays of </em><code>nums</code>.</p>\n\n<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1]\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 1<sup>2</sup> + 1<sup>2</sup> + 1<sup>2</sup> + 2<sup>2</sup> + 2<sup>2</sup> + 2<sup>2</sup> = 15.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Three possible subarrays are:\n[1]: 1 distinct value\n[1]: 1 distinct value\n[1,1]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 1<sup>2</sup> + 1<sup>2</sup> + 1<sup>2</sup> = 3.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 139,
            "dislikes": 27,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                }
            ],
            "stats": "{\"totalAccepted\": \"31.5K\", \"totalSubmission\": \"38.1K\", \"totalAcceptedRaw\": 31514, \"totalSubmissionRaw\": 38110, \"acRate\": \"82.7%\"}",
            "hints": [
                "Use a set/heap to keep track of distinct element counts."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums`, calculate the sum of the squares of the distinct counts of all its subarrays. The distinct count of a subarray is the number of unique values within that subarray. A subarray is a contiguous non-empty sequence of elements within the array.",
                "constraints": [
                    "1 <= nums.length <= 100",
                    "1 <= nums[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1,2,1]",
                        "output": "15",
                        "explanation": "The subarrays are [1], [2], [1], [1,2], [2,1], and [1,2,1]. Their distinct counts are 1, 1, 1, 2, 2, and 2, respectively. The sum of the squares of these distinct counts is 1^2 + 1^2 + 1^2 + 2^2 + 2^2 + 2^2 = 1 + 1 + 1 + 4 + 4 + 4 = 15."
                    },
                    {
                        "input": "[1,1]",
                        "output": "3",
                        "explanation": "The subarrays are [1], [1], and [1,1]. Their distinct counts are 1, 1, and 1, respectively. The sum of the squares of these distinct counts is 1^2 + 1^2 + 1^2 = 1 + 1 + 1 = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use a set/heap to keep track of distinct element counts."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class SegmentTree {\n public:\n  SegmentTree(int n, int kMod)\n      : n(n), kMod(kMod), lazy(4 * n), sums(4 * n), squaredSums(4 * n) {}\n\n  void updateRange(int l, int r) {\n    return updateRange(/*i=*/0, /*start=*/0, /*end=*/n - 1, l, r);\n  }\n\n  void propagate(int i, int l, int r) {\n    const int gap = r - l + 1;\n    // (a + L)^2 + (b + L)^2 + (c + L)^2, where L = lazy[i]\n    // a^2 + b^2 + c^2 + 2 * L (a + b + c) + L^2 * gap, where gap = 3\n    squaredSums[i] += 2 * lazy[i] * sums[i] + lazy[i] * lazy[i] * gap;\n    squaredSums[i] %= kMod;\n    sums[i] += lazy[i] * gap;\n    sums[i] %= kMod;\n    if (l < r) {\n      lazy[i * 2 + 1] += lazy[i];\n      lazy[i * 2 + 2] += lazy[i];\n    }\n    lazy[i] = 0;\n  }\n\n  int getTreeSquaredSums() {\n    return squaredSums[0];\n  }\n\n private:\n  const int kMod;\n  const int n;\n  vector<long> lazy;\n  vector<long> sums;\n  vector<long> squaredSums;\n\n  void updateRange(int i, int start, int end, int l, int r) {\n    if (lazy[i] > 0)\n      propagate(i, start, end);\n    if (end < l || start > r)\n      return;\n    if (start >= l && end <= r) {\n      lazy[i] = 1;\n      propagate(i, start, end);\n      return;\n    }\n    const int mid = (start + end) / 2;\n    updateRange(i * 2 + 1, start, mid, l, r);\n    updateRange(i * 2 + 2, mid + 1, end, l, r);\n    sums[i] = (sums[i * 2 + 1] + sums[i * 2 + 2]) % kMod;\n    squaredSums[i] = (squaredSums[i * 2 + 1] + squaredSums[i * 2 + 2]) % kMod;\n  }\n};\n\nclass Solution {\n public:\n  int sumCounts(vector<int>& nums) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = nums.size();\n    int ans = 0;\n    unordered_map<int, int> lastSeen;\n    SegmentTree tree(n, kMod);\n\n    for (int r = 0; r < n; ++r) {\n      const int l = lastSeen.count(nums[r]) ? lastSeen[nums[r]] + 1 : 0;\n      tree.updateRange(l, r);\n      lastSeen[nums[r]] = r;\n      ans = (ans + tree.getTreeSquaredSums()) % kMod;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            }
        }
    }
}