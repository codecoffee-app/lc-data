{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1476",
            "title": "Subrectangle Queries",
            "titleSlug": "subrectangle-queries",
            "content": "<p>Implement the class <code>SubrectangleQueries</code>&nbsp;which receives a <code>rows x cols</code> rectangle as a matrix of integers in the constructor and supports two methods:</p>\n\n<p>1.<code>&nbsp;updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)</code></p>\n\n<ul>\n\t<li>Updates all values with <code>newValue</code> in the subrectangle whose upper left coordinate is <code>(row1,col1)</code> and bottom right coordinate is <code>(row2,col2)</code>.</li>\n</ul>\n\n<p>2.<code>&nbsp;getValue(int row, int col)</code></p>\n\n<ul>\n\t<li>Returns the current value of the coordinate <code>(row,col)</code> from&nbsp;the rectangle.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;SubrectangleQueries&quot;,&quot;getValue&quot;,&quot;updateSubrectangle&quot;,&quot;getValue&quot;,&quot;getValue&quot;,&quot;updateSubrectangle&quot;,&quot;getValue&quot;,&quot;getValue&quot;]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]\n<strong>Output</strong>\n[null,1,null,5,5,null,10,5]\n<strong>Explanation</strong>\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5 \nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5   5   5\n// 5   5   5\n// 5   5   5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;SubrectangleQueries&quot;,&quot;getValue&quot;,&quot;updateSubrectangle&quot;,&quot;getValue&quot;,&quot;getValue&quot;,&quot;updateSubrectangle&quot;,&quot;getValue&quot;]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]\n<strong>Output</strong>\n[null,1,null,100,100,null,20]\n<strong>Explanation</strong>\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>There will be at most <code><font face=\"monospace\">500</font></code>&nbsp;operations considering both methods:&nbsp;<code>updateSubrectangle</code> and <code>getValue</code>.</li>\n\t<li><code>1 &lt;= rows, cols &lt;= 100</code></li>\n\t<li><code>rows ==&nbsp;rectangle.length</code></li>\n\t<li><code>cols == rectangle[i].length</code></li>\n\t<li><code>0 &lt;= row1 &lt;= row2 &lt; rows</code></li>\n\t<li><code>0 &lt;= col1 &lt;= col2 &lt; cols</code></li>\n\t<li><code>1 &lt;= newValue, rectangle[i][j] &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= row &lt; rows</code></li>\n\t<li><code>0 &lt;= col &lt; cols</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 597,
            "dislikes": 1407,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"99.7K\", \"totalSubmission\": \"113.1K\", \"totalAcceptedRaw\": 99707, \"totalSubmissionRaw\": 113054, \"acRate\": \"88.2%\"}",
            "hints": [
                "Use brute force to update a rectangle and, response to the queries in O(1)."
            ],
            "rephrased": {
                "body": "Implement a `SubrectangleQueries` class that manages a 2D integer matrix. The class should support:\n\n*   **Initialization:** Takes a `rows x cols` integer matrix as input.\n*   **`updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`:** Updates all values within the subrectangle defined by the upper-left corner `(row1, col1)` and the bottom-right corner `(row2, col2)` to `newValue`.\n*   **`getValue(int row, int col)`:** Returns the current value at the coordinate `(row, col)` in the matrix.",
                "constraints": [
                    "There will be at most 500 operations considering both methods: `updateSubrectangle` and `getValue`.",
                    "1 <= rows, cols <= 100",
                    "rows == rectangle.length",
                    "cols == rectangle[i].length",
                    "0 <= row1 <= row2 < rows",
                    "0 <= col1 <= col2 < cols",
                    "1 <= newValue, rectangle[i][j] <= 10^9",
                    "0 <= row < rows",
                    "0 <= col < cols"
                ],
                "testcases": [
                    {
                        "input": "[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]",
                        "output": "[null,1,null,5,5,null,10,5]",
                        "explanation": "Initially, the rectangle is [[1,2,1],[4,3,4],[3,2,1],[1,1,1]]. `getValue(0,2)` returns 1. After `updateSubrectangle(0,0,3,2,5)`, the rectangle becomes [[5,5,5],[5,5,5],[5,5,5],[5,5,5]]. `getValue(0,2)` returns 5, and `getValue(3,1)` returns 5. After `updateSubrectangle(3,0,3,2,10)`, the rectangle becomes [[5,5,5],[5,5,5],[5,5,5],[10,10,10]]. `getValue(3,1)` returns 10, and `getValue(0,2)` returns 5."
                    },
                    {
                        "input": "[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]",
                        "output": "[null,1,null,100,100,null,20]",
                        "explanation": "Initially, the rectangle is [[1,1,1],[2,2,2],[3,3,3]]. `getValue(0,0)` returns 1. After `updateSubrectangle(0,0,2,2,100)`, the rectangle becomes [[100,100,100],[100,100,100],[100,100,100]]. `getValue(0,0)` and `getValue(2,2)` both return 100. After `updateSubrectangle(1,1,2,2,20)`, the rectangle becomes [[100,100,100],[100,20,20],[100,20,20]]. `getValue(2,2)` returns 20."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use brute force to update a rectangle and, response to the queries in O(1)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class SubrectangleQueries {\n public:\n  SubrectangleQueries(vector<vector<int>>& rectangle) : rectangle(rectangle) {}\n\n  void updateSubrectangle(int row1, int col1, int row2, int col2,\n                          int newValue) {\n    updates.push_back({row1, col1, row2, col2, newValue});\n  }\n\n  int getValue(int row, int col) {\n    for (int i = updates.size() - 1; i >= 0; --i) {\n      auto [r1, c1, r2, c2, v] = updates[i];\n      if (r1 <= row && row <= r2 && c1 <= col && col <= c2)\n        return v;\n    }\n    return rectangle[row][col];\n  }\n\n private:\n  const vector<vector<int>>& rectangle;\n  vector<array<int, 5>> updates;  // [r1, c1, r2, c2, v]\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class SubrectangleQueries {\n  public SubrectangleQueries(int[][] rectangle) {\n    this.rectangle = rectangle;\n  }\n\n  public void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {\n    updates.add(new int[] {row1, col1, row2, col2, newValue});\n  }\n\n  public int getValue(int row, int col) {\n    for (int i = updates.size() - 1; i >= 0; --i) {\n      int[] update = updates.get(i);\n      final int r1 = update[0];\n      final int c1 = update[1];\n      final int r2 = update[2];\n      final int c2 = update[3];\n      final int v = update[4];\n      if (r1 <= row && row <= r2 && c1 <= col && col <= c2)\n        return v;\n    }\n    return rectangle[row][col];\n  }\n\n  private int[][] rectangle;\n  private List<int[]> updates = new ArrayList<>(); // [r1, c1, r2, c2, v]\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class SubrectangleQueries:\n  def __init__(self, rectangle: List[List[int]]):\n    self.rectangle = rectangle\n    self.updates = []\n\n  def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n    self.updates.append((row1, col1, row2, col2, newValue))\n\n  def getValue(self, row: int, col: int) -> int:\n    for r1, c1, r2, c2, v in reversed(self.updates):\n      if r1 <= row <= r2 and c1 <= col <= c2:\n        return v\n    return self.rectangle[row][col]\n",
                "lang_text": "py"
            }
        }
    }
}