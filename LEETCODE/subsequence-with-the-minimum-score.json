{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2565",
            "title": "Subsequence With the Minimum Score",
            "titleSlug": "subsequence-with-the-minimum-score",
            "content": "<p>You are given two strings <code>s</code> and <code>t</code>.</p>\n\n<p>You are allowed to remove any number of characters from the string <code>t</code>.</p>\n\n<p>The score of the string is <code>0</code> if no characters are removed from the string <code>t</code>, otherwise:</p>\n\n<ul>\n\t<li>Let <code>left</code> be the minimum index among all removed characters.</li>\n\t<li>Let <code>right</code> be the maximum index among all removed characters.</li>\n</ul>\n\n<p>Then the score of the string is <code>right - left + 1</code>.</p>\n\n<p>Return <em>the minimum possible score to make </em><code>t</code><em>&nbsp;a subsequence of </em><code>s</code><em>.</em></p>\n\n<p>A <strong>subsequence</strong> of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;<u>a</u>b<u>c</u>d<u>e</u>&quot;</code> while <code>&quot;aec&quot;</code> is not).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abacaba&quot;, t = &quot;bzaa&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In this example, we remove the character &quot;z&quot; at index 1 (0-indexed).\nThe string t becomes &quot;baa&quot; which is a subsequence of the string &quot;abacaba&quot; and the score is 1 - 1 + 1 = 1.\nIt can be proven that 1 is the minimum score that we can achieve.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cde&quot;, t = &quot;xyz&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> In this example, we remove characters &quot;x&quot;, &quot;y&quot; and &quot;z&quot; at indices 0, 1, and 2 (0-indexed).\nThe string t becomes &quot;&quot; which is a subsequence of the string &quot;cde&quot; and the score is 2 - 0 + 1 = 3.\nIt can be proven that 3 is the minimum score that we can achieve.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 352,
            "dislikes": 6,
            "similarQuestions": "[{\"title\": \"Longest Common Subsequence\", \"titleSlug\": \"longest-common-subsequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.2K\", \"totalSubmission\": \"19.9K\", \"totalAcceptedRaw\": 6170, \"totalSubmissionRaw\": 19865, \"acRate\": \"31.1%\"}",
            "hints": [
                "Maintain two pointers: i and j. We need to perform a similar operation: while t[0:i] + t[j:n] is not a subsequence of the string s, increase j.",
                "We can check the condition greedily. Create the array leftmost[i] which denotes minimum index k, such that in prefix s[0:k] exists subsequence t[0:i]. Similarly, we define rightmost[i].",
                "If leftmost[i] < rightmost[j] then t[0:i] + t[j:n] is the subsequence of s."
            ],
            "rephrased": {
                "body": "Given two strings `s` and `t`, you are allowed to remove any number of characters from `t`. The score is calculated as `right - left + 1`, where `left` and `right` are the minimum and maximum indices (0-indexed) of the removed characters, respectively. If no characters are removed, the score is 0. Find the minimum possible score to make `t` a subsequence of `s`.",
                "constraints": [
                    "1 <= s.length, t.length <= 10^5",
                    "s and t consist of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"abacaba\", t = \"bzaa\"",
                        "output": "1",
                        "explanation": "Removing the character \"z\" at index 1 transforms `t` into \"baa\", which is a subsequence of `s`. The score is 1 - 1 + 1 = 1. This is the minimum achievable score."
                    },
                    {
                        "input": "s = \"cde\", t = \"xyz\"",
                        "output": "3",
                        "explanation": "Removing \"x\", \"y\", and \"z\" at indices 0, 1, and 2 transforms `t` into \"\", which is a subsequence of `s`. The score is 2 - 0 + 1 = 3. This is the minimum achievable score."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "longest-common-subsequence",
                "title": "Longest Common Subsequence",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Maintain two pointers: i and j. We need to perform a similar operation: while t[0:i] + t[j:n] is not a subsequence of the string s, increase j.",
            "We can check the condition greedily. Create the array leftmost[i] which denotes minimum index k, such that in prefix s[0:k] exists subsequence t[0:i]. Similarly, we define rightmost[i].",
            "If leftmost[i] < rightmost[j] then t[0:i] + t[j:n] is the subsequence of s."
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumScore(self, s: str, t: str) -> int:\n    # leftmost[j] := min index i s.t. t[0..j] is a subseq of s[0..i].\n    #          -1 := impossible\n    leftmost = [-1] * len(t)\n    # rightmost[j] := max index i s.t. t[j:] is a subseq of s[i:].\n    #           -1 := impossible\n    rightmost = [-1] * len(t)\n\n    j = 0  # t's index\n    for i in range(len(s)):\n      if s[i] == t[j]:\n        leftmost[j] = i\n        j += 1\n        if j == len(t):\n          break\n\n    j = len(t) - 1  # t's index\n    for i in reversed(range(len(s))):\n      if s[i] == t[j]:\n        rightmost[j] = i\n        j -= 1\n        if j == -1:\n          break\n\n    # The worst case is to delete t[0:j] since t[j:] is a subseq of s. (deduced\n    # from the above loop).\n    ans = j + 1\n\n    j = 0\n    for i in range(len(t)):\n      # It's impossible that t[0..i] is a subseq of s. So, stop the loop since\n      # no need to consider any larger i.\n      if leftmost[i] == -1:\n        break\n      # While t[0..i] + t[j:] is not a subseq of s, increase j.\n      while j < len(t) and leftmost[i] >= rightmost[j]:\n        j += 1\n      # Now, leftmost[i] < rightmost[j], so t[0..i] + t[j:n] is a subseq of s.\n      # If i == j that means t is a subseq of s, so just return 0.\n      if i == j:\n        return 0\n      # Delete t[i + 1..j - 1] and that's a total of j - i - 1 letters.\n      ans = min(ans, j - i - 1)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}