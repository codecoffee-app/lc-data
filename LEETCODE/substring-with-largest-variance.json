{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2272",
            "title": "Substring With Largest Variance",
            "titleSlug": "substring-with-largest-variance",
            "content": "<p>The <strong>variance</strong> of a string is defined as the largest difference between the number of occurrences of <strong>any</strong> <code>2</code> characters present in the string. Note the two characters may or may not be the same.</p>\n\n<p>Given a string <code>s</code> consisting of lowercase English letters only, return <em>the <strong>largest variance</strong> possible among all <strong>substrings</strong> of</em> <code>s</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aababbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nAll possible variances along with their respective substrings are listed below:\n- Variance 0 for substrings &quot;a&quot;, &quot;aa&quot;, &quot;ab&quot;, &quot;abab&quot;, &quot;aababb&quot;, &quot;ba&quot;, &quot;b&quot;, &quot;bb&quot;, and &quot;bbb&quot;.\n- Variance 1 for substrings &quot;aab&quot;, &quot;aba&quot;, &quot;abb&quot;, &quot;aabab&quot;, &quot;ababb&quot;, &quot;aababbb&quot;, and &quot;bab&quot;.\n- Variance 2 for substrings &quot;aaba&quot;, &quot;ababbb&quot;, &quot;abbb&quot;, and &quot;babb&quot;.\n- Variance 3 for substring &quot;babbb&quot;.\nSince the largest possible variance is 3, we return it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcde&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nNo letter occurs more than once in s, so the variance of every substring is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1821,
            "dislikes": 205,
            "similarQuestions": "[{\"title\": \"Maximum Subarray\", \"titleSlug\": \"maximum-subarray\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"65.9K\", \"totalSubmission\": \"141.7K\", \"totalAcceptedRaw\": 65885, \"totalSubmissionRaw\": 141673, \"acRate\": \"46.5%\"}",
            "hints": [
                "Think about how to solve the problem if the string had only two distinct characters.",
                "If we replace all occurrences of the first character by +1 and those of the second character by -1, can we efficiently calculate the largest possible variance of a string with only two distinct characters?",
                "Now, try finding the optimal answer by taking all possible pairs of characters into consideration."
            ],
            "rephrased": {
                "body": "The variance of a string is defined as the largest difference between the number of occurrences of any two characters present in the string. Note that the two characters may or may not be the same.\n\nGiven a string `s` consisting of lowercase English letters only, return the largest variance possible among all substrings of `s`.\n\nA substring is a contiguous sequence of characters within a string.",
                "constraints": [
                    "1 <= s.length <= 10<sup>4</sup>",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "aababbb",
                        "output": "3",
                        "explanation": "The largest variance is achieved by the substring \"babbb\". In this substring, the character 'b' appears 4 times and the character 'a' appears 1 time. The variance is therefore 4 - 1 = 3."
                    },
                    {
                        "input": "abcde",
                        "output": "0",
                        "explanation": "Since no letter occurs more than once in the string, the variance of every substring is 0."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-subarray",
                "title": "Maximum Subarray",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think about how to solve the problem if the string had only two distinct characters.",
            "If we replace all occurrences of the first character by +1 and those of the second character by -1, can we efficiently calculate the largest possible variance of a string with only two distinct characters?",
            "Now, try finding the optimal answer by taking all possible pairs of characters into consideration."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int largestVariance(string s) {\n    int ans = 0;\n\n    for (char a = 'a'; a <= 'z'; ++a)\n      for (char b = 'a'; b <= 'z'; ++b)\n        if (a != b)\n          ans = max(ans, kadane(s, a, b));\n\n    return ans;\n  }\n\n private:\n  // a := the char w/ higher freq\n  // b := the char w/ lower freq\n  int kadane(const string& s, char a, char b) {\n    int ans = 0;\n    int countA = 0;\n    int countB = 0;\n    bool canExtendPrevB = false;\n\n    for (const char c : s) {\n      if (c != a && c != b)\n        continue;\n      if (c == a)\n        ++countA;\n      else\n        ++countB;\n      if (countB > 0) {\n        // An interval should contain at least one b.\n        ans = max(ans, countA - countB);\n      } else if (countB == 0 && canExtendPrevB) {\n        // Edge case: consider the previous b.\n        ans = max(ans, countA - 1);\n      }\n      // Reset if # of b > # of a.\n      if (countB > countA) {\n        countA = 0;\n        countB = 0;\n        canExtendPrevB = true;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int largestVariance(String s) {\n    int ans = 0;\n\n    for (char a = 'a'; a <= 'z'; ++a)\n      for (char b = 'a'; b <= 'z'; ++b)\n        if (a != b)\n          ans = Math.max(ans, kadane(s, a, b));\n\n    return ans;\n  }\n\n  // a := the char w/ higher freq\n  // b := the char w/ lower freq\n  private int kadane(final String s, char a, char b) {\n    int ans = 0;\n    int countA = 0;\n    int countB = 0;\n    boolean canExtendPrevB = false;\n\n    for (final char c : s.toCharArray()) {\n      if (c != a && c != b)\n        continue;\n      if (c == a)\n        ++countA;\n      else\n        ++countB;\n      if (countB > 0) {\n        // An interval should contain at least one b.\n        ans = Math.max(ans, countA - countB);\n      } else if (countB == 0 && canExtendPrevB) {\n        // Edge case: consider the previous b\n        ans = Math.max(ans, countA - 1);\n      }\n      // Reset if # of b > # of a.\n      if (countB > countA) {\n        countA = 0;\n        countB = 0;\n        canExtendPrevB = true;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def largestVariance(self, s: str) -> int:\n    # a := the char w/ higher freq\n    # b := the char w/ lower freq\n    def kadane(a: str, b: str) -> int:\n      ans = 0\n      countA = 0\n      countB = 0\n      canExtendPrevB = False\n\n      for c in s:\n        if c != a and c != b:\n          continue\n        if c == a:\n          countA += 1\n        else:\n          countB += 1\n        if countB > 0:\n          # An interval should contain at least one b.\n          ans = max(ans, countA - countB)\n        elif countB == 0 and canExtendPrevB:\n          # Edge case: consider the previous b.\n          ans = max(ans, countA - 1)\n        # Reset if # of b > # of a.\n        if countB > countA:\n          countA = 0\n          countB = 0\n          canExtendPrevB = True\n\n      return ans\n\n    return max(kadane(a, b)\n               for a in string.ascii_lowercase\n               for b in string.ascii_lowercase\n               if a != b)\n",
                "lang_text": "py"
            }
        }
    }
}