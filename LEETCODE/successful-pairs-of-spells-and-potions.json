{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2300",
            "title": "Successful Pairs of Spells and Potions",
            "titleSlug": "successful-pairs-of-spells-and-potions",
            "content": "<p>You are given two positive integer arrays <code>spells</code> and <code>potions</code>, of length <code>n</code> and <code>m</code> respectively, where <code>spells[i]</code> represents the strength of the <code>i<sup>th</sup></code> spell and <code>potions[j]</code> represents the strength of the <code>j<sup>th</sup></code> potion.</p>\n\n<p>You are also given an integer <code>success</code>. A spell and potion pair is considered <strong>successful</strong> if the <strong>product</strong> of their strengths is <strong>at least</strong> <code>success</code>.</p>\n\n<p>Return <em>an integer array </em><code>pairs</code><em> of length </em><code>n</code><em> where </em><code>pairs[i]</code><em> is the number of <strong>potions</strong> that will form a successful pair with the </em><code>i<sup>th</sup></code><em> spell.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> spells = [5,1,3], potions = [1,2,3,4,5], success = 7\n<strong>Output:</strong> [4,0,3]\n<strong>Explanation:</strong>\n- 0<sup>th</sup> spell: 5 * [1,2,3,4,5] = [5,<u><strong>10</strong></u>,<u><strong>15</strong></u>,<u><strong>20</strong></u>,<u><strong>25</strong></u>]. 4 pairs are successful.\n- 1<sup>st</sup> spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.\n- 2<sup>nd</sup> spell: 3 * [1,2,3,4,5] = [3,6,<u><strong>9</strong></u>,<u><strong>12</strong></u>,<u><strong>15</strong></u>]. 3 pairs are successful.\nThus, [4,0,3] is returned.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> spells = [3,1,2], potions = [8,5,8], success = 16\n<strong>Output:</strong> [2,0,2]\n<strong>Explanation:</strong>\n- 0<sup>th</sup> spell: 3 * [8,5,8] = [<u><strong>24</strong></u>,15,<u><strong>24</strong></u>]. 2 pairs are successful.\n- 1<sup>st</sup> spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. \n- 2<sup>nd</sup> spell: 2 * [8,5,8] = [<strong><u>16</u></strong>,10,<u><strong>16</strong></u>]. 2 pairs are successful. \nThus, [2,0,2] is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == spells.length</code></li>\n\t<li><code>m == potions.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= spells[i], potions[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= success &lt;= 10<sup>10</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2417,
            "dislikes": 63,
            "similarQuestions": "[{\"title\": \"Most Profit Assigning Work\", \"titleSlug\": \"most-profit-assigning-work\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Subsequence With Limited Sum\", \"titleSlug\": \"longest-subsequence-with-limited-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Matching of Players With Trainers\", \"titleSlug\": \"maximum-matching-of-players-with-trainers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"121.3K\", \"totalSubmission\": \"288.1K\", \"totalAcceptedRaw\": 121331, \"totalSubmissionRaw\": 288064, \"acRate\": \"42.1%\"}",
            "hints": [
                "Notice that if a spell and potion pair is successful, then the spell and all stronger potions will be successful too.",
                "Thus, for each spell, we need to find the potion with the least strength that will form a successful pair.",
                "We can efficiently do this by sorting the potions based on strength and using binary search."
            ],
            "rephrased": {
                "body": "Given two positive integer arrays, `spells` (length `n`) and `potions` (length `m`), where `spells[i]` is the strength of the i-th spell and `potions[j]` is the strength of the j-th potion.  Also given an integer `success`. A spell and potion pair is considered successful if the product of their strengths is at least `success`. Return an integer array `pairs` of length `n` where `pairs[i]` is the number of potions that will form a successful pair with the i-th spell.",
                "constraints": [
                    "n == spells.length",
                    "m == potions.length",
                    "1 <= n, m <= 10^5",
                    "1 <= spells[i], potions[i] <= 10^5",
                    "1 <= success <= 10^10"
                ],
                "testcases": [
                    {
                        "input": "spells = [5,1,3], potions = [1,2,3,4,5], success = 7",
                        "output": "[4,0,3]",
                        "explanation": "For the 0th spell (strength 5), the products with potions are [5, 10, 15, 20, 25]. 4 of these are >= 7. For the 1st spell (strength 1), the products with potions are [1, 2, 3, 4, 5]. None of these are >= 7. For the 2nd spell (strength 3), the products with potions are [3, 6, 9, 12, 15]. 3 of these are >= 7."
                    },
                    {
                        "input": "spells = [3,1,2], potions = [8,5,8], success = 16",
                        "output": "[2,0,2]",
                        "explanation": "For the 0th spell (strength 3), the products with potions are [24, 15, 24]. 2 of these are >= 16. For the 1st spell (strength 1), the products with potions are [8, 5, 8]. None of these are >= 16. For the 2nd spell (strength 2), the products with potions are [16, 10, 16]. 2 of these are >= 16."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "most-profit-assigning-work",
                "title": "Most Profit Assigning Work",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "longest-subsequence-with-limited-sum",
                "title": "Longest Subsequence With Limited Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-matching-of-players-with-trainers",
                "title": "Maximum Matching of Players With Trainers",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Notice that if a spell and potion pair is successful, then the spell and all stronger potions will be successful too.",
            "Thus, for each spell, we need to find the potion with the least strength that will form a successful pair.",
            "We can efficiently do this by sorting the potions based on strength and using binary search."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> successfulPairs(vector<int>& spells, vector<int>& potions,\n                              long long success) {\n    vector<int> ans;\n    std::ranges::sort(potions);\n\n    for (const int spell : spells)\n      ans.push_back(potions.size() -\n                    firstIndexSuccess(spell, potions, success));\n\n    return ans;\n  }\n\n private:\n  // Returns the first index i s.t. spell * potions[i] >= success.\n  int firstIndexSuccess(int spell, const vector<int>& potions,\n                        long long success) {\n    int l = 0;\n    int r = potions.size();\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (static_cast<long long>(spell) * potions[m] >= success)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] successfulPairs(int[] spells, int[] potions, long success) {\n    int[] ans = new int[spells.length];\n    Arrays.sort(potions);\n\n    for (int i = 0; i < spells.length; ++i)\n      ans[i] = potions.length - firstIndexSuccess(spells[i], potions, success);\n\n    return ans;\n  }\n\n  // Returns the first index i s.t. spell * potions[i] >= success.\n  private int firstIndexSuccess(int spell, int[] potions, long success) {\n    int l = 0;\n    int r = potions.length;\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if ((long) spell * potions[m] >= success)\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:\n    potions.sort()\n\n    def firstIndexSuccess(spell: int):\n      \"\"\"Returns the first index i s.t. spell * potions[i] >= success.\"\"\"\n      l = 0\n      r = len(potions)\n      while l < r:\n        m = (l + r) // 2\n        if spell * potions[m] >= success:\n          r = m\n        else:\n          l = m + 1\n      return l\n\n    return [len(potions) - firstIndexSuccess(spell) for spell in spells]\n",
                "lang_text": "py"
            }
        }
    }
}