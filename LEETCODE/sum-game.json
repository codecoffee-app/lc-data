{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1927",
            "title": "Sum Game",
            "titleSlug": "sum-game",
            "content": "<p>Alice and Bob take turns playing a game, with <strong>Alice</strong><strong>&nbsp;starting first</strong>.</p>\n\n<p>You are given a string <code>num</code> of <strong>even length</strong> consisting of digits and <code>&#39;?&#39;</code> characters. On each turn, a player will do the following if there is still at least one <code>&#39;?&#39;</code> in <code>num</code>:</p>\n\n<ol>\n\t<li>Choose an index <code>i</code> where <code>num[i] == &#39;?&#39;</code>.</li>\n\t<li>Replace <code>num[i]</code> with any digit between <code>&#39;0&#39;</code> and <code>&#39;9&#39;</code>.</li>\n</ol>\n\n<p>The game ends when there are no more <code>&#39;?&#39;</code> characters in <code>num</code>.</p>\n\n<p>For Bob&nbsp;to win, the sum of the digits in the first half of <code>num</code> must be <strong>equal</strong> to the sum of the digits in the second half. For Alice&nbsp;to win, the sums must <strong>not be equal</strong>.</p>\n\n<ul>\n\t<li>For example, if the game ended with <code>num = &quot;243801&quot;</code>, then Bob&nbsp;wins because <code>2+4+3 = 8+0+1</code>. If the game ended with <code>num = &quot;243803&quot;</code>, then Alice&nbsp;wins because <code>2+4+3 != 8+0+3</code>.</li>\n</ul>\n\n<p>Assuming Alice and Bob play <strong>optimally</strong>, return <code>true</code> <em>if Alice will win and </em><code>false</code> <em>if Bob will win</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;5023&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There are no moves to be made.\nThe sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;25??&quot;\n<strong>Output:</strong> true\n<strong>Explanation: </strong>Alice can replace one of the &#39;?&#39;s with &#39;9&#39; and it will be impossible for Bob to make the sums equal.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;?3295???&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It can be proven that Bob will always win. One possible outcome is:\n- Alice replaces the first &#39;?&#39; with &#39;9&#39;. num = &quot;93295???&quot;.\n- Bob replaces one of the &#39;?&#39; in the right half with &#39;9&#39;. num = &quot;932959??&quot;.\n- Alice replaces one of the &#39;?&#39; in the right half with &#39;2&#39;. num = &quot;9329592?&quot;.\n- Bob replaces the last &#39;?&#39; in the right half with &#39;7&#39;. num = &quot;93295927&quot;.\nBob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= num.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>num.length</code> is <strong>even</strong>.</li>\n\t<li><code>num</code> consists of only digits and <code>&#39;?&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 471,
            "dislikes": 80,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"10.3K\", \"totalSubmission\": \"21.7K\", \"totalAcceptedRaw\": 10324, \"totalSubmissionRaw\": 21735, \"acRate\": \"47.5%\"}",
            "hints": [
                "Bob can always make the total sum of both sides equal in mod 9.",
                "Why does the difference between the number of question marks on the left and right side matter?"
            ],
            "rephrased": {
                "body": "Alice and Bob are playing a game. They are given a string `num` of even length consisting of digits and `'?'` characters. Players take turns replacing `'?'` with a digit from `'0'` to `'9'`. The game ends when there are no more `'?'` characters. Bob wins if the sum of the digits in the first half of `num` is equal to the sum of the digits in the second half. Alice wins if the sums are not equal. Assuming both play optimally, determine if Alice will win.",
                "constraints": [
                    "2 <= num.length <= 10^5",
                    "num.length is even",
                    "num consists of only digits and '?'"
                ],
                "testcases": [
                    {
                        "input": "5023",
                        "output": "false",
                        "explanation": "There are no moves to be made. The sum of the first half (5 + 0 = 5) is equal to the sum of the second half (2 + 3 = 5)."
                    },
                    {
                        "input": "25??",
                        "output": "true",
                        "explanation": "Alice can replace one of the '?'s with '9'. No matter what Bob does, the sums can't be equal."
                    },
                    {
                        "input": "?3295???",
                        "output": "false",
                        "explanation": "It can be proven that Bob will always win if playing optimally. Example: Alice: '?3295???' -> '93295???', Bob: '93295???' -> '932959??', Alice: '932959??' -> '9329592?', Bob: '9329592?' -> '93295927'. Bob wins: 9+3+2+9 = 5+9+2+7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Bob can always make the total sum of both sides equal in mod 9.",
            "Why does the difference between the number of question marks on the left and right side matter?"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool sumGame(string num) {\n    const int n = num.length();\n    double ans = 0.0;\n\n    for (int i = 0; i < n / 2; ++i)\n      ans += getExpectation(num[i]);\n\n    for (int i = n / 2; i < n; ++i)\n      ans -= getExpectation(num[i]);\n\n    return ans != 0.0;\n  }\n\n private:\n  double getExpectation(char c) {\n    return c == '?' ? 4.5 : c - '0';\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean sumGame(String num) {\n    final int n = num.length();\n    double ans = 0.0;\n\n    for (int i = 0; i < n / 2; ++i)\n      ans += getExpectation(num.charAt(i));\n\n    for (int i = n / 2; i < n; ++i)\n      ans -= getExpectation(num.charAt(i));\n\n    return ans != 0.0;\n  }\n\n  private double getExpectation(char c) {\n    return c == '?' ? 4.5 : c - '0';\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sumGame(self, num: str) -> bool:\n    n = len(num)\n    ans = 0.0\n\n    def getExpectation(c: str) -> float:\n      return 4.5 if c == '?' else ord(c) - ord('0')\n\n    for i in range(n // 2):\n      ans += getExpectation(num[i])\n\n    for i in range(n // 2, n):\n      ans -= getExpectation(num[i])\n\n    return ans != 0.0\n",
                "lang_text": "py"
            }
        }
    }
}