{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2679",
            "title": "Sum in a Matrix",
            "titleSlug": "sum-in-a-matrix",
            "content": "<p>You are given a <strong>0-indexed</strong> 2D integer array <code>nums</code>. Initially, your score is <code>0</code>. Perform the following operations until the matrix becomes empty:</p>\n\n<ol>\n\t<li>From each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen.</li>\n\t<li>Identify the highest number amongst all those removed in step 1. Add that number to your <strong>score</strong>.</li>\n</ol>\n\n<p>Return <em>the final <strong>score</strong>.</em></p>\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> In the first operation, we remove 7, 6, 6, and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our score. Thus, our final score is 7 + 5 + 3 = 15.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[1]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We remove 1 and add it to the answer. We return 1.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= nums[i].length &lt;= 500</code></li>\n\t<li><code>0 &lt;= nums[i][j] &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 307,
            "dislikes": 50,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.8K\", \"totalSubmission\": \"47.2K\", \"totalAcceptedRaw\": 27818, \"totalSubmissionRaw\": 47228, \"acRate\": \"58.9%\"}",
            "hints": [
                "Sort the numbers in each row in decreasing order.",
                "The answer is the summation of the max number in every column after sorting the rows."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed 2D integer array `nums`. Initially, your score is 0. Perform the following operations until the matrix becomes empty:\n\n1.  From each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen.\n2.  Identify the highest number amongst all those removed in step 1. Add that number to your score.\n\nReturn the final score.",
                "constraints": [
                    "1 <= nums.length <= 300",
                    "1 <= nums[i].length <= 500",
                    "0 <= nums[i][j] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[[7,2,1],[6,4,2],[6,5,3],[3,2,1]]",
                        "output": "15",
                        "explanation": "In the first operation, the largest numbers in each row (7, 6, 6, and 3) are removed. The largest of these (7) is added to the score.  Next, 2, 4, 5, and 2 are removed, and 5 is added. Finally, 1, 2, 3, and 1 are removed, and 3 is added. The final score is 7 + 5 + 3 = 15."
                    },
                    {
                        "input": "[[1]]",
                        "output": "1",
                        "explanation": "The only element (1) is removed and added to the score. The final score is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Sort the numbers in each row in decreasing order.",
            "The answer is the summation of the max number in every column after sorting the rows."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int matrixSum(vector<vector<int>>& nums) {\n    int ans = 0;\n\n    for (vector<int>& row : nums)\n      std::ranges::sort(row);\n\n    for (int j = 0; j < nums[0].size(); ++j) {\n      int maxi = 0;\n      for (int i = 0; i < nums.size(); ++i)\n        maxi = max(maxi, nums[i][j]);\n      ans += maxi;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int matrixSum(int[][] nums) {\n    int ans = 0;\n\n    for (int[] row : nums)\n      Arrays.sort(row);\n\n    for (int j = 0; j < nums[0].length; ++j) {\n      int maxi = 0;\n      for (int i = 0; i < nums.length; ++i)\n        maxi = Math.max(maxi, nums[i][j]);\n      ans += maxi;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def matrixSum(self, nums: List[List[int]]) -> int:\n    for row in nums:\n      row.sort()\n\n    return sum(max(col) for col in zip(*nums))\n",
                "lang_text": "py"
            }
        }
    }
}