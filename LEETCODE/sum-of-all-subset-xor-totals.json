{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1863",
            "title": "Sum of All Subset XOR Totals",
            "titleSlug": "sum-of-all-subset-xor-totals",
            "content": "<p>The <strong>XOR total</strong> of an array is defined as the bitwise <code>XOR</code> of<strong> all its elements</strong>, or <code>0</code> if the array is<strong> empty</strong>.</p>\n\n<ul>\n\t<li>For example, the <strong>XOR total</strong> of the array <code>[2,5,6]</code> is <code>2 XOR 5 XOR 6 = 1</code>.</li>\n</ul>\n\n<p>Given an array <code>nums</code>, return <em>the <strong>sum</strong> of all <strong>XOR totals</strong> for every <strong>subset</strong> of </em><code>nums</code>.&nbsp;</p>\n\n<p><strong>Note:</strong> Subsets with the <strong>same</strong> elements should be counted <strong>multiple</strong> times.</p>\n\n<p>An array <code>a</code> is a <strong>subset</strong> of an array <code>b</code> if <code>a</code> can be obtained from <code>b</code> by deleting some (possibly zero) elements of <code>b</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3]\n<strong>Output:</strong> 6\n<strong>Explanation: </strong>The 4 subsets of [1,3] are:\n- The empty subset has an XOR total of 0.\n- [1] has an XOR total of 1.\n- [3] has an XOR total of 3.\n- [1,3] has an XOR total of 1 XOR 3 = 2.\n0 + 1 + 3 + 2 = 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,1,6]\n<strong>Output:</strong> 28\n<strong>Explanation: </strong>The 8 subsets of [5,1,6] are:\n- The empty subset has an XOR total of 0.\n- [5] has an XOR total of 5.\n- [1] has an XOR total of 1.\n- [6] has an XOR total of 6.\n- [5,1] has an XOR total of 5 XOR 1 = 4.\n- [5,6] has an XOR total of 5 XOR 6 = 3.\n- [1,6] has an XOR total of 1 XOR 6 = 7.\n- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.\n0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,5,6,7,8]\n<strong>Output:</strong> 480\n<strong>Explanation:</strong> The sum of all XOR totals for every subset is 480.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 20</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1541,
            "dislikes": 136,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Combinatorics",
                    "slug": "combinatorics"
                }
            ],
            "stats": "{\"totalAccepted\": \"67.8K\", \"totalSubmission\": \"83.7K\", \"totalAcceptedRaw\": 67784, \"totalSubmissionRaw\": 83717, \"acRate\": \"81.0%\"}",
            "hints": [
                "Is there a way to iterate through all the subsets of the array?",
                "Can we use recursion to efficiently iterate through all the subsets?"
            ],
            "rephrased": {
                "body": "Given an array `nums`, calculate the sum of the XOR totals for every possible subset of `nums`. The XOR total of a subset is the bitwise XOR of all its elements. An empty subset has an XOR total of 0. Note that subsets with the same elements should be counted multiple times.",
                "constraints": [
                    "1 <= nums.length <= 12",
                    "1 <= nums[i] <= 20"
                ],
                "testcases": [
                    {
                        "input": "[1,3]",
                        "output": "6",
                        "explanation": "The subsets of [1, 3] are: {}, [1], [3], and [1, 3].  Their XOR totals are 0, 1, 3, and (1 XOR 3) = 2, respectively. The sum of these XOR totals is 0 + 1 + 3 + 2 = 6."
                    },
                    {
                        "input": "[5,1,6]",
                        "output": "28",
                        "explanation": "The subsets of [5, 1, 6] are: {}, [5], [1], [6], [5, 1], [5, 6], [1, 6], and [5, 1, 6]. Their XOR totals are 0, 5, 1, 6, (5 XOR 1) = 4, (5 XOR 6) = 3, (1 XOR 6) = 7, and (5 XOR 1 XOR 6) = 2, respectively. The sum of these XOR totals is 0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28."
                    },
                    {
                        "input": "[3,4,5,6,7,8]",
                        "output": "480",
                        "explanation": "The sum of all XOR totals for every subset is 480."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Is there a way to iterate through all the subsets of the array?",
            "Can we use recursion to efficiently iterate through all the subsets?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Combinatorics",
                "slug": "combinatorics"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int subsetXORSum(vector<int>& nums) {\n    return dfs(nums, 0, 0);\n  }\n\n private:\n  int dfs(const vector<int>& nums, int i, int xors) {\n    if (i == nums.size())\n      return xors;\n\n    const int x = dfs(nums, i + 1, xors);\n    const int y = dfs(nums, i + 1, nums[i] ^ xors);\n    return x + y;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int subsetXORSum(int[] nums) {\n    return dfs(nums, 0, 0);\n  }\n\n  private int dfs(int[] nums, int i, int xors) {\n    if (i == nums.length)\n      return xors;\n\n    final int x = dfs(nums, i + 1, xors);\n    final int y = dfs(nums, i + 1, nums[i] ^ xors);\n    return x + y;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def subsetXORSum(self, nums: List[int]) -> int:\n    def dfs(i: int, xors: int) -> int:\n      if i == len(nums):\n        return xors\n\n      x = dfs(i + 1, xors)\n      y = dfs(i + 1, nums[i] ^ xors)\n      return x + y\n\n    return dfs(0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}