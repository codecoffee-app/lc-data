{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1781",
            "title": "Sum of Beauty of All Substrings",
            "titleSlug": "sum-of-beauty-of-all-substrings",
            "content": "<p>The <strong>beauty</strong> of a string is the difference in frequencies between the most frequent and least frequent characters.</p>\n\n<ul>\n\t<li>For example, the beauty of <code>&quot;abaacc&quot;</code> is <code>3 - 1 = 2</code>.</li>\n</ul>\n\n<p>Given a string <code>s</code>, return <em>the sum of <strong>beauty</strong> of all of its substrings.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabcb&quot;\n<strong>Output:</strong> 5\n<strong>Explanation: </strong>The substrings with non-zero beauty are [&quot;aab&quot;,&quot;aabc&quot;,&quot;aabcb&quot;,&quot;abcb&quot;,&quot;bcb&quot;], each with beauty equal to 1.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabcbaa&quot;\n<strong>Output:</strong> 17\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;=<sup> </sup>500</code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 942,
            "dislikes": 156,
            "similarQuestions": "[{\"title\": \"Substrings That Begin and End With the Same Letter\", \"titleSlug\": \"substrings-that-begin-and-end-with-the-same-letter\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"36.4K\", \"totalSubmission\": \"56.8K\", \"totalAcceptedRaw\": 36443, \"totalSubmissionRaw\": 56840, \"acRate\": \"64.1%\"}",
            "hints": [
                "Maintain a prefix sum for the frequencies of characters.",
                "You can iterate over all substring then iterate over the alphabet and find which character appears most and which appears least using the prefix sum array"
            ],
            "rephrased": {
                "body": "The beauty of a string is defined as the difference between the frequency of its most frequent character and the frequency of its least frequent character.\n\nGiven a string `s`, calculate the sum of the beauty of all its substrings.",
                "constraints": [
                    "1 <= s.length <= 500",
                    "s consists of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "aabcb",
                        "output": 5,
                        "explanation": "The substrings with non-zero beauty are [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1."
                    },
                    {
                        "input": "aabcbaa",
                        "output": 17,
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "substrings-that-begin-and-end-with-the-same-letter",
                "title": "Substrings That Begin and End With the Same Letter",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "Maintain a prefix sum for the frequencies of characters.",
            "You can iterate over all substring then iterate over the alphabet and find which character appears most and which appears least using the prefix sum array"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int beautySum(string s) {\n    int ans = 0;\n\n    for (int i = 0; i < s.length(); ++i) {\n      vector<int> count(26);\n      for (int j = i; j < s.length(); ++j) {\n        ++count[s[j] - 'a'];\n        ans += *max_element(count.begin(), count.end()) - getMin(count);\n      }\n    }\n\n    return ans;\n  }\n\n private:\n  int getMin(const vector<int>& count) {\n    int mini = INT_MAX;\n    for (const int c : count)\n      if (c > 0)\n        mini = min(mini, c);\n    return mini;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int beautySum(String s) {\n    int ans = 0;\n\n    for (int i = 0; i < s.length(); ++i) {\n      int[] count = new int[26];\n      for (int j = i; j < s.length(); ++j) {\n        ++count[s.charAt(j) - 'a'];\n        ans += Arrays.stream(count).max().getAsInt() - getMin(count);\n      }\n    }\n\n    return ans;\n  }\n\n  private int getMin(int[] count) {\n    int min = Integer.MAX_VALUE;\n    for (final int c : count)\n      if (c > 0)\n        min = Math.min(min, c);\n    return min;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}