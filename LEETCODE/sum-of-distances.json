{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2615",
            "title": "Sum of Distances",
            "titleSlug": "sum-of-distances",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. There exists an array <code>arr</code> of length <code>nums.length</code>, where <code>arr[i]</code> is the sum of <code>|i - j|</code> over all <code>j</code> such that <code>nums[j] == nums[i]</code> and <code>j != i</code>. If there is no such <code>j</code>, set <code>arr[i]</code> to be <code>0</code>.</p>\n\n<p>Return <em>the array </em><code>arr</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,1,1,2]\n<strong>Output:</strong> [5,0,3,4,0]\n<strong>Explanation:</strong> \nWhen i = 0, nums[0] == nums[2] and nums[0] == nums[3]. Therefore, arr[0] = |0 - 2| + |0 - 3| = 5. \nWhen i = 1, arr[1] = 0 because there is no other index with value 3.\nWhen i = 2, nums[2] == nums[0] and nums[2] == nums[3]. Therefore, arr[2] = |2 - 0| + |2 - 3| = 3. \nWhen i = 3, nums[3] == nums[0] and nums[3] == nums[2]. Therefore, arr[3] = |3 - 0| + |3 - 2| = 4. \nWhen i = 4, arr[4] = 0 because there is no other index with value 2. \n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,5,3]\n<strong>Output:</strong> [0,0,0]\n<strong>Explanation:</strong> Since each element in nums is distinct, arr[i] = 0 for all i.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 654,
            "dislikes": 81,
            "similarQuestions": "[{\"title\": \"Remove Duplicates from Sorted Array\", \"titleSlug\": \"remove-duplicates-from-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Find All Duplicates in an Array\", \"titleSlug\": \"find-all-duplicates-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Make All Array Elements Equal\", \"titleSlug\": \"minimum-operations-to-make-all-array-elements-equal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.2K\", \"totalSubmission\": \"54.3K\", \"totalAcceptedRaw\": 16222, \"totalSubmissionRaw\": 54328, \"acRate\": \"29.9%\"}",
            "hints": [
                "Can we use the prefix sum here?",
                "For each number x, collect all the indices where x occurs, and calculate the prefix sum of the array.",
                "For each occurrence of x, the indices to the right will be regular subtraction while the indices to the left will be reversed subtraction."
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums`, construct an array `arr` of the same length. For each index `i`, `arr[i]` is the sum of the absolute differences `|i - j|` for all indices `j` (where `j != i`) such that `nums[j]` is equal to `nums[i]`. If no such `j` exists, `arr[i]` is 0. Return the array `arr`.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "0 <= nums[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1,3,1,1,2]",
                        "output": "[5,0,3,4,0]",
                        "explanation": "For i=0, nums[0] == nums[2] and nums[0] == nums[3].  arr[0] = |0-2| + |0-3| = 2 + 3 = 5. For i=1, there are no other indices with the value 3, so arr[1] = 0. For i=2, nums[2] == nums[0] and nums[2] == nums[3]. arr[2] = |2-0| + |2-3| = 2 + 1 = 3. For i=3, nums[3] == nums[0] and nums[3] == nums[2]. arr[3] = |3-0| + |3-2| = 3 + 1 = 4. For i=4, there are no other indices with the value 2, so arr[4] = 0."
                    },
                    {
                        "input": "[0,5,3]",
                        "output": "[0,0,0]",
                        "explanation": "Since each element in nums is distinct, arr[i] = 0 for all i."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "remove-duplicates-from-sorted-array",
                "title": "Remove Duplicates from Sorted Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-all-duplicates-in-an-array",
                "title": "Find All Duplicates in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "minimum-operations-to-make-all-array-elements-equal",
                "title": "Minimum Operations to Make All Array Elements Equal",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we use the prefix sum here?",
            "For each number x, collect all the indices where x occurs, and calculate the prefix sum of the array.",
            "For each occurrence of x, the indices to the right will be regular subtraction while the indices to the left will be reversed subtraction."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<long long> distance(vector<int>& nums) {\n    vector<long long> ans(nums.size());\n    unordered_map<int, vector<int>> numToIndices;\n\n    for (int i = 0; i < nums.size(); ++i)\n      numToIndices[nums[i]].push_back(i);\n\n    for (const auto& [_, indices] : numToIndices) {\n      const int n = indices.size();\n      if (n == 1)\n        continue;\n      long long sumSoFar = accumulate(indices.begin(), indices.end(), 0LL);\n      int prevIndex = 0;\n      for (int i = 0; i < n; ++i) {\n        sumSoFar += (i - 1) * (indices[i] - prevIndex);\n        sumSoFar -= (n - i - 1) * (indices[i] - prevIndex);\n        ans[indices[i]] = sumSoFar;\n        prevIndex = indices[i];\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public class Solution {\n  public long[] distance(int[] nums) {\n    long[] ans = new long[nums.length];\n    Map<Integer, List<Integer>> numToIndices = new HashMap<>();\n\n    for (int i = 0; i < nums.length; ++i) {\n      numToIndices.putIfAbsent(nums[i], new ArrayList<>());\n      numToIndices.get(nums[i]).add(i);\n    }\n\n    for (List<Integer> indices : numToIndices.values()) {\n      final int n = indices.size();\n      if (n == 1) {\n        continue;\n      }\n      long sumSoFar = indices.stream().mapToLong(Integer::intValue).sum();\n      int prevIndex = 0;\n      for (int i = 0; i < n; ++i) {\n        sumSoFar += (i - 1) * (indices.get(i) - prevIndex);\n        sumSoFar -= (n - i - 1) * (indices.get(i) - prevIndex);\n        ans[indices.get(i)] = sumSoFar;\n        prevIndex = indices.get(i);\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def distance(self, nums: List[int]) -> List[int]:\n    ans = [0] * len(nums)\n    numToIndices = collections.defaultdict(list)\n\n    for i, num in enumerate(nums):\n      numToIndices[num].append(i)\n\n    for indices in numToIndices.values():\n      n = len(indices)\n      if n == 1:\n        continue\n      sumSoFar = sum(indices)\n      prevIndex = 0\n      for i in range(n):\n        sumSoFar += (i - 1) * (indices[i] - prevIndex)\n        sumSoFar -= (n - i - 1) * (indices[i] - prevIndex)\n        ans[indices[i]] = sumSoFar\n        prevIndex = indices[i]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}