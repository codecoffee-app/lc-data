{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1862",
            "title": "Sum of Floored Pairs",
            "titleSlug": "sum-of-floored-pairs",
            "content": "<p>Given an integer array <code>nums</code>, return the sum of <code>floor(nums[i] / nums[j])</code> for all pairs of indices <code>0 &lt;= i, j &lt; nums.length</code> in the array. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>The <code>floor()</code> function returns the integer part of the division.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,5,9]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong>\nfloor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7,7]\n<strong>Output:</strong> 49\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 429,
            "dislikes": 35,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.6K\", \"totalSubmission\": \"30K\", \"totalAcceptedRaw\": 8569, \"totalSubmissionRaw\": 30011, \"acRate\": \"28.6%\"}",
            "hints": [
                "Find the frequency (number of occurrences) of all elements in the array.",
                "For each element, iterate through its multiples and multiply frequencies to find the answer."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, calculate the sum of `floor(nums[i] / nums[j])` for all possible pairs of indices `i` and `j` within the array's bounds (0 <= i, j < nums.length). Return this sum modulo 10^9 + 7.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2,5,9]",
                        "output": "10",
                        "explanation": "We need to compute floor(2/5) + floor(2/9) + floor(5/9) + floor(2/2) + floor(5/5) + floor(9/9) + floor(5/2) + floor(9/2) + floor(9/5) = 0 + 0 + 0 + 1 + 1 + 1 + 2 + 4 + 1 = 10"
                    },
                    {
                        "input": "[7,7,7,7,7,7,7]",
                        "output": "49",
                        "explanation": "For each pair (i, j), floor(nums[i] / nums[j]) = floor(7/7) = 1.  Since there are 7 * 7 = 49 pairs, the total sum is 49."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Find the frequency (number of occurrences) of all elements in the array.",
            "For each element, iterate through its multiples and multiply frequencies to find the answer."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int sumOfFlooredPairs(vector<int>& nums) {\n    constexpr int kMod = 1'000'000'007;\n    const int kMax = *max_element(nums.begin(), nums.end());\n    long ans = 0;\n    // count[i] := # of nums <= i\n    vector<int> count(kMax + 1);\n\n    for (const int num : nums)\n      ++count[num];\n\n    for (int i = 1; i <= kMax; ++i)\n      count[i] += count[i - 1];\n\n    for (int i = 1; i <= kMax; ++i)\n      if (count[i] > count[i - 1]) {\n        long sum = 0;\n        for (int j = 1; i * j <= kMax; ++j) {\n          const int lo = i * j - 1;\n          const int hi = i * (j + 1) - 1;\n          sum += (count[min(hi, kMax)] - count[lo]) * j;\n        }\n        ans += sum * (count[i] - count[i - 1]);\n        ans %= kMod;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int sumOfFlooredPairs(int[] nums) {\n    final int kMod = 1_000_000_007;\n    final int kMax = Arrays.stream(nums).max().getAsInt();\n    long ans = 0;\n    // count[i] := # of nums <= i\n    int[] count = new int[kMax + 1];\n\n    for (final int num : nums)\n      ++count[num];\n\n    for (int i = 1; i <= kMax; ++i)\n      count[i] += count[i - 1];\n\n    for (int i = 1; i <= kMax; ++i)\n      if (count[i] > count[i - 1]) {\n        long sum = 0;\n        for (int j = 1; i * j <= kMax; ++j) {\n          final int lo = i * j - 1;\n          final int hi = i * (j + 1) - 1;\n          sum += (count[Math.min(hi, kMax)] - count[lo]) * (long) j;\n        }\n        ans += sum * (count[i] - count[i - 1]);\n        ans %= kMod;\n      }\n\n    return (int) ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sumOfFlooredPairs(self, nums: List[int]) -> int:\n    kMod = 1_000_000_007\n    kMax = max(nums)\n    ans = 0\n    count = [0] * (kMax + 1)\n\n    for num in nums:\n      count[num] += 1\n\n    for i in range(1, kMax + 1):\n      count[i] += count[i - 1]\n\n    for i in range(1, kMax + 1):\n      if count[i] > count[i - 1]:\n        summ = 0\n        j = 1\n        while i * j <= kMax:\n          lo = i * j - 1\n          hi = i * (j + 1) - 1\n          summ += (count[min(hi, kMax)] - count[lo]) * j\n          j += 1\n        ans += summ * (count[i] - count[i - 1])\n        ans %= kMod\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}