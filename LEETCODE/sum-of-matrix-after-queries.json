{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2718",
            "title": "Sum of Matrix After Queries",
            "titleSlug": "sum-of-matrix-after-queries",
            "content": "<p>You are given an integer <code>n</code> and a <strong>0-indexed</strong>&nbsp;<strong>2D array</strong> <code>queries</code> where <code>queries[i] = [type<sub>i</sub>, index<sub>i</sub>, val<sub>i</sub>]</code>.</p>\n\n<p>Initially, there is a <strong>0-indexed</strong> <code>n x n</code> matrix filled with <code>0</code>&#39;s. For each query, you must apply one of the following changes:</p>\n\n<ul>\n\t<li>if <code>type<sub>i</sub> == 0</code>, set the values in the row with <code>index<sub>i</sub></code> to <code>val<sub>i</sub></code>, overwriting any previous values.</li>\n\t<li>if <code>type<sub>i</sub> == 1</code>, set the values in the column with <code>index<sub>i</sub></code> to <code>val<sub>i</sub></code>, overwriting any previous values.</li>\n</ul>\n\n<p>Return <em>the sum of integers in the matrix after all queries are applied</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/05/11/exm1.png\" style=\"width: 681px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> n = 3, queries = [[0,0,1],[1,2,2],[0,2,3],[1,0,4]]\n<strong>Output:</strong> 23\n<strong>Explanation:</strong> The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 23. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/05/11/exm2.png\" style=\"width: 681px; height: 331px;\" />\n<pre>\n<strong>Input:</strong> n = 3, queries = [[0,0,4],[0,1,2],[1,0,1],[0,2,3],[1,2,1]]\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 17.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>queries[i].length == 3</code></li>\n\t<li><code>0 &lt;= type<sub>i</sub> &lt;= 1</code></li>\n\t<li><code>0 &lt;= index<sub>i</sub>&nbsp;&lt; n</code></li>\n\t<li><code>0 &lt;= val<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 665,
            "dislikes": 23,
            "similarQuestions": "[{\"title\": \"Range Sum Query 2D - Mutable\", \"titleSlug\": \"range-sum-query-2d-mutable\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Range Addition II\", \"titleSlug\": \"range-addition-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                }
            ],
            "stats": "{\"totalAccepted\": \"19.3K\", \"totalSubmission\": \"64K\", \"totalAcceptedRaw\": 19278, \"totalSubmissionRaw\": 63969, \"acRate\": \"30.1%\"}",
            "hints": [
                "Process queries in reversed order, as the latest queries represent the most recent changes in the matrix.",
                "Once you encounter an operation on some row/column, no further operations will affect the values in this row/column. Keep track of seen rows and columns with a set.",
                "When operating on an unseen row/column, the number of affected cells is the number of columns/rows you haven\u2019t previously seen."
            ],
            "rephrased": {
                "body": "You are given an integer `n` representing the size of a square matrix and a list of queries. Each query is a tuple `(type, index, val)`. Initially, you have an `n x n` matrix filled with 0s.  For each query:\n\n*   If `type` is 0, set all values in the row specified by `index` to `val`.\n*   If `type` is 1, set all values in the column specified by `index` to `val`.\n\nReturn the sum of all the elements in the matrix after applying all the queries.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "1 <= queries.length <= 5 * 10^4",
                    "queries[i].length == 3",
                    "0 <= type_i <= 1",
                    "0 <= index_i < n",
                    "0 <= val_i <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 3, queries = [[0,0,1],[1,2,2],[0,2,3],[1,0,4]]",
                        "output": "23",
                        "explanation": "The matrix evolves as follows:\nInitial: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\nQuery 1: [[1, 1, 1], [0, 0, 0], [0, 0, 0]]\nQuery 2: [[1, 1, 2], [0, 0, 2], [0, 0, 2]]\nQuery 3: [[1, 1, 2], [0, 0, 2], [3, 3, 3]]\nQuery 4: [[4, 1, 2], [4, 0, 2], [4, 3, 3]]\nSum: 4 + 1 + 2 + 4 + 0 + 2 + 4 + 3 + 3 = 23"
                    },
                    {
                        "input": "n = 3, queries = [[0,0,4],[0,1,2],[1,0,1],[0,2,3],[1,2,1]]",
                        "output": "17",
                        "explanation": "The matrix evolves as follows:\nInitial: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\nQuery 1: [[4, 4, 4], [0, 0, 0], [0, 0, 0]]\nQuery 2: [[4, 4, 4], [2, 2, 2], [0, 0, 0]]\nQuery 3: [[1, 4, 4], [1, 2, 2], [1, 0, 0]]\nQuery 4: [[1, 4, 4], [1, 2, 2], [3, 3, 3]]\nQuery 5: [[1, 4, 1], [1, 2, 1], [3, 3, 1]]\nSum: 1 + 4 + 1 + 1 + 2 + 1 + 3 + 3 + 1 = 17"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "range-sum-query-2d-mutable",
                "title": "Range Sum Query 2D - Mutable",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "range-addition-ii",
                "title": "Range Addition II",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Process queries in reversed order, as the latest queries represent the most recent changes in the matrix.",
            "Once you encounter an operation on some row/column, no further operations will affect the values in this row/column. Keep track of seen rows and columns with a set.",
            "When operating on an unseen row/column, the number of affected cells is the number of columns/rows you haven\u2019t previously seen."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long matrixSumQueries(int n, vector<vector<int>>& queries) {\n    long long ans = 0;\n    // seen[0] := row, seen[1] := col\n    vector<vector<bool>> seen(2, vector<bool>(n));\n    // notSet[0] = row, notSet[1] := col\n    vector<int> notSet(2, n);\n\n    // Later queries dominate.\n    for (int i = queries.size() - 1; i >= 0; --i) {\n      const int type = queries[i][0];\n      const int index = queries[i][1];\n      const int val = queries[i][2];\n      if (!seen[type][index]) {\n        ans += val * notSet[type ^ 1];\n        seen[type][index] = true;\n        --notSet[type];\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long matrixSumQueries(int n, int[][] queries) {\n    long ans = 0;\n    // seen[0] := row, seen[1] := col\n    boolean[][] seen = new boolean[2][n];\n    // notSet[0] = row, notSet[1] := col\n    int[] notSet = new int[2];\n    Arrays.fill(notSet, n);\n\n    // Late queries dominate.\n    for (int i = queries.length - 1; i >= 0; --i) {\n      final int type = queries[i][0];\n      final int index = queries[i][1];\n      final int val = queries[i][2];\n      if (!seen[type][index]) {\n        ans += val * notSet[type ^ 1];\n        seen[type][index] = true;\n        --notSet[type];\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def matrixSumQueries(self, n: int, queries: List[List[int]]) -> int:\n    ans = 0\n    # seen[0] := row, seen[1] := col\n    seen = [[False] * n for _ in range(2)]\n    # notSet[0] = row, notSet[1] := col\n    notSet = [n] * 2\n\n    # Late queries dominate.\n    for type, index, val in reversed(queries):\n      if not seen[type][index]:\n        ans += val * notSet[type ^ 1]\n        seen[type][index] = True\n        notSet[type] -= 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}