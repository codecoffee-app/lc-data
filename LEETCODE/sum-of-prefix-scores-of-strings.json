{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2416",
            "title": "Sum of Prefix Scores of Strings",
            "titleSlug": "sum-of-prefix-scores-of-strings",
            "content": "<p>You are given an array <code>words</code> of size <code>n</code> consisting of <strong>non-empty</strong> strings.</p>\n\n<p>We define the <strong>score</strong> of a string <code>word</code> as the <strong>number</strong> of strings <code>words[i]</code> such that <code>word</code> is a <strong>prefix</strong> of <code>words[i]</code>.</p>\n\n<ul>\n\t<li>For example, if <code>words = [&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;, &quot;cab&quot;]</code>, then the score of <code>&quot;ab&quot;</code> is <code>2</code>, since <code>&quot;ab&quot;</code> is a prefix of both <code>&quot;ab&quot;</code> and <code>&quot;abc&quot;</code>.</li>\n</ul>\n\n<p>Return <em>an array </em><code>answer</code><em> of size </em><code>n</code><em> where </em><code>answer[i]</code><em> is the <strong>sum</strong> of scores of every <strong>non-empty</strong> prefix of </em><code>words[i]</code>.</p>\n\n<p><strong>Note</strong> that a string is considered as a prefix of itself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abc&quot;,&quot;ab&quot;,&quot;bc&quot;,&quot;b&quot;]\n<strong>Output:</strong> [5,4,3,2]\n<strong>Explanation:</strong> The answer for each string is the following:\n- &quot;abc&quot; has 3 prefixes: &quot;a&quot;, &quot;ab&quot;, and &quot;abc&quot;.\n- There are 2 strings with the prefix &quot;a&quot;, 2 strings with the prefix &quot;ab&quot;, and 1 string with the prefix &quot;abc&quot;.\nThe total is answer[0] = 2 + 2 + 1 = 5.\n- &quot;ab&quot; has 2 prefixes: &quot;a&quot; and &quot;ab&quot;.\n- There are 2 strings with the prefix &quot;a&quot;, and 2 strings with the prefix &quot;ab&quot;.\nThe total is answer[1] = 2 + 2 = 4.\n- &quot;bc&quot; has 2 prefixes: &quot;b&quot; and &quot;bc&quot;.\n- There are 2 strings with the prefix &quot;b&quot;, and 1 string with the prefix &quot;bc&quot;.\nThe total is answer[2] = 2 + 1 = 3.\n- &quot;b&quot; has 1 prefix: &quot;b&quot;.\n- There are 2 strings with the prefix &quot;b&quot;.\nThe total is answer[3] = 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;]\n<strong>Output:</strong> [4]\n<strong>Explanation:</strong>\n&quot;abcd&quot; has 4 prefixes: &quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;, and &quot;abcd&quot;.\nEach prefix has a score of one, so the total is answer[0] = 1 + 1 + 1 + 1 = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 1000</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 633,
            "dislikes": 51,
            "similarQuestions": "[{\"title\": \"Design Add and Search Words Data Structure\", \"titleSlug\": \"design-add-and-search-words-data-structure\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum XOR of Two Numbers in an Array\", \"titleSlug\": \"maximum-xor-of-two-numbers-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Map Sum Pairs\", \"titleSlug\": \"map-sum-pairs\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.4K\", \"totalSubmission\": \"52.1K\", \"totalAcceptedRaw\": 23424, \"totalSubmissionRaw\": 52117, \"acRate\": \"44.9%\"}",
            "hints": [
                "What data structure will allow you to efficiently keep track of the score of each prefix?",
                "Use a Trie. Insert all the words into it, and keep a counter at each node that will tell you how many times we have visited each prefix."
            ],
            "rephrased": {
                "body": "Given an array `words` of strings, calculate a score for each string in the array. The score of a string `word` is the number of strings `words[i]` for which `word` is a prefix.  Return an array `answer` where `answer[i]` is the sum of the scores of all non-empty prefixes of `words[i]`.",
                "constraints": [
                    "1 <= words.length <= 1000",
                    "1 <= words[i].length <= 1000",
                    "words[i] consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "[\"abc\",\"ab\",\"bc\",\"b\"]",
                        "output": "[5,4,3,2]",
                        "explanation": "For \"abc\", the prefixes are \"a\", \"ab\", and \"abc\". \"a\" is a prefix of 2 words, \"ab\" is a prefix of 2 words, and \"abc\" is a prefix of 1 word. The sum is 2 + 2 + 1 = 5.\nFor \"ab\", the prefixes are \"a\" and \"ab\". \"a\" is a prefix of 2 words, and \"ab\" is a prefix of 2 words. The sum is 2 + 2 = 4.\nFor \"bc\", the prefixes are \"b\" and \"bc\". \"b\" is a prefix of 2 words, and \"bc\" is a prefix of 1 word. The sum is 2 + 1 = 3.\nFor \"b\", the prefix is \"b\". \"b\" is a prefix of 2 words. The sum is 2."
                    },
                    {
                        "input": "[\"abcd\"]",
                        "output": "[4]",
                        "explanation": "The prefixes of \"abcd\" are \"a\", \"ab\", \"abc\", and \"abcd\". Each prefix is a prefix of 1 word (itself).  The sum is 1 + 1 + 1 + 1 = 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-add-and-search-words-data-structure",
                "title": "Design Add and Search Words Data Structure",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-xor-of-two-numbers-in-an-array",
                "title": "Maximum XOR of Two Numbers in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "map-sum-pairs",
                "title": "Map Sum Pairs",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What data structure will allow you to efficiently keep track of the score of each prefix?",
            "Use a Trie. Insert all the words into it, and keep a counter at each node that will tell you how many times we have visited each prefix."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct TrieNode {\n  vector<shared_ptr<TrieNode>> children;\n  int count = 0;\n  TrieNode() : children(26) {}\n};\n\nclass Solution {\n public:\n  vector<int> sumPrefixScores(vector<string>& words) {\n    vector<int> ans;\n\n    for (const string& word : words)\n      insert(word);\n\n    for (const string& word : words)\n      ans.push_back(getScore(word));\n\n    return ans;\n  }\n\n private:\n  shared_ptr<TrieNode> root = make_shared<TrieNode>();\n\n  void insert(const string& word) {\n    shared_ptr<TrieNode> node = root;\n    for (const char c : word) {\n      const int i = c - 'a';\n      if (node->children[i] == nullptr)\n        node->children[i] = make_shared<TrieNode>();\n      node = node->children[i];\n      ++node->count;\n    }\n  }\n\n  int getScore(const string& word) {\n    shared_ptr<TrieNode> node = root;\n    int score = 0;\n    for (const char c : word) {\n      node = node->children[c - 'a'];\n      score += node->count;\n    }\n    return score;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TrieNode {\n  public TrieNode[] children = new TrieNode[26];\n  public int count = 0;\n}\n\nclass Solution {\n  public int[] sumPrefixScores(String[] words) {\n    int[] ans = new int[words.length];\n\n    for (final String word : words)\n      insert(word);\n\n    for (int i = 0; i < words.length; ++i)\n      ans[i] = getScore(words[i]);\n\n    return ans;\n  }\n\n  private TrieNode root = new TrieNode();\n\n  private void insert(String word) {\n    TrieNode node = root;\n    for (final char c : word.toCharArray()) {\n      final int i = c - 'a';\n      if (node.children[i] == null)\n        node.children[i] = new TrieNode();\n      node = node.children[i];\n      ++node.count;\n    }\n  }\n\n  private int getScore(String word) {\n    TrieNode node = root;\n    int score = 0;\n    for (final char c : word.toCharArray()) {\n      node = node.children[c - 'a'];\n      score += node.count;\n    }\n    return score;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TrieNode:\n  def __init__(self):\n    self.children: Dict[str, TrieNode] = {}\n    self.count = 0\n\n\nclass Solution:\n  def sumPrefixScores(self, words: List[str]) -> List[int]:\n    root = TrieNode()\n\n    def insert(word: str) -> None:\n      node: TrieNode = root\n      for c in word:\n        node = node.children.setdefault(c, TrieNode())\n        node.count += 1\n\n    for word in words:\n      insert(word)\n\n    def getScore(word: str) -> int:\n      node: TrieNode = root\n      score = 0\n      for c in word:\n        node = node.children[c]\n        score += node.count\n      return score\n\n    return [getScore(word) for word in words]\n",
                "lang_text": "py"
            }
        }
    }
}