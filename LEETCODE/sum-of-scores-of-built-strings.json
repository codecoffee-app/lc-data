{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2223",
            "title": "Sum of Scores of Built Strings",
            "titleSlug": "sum-of-scores-of-built-strings",
            "content": "<p>You are <strong>building</strong> a string <code>s</code> of length <code>n</code> <strong>one</strong> character at a time, <strong>prepending</strong> each new character to the <strong>front</strong> of the string. The strings are labeled from <code>1</code> to <code>n</code>, where the string with length <code>i</code> is labeled <code>s<sub>i</sub></code>.</p>\n\n<ul>\n\t<li>For example, for <code>s = &quot;abaca&quot;</code>, <code>s<sub>1</sub> == &quot;a&quot;</code>, <code>s<sub>2</sub> == &quot;ca&quot;</code>, <code>s<sub>3</sub> == &quot;aca&quot;</code>, etc.</li>\n</ul>\n\n<p>The <strong>score</strong> of <code>s<sub>i</sub></code> is the length of the <strong>longest common prefix</strong> between <code>s<sub>i</sub></code> and <code>s<sub>n</sub></code> (Note that <code>s == s<sub>n</sub></code>).</p>\n\n<p>Given the final string <code>s</code>, return<em> the <strong>sum</strong> of the <strong>score</strong> of every </em><code>s<sub>i</sub></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babab&quot;\n<strong>Output:</strong> 9\n<strong>Explanation:</strong>\nFor s<sub>1</sub> == &quot;b&quot;, the longest common prefix is &quot;b&quot; which has a score of 1.\nFor s<sub>2</sub> == &quot;ab&quot;, there is no common prefix so the score is 0.\nFor s<sub>3</sub> == &quot;bab&quot;, the longest common prefix is &quot;bab&quot; which has a score of 3.\nFor s<sub>4</sub> == &quot;abab&quot;, there is no common prefix so the score is 0.\nFor s<sub>5</sub> == &quot;babab&quot;, the longest common prefix is &quot;babab&quot; which has a score of 5.\nThe sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;azbazbzaz&quot;\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> \nFor s<sub>2</sub> == &quot;az&quot;, the longest common prefix is &quot;az&quot; which has a score of 2.\nFor s<sub>6</sub> == &quot;azbzaz&quot;, the longest common prefix is &quot;azb&quot; which has a score of 3.\nFor s<sub>9</sub> == &quot;azbazbzaz&quot;, the longest common prefix is &quot;azbazbzaz&quot; which has a score of 9.\nFor all other s<sub>i</sub>, the score is 0.\nThe sum of the scores is 2 + 3 + 9 = 14, so we return 14.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 236,
            "dislikes": 181,
            "similarQuestions": "[{\"title\": \"Longest Happy Prefix\", \"titleSlug\": \"longest-happy-prefix\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Rolling Hash",
                    "slug": "rolling-hash"
                },
                {
                    "name": "Suffix Array",
                    "slug": "suffix-array"
                },
                {
                    "name": "String Matching",
                    "slug": "string-matching"
                },
                {
                    "name": "Hash Function",
                    "slug": "hash-function"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.8K\", \"totalSubmission\": \"17.9K\", \"totalAcceptedRaw\": 6837, \"totalSubmissionRaw\": 17947, \"acRate\": \"38.1%\"}",
            "hints": [
                "Each s_i is a suffix of the string s, so consider algorithms that can determine the longest prefix that is also a suffix.",
                "Could you use the Z array from the Z algorithm to find the score of each s_i?"
            ],
            "rephrased": {
                "body": "You are constructing a string `s` of length `n` by repeatedly adding characters to the beginning. Each intermediate string, `s_i`, represents a prefix of `s` ending at index `i`.  The score of `s_i` is defined as the length of the longest common prefix between `s_i` and the complete string `s`. The goal is to calculate the sum of the scores for all `s_i` from `i = 1` to `n`.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "babab",
                        "output": 9,
                        "explanation": "The substrings are: s1 = \"b\", s2 = \"ab\", s3 = \"bab\", s4 = \"abab\", s5 = \"babab\".\nThe longest common prefixes with \"babab\" are: \"b\", \"\", \"bab\", \"\", \"babab\", with lengths 1, 0, 3, 0, 5. The sum of the scores is 1 + 0 + 3 + 0 + 5 = 9."
                    },
                    {
                        "input": "azbazbzaz",
                        "output": 14,
                        "explanation": "The substrings are: s1 = \"a\", s2 = \"az\", s3 = \"zaz\", s4 = \"bzaz\", s5 = \"zbzaz\", s6 = \"azbzaz\", s7 = \"zazbzaz\", s8 = \"bazbzaz\", s9 = \"azbazbzaz\".\nThe longest common prefixes with \"azbazbzaz\" are: \"a\", \"az\", \"\", \"\", \"\", \"azb\", \"\", \"b\", \"azbazbzaz\", with lengths 1, 2, 0, 0, 0, 3, 0, 0, 9. The sum of the scores is 1 + 2 + 0 + 0 + 0 + 3 + 0 + 0 + 9 = 14."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "longest-happy-prefix",
                "title": "Longest Happy Prefix",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Each s_i is a suffix of the string s, so consider algorithms that can determine the longest prefix that is also a suffix.",
            "Could you use the Z array from the Z algorithm to find the score of each s_i?"
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash"
            },
            {
                "name": "Suffix Array",
                "slug": "suffix-array"
            },
            {
                "name": "String Matching",
                "slug": "string-matching"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function"
            }
        ]
    }
}