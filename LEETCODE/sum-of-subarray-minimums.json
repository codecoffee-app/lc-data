{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "907",
            "title": "Sum of Subarray Minimums",
            "titleSlug": "sum-of-subarray-minimums",
            "content": "<p>Given an array of integers arr, find the sum of <code>min(b)</code>, where <code>b</code> ranges over every (contiguous) subarray of <code>arr</code>. Since the answer may be large, return the answer <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [3,1,2,4]\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> \nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\nSum is 17.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [11,81,94,43,3]\n<strong>Output:</strong> 444\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 3 * 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6801,
            "dislikes": 443,
            "similarQuestions": "[{\"title\": \"Sum of Subarray Ranges\", \"titleSlug\": \"sum-of-subarray-ranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sum of Total Strength of Wizards\", \"titleSlug\": \"sum-of-total-strength-of-wizards\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Monotonic Stack",
                    "slug": "monotonic-stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"164.4K\", \"totalSubmission\": \"467.4K\", \"totalAcceptedRaw\": 164383, \"totalSubmissionRaw\": 467368, \"acRate\": \"35.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of integers `arr`, calculate the sum of the minimum values of all contiguous subarrays of `arr`. Due to the potential for large results, return the answer modulo `10^9 + 7`.",
                "constraints": [
                    "1 <= arr.length <= 3 * 10^4",
                    "1 <= arr[i] <= 3 * 10^4"
                ],
                "testcases": [
                    {
                        "input": "[3,1,2,4]",
                        "output": "17",
                        "explanation": "The subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. Their minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. The sum of the minimums is 17."
                    },
                    {
                        "input": "[11,81,94,43,3]",
                        "output": "444",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "sum-of-subarray-ranges",
                "title": "Sum of Subarray Ranges",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-total-strength-of-wizards",
                "title": "Sum of Total Strength of Wizards",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int sumSubarrayMins(vector<int>& arr) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = arr.size();\n    long ans = 0;\n    // prevMin[i] := index k s.t. arr[k] is the prev min in arr[:i]\n    vector<int> prevMin(n, -1);\n    // nextMin[i] := index k s.t. arr[k] is the next min in arr[i + 1:]\n    vector<int> nextMin(n, n);\n    stack<int> stack;\n\n    for (int i = 0; i < n; ++i) {\n      while (!stack.empty() && arr[stack.top()] > arr[i]) {\n        const int index = stack.top();\n        stack.pop();\n        nextMin[index] = i;\n      }\n      if (!stack.empty())\n        prevMin[i] = stack.top();\n      stack.push(i);\n    }\n\n    for (int i = 0; i < n; ++i) {\n      ans += static_cast<long>(arr[i]) * (i - prevMin[i]) * (nextMin[i] - i);\n      ans %= kMod;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int sumSubarrayMins(int[] arr) {\n    final int kMod = 1_000_000_007;\n    final int n = arr.length;\n    long ans = 0;\n    // prevMin[i] := index k s.t. arr[k] is the prev min in arr[:i]\n    int[] prevMin = new int[n];\n    // nextMin[i] := index k s.t. arr[k] is the next min in arr[i + 1:]\n    int[] nextMin = new int[n];\n    Deque<Integer> stack = new ArrayDeque<>();\n\n    Arrays.fill(prevMin, -1);\n    Arrays.fill(nextMin, n);\n\n    for (int i = 0; i < arr.length; ++i) {\n      while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {\n        final int index = stack.pop();\n        nextMin[index] = i;\n      }\n      if (!stack.isEmpty())\n        prevMin[i] = stack.peek();\n      stack.push(i);\n    }\n\n    for (int i = 0; i < arr.length; ++i) {\n      ans += (long) arr[i] * (i - prevMin[i]) * (nextMin[i] - i);\n      ans %= kMod;\n    }\n\n    return (int) ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def sumSubarrayMins(self, arr: List[int]) -> int:\n    kMod = 1_000_000_007\n    n = len(arr)\n    ans = 0\n    # prevMin[i] := index k s.t. arr[k] is the prev min in arr[:i]\n    prevMin = [-1] * n\n    # nextMin[i] := index k s.t. arr[k] is the next min in arr[i + 1:]\n    nextMin = [n] * n\n    stack = []\n\n    for i, a in enumerate(arr):\n      while stack and arr[stack[-1]] > a:\n        index = stack.pop()\n        nextMin[index] = i\n      if stack:\n        prevMin[i] = stack[-1]\n      stack.append(i)\n\n    for i, a in enumerate(arr):\n      ans += a * (i - prevMin[i]) * (nextMin[i] - i)\n      ans %= kMod\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}