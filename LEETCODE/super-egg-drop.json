{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "887",
            "title": "Super Egg Drop",
            "titleSlug": "super-egg-drop",
            "content": "<p>You are given <code>k</code> identical eggs and you have access to a building with <code>n</code> floors labeled from <code>1</code> to <code>n</code>.</p>\n\n<p>You know that there exists a floor <code>f</code> where <code>0 &lt;= f &lt;= n</code> such that any egg dropped at a floor <strong>higher</strong> than <code>f</code> will <strong>break</strong>, and any egg dropped <strong>at or below</strong> floor <code>f</code> will <strong>not break</strong>.</p>\n\n<p>Each move, you may take an unbroken egg and drop it from any floor <code>x</code> (where <code>1 &lt;= x &lt;= n</code>). If the egg breaks, you can no longer use it. However, if the egg does not break, you may <strong>reuse</strong> it in future moves.</p>\n\n<p>Return <em>the <strong>minimum number of moves</strong> that you need to determine <strong>with certainty</strong> what the value of </em><code>f</code> is.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 1, n = 2\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>\nDrop the egg from floor 1. If it breaks, we know that f = 0.\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\nIf it does not break, then we know f = 2.\nHence, we need at minimum 2 moves to determine with certainty what the value of f is.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, n = 6\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 14\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3527,
            "dislikes": 177,
            "similarQuestions": "[{\"title\": \"Egg Drop With 2 Eggs and N Floors\", \"titleSlug\": \"egg-drop-with-2-eggs-and-n-floors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"67.6K\", \"totalSubmission\": \"246.1K\", \"totalAcceptedRaw\": 67623, \"totalSubmissionRaw\": 246079, \"acRate\": \"27.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given `k` identical eggs and access to a building with `n` floors labeled from 1 to `n`. There exists a floor `f` (0 <= f <= n) such that an egg dropped from any floor higher than `f` will break, and an egg dropped from floor `f` or below will not break.  In each move, you can drop an unbroken egg from any floor `x` (1 <= x <= n). If the egg breaks, you cannot reuse it. If the egg doesn't break, you can reuse it. Determine the minimum number of moves needed to find the value of `f` with certainty.",
                "constraints": [
                    "1 <= k <= 100",
                    "1 <= n <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "k = 1, n = 2",
                        "output": "2",
                        "explanation": "If you drop the egg from floor 1 and it breaks, then f = 0. If it doesn't break, drop from floor 2. If it breaks, f = 1; otherwise, f = 2. Therefore, a minimum of 2 moves is required."
                    },
                    {
                        "input": "k = 2, n = 6",
                        "output": "3",
                        "explanation": null
                    },
                    {
                        "input": "k = 3, n = 14",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "egg-drop-with-2-eggs-and-n-floors",
                "title": "Egg Drop With 2 Eggs and N Floors",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int superEggDrop(int k, int n) {\n    // dp[k][n] := min # of moves to know f with k eggs and n floors\n    dp.resize(k + 1, vector<int>(n + 1, -1));\n    return drop(k, n);\n  }\n\n private:\n  vector<vector<int>> dp;\n\n  int drop(int k, int n) {\n    if (k == 0)  // No eggs -> done\n      return 0;\n    if (k == 1)  // One egg -> drop from 1-th floor to n-th floor\n      return n;\n    if (n == 0)  // No floor -> done\n      return 0;\n    if (n == 1)  // One floor -> drop from that floor\n      return 1;\n    if (dp[k][n] != -1)\n      return dp[k][n];\n\n    dp[k][n] = INT_MAX;\n\n    for (int i = 1; i <= n; ++i) {\n      const int broken = drop(k - 1, i - 1);\n      const int unbroken = drop(k, n - i);\n      dp[k][n] = min(dp[k][n], 1 + max(broken, unbroken));\n    }\n\n    return dp[k][n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int superEggDrop(int k, int n) {\n    // dp[k][n] := min # of moves to know f with k eggs and n floors\n    dp = new int[k + 1][n + 1];\n    Arrays.stream(dp).forEach(row -> Arrays.fill(row, -1));\n    return drop(k, n);\n  }\n\n  private int[][] dp;\n\n  private int drop(int k, int n) {\n    if (k == 0) // No eggs -> done\n      return 0;\n    if (k == 1) // One egg -> drop from 1-th floor to n-th floor\n      return n;\n    if (n == 0) // No floor -> done\n      return 0;\n    if (n == 1) // One floor -> drop from that floor\n      return 1;\n    if (dp[k][n] != -1)\n      return dp[k][n];\n\n    dp[k][n] = Integer.MAX_VALUE;\n\n    for (int i = 1; i <= n; ++i) {\n      final int broken = drop(k - 1, i - 1);\n      final int unbroken = drop(k, n - i);\n      dp[k][n] = Math.min(dp[k][n], 1 + Math.max(broken, unbroken));\n    }\n\n    return dp[k][n];\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}