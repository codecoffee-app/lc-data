{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "906",
            "title": "Super Palindromes",
            "titleSlug": "super-palindromes",
            "content": "<p>Let&#39;s say a positive integer is a <strong>super-palindrome</strong> if it is a palindrome, and it is also the square of a palindrome.</p>\n\n<p>Given two positive integers <code>left</code> and <code>right</code> represented as strings, return <em>the number of <strong>super-palindromes</strong> integers in the inclusive range</em> <code>[left, right]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = &quot;4&quot;, right = &quot;1000&quot;\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: 4, 9, 121, and 484 are superpalindromes.\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = &quot;1&quot;, right = &quot;2&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= left.length, right.length &lt;= 18</code></li>\n\t<li><code>left</code> and <code>right</code> consist of only digits.</li>\n\t<li><code>left</code> and <code>right</code> cannot have leading zeros.</li>\n\t<li><code>left</code> and <code>right</code> represent integers in the range <code>[1, 10<sup>18</sup> - 1]</code>.</li>\n\t<li><code>left</code> is less than or equal to <code>right</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 353,
            "dislikes": 418,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Enumeration",
                    "slug": "enumeration"
                }
            ],
            "stats": "{\"totalAccepted\": \"23.6K\", \"totalSubmission\": \"60.6K\", \"totalAcceptedRaw\": 23551, \"totalSubmissionRaw\": 60606, \"acRate\": \"38.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "A super-palindrome is a positive integer that is both a palindrome and the square of another palindrome. Given two positive integers, `left` and `right`, represented as strings, determine the number of super-palindromes within the inclusive range [`left`, `right`].",
                "constraints": [
                    "1 <= left.length, right.length <= 18",
                    "left and right consist of only digits.",
                    "left and right cannot have leading zeros.",
                    "left and right represent integers in the range [1, 10<sup>18</sup> - 1].",
                    "left is less than or equal to right."
                ],
                "testcases": [
                    {
                        "input": "left = \"4\", right = \"1000\"",
                        "output": "4",
                        "explanation": "The super-palindromes in the range [4, 1000] are 4, 9, 121, and 484. Note that while 676 is the square of 26 (26 * 26 = 676), 26 is not a palindrome."
                    },
                    {
                        "input": "left = \"1\", right = \"2\"",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Enumeration",
                "slug": "enumeration"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int superpalindromesInRange(string left, string right) {\n    int ans = 0;\n    long long l = stoll(left);\n    long long r = stoll(right);\n\n    for (long long i = sqrt(l); i * i <= r;) {\n      long long palindrome = nextPalindrome(i);\n      long long squared = palindrome * palindrome;\n      if (squared <= r && isPalindrome(squared))\n        ++ans;\n      i = palindrome + 1;\n    }\n\n    return ans;\n  }\n\n private:\n  long long nextPalindrome(int num) {\n    const string s = to_string(num);\n    const int n = s.length();\n    string half = s.substr(0, (n + 1) / 2);\n    string reversedHalf = reversed(half.substr(0, n / 2));\n    const long long candidate = stoll(half + reversedHalf);\n    if (candidate >= num)\n      return candidate;\n\n    half = to_string(stoll(half) + 1);\n    reversedHalf = reversed(half.substr(0, n / 2));\n    return stoll(half + reversedHalf);\n  }\n\n  string reversed(const string& s) {\n    return {s.rbegin(), s.rend()};\n  }\n\n  bool isPalindrome(long long num) {\n    const string s = to_string(num);\n    int l = 0;\n    int r = s.length() - 1;\n\n    while (l < r)\n      if (s[l++] != s[r--])\n        return false;\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int superpalindromesInRange(String left, String right) {\n    int ans = 0;\n    Long l = Long.valueOf(left);\n    Long r = Long.valueOf(right);\n\n    for (long i = (long) Math.sqrt(l); i * i <= r;) {\n      long palindrome = nextPalindrome(i);\n      long squared = palindrome * palindrome;\n      if (squared <= r && isPalindrome(squared))\n        ++ans;\n      i = palindrome + 1;\n    }\n\n    return ans;\n  }\n\n  private long nextPalindrome(long num) {\n    final String s = String.valueOf(num);\n    final int n = s.length();\n\n    String half = s.substring(0, (n + 1) / 2);\n    String reversedHalf = new StringBuilder(half.substring(0, n / 2)).reverse().toString();\n    final long candidate = Long.valueOf(half + reversedHalf);\n    if (candidate >= num)\n      return candidate;\n\n    half = String.valueOf(Long.valueOf(half) + 1);\n    reversedHalf = new StringBuilder(half.substring(0, n / 2)).reverse().toString();\n    return Long.valueOf(half + reversedHalf);\n  }\n\n  private boolean isPalindrome(long num) {\n    final String s = String.valueOf(num);\n    int l = 0;\n    int r = s.length() - 1;\n\n    while (l < r)\n      if (s.charAt(l++) != s.charAt(r--))\n        return false;\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def superpalindromesInRange(self, left: str, right: str) -> int:\n    def nextPalindrome(num: int) -> int:\n      s = str(num)\n      n = len(s)\n\n      half = s[0:(n + 1) // 2]\n      reversedHalf = half[:n // 2][::-1]\n      candidate = int(half + reversedHalf)\n      if candidate >= num:\n        return candidate\n\n      half = str(int(half) + 1)\n      reversedHalf = half[:n // 2][::-1]\n      return int(half + reversedHalf)\n\n    def isPalindrome(num: int) -> bool:\n      s = str(num)\n      l = 0\n      r = len(s) - 1\n\n      while l < r:\n        if s[l] != s[r]:\n          return False\n        l += 1\n        r -= 1\n\n      return True\n\n    ans = 0\n    l = int(left)\n    r = int(right)\n    i = int(sqrt(l))\n\n    while i * i <= r:\n      palindrome = nextPalindrome(i)\n      squared = palindrome**2\n      if squared <= r and isPalindrome(squared):\n        ans += 1\n      i = palindrome + 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}