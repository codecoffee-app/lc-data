{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "517",
            "title": "Super Washing Machines",
            "titleSlug": "super-washing-machines",
            "content": "<p>You have <code>n</code> super washing machines on a line. Initially, each washing machine has some dresses or is empty.</p>\n\n<p>For each move, you could choose any <code>m</code> (<code>1 &lt;= m &lt;= n</code>) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.</p>\n\n<p>Given an integer array <code>machines</code> representing the number of dresses in each washing machine from left to right on the line, return <em>the minimum number of moves to make all the washing machines have the same number of dresses</em>. If it is not possible to do it, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [1,0,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n1st move:    1     0 &lt;-- 5    =&gt;    1     1     4\n2nd move:    1 &lt;-- 1 &lt;-- 4    =&gt;    2     1     3\n3rd move:    2     1 &lt;-- 3    =&gt;    2     2     2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [0,3,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n1st move:    0 &lt;-- 3     0    =&gt;    1     2     0\n2nd move:    1     2 --&gt; 0    =&gt;    1     1     1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [0,2,0]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nIt&#39;s impossible to make all three washing machines have the same number of dresses.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == machines.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= machines[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 749,
            "dislikes": 211,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.9K\", \"totalSubmission\": \"68.4K\", \"totalAcceptedRaw\": 27937, \"totalSubmissionRaw\": 68354, \"acRate\": \"40.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array `machines` representing the number of dresses in each of `n` washing machines arranged in a line, determine the minimum number of moves required to equalize the number of dresses in all machines. In each move, you can select any `m` (where `1 <= m <= n`) washing machines and transfer one dress from each selected machine to one of its adjacent machines simultaneously. If it's impossible to equalize the dresses, return -1.",
                "constraints": [
                    "n == machines.length",
                    "1 <= n <= 10^4",
                    "0 <= machines[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1,0,5]",
                        "output": "3",
                        "explanation": "To equalize the dresses: 1 -> 0 <-- 5 => 1 -> 1 -> 4, then 1 <-- 1 <-- 4 => 2 -> 1 -> 3, and finally 2 -> 1 <-- 3 => 2 -> 2 -> 2. This requires 3 moves."
                    },
                    {
                        "input": "[0,3,0]",
                        "output": "2",
                        "explanation": "To equalize the dresses: 0 <-- 3 -> 0 => 1 -> 2 -> 0, then 1 -> 2 --> 0 => 1 -> 1 -> 1. This requires 2 moves."
                    },
                    {
                        "input": "[0,2,0]",
                        "output": "-1",
                        "explanation": "It's impossible to make all three washing machines have the same number of dresses because the total number of dresses (2) is not divisible by the number of machines (3)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findMinMoves(vector<int>& machines) {\n    const int dresses = accumulate(machines.begin(), machines.end(), 0);\n    if (dresses % machines.size() != 0)\n      return -1;\n\n    int ans = 0;\n    int inout = 0;\n    const int average = dresses / machines.size();\n\n    for (const int dress : machines) {\n      inout += dress - average;\n      ans = max({ans, abs(inout), dress - average});\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findMinMoves(int[] machines) {\n    int dresses = Arrays.stream(machines).sum();\n    if (dresses % machines.length != 0)\n      return -1;\n\n    int ans = 0;\n    int inout = 0;\n    final int average = dresses / machines.length;\n\n    for (final int dress : machines) {\n      inout += dress - average;\n      ans = Math.max(ans, Math.max(Math.abs(inout), dress - average));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findMinMoves(self, machines: List[int]) -> int:\n    dresses = sum(machines)\n\n    if dresses % len(machines) != 0:\n      return -1\n\n    ans = 0\n    average = dresses // len(machines)\n    inout = 0\n\n    for dress in machines:\n      inout += dress - average\n      ans = max(ans, abs(inout), dress - average)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}