{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "130",
            "title": "Surrounded Regions",
            "titleSlug": "surrounded-regions",
            "content": "<p>Given an <code>m x n</code> matrix <code>board</code> containing <code>&#39;X&#39;</code> and <code>&#39;O&#39;</code>, <em>capture all regions that are 4-directionally&nbsp;surrounded by</em> <code>&#39;X&#39;</code>.</p>\n\n<p>A region is <strong>captured</strong> by flipping all <code>&#39;O&#39;</code>s into <code>&#39;X&#39;</code>s in that surrounded region.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg\" style=\"width: 550px; height: 237px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;X&quot;,&quot;X&quot;]]\n<strong>Output:</strong> [[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;X&quot;,&quot;X&quot;]]\n<strong>Explanation:</strong> Notice that an &#39;O&#39; should not be flipped if:\n- It is on the border, or\n- It is adjacent to an &#39;O&#39; that should not be flipped.\nThe bottom &#39;O&#39; is on the border, so it is not flipped.\nThe other three &#39;O&#39; form a surrounded region, so they are flipped.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = [[&quot;X&quot;]]\n<strong>Output:</strong> [[&quot;X&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>board[i][j]</code> is <code>&#39;X&#39;</code> or <code>&#39;O&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8204,
            "dislikes": 1711,
            "similarQuestions": "[{\"title\": \"Number of Islands\", \"titleSlug\": \"number-of-islands\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Walls and Gates\", \"titleSlug\": \"walls-and-gates\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"633K\", \"totalSubmission\": \"1.6M\", \"totalAcceptedRaw\": 632963, \"totalSubmissionRaw\": 1641444, \"acRate\": \"38.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an `m x n` matrix `board` containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.  A region is captured by flipping all 'O's into 'X's in that surrounded region.",
                "constraints": [
                    "m == board.length",
                    "n == board[i].length",
                    "1 <= m, n <= 200",
                    "board[i][j] is 'X' or 'O'."
                ],
                "testcases": [
                    {
                        "input": "[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
                        "output": "[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
                        "explanation": "An 'O' should not be flipped if it is on the border or adjacent to an 'O' that should not be flipped. The bottom 'O' is on the border, so it remains 'O'. The other three 'O's form a surrounded region and are flipped to 'X'."
                    },
                    {
                        "input": "[[\"X\"]]",
                        "output": "[[\"X\"]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-islands",
                "title": "Number of Islands",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "walls-and-gates",
                "title": "Walls and Gates",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  void solve(vector<vector<char>>& board) {\n    if (board.empty())\n      return;\n\n    const int m = board.size();\n    const int n = board[0].size();\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    queue<pair<int, int>> q;\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (i * j == 0 || i == m - 1 || j == n - 1)\n          if (board[i][j] == 'O') {\n            q.emplace(i, j);\n            board[i][j] = '*';\n          }\n\n    // Mark grids that stretch from four sides with '*'\n    while (!q.empty()) {\n      const auto [i, j] = q.front();\n      q.pop();\n      for (int k = 0; k < 4; ++k) {\n        const int x = i + dirs[k];\n        const int y = j + dirs[k + 1];\n        if (x < 0 || x == m || y < 0 || y == n)\n          continue;\n        if (board[x][y] != 'O')\n          continue;\n        q.emplace(x, y);\n        board[x][y] = '*';\n      }\n    }\n\n    for (vector<char>& row : board)\n      for (char& c : row)\n        if (c == '*')\n          c = 'O';\n        else if (c == 'O')\n          c = 'X';\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public void solve(char[][] board) {\n    if (board.length == 0)\n      return;\n\n    final int m = board.length;\n    final int n = board[0].length;\n    final int[] dirs = {0, 1, 0, -1, 0};\n    Queue<int[]> q = new ArrayDeque<>();\n\n    for (int i = 0; i < m; ++i)\n      for (int j = 0; j < n; ++j)\n        if (i * j == 0 || i == m - 1 || j == n - 1)\n          if (board[i][j] == 'O') {\n            q.offer(new int[] {i, j});\n            board[i][j] = '*';\n          }\n\n    // Mark grids that stretch from four sides with '*'\n    while (!q.isEmpty()) {\n      final int i = q.peek()[0];\n      final int j = q.poll()[1];\n      for (int k = 0; k < 4; ++k) {\n        final int x = i + dirs[k];\n        final int y = j + dirs[k + 1];\n        if (x < 0 || x == m || y < 0 || y == n)\n          continue;\n        if (board[x][y] != 'O')\n          continue;\n        q.offer(new int[] {x, y});\n        board[x][y] = '*';\n      }\n    }\n\n    for (char[] row : board)\n      for (int i = 0; i < row.length; ++i)\n        if (row[i] == '*')\n          row[i] = 'O';\n        else if (row[i] == 'O')\n          row[i] = 'X';\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def solve(self, board: List[List[str]]) -> None:\n    if not board:\n      return\n\n    m = len(board)\n    n = len(board[0])\n    dirs = [0, 1, 0, -1, 0]\n    q = collections.deque()\n\n    for i in range(m):\n      for j in range(n):\n        if i * j == 0 or i == m - 1 or j == n - 1:\n          if board[i][j] == 'O':\n            q.append((i, j))\n            board[i][j] = '*'\n\n    # Mark grids that stretch from four sides with '*'\n    while q:\n      i, j = q.popleft()\n      for k in range(4):\n        x = i + dirs[k]\n        y = j + dirs[k + 1]\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if board[x][y] != 'O':\n          continue\n        q.append((x, y))\n        board[x][y] = '*'\n\n    for row in board:\n      for i, c in enumerate(row):\n        row[i] = 'O' if c == '*' else 'X'\n",
                "lang_text": "py"
            }
        }
    }
}