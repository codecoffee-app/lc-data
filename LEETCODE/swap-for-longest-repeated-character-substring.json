{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1156",
            "title": "Swap For Longest Repeated Character Substring",
            "titleSlug": "swap-for-longest-repeated-character-substring",
            "content": "<p>You are given a string <code>text</code>. You can swap two of the characters in the <code>text</code>.</p>\n\n<p>Return <em>the length of the longest substring with repeated characters</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;ababa&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can swap the first &#39;b&#39; with the last &#39;a&#39;, or the last &#39;b&#39; with the first &#39;a&#39;. Then, the longest repeated character substring is &quot;aaa&quot; with length 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;aaabaaa&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Swap &#39;b&#39; with the last &#39;a&#39; (or the first &#39;a&#39;), and we get longest repeated character substring &quot;aaaaaa&quot; with length 6.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;aaaaa&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> No need to swap, longest repeated character substring is &quot;aaaaa&quot; with length is 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>text</code> consist of lowercase English characters only.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 978,
            "dislikes": 92,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"29.5K\", \"totalSubmission\": \"66.6K\", \"totalAcceptedRaw\": 29504, \"totalSubmissionRaw\": 66620, \"acRate\": \"44.3%\"}",
            "hints": [
                "There are two cases:  a block of characters, or two blocks of characters between one different character. \r\n By keeping a run-length encoded version of the string, we can easily check these cases."
            ],
            "rephrased": {
                "body": "Given a string `text`, you are allowed to swap two characters within the string at most once. Find the length of the longest substring consisting of repeated characters after performing at most one swap.",
                "constraints": [
                    "1 <= text.length <= 2 * 10^4",
                    "text consists of lowercase English characters only."
                ],
                "testcases": [
                    {
                        "input": "ababa",
                        "output": "3",
                        "explanation": "By swapping the first 'b' with the last 'a' (or the last 'b' with the first 'a'), the string becomes 'aaaba' or 'abaaa'. The longest substring with repeated characters is then 'aaa', which has a length of 3."
                    },
                    {
                        "input": "aaabaaa",
                        "output": "6",
                        "explanation": "Swapping 'b' with the last 'a' (or the first 'a') results in the string 'aaaaaba' or 'abaaaaa'.  The longest repeated character substring is 'aaaaaa', with a length of 6."
                    },
                    {
                        "input": "aaaaa",
                        "output": "5",
                        "explanation": "No swap is needed. The longest repeated character substring is 'aaaaa', with a length of 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "There are two cases:  a block of characters, or two blocks of characters between one different character. \r\n By keeping a run-length encoded version of the string, we can easily check these cases."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxRepOpt1(string text) {\n    int ans = 0;\n    vector<int> count(26);\n    vector<pair<char, int>> groups{{text[0], 1}};\n\n    for (char c : text)\n      ++count[c - 'a'];\n\n    for (int i = 1; i < text.length(); ++i)\n      if (text[i] == text[i - 1])\n        ++groups[groups.size() - 1].second;\n      else\n        groups.emplace_back(text[i], 1);\n\n    for (const auto& [c, length] : groups)\n      ans = max(ans, min(length + 1, count[c - 'a']));\n\n    for (int i = 1; i + 1 < groups.size(); ++i)\n      if (groups[i - 1].first == groups[i + 1].first && groups[i].second == 1)\n        ans = max(ans, min(groups[i - 1].second + groups[i + 1].second + 1,\n                           count[groups[i - 1].first - 'a']));\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxRepOpt1(String text) {\n    int ans = 0;\n    int[] count = new int[26];\n    List<int[]> groups = new ArrayList<>();\n\n    for (char c : text.toCharArray())\n      ++count[c - 'a'];\n\n    groups.add(new int[] {text.charAt(0), 1});\n\n    for (int i = 1; i < text.length(); ++i)\n      if (text.charAt(i) == text.charAt(i - 1))\n        ++groups.get(groups.size() - 1)[1];\n      else\n        groups.add(new int[] {text.charAt(i), 1});\n\n    for (int[] group : groups)\n      ans = Math.max(ans, Math.min(group[1] + 1, count[group[0] - 'a']));\n\n    for (int i = 1; i + 1 < groups.size(); ++i)\n      if (groups.get(i - 1)[0] == groups.get(i + 1)[0] && groups.get(i)[1] == 1)\n        ans = Math.max(ans, Math.min(groups.get(i - 1)[1] + groups.get(i + 1)[1] + 1,\n                                     count[groups.get(i - 1)[0] - 'a']));\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxRepOpt1(self, text: str) -> int:\n    count = collections.Counter(text)\n    groups = [[c, len(list(group))]\n              for c, group in itertools.groupby(text)]\n    ans = max(min(length + 1, count[c]) for c, length in groups)\n\n    for i in range(1, len(groups) - 1):\n      if groups[i - 1][0] == groups[i + 1][0] and groups[i][1] == 1:\n        ans = max(\n            ans, min(groups[i - 1][1] + groups[i + 1][1] + 1, count[groups[i - 1][0]]))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}