{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "24",
            "title": "Swap Nodes in Pairs",
            "titleSlug": "swap-nodes-in-pairs",
            "content": "<p>Given a&nbsp;linked list, swap every two adjacent nodes and return its head. You must solve the problem without&nbsp;modifying the values in the list&#39;s nodes (i.e., only nodes themselves may be changed.)</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\" style=\"width: 422px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4]\n<strong>Output:</strong> [2,1,4,3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the&nbsp;list&nbsp;is in the range <code>[0, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 11521,
            "dislikes": 419,
            "similarQuestions": "[{\"title\": \"Reverse Nodes in k-Group\", \"titleSlug\": \"reverse-nodes-in-k-group\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Swapping Nodes in a Linked List\", \"titleSlug\": \"swapping-nodes-in-a-linked-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Linked List",
                    "slug": "linked-list"
                },
                {
                    "name": "Recursion",
                    "slug": "recursion"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.3M\", \"totalSubmission\": \"2M\", \"totalAcceptedRaw\": 1272421, \"totalSubmissionRaw\": 2001916, \"acRate\": \"63.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a singly linked list, rearrange it by swapping every two adjacent nodes. The task is to return the head of the modified list. This must be accomplished without altering the values stored within the list nodes; only the node links themselves can be changed.",
                "constraints": [
                    "The number of nodes in the list is in the range [0, 100].",
                    "0 <= Node.val <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4]",
                        "output": "[2,1,4,3]",
                        "explanation": "The linked list [1,2,3,4] is transformed into [2,1,4,3] by swapping the adjacent pairs."
                    },
                    {
                        "input": "[]",
                        "output": "[]",
                        "explanation": "An empty list remains empty after the operation."
                    },
                    {
                        "input": "[1]",
                        "output": "[1]",
                        "explanation": "A list with only one node remains unchanged as there are no adjacent nodes to swap."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "reverse-nodes-in-k-group",
                "title": "Reverse Nodes in k-Group",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "swapping-nodes-in-a-linked-list",
                "title": "Swapping Nodes in a Linked List",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  ListNode* swapPairs(ListNode* head) {\n    const int length = getLength(head);\n    ListNode dummy(0, head);\n    ListNode* prev = &dummy;\n    ListNode* curr = head;\n\n    for (int i = 0; i < length / 2; ++i) {\n      ListNode* next = curr->next;\n      curr->next = next->next;\n      next->next = prev->next;\n      prev->next = next;\n      prev = curr;\n      curr = curr->next;\n    }\n\n    return dummy.next;\n  }\n\n private:\n  int getLength(ListNode* head) {\n    int length = 0;\n    for (ListNode* curr = head; curr; curr = curr->next)\n      ++length;\n    return length;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public ListNode swapPairs(ListNode head) {\n    final int length = getLength(head);\n    ListNode dummy = new ListNode(0, head);\n    ListNode prev = dummy;\n    ListNode curr = head;\n\n    for (int i = 0; i < length / 2; ++i) {\n      ListNode next = curr.next;\n      curr.next = next.next;\n      next.next = curr;\n      prev.next = next;\n      prev = curr;\n      curr = curr.next;\n    }\n\n    return dummy.next;\n  }\n\n  private int getLength(ListNode head) {\n    int length = 0;\n    for (ListNode curr = head; curr != null; curr = curr.next)\n      ++length;\n    return length;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def swapPairs(self, head: ListNode) -> ListNode:\n    def getLength(head: ListNode) -> int:\n      length = 0\n      while head:\n        length += 1\n        head = head.next\n      return length\n\n    length = getLength(head)\n    dummy = ListNode(0, head)\n    prev = dummy\n    curr = head\n\n    for _ in range(length // 2):\n      next = curr.next\n      curr.next = next.next\n      next.next = prev.next\n      prev.next = next\n      prev = curr\n      curr = curr.next\n\n    return dummy.next\n",
                "lang_text": "py"
            }
        }
    }
}