{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "778",
            "title": "Swim in Rising Water",
            "titleSlug": "swim-in-rising-water",
            "content": "<p>You are given an <code>n x n</code> integer matrix <code>grid</code> where each value <code>grid[i][j]</code> represents the elevation at that point <code>(i, j)</code>.</p>\n\n<p>The rain starts to fall. At time <code>t</code>, the depth of the water everywhere is <code>t</code>. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most <code>t</code>. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.</p>\n\n<p>Return <em>the least time until you can reach the bottom right square </em><code>(n - 1, n - 1)</code><em> if you start at the top left square </em><code>(0, 0)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/swim1-grid.jpg\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,2],[1,3]]\n<strong>Output:</strong> 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/swim2-grid-1.jpg\" style=\"width: 404px; height: 405px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;&nbsp;n<sup>2</sup></code></li>\n\t<li>Each value <code>grid[i][j]</code> is <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3461,
            "dislikes": 228,
            "similarQuestions": "[{\"title\": \"Path With Minimum Effort\", \"titleSlug\": \"path-with-minimum-effort\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"143K\", \"totalSubmission\": \"236.7K\", \"totalAcceptedRaw\": 142966, \"totalSubmissionRaw\": 236715, \"acRate\": \"60.4%\"}",
            "hints": [
                "Use either Dijkstra's, or binary search for the best time T for which you can reach the end if you only step on squares at most T."
            ],
            "rephrased": {
                "body": "Given an `n x n` integer matrix `grid` where `grid[i][j]` represents the elevation at point `(i, j)`, determine the least time `t` until you can reach the bottom right square `(n - 1, n - 1)` starting from the top left square `(0, 0)`.  At time `t`, the depth of the water is `t` everywhere. You can swim between 4-directionally adjacent squares only if the elevation of both squares is at most `t`. You can swim infinite distances in zero time and must stay within grid boundaries.",
                "constraints": [
                    "n == grid.length",
                    "n == grid[i].length",
                    "1 <= n <= 50",
                    "0 <= grid[i][j] < n<sup>2</sup>",
                    "Each value grid[i][j] is unique."
                ],
                "testcases": [
                    {
                        "input": "[[0,2],[1,3]]",
                        "output": "3",
                        "explanation": "At time 0, you are at grid location (0, 0). You cannot move because adjacent neighbors have elevations higher than t = 0. You cannot reach point (1, 1) until time 3. When the depth of water is 3, you can swim anywhere inside the grid."
                    },
                    {
                        "input": "[[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]",
                        "output": "16",
                        "explanation": "You need to wait until time 16 so that (0, 0) and (4, 4) are connected."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "path-with-minimum-effort",
                "title": "Path With Minimum Effort",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Use either Dijkstra's, or binary search for the best time T for which you can reach the end if you only step on squares at most T."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int swimInWater(vector<vector<int>>& grid) {\n    const int n = grid.size();\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    int ans = grid[0][0];\n    using T = tuple<int, int, int>;  // (grid[i][j], i, j)\n    priority_queue<T, vector<T>, greater<>> minHeap;\n    vector<vector<bool>> seen(n, vector<bool>(n));\n\n    minHeap.emplace(grid[0][0], 0, 0);\n    seen[0][0] = true;\n\n    while (!minHeap.empty()) {\n      const auto [height, i, j] = minHeap.top();\n      minHeap.pop();\n      ans = max(ans, height);\n      if (i == n - 1 && j == n - 1)\n        break;\n      for (int k = 0; k < 4; ++k) {\n        const int x = i + dirs[k];\n        const int y = j + dirs[k + 1];\n        if (x < 0 || x == n || y < 0 || y == n)\n          continue;\n        if (seen[x][y])\n          continue;\n        minHeap.emplace(grid[x][y], x, y);\n        seen[x][y] = true;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int swimInWater(int[][] grid) {\n    final int n = grid.length;\n    final int[] dirs = {0, 1, 0, -1, 0};\n    int ans = grid[0][0];\n    // (grid[i][j], i, j)\n    Queue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n    boolean[][] seen = new boolean[n][n];\n\n    minHeap.offer(new int[] {grid[0][0], 0, 0});\n    seen[0][0] = true;\n\n    while (!minHeap.isEmpty()) {\n      final int height = minHeap.peek()[0];\n      final int i = minHeap.peek()[1];\n      final int j = minHeap.poll()[2];\n      ans = Math.max(ans, height);\n      if (i == n - 1 && j == n - 1)\n        break;\n      for (int k = 0; k < 4; ++k) {\n        final int x = i + dirs[k];\n        final int y = j + dirs[k + 1];\n        if (x < 0 || x == n || y < 0 || y == n)\n          continue;\n        if (seen[x][y])\n          continue;\n        minHeap.offer(new int[] {grid[x][y], x, y});\n        seen[x][y] = true;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}