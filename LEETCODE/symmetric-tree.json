{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "101",
            "title": "Symmetric Tree",
            "titleSlug": "symmetric-tree",
            "content": "<p>Given the <code>root</code> of a binary tree, <em>check whether it is a mirror of itself</em> (i.e., symmetric around its center).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg\" style=\"width: 354px; height: 291px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,2,3,4,4,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg\" style=\"width: 308px; height: 258px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,2,null,3,null,3]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it both recursively and iteratively?",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 14725,
            "dislikes": 356,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"3.3M\", \"totalAcceptedRaw\": 1846713, \"totalSubmissionRaw\": 3312113, \"acRate\": \"55.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary tree, determine if it is symmetric around its center (a mirror of itself).",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 1000].",
                    "-100 <= Node.val <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1,2,2,3,4,4,3]",
                        "output": "true",
                        "explanation": "The given binary tree is a mirror of itself."
                    },
                    {
                        "input": "[1,2,2,null,3,null,3]",
                        "output": "false",
                        "explanation": "The given binary tree is not a mirror of itself."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isSymmetric(TreeNode* root) {\n    return isSymmetric(root, root);\n  }\n\n private:\n  bool isSymmetric(TreeNode* p, TreeNode* q) {\n    if (!p || !q)\n      return p == q;\n\n    return p->val == q->val &&                //\n           isSymmetric(p->left, q->right) &&  //\n           isSymmetric(p->right, q->left);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isSymmetric(TreeNode root) {\n    return isSymmetric(root, root);\n  }\n\n  private boolean isSymmetric(TreeNode p, TreeNode q) {\n    if (p == null || q == null)\n      return p == q;\n\n    return p.val == q.val && isSymmetric(p.left, q.right) && isSymmetric(p.right, q.left);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n    def isSymmetric(p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n      if not p or not q:\n        return p == q\n\n      return p.val == q.val and \\\n          isSymmetric(p.left, q.right) and \\\n          isSymmetric(p.right, q.left)\n\n    return isSymmetric(root, root)\n",
                "lang_text": "py"
            }
        }
    }
}