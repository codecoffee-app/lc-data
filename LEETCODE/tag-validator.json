{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "591",
            "title": "Tag Validator",
            "titleSlug": "tag-validator",
            "content": "<p>Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.</p>\n\n<p>A code snippet is valid if all the following rules hold:</p>\n\n<ol>\n\t<li>The code must be wrapped in a <b>valid closed tag</b>. Otherwise, the code is invalid.</li>\n\t<li>A <b>closed tag</b> (not necessarily valid) has exactly the following format : <code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>. Among them, <code>&lt;TAG_NAME&gt;</code> is the start tag, and <code>&lt;/TAG_NAME&gt;</code> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is <b>valid</b> if and only if the TAG_NAME and TAG_CONTENT are valid.</li>\n\t<li>A <b>valid</b> <code>TAG_NAME</code> only contain <b>upper-case letters</b>, and has length in range [1,9]. Otherwise, the <code>TAG_NAME</code> is <b>invalid</b>.</li>\n\t<li>A <b>valid</b> <code>TAG_CONTENT</code> may contain other <b>valid closed tags</b>, <b>cdata</b> and any characters (see note1) <b>EXCEPT</b> unmatched <code>&lt;</code>, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the <code>TAG_CONTENT</code> is <b>invalid</b>.</li>\n\t<li>A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.</li>\n\t<li>A <code>&lt;</code> is unmatched if you cannot find a subsequent <code>&gt;</code>. And when you find a <code>&lt;</code> or <code>&lt;/</code>, all the subsequent characters until the next <code>&gt;</code> should be parsed as TAG_NAME (not necessarily valid).</li>\n\t<li>The cdata has the following format : <code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>. The range of <code>CDATA_CONTENT</code> is defined as the characters between <code>&lt;![CDATA[</code> and the <b>first subsequent</b> <code>]]&gt;</code>.</li>\n\t<li><code>CDATA_CONTENT</code> may contain <b>any characters</b>. The function of cdata is to forbid the validator to parse <code>CDATA_CONTENT</code>, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as <b>regular characters</b>.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> code = &quot;&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nThe code is wrapped in a closed tag : &lt;DIV&gt; and &lt;/DIV&gt;. \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> code = &quot;&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -&gt; <b>&quot;&lt;DIV&gt;&quot;</b>\nend_tag -&gt; <b>&quot;&lt;/DIV&gt;&quot;</b>\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -&gt; <b>&quot;&gt;&gt;  ![cdata[]] &quot;</b>\ncdata -&gt; <b>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;&quot;</b>, where the CDATA_CONTENT is <b>&quot;&lt;div&gt;]&gt;&quot;</b>\ntext2 -&gt; <b>&quot;]]&gt;&gt;]&quot;</b>\nThe reason why start_tag is NOT <b>&quot;&lt;DIV&gt;&gt;&gt;&quot;</b> is because of the rule 6.\nThe reason why cdata is NOT <b>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&quot;</b> is because of the rule 7.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> code = &quot;&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Unbalanced. If &quot;&lt;A&gt;&quot; is closed, then &quot;&lt;B&gt;&quot; must be unmatched, and vice versa.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= code.length &lt;= 500</code></li>\n\t<li><code>code</code> consists of English letters, digits, <code>&#39;&lt;&#39;</code>, <code>&#39;&gt;&#39;</code>, <code>&#39;/&#39;</code>, <code>&#39;!&#39;</code>, <code>&#39;[&#39;</code>, <code>&#39;]&#39;</code>, <code>&#39;.&#39;</code>, and <code>&#39; &#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 163,
            "dislikes": 637,
            "similarQuestions": "[{\"title\": \"Add Bold Tag in String\", \"titleSlug\": \"add-bold-tag-in-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                }
            ],
            "stats": "{\"totalAccepted\": \"14K\", \"totalSubmission\": \"37.3K\", \"totalAcceptedRaw\": 14029, \"totalSubmissionRaw\": 37251, \"acRate\": \"37.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string representing a code snippet, determine if it is a valid code according to the specified tag validation rules.\n\nA code snippet is considered valid if it adheres to the following criteria:\n\n1.  The code must be enclosed within a valid closed tag. Otherwise, the code is deemed invalid.\n2.  A closed tag has the format `<TAG_NAME>TAG_CONTENT</TAG_NAME>`, where `<TAG_NAME>` is the start tag and `</TAG_NAME>` is the end tag. A closed tag is valid only if both the TAG_NAME and TAG_CONTENT are valid.\n3.  A valid TAG_NAME consists exclusively of uppercase letters and has a length between 1 and 9 (inclusive). Any other TAG_NAME is invalid.\n4.  A valid TAG_CONTENT may contain other valid closed tags, CDATA sections, and any characters EXCEPT unmatched `<`, unmatched start and end tags, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.\n5.  A start tag is unmatched if there's no corresponding end tag with the same TAG_NAME, and vice versa. Tag nesting must also be considered.\n6.  A `<` is unmatched if there's no subsequent `>`.  When a `<` or `</` is encountered, all characters until the next `>` should be parsed as TAG_NAME.\n7.  CDATA sections follow the format `<![CDATA[CDATA_CONTENT]]>`. The `CDATA_CONTENT` comprises characters between `<![CDATA[` and the first subsequent `]]>`. The CDATA section forbids the validator from parsing its content; any characters within `CDATA_CONTENT` are treated as regular characters, regardless of whether they could be parsed as valid or invalid tags.\n",
                "constraints": [
                    "1 <= code.length <= 500",
                    "code consists of English letters, digits, '<', '>', '/', '!', '[', ']', '.', and ' '."
                ],
                "testcases": [
                    {
                        "input": "<DIV>This is the first line <![CDATA[<div&gt;]]></DIV>",
                        "output": "true",
                        "explanation": "The code is enclosed in a valid closed tag: <DIV> and </DIV>. The TAG_NAME 'DIV' is valid. The TAG_CONTENT contains plain text and a CDATA section.  The CDATA section contains what looks like a tag, but it is ignored within the CDATA."
                    },
                    {
                        "input": "<DIV>>>>  ![cdata[]] <![CDATA[<div&gt;]]>]]>>>]</DIV>",
                        "output": "true",
                        "explanation": "The code is enclosed in a valid closed tag: <DIV> and </DIV>. The TAG_CONTENT consists of text and a CDATA section. The CDATA part is '<![CDATA[<div&gt;]]>'. All parts are valid, so returns true."
                    },
                    {
                        "input": "<A>  <B> </A>   </B>",
                        "output": "false",
                        "explanation": "The tags are unbalanced. <A> is closed before <B>, and <B> is closed after <A> has already been closed.  Therefore, this is invalid."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "add-bold-tag-in-string",
                "title": "Add Bold Tag in String",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isValid(string code) {\n    if (code[0] != '<' || code.back() != '>')\n      return false;\n\n    stack<string> stack;\n\n    for (int i = 0; i < code.length(); ++i) {\n      int closeIndex = 0;\n      if (stack.empty() && containsTag)\n        return false;\n      if (code[i] == '<') {\n        // Inside a tag, so we can check if it's a cdata\n        if (!stack.empty() && code[i + 1] == '!') {\n          closeIndex = code.find(\"]]>\", i + 2);\n          if (closeIndex == string::npos ||\n              !isValidCdata(code.substr(i + 2, closeIndex - i - 2)))\n            return false;\n        } else if (code[i + 1] == '/') {  // End tag\n          closeIndex = code.find('>', i + 2);\n          if (closeIndex == string::npos ||\n              !isValidTagName(stack, code.substr(i + 2, closeIndex - i - 2),\n                              true))\n            return false;\n        } else {  // Start tag\n          closeIndex = code.find('>', i + 1);\n          if (closeIndex == string::npos ||\n              !isValidTagName(stack, code.substr(i + 1, closeIndex - i - 1),\n                              false))\n            return false;\n        }\n        i = closeIndex;\n      }\n    }\n\n    return stack.empty() && containsTag;\n  }\n\n private:\n  bool containsTag = false;\n\n  bool isValidCdata(const string& s) {\n    return s.find(\"[CDATA[\") == 0;\n  }\n\n  bool isValidTagName(stack<string>& stack, const string& tagName,\n                      bool isEndTag) {\n    if (tagName.empty() || tagName.length() > 9)\n      return false;\n\n    for (const char c : tagName)\n      if (!isupper(c))\n        return false;\n\n    if (isEndTag) {\n      if (stack.empty())\n        return false;\n      if (stack.top() != tagName)\n        return false;\n      stack.pop();\n      return true;\n    }\n\n    containsTag = true;\n    stack.push(tagName);\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isValid(String code) {\n    if (code.charAt(0) != '<' || code.charAt(code.length() - 1) != '>')\n      return false;\n\n    Deque<String> stack = new ArrayDeque<>();\n\n    for (int i = 0; i < code.length(); ++i) {\n      int closeIndex = 0;\n      if (stack.isEmpty() && containsTag)\n        return false;\n      if (code.charAt(i) == '<') {\n        // Inside a tag, so we can check if it's a cdata\n        if (!stack.isEmpty() && code.charAt(i + 1) == '!') {\n          closeIndex = code.indexOf(\"]]>\", i + 2);\n          if (closeIndex < 0 || !isValidCdata(code.substring(i + 2, closeIndex)))\n            return false;\n        } else if (code.charAt(i + 1) == '/') { // End tag\n          closeIndex = code.indexOf('>', i + 2);\n          if (closeIndex < 0 || !isValidTagName(stack, code.substring(i + 2, closeIndex), true))\n            return false;\n        } else { // Start tag\n          closeIndex = code.indexOf('>', i + 1);\n          if (closeIndex < 0 || !isValidTagName(stack, code.substring(i + 1, closeIndex), false))\n            return false;\n        }\n        i = closeIndex;\n      }\n    }\n\n    return stack.isEmpty() && containsTag;\n  }\n\n  private boolean containsTag = false;\n\n  private boolean isValidCdata(final String s) {\n    return s.indexOf(\"[CDATA[\") == 0;\n  }\n\n  private boolean isValidTagName(Deque<String> stack, String tagName, boolean isEndTag) {\n    if (tagName.isEmpty() || tagName.length() > 9)\n      return false;\n\n    for (final char c : tagName.toCharArray())\n      if (!Character.isUpperCase(c))\n        return false;\n\n    if (isEndTag)\n      return !stack.isEmpty() && stack.pop().equals(tagName);\n\n    containsTag = true;\n    stack.push(tagName);\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isValid(self, code: str) -> bool:\n    if code[0] != '<' or code[-1] != '>':\n      return False\n\n    containsTag = False\n    stack = []\n\n    def isValidCdata(s: str) -> bool:\n      return s.find('[CDATA[') == 0\n\n    def isValidTagName(tagName: str, isEndTag: bool) -> bool:\n      nonlocal containsTag\n      if not tagName or len(tagName) > 9:\n        return False\n      if any(not c.isupper() for c in tagName):\n        return False\n\n      if isEndTag:\n        return stack and stack.pop() == tagName\n\n      containsTag = True\n      stack.append(tagName)\n      return True\n\n    i = 0\n    while i < len(code):\n      if not stack and containsTag:\n        return False\n      if code[i] == '<':\n        # Inside a tag, so we can check if it's a cdata\n        if stack and code[i + 1] == '!':\n          closeIndex = code.find(']]>', i + 2)\n          if closeIndex == -1 or not isValidCdata(code[i + 2:closeIndex]):\n            return False\n        elif code[i + 1] == '/':  # End tag\n          closeIndex = code.find('>', i + 2)\n          if closeIndex == -1 or not isValidTagName(code[i + 2:closeIndex], True):\n            return False\n        else:  # Start tag\n          closeIndex = code.find('>', i + 1)\n          if closeIndex == -1 or not isValidTagName(code[i + 1:closeIndex], False):\n            return False\n        i = closeIndex\n      i += 1\n\n    return not stack and containsTag\n",
                "lang_text": "py"
            }
        }
    }
}