{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2558",
            "title": "Take Gifts From the Richest Pile",
            "titleSlug": "take-gifts-from-the-richest-pile",
            "content": "<p>You are given an integer array <code>gifts</code> denoting the number of gifts in various piles. Every second, you do the following:</p>\n\n<ul>\n\t<li>Choose the pile with the maximum number of gifts.</li>\n\t<li>If there is more than one pile with the maximum number of gifts, choose any.</li>\n\t<li>Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.</li>\n</ul>\n\n<p>Return <em>the number of gifts remaining after </em><code>k</code><em> seconds.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> gifts = [25,64,9,4,100], k = 4\n<strong>Output:</strong> 29\n<strong>Explanation:</strong> \nThe gifts are taken in the following way:\n- In the first second, the last pile is chosen and 10 gifts are left behind.\n- Then the second pile is chosen and 8 gifts are left behind.\n- After that the first pile is chosen and 5 gifts are left behind.\n- Finally, the last pile is chosen again and 3 gifts are left behind.\nThe final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> gifts = [1,1,1,1], k = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nIn this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. \nThat is, you can&#39;t take any pile with you. \nSo, the total gifts remaining are 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= gifts.length &lt;= 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= gifts[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 341,
            "dislikes": 30,
            "similarQuestions": "[{\"title\": \"Remove Stones to Minimize the Total\", \"titleSlug\": \"remove-stones-to-minimize-the-total\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"39.9K\", \"totalSubmission\": \"60.3K\", \"totalAcceptedRaw\": 39852, \"totalSubmissionRaw\": 60285, \"acRate\": \"66.1%\"}",
            "hints": [
                "How can you keep track of the largest gifts in the array",
                "What is an efficient way to find the square root of a number?",
                "Can you keep adding up the values of the gifts while ensuring they are in a certain order?",
                "Can we use a priority queue or heap here?"
            ],
            "rephrased": {
                "body": "You are given an integer array `gifts` representing the number of gifts in various piles. Each second, you select the pile with the maximum number of gifts. If multiple piles have the maximum number of gifts, you can choose any of them. You then leave behind the floor of the square root of the number of gifts in the chosen pile, taking the remaining gifts.  Return the total number of gifts remaining after `k` seconds.",
                "constraints": [
                    "1 <= gifts.length <= 10^3",
                    "1 <= gifts[i] <= 10^9",
                    "1 <= k <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "gifts = [25,64,9,4,100], k = 4",
                        "output": "29",
                        "explanation": "Initially, gifts = [25, 64, 9, 4, 100].\nSecond 1: Choose pile with 100 gifts. Leave behind floor(sqrt(100)) = 10. gifts becomes [25, 64, 9, 4, 10].\nSecond 2: Choose pile with 64 gifts. Leave behind floor(sqrt(64)) = 8. gifts becomes [25, 8, 9, 4, 10].\nSecond 3: Choose pile with 25 gifts. Leave behind floor(sqrt(25)) = 5. gifts becomes [5, 8, 9, 4, 10].\nSecond 4: Choose pile with 10 gifts. Leave behind floor(sqrt(10)) = 3. gifts becomes [5, 8, 9, 4, 3].\nTotal remaining gifts: 5 + 8 + 9 + 4 + 3 = 29."
                    },
                    {
                        "input": "gifts = [1,1,1,1], k = 4",
                        "output": "4",
                        "explanation": "Since each pile has only 1 gift, taking the square root of 1 results in 1. Therefore, for each second, each pile will still have 1 gift remaining. After 4 seconds, each pile still has 1 gift, resulting in a total of 4 gifts."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "remove-stones-to-minimize-the-total",
                "title": "Remove Stones to Minimize the Total",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How can you keep track of the largest gifts in the array",
            "What is an efficient way to find the square root of a number?",
            "Can you keep adding up the values of the gifts while ensuring they are in a certain order?",
            "Can we use a priority queue or heap here?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long pickGifts(vector<int>& gifts, int k) {\n    long long ans = 0;\n    priority_queue<int> maxHeap;\n\n    for (const int gift : gifts)\n      maxHeap.push(gift);\n\n    for (int i = 0; i < k; ++i) {\n      const int squaredMax = sqrt(maxHeap.top());\n      maxHeap.pop();\n      maxHeap.push(squaredMax);\n    }\n\n    while (!maxHeap.empty())\n      ans += maxHeap.top(), maxHeap.pop();\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long pickGifts(int[] gifts, int k) {\n    long ans = 0;\n    Queue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n    for (final int gift : gifts)\n      maxHeap.offer(gift);\n\n    for (int i = 0; i < k; ++i) {\n      final int squaredMax = (int) Math.sqrt(maxHeap.poll());\n      maxHeap.offer(squaredMax);\n    }\n\n    while (!maxHeap.isEmpty())\n      ans += maxHeap.poll();\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def pickGifts(self, gifts: List[int], k: int) -> int:\n    maxHeap = [-gift for gift in gifts]\n    heapq.heapify(maxHeap)\n\n    for _ in range(k):\n      squaredMax = int(sqrt(-heapq.heappop(maxHeap)))\n      heapq.heappush(maxHeap, -squaredMax)\n\n    return -sum(maxHeap)\n",
                "lang_text": "py"
            }
        }
    }
}