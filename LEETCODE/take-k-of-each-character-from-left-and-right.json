{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2516",
            "title": "Take K of Each Character From Left and Right",
            "titleSlug": "take-k-of-each-character-from-left-and-right",
            "content": "<p>You are given a string <code>s</code> consisting of the characters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code> and a non-negative integer <code>k</code>. Each minute, you may take either the <strong>leftmost</strong> character of <code>s</code>, or the <strong>rightmost</strong> character of <code>s</code>.</p>\n\n<p>Return<em> the <strong>minimum</strong> number of minutes needed for you to take <strong>at least</strong> </em><code>k</code><em> of each character, or return </em><code>-1</code><em> if it is not possible to take </em><code>k</code><em> of each character.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabaaaacaabc&quot;, k = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> \nTake three characters from the left of s. You now have two &#39;a&#39; characters, and one &#39;b&#39; character.\nTake five characters from the right of s. You now have four &#39;a&#39; characters, two &#39;b&#39; characters, and two &#39;c&#39; characters.\nA total of 3 + 5 = 8 minutes is needed.\nIt can be proven that 8 is the minimum number of minutes needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, k = 1\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is not possible to take one &#39;b&#39; or &#39;c&#39; so return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only the letters <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, and <code>&#39;c&#39;</code>.</li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 651,
            "dislikes": 61,
            "similarQuestions": "[{\"title\": \"Merge Sorted Array\", \"titleSlug\": \"merge-sorted-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Reorder List\", \"titleSlug\": \"reorder-list\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Defuse the Bomb\", \"titleSlug\": \"defuse-the-bomb\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Sliding Window",
                    "slug": "sliding-window"
                }
            ],
            "stats": "{\"totalAccepted\": \"14K\", \"totalSubmission\": \"41.1K\", \"totalAcceptedRaw\": 14014, \"totalSubmissionRaw\": 41070, \"acRate\": \"34.1%\"}",
            "hints": [
                "Start by counting the frequency of each character and checking if it is possible.",
                "If you take x characters from the left side, what is the minimum number of characters you need to take from the right side? Find this for all values of x in the range 0 \u2264 x \u2264 s.length.",
                "Use a two-pointers approach to avoid computing the same information multiple times."
            ],
            "rephrased": {
                "body": "Given a string `s` containing only the characters 'a', 'b', and 'c', and a non-negative integer `k`. In each minute, you can take either the leftmost or the rightmost character of `s`.  Determine the minimum number of minutes required to collect at least `k` occurrences of each character ('a', 'b', and 'c'). If it is not possible to collect at least `k` of each character, return -1.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists of only the letters 'a', 'b', and 'c'.",
                    "0 <= k <= s.length"
                ],
                "testcases": [
                    {
                        "input": "s = \"aabaaaacaabc\", k = 2",
                        "output": "8",
                        "explanation": "Taking 3 characters from the left yields two 'a's and one 'b'. Then taking 5 characters from the right adds two 'a's, one 'b', and two 'c's.  This gives a total of at least `k=2` of each character in 3 + 5 = 8 minutes. This is the minimum possible."
                    },
                    {
                        "input": "s = \"a\", k = 1",
                        "output": "-1",
                        "explanation": "Since the string 'a' contains no 'b' or 'c', it is impossible to collect at least `k=1` of each character."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "merge-sorted-array",
                "title": "Merge Sorted Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "reorder-list",
                "title": "Reorder List",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "defuse-the-bomb",
                "title": "Defuse the Bomb",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Start by counting the frequency of each character and checking if it is possible.",
            "If you take x characters from the left side, what is the minimum number of characters you need to take from the right side? Find this for all values of x in the range 0 \u2264 x \u2264 s.length.",
            "Use a two-pointers approach to avoid computing the same information multiple times."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int takeCharacters(string s, int k) {\n    const int n = s.length();\n    int ans = n;\n    vector<int> count(3);\n\n    for (const char c : s)\n      ++count[c - 'a'];\n\n    if (count[0] < k || count[1] < k || count[2] < k)\n      return -1;\n\n    for (int l = 0, r = 0; r < n; ++r) {\n      --count[s[r] - 'a'];\n      while (count[s[r] - 'a'] < k)\n        ++count[s[l++] - 'a'];\n      ans = min(ans, n - (r - l + 1));\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int takeCharacters(String s, int k) {\n    final int n = s.length();\n    int ans = n;\n    int[] count = new int[3];\n\n    for (final char c : s.toCharArray())\n      ++count[c - 'a'];\n\n    if (count[0] < k || count[1] < k || count[2] < k)\n      return -1;\n\n    for (int l = 0, r = 0; r < n; ++r) {\n      --count[s.charAt(r) - 'a'];\n      while (count[s.charAt(r) - 'a'] < k)\n        ++count[s.charAt(l++) - 'a'];\n      ans = Math.min(ans, n - (r - l + 1));\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def takeCharacters(self, s: str, k: int) -> int:\n    n = len(s)\n    ans = n\n    count = collections.Counter(s)\n    if any(count[c] < k for c in 'abc'):\n      return -1\n\n    l = 0\n    for r, c in enumerate(s):\n      count[c] -= 1\n      while count[c] < k:\n        count[s[l]] += 1\n        l += 1\n      ans = min(ans, n - (r - l + 1))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}