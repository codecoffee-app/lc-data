{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3147",
            "title": "Taking Maximum Energy From the Mystic Dungeon",
            "titleSlug": "taking-maximum-energy-from-the-mystic-dungeon",
            "content": "<p>In a mystic dungeon, <code>n</code> magicians are standing in a line. Each magician has an attribute that gives you energy. Some magicians can give you negative energy, which means taking energy from you.</p>\n\n<p>You have been cursed in such a way that after absorbing energy from magician <code>i</code>, you will be instantly transported to magician <code>(i + k)</code>. This process will be repeated until you reach the magician where <code>(i + k)</code> does not exist.</p>\n\n<p>In other words, you will choose a starting point and then teleport with <code>k</code> jumps until you reach the end of the magicians&#39; sequence, <strong>absorbing all the energy</strong> during the journey.</p>\n\n<p>You are given an array <code>energy</code> and an integer <code>k</code>. Return the <strong>maximum</strong> possible energy you can gain.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> energy = [5,2,-10,-5,1], k = 3</span></p>\n\n<p><strong>Output:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> 3</span></p>\n\n<p><strong>Explanation:</strong> We can gain a total energy of 3 by starting from magician 1 absorbing 2 + 1 = 3.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> energy = [-2,-3,-1], k = 2</span></p>\n\n<p><strong>Output:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> -1</span></p>\n\n<p><strong>Explanation:</strong> We can gain a total energy of -1 by starting from magician 2.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= energy.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-1000 &lt;= energy[i] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= k &lt;= energy.length - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\u200b\u200b\u200b\u200b\u200b\u200b",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 139,
            "dislikes": 11,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"27.4K\", \"totalSubmission\": \"67.8K\", \"totalAcceptedRaw\": 27387, \"totalSubmissionRaw\": 67803, \"acRate\": \"40.4%\"}",
            "hints": [
                "Let <code>dp[i]</code> denote the energy we gain starting from index <code>i</code>.",
                "We can notice, that <code> dp[i] = dp[i + k] + energy[i]</code>."
            ],
            "rephrased": {
                "body": "You are in a mystic dungeon facing a line of magicians. Each magician possesses an energy value, which can be positive or negative. You start at a chosen magician and absorb their energy. After absorbing energy from magician 'i', you are teleported to magician '(i + k)'. This process repeats until you reach a position where '(i + k)' is beyond the end of the line.  Your goal is to select a starting magician such that the total energy gained through these teleportation jumps is maximized.",
                "constraints": [
                    "1 <= energy.length <= 10^5",
                    "-1000 <= energy[i] <= 1000",
                    "1 <= k <= energy.length - 1"
                ],
                "testcases": [
                    {
                        "input": "energy = [5,2,-10,-5,1], k = 3",
                        "output": "3",
                        "explanation": "Starting from index 1 (the second magician), you gain energy from the magicians at indices 1 and 4, resulting in a total energy of 2 + 1 = 3. This is the maximum energy achievable."
                    },
                    {
                        "input": "energy = [-2,-3,-1], k = 2",
                        "output": "-1",
                        "explanation": "Starting from index 2 (the third magician), you gain energy only from that magician, resulting in a total energy of -1. This is the maximum energy achievable in this case (least negative)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Let <code>dp[i]</code> denote the energy we gain starting from index <code>i</code>.",
            "We can notice, that <code> dp[i] = dp[i + k] + energy[i]</code>."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maximumEnergy(vector<int>& energy, int k) {\n    vector<int> dp(energy);\n    for (int i = energy.size() - 1 - k; i >= 0; --i)\n      dp[i] += dp[i + k];\n    return ranges::max(dp);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maximumEnergy(int[] energy, int k) {\n    int[] dp = energy.clone();\n    for (int i = energy.length - 1 - k; i >= 0; --i)\n      dp[i] += dp[i + k];\n    return Arrays.stream(dp).max().getAsInt();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maximumEnergy(self, energy: List[int], k: int) -> int:\n    # dp[i] := the sum of energy starting at i\n    dp = energy.copy()\n    for i in range(len(energy) - 1 - k, -1, -1):\n      dp[i] += dp[i + k]\n    return max(dp)\n",
                "lang_text": "py"
            }
        }
    }
}