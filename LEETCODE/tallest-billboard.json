{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "956",
            "title": "Tallest Billboard",
            "titleSlug": "tallest-billboard",
            "content": "<p>You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.</p>\n\n<p>You are given a collection of <code>rods</code> that can be welded together. For example, if you have rods of lengths <code>1</code>, <code>2</code>, and <code>3</code>, you can weld them together to make a support of length <code>6</code>.</p>\n\n<p>Return <em>the largest possible height of your billboard installation</em>. If you cannot support the billboard, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> rods = [1,2,3,6]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> rods = [1,2,3,4,5,6]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> rods = [1,2]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The billboard cannot be supported, so we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rods.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= rods[i] &lt;= 1000</code></li>\n\t<li><code>sum(rods[i]) &lt;= 5000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2284,
            "dislikes": 55,
            "similarQuestions": "[{\"title\": \"Partition Array Into Two Arrays to Minimize Sum Difference\", \"titleSlug\": \"partition-array-into-two-arrays-to-minimize-sum-difference\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"57K\", \"totalSubmission\": \"108.6K\", \"totalAcceptedRaw\": 56997, \"totalSubmissionRaw\": 108637, \"acRate\": \"52.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are tasked with designing a billboard installation with two equal-height steel supports, one on each side. You are given a collection of rods of varying lengths that can be welded together to create these supports.  Your goal is to find the maximum possible height for the billboard, achieved by using two disjoint subsets of rods that sum to the same value. Return the maximum height, or 0 if a balanced support is not possible.",
                "constraints": [
                    "1 <= rods.length <= 20",
                    "1 <= rods[i] <= 1000",
                    "sum(rods[i]) <= 5000"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,6]",
                        "output": "6",
                        "explanation": "Two disjoint subsets {1, 2, 3} and {6} can be formed, each with a sum of 6."
                    },
                    {
                        "input": "[1,2,3,4,5,6]",
                        "output": "10",
                        "explanation": "Two disjoint subsets {2, 3, 5} and {4, 6} can be formed, each with a sum of 10."
                    },
                    {
                        "input": "[1,2]",
                        "output": "0",
                        "explanation": "It is not possible to create two subsets with equal sums using the given rods, so the billboard cannot be supported."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "partition-array-into-two-arrays-to-minimize-sum-difference",
                "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int tallestBillboard(vector<int>& rods) {\n    const int n = rods.size();\n    const int sum = accumulate(rods.begin(), rods.end(), 0);\n    // dp[i][j] := max min-height of using rods[0..i) to pile two piles that\n    // Have height difference j\n    vector<vector<int>> dp(n + 1, vector<int>(sum + 1, -1));\n    dp[0][0] = 0;\n\n    for (int i = 1; i <= n; ++i) {\n      const int h = rods[i - 1];\n      for (int j = 0; j <= sum - h; ++j) {\n        if (dp[i - 1][j] < 0)\n          continue;\n        // don't use rods[i - 1]\n        dp[i][j] = max(dp[i][j], dp[i - 1][j]);\n        // Put on the taller pile\n        dp[i][j + h] = max(dp[i][j + h], dp[i - 1][j]);\n        // Put on the shorter pile\n        dp[i][abs(j - h)] = max(dp[i][abs(j - h)], dp[i - 1][j] + min(j, h));\n      }\n    }\n\n    return dp[n][0];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int tallestBillboard(int[] rods) {\n    final int n = rods.length;\n    final int sum = Arrays.stream(rods).sum();\n    // dp[i][j] := max min-height of using rods[0..i) to pile two piles that\n    // Have height difference j\n    int[][] dp = new int[n + 1][sum + 1];\n    Arrays.stream(dp).forEach(row -> Arrays.fill(row, -1));\n    dp[0][0] = 0;\n\n    for (int i = 1; i <= n; ++i) {\n      final int h = rods[i - 1];\n      for (int j = 0; j <= sum - h; ++j) {\n        if (dp[i - 1][j] < 0)\n          continue;\n        // don't use rods[i - 1]\n        dp[i][j] = Math.max(dp[i][j], dp[i - 1][j]);\n        // Put on the taller pile\n        dp[i][j + h] = Math.max(dp[i][j + h], dp[i - 1][j]);\n        // Put on the shorter pile\n        dp[i][Math.abs(j - h)] = Math.max(dp[i][Math.abs(j - h)], dp[i - 1][j] + Math.min(j, h));\n      }\n    }\n\n    return dp[n][0];\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}