{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "494",
            "title": "Target Sum",
            "titleSlug": "target-sum",
            "content": "<p>You are given an integer array <code>nums</code> and an integer <code>target</code>.</p>\n\n<p>You want to build an <strong>expression</strong> out of nums by adding one of the symbols <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code> before each integer in nums and then concatenate all the integers.</p>\n\n<ul>\n\t<li>For example, if <code>nums = [2, 1]</code>, you can add a <code>&#39;+&#39;</code> before <code>2</code> and a <code>&#39;-&#39;</code> before <code>1</code> and concatenate them to build the expression <code>&quot;+2-1&quot;</code>.</li>\n</ul>\n\n<p>Return the number of different <strong>expressions</strong> that you can build, which evaluates to <code>target</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1,1,1], target = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1], target = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10459,
            "dislikes": 342,
            "similarQuestions": "[{\"title\": \"Expression Add Operators\", \"titleSlug\": \"expression-add-operators\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Ways to Express an Integer as Sum of Powers\", \"titleSlug\": \"ways-to-express-an-integer-as-sum-of-powers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"540.4K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 540374, \"totalSubmissionRaw\": 1166071, \"acRate\": \"46.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `target`, construct expressions by adding either '+' or '-' before each number in `nums` and concatenating them. The goal is to determine the number of distinct expressions that evaluate to the given `target`.",
                "constraints": [
                    "1 <= nums.length <= 20",
                    "0 <= nums[i] <= 1000",
                    "0 <= sum(nums[i]) <= 1000",
                    "-1000 <= target <= 1000"
                ],
                "testcases": [
                    {
                        "input": "nums = [1,1,1,1,1], target = 3",
                        "output": "5",
                        "explanation": "The target sum of 3 can be achieved in 5 different ways:\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3"
                    },
                    {
                        "input": "nums = [1], target = 1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "expression-add-operators",
                "title": "Expression Add Operators",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "ways-to-express-an-integer-as-sum-of-powers",
                "title": "Ways to Express an Integer as Sum of Powers",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findTargetSumWays(vector<int>& nums, int target) {\n    const int sum = accumulate(nums.begin(), nums.end(), 0);\n    if (sum < abs(target) || (sum + target) & 1)\n      return 0;\n    return knapsack(nums, (sum + target) / 2);\n  }\n\n private:\n  int knapsack(const vector<int>& nums, int target) {\n    const int n = nums.size();\n    // dp[i][j] := # of ways to sum to j by nums[0..i)\n    vector<vector<int>> dp(n + 1, vector<int>(target + 1));\n    dp[0][0] = 1;\n\n    for (int i = 1; i <= n; ++i) {\n      const int num = nums[i - 1];\n      for (int j = 0; j <= target; ++j)\n        if (j < num)\n          dp[i][j] = dp[i - 1][j];\n        else\n          dp[i][j] = dp[i - 1][j] + dp[i - 1][j - num];\n    }\n\n    return dp[n][target];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findTargetSumWays(int[] nums, int target) {\n    final int sum = Arrays.stream(nums).sum();\n    if (sum < Math.abs(target) || (sum + target) % 2 == 1)\n      return 0;\n    return knapsack(nums, (sum + target) / 2);\n  }\n\n  private int knapsack(int[] nums, int target) {\n    final int n = nums.length;\n    // dp[i][j] := # of ways to sum to j by nums[0..i)\n    int[][] dp = new int[n + 1][target + 1];\n    dp[0][0] = 1;\n\n    for (int i = 1; i <= n; ++i) {\n      final int num = nums[i - 1];\n      for (int j = 0; j <= target; ++j)\n        if (j < num)\n          dp[i][j] = dp[i - 1][j];\n        else\n          dp[i][j] = dp[i - 1][j] + dp[i - 1][j - num];\n    }\n\n    return dp[n][target];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findTargetSumWays(self, nums: List[int], target: int) -> int:\n    summ = sum(nums)\n    if summ < abs(target) or (summ + target) & 1:\n      return 0\n\n    def knapsack(target: int) -> int:\n      # dp[i] := # of ways to sum to i by nums so far\n      dp = [1] + [0] * summ\n\n      for num in nums:\n        for j in range(summ, num - 1, -1):\n          dp[j] += dp[j - num]\n\n      return dp[target]\n\n    return knapsack((summ + target) // 2)\n",
                "lang_text": "py"
            }
        }
    }
}