{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2365",
            "title": "Task Scheduler II",
            "titleSlug": "task-scheduler-ii",
            "content": "<p>You are given a <strong>0-indexed</strong> array of positive integers <code>tasks</code>, representing tasks that need to be completed <strong>in order</strong>, where <code>tasks[i]</code> represents the <strong>type</strong> of the <code>i<sup>th</sup></code> task.</p>\n\n<p>You are also given a positive integer <code>space</code>, which represents the <strong>minimum</strong> number of days that must pass <strong>after</strong> the completion of a task before another task of the <strong>same</strong> type can be performed.</p>\n\n<p>Each day, until all tasks have been completed, you must either:</p>\n\n<ul>\n\t<li>Complete the next task from <code>tasks</code>, or</li>\n\t<li>Take a break.</li>\n</ul>\n\n<p>Return<em> the <strong>minimum</strong> number of days needed to complete all tasks</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [1,2,1,2,3,1], space = 3\n<strong>Output:</strong> 9\n<strong>Explanation:</strong>\nOne way to complete all tasks in 9 days is as follows:\nDay 1: Complete the 0th task.\nDay 2: Complete the 1st task.\nDay 3: Take a break.\nDay 4: Take a break.\nDay 5: Complete the 2nd task.\nDay 6: Complete the 3rd task.\nDay 7: Take a break.\nDay 8: Complete the 4th task.\nDay 9: Complete the 5th task.\nIt can be shown that the tasks cannot be completed in less than 9 days.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [5,8,8,5], space = 2\n<strong>Output:</strong> 6\n<strong>Explanation:</strong>\nOne way to complete all tasks in 6 days is as follows:\nDay 1: Complete the 0th task.\nDay 2: Complete the 1st task.\nDay 3: Take a break.\nDay 4: Take a break.\nDay 5: Complete the 2nd task.\nDay 6: Complete the 3rd task.\nIt can be shown that the tasks cannot be completed in less than 6 days.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= tasks[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= space &lt;= tasks.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 482,
            "dislikes": 38,
            "similarQuestions": "[{\"title\": \"Task Scheduler\", \"titleSlug\": \"task-scheduler\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximize Distance to Closest Person\", \"titleSlug\": \"maximize-distance-to-closest-person\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Check If All 1's Are at Least Length K Places Away\", \"titleSlug\": \"check-if-all-1s-are-at-least-length-k-places-away\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"24.6K\", \"totalSubmission\": \"50.3K\", \"totalAcceptedRaw\": 24613, \"totalSubmissionRaw\": 50279, \"acRate\": \"49.0%\"}",
            "hints": [
                "Try taking breaks as late as possible, such that tasks are still spaced appropriately.",
                "Whenever considering whether to complete the next task, if it is not the first task of its type, check how many days ago the previous task was completed and add an appropriate number of breaks."
            ],
            "rephrased": {
                "body": "Given a 0-indexed array `tasks` of positive integers, where `tasks[i]` represents the type of the i-th task, and a positive integer `space`, representing the minimum number of days that must pass after completing a task before another task of the same type can be performed.  Determine the minimum number of days needed to complete all tasks, completing them in order. Each day, you can either complete the next task or take a break.",
                "constraints": [
                    "1 <= tasks.length <= 10^5",
                    "1 <= tasks[i] <= 10^9",
                    "1 <= space <= tasks.length"
                ],
                "testcases": [
                    {
                        "input": "tasks = [1,2,1,2,3,1], space = 3",
                        "output": "9",
                        "explanation": "The tasks can be completed in 9 days. One possible schedule is: Day 1: Task 0. Day 2: Task 1. Day 3: Break. Day 4: Break. Day 5: Task 2. Day 6: Task 3. Day 7: Break. Day 8: Task 4. Day 9: Task 5."
                    },
                    {
                        "input": "tasks = [5,8,8,5], space = 2",
                        "output": "6",
                        "explanation": "The tasks can be completed in 6 days. One possible schedule is: Day 1: Task 0. Day 2: Task 1. Day 3: Break. Day 4: Break. Day 5: Task 2. Day 6: Task 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "task-scheduler",
                "title": "Task Scheduler",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximize-distance-to-closest-person",
                "title": "Maximize Distance to Closest Person",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "check-if-all-1s-are-at-least-length-k-places-away",
                "title": "Check If All 1's Are at Least Length K Places Away",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try taking breaks as late as possible, such that tasks are still spaced appropriately.",
            "Whenever considering whether to complete the next task, if it is not the first task of its type, check how many days ago the previous task was completed and add an appropriate number of breaks."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long taskSchedulerII(vector<int>& tasks, int space) {\n    unordered_map<int, long long> taskToNextAvailable;\n    long long ans = 0;\n\n    for (const int task : tasks) {\n      ans = max(ans + 1, taskToNextAvailable[task]);\n      taskToNextAvailable[task] = ans + space + 1;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long taskSchedulerII(int[] tasks, int space) {\n    Map<Integer, Long> taskToNextAvailable = new HashMap<>();\n    long ans = 0;\n\n    for (final int task : tasks) {\n      ans = Math.max(ans + 1, taskToNextAvailable.getOrDefault(task, 0L));\n      taskToNextAvailable.put(task, ans + space + 1);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def taskSchedulerII(self, tasks: List[int], space: int) -> int:\n    taskToNextAvailable = collections.defaultdict(int)\n    ans = 0\n\n    for task in tasks:\n      ans = max(ans + 1, taskToNextAvailable[task])\n      taskToNextAvailable[task] = ans + space + 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}