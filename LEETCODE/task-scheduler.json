{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "621",
            "title": "Task Scheduler",
            "titleSlug": "task-scheduler",
            "content": "<p>Given a characters array <code>tasks</code>, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.</p>\n\n<p>However, there is a non-negative integer&nbsp;<code>n</code> that represents the cooldown period between&nbsp;two <b>same tasks</b>&nbsp;(the same letter in the array), that is that there must be at least <code>n</code> units of time between any two same tasks.</p>\n\n<p>Return <em>the least number of units of times that the CPU will take to finish all the given tasks</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> \nA -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B\nThere is at least 2 units of time between any two same tasks.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 0\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> On this case any permutation of size 6 would work since n = 0.\n[&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]\n[&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;]\n[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;]\n...\nAnd so on.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;], n = 2\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> \nOne possible solution is\nA -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt; idle -&gt; A\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= task.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>tasks[i]</code> is upper-case English letter.</li>\n\t<li>The integer <code>n</code> is in the range <code>[0, 100]</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9215,
            "dislikes": 1904,
            "similarQuestions": "[{\"title\": \"Rearrange String k Distance Apart\", \"titleSlug\": \"rearrange-string-k-distance-apart\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Reorganize String\", \"titleSlug\": \"reorganize-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Weeks for Which You Can Work\", \"titleSlug\": \"maximum-number-of-weeks-for-which-you-can-work\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Minimum Time to Finish All Jobs II\", \"titleSlug\": \"find-minimum-time-to-finish-all-jobs-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Task Scheduler II\", \"titleSlug\": \"task-scheduler-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                }
            ],
            "stats": "{\"totalAccepted\": \"490.8K\", \"totalSubmission\": \"848.1K\", \"totalAcceptedRaw\": 490809, \"totalSubmissionRaw\": 848072, \"acRate\": \"57.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of characters `tasks`, where each character represents a task that a CPU needs to perform, determine the minimum number of time units required for the CPU to complete all tasks. Tasks can be executed in any order, and each task takes one unit of time. A cooldown period `n` exists between any two instances of the same task. During this cooldown, the CPU can either execute another task or remain idle.",
                "constraints": [
                    "1 <= tasks.length <= 10^4",
                    "tasks[i] is an uppercase English letter.",
                    "0 <= n <= 100"
                ],
                "testcases": [
                    {
                        "input": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2",
                        "output": "8",
                        "explanation": "The optimal schedule is A -> B -> idle -> A -> B -> idle -> A -> B. There must be at least 2 units of time between any two identical tasks."
                    },
                    {
                        "input": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0",
                        "output": "6",
                        "explanation": "When n = 0, any permutation of the tasks is a valid schedule."
                    },
                    {
                        "input": "tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2",
                        "output": "16",
                        "explanation": "One possible schedule is A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "rearrange-string-k-distance-apart",
                "title": "Rearrange String k Distance Apart",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "reorganize-string",
                "title": "Reorganize String",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-number-of-weeks-for-which-you-can-work",
                "title": "Maximum Number of Weeks for Which You Can Work",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-minimum-time-to-finish-all-jobs-ii",
                "title": "Find Minimum Time to Finish All Jobs II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "task-scheduler-ii",
                "title": "Task Scheduler II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Counting",
                "slug": "counting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int leastInterval(vector<char>& tasks, int n) {\n    if (n == 0)\n      return tasks.size();\n\n    vector<int> count(26);\n\n    for (const char task : tasks)\n      ++count[task - 'A'];\n\n    const int maxFreq = *max_element(count.begin(), count.end());\n    // Put the most frequent task in the slot first\n    const int maxFreqTaskOccupy = (maxFreq - 1) * (n + 1);\n    // Get # of tasks with same frequency as maxFreq,\n    // we'll append them after maxFreqTaskOccupy\n    const int nMaxFreq = std::count(count.begin(), count.end(), maxFreq);\n    // Max(\n    //   the most frequent task is frequent enough to force some idle slots,\n    //   the most frequent task is not frequent enough to force idle slots\n    // )\n    return max(maxFreqTaskOccupy + nMaxFreq, static_cast<int>(tasks.size()));\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int leastInterval(char[] tasks, int n) {\n    int[] count = new int[26];\n\n    for (final char task : tasks)\n      ++count[task - 'A'];\n\n    final int maxFreq = Arrays.stream(count).max().getAsInt();\n    // Put the most frequent task in the slot first\n    final int maxFreqTaskOccupy = (maxFreq - 1) * (n + 1);\n    // Get # of tasks with same frequency as maxFreq,\n    // we'll append them after maxFreqTaskOccupy\n    final int nMaxFreq = (int) Arrays.stream(count).filter(c -> c == maxFreq).count();\n    // Max(\n    //   the most frequent task is frequent enough to force some idle slots,\n    //   the most frequent task is not frequent enough to force idle slots\n    // )\n    return Math.max(maxFreqTaskOccupy + nMaxFreq, tasks.length);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def leastInterval(self, tasks: List[str], n: int) -> int:\n    count = collections.Counter(tasks)\n    maxFreq = max(count.values())\n    # Put the most frequent task in the slot first\n    maxFreqTaskOccupy = (maxFreq - 1) * (n + 1)\n    # Get # Of tasks with same frequency as maxFreq,\n    # we'll append them after maxFreqTaskOccupy\n    nMaxFreq = sum(value == maxFreq for value in count.values())\n    # Max(\n    #   the most frequent task is frequent enough to force some idle slots,\n    #   the most frequent task is not frequent enough to force idle slots\n    # )\n    return max(maxFreqTaskOccupy + nMaxFreq, len(tasks))\n",
                "lang_text": "py"
            }
        }
    }
}