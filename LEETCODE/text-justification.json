{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "68",
            "title": "Text Justification",
            "titleSlug": "text-justification",
            "content": "<p>Given an array of strings <code>words</code> and a width <code>maxWidth</code>, format the text such that each line has exactly <code>maxWidth</code> characters and is fully (left and right) justified.</p>\n\n<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&#39; &#39;</code> when necessary so that each line has exactly <code>maxWidth</code> characters.</p>\n\n<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>\n\n<p>For the last line of text, it should be left-justified, and no extra space is inserted between words.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A word is defined as a character sequence consisting of non-space characters only.</li>\n\t<li>Each word&#39;s length is guaranteed to be greater than <code>0</code> and not exceed <code>maxWidth</code>.</li>\n\t<li>The input array <code>words</code> contains at least one word.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,\n&nbsp; &nbsp;&quot;example &nbsp;of text&quot;,\n&nbsp; &nbsp;&quot;justification. &nbsp;&quot;\n]</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &quot;What &nbsp; must &nbsp; be&quot;,\n&nbsp; &quot;acknowledgment &nbsp;&quot;,\n&nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n<strong>Explanation:</strong> Note that the last line is &quot;shall be    &quot; instead of &quot;shall     be&quot;, because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,&quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;], maxWidth = 20\n<strong>Output:</strong>\n[\n&nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,\n  &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,\n&nbsp; &quot;enough to explain to&quot;,\n&nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,\n&nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,\n&nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>words[i]</code> consists of only English letters and symbols.</li>\n\t<li><code>1 &lt;= maxWidth &lt;= 100</code></li>\n\t<li><code>words[i].length &lt;= maxWidth</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3426,
            "dislikes": 4418,
            "similarQuestions": "[{\"title\": \"Rearrange Spaces Between Words\", \"titleSlug\": \"rearrange-spaces-between-words\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Divide a String Into Groups of Size k\", \"titleSlug\": \"divide-a-string-into-groups-of-size-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Split Message Based on Limit\", \"titleSlug\": \"split-message-based-on-limit\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"376.5K\", \"totalSubmission\": \"895.6K\", \"totalAcceptedRaw\": 376452, \"totalSubmissionRaw\": 895561, \"acRate\": \"42.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of strings `words` and a maximum width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified.\n\nPack the words in a greedy approach: include as many words as possible on each line. Add extra spaces `' '` when needed to ensure each line has exactly `maxWidth` characters.\n\nDistribute extra spaces between words as evenly as possible. If the number of spaces cannot be divided evenly, the empty slots on the left should receive more spaces than those on the right.\n\nThe last line of text should be left-justified, with no extra spaces between words.",
                "constraints": [
                    "1 <= words.length <= 300",
                    "1 <= words[i].length <= 20",
                    "words[i] consists of only English letters and symbols.",
                    "1 <= maxWidth <= 100",
                    "words[i].length <= maxWidth"
                ],
                "testcases": [
                    {
                        "input": "words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16",
                        "output": "[\"This    is    an\", \"example  of text\", \"justification.  \"]",
                        "explanation": null
                    },
                    {
                        "input": "words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16",
                        "output": "[\"What   must   be\", \"acknowledgment  \", \"shall be        \"]",
                        "explanation": "The last line is 'shall be        ' instead of 'shall     be', because the last line must be left-justified instead of fully-justified.  The second line is also left-justified because it contains only one word."
                    },
                    {
                        "input": "words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20",
                        "output": "[\"Science  is what we\", \"understand     well\", \"enough to explain to\", \"a computer.  Art is\", \"everything else we\", \"do                  \"]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "rearrange-spaces-between-words",
                "title": "Rearrange Spaces Between Words",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "divide-a-string-into-groups-of-size-k",
                "title": "Divide a String Into Groups of Size k",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "split-message-based-on-limit",
                "title": "Split Message Based on Limit",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> fullJustify(vector<string>& words, size_t maxWidth) {\n    vector<string> ans;\n    vector<string> row;\n    size_t rowLetters = 0;\n\n    for (const string& word : words) {\n      // If we put the word in this row, it'll exceed the maxWidth,\n      // So we cannot put the word to this row and have to pad spaces to\n      // Each word in this row\n      if (rowLetters + row.size() + word.length() > maxWidth) {\n        const int spaces = maxWidth - rowLetters;\n        if (row.size() == 1) {\n          // Pad all spaces after row[0]\n          for (int i = 0; i < spaces; ++i)\n            row[0] += \" \";\n        } else {\n          // Evenly pad spaces to each word (expect the last one) in this row\n          for (int i = 0; i < spaces; ++i)\n            row[i % (row.size() - 1)] += \" \";\n        }\n        ans.push_back(join(row, \"\"));\n        row.clear();\n        rowLetters = 0;\n      }\n      row.push_back(word);\n      rowLetters += word.length();\n    }\n    ans.push_back(ljust(join(row, \" \"), maxWidth));\n\n    return ans;\n  }\n\n private:\n  string join(const vector<string>& words, const string& s) {\n    string joined;\n    for (int i = 0; i < words.size(); ++i) {\n      joined += words[i];\n      if (i != words.size() - 1)\n        joined += s;\n    }\n    return joined;\n  }\n\n  string ljust(string s, int width) {\n    for (int i = 0; i < s.length() - width; ++i)\n      s += \" \";\n    return s;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> fullJustify(String[] words, int maxWidth) {\n    List<String> ans = new ArrayList<>();\n    List<StringBuilder> row = new ArrayList<>();\n    int rowLetters = 0;\n\n    for (final String word : words) {\n      if (rowLetters + row.size() + word.length() > maxWidth) {\n        final int spaces = maxWidth - rowLetters;\n        if (row.size() == 1) {\n          for (int i = 0; i < spaces; ++i)\n            row.get(0).append(\" \");\n        } else {\n          for (int i = 0; i < spaces; ++i)\n            row.get(i % (row.size() - 1)).append(\" \");\n        }\n        final String joinedRow =\n            row.stream().map(StringBuilder::toString).collect(Collectors.joining(\"\"));\n        ans.add(joinedRow);\n        row.clear();\n        rowLetters = 0;\n      }\n      row.add(new StringBuilder(word));\n      rowLetters += word.length();\n    }\n\n    final String lastRow =\n        row.stream().map(StringBuilder::toString).collect(Collectors.joining(\" \"));\n    StringBuilder sb = new StringBuilder(lastRow);\n    final int spacesToBeAdded = maxWidth - sb.length();\n    for (int i = 0; i < spacesToBeAdded; ++i)\n      sb.append(\" \");\n\n    ans.add(sb.toString());\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n    ans = []\n    row = []\n    rowLetters = 0\n\n    for word in words:\n      if rowLetters + len(word) + len(row) > maxWidth:\n        for i in range(maxWidth - rowLetters):\n          row[i % (len(row) - 1 or 1)] += ' '\n        ans.append(''.join(row))\n        row = []\n        rowLetters = 0\n      row.append(word)\n      rowLetters += len(word)\n\n    return ans + [' '.join(row).ljust(maxWidth)]\n",
                "lang_text": "py"
            }
        }
    }
}