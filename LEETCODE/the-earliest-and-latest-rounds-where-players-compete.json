{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1900",
            "title": "The Earliest and Latest Rounds Where Players Compete",
            "titleSlug": "the-earliest-and-latest-rounds-where-players-compete",
            "content": "<p>There is a tournament where <code>n</code> players are participating. The players are standing in a single row and are numbered from <code>1</code> to <code>n</code> based on their <strong>initial</strong> standing position (player <code>1</code> is the first player in the row, player <code>2</code> is the second player in the row, etc.).</p>\n\n<p>The tournament consists of multiple rounds (starting from round number <code>1</code>). In each round, the <code>i<sup>th</sup></code> player from the front of the row competes against the <code>i<sup>th</sup></code> player from the end of the row, and the winner advances to the next round. When the number of players is odd for the current round, the player in the middle automatically advances to the next round.</p>\n\n<ul>\n\t<li>For example, if the row consists of players <code>1, 2, 4, 6, 7</code>\n\n\t<ul>\n\t\t<li>Player <code>1</code> competes against player <code>7</code>.</li>\n\t\t<li>Player <code>2</code> competes against player <code>6</code>.</li>\n\t\t<li>Player <code>4</code> automatically advances to the next round.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>After each round is over, the winners are lined back up in the row based on the <strong>original ordering</strong> assigned to them initially (ascending order).</p>\n\n<p>The players numbered <code>firstPlayer</code> and <code>secondPlayer</code> are the best in the tournament. They can win against any other player before they compete against each other. If any two other players compete against each other, either of them might win, and thus you may <strong>choose</strong> the outcome of this round.</p>\n\n<p>Given the integers <code>n</code>, <code>firstPlayer</code>, and <code>secondPlayer</code>, return <em>an integer array containing two values, the <strong>earliest</strong> possible round number and the&nbsp;<strong>latest</strong> possible round number in which these two players will compete against each other, respectively</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 11, firstPlayer = 2, secondPlayer = 4\n<strong>Output:</strong> [3,4]\n<strong>Explanation:</strong>\nOne possible scenario which leads to the earliest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 2, 3, 4, 5, 6, 11\nThird round: 2, 3, 4\nOne possible scenario which leads to the latest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 1, 2, 3, 4, 5, 6\nThird round: 1, 2, 4\nFourth round: 2, 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, firstPlayer = 1, secondPlayer = 5\n<strong>Output:</strong> [1,1]\n<strong>Explanation:</strong> The players numbered 1 and 5 compete in the first round.\nThere is no way to make them compete in any other round.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 28</code></li>\n\t<li><code>1 &lt;= firstPlayer &lt; secondPlayer &lt;= n</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 225,
            "dislikes": 18,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"5.1K\", \"totalSubmission\": \"10.1K\", \"totalAcceptedRaw\": 5136, \"totalSubmissionRaw\": 10122, \"acRate\": \"50.7%\"}",
            "hints": [
                "Brute force using bitmasks and simulate the rounds.",
                "Calculate each state one time and save its solution."
            ],
            "rephrased": {
                "body": "In a tournament with `n` players arranged in a row (numbered 1 to `n` based on their initial position), players compete in rounds. In each round, the i-th player from the front competes against the i-th player from the end. If the number of players is odd, the middle player advances automatically. After each round, winners are re-ordered based on their original positions.\n\nThe players `firstPlayer` and `secondPlayer` are the strongest and will always win until they face each other.  You can control the outcome of other matches.\n\nGiven `n`, `firstPlayer`, and `secondPlayer`, determine the earliest and latest round numbers in which `firstPlayer` and `secondPlayer` can possibly compete.",
                "constraints": [
                    "2 <= n <= 28",
                    "1 <= firstPlayer < secondPlayer <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 11, firstPlayer = 2, secondPlayer = 4",
                        "output": "[3,4]",
                        "explanation": "Earliest: Players 2 and 4 face each other in Round 3 if other players are eliminated strategically. Latest: Players 2 and 4 face each other in Round 4 if other players win appropriately, delaying their match."
                    },
                    {
                        "input": "n = 5, firstPlayer = 1, secondPlayer = 5",
                        "output": "[1,1]",
                        "explanation": "Players 1 and 5 are positioned to compete in the very first round. There's no way to delay their confrontation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Brute force using bitmasks and simulate the rounds.",
            "Calculate each state one time and save its solution."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> earliestAndLatest(int n, int firstPlayer, int secondPlayer) {\n    dp.resize(n + 1, vector<vector<P>>(n + 1, vector<P>(n + 1)));\n    const auto [a, b] = solve(firstPlayer, n - secondPlayer + 1, n);\n    return {a, b};\n  }\n\n private:\n  typedef pair<int, int> P;\n  // dp[i][j][k] := (earliest, latest) pair w/ firstPlayer is i-th player from\n  // Front, secondPlayer is j-th player from end, and there're k people\n  vector<vector<vector<P>>> dp;\n\n  P solve(int l, int r, int k) {\n    if (l == r)\n      return {1, 1};\n    if (l > r)\n      swap(l, r);\n    if (dp[l][r][k] != pair<int, int>(0, 0))\n      return dp[l][r][k];\n\n    int a = INT_MAX;\n    int b = INT_MIN;\n\n    // Enumerate all possible positions\n    for (int i = 1; i <= l; ++i)\n      for (int j = l - i + 1; j <= r - i; ++j) {\n        if (i + j > (k + 1) / 2 || i + j < l + r - k / 2)\n          continue;\n        const auto [x, y] = solve(i, j, (k + 1) / 2);\n        a = min(a, x + 1);\n        b = max(b, y + 1);\n      }\n\n    return dp[l][r][k] = {a, b};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] earliestAndLatest(int n, int firstPlayer, int secondPlayer) {\n    dp = new int[n + 1][n + 1][n + 1][2];\n    return solve(firstPlayer, n - secondPlayer + 1, n);\n  }\n\n  // dp[i][j][k] := (earliest, latest) pair w/ firstPlayer is i-th player from\n  // Front, secondPlayer is j-th player from end, and there're k people\n  private int[][][][] dp;\n\n  private int[] solve(int l, int r, int k) {\n    if (l == r)\n      return new int[] {1, 1};\n    if (l > r)\n      return solve(r, l, k);\n    if (!Arrays.equals(dp[l][r][k], new int[] {0, 0}))\n      return dp[l][r][k];\n\n    int a = Integer.MAX_VALUE;\n    int b = Integer.MIN_VALUE;\n\n    // Enumerate all possible positions\n    for (int i = 1; i <= l; ++i)\n      for (int j = l - i + 1; j <= r - i; ++j) {\n        if (i + j > (k + 1) / 2 || i + j < l + r - k / 2)\n          continue;\n        int[] res = solve(i, j, (k + 1) / 2);\n        a = Math.min(a, res[0] + 1);\n        b = Math.max(b, res[1] + 1);\n      }\n\n    return dp[l][r][k] = new int[] {a, b};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def earliestAndLatest(\n          self, n: int, firstPlayer: int, secondPlayer: int) -> List[int]:\n    # dp[i][j][k] := (earliest, latest) pair w/ firstPlayer is i-th player from\n    # Front, secondPlayer is j-th player from end, and there're k people\n    @functools.lru_cache(None)\n    def dp(l: int, r: int, k: int) -> List[int]:\n      if l == r:\n        return [1, 1]\n      if l > r:\n        return dp(r, l, k)\n\n      a = math.inf\n      b = -math.inf\n\n      # Enumerate all possible positions\n      for i in range(1, l + 1):\n        for j in range(l - i + 1, r - i + 1):\n          if not l + r - k // 2 <= i + j <= (k + 1) // 2:\n            continue\n          x, y = dp(i, j, (k + 1) // 2)\n          a = min(a, x + 1)\n          b = max(b, y + 1)\n\n      return [a, b]\n\n    return dp(firstPlayer, n - secondPlayer + 1, n)\n",
                "lang_text": "py"
            }
        }
    }
}