{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1415",
            "title": "The k-th Lexicographical String of All Happy Strings of Length n",
            "titleSlug": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
            "content": "<p>A <strong>happy string</strong> is a string that:</p>\n\n<ul>\n\t<li>consists only of letters of the set <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>.</li>\n\t<li><code>s[i] != s[i + 1]</code> for all values of <code>i</code> from <code>1</code> to <code>s.length - 1</code> (string is 1-indexed).</li>\n</ul>\n\n<p>For example, strings <strong>&quot;abc&quot;, &quot;ac&quot;, &quot;b&quot;</strong> and <strong>&quot;abcbabcbcb&quot;</strong> are all happy strings and strings <strong>&quot;aa&quot;, &quot;baa&quot;</strong> and <strong>&quot;ababbc&quot;</strong> are not happy strings.</p>\n\n<p>Given two integers <code>n</code> and <code>k</code>, consider a list of all happy strings of length <code>n</code> sorted in lexicographical order.</p>\n\n<p>Return <em>the kth string</em> of this list or return an <strong>empty string</strong> if there are less than <code>k</code> happy strings of length <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 3\n<strong>Output:</strong> &quot;c&quot;\n<strong>Explanation:</strong> The list [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] contains all happy strings of length 1. The third string is &quot;c&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 4\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There are only 3 happy strings of length 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 9\n<strong>Output:</strong> &quot;cab&quot;\n<strong>Explanation:</strong> There are 12 different happy string of length 3 [&quot;aba&quot;, &quot;abc&quot;, &quot;aca&quot;, &quot;acb&quot;, &quot;bab&quot;, &quot;bac&quot;, &quot;bca&quot;, &quot;bcb&quot;, &quot;cab&quot;, &quot;cac&quot;, &quot;cba&quot;, &quot;cbc&quot;]. You will find the 9<sup>th</sup> string = &quot;cab&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10</code></li>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 937,
            "dislikes": 24,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"36K\", \"totalSubmission\": \"48.8K\", \"totalAcceptedRaw\": 35977, \"totalSubmissionRaw\": 48836, \"acRate\": \"73.7%\"}",
            "hints": [
                "Generate recursively all the happy strings of length n.",
                "Sort them in lexicographical order and return the kth string if it exists."
            ],
            "rephrased": {
                "body": "A happy string is a string that consists only of the letters 'a', 'b', and 'c', and no two adjacent characters are the same. Given two integers `n` and `k`, find the kth happy string of length `n` when all such strings are sorted lexicographically. If there are less than `k` happy strings of length `n`, return an empty string.",
                "constraints": [
                    "1 <= n <= 10",
                    "1 <= k <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 1, k = 3",
                        "output": "\"c\"",
                        "explanation": "The list of happy strings of length 1 is [\"a\", \"b\", \"c\"]. The third string is \"c\"."
                    },
                    {
                        "input": "n = 1, k = 4",
                        "output": "\"\"",
                        "explanation": "There are only 3 happy strings of length 1."
                    },
                    {
                        "input": "n = 3, k = 9",
                        "output": "\"cab\"",
                        "explanation": "There are 12 different happy strings of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. The 9th string is \"cab\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Generate recursively all the happy strings of length n.",
            "Sort them in lexicographical order and return the kth string if it exists."
        ],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string getHappyString(int n, int k) {\n    const unordered_map<char, string> nextLetters{\n        {'a', \"bc\"}, {'b', \"ac\"}, {'c', \"ab\"}};\n    queue<string> q{{{\"a\", \"b\", \"c\"}}};\n\n    while (q.front().length() != n) {\n      const string u = q.front();\n      q.pop();\n      for (const char nextLetter : nextLetters.at(u.back()))\n        q.push(u + nextLetter);\n    }\n\n    if (q.size() < k)\n      return \"\";\n\n    for (int i = 0; i < k - 1; ++i)\n      q.pop();\n    return q.front();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String getHappyString(int n, int k) {\n    Map<Character, String> nextLetters = Map.of('a', \"bc\", 'b', \"ac\", 'c', \"ab\");\n    Queue<String> q = new ArrayDeque<>(Arrays.asList(\"a\", \"b\", \"c\"));\n\n    while (q.peek().length() != n) {\n      final String u = q.poll();\n      for (final char nextLetter : nextLetters.get(u.charAt(u.length() - 1)).toCharArray())\n        q.offer(u + nextLetter);\n    }\n\n    if (q.size() < k)\n      return \"\";\n\n    for (int i = 0; i < k - 1; ++i)\n      q.poll();\n    return q.poll();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getHappyString(self, n: int, k: int) -> str:\n    nextLetters = {'a': 'bc', 'b': 'ac', 'c': 'ab'}\n    q = collections.deque(['a', 'b', 'c'])\n\n    while len(q[0]) != n:\n      u = q.popleft()\n      for nextLetter in nextLetters[u[-1]]:\n        q.append(u + nextLetter)\n\n    return '' if len(q) < k else q[k - 1]\n",
                "lang_text": "py"
            }
        }
    }
}