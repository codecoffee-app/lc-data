{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1337",
            "title": "The K Weakest Rows in a Matrix",
            "titleSlug": "the-k-weakest-rows-in-a-matrix",
            "content": "<p>You are given an <code>m x n</code> binary matrix <code>mat</code> of <code>1</code>&#39;s (representing soldiers) and <code>0</code>&#39;s (representing civilians). The soldiers are positioned <strong>in front</strong> of the civilians. That is, all the <code>1</code>&#39;s will appear to the <strong>left</strong> of all the <code>0</code>&#39;s in each row.</p>\n\n<p>A row <code>i</code> is <strong>weaker</strong> than a row <code>j</code> if one of the following is true:</p>\n\n<ul>\n\t<li>The number of soldiers in row <code>i</code> is less than the number of soldiers in row <code>j</code>.</li>\n\t<li>Both rows have the same number of soldiers and <code>i &lt; j</code>.</li>\n</ul>\n\n<p>Return <em>the indices of the </em><code>k</code><em> <strong>weakest</strong> rows in the matrix ordered from weakest to strongest</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = \n[[1,1,0,0,0],\n [1,1,1,1,0],\n [1,0,0,0,0],\n [1,1,0,0,0],\n [1,1,1,1,1]], \nk = 3\n<strong>Output:</strong> [2,0,3]\n<strong>Explanation:</strong> \nThe number of soldiers in each row is: \n- Row 0: 2 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 2 \n- Row 4: 5 \nThe rows ordered from weakest to strongest are [2,0,3,1,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> mat = \n[[1,0,0,0],\n [1,1,1,1],\n [1,0,0,0],\n [1,0,0,0]], \nk = 2\n<strong>Output:</strong> [0,2]\n<strong>Explanation:</strong> \nThe number of soldiers in each row is: \n- Row 0: 1 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 1 \nThe rows ordered from weakest to strongest are [0,2,3,1].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>2 &lt;= n, m &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= m</code></li>\n\t<li><code>matrix[i][j]</code> is either 0 or 1.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4077,
            "dislikes": 228,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"346.9K\", \"totalSubmission\": \"472.6K\", \"totalAcceptedRaw\": 346930, \"totalSubmissionRaw\": 472598, \"acRate\": \"73.4%\"}",
            "hints": [
                "Sort the matrix row indexes by the number of soldiers and then row indexes."
            ],
            "rephrased": {
                "body": "Given an `m x n` binary matrix `mat` where `1`s represent soldiers and `0`s represent civilians. Soldiers are positioned to the left of civilians in each row.  A row `i` is weaker than row `j` if it has fewer soldiers or, if the number of soldiers is the same, if `i < j`. Return the indices of the `k` weakest rows in the matrix, ordered from weakest to strongest.",
                "constraints": [
                    "m == mat.length",
                    "n == mat[i].length",
                    "2 <= n, m <= 100",
                    "1 <= k <= m",
                    "matrix[i][j] is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "mat = [[1,1,0,0,0],[1,1,1,1,0],[1,0,0,0,0],[1,1,0,0,0],[1,1,1,1,1]], k = 3",
                        "output": "[2,0,3]",
                        "explanation": "Row 2 has 1 soldier, Row 0 and 3 has 2 soldier, Row 1 has 4 soldiers, and Row 4 has 5 soldiers. Therefore, the rows ordered from weakest to strongest are [2,0,3,1,4]. The first k=3 weakest row indices are [2, 0, 3]."
                    },
                    {
                        "input": "mat = [[1,0,0,0],[1,1,1,1],[1,0,0,0],[1,0,0,0]], k = 2",
                        "output": "[0,2]",
                        "explanation": "Rows 0, 2, and 3 each have 1 soldier, and Row 1 has 4 soldiers.  Since rows 0, 2, and 3 have the same number of soldiers, we prioritize the lower index. The rows ordered from weakest to strongest are [0,2,3,1]. The first k=2 weakest row indices are [0, 2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Sort the matrix row indexes by the number of soldiers and then row indexes."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {\n    vector<int> ans;\n    vector<vector<int>> rowSum;\n\n    for (int i = 0; i < mat.size(); ++i)\n      rowSum.push_back({accumulate(mat[i].begin(), mat[i].end(), 0), i});\n\n    sort(rowSum.begin(), rowSum.end(), [](const auto& a, const auto& b) {\n      return a[0] == b[0] ? a[1] < b[1] : a[0] < b[0];\n    });\n\n    for (int i = 0; i < k; ++i)\n      ans.push_back(rowSum[i][1]);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] kWeakestRows(int[][] mat, int k) {\n    int[] ans = new int[k];\n    int[][] candidates = new int[mat.length][2];\n\n    for (int i = 0; i < mat.length; ++i) {\n      candidates[i][0] = IntStream.of(mat[i]).sum();\n      candidates[i][1] = i;\n    }\n\n    Arrays.sort(candidates, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);\n\n    for (int i = 0; i < k; ++i)\n      ans[i] = candidates[i][1];\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n    candidates = []\n\n    for i, row in enumerate(mat):\n      candidates.append([sum(row), i])\n\n    candidates.sort(key=lambda c: (c[0], c[1]))\n\n    return [i for _, i in candidates[:k]]\n",
                "lang_text": "py"
            }
        }
    }
}