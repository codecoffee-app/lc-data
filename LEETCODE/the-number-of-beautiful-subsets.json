{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2597",
            "title": "The Number of Beautiful Subsets",
            "titleSlug": "the-number-of-beautiful-subsets",
            "content": "<p>You are given an array <code>nums</code> of positive integers and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>A subset of <code>nums</code> is <strong>beautiful</strong> if it does not contain two integers with an absolute difference equal to <code>k</code>.</p>\n\n<p>Return <em>the number of <strong>non-empty beautiful </strong>subsets of the array</em> <code>nums</code>.</p>\n\n<p>A <strong>subset</strong> of <code>nums</code> is an array that can be obtained by deleting some (possibly none) elements from <code>nums</code>. Two subsets are different if and only if the chosen indices to delete are different.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,6], k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].\nIt can be proved that there are only 4 beautiful subsets in the array [2,4,6].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The beautiful subset of the array nums is [1].\nIt can be proved that there is only 1 beautiful subset in the array [1].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 496,
            "dislikes": 105,
            "similarQuestions": "[{\"title\": \"Construct the Lexicographically Largest Valid Sequence\", \"titleSlug\": \"construct-the-lexicographically-largest-valid-sequence\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"19K\", \"totalSubmission\": \"59.6K\", \"totalAcceptedRaw\": 19024, \"totalSubmissionRaw\": 59553, \"acRate\": \"31.9%\"}",
            "hints": [
                "Sort the array nums and create another array cnt of size nums[i].",
                "Use backtracking to generate all the beautiful subsets. If cnt[nums[i] - k] is positive, then it is impossible to add nums[i] in the subset, and we just move to the next index. Otherwise, it is also possible to add nums[i] in the subset, in this case, increase cnt[nums[i]], and move to the next index.",
                "Bonus: Can you solve the problem in O(n log n)?"
            ],
            "rephrased": {
                "body": "Given an array `nums` of positive integers and a positive integer `k`, find the number of non-empty beautiful subsets of the array. A subset of `nums` is considered beautiful if it does not contain two integers with an absolute difference equal to `k`. A subset is an array obtained by deleting some (possibly none) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.",
                "constraints": [
                    "1 <= nums.length <= 20",
                    "1 <= nums[i], k <= 1000"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,4,6], k = 2",
                        "output": "4",
                        "explanation": "The beautiful subsets of the array [2,4,6] are: [2], [4], [6], [2, 6]. Thus, there are 4 beautiful subsets."
                    },
                    {
                        "input": "nums = [1], k = 1",
                        "output": "1",
                        "explanation": "The beautiful subset of the array [1] is [1]. Therefore, there is only 1 beautiful subset."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "construct-the-lexicographically-largest-valid-sequence",
                "title": "Construct the Lexicographically Largest Valid Sequence",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Sort the array nums and create another array cnt of size nums[i].",
            "Use backtracking to generate all the beautiful subsets. If cnt[nums[i] - k] is positive, then it is impossible to add nums[i] in the subset, and we just move to the next index. Otherwise, it is also possible to add nums[i] in the subset, in this case, increase cnt[nums[i]], and move to the next index.",
            "Bonus: Can you solve the problem in O(n log n)?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// E.g. nums = [2, 3, 4, 4], k = 2\n//\n// subset[0] = [2, 4, 4']\n// subset[1] = [1]\n// count = {2: 1, 4: 2, 1: 1}\n//\n// Initially, skip = len([]) = 0, pick = len([]) = 0\n//\n// * For values in subset[0]:\n//   After 2:\n//     skip = skip + pick = len([]) = 0\n//     pick = (2^count[2] - 1) * (1 + skip + pick)\n//          = len([[2]]) * len([[]])\n//          = len([[2]]) = 1\n//   After 4:\n//     skip = skip + pick = len([[2]]) = 1\n//     pick = (2^count[4] - 1) * (1 + skip)\n//          = len([[4], [4'], [4, 4']]) * len([[]])\n//          = len([[4], [4'], [4, 4']]) = 3\n//\n// * For values in subset[1]:\n//   After 1:\n//     skip = skip + pick\n//          = len([[2], [4], [4'], [4, 4']]) = 4\n//     pick = (2^count[1] - 1) * (1 + skip + pick)\n//          = len([[1]]) * len([[], [2], [4], [4'], [4, 4']])\n//          = len([[1], [1, 2], [1, 4], [1, 4'], [1, 4, 4']]) = 5\n//\n// So, ans = skip + pick = 9\n\nclass Solution {\n public:\n  int beautifulSubsets(vector<int>& nums, int k) {\n    constexpr int kMaxNum = 1000;\n    vector<int> count(kMaxNum + 1);\n    unordered_map<int, set<int>> modToSubset;\n\n    for (const int num : nums) {\n      ++count[num];\n      modToSubset[num % k].insert(num);\n    }\n\n    int prevNum = -k;\n    int skip = 0;\n    int pick = 0;\n\n    for (const auto& [_, subset] : modToSubset)\n      for (const int num : subset) {\n        const int nonEmptyCount = pow(2, count[num]) - 1;\n        const int cacheSkip = skip;\n        skip += pick;\n        pick =\n            nonEmptyCount * (1 + cacheSkip + (num - prevNum == k ? 0 : pick));\n        prevNum = num;\n      }\n\n    return skip + pick;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// E.g. nums = [2, 3, 4, 4], k = 2\n//\n// subset[0] = [2, 4, 4']\n// subset[1] = [1]\n// count = {2: 1, 4: 2, 1: 1}\n//\n// Initially, skip = len([]) = 0, pick = len([]) = 0\n//\n// * For values in subset[0]:\n//   After 2:\n//     skip = skip + pick = len([]) = 0\n//     pick = (2^count[2] - 1) * (1 + skip + pick)\n//          = len([[2]]) * len([[]])\n//          = len([[2]]) = 1\n//   After 4:\n//     skip = skip + pick = len([[2]]) = 1\n//     pick = (2^count[4] - 1) * (1 + skip)\n//          = len([[4], [4'], [4, 4']]) * len([[]])\n//          = len([[4], [4'], [4, 4']]) = 3\n//\n// * For values in subset[1]:\n//   After 1:\n//     skip = skip + pick\n//          = len([[2], [4], [4'], [4, 4']]) = 4\n//     pick = (2^count[1] - 1) * (1 + skip + pick)\n//          = len([[1]]) * len([[], [2], [4], [4'], [4, 4']])\n//          = len([[1], [1, 2], [1, 4], [1, 4'], [1, 4, 4']]) = 5\n//\n// So, ans = skip + pick = 9\n\nclass Solution {\n  public int beautifulSubsets(int[] nums, int k) {\n    final int kMaxNum = 1000;\n    int[] count = new int[kMaxNum + 1];\n    Map<Integer, Set<Integer>> modToSubset = new HashMap<>();\n\n    for (final int num : nums) {\n      ++count[num];\n      modToSubset.putIfAbsent(num % k, new TreeSet<>());\n      modToSubset.get(num % k).add(num);\n    }\n\n    int prevNum = -k;\n    int skip = 0;\n    int pick = 0;\n\n    for (Set<Integer> subset : modToSubset.values())\n      for (final int num : subset) {\n        final int nonEmptyCount = (int) Math.pow(2, count[num]) - 1;\n        final int cacheSkip = skip;\n        skip += pick;\n        pick = nonEmptyCount * (1 + cacheSkip + (num - prevNum == k ? 0 : pick));\n        prevNum = num;\n      }\n\n    return skip + pick;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# E.g. nums = [2, 3, 4, 4], k = 2\n#\n# subset[0] = [2, 4, 4']\n# subset[1] = [1]\n# count = {2: 1, 4: 2, 1: 1}\n#\n# Initially, skip = len([]) = 0, pick = len([]) = 0\n#\n# * For values in subset[0]:\n#   After 2:\n#     skip = skip + pick = len([]) = 0\n#     pick = (2^count[2] - 1) * (1 + skip + pick)\n#          = len([[2]]) * len([[]])\n#          = len([[2]]) = 1\n#   After 4:\n#     skip = skip + pick = len([[2]]) = 1\n#     pick = (2^count[4] - 1) * (1 + skip)\n#          = len([[4], [4'], [4, 4']]) * len([[]])\n#          = len([[4], [4'], [4, 4']]) = 3\n#\n# * For values in subset[1]:\n#   After 1:\n#     skip = skip + pick\n#          = len([[2], [4], [4'], [4, 4']]) = 4\n#     pick = (2^count[1] - 1) * (1 + skip + pick)\n#          = len([[1]]) * len([[], [2], [4], [4'], [4, 4']])\n#          = len([[1], [1, 2], [1, 4], [1, 4'], [1, 4, 4']]) = 5\n#\n# So, ans = skip + pick = 9\n\nclass Solution:\n  def beautifulSubsets(self, nums: List[int], k: int) -> int:\n    count = collections.Counter(nums)\n    modToSubset = collections.defaultdict(set)\n\n    for num in nums:\n      modToSubset[num % k].add(num)\n\n    prevNum = -k\n    skip = 0\n    pick = 0\n\n    for subset in modToSubset.values():\n      for num in sorted(subset):\n        nonEmptyCount = 2**count[num] - 1\n        skip, pick = skip + pick, nonEmptyCount * \\\n            (1 + skip + (0 if num - prevNum == k else pick))\n        prevNum = num\n\n    return skip + pick\n",
                "lang_text": "py"
            }
        }
    }
}