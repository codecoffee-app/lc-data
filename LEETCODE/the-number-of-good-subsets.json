{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1994",
            "title": "The Number of Good Subsets",
            "titleSlug": "the-number-of-good-subsets",
            "content": "<p>You are given an integer array <code>nums</code>. We call a subset of <code>nums</code> <strong>good</strong> if its product can be represented as a product of one or more <strong>distinct prime</strong> numbers.</p>\n\n<ul>\n\t<li>For example, if <code>nums = [1, 2, 3, 4]</code>:\n\n\t<ul>\n\t\t<li><code>[2, 3]</code>, <code>[1, 2, 3]</code>, and <code>[1, 3]</code> are <strong>good</strong> subsets with products <code>6 = 2*3</code>, <code>6 = 2*3</code>, and <code>3 = 3</code> respectively.</li>\n\t\t<li><code>[1, 4]</code> and <code>[4]</code> are not <strong>good</strong> subsets with products <code>4 = 2*2</code> and <code>4 = 2*2</code> respectively.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Return <em>the number of different <strong>good</strong> subsets in </em><code>nums</code><em> <strong>modulo</strong> </em><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A <strong>subset</strong> of <code>nums</code> is any array that can be obtained by deleting some (possibly none or all) elements from <code>nums</code>. Two subsets are different if and only if the chosen indices to delete are different.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The good subsets are:\n- [1,2]: product is 2, which is the product of distinct prime 2.\n- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [1,3]: product is 3, which is the product of distinct prime 3.\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [3]: product is 3, which is the product of distinct prime 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,3,15]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The good subsets are:\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.\n- [3]: product is 3, which is the product of distinct prime 3.\n- [15]: product is 15, which is the product of distinct primes 3 and 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 30</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 441,
            "dislikes": 12,
            "similarQuestions": "[{\"title\": \"Smallest Sufficient Team\", \"titleSlug\": \"smallest-sufficient-team\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Fair Distribution of Cookies\", \"titleSlug\": \"fair-distribution-of-cookies\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Wear Different Hats to Each Other\", \"titleSlug\": \"number-of-ways-to-wear-different-hats-to-each-other\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Bitmask",
                    "slug": "bitmask"
                }
            ],
            "stats": "{\"totalAccepted\": \"6.9K\", \"totalSubmission\": \"20.1K\", \"totalAcceptedRaw\": 6926, \"totalSubmissionRaw\": 20094, \"acRate\": \"34.5%\"}",
            "hints": [
                "Consider only the numbers which have a good prime factorization.",
                "Use brute force to find all possible good subsets and then calculate its frequency in nums."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, a subset is considered **good** if its product can be represented as a product of one or more distinct prime numbers. Return the number of different **good** subsets in `nums` modulo `10^9 + 7`. A **subset** of `nums` is any array that can be obtained by deleting some (possibly none or all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 30"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4]",
                        "output": "6",
                        "explanation": "The good subsets are: [1,2], [1,2,3], [1,3], [2], [2,3], and [3].  Their products are 2, 6, 3, 2, 6, and 3 respectively, each being a product of distinct primes."
                    },
                    {
                        "input": "[4,2,3,15]",
                        "output": "5",
                        "explanation": "The good subsets are: [2], [2,3], [2,15], [3], and [15]. Their products are 2, 6, 30, 3, and 15 respectively, each being a product of distinct primes."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "smallest-sufficient-team",
                "title": "Smallest Sufficient Team",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "fair-distribution-of-cookies",
                "title": "Fair Distribution of Cookies",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-ways-to-wear-different-hats-to-each-other",
                "title": "Number of Ways to Wear Different Hats to Each Other",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Consider only the numbers which have a good prime factorization.",
            "Use brute force to find all possible good subsets and then calculate its frequency in nums."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Bitmask",
                "slug": "bitmask"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numberOfGoodSubsets(vector<int>& nums) {\n    const vector<int> primes{2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n    const int n = 1 << primes.size();\n    const int maxNum = *max_element(nums.begin(), nums.end());\n    vector<long> dp(n);\n    vector<int> count(maxNum + 1);\n\n    dp[0] = 1;\n\n    for (const int num : nums)\n      ++count[num];\n\n    for (int num = 2; num <= maxNum; ++num) {\n      if (count[num] == 0)\n        continue;\n      if (num % 4 == 0 || num % 9 == 0 || num % 25 == 0)\n        continue;\n      const int numPrimesMask = getPrimesMask(num, primes);\n      for (int primesMask = 0; primesMask < n; ++primesMask) {\n        if ((primesMask & numPrimesMask) > 0)\n          continue;\n        const int nextPrimesMask = primesMask | numPrimesMask;\n        dp[nextPrimesMask] += dp[primesMask] * count[num];\n        dp[nextPrimesMask] %= kMod;\n      }\n    }\n\n    return modPow(2, count[1]) *\n           (accumulate(dp.begin() + 1, dp.end(), 0L) % kMod) % kMod;\n  }\n\n private:\n  static constexpr int kMod = 1'000'000'007;\n\n  int getPrimesMask(int num, const vector<int>& primes) {\n    int primesMask = 0;\n    for (int i = 0; i < primes.size(); ++i)\n      if (num % primes[i] == 0)\n        primesMask |= 1 << i;\n    return primesMask;\n  }\n\n  int modPow(long x, int n) {\n    if (n == 0)\n      return 1;\n    if (n & 1)\n      return x * modPow(x, n - 1) % kMod;\n    return modPow(x * x % kMod, n / 2);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numberOfGoodSubsets(int[] nums) {\n    final int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n    final int n = 1 << primes.length;\n    final int maxNum = Arrays.stream(nums).max().getAsInt();\n    long[] dp = new long[n];\n    int[] count = new int[maxNum + 1];\n\n    dp[0] = 1;\n\n    for (final int num : nums)\n      ++count[num];\n\n    for (int num = 2; num <= maxNum; ++num) {\n      if (count[num] == 0)\n        continue;\n      if (num % 4 == 0 || num % 9 == 0 || num % 25 == 0)\n        continue;\n      final int numPrimesMask = getPrimesMask(num, primes);\n      for (int primesMask = 0; primesMask < n; ++primesMask) {\n        if ((primesMask & numPrimesMask) > 0)\n          continue;\n        final int nextPrimesMask = primesMask | numPrimesMask;\n        dp[nextPrimesMask] += dp[primesMask] * count[num];\n        dp[nextPrimesMask] %= kMod;\n      }\n    }\n\n    return (int) (modPow(2, count[1]) * ((Arrays.stream(dp).sum() - 1) % kMod) % kMod);\n  }\n\n  private static final int kMod = 1_000_000_007;\n\n  private int getPrimesMask(int num, int[] primes) {\n    int primesMask = 0;\n    for (int i = 0; i < primes.length; ++i)\n      if (num % primes[i] == 0)\n        primesMask |= 1 << i;\n    return primesMask;\n  }\n\n  private long modPow(long x, int n) {\n    if (n == 0)\n      return 1;\n    if (n % 2 == 1)\n      return x * modPow(x, n - 1) % kMod;\n    return modPow(x * x % kMod, n / 2);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numberOfGoodSubsets(self, nums: List[int]) -> int:\n    kMod = 1_000_000_007\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    n = 1 << len(primes)\n    # dp[i] := # of good subsets w/ set of primes = i bit mask\n    dp = [1] + [0] * (n - 1)\n    count = collections.Counter(nums)\n\n    for num, freq in count.items():\n      if num == 1:\n        continue\n      if any(num % squared == 0 for squared in [4, 9, 25]):\n        continue\n      numPrimesMask = sum(1 << i\n                          for i, prime in enumerate(primes)\n                          if num % prime == 0)\n      for primesMask in range(n):\n        # Skip since there're commen set of primes (becomes invalid subset)\n        if primesMask & numPrimesMask > 0:\n          continue\n        nextPrimesMask = numPrimesMask | primesMask\n        dp[nextPrimesMask] += dp[primesMask] * freq\n        dp[nextPrimesMask] %= kMod\n\n    return (1 << count[1]) * sum(dp[1:]) % kMod\n",
                "lang_text": "py"
            }
        }
    }
}