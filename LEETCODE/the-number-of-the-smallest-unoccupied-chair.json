{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1942",
            "title": "The Number of the Smallest Unoccupied Chair",
            "titleSlug": "the-number-of-the-smallest-unoccupied-chair",
            "content": "<p>There is a party where <code>n</code> friends numbered from <code>0</code> to <code>n - 1</code> are attending. There is an <strong>infinite</strong> number of chairs in this party that are numbered from <code>0</code> to <code>infinity</code>. When a friend arrives at the party, they sit on the unoccupied chair with the <strong>smallest number</strong>.</p>\n\n<ul>\n\t<li>For example, if chairs <code>0</code>, <code>1</code>, and <code>5</code> are occupied when a friend comes, they will sit on chair number <code>2</code>.</li>\n</ul>\n\n<p>When a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.</p>\n\n<p>You are given a <strong>0-indexed</strong> 2D integer array <code>times</code> where <code>times[i] = [arrival<sub>i</sub>, leaving<sub>i</sub>]</code>, indicating the arrival and leaving times of the <code>i<sup>th</sup></code> friend respectively, and an integer <code>targetFriend</code>. All arrival times are <strong>distinct</strong>.</p>\n\n<p>Return<em> the <strong>chair number</strong> that the friend numbered </em><code>targetFriend</code><em> will sit on</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> times = [[1,4],[2,3],[4,6]], targetFriend = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \n- Friend 0 arrives at time 1 and sits on chair 0.\n- Friend 1 arrives at time 2 and sits on chair 1.\n- Friend 1 leaves at time 3 and chair 1 becomes empty.\n- Friend 0 leaves at time 4 and chair 0 becomes empty.\n- Friend 2 arrives at time 4 and sits on chair 0.\nSince friend 1 sat on chair 1, we return 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> times = [[3,10],[1,5],[2,6]], targetFriend = 0\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \n- Friend 1 arrives at time 1 and sits on chair 0.\n- Friend 2 arrives at time 2 and sits on chair 1.\n- Friend 0 arrives at time 3 and sits on chair 2.\n- Friend 1 leaves at time 5 and chair 0 becomes empty.\n- Friend 2 leaves at time 6 and chair 1 becomes empty.\n- Friend 0 leaves at time 10 and chair 2 becomes empty.\nSince friend 0 sat on chair 2, we return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == times.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>times[i].length == 2</code></li>\n\t<li><code>1 &lt;= arrival<sub>i</sub> &lt; leaving<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= targetFriend &lt;= n - 1</code></li>\n\t<li>Each <code>arrival<sub>i</sub></code> time is <strong>distinct</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 546,
            "dislikes": 22,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"15.7K\", \"totalSubmission\": \"38K\", \"totalAcceptedRaw\": 15726, \"totalSubmissionRaw\": 37985, \"acRate\": \"41.4%\"}",
            "hints": [
                "Sort times by arrival time.",
                "for each arrival_i find the smallest unoccupied chair and mark it as occupied until leaving_i."
            ],
            "rephrased": {
                "body": "There is a party where `n` friends, numbered from 0 to `n - 1`, are attending. An infinite number of chairs are available, numbered from 0 to infinity. When a friend arrives, they take the unoccupied chair with the smallest number. When a friend leaves, their chair becomes unoccupied immediately. If another friend arrives at the same moment, they can take that chair.\n\nYou are given a 0-indexed 2D integer array `times` where `times[i] = [arrival<sub>i</sub>, leaving<sub>i</sub>]` represents the arrival and leaving times of the `i<sup>th</sup>` friend. All arrival times are distinct.  Determine the chair number that the friend numbered `targetFriend` will sit on.",
                "constraints": [
                    "`n == times.length`",
                    "`2 <= n <= 10<sup>4</sup>`",
                    "`times[i].length == 2`",
                    "`1 <= arrival<sub>i</sub> < leaving<sub>i</sub> <= 10<sup>5</sup>`",
                    "`0 <= targetFriend <= n - 1`",
                    "Each `arrival<sub>i</sub>` time is **distinct**."
                ],
                "testcases": [
                    {
                        "input": "times = [[1,4],[2,3],[4,6]], targetFriend = 1",
                        "output": "1",
                        "explanation": "Friend 0 arrives at time 1 and sits on chair 0. Friend 1 arrives at time 2 and sits on chair 1. Friend 1 leaves at time 3, freeing chair 1. Friend 0 leaves at time 4, freeing chair 0. Friend 2 arrives at time 4 and sits on chair 0. Since friend 1 sat on chair 1, the answer is 1."
                    },
                    {
                        "input": "times = [[3,10],[1,5],[2,6]], targetFriend = 0",
                        "output": "2",
                        "explanation": "Friend 1 arrives at time 1 and sits on chair 0. Friend 2 arrives at time 2 and sits on chair 1. Friend 0 arrives at time 3 and sits on chair 2. Friend 1 leaves at time 5, freeing chair 0. Friend 2 leaves at time 6, freeing chair 1. Friend 0 leaves at time 10, freeing chair 2. Since friend 0 sat on chair 2, the answer is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Sort times by arrival time.",
            "for each arrival_i find the smallest unoccupied chair and mark it as occupied until leaving_i."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int smallestChair(vector<vector<int>>& times, int targetFriend) {\n    int nextUnsatChair = 0;\n    priority_queue<int, vector<int>, greater<>> emptyChairs;\n    using P = pair<int, int>;  // (leaving, chair)\n    priority_queue<P, vector<P>, greater<>> occupied;\n\n    for (int i = 0; i < times.size(); ++i)\n      times[i].push_back(i);\n\n    std::ranges::sort(times);\n\n    for (const vector<int>& time : times) {\n      const int arrival = time[0];\n      const int leaving = time[1];\n      const int i = time[2];\n      while (!occupied.empty() && occupied.top().first <= arrival)\n        emptyChairs.push(occupied.top().second), occupied.pop();\n      if (i == targetFriend)\n        return emptyChairs.empty() ? nextUnsatChair : emptyChairs.top();\n      if (emptyChairs.empty())\n        occupied.emplace(leaving, nextUnsatChair++);\n      else\n        occupied.emplace(leaving, emptyChairs.top()), emptyChairs.pop();\n    }\n\n    throw;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int smallestChair(int[][] times, int targetFriend) {\n    int nextUnsatChair = 0;\n    PriorityQueue<Integer> emptyChairs = new PriorityQueue<>();\n    PriorityQueue<Pair<Integer, Integer>> occupied =\n        new PriorityQueue<>(Comparator.comparing(Pair::getKey));\n\n    for (int i = 0; i < times.length; ++i) {\n      int[] time = times[i];\n      time = Arrays.copyOf(time, time.length + 1);\n      time[time.length - 1] = i;\n      times[i] = time;\n    }\n\n    Arrays.sort(times, (a, b) -> a[0] - b[0]);\n\n    for (int[] time : times) {\n      final int arrival = time[0];\n      final int leaving = time[1];\n      final int i = time[2];\n      while (!occupied.isEmpty() && occupied.peek().getKey() <= arrival)\n        emptyChairs.add(occupied.poll().getValue());\n      if (i == targetFriend)\n        return emptyChairs.isEmpty() ? nextUnsatChair : emptyChairs.peek();\n      if (emptyChairs.isEmpty())\n        occupied.add(new Pair<>(leaving, nextUnsatChair++));\n      else\n        occupied.add(new Pair<>(leaving, emptyChairs.poll()));\n    }\n\n    throw new IllegalArgumentException();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def smallestChair(self, times: List[List[int]], targetFriend: int) -> int:\n    nextUnsatChair = 0\n    emptyChairs = []\n    occupied = []  # (leaving, chair)\n\n    for i in range(len(times)):\n      times[i].append(i)\n\n    times.sort(key=lambda time: time[0])\n\n    for arrival, leaving, i in times:\n      while len(occupied) > 0 and occupied[0][0] <= arrival:\n        unsatChair = heapq.heappop(occupied)[1]\n        heapq.heappush(emptyChairs, unsatChair)\n      if i == targetFriend:\n        return emptyChairs[0] if len(emptyChairs) > 0 else nextUnsatChair\n      if len(emptyChairs) == 0:\n        heapq.heappush(occupied, (leaving, nextUnsatChair))\n        nextUnsatChair += 1\n      else:\n        emptyChair = heapq.heappop(emptyChairs)\n        heapq.heappush(occupied, (leaving, emptyChair))\n",
                "lang_text": "py"
            }
        }
    }
}