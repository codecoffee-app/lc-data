{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "218",
            "title": "The Skyline Problem",
            "titleSlug": "the-skyline-problem",
            "content": "<p>A city&#39;s <strong>skyline</strong> is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return <em>the <strong>skyline</strong> formed by these buildings collectively</em>.</p>\n\n<p>The geometric information of each building is given in the array <code>buildings</code> where <code>buildings[i] = [left<sub>i</sub>, right<sub>i</sub>, height<sub>i</sub>]</code>:</p>\n\n<ul>\n\t<li><code>left<sub>i</sub></code> is the x coordinate of the left edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>right<sub>i</sub></code> is the x coordinate of the right edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>height<sub>i</sub></code> is the height of the <code>i<sup>th</sup></code> building.</li>\n</ul>\n\n<p>You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height <code>0</code>.</p>\n\n<p>The <strong>skyline</strong> should be represented as a list of &quot;key points&quot; <strong>sorted by their x-coordinate</strong> in the form <code>[[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]</code>. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate <code>0</code> and is used to mark the skyline&#39;s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline&#39;s contour.</p>\n\n<p><b>Note:</b> There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...,[2 3],[4 5],[12 7],...]</code></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/merged.jpg\" style=\"width: 800px; height: 331px;\" />\n<pre>\n<strong>Input:</strong> buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n<strong>Output:</strong> [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n<strong>Explanation:</strong>\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> buildings = [[0,2,3],[2,5,3]]\n<strong>Output:</strong> [[0,3],[5,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= buildings.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= height<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>buildings</code> is sorted by <code>left<sub>i</sub></code> in&nbsp;non-decreasing order.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5754,
            "dislikes": 257,
            "similarQuestions": "[{\"title\": \"Falling Squares\", \"titleSlug\": \"falling-squares\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Shifting Letters II\", \"titleSlug\": \"shifting-letters-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Binary Indexed Tree",
                    "slug": "binary-indexed-tree"
                },
                {
                    "name": "Segment Tree",
                    "slug": "segment-tree"
                },
                {
                    "name": "Line Sweep",
                    "slug": "line-sweep"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"279.1K\", \"totalSubmission\": \"658.1K\", \"totalAcceptedRaw\": 279078, \"totalSubmissionRaw\": 658067, \"acRate\": \"42.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a list of buildings represented by their left edge, right edge, and height, determine the skyline formed by these buildings when viewed from a distance. The skyline should be represented as a list of key points (x, y) sorted by x-coordinate, where each key point is the left endpoint of a horizontal segment in the skyline. The last point should always be [x, 0] indicating the skyline's termination.",
                "constraints": [
                    "1 <= buildings.length <= 10^4",
                    "0 <= left_i < right_i <= 2^31 - 1",
                    "1 <= height_i <= 2^31 - 1",
                    "buildings is sorted by left_i in non-decreasing order."
                ],
                "testcases": [
                    {
                        "input": "[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
                        "output": "[[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]",
                        "explanation": "The input represents a set of buildings. The output represents the skyline formed by these buildings, with key points indicating changes in height."
                    },
                    {
                        "input": "[[0,2,3],[2,5,3]]",
                        "output": "[[0,3],[5,0]]",
                        "explanation": "The input represents two buildings with the same height and overlapping x-coordinates. The output reflects the combined skyline."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "falling-squares",
                "title": "Falling Squares",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "shifting-letters-ii",
                "title": "Shifting Letters II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Binary Indexed Tree",
                "slug": "binary-indexed-tree"
            },
            {
                "name": "Segment Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Line Sweep",
                "slug": "line-sweep"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> getSkyline(const vector<vector<int>>& buildings) {\n    const int n = buildings.size();\n    if (n == 0)\n      return {};\n    if (n == 1) {\n      const int left = buildings[0][0];\n      const int right = buildings[0][1];\n      const int height = buildings[0][2];\n      return {{left, height}, {right, 0}};\n    }\n\n    const vector<vector<int>> left =\n        getSkyline({buildings.begin(), buildings.begin() + n / 2});\n    const vector<vector<int>> right =\n        getSkyline({buildings.begin() + n / 2, buildings.end()});\n    return merge(left, right);\n  }\n\n private:\n  vector<vector<int>> merge(const vector<vector<int>>& left,\n                            const vector<vector<int>>& right) {\n    vector<vector<int>> ans;\n    int i = 0;  // left's index\n    int j = 0;  // right's index\n    int leftY = 0;\n    int rightY = 0;\n\n    while (i < left.size() && j < right.size())\n      // Choose the point with smaller x\n      if (left[i][0] < right[j][0]) {\n        leftY = left[i][1];  // Update the ongoing leftY\n        addPoint(ans, left[i][0], max(left[i++][1], rightY));\n      } else {\n        rightY = right[j][1];  // Update the ongoing rightY\n        addPoint(ans, right[j][0], max(right[j++][1], leftY));\n      }\n\n    while (i < left.size())\n      addPoint(ans, left[i][0], left[i++][1]);\n\n    while (j < right.size())\n      addPoint(ans, right[j][0], right[j++][1]);\n\n    return ans;\n  }\n\n  void addPoint(vector<vector<int>>& ans, int x, int y) {\n    if (!ans.empty() && ans.back()[0] == x) {\n      ans.back()[1] = y;\n      return;\n    }\n    if (!ans.empty() && ans.back()[1] == y)\n      return;\n    ans.push_back({x, y});\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<Integer>> getSkyline(int[][] buildings) {\n    final int n = buildings.length;\n    if (n == 0)\n      return new ArrayList<>();\n    if (n == 1) {\n      final int left = buildings[0][0];\n      final int right = buildings[0][1];\n      final int height = buildings[0][2];\n      List<List<Integer>> ans = new ArrayList<>();\n      ans.add(new ArrayList<>(Arrays.asList(left, height)));\n      ans.add(new ArrayList<>(Arrays.asList(right, 0)));\n      return ans;\n    }\n\n    List<List<Integer>> leftSkyline = getSkyline(Arrays.copyOfRange(buildings, 0, n / 2));\n    List<List<Integer>> rightSkyline = getSkyline(Arrays.copyOfRange(buildings, n / 2, n));\n    return merge(leftSkyline, rightSkyline);\n  }\n\n  private List<List<Integer>> merge(List<List<Integer>> left, List<List<Integer>> right) {\n    List<List<Integer>> ans = new ArrayList<>();\n    int i = 0; // left's index\n    int j = 0; // right's index\n    int leftY = 0;\n    int rightY = 0;\n\n    while (i < left.size() && j < right.size())\n      // Choose the point with smaller x\n      if (left.get(i).get(0) < right.get(j).get(0)) {\n        leftY = left.get(i).get(1); // Update the ongoing leftY\n        addPoint(ans, left.get(i).get(0), Math.max(left.get(i++).get(1), rightY));\n      } else {\n        rightY = right.get(j).get(1); // Update the ongoing rightY\n        addPoint(ans, right.get(j).get(0), Math.max(right.get(j++).get(1), leftY));\n      }\n\n    while (i < left.size())\n      addPoint(ans, left.get(i).get(0), left.get(i++).get(1));\n\n    while (j < right.size())\n      addPoint(ans, right.get(j).get(0), right.get(j++).get(1));\n\n    return ans;\n  }\n\n  private void addPoint(List<List<Integer>> ans, int x, int y) {\n    if (!ans.isEmpty() && ans.get(ans.size() - 1).get(0) == x) {\n      ans.get(ans.size() - 1).set(1, y);\n      return;\n    }\n    if (!ans.isEmpty() && ans.get(ans.size() - 1).get(1) == y)\n      return;\n    ans.add(new ArrayList<>(Arrays.asList(x, y)));\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n    n = len(buildings)\n    if n == 0:\n      return []\n    if n == 1:\n      left, right, height = buildings[0]\n      return [[left, height], [right, 0]]\n\n    left = self.getSkyline(buildings[:n // 2])\n    right = self.getSkyline(buildings[n // 2:])\n    return self._merge(left, right)\n\n  def _merge(self, left: List[List[int]], right: List[List[int]]) -> List[List[int]]:\n    ans = []\n    i = 0  # left's index\n    j = 0  # right's index\n    leftY = 0\n    rightY = 0\n\n    while i < len(left) and j < len(right):\n      # Choose the powith smaller x\n      if left[i][0] < right[j][0]:\n        leftY = left[i][1]  # Update the ongoing leftY\n        self._addPoint(ans, left[i][0], max(left[i][1], rightY))\n        i += 1\n      else:\n        rightY = right[j][1]  # Update the ongoing rightY\n        self._addPoint(ans, right[j][0], max(right[j][1], leftY))\n        j += 1\n\n    while i < len(left):\n      self._addPoint(ans, left[i][0], left[i][1])\n      i += 1\n\n    while j < len(right):\n      self._addPoint(ans, right[j][0], right[j][1])\n      j += 1\n\n    return ans\n\n  def _addPoint(self, ans: List[List[int]], x: int, y: int) -> None:\n    if ans and ans[-1][0] == x:\n      ans[-1][1] = y\n      return\n    if ans and ans[-1][1] == y:\n      return\n    ans.append([x, y])\n",
                "lang_text": "py"
            }
        }
    }
}