{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2039",
            "title": "The Time When the Network Becomes Idle",
            "titleSlug": "the-time-when-the-network-becomes-idle",
            "content": "<p>There is a network of <code>n</code> servers, labeled from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates there is a message channel between servers <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>, and they can pass <strong>any</strong> number of messages to <strong>each other</strong> directly in <strong>one</strong> second. You are also given a <strong>0-indexed</strong> integer array <code>patience</code> of length <code>n</code>.</p>\n\n<p>All servers are <strong>connected</strong>, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.</p>\n\n<p>The server labeled <code>0</code> is the <strong>master</strong> server. The rest are <strong>data</strong> servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers <strong>optimally</strong>, so every message takes the <strong>least amount of time</strong> to arrive at the master server. The master server will process all newly arrived messages <strong>instantly</strong> and send a reply to the originating server via the <strong>reversed path</strong> the message had gone through.</p>\n\n<p>At the beginning of second <code>0</code>, each data server sends its message to be processed. Starting from second <code>1</code>, at the <strong>beginning</strong> of <strong>every</strong> second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:</p>\n\n<ul>\n\t<li>If it has not, it will <strong>resend</strong> the message periodically. The data server <code>i</code> will resend the message every <code>patience[i]</code> second(s), i.e., the data server <code>i</code> will resend the message if <code>patience[i]</code> second(s) have <strong>elapsed</strong> since the <strong>last</strong> time the message was sent from this server.</li>\n\t<li>Otherwise, <strong>no more resending</strong> will occur from this server.</li>\n</ul>\n\n<p>The network becomes <strong>idle</strong> when there are <strong>no</strong> messages passing between servers or arriving at servers.</p>\n\n<p>Return <em>the <strong>earliest second</strong> starting from which the network becomes <strong>idle</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"example 1\" src=\"https://assets.leetcode.com/uploads/2021/09/22/quiet-place-example1.png\" style=\"width: 750px; height: 384px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1],[1,2]], patience = [0,2,1]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong>\nAt (the beginning of) second 0,\n- Data server 1 sends its message (denoted 1A) to the master server.\n- Data server 2 sends its message (denoted 2A) to the master server.\n\nAt second 1,\n- Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.\n- Server 1 has not received any reply. 1 second (1 &lt; patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message.\n- Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).\n\nAt second 2,\n- The reply 1A arrives at server 1. No more resending will occur from server 1.\n- Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.\n- Server 2 resends the message (denoted 2C).\n...\nAt second 4,\n- The reply 2A arrives at server 2. No more resending will occur from server 2.\n...\nAt second 7, reply 2D arrives at server 2.\n\nStarting from the beginning of the second 8, there are no messages passing between servers or arriving at servers.\nThis is the time when the network becomes idle.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"example 2\" src=\"https://assets.leetcode.com/uploads/2021/09/04/network_a_quiet_place_2.png\" style=\"width: 100px; height: 85px;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Data servers 1 and 2 receive a reply back at the beginning of second 2.\nFrom the beginning of the second 3, the network becomes idle.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == patience.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>patience[0] == 0</code></li>\n\t<li><code>1 &lt;= patience[i] &lt;= 10<sup>5</sup></code> for <code>1 &lt;= i &lt; n</code></li>\n\t<li><code>1 &lt;= edges.length &lt;= min(10<sup>5</sup>, n * (n - 1) / 2)</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; n</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li>There are no duplicate edges.</li>\n\t<li>Each server can directly or indirectly reach another server.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 619,
            "dislikes": 55,
            "similarQuestions": "[{\"title\": \"Network Delay Time\", \"titleSlug\": \"network-delay-time\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"N-ary Tree Level Order Traversal\", \"titleSlug\": \"n-ary-tree-level-order-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Maximum Depth of N-ary Tree\", \"titleSlug\": \"maximum-depth-of-n-ary-tree\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"13K\", \"totalSubmission\": \"25.2K\", \"totalAcceptedRaw\": 12983, \"totalSubmissionRaw\": 25180, \"acRate\": \"51.6%\"}",
            "hints": [
                "What method can you use to find the shortest time taken for a message from a data server to reach the master server? How can you use this value and the server's patience value to determine the time at which the server sends its last message?",
                "What is the time when the last message sent from a server gets back to the server?",
                "For each data server, by the time the server receives the first returned messages, how many messages has the server sent?"
            ],
            "rephrased": {
                "body": "Given a network of `n` servers (labeled 0 to `n-1`), represented by an array `edges` where `edges[i] = [u_i, v_i]` signifies a message channel between servers `u_i` and `v_i`.  Servers can exchange messages directly in one second. An array `patience` of length `n` determines how frequently each data server resends its message to the master server (server 0).  All servers are connected.\n\nEach data server sends a message to the master server at time 0. The master server immediately processes incoming messages and sends replies back along the reverse path.  Each data server, starting at second 1, checks for replies. If no reply has been received, the data server `i` resends its message every `patience[i]` seconds.  Resending stops once a reply is received.\n\nThe goal is to find the earliest second when the network becomes idle, meaning no messages are in transit or arriving at servers.",
                "constraints": [
                    "`n == patience.length`",
                    "`2 <= n <= 10^5`",
                    "`patience[0] == 0`",
                    "`1 <= patience[i] <= 10^5` for `1 <= i < n`",
                    "`1 <= edges.length <= min(10^5, n * (n - 1) / 2)`",
                    "`edges[i].length == 2`",
                    "`0 <= u_i, v_i < n`",
                    "`u_i != v_i`",
                    "No duplicate edges.",
                    "Each server can directly or indirectly reach another server."
                ],
                "testcases": [
                    {
                        "input": "edges = [[0,1],[1,2]], patience = [0,2,1]",
                        "output": "8",
                        "explanation": "Server 1 sends its initial message at time 0, which arrives at the master server at time 1. The reply arrives back at server 1 at time 2. Server 2 sends its initial message at time 0, which arrives at the master server at time 1. Server 2 resends at times 1, 2, 3.  The reply to the first message from server 2 arrives at time 4. The last reply to server 2 resend its message at time 3, the reply reaches at time 7. The network is idle at time 8."
                    },
                    {
                        "input": "edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]",
                        "output": "3",
                        "explanation": "Servers 1 and 2 send their initial messages at time 0, and the replies reach them at time 2. The network is idle at time 3."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "network-delay-time",
                "title": "Network Delay Time",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "n-ary-tree-level-order-traversal",
                "title": "N-ary Tree Level Order Traversal",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "maximum-depth-of-n-ary-tree",
                "title": "Maximum Depth of N-ary Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What method can you use to find the shortest time taken for a message from a data server to reach the master server? How can you use this value and the server's patience value to determine the time at which the server sends its last message?",
            "What is the time when the last message sent from a server gets back to the server?",
            "For each data server, by the time the server receives the first returned messages, how many messages has the server sent?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ]
    }
}