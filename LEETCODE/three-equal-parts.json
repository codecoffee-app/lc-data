{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "927",
            "title": "Three Equal Parts",
            "titleSlug": "three-equal-parts",
            "content": "<p>You are given an array <code>arr</code> which consists of only zeros and ones, divide the array into <strong>three non-empty parts</strong> such that all of these parts represent the same binary value.</p>\n\n<p>If it is possible, return any <code>[i, j]</code> with <code>i + 1 &lt; j</code>, such that:</p>\n\n<ul>\n\t<li><code>arr[0], arr[1], ..., arr[i]</code> is the first part,</li>\n\t<li><code>arr[i + 1], arr[i + 2], ..., arr[j - 1]</code> is the second part, and</li>\n\t<li><code>arr[j], arr[j + 1], ..., arr[arr.length - 1]</code> is the third part.</li>\n\t<li>All three parts have equal binary values.</li>\n</ul>\n\n<p>If it is not possible, return <code>[-1, -1]</code>.</p>\n\n<p>Note that the entire part is used when considering what binary value it represents. For example, <code>[1,1,0]</code> represents <code>6</code> in decimal, not <code>3</code>. Also, leading zeros <strong>are allowed</strong>, so <code>[0,1,1]</code> and <code>[1,1]</code> represent the same value.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> arr = [1,0,1,0,1]\n<strong>Output:</strong> [0,3]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> arr = [1,1,0,1,1]\n<strong>Output:</strong> [-1,-1]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> arr = [1,1,0,0,1]\n<strong>Output:</strong> [0,2]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= arr.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>arr[i]</code> is <code>0</code> or <code>1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 815,
            "dislikes": 120,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                }
            ],
            "stats": "{\"totalAccepted\": \"29.1K\", \"totalSubmission\": \"73.3K\", \"totalAcceptedRaw\": 29060, \"totalSubmissionRaw\": 73304, \"acRate\": \"39.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array `arr` consisting of only zeros and ones, divide the array into three non-empty parts such that all three parts represent the same binary value.\n\nReturn any `[i, j]` with `i + 1 < j` such that:\n\n*   `arr[0], arr[1], ..., arr[i]` is the first part,\n*   `arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and\n*   `arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part.\n*   All three parts have equal binary values.\n\nIf it is not possible, return `[-1, -1]`.  Note that leading zeros are allowed.",
                "constraints": [
                    "3 <= arr.length <= 3 * 10^4",
                    "arr[i] is 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "[1,0,1,0,1]",
                        "output": "[0,3]",
                        "explanation": null
                    },
                    {
                        "input": "[1,1,0,1,1]",
                        "output": "[-1,-1]",
                        "explanation": null
                    },
                    {
                        "input": "[1,1,0,0,1]",
                        "output": "[0,2]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> threeEqualParts(vector<int>& arr) {\n    const int ones =\n        count_if(arr.begin(), arr.end(), [](int a) { return a == 1; });\n\n    if (ones == 0)\n      return {0, static_cast<int>(arr.size()) - 1};\n    if (ones % 3 != 0)\n      return {-1, -1};\n\n    int k = ones / 3;\n    int i;\n    int j;\n    int first;\n    int second;\n    int third;\n\n    for (i = 0; i < arr.size(); ++i)\n      if (arr[i] == 1) {\n        first = i;\n        break;\n      }\n\n    int gapOnes = k;\n\n    for (j = i + 1; j < arr.size(); ++j)\n      if (arr[j] == 1 && --gapOnes == 0) {\n        second = j;\n        break;\n      }\n\n    gapOnes = k;\n\n    for (i = j + 1; i < arr.size(); ++i)\n      if (arr[i] == 1 && --gapOnes == 0) {\n        third = i;\n        break;\n      }\n\n    while (third < arr.size() && arr[first] == arr[second] &&\n           arr[second] == arr[third]) {\n      ++first;\n      ++second;\n      ++third;\n    }\n\n    if (third == arr.size())\n      return {first - 1, second};\n    return {-1, -1};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] threeEqualParts(int[] arr) {\n    int ones = 0;\n\n    for (final int a : arr)\n      if (a == 1)\n        ++ones;\n\n    if (ones == 0)\n      return new int[] {0, arr.length - 1};\n    if (ones % 3 != 0)\n      return new int[] {-1, -1};\n\n    int k = ones / 3;\n    int i = 0;\n    int j = 0;\n    int first = 0;\n    int second = 0;\n    int third = 0;\n\n    for (i = 0; i < arr.length; ++i)\n      if (arr[i] == 1) {\n        first = i;\n        break;\n      }\n\n    int gapOnes = k;\n\n    for (j = i + 1; j < arr.length; ++j)\n      if (arr[j] == 1 && --gapOnes == 0) {\n        second = j;\n        break;\n      }\n\n    gapOnes = k;\n\n    for (i = j + 1; i < arr.length; ++i)\n      if (arr[i] == 1 && --gapOnes == 0) {\n        third = i;\n        break;\n      }\n\n    while (third < arr.length && arr[first] == arr[second] && arr[second] == arr[third]) {\n      ++first;\n      ++second;\n      ++third;\n    }\n\n    if (third == arr.length)\n      return new int[] {first - 1, second};\n    return new int[] {-1, -1};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def threeEqualParts(self, arr: List[int]) -> List[int]:\n    ones = sum(a == 1 for a in arr)\n\n    if ones == 0:\n      return [0, len(arr) - 1]\n    if ones % 3 != 0:\n      return [-1, -1]\n\n    k = ones // 3\n    i = 0\n\n    for i in range(len(arr)):\n      if arr[i] == 1:\n        first = i\n        break\n\n    gapOnes = k\n\n    for j in range(i + 1, len(arr)):\n      if arr[j] == 1:\n        gapOnes -= 1\n        if gapOnes == 0:\n          second = j\n          break\n\n    gapOnes = k\n\n    for i in range(j + 1, len(arr)):\n      if arr[i] == 1:\n        gapOnes -= 1\n        if gapOnes == 0:\n          third = i\n          break\n\n    while third < len(arr) and arr[first] == arr[second] == arr[third]:\n      first += 1\n      second += 1\n      third += 1\n\n    if third == len(arr):\n      return [first - 1, second]\n    return [-1, -1]\n",
                "lang_text": "py"
            }
        }
    }
}