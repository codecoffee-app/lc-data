{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1240",
            "title": "Tiling a Rectangle with the Fewest Squares",
            "titleSlug": "tiling-a-rectangle-with-the-fewest-squares",
            "content": "<p>Given a rectangle of size <code>n</code> x <code>m</code>, return <em>the minimum number of integer-sided squares that tile the rectangle</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/17/sample_11_1592.png\" style=\"width: 154px; height: 106px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 2, m = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> <code>3</code> squares are necessary to cover the rectangle.\n<code>2</code> (squares of <code>1x1</code>)\n<code>1</code> (square of <code>2x2</code>)</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/17/sample_22_1592.png\" style=\"width: 224px; height: 126px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 5, m = 8\n<strong>Output:</strong> 5\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/17/sample_33_1592.png\" style=\"width: 224px; height: 189px;\" /></p>\n\n<pre>\n<strong>Input:</strong> n = 11, m = 13\n<strong>Output:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, m &lt;= 13</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 668,
            "dislikes": 562,
            "similarQuestions": "[{\"title\": \"Selling Pieces of Wood\", \"titleSlug\": \"selling-pieces-of-wood\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"22.8K\", \"totalSubmission\": \"42K\", \"totalAcceptedRaw\": 22807, \"totalSubmissionRaw\": 42049, \"acRate\": \"54.2%\"}",
            "hints": [
                "Can you use backtracking to solve this problem ?.",
                "Suppose you've placed a bunch of squares. Where is the natural spot to place the next square ?.",
                "The maximum number of squares to be placed will be \u2264 max(n,m)."
            ],
            "rephrased": {
                "body": "Given a rectangle of size n x m, determine the minimum number of integer-sided squares required to completely tile the rectangle.",
                "constraints": [
                    "1 <= n, m <= 13"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 3",
                        "output": "3",
                        "explanation": "The rectangle can be tiled with three squares: two 1x1 squares and one 2x2 square."
                    },
                    {
                        "input": "n = 5, m = 8",
                        "output": "5",
                        "explanation": null
                    },
                    {
                        "input": "n = 11, m = 13",
                        "output": "6",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "selling-pieces-of-wood",
                "title": "Selling Pieces of Wood",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can you use backtracking to solve this problem ?.",
            "Suppose you've placed a bunch of squares. Where is the natural spot to place the next square ?.",
            "The maximum number of squares to be placed will be \u2264 max(n,m)."
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int tilingRectangle(int n, int m) {\n    return tilingRectangle(n, m, 0, vector<int>(m));\n  }\n\n private:\n  static constexpr int kBase = 13;\n  unordered_map<long, int> dp;\n\n  int tilingRectangle(int n, int m, long hashedHeights, vector<int>&& heights) {\n    if (const auto it = dp.find(hashedHeights); it != dp.cend())\n      return it->second;\n\n    const auto it = min_element(heights.begin(), heights.end());\n    const int minHeight = *it;\n    if (minHeight == n)  // All filled\n      return 0;\n\n    int ans = m * n;\n    const int start = it - heights.begin();\n    // Try to put square of different size that doesn't exceed the width/height\n    for (int sz = 1; sz <= min(m - start, n - minHeight); ++sz) {\n      // heights[start:start + sz] must has the same height\n      if (heights[start + sz - 1] != minHeight)\n        break;\n      // Put a square of size `sz` to cover heights[start:start + sz]\n      for (int i = start; i < start + sz; ++i)\n        heights[i] += sz;\n      ans = min(ans, tilingRectangle(n, m, hash(heights), move(heights)));\n      for (int i = start; i < start + sz; ++i)\n        heights[i] -= sz;\n    }\n\n    return dp[hashedHeights] = 1 + ans;\n  }\n\n  long hash(const vector<int>& heights) {\n    long hashed = 0;\n    for (int i = heights.size() - 1; i >= 0; --i)\n      hashed = hashed * kBase + heights[i];\n    return hashed;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int tilingRectangle(int n, int m) {\n    return tilingRectangle(n, m, 0, new int[m]);\n  }\n\n  private static final int kBase = 13;\n  private Map<Long, Integer> dp = new HashMap<>();\n\n  private int tilingRectangle(int n, int m, long hashedHeights, int[] heights) {\n    if (dp.containsKey(hashedHeights))\n      return dp.get(hashedHeights);\n\n    final int minHeight = Arrays.stream(heights).min().getAsInt();\n    if (minHeight == n) // All filled\n      return 0;\n\n    int ans = m * n;\n    int start = -1;\n\n    for (int i = 0; i < m; ++i)\n      if (heights[i] == minHeight) {\n        start = i;\n        break;\n      }\n\n    // Try to put square of different size that doesn't exceed the width/height\n    for (int sz = 1; sz <= Math.min(m - start, n - minHeight); ++sz) {\n      // heights[start:start + sz] must has the same height\n      if (heights[start + sz - 1] != minHeight)\n        break;\n      // Put a square of size `sz` to cover heights[start:start + sz]\n      for (int i = start; i < start + sz; ++i)\n        heights[i] += sz;\n      ans = Math.min(ans, tilingRectangle(n, m, hash(heights), heights));\n      for (int i = start; i < start + sz; ++i)\n        heights[i] -= sz;\n    }\n\n    dp.put(hashedHeights, 1 + ans);\n    return 1 + ans;\n  }\n\n  private long hash(int[] heights) {\n    long hashed = 0;\n    for (int i = heights.length - 1; i >= 0; --i)\n      hashed = hashed * kBase + heights[i];\n    return hashed;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def tilingRectangle(self, n: int, m: int) -> int:\n    @functools.lru_cache(None)\n    def dp(heights: int) -> int:\n      minHeight = min(heights)\n      if minHeight == n:  # All filled\n        return 0\n\n      ans = m * n\n      heightsList = list(heights)\n      start = heightsList.index(minHeight)  # Start index\n\n      # Try to put square of different size that doesn't exceed the width and width\n      for sz in range(1, min(m - start + 1, n - minHeight + 1)):\n        # heights[start:start + sz] must has the same height\n        if heights[start + sz - 1] != minHeight:\n          break\n        # Put a square of size `sz` to cover heights[start:start + sz]\n        heightsList[start:start + sz] = [minHeight + sz] * sz\n        ans = min(ans, dp(tuple(heightsList)))\n\n      return 1 + ans\n\n    return dp(tuple([0] * m))\n",
                "lang_text": "py"
            }
        }
    }
}