{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "981",
            "title": "Time Based Key-Value Store",
            "titleSlug": "time-based-key-value-store",
            "content": "<p>Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key&#39;s value at a certain timestamp.</p>\n\n<p>Implement the <code>TimeMap</code> class:</p>\n\n<ul>\n\t<li><code>TimeMap()</code> Initializes the object of the data structure.</li>\n\t<li><code>void set(String key, String value, int timestamp)</code> Stores the key <code>key</code> with the value <code>value</code> at the given time <code>timestamp</code>.</li>\n\t<li><code>String get(String key, int timestamp)</code> Returns a value such that <code>set</code> was called previously, with <code>timestamp_prev &lt;= timestamp</code>. If there are multiple such values, it returns the value associated with the largest <code>timestamp_prev</code>. If there are no values, it returns <code>&quot;&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;TimeMap&quot;, &quot;set&quot;, &quot;get&quot;, &quot;get&quot;, &quot;set&quot;, &quot;get&quot;, &quot;get&quot;]\n[[], [&quot;foo&quot;, &quot;bar&quot;, 1], [&quot;foo&quot;, 1], [&quot;foo&quot;, 3], [&quot;foo&quot;, &quot;bar2&quot;, 4], [&quot;foo&quot;, 4], [&quot;foo&quot;, 5]]\n<strong>Output</strong>\n[null, null, &quot;bar&quot;, &quot;bar&quot;, null, &quot;bar2&quot;, &quot;bar2&quot;]\n\n<strong>Explanation</strong>\nTimeMap timeMap = new TimeMap();\ntimeMap.set(&quot;foo&quot;, &quot;bar&quot;, 1);  // store the key &quot;foo&quot; and value &quot;bar&quot; along with timestamp = 1.\ntimeMap.get(&quot;foo&quot;, 1);         // return &quot;bar&quot;\ntimeMap.get(&quot;foo&quot;, 3);         // return &quot;bar&quot;, since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is &quot;bar&quot;.\ntimeMap.set(&quot;foo&quot;, &quot;bar2&quot;, 4); // store the key &quot;foo&quot; and value &quot;bar2&quot; along with timestamp = 4.\ntimeMap.get(&quot;foo&quot;, 4);         // return &quot;bar2&quot;\ntimeMap.get(&quot;foo&quot;, 5);         // return &quot;bar2&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= key.length, value.length &lt;= 100</code></li>\n\t<li><code>key</code> and <code>value</code> consist of lowercase English letters and digits.</li>\n\t<li><code>1 &lt;= timestamp &lt;= 10<sup>7</sup></code></li>\n\t<li>All the timestamps <code>timestamp</code> of <code>set</code> are strictly increasing.</li>\n\t<li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>set</code> and <code>get</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4567,
            "dislikes": 497,
            "similarQuestions": "[{\"title\": \"Stock Price Fluctuation \", \"titleSlug\": \"stock-price-fluctuation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                }
            ],
            "stats": "{\"totalAccepted\": \"388.2K\", \"totalSubmission\": \"777.1K\", \"totalAcceptedRaw\": 388213, \"totalSubmissionRaw\": 777142, \"acRate\": \"50.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design a time-based key-value data structure, `TimeMap`, that stores multiple values for the same key at different timestamps and retrieves the value associated with the largest timestamp less than or equal to a given timestamp.\n\nImplement the `TimeMap` class with the following methods:\n\n*   `TimeMap()`: Initializes the TimeMap object.\n*   `void set(String key, String value, int timestamp)`: Stores the key `key` with the value `value` at the given time `timestamp`.\n*   `String get(String key, int timestamp)`: Returns the value associated with the largest `timestamp_prev` such that `timestamp_prev <= timestamp` and `set` was called previously with that `timestamp_prev`. If no such value exists, return \"\".",
                "constraints": [
                    "1 <= key.length, value.length <= 100",
                    "key and value consist of lowercase English letters and digits.",
                    "1 <= timestamp <= 10<sup>7</sup>",
                    "All timestamps in `set` calls are strictly increasing.",
                    "At most 2 * 10<sup>5</sup> calls will be made to `set` and `get`."
                ],
                "testcases": [
                    {
                        "input": "[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]",
                        "output": "[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]",
                        "explanation": "TimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1.\ntimeMap.get(\"foo\", 1);         // return \"bar\"\ntimeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4.\ntimeMap.get(\"foo\", 4);         // return \"bar2\"\ntimeMap.get(\"foo\", 5);         // return \"bar2\""
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "stock-price-fluctuation",
                "title": "Stock Price Fluctuation ",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Design",
                "slug": "design"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  string value;\n  int timestamp;\n  T(string value, int timestamp) : value(value), timestamp(timestamp) {}\n};\n\nclass TimeMap {\n public:\n  void set(string key, string value, int timestamp) {\n    map[key].emplace_back(value, timestamp);\n  }\n\n  string get(string key, int timestamp) {\n    if (!map.count(key))\n      return \"\";\n\n    const vector<T>& A = map[key];\n    int l = 0;\n    int r = A.size();\n\n    while (l < r) {\n      const int m = (l + r) / 2;\n      if (A[m].timestamp > timestamp)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l == 0 ? \"\" : A[l - 1].value;\n  }\n\n private:\n  unordered_map<string, vector<T>> map;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public String value;\n  public int timestamp;\n  public T(String value, int timestamp) {\n    this.value = value;\n    this.timestamp = timestamp;\n  }\n}\n\nclass TimeMap {\n  public void set(String key, String value, int timestamp) {\n    map.putIfAbsent(key, new ArrayList<>());\n    map.get(key).add(new T(value, timestamp));\n  }\n\n  public String get(String key, int timestamp) {\n    List<T> A = map.get(key);\n    if (A == null)\n      return \"\";\n\n    int l = 0;\n    int r = A.size();\n\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (A.get(m).timestamp > timestamp)\n        r = m;\n      else\n        l = m + 1;\n    }\n\n    return l == 0 ? \"\" : A.get(l - 1).value;\n  }\n\n  private Map<String, List<T>> map = new HashMap<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class TimeMap:\n  def __init__(self):\n    self.values = collections.defaultdict(list)\n    self.timestamps = collections.defaultdict(list)\n\n  def set(self, key: str, value: str, timestamp: int) -> None:\n    self.values[key].append(value)\n    self.timestamps[key].append(timestamp)\n\n  def get(self, key: str, timestamp: int) -> str:\n    if key not in self.timestamps:\n      return ''\n    i = bisect.bisect(self.timestamps[key], timestamp)\n    return self.values[key][i - 1] if i > 0 else ''\n",
                "lang_text": "py"
            }
        }
    }
}