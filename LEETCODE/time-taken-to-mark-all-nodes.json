{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3241",
            "title": "Time Taken to Mark All Nodes",
            "titleSlug": "time-taken-to-mark-all-nodes",
            "content": "<p>There exists an <strong>undirected</strong> tree with <code>n</code> nodes numbered <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the tree.</p>\n\n<p>Initially, <strong>all</strong> nodes are <strong>unmarked</strong>. For each node <code>i</code>:</p>\n\n<ul>\n\t<li>If <code>i</code> is odd, the node will get marked at time <code>x</code> if there is <strong>at least</strong> one node <em>adjacent</em> to it which was marked at time <code>x - 1</code>.</li>\n\t<li>If <code>i</code> is even, the node will get marked at time <code>x</code> if there is <strong>at least</strong> one node <em>adjacent</em> to it which was marked at time <code>x - 2</code>.</li>\n</ul>\n\n<p>Return an array <code>times</code> where <code>times[i]</code> is the time when all nodes get marked in the tree, if you mark node <code>i</code> at time <code>t = 0</code>.</p>\n\n<p><strong>Note</strong> that the answer for each <code>times[i]</code> is <strong>independent</strong>, i.e. when you mark node <code>i</code> all other nodes are <em>unmarked</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges = [[0,1],[0,2]]</span></p>\n\n<p><strong>Output:</strong> [2,4,3]</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/01/screenshot-2024-06-02-122236.png\" style=\"width: 500px; height: 241px;\" /></p>\n\n<ul>\n\t<li>For <code>i = 0</code>:\n\n\t<ul>\n\t\t<li>Node 1 is marked at <code>t = 1</code>, and Node 2 at <code>t = 2</code>.</li>\n\t</ul>\n\t</li>\n\t<li>For <code>i = 1</code>:\n\t<ul>\n\t\t<li>Node 0 is marked at <code>t = 2</code>, and Node 2 at <code>t = 4</code>.</li>\n\t</ul>\n\t</li>\n\t<li>For <code>i = 2</code>:\n\t<ul>\n\t\t<li>Node 0 is marked at <code>t = 2</code>, and Node 1 at <code>t = 3</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges = [[0,1]]</span></p>\n\n<p><strong>Output:</strong> [1,2]</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/01/screenshot-2024-06-02-122249.png\" style=\"width: 500px; height: 257px;\" /></p>\n\n<ul>\n\t<li>For <code>i = 0</code>:\n\n\t<ul>\n\t\t<li>Node 1 is marked at <code>t = 1</code>.</li>\n\t</ul>\n\t</li>\n\t<li>For <code>i = 1</code>:\n\t<ul>\n\t\t<li>Node 0 is marked at <code>t = 2</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges = </span>[[2,4],[0,1],[2,3],[0,2]]</p>\n\n<p><strong>Output:</strong> [4,6,3,5,5]</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/03/screenshot-2024-06-03-210550.png\" style=\"height: 266px; width: 500px;\" /></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li>\n\t<li>The input is generated such that <code>edges</code> represents a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 89,
            "dislikes": 4,
            "similarQuestions": "[{\"title\": \"Sum of Distances in Tree\", \"titleSlug\": \"sum-of-distances-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Most Profitable Path in a Tree\", \"titleSlug\": \"most-profitable-path-in-a-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.9K\", \"totalSubmission\": \"16.1K\", \"totalAcceptedRaw\": 3934, \"totalSubmissionRaw\": 16073, \"acRate\": \"24.5%\"}",
            "hints": [
                "Can we use dp on trees?",
                "Store the two most distant children for each node.",
                "When re-rooting the tree, keep a variable for distance to the root node."
            ],
            "rephrased": {
                "body": "Given an undirected tree with `n` nodes numbered from `0` to `n - 1`, represented by a 2D integer array `edges` of length `n - 1`, where `edges[i] = [u_i, v_i]` indicates an edge between nodes `u_i` and `v_i`. Initially, all nodes are unmarked.  For each node `i`, determine the time when all nodes get marked in the tree if node `i` is marked at time `t = 0`. The marking process follows these rules:\n\n*   If a node `i` is odd, it gets marked at time `x` if at least one adjacent node was marked at time `x - 1`.\n*   If a node `i` is even, it gets marked at time `x` if at least one adjacent node was marked at time `x - 2`.\n\nReturn an array `times` where `times[i]` is the time when all nodes get marked in the tree, starting by marking node `i` at time `t = 0`. Note that each `times[i]` calculation is independent and assumes all other nodes are initially unmarked.",
                "constraints": [
                    "2 <= n <= 10^5",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= edges[i][0], edges[i][1] <= n - 1",
                    "The input is generated such that `edges` represents a valid tree."
                ],
                "testcases": [
                    {
                        "input": "edges = [[0,1],[0,2]]",
                        "output": "[2,4,3]",
                        "explanation": "For i = 0: Node 1 is marked at t = 1, and Node 2 at t = 2.\nFor i = 1: Node 0 is marked at t = 2, and Node 2 at t = 4.\nFor i = 2: Node 0 is marked at t = 2, and Node 1 at t = 3."
                    },
                    {
                        "input": "edges = [[0,1]]",
                        "output": "[1,2]",
                        "explanation": "For i = 0: Node 1 is marked at t = 1.\nFor i = 1: Node 0 is marked at t = 2."
                    },
                    {
                        "input": "edges = [[2,4],[0,1],[2,3],[0,2]]",
                        "output": "[4,6,3,5,5]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-distances-in-tree",
                "title": "Sum of Distances in Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "most-profitable-path-in-a-tree",
                "title": "Most Profitable Path in a Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we use dp on trees?",
            "Store the two most distant children for each node.",
            "When re-rooting the tree, keep a variable for distance to the root node."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  int node = -1;\n  int time = 0;\n};\n\nstruct Top2 {\n  T max1;\n  T max2;\n};\n\nclass Solution {\n public:\n  vector<int> timeTaken(vector<vector<int>>& edges) {\n    const int n = edges.size() + 1;\n    vector<int> ans(n);\n    vector<vector<int>> tree(n);\n    // dp[i] := the top two nodes with maximum times to mark all nodes in the\n    // subtree rooted at node i\n    vector<Top2> dp(n);\n\n    for (const vector<int>& edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      tree[u].push_back(v);\n      tree[v].push_back(u);\n    }\n\n    dfs(tree, 0, /*prev=*/-1, dp);\n    reroot(tree, 0, /*prev=*/-1, /*maxTime=*/0, dp, ans);\n    return ans;\n  }\n\n private:\n  // Return the time taken to mark node u.\n  int getTime(int u) {\n    return u % 2 == 0 ? 2 : 1;\n  }\n\n  // Performs a DFS traversal of the tree, computing the maximum time to mark\n  // all nodes in the subtree rooted at node u.\n  //\n  // This function calculates and stores the top two maximum times for each\n  // node's subtree. These values are used later in the rerooting process.\n  int dfs(const vector<vector<int>>& tree, int u, int prev, vector<Top2>& dp) {\n    T max1;\n    T max2;\n    for (const int v : tree[u]) {\n      if (v == prev)\n        continue;\n      const int time = dfs(tree, v, u, dp) + getTime(v);\n      if (time >= max1.time) {\n        max2 = max1;\n        max1 = T(v, time);\n      } else if (time > max2.time) {\n        max2 = T(v, time);\n      }\n    }\n    dp[u] = Top2(max1, max2);\n    return max1.time;\n  }\n\n  // Reroots the tree at node `u` and updates the answer array, where `maxTime`\n  // is the longest path that doesn't go through `u`'s subtree.\n  void reroot(const vector<vector<int>>& tree, int u, int prev, int maxTime,\n              const vector<Top2>& dp, vector<int>& ans) {\n    ans[u] = max(maxTime, dp[u].max1.time);\n    for (const int v : tree[u]) {\n      if (v == prev)\n        continue;\n      const int newMaxTime =\n          getTime(u) + max(maxTime, dp[u].max1.node == v ? dp[u].max2.time\n                                                         : dp[u].max1.time);\n      reroot(tree, v, u, newMaxTime, dp, ans);\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] timeTaken(int[][] edges) {\n    final int n = edges.length + 1;\n    int[] ans = new int[n];\n    List<Integer>[] tree = new List[n];\n    // dp[i] := the top two nodes with maximum times to mark all nodes in the\n    // subtree rooted at node i\n    Top2[] dp = new Top2[n];\n\n    for (int i = 0; i < n; ++i) {\n      tree[i] = new ArrayList<>();\n      dp[i] = new Top2();\n    }\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      tree[u].add(v);\n      tree[v].add(u);\n    }\n\n    dfs(tree, 0, /*prev=*/-1, dp);\n    reroot(tree, 0, /*prev=*/-1, /*maxTime=*/0, dp, ans);\n    return ans;\n  }\n\n  private record T(int node, int time) {\n    T() {\n      this(-1, 0);\n    }\n  }\n\n  private record Top2(T max1, T max2) {\n    Top2() {\n      this(new T(), new T());\n    }\n  }\n\n  // Return the time taken to mark node u.\n  private int getTime(int u) {\n    return u % 2 == 0 ? 2 : 1;\n  }\n\n  // Performs a DFS traversal of the tree, computing the maximum time to mark\n  // all nodes in the subtree rooted at node u.\n  //\n  // This function calculates and stores the top two maximum times for each\n  // node's subtree. These values are used later in the rerooting process.\n  private int dfs(List<Integer>[] tree, int u, int prev, Top2[] dp) {\n    T max1 = new T();\n    T max2 = new T();\n    for (final int v : tree[u]) {\n      if (v == prev)\n        continue;\n      final int time = dfs(tree, v, u, dp) + getTime(v);\n      if (time >= max1.time()) {\n        max2 = max1;\n        max1 = new T(v, time);\n      } else if (time > max2.time()) {\n        max2 = new T(v, time);\n      }\n    }\n    dp[u] = new Top2(max1, max2);\n    return max1.time();\n  }\n\n  // Reroots the tree at node `u` and updates the answer array, where `maxTime`\n  // is the longest path that doesn't go through `u`'s subtree.\n  private void reroot(List<Integer>[] tree, int u, int prev, int maxTime, Top2[] dp, int[] ans) {\n    ans[u] = Math.max(maxTime, dp[u].max1().time());\n    for (final int v : tree[u]) {\n      if (v == prev)\n        continue;\n      final int newMaxTime =\n          getTime(u) +\n          Math.max(maxTime, dp[u].max1().node() == v ? dp[u].max2().time() : dp[u].max1().time());\n      reroot(tree, v, u, newMaxTime, dp, ans);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from dataclasses import dataclass\n\n\n@dataclass\nclass T:\n  node: int = -1  # the node number\n  time: int = 0  # the time taken to reach this node\n\n\nclass Top2:\n  def __init__(self, max1: T = T(-1, 0), max2: T = T(-1, 0)):\n    self.max1 = max1  # the node with the maximum time\n    self.max2 = max2  # the node with the second maximum time\n\n\nclass Solution:\n  def timeTaken(self, edges: list[list[int]]) -> list[int]:\n    n = len(edges) + 1\n    ans = [0] * n\n    tree = [[] for _ in range(n)]\n    # dp[i] := the top two nodes with maximum times to mark all nodes in the\n    # subtree rooted at node i\n    dp = [Top2()] * n\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    def getTime(u: int) -> int:\n      \"\"\"Returns the time taken to mark node u.\"\"\"\n      return 2 if u % 2 == 0 else 1\n\n    def dfs(u: int, prev: int) -> int:\n      \"\"\"\n      Performs a DFS traversal of the tree, computing the maximum time to mark\n      all nodes in the subtree rooted at node u.\n\n      This function calculates and stores the top two maximum times for each\n      node's subtree. These values are used later in the rerooting process.\n      \"\"\"\n      max1 = T()\n      max2 = T()\n      for v in tree[u]:\n        if v == prev:\n          continue\n        time = dfs(v, u) + getTime(v)\n        if time >= max1.time:\n          max2 = max1\n          max1 = T(v, time)\n        elif time > max2.time:\n          max2 = T(v, time)\n      dp[u] = Top2(max1, max2)\n      return max1.time\n\n    dfs(0, -1)\n\n    def reroot(u: int, prev: int, maxTime) -> None:\n      \"\"\"\n      Reroots the tree at node `u` and updates the answer array, where `maxTime`\n      is the longest path that doesn't go through `u`'s subtree.\n      \"\"\"\n      ans[u] = max(maxTime, dp[u].max1.time)\n\n      for v in tree[u]:\n        if v == prev:\n          continue\n        newMaxTime = getTime(u) + max(\n            maxTime,\n            dp[u].max2.time if dp[u].max1.node == v else dp[u].max1.time\n        )\n        reroot(v, u, newMaxTime)\n\n    reroot(0, -1, 0)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}