{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3241",
            "title": "Time Taken to Mark All Nodes",
            "titleSlug": "time-taken-to-mark-all-nodes",
            "content": "<p>There exists an <strong>undirected</strong> tree with <code>n</code> nodes numbered <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the tree.</p>\n\n<p>Initially, <strong>all</strong> nodes are <strong>unmarked</strong>. For each node <code>i</code>:</p>\n\n<ul>\n\t<li>If <code>i</code> is odd, the node will get marked at time <code>x</code> if there is <strong>at least</strong> one node <em>adjacent</em> to it which was marked at time <code>x - 1</code>.</li>\n\t<li>If <code>i</code> is even, the node will get marked at time <code>x</code> if there is <strong>at least</strong> one node <em>adjacent</em> to it which was marked at time <code>x - 2</code>.</li>\n</ul>\n\n<p>Return an array <code>times</code> where <code>times[i]</code> is the time when all nodes get marked in the tree, if you mark node <code>i</code> at time <code>t = 0</code>.</p>\n\n<p><strong>Note</strong> that the answer for each <code>times[i]</code> is <strong>independent</strong>, i.e. when you mark node <code>i</code> all other nodes are <em>unmarked</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges = [[0,1],[0,2]]</span></p>\n\n<p><strong>Output:</strong> [2,4,3]</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/01/screenshot-2024-06-02-122236.png\" style=\"width: 500px; height: 241px;\" /></p>\n\n<ul>\n\t<li>For <code>i = 0</code>:\n\n\t<ul>\n\t\t<li>Node 1 is marked at <code>t = 1</code>, and Node 2 at <code>t = 2</code>.</li>\n\t</ul>\n\t</li>\n\t<li>For <code>i = 1</code>:\n\t<ul>\n\t\t<li>Node 0 is marked at <code>t = 2</code>, and Node 2 at <code>t = 4</code>.</li>\n\t</ul>\n\t</li>\n\t<li>For <code>i = 2</code>:\n\t<ul>\n\t\t<li>Node 0 is marked at <code>t = 2</code>, and Node 1 at <code>t = 3</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges = [[0,1]]</span></p>\n\n<p><strong>Output:</strong> [1,2]</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/01/screenshot-2024-06-02-122249.png\" style=\"width: 500px; height: 257px;\" /></p>\n\n<ul>\n\t<li>For <code>i = 0</code>:\n\n\t<ul>\n\t\t<li>Node 1 is marked at <code>t = 1</code>.</li>\n\t</ul>\n\t</li>\n\t<li>For <code>i = 1</code>:\n\t<ul>\n\t\t<li>Node 0 is marked at <code>t = 2</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">edges = </span>[[2,4],[0,1],[2,3],[0,2]]</p>\n\n<p><strong>Output:</strong> [4,6,3,5,5]</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/03/screenshot-2024-06-03-210550.png\" style=\"height: 266px; width: 500px;\" /></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li>\n\t<li>The input is generated such that <code>edges</code> represents a valid tree.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 89,
            "dislikes": 4,
            "similarQuestions": "[{\"title\": \"Sum of Distances in Tree\", \"titleSlug\": \"sum-of-distances-in-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Most Profitable Path in a Tree\", \"titleSlug\": \"most-profitable-path-in-a-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.9K\", \"totalSubmission\": \"16.1K\", \"totalAcceptedRaw\": 3934, \"totalSubmissionRaw\": 16073, \"acRate\": \"24.5%\"}",
            "hints": [
                "Can we use dp on trees?",
                "Store the two most distant children for each node.",
                "When re-rooting the tree, keep a variable for distance to the root node."
            ],
            "rephrased": {
                "body": "Given an undirected tree with `n` nodes numbered from `0` to `n - 1`, represented by a 2D integer array `edges` of length `n - 1`, where `edges[i] = [u_i, v_i]` indicates an edge between nodes `u_i` and `v_i`. Initially, all nodes are unmarked.  For each node `i`, determine the time when all nodes get marked in the tree if node `i` is marked at time `t = 0`. The marking process follows these rules:\n\n*   If a node `i` is odd, it gets marked at time `x` if at least one adjacent node was marked at time `x - 1`.\n*   If a node `i` is even, it gets marked at time `x` if at least one adjacent node was marked at time `x - 2`.\n\nReturn an array `times` where `times[i]` is the time when all nodes get marked in the tree, starting by marking node `i` at time `t = 0`. Note that each `times[i]` calculation is independent and assumes all other nodes are initially unmarked.",
                "constraints": [
                    "2 <= n <= 10^5",
                    "edges.length == n - 1",
                    "edges[i].length == 2",
                    "0 <= edges[i][0], edges[i][1] <= n - 1",
                    "The input is generated such that `edges` represents a valid tree."
                ],
                "testcases": [
                    {
                        "input": "edges = [[0,1],[0,2]]",
                        "output": "[2,4,3]",
                        "explanation": "For i = 0: Node 1 is marked at t = 1, and Node 2 at t = 2.\nFor i = 1: Node 0 is marked at t = 2, and Node 2 at t = 4.\nFor i = 2: Node 0 is marked at t = 2, and Node 1 at t = 3."
                    },
                    {
                        "input": "edges = [[0,1]]",
                        "output": "[1,2]",
                        "explanation": "For i = 0: Node 1 is marked at t = 1.\nFor i = 1: Node 0 is marked at t = 2."
                    },
                    {
                        "input": "edges = [[2,4],[0,1],[2,3],[0,2]]",
                        "output": "[4,6,3,5,5]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "sum-of-distances-in-tree",
                "title": "Sum of Distances in Tree",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "most-profitable-path-in-a-tree",
                "title": "Most Profitable Path in a Tree",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Can we use dp on trees?",
            "Store the two most distant children for each node.",
            "When re-rooting the tree, keep a variable for distance to the root node."
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ]
    }
}