{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2532",
            "title": "Time to Cross a Bridge",
            "titleSlug": "time-to-cross-a-bridge",
            "content": "<p>There are <code>k</code> workers who want to move <code>n</code> boxes from an old warehouse to a new one. You are given the two integers <code>n</code> and <code>k</code>, and a 2D integer array <code>time</code> of size <code>k x 4</code> where <code>time[i] = [leftToRight<sub>i</sub>, pickOld<sub>i</sub>, rightToLeft<sub>i</sub>, putNew<sub>i</sub>]</code>.</p>\n\n<p>The warehouses are separated by a river and connected by a bridge. The old warehouse is on the right bank of the river, and the new warehouse is on the left bank of the river. Initially, all <code>k</code> workers are waiting on the left side of the bridge. To move the boxes, the <code>i<sup>th</sup></code> worker (<strong>0-indexed</strong>) can :</p>\n\n<ul>\n\t<li>Cross the bridge from the left bank (new warehouse) to the right bank (old warehouse) in <code>leftToRight<sub>i</sub></code> minutes.</li>\n\t<li>Pick a box from the old warehouse and return to the bridge in <code>pickOld<sub>i</sub></code> minutes. Different workers can pick up their boxes simultaneously.</li>\n\t<li>Cross the bridge from the right bank (old warehouse) to the left bank (new warehouse) in <code>rightToLeft<sub>i</sub></code> minutes.</li>\n\t<li>Put the box in the new warehouse and return to the bridge in <code>putNew<sub>i</sub></code> minutes. Different workers can put their boxes simultaneously.</li>\n</ul>\n\n<p>A worker <code>i</code> is <strong>less efficient</strong> than a worker <code>j</code> if either condition is met:</p>\n\n<ul>\n\t<li><code>leftToRight<sub>i</sub> + rightToLeft<sub>i</sub> &gt; leftToRight<sub>j</sub> + rightToLeft<sub>j</sub></code></li>\n\t<li><code>leftToRight<sub>i</sub> + rightToLeft<sub>i</sub> == leftToRight<sub>j</sub> + rightToLeft<sub>j</sub></code> and <code>i &gt; j</code></li>\n</ul>\n\n<p>The following rules regulate the movement of the workers through the bridge :</p>\n\n<ul>\n\t<li>If a worker <code>x</code> reaches the bridge while another worker <code>y</code> is crossing the bridge, <code>x</code> waits at their side of the bridge.</li>\n\t<li>If the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. If more than one worker is waiting on the right side, the one with <strong>the lowest efficiency</strong> crosses first.</li>\n\t<li>If the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. If more than one worker is waiting on the left side, the one with <strong>the lowest efficiency</strong> crosses first.</li>\n</ul>\n\n<p>Return <em>the instance of time at which the last worker <strong>reaches the left bank</strong> of the river after all n boxes have been put in the new warehouse</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 3, time = [[1,1,2,1],[1,1,3,1],[1,1,4,1]]\n<strong>Output:</strong> 6\n<strong>Explanation: </strong>\nFrom 0 to 1: worker 2 crosses the bridge from the left bank to the right bank.\nFrom 1 to 2: worker 2 picks up a box from the old warehouse.\nFrom 2 to 6: worker 2 crosses the bridge from the right bank to the left bank.\nFrom 6 to 7: worker 2 puts a box at the new warehouse.\nThe whole process ends after 7 minutes. We return 6 because the problem asks for the instance of time at which the last worker reaches the left bank.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 2, time = [[1,9,1,8],[10,10,10,10]]\n<strong>Output:</strong> 50\n<strong>Explanation:</strong> \nFrom 0 &nbsp;to 10: worker 1 crosses the bridge from the left bank to the right bank.\nFrom 10 to 20: worker 1 picks up a box from the old warehouse.\nFrom 10 to 11: worker 0 crosses the bridge from the left bank to the right bank.\nFrom 11 to 20: worker 0 picks up a box from the old warehouse.\nFrom 20 to 30: worker 1 crosses the bridge from the right bank to the left bank.\nFrom 30 to 40: worker 1 puts a box at the new warehouse.\nFrom 30 to 31: worker 0 crosses the bridge from the right bank to the left bank.\nFrom 31 to 39: worker 0 puts a box at the new warehouse.\nFrom 39 to 40: worker 0 crosses the bridge from the left bank to the right bank.\nFrom 40 to 49: worker 0 picks up a box from the old warehouse.\nFrom 49 to 50: worker 0 crosses the bridge from the right bank to the left bank.\nFrom 50 to 58: worker 0 puts a box at the new warehouse.\nThe whole process ends after 58 minutes. We return 50 because the problem asks for the instance of time at which the last worker reaches the left bank.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n, k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>time.length == k</code></li>\n\t<li><code>time[i].length == 4</code></li>\n\t<li><code>1 &lt;= leftToRight<sub>i</sub>, pickOld<sub>i</sub>, rightToLeft<sub>i</sub>, putNew<sub>i</sub> &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 107,
            "dislikes": 210,
            "similarQuestions": "[{\"title\": \"The Latest Time to Catch a Bus\", \"titleSlug\": \"the-latest-time-to-catch-a-bus\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Total Cost to Hire K Workers\", \"titleSlug\": \"total-cost-to-hire-k-workers\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"3.7K\", \"totalSubmission\": \"8.1K\", \"totalAcceptedRaw\": 3692, \"totalSubmissionRaw\": 8100, \"acRate\": \"45.6%\"}",
            "hints": [
                "Try simulating this process.",
                "We can use a priority queue to query over the least efficient worker."
            ],
            "rephrased": {
                "body": "There are `k` workers tasked with moving `n` boxes from an old warehouse to a new one, connected by a bridge across a river. The old warehouse is on the right bank, and the new warehouse is on the left. Initially, all `k` workers are on the left bank.  Each worker `i` has a `time` array: `time[i] = [leftToRight_i, pickOld_i, rightToLeft_i, putNew_i]`, representing the time it takes to cross from left to right, pick a box, cross from right to left, and put a box down, respectively.\n\nA worker `i` is considered less efficient than worker `j` if `leftToRight_i + rightToLeft_i > leftToRight_j + rightToLeft_j` or if `leftToRight_i + rightToLeft_i == leftToRight_j + rightToLeft_j` and `i > j`.\n\nThe movement of workers across the bridge follows these rules:\n\n1.  Workers arriving at the bridge while another is crossing must wait.\n2.  If the bridge is free, workers on the right bank cross first, with the least efficient worker going first (if multiple are waiting).\n3.  If the bridge is free and no workers are waiting on the right, and there are boxes remaining, workers on the left bank cross, again with the least efficient worker crossing first (if multiple are waiting).\n\nDetermine the time at which the last worker reaches the left bank of the river after all `n` boxes have been moved to the new warehouse.",
                "constraints": [
                    "1 <= n, k <= 10^4",
                    "time.length == k",
                    "time[i].length == 4",
                    "1 <= leftToRight_i, pickOld_i, rightToLeft_i, putNew_i <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 1, k = 3, time = [[1,1,2,1],[1,1,3,1],[1,1,4,1]]",
                        "output": "6",
                        "explanation": "Worker 2 crosses from left to right (0 to 1). Picks up a box (1 to 2). Crosses from right to left (2 to 6). Puts the box down (6 to 7). The last worker reaches the left bank at time 6."
                    },
                    {
                        "input": "n = 3, k = 2, time = [[1,9,1,8],[10,10,10,10]]",
                        "output": "50",
                        "explanation": "Worker 1 crosses from left to right (0 to 10). Picks up a box (10 to 20). Worker 0 crosses from left to right (10 to 11). Worker 0 picks up a box (11 to 20). Worker 1 crosses from right to left (20 to 30). Worker 1 puts box down (30 to 40). Worker 0 crosses right to left (30 to 31). Worker 0 puts box down (31 to 39). Worker 0 crosses from left to right (39 to 40). Worker 0 picks up box (40 to 49). Worker 0 crosses from right to left (49 to 50). Worker 0 puts box down (50 to 58). The last worker reaches left bank at time 50."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "the-latest-time-to-catch-a-bus",
                "title": "The Latest Time to Catch a Bus",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "total-cost-to-hire-k-workers",
                "title": "Total Cost to Hire K Workers",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Try simulating this process.",
            "We can use a priority queue to query over the least efficient worker."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int findCrossingTime(int n, int k, vector<vector<int>>& time) {\n    int ans = 0;\n    using P = pair<int, int>;\n    // (leftToRight + rightToLeft, i)\n    priority_queue<P> leftBridgeQueue;\n    priority_queue<P> rightBridgeQueue;\n    // (time to be idle, i)\n    priority_queue<P, vector<P>, greater<>> leftWorkers;\n    priority_queue<P, vector<P>, greater<>> rightWorkers;\n\n    for (int i = 0; i < k; ++i)\n      leftBridgeQueue.emplace(\n          /*leftToRight*/ time[i][0] + /*rightToLeft*/ time[i][2], i);\n\n    while (n > 0 || !rightBridgeQueue.empty() || !rightWorkers.empty()) {\n      // Idle left workers get on the left bridge.\n      while (!leftWorkers.empty() && leftWorkers.top().first <= ans) {\n        const int i = leftWorkers.top().second;\n        leftWorkers.pop();\n        leftBridgeQueue.emplace(\n            /*leftToRight*/ time[i][0] + /*rightToLeft*/ time[i][2], i);\n      }\n      // Idle right workers get on the right bridge.\n      while (!rightWorkers.empty() && rightWorkers.top().first <= ans) {\n        const int i = rightWorkers.top().second;\n        rightWorkers.pop();\n        rightBridgeQueue.emplace(\n            /*leftToRight*/ time[i][0] + /*rightToLeft*/ time[i][2], i);\n      }\n\n      if (!rightBridgeQueue.empty()) {\n        // If the bridge is free, the worker waiting on the right side of the\n        // bridge gets to cross the bridge. If more than one worker is waiting\n        // on the right side, the one with the lowest efficiency crosses first.\n        const int i = rightBridgeQueue.top().second;\n        rightBridgeQueue.pop();\n        ans += /*rightToLeft*/ time[i][2];\n        leftWorkers.emplace(ans + /*putNew*/ time[i][3], i);\n      } else if (!leftBridgeQueue.empty() && n > 0) {\n        // If the bridge is free and no worker is waiting on the right side, and\n        // at least one box remains at the old warehouse, the worker on the left\n        // side of the river gets to cross the bridge. If more than one worker\n        // is waiting on the left side, the one with the lowest efficiency\n        // crosses first.\n        const int i = leftBridgeQueue.top().second;\n        leftBridgeQueue.pop();\n        ans += /*leftToRight*/ time[i][0];\n        rightWorkers.emplace(ans + /*pickOld*/ time[i][1], i);\n        --n;\n      } else {\n        // Advance the time of the last crossing worker.\n        ans = min(\n            !leftWorkers.empty() && n > 0 ? leftWorkers.top().first : INT_MAX,\n            !rightWorkers.empty() ? rightWorkers.top().first : INT_MAX);\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int findCrossingTime(int n, int k, int[][] time) {\n    int ans = 0;\n    // (leftToRight + rightToLeft, i)\n    Queue<Pair<Integer, Integer>> leftBridgeQueue = createMaxHeap();\n    Queue<Pair<Integer, Integer>> rightBridgeQueue = createMaxHeap();\n    // (time to be idle, i)\n    Queue<Pair<Integer, Integer>> leftWorkers = createMinHeap();\n    Queue<Pair<Integer, Integer>> rightWorkers = createMinHeap();\n\n    for (int i = 0; i < k; ++i)\n      leftBridgeQueue.offer(new Pair<>(\n          /*leftToRight*/ time[i][0] + /*rightToLeft*/ time[i][2], i));\n\n    while (n > 0 || !rightBridgeQueue.isEmpty() || !rightWorkers.isEmpty()) {\n      // Idle left workers get on the left bridge.\n      while (!leftWorkers.isEmpty() && leftWorkers.peek().getKey() <= ans) {\n        final int i = leftWorkers.poll().getValue();\n        leftBridgeQueue.offer(new Pair<>(\n            /*leftToRight*/ time[i][0] + /*rightToLeft*/ time[i][2], i));\n      }\n      // Idle right workers get on the right bridge.\n      while (!rightWorkers.isEmpty() && rightWorkers.peek().getKey() <= ans) {\n        final int i = rightWorkers.poll().getValue();\n        rightBridgeQueue.offer(new Pair<>(\n            /*leftToRight*/ time[i][0] + /*rightToLeft*/ time[i][2], i));\n      }\n\n      if (!rightBridgeQueue.isEmpty()) {\n        // If the bridge is free, the worker waiting on the right side of the\n        // bridge gets to cross the bridge. If more than one worker is waiting\n        // on the right side, the one with the lowest efficiency crosses first.\n        final int i = rightBridgeQueue.poll().getValue();\n        ans += /*rightToLeft*/ time[i][2];\n        leftWorkers.offer(new Pair<>(ans + /*putNew*/ time[i][3], i));\n      } else if (!leftBridgeQueue.isEmpty() && n > 0) {\n        // If the bridge is free and no worker is waiting on the right side, and\n        // at least one box remains at the old warehouse, the worker on the left\n        // side of the river gets to cross the bridge. If more than one worker\n        // is waiting on the left side, the one with the lowest efficiency\n        // crosses first.\n        final int i = leftBridgeQueue.poll().getValue();\n        ans += /*leftToRight*/ time[i][0];\n        rightWorkers.offer(new Pair<>(ans + /*pickOld*/ time[i][1], i));\n        --n;\n      } else {\n        // Advance the time of the last crossing worker.\n        ans = Math.min(!leftWorkers.isEmpty() && n > 0 ? leftWorkers.peek().getKey()\n                                                       : Integer.MAX_VALUE,\n                       !rightWorkers.isEmpty() ? rightWorkers.peek().getKey() : Integer.MAX_VALUE);\n      }\n    }\n\n    return ans;\n  }\n\n  private Queue<Pair<Integer, Integer>> createMaxHeap() {\n    return new PriorityQueue<>((a, b)\n                                   -> a.getKey().equals(b.getKey()) ? b.getValue() - a.getValue()\n                                                                    : b.getKey() - a.getKey());\n  }\n\n  private Queue<Pair<Integer, Integer>> createMinHeap() {\n    return new PriorityQueue<>((a, b)\n                                   -> a.getKey().equals(b.getKey()) ? a.getValue() - b.getValue()\n                                                                    : a.getKey() - b.getKey());\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findCrossingTime(self, n: int, k: int, time: List[List[int]]) -> int:\n    ans = 0\n    # (leftToRight + rightToLeft, i)\n    leftBridgeQueue = [(-leftToRight - rightToLeft, -i)\n                       for i, (leftToRight, pickOld, rightToLeft, pickNew) in enumerate(time)]\n    rightBridgeQueue = []\n    # (time to be idle, i)\n    leftWorkers = []\n    rightWorkers = []\n\n    heapq.heapify(leftBridgeQueue)\n\n    while n > 0 or rightBridgeQueue or rightWorkers:\n      # Idle left workers get on the left bridge.\n      while leftWorkers and leftWorkers[0][0] <= ans:\n        i = heapq.heappop(leftWorkers)[1]\n        leftWorkers.pop()\n        heapq.heappush(leftBridgeQueue, (-time[i][0] - time[i][2], -i))\n      # Idle right workers get on the right bridge.\n      while rightWorkers and rightWorkers[0][0] <= ans:\n        i = heapq.heappop(rightWorkers)[1]\n        heapq.heappush(rightBridgeQueue, (-time[i][0] - time[i][2], -i))\n      if rightBridgeQueue:\n        # If the bridge is free, the worker waiting on the right side of the\n        # bridge gets to cross the bridge. If more than one worker is waiting\n        # on the right side, the one with the lowest efficiency crosses first.\n        i = -heapq.heappop(rightBridgeQueue)[1]\n        ans += time[i][2]\n        heapq.heappush(leftWorkers, (ans + time[i][3], i))\n      elif leftBridgeQueue and n > 0:\n        # If the bridge is free and no worker is waiting on the right side, and\n       # at least one box remains at the old warehouse, the worker on the left\n       # side of the river gets to cross the bridge. If more than one worker\n       # is waiting on the left side, the one with the lowest efficiency\n       # crosses first.\n        i = -heapq.heappop(leftBridgeQueue)[1]\n        ans += time[i][0]\n        heapq.heappush(rightWorkers, (ans + time[i][1], i))\n        n -= 1\n      else:\n        # Advance the time of the last crossing worker.\n        ans = min(leftWorkers[0][0] if leftWorkers and n > 0 else math.inf,\n                  rightWorkers[0][0] if rightWorkers else math.inf)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}