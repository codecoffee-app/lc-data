{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "347",
            "title": "Top K Frequent Elements",
            "titleSlug": "top-k-frequent-elements",
            "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1,2,2,3], k = 2\n<strong>Output:</strong> [1,2]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> [1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Your algorithm&#39;s time complexity must be better than <code>O(n log n)</code>, where n is the array&#39;s size.</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 16518,
            "dislikes": 610,
            "similarQuestions": "[{\"title\": \"Word Frequency\", \"titleSlug\": \"word-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Kth Largest Element in an Array\", \"titleSlug\": \"kth-largest-element-in-an-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sort Characters By Frequency\", \"titleSlug\": \"sort-characters-by-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Split Array into Consecutive Subsequences\", \"titleSlug\": \"split-array-into-consecutive-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Top K Frequent Words\", \"titleSlug\": \"top-k-frequent-words\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"K Closest Points to Origin\", \"titleSlug\": \"k-closest-points-to-origin\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sort Features by Popularity\", \"titleSlug\": \"sort-features-by-popularity\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Sender With Largest Word Count\", \"titleSlug\": \"sender-with-largest-word-count\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Most Frequent Even Element\", \"titleSlug\": \"most-frequent-even-element\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Divide and Conquer",
                    "slug": "divide-and-conquer"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Bucket Sort",
                    "slug": "bucket-sort"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                },
                {
                    "name": "Quickselect",
                    "slug": "quickselect"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.9M\", \"totalSubmission\": \"3M\", \"totalAcceptedRaw\": 1854033, \"totalSubmissionRaw\": 2953536, \"acRate\": \"62.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums` and an integer `k`, find and return the `k` most frequent elements. The order of the returned elements does not matter.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "-10^4 <= nums[i] <= 10^4",
                    "k is in the range [1, the number of unique elements in the array]",
                    "The answer is guaranteed to be unique.",
                    "Your algorithm's time complexity must be better than O(n log n), where n is the array's size."
                ],
                "testcases": [
                    {
                        "input": {
                            "nums": [
                                1,
                                1,
                                1,
                                2,
                                2,
                                3
                            ],
                            "k": 2
                        },
                        "output": [
                            1,
                            2
                        ],
                        "explanation": "The numbers 1 and 2 appear most frequently (3 and 2 times, respectively).  Since k=2, we return these two numbers."
                    },
                    {
                        "input": {
                            "nums": [
                                1
                            ],
                            "k": 1
                        },
                        "output": [
                            1
                        ],
                        "explanation": "The only element, 1, is the most frequent.  Since k=1, we return 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "word-frequency",
                "title": "Word Frequency",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "kth-largest-element-in-an-array",
                "title": "Kth Largest Element in an Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "sort-characters-by-frequency",
                "title": "Sort Characters By Frequency",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "split-array-into-consecutive-subsequences",
                "title": "Split Array into Consecutive Subsequences",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "top-k-frequent-words",
                "title": "Top K Frequent Words",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "k-closest-points-to-origin",
                "title": "K Closest Points to Origin",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "sort-features-by-popularity",
                "title": "Sort Features by Popularity",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "sender-with-largest-word-count",
                "title": "Sender With Largest Word Count",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "most-frequent-even-element",
                "title": "Most Frequent Even Element",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Bucket Sort",
                "slug": "bucket-sort"
            },
            {
                "name": "Counting",
                "slug": "counting"
            },
            {
                "name": "Quickselect",
                "slug": "quickselect"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  int num;\n  int freq;\n  T(int num, int freq) : num(num), freq(freq) {}\n};\n\nclass Solution {\n public:\n  vector<int> topKFrequent(vector<int>& nums, int k) {\n    const int n = nums.size();\n    vector<int> ans;\n    unordered_map<int, int> count;\n    auto compare = [](const T& a, const T& b) { return a.freq > b.freq; };\n    priority_queue<T, vector<T>, decltype(compare)> minHeap(compare);\n\n    for (const int num : nums)\n      ++count[num];\n\n    for (const auto& [num, freq] : count) {\n      minHeap.emplace(num, freq);\n      if (minHeap.size() > k)\n        minHeap.pop();\n    }\n\n    while (!minHeap.empty())\n      ans.push_back(minHeap.top().num), minHeap.pop();\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int num;\n  public int freq;\n  public T(int num, int freq) {\n    this.num = num;\n    this.freq = freq;\n  }\n}\n\nclass Solution {\n  public int[] topKFrequent(int[] nums, int k) {\n    final int n = nums.length;\n    int[] ans = new int[k];\n    Map<Integer, Integer> count = new HashMap<>();\n    Queue<T> minHeap = new PriorityQueue<>((a, b) -> a.freq - b.freq);\n\n    for (final int num : nums)\n      count.merge(num, 1, Integer::sum);\n\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n      final int num = entry.getKey();\n      final int freq = entry.getValue();\n      minHeap.offer(new T(num, freq));\n      if (minHeap.size() > k)\n        minHeap.poll();\n    }\n\n    for (int i = 0; i < k; ++i)\n      ans[i] = minHeap.poll().num;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}