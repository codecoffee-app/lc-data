{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3337",
            "title": "Total Characters in String After Transformations II",
            "titleSlug": "total-characters-in-string-after-transformations-ii",
            "content": "<p>You are given a string <code>s</code> consisting of lowercase English letters, an integer <code>t</code> representing the number of <strong>transformations</strong> to perform, and an array <code>nums</code> of size 26. In one <strong>transformation</strong>, every character in <code>s</code> is replaced according to the following rules:</p>\n\n<ul>\n\t<li>Replace <code>s[i]</code> with the <strong>next</strong> <code>nums[s[i] - &#39;a&#39;]</code> consecutive characters in the alphabet. For example, if <code>s[i] = &#39;a&#39;</code> and <code>nums[0] = 3</code>, the character <code>&#39;a&#39;</code> transforms into the next 3 consecutive characters ahead of it, which results in <code>&quot;bcd&quot;</code>.</li>\n\t<li>The transformation <strong>wraps</strong> around the alphabet if it exceeds <code>&#39;z&#39;</code>. For example, if <code>s[i] = &#39;y&#39;</code> and <code>nums[24] = 3</code>, the character <code>&#39;y&#39;</code> transforms into the next 3 consecutive characters ahead of it, which results in <code>&quot;zab&quot;</code>.</li>\n</ul>\n\n<p>Return the length of the resulting string after <strong>exactly</strong> <code>t</code> transformations.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abcyy&quot;, t = 2, nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>\n\t<p><strong>First Transformation (t = 1):</strong></p>\n\n\t<ul>\n\t\t<li><code>&#39;a&#39;</code> becomes <code>&#39;b&#39;</code> as <code>nums[0] == 1</code></li>\n\t\t<li><code>&#39;b&#39;</code> becomes <code>&#39;c&#39;</code> as <code>nums[1] == 1</code></li>\n\t\t<li><code>&#39;c&#39;</code> becomes <code>&#39;d&#39;</code> as <code>nums[2] == 1</code></li>\n\t\t<li><code>&#39;y&#39;</code> becomes <code>&#39;z&#39;</code> as <code>nums[24] == 1</code></li>\n\t\t<li><code>&#39;y&#39;</code> becomes <code>&#39;z&#39;</code> as <code>nums[24] == 1</code></li>\n\t\t<li>String after the first transformation: <code>&quot;bcdzz&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>\n\t<p><strong>Second Transformation (t = 2):</strong></p>\n\n\t<ul>\n\t\t<li><code>&#39;b&#39;</code> becomes <code>&#39;c&#39;</code> as <code>nums[1] == 1</code></li>\n\t\t<li><code>&#39;c&#39;</code> becomes <code>&#39;d&#39;</code> as <code>nums[2] == 1</code></li>\n\t\t<li><code>&#39;d&#39;</code> becomes <code>&#39;e&#39;</code> as <code>nums[3] == 1</code></li>\n\t\t<li><code>&#39;z&#39;</code> becomes <code>&#39;ab&#39;</code> as <code>nums[25] == 2</code></li>\n\t\t<li><code>&#39;z&#39;</code> becomes <code>&#39;ab&#39;</code> as <code>nums[25] == 2</code></li>\n\t\t<li>String after the second transformation: <code>&quot;cdeabab&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>\n\t<p><strong>Final Length of the string:</strong> The string is <code>&quot;cdeabab&quot;</code>, which has 7 characters.</p>\n\t</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;azbk&quot;, t = 1, nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">8</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>\n\t<p><strong>First Transformation (t = 1):</strong></p>\n\n\t<ul>\n\t\t<li><code>&#39;a&#39;</code> becomes <code>&#39;bc&#39;</code> as <code>nums[0] == 2</code></li>\n\t\t<li><code>&#39;z&#39;</code> becomes <code>&#39;ab&#39;</code> as <code>nums[25] == 2</code></li>\n\t\t<li><code>&#39;b&#39;</code> becomes <code>&#39;cd&#39;</code> as <code>nums[1] == 2</code></li>\n\t\t<li><code>&#39;k&#39;</code> becomes <code>&#39;lm&#39;</code> as <code>nums[10] == 2</code></li>\n\t\t<li>String after the first transformation: <code>&quot;bcabcdlm&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>\n\t<p><strong>Final Length of the string:</strong> The string is <code>&quot;bcabcdlm&quot;</code>, which has 8 characters.</p>\n\t</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n\t<li><code>1 &lt;= t &lt;= 10<sup>9</sup></code></li>\n\t<li><code><font face=\"monospace\">nums.length == 26</font></code></li>\n\t<li><code><font face=\"monospace\">1 &lt;= nums[i] &lt;= 25</font></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 23,
            "dislikes": 3,
            "similarQuestions": "[]",
            "topicTags": [],
            "stats": "{\"totalAccepted\": \"1.5K\", \"totalSubmission\": \"6.1K\", \"totalAcceptedRaw\": 1506, \"totalSubmissionRaw\": 6118, \"acRate\": \"24.6%\"}",
            "hints": [
                "Model the problem as a matrix multiplication problem.",
                "Use exponentiation to quickly multiply matrices."
            ],
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase English letters, an integer `t` representing the number of transformations to perform, and an array `nums` of size 26, determine the length of the resulting string after exactly `t` transformations.  In each transformation, every character in `s` is replaced according to the following rules:\n\n*   Replace `s[i]` with the next `nums[s[i] - 'a']` consecutive characters in the alphabet. For example, if `s[i] = 'a'` and `nums[0] = 3`, the character `'a'` transforms into the string `\"bcd\"`.\n*   If the transformation wraps around the alphabet, it should wrap around to the beginning. For example, if `s[i] = 'y'` and `nums[24] = 3`, the character `'y'` transforms into the string `\"zab\"`.\n\nReturn the length of the resulting string after exactly `t` transformations, modulo `10^9 + 7`.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists only of lowercase English letters.",
                    "1 <= t <= 10^9",
                    "nums.length == 26",
                    "1 <= nums[i] <= 25"
                ],
                "testcases": [
                    {
                        "input": {
                            "s": "abcyy",
                            "t": 2,
                            "nums": [
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                1,
                                2
                            ]
                        },
                        "output": 7,
                        "explanation": "After the first transformation (t=1): 'a' becomes 'b', 'b' becomes 'c', 'c' becomes 'd', 'y' becomes 'z', 'y' becomes 'z'.  The string is now \"bcdzz\".\nAfter the second transformation (t=2): 'b' becomes 'c', 'c' becomes 'd', 'd' becomes 'e', 'z' becomes 'ab', 'z' becomes 'ab'. The string is now \"cdeabab\". The length of the final string is 7."
                    },
                    {
                        "input": {
                            "s": "azbk",
                            "t": 1,
                            "nums": [
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2,
                                2
                            ]
                        },
                        "output": 8,
                        "explanation": "After the first transformation (t=1): 'a' becomes 'bc', 'z' becomes 'ab', 'b' becomes 'cd', 'k' becomes 'lm'. The string is now \"bcabcdlm\". The length of the final string is 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Model the problem as a matrix multiplication problem.",
            "Use exponentiation to quickly multiply matrices."
        ],
        "relatedTopics": []
    }
}