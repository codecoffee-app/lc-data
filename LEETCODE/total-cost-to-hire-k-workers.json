{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2462",
            "title": "Total Cost to Hire K Workers",
            "titleSlug": "total-cost-to-hire-k-workers",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>costs</code> where <code>costs[i]</code> is the cost of hiring the <code>i<sup>th</sup></code> worker.</p>\n\n<p>You are also given two integers <code>k</code> and <code>candidates</code>. We want to hire exactly <code>k</code> workers according to the following rules:</p>\n\n<ul>\n\t<li>You will run <code>k</code> sessions and hire exactly one worker in each session.</li>\n\t<li>In each hiring session, choose the worker with the lowest cost from either the first <code>candidates</code> workers or the last <code>candidates</code> workers. Break the tie by the smallest index.\n\t<ul>\n\t\t<li>For example, if <code>costs = [3,2,7,7,1,2]</code> and <code>candidates = 2</code>, then in the first hiring session, we will choose the <code>4<sup>th</sup></code> worker because they have the lowest cost <code>[<u>3,2</u>,7,7,<u><strong>1</strong>,2</u>]</code>.</li>\n\t\t<li>In the second hiring session, we will choose <code>1<sup>st</sup></code> worker because they have the same lowest cost as <code>4<sup>th</sup></code> worker but they have the smallest index <code>[<u>3,<strong>2</strong></u>,7,<u>7,2</u>]</code>. Please note that the indexing may be changed in the process.</li>\n\t</ul>\n\t</li>\n\t<li>If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.</li>\n\t<li>A worker can only be chosen once.</li>\n</ul>\n\n<p>Return <em>the total cost to hire exactly </em><code>k</code><em> workers.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [<u>17,12,10,2</u>,7,<u>2,11,20,8</u>]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2.\n- In the second hiring round we choose the worker from [<u>17,12,10,7</u>,<u>2,11,20,8</u>]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.\n- In the third hiring round we choose the worker from [<u>17,12,10,7,11,20,8</u>]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.\nThe total hiring cost is 11.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [1,2,4,1], k = 3, candidates = 3\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [<u>1,2,4,1</u>]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers.\n- In the second hiring round we choose the worker from [<u>2,4,1</u>]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2.\n- In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [<u>2,4</u>]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.\nThe total hiring cost is 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= costs.length &lt;= 10<sup>5 </sup></code></li>\n\t<li><code>1 &lt;= costs[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k, candidates &lt;= costs.length</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1743,
            "dislikes": 477,
            "similarQuestions": "[{\"title\": \"Meeting Rooms II\", \"titleSlug\": \"meeting-rooms-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Time to Cross a Bridge\", \"titleSlug\": \"time-to-cross-a-bridge\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"80.2K\", \"totalSubmission\": \"183.2K\", \"totalAcceptedRaw\": 80189, \"totalSubmissionRaw\": 183246, \"acRate\": \"43.8%\"}",
            "hints": [
                "Maintain two minheaps: one for the left and one for the right.",
                "Compare the top element from two heaps and remove the appropriate one.",
                "Add a new element to the heap and maintain its size as k."
            ],
            "rephrased": {
                "body": "You are given a 0-indexed integer array `costs` where `costs[i]` is the cost of hiring the `i`th worker.\n\nYou are also given two integers `k` and `candidates`. You need to hire exactly `k` workers according to the following rules:\n\n*   You will run `k` sessions and hire exactly one worker in each session.\n*   In each hiring session, select the worker with the minimum cost from either the first `candidates` workers or the last `candidates` workers. If there's a tie, choose the worker with the smallest index.\n*   If fewer than `candidates` workers remain, choose the worker with the minimum cost among them. Break ties by the smallest index.\n*   A worker can only be hired once.\n\nReturn the total cost to hire exactly `k` workers.",
                "constraints": [
                    "1 <= costs.length <= 10^5",
                    "1 <= costs[i] <= 10^5",
                    "1 <= k, candidates <= costs.length"
                ],
                "testcases": [
                    {
                        "input": "costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4",
                        "output": "11",
                        "explanation": "We need to hire 3 workers. The initial total cost is 0.\n- In the first round, consider [17,12,10,2, 2,11,20,8]. The minimum cost is 2 (index 3). Total cost becomes 0 + 2 = 2.\n- In the second round, consider [17,12,10,7, 2,11,20,8]. The minimum cost is 2 (index 4). Total cost becomes 2 + 2 = 4.\n- In the third round, consider [17,12,10,7,11,20,8]. The minimum cost is 7 (index 3). Total cost becomes 4 + 7 = 11.\nThe total hiring cost is 11."
                    },
                    {
                        "input": "costs = [1,2,4,1], k = 3, candidates = 3",
                        "output": "4",
                        "explanation": "We need to hire 3 workers. The initial total cost is 0.\n- In the first round, consider [1,2,4,1]. The minimum cost is 1 (index 0). Total cost becomes 0 + 1 = 1.\n- In the second round, consider [2,4,1]. The minimum cost is 1 (index 2). Total cost becomes 1 + 1 = 2.\n- In the third round, consider [2,4]. The minimum cost is 2 (index 0). Total cost becomes 2 + 2 = 4.\nThe total hiring cost is 4."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "meeting-rooms-ii",
                "title": "Meeting Rooms II",
                "isPaidOnly": true
            },
            {
                "difficulty": "Hard",
                "titleSlug": "time-to-cross-a-bridge",
                "title": "Time to Cross a Bridge",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Maintain two minheaps: one for the left and one for the right.",
            "Compare the top element from two heaps and remove the appropriate one.",
            "Add a new element to the heap and maintain its size as k."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ]
    }
}