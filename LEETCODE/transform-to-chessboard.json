{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "782",
            "title": "Transform to Chessboard",
            "titleSlug": "transform-to-chessboard",
            "content": "<p>You are given an <code>n x n</code> binary grid <code>board</code>. In each move, you can swap any two rows with each other, or any two columns with each other.</p>\n\n<p>Return <em>the minimum number of moves to transform the board into a <strong>chessboard board</strong></em>. If the task is impossible, return <code>-1</code>.</p>\n\n<p>A <strong>chessboard board</strong> is a board where no <code>0</code>&#39;s and no <code>1</code>&#39;s are 4-directionally adjacent.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/chessboard1-grid.jpg\" style=\"width: 500px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One potential sequence of moves is shown.\nThe first move swaps the first and second column.\nThe second move swaps the second and third row.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/chessboard2-grid.jpg\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[0,1],[1,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Also note that the board with 0 in the top left corner, is also a valid chessboard.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/chessboard3-grid.jpg\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[1,0],[1,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> No matter what sequence of moves you make, you cannot end with a valid chessboard.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 30</code></li>\n\t<li><code>board[i][j]</code> is either&nbsp;<code>0</code> or <code>1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 347,
            "dislikes": 307,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.7K\", \"totalSubmission\": \"32.7K\", \"totalAcceptedRaw\": 16714, \"totalSubmissionRaw\": 32670, \"acRate\": \"51.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "You are given an n x n binary grid 'board'. In each move, you can swap any two rows with each other, or any two columns with each other.  Determine the minimum number of moves required to transform the board into a chessboard board. A chessboard board is defined as a board where no 0s and no 1s are 4-directionally adjacent. If it is impossible to transform the board into a chessboard board, return -1.",
                "constraints": [
                    "n == board.length",
                    "n == board[i].length",
                    "2 <= n <= 30",
                    "board[i][j] is either 0 or 1."
                ],
                "testcases": [
                    {
                        "input": "[[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]",
                        "output": "2",
                        "explanation": "The board can be transformed into a chessboard with two moves. One potential sequence is to swap the first and second columns, and then swap the second and third rows."
                    },
                    {
                        "input": "[[0,1],[1,0]]",
                        "output": "0",
                        "explanation": "The given board is already a valid chessboard."
                    },
                    {
                        "input": "[[1,0],[1,0]]",
                        "output": "-1",
                        "explanation": "It is impossible to transform the given board into a valid chessboard, regardless of the moves made."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int movesToChessboard(vector<vector<int>>& board) {\n    const int n = board.size();\n    int rowSum = 0;\n    int colSum = 0;\n    int rowSwaps = 0;\n    int colSwaps = 0;\n\n    for (int i = 0; i < n; ++i)\n      for (int j = 0; j < n; ++j)\n        if (board[0][0] ^ board[i][0] ^ board[0][j] ^ board[i][j] == 1)\n          return -1;\n\n    for (int i = 0; i < n; ++i) {\n      rowSum += board[0][i];\n      colSum += board[i][0];\n    }\n\n    if (rowSum != n / 2 && rowSum != (n + 1) / 2)\n      return -1;\n    if (colSum != n / 2 && colSum != (n + 1) / 2)\n      return -1;\n\n    for (int i = 0; i < n; ++i) {\n      rowSwaps += board[i][0] == (i & 1);\n      colSwaps += board[0][i] == (i & 1);\n    }\n\n    if (n & 1) {\n      if (rowSwaps & 1)\n        rowSwaps = n - rowSwaps;\n      if (colSwaps & 1)\n        colSwaps = n - colSwaps;\n    } else {\n      rowSwaps = min(rowSwaps, n - rowSwaps);\n      colSwaps = min(colSwaps, n - colSwaps);\n    }\n\n    return (rowSwaps + colSwaps) / 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int movesToChessboard(int[][] board) {\n    final int n = board.length;\n    int rowSum = 0;\n    int colSum = 0;\n    int rowSwaps = 0;\n    int colSwaps = 0;\n\n    for (int i = 0; i < n; ++i)\n      for (int j = 0; j < n; ++j)\n        if ((board[0][0] ^ board[i][0] ^ board[0][j] ^ board[i][j]) == 1)\n          return -1;\n\n    for (int i = 0; i < n; ++i) {\n      rowSum += board[0][i];\n      colSum += board[i][0];\n    }\n\n    if (rowSum != n / 2 && rowSum != (n + 1) / 2)\n      return -1;\n    if (colSum != n / 2 && colSum != (n + 1) / 2)\n      return -1;\n\n    for (int i = 0; i < n; ++i) {\n      if (board[i][0] == (i & 1))\n        ++rowSwaps;\n      if (board[0][i] == (i & 1))\n        ++colSwaps;\n    }\n\n    if (n % 2 == 1) {\n      if (rowSwaps % 2 == 1)\n        rowSwaps = n - rowSwaps;\n      if (colSwaps % 2 == 1)\n        colSwaps = n - colSwaps;\n    } else {\n      rowSwaps = Math.min(rowSwaps, n - rowSwaps);\n      colSwaps = Math.min(colSwaps, n - colSwaps);\n    }\n\n    return (rowSwaps + colSwaps) / 2;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def movesToChessboard(self, board: List[List[int]]) -> int:\n    n = len(board)\n\n    if any(board[0][0] ^ board[i][0] ^ board[0][j] ^ board[i][j] for i in range(n) for j in range(n)):\n      return -1\n\n    rowSum = sum(board[0])\n    colSum = sum(board[i][0] for i in range(n))\n\n    if rowSum != n // 2 and rowSum != (n + 1) // 2:\n      return -1\n    if colSum != n // 2 and colSum != (n + 1) // 2:\n      return -1\n\n    rowSwaps = sum(board[i][0] == (i & 1) for i in range(n))\n    colSwaps = sum(board[0][i] == (i & 1) for i in range(n))\n\n    if n & 1:\n      if rowSwaps & 1:\n        rowSwaps = n - rowSwaps\n      if colSwaps & 1:\n        colSwaps = n - colSwaps\n    else:\n      rowSwaps = min(rowSwaps, n - rowSwaps)\n      colSwaps = min(colSwaps, n - colSwaps)\n\n    return (rowSwaps + colSwaps) // 2\n",
                "lang_text": "py"
            }
        }
    }
}