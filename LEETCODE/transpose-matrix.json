{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "867",
            "title": "Transpose Matrix",
            "titleSlug": "transpose-matrix",
            "content": "<p>Given a 2D integer array <code>matrix</code>, return <em>the <strong>transpose</strong> of</em> <code>matrix</code>.</p>\n\n<p>The <strong>transpose</strong> of a matrix is the matrix flipped over its main diagonal, switching the matrix&#39;s row and column indices.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/10/hint_transpose.png\" style=\"width: 600px; height: 197px;\" /></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [[1,4,7],[2,5,8],[3,6,9]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6]]\n<strong>Output:</strong> [[1,4],[2,5],[3,6]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3613,
            "dislikes": 441,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"365.3K\", \"totalSubmission\": \"517.2K\", \"totalAcceptedRaw\": 365258, \"totalSubmissionRaw\": 517218, \"acRate\": \"70.6%\"}",
            "hints": [
                "We don't need any special algorithms to do this. You just need to know what the transpose of a matrix looks like. Rows become columns and vice versa!"
            ],
            "rephrased": {
                "body": "Given a 2D integer array `matrix`, return the transpose of the `matrix`. The transpose of a matrix is obtained by flipping it over its main diagonal, effectively swapping the row and column indices.  In other words, the element at `matrix[i][j]` becomes `matrix[j][i]` in the transposed matrix.",
                "constraints": [
                    "m == matrix.length",
                    "n == matrix[i].length",
                    "1 <= m, n <= 1000",
                    "1 <= m * n <= 10^5",
                    "-10^9 <= matrix[i][j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[[1,2,3],[4,5,6],[7,8,9]]",
                        "output": "[[1,4,7],[2,5,8],[3,6,9]]",
                        "explanation": null
                    },
                    {
                        "input": "[[1,2,3],[4,5,6]]",
                        "output": "[[1,4],[2,5],[3,6]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "We don't need any special algorithms to do this. You just need to know what the transpose of a matrix looks like. Rows become columns and vice versa!"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> transpose(vector<vector<int>>& A) {\n    vector<vector<int>> ans(A[0].size(), vector<int>(A.size()));\n\n    for (int i = 0; i < A.size(); ++i)\n      for (int j = 0; j < A[0].size(); ++j)\n        ans[j][i] = A[i][j];\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] transpose(int[][] A) {\n    int[][] ans = new int[A[0].length][A.length];\n\n    for (int i = 0; i < A.length; ++i)\n      for (int j = 0; j < A[0].length; ++j)\n        ans[j][i] = A[i][j];\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def transpose(self, A: List[List[int]]) -> List[List[int]]:\n    ans = [[0] * len(A) for _ in range(len(A[0]))]\n\n    for i in range(len(A)):\n      for j in range(len(A[0])):\n        ans[j][i] = A[i][j]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}