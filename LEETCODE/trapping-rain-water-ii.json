{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "407",
            "title": "Trapping Rain Water II",
            "titleSlug": "trapping-rain-water-ii",
            "content": "<p>Given an <code>m x n</code> integer matrix <code>heightMap</code> representing the height of each unit cell in a 2D elevation map, return <em>the volume of water it can trap after raining</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/trap1-3d.jpg\" style=\"width: 361px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/trap2-3d.jpg\" style=\"width: 401px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\n<strong>Output:</strong> 10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == heightMap.length</code></li>\n\t<li><code>n == heightMap[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= heightMap[i][j] &lt;= 2 * 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3656,
            "dislikes": 89,
            "similarQuestions": "[{\"title\": \"Trapping Rain Water\", \"titleSlug\": \"trapping-rain-water\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Points From Grid Queries\", \"titleSlug\": \"maximum-number-of-points-from-grid-queries\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"84.4K\", \"totalSubmission\": \"176.8K\", \"totalAcceptedRaw\": 84402, \"totalSubmissionRaw\": 176835, \"acRate\": \"47.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an `m x n` integer matrix `heightMap` representing the height of each unit cell in a 2D elevation map, determine the total volume of water that can be trapped within the elevation map after rainfall.",
                "constraints": [
                    "m == heightMap.length",
                    "n == heightMap[i].length",
                    "1 <= m, n <= 200",
                    "0 <= heightMap[i][j] <= 2 * 10^4"
                ],
                "testcases": [
                    {
                        "input": "[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]",
                        "output": "4",
                        "explanation": "After rainfall, water accumulates in depressions within the heightmap. The total volume of trapped water is 4 units, formed by two ponds of sizes 1 and 3."
                    },
                    {
                        "input": "[[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]",
                        "output": "10",
                        "explanation": "After the rain, the elevation map holds 10 units of water in the central depression."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "trapping-rain-water",
                "title": "Trapping Rain Water",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-points-from-grid-queries",
                "title": "Maximum Number of Points From Grid Queries",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct T {\n  int i;\n  int j;\n  int h;  // heightMap[i][j] or the height after filling water\n  T(int i, int j, int h) : i(i), j(j), h(h) {}\n};\n\nclass Solution {\n public:\n  int trapRainWater(vector<vector<int>>& heightMap) {\n    const int m = heightMap.size();\n    const int n = heightMap[0].size();\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    int ans = 0;\n    auto compare = [](const T& a, const T& b) { return a.h > b.h; };\n    priority_queue<T, vector<T>, decltype(compare)> minHeap(compare);\n    vector<vector<bool>> seen(m, vector<bool>(n));\n\n    for (int i = 0; i < m; ++i) {\n      minHeap.emplace(i, 0, heightMap[i][0]);\n      minHeap.emplace(i, n - 1, heightMap[i][n - 1]);\n      seen[i][0] = true;\n      seen[i][n - 1] = true;\n    }\n\n    for (int j = 1; j < n - 1; ++j) {\n      minHeap.emplace(0, j, heightMap[0][j]);\n      minHeap.emplace(m - 1, j, heightMap[m - 1][j]);\n      seen[0][j] = true;\n      seen[m - 1][j] = true;\n    }\n\n    while (!minHeap.empty()) {\n      const auto [i, j, h] = minHeap.top();\n      minHeap.pop();\n      for (int k = 0; k < 4; ++k) {\n        const int x = i + dirs[k];\n        const int y = j + dirs[k + 1];\n        if (x < 0 || x == m || y < 0 || y == n)\n          continue;\n        if (seen[x][y])\n          continue;\n        if (heightMap[x][y] < h) {\n          ans += h - heightMap[x][y];\n          minHeap.emplace(x, y, h);  // Fill the water on grid[x][y]\n        } else {\n          minHeap.emplace(x, y, heightMap[x][y]);\n        }\n        seen[x][y] = true;\n      }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class T {\n  public int i;\n  public int j;\n  public int h; // heightMap[i][j] or the height after filling water\n  public T(int i, int j, int h) {\n    this.i = i;\n    this.j = j;\n    this.h = h;\n  }\n}\n\nclass Solution {\n  public int trapRainWater(int[][] heightMap) {\n    final int m = heightMap.length;\n    final int n = heightMap[0].length;\n    final int[] dirs = {0, 1, 0, -1, 0};\n    int ans = 0;\n    Queue<T> minHeap = new PriorityQueue<>((a, b) -> a.h - b.h);\n    boolean[][] seen = new boolean[m][n];\n\n    for (int i = 0; i < m; ++i) {\n      minHeap.offer(new T(i, 0, heightMap[i][0]));\n      minHeap.offer(new T(i, n - 1, heightMap[i][n - 1]));\n      seen[i][0] = true;\n      seen[i][n - 1] = true;\n    }\n\n    for (int j = 1; j < n - 1; ++j) {\n      minHeap.offer(new T(0, j, heightMap[0][j]));\n      minHeap.offer(new T(m - 1, j, heightMap[m - 1][j]));\n      seen[0][j] = true;\n      seen[m - 1][j] = true;\n    }\n\n    while (!minHeap.isEmpty()) {\n      final int i = minHeap.peek().i;\n      final int j = minHeap.peek().j;\n      final int h = minHeap.poll().h;\n      for (int k = 0; k < 4; ++k) {\n        final int x = i + dirs[k];\n        final int y = j + dirs[k + 1];\n        if (x < 0 || x == m || y < 0 || y == n)\n          continue;\n        if (seen[x][y])\n          continue;\n        if (heightMap[x][y] < h) {\n          ans += h - heightMap[x][y];\n          minHeap.offer(new T(x, y, h)); // Fill the water on grid[x][y]\n        } else {\n          minHeap.offer(new T(x, y, heightMap[x][y]));\n        }\n        seen[x][y] = true;\n      }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}