{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1766",
            "title": "Tree of Coprimes",
            "titleSlug": "tree-of-coprimes",
            "content": "<p>There is a tree (i.e.,&nbsp;a connected, undirected graph that has no cycles) consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> and exactly <code>n - 1</code> edges. Each node has a value associated with it, and the <strong>root</strong> of the tree is node <code>0</code>.</p>\n\n<p>To represent this tree, you are given an integer array <code>nums</code> and a 2D array <code>edges</code>. Each <code>nums[i]</code> represents the <code>i<sup>th</sup></code> node&#39;s value, and each <code>edges[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> represents an edge between nodes <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> in the tree.</p>\n\n<p>Two values <code>x</code> and <code>y</code> are <strong>coprime</strong> if <code>gcd(x, y) == 1</code> where <code>gcd(x, y)</code> is the <strong>greatest common divisor</strong> of <code>x</code> and <code>y</code>.</p>\n\n<p>An ancestor of a node <code>i</code> is any other node on the shortest path from node <code>i</code> to the <strong>root</strong>. A node is <strong>not </strong>considered an ancestor of itself.</p>\n\n<p>Return <em>an array </em><code>ans</code><em> of size </em><code>n</code>, <em>where </em><code>ans[i]</code><em> is the closest ancestor to node </em><code>i</code><em> such that </em><code>nums[i]</code> <em>and </em><code>nums[ans[i]]</code> are <strong>coprime</strong>, or <code>-1</code><em> if there is no such ancestor</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/06/untitled-diagram.png\" style=\"width: 191px; height: 281px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]\n<strong>Output:</strong> [-1,0,0,1]\n<strong>Explanation:</strong> In the above figure, each node&#39;s value is in parentheses.\n- Node 0 has no coprime ancestors.\n- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).\n- Node 2 has two ancestors, nodes 1 and 0. Node 1&#39;s value is not coprime (gcd(3,3) == 3), but node 0&#39;s\n  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.\n- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its\n  closest valid ancestor.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/06/untitled-diagram1.png\" style=\"width: 441px; height: 291px;\" /></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\n<strong>Output:</strong> [-1,0,-1,0,0,0,-1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length == n</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[j].length == 2</code></li>\n\t<li><code>0 &lt;= u<sub>j</sub>, v<sub>j</sub> &lt; n</code></li>\n\t<li><code>u<sub>j</sub> != v<sub>j</sub></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 386,
            "dislikes": 30,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.6K\", \"totalSubmission\": \"21.6K\", \"totalAcceptedRaw\": 8646, \"totalSubmissionRaw\": 21583, \"acRate\": \"40.1%\"}",
            "hints": [
                "Note that for a node, it's not optimal to consider two nodes with the same value.",
                "Note that the values are small enough for you to iterate over them instead of iterating over the parent nodes."
            ],
            "rephrased": {
                "body": "Given a tree with `n` nodes (numbered 0 to n-1) and `n-1` edges, where each node has a value. Find, for each node `i`, the closest ancestor `j` such that `gcd(nums[i], nums[j]) == 1`. Return an array `ans` where `ans[i]` is the closest coprime ancestor of node `i`, or -1 if no such ancestor exists. The tree is represented by an array `nums` (node values) and a 2D array `edges` (edges between nodes).",
                "constraints": [
                    "nums.length == n",
                    "1 <= nums[i] <= 50",
                    "1 <= n <= 10^5",
                    "edges.length == n - 1",
                    "edges[j].length == 2",
                    "0 <= u_j, v_j < n",
                    "u_j != v_j"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]",
                        "output": "[-1,0,0,1]",
                        "explanation": "Node 0 has no coprime ancestors.\nNode 1's only ancestor is 0. gcd(2,3) == 1, so 0 is the answer.\nNode 2's ancestors are 1 and 0. gcd(3,3) != 1, gcd(3,2) == 1, so 0 is the answer.\nNode 3's ancestors are 1 and 0. gcd(3,2) == 1, so 1 is the answer."
                    },
                    {
                        "input": "nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
                        "output": "[-1,0,-1,0,0,0,-1]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Note that for a node, it's not optimal to consider two nodes with the same value.",
            "Note that the values are small enough for you to iterate over them instead of iterating over the parent nodes."
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> getCoprimes(vector<int>& nums, vector<vector<int>>& edges) {\n    vector<int> ans(nums.size(), -1);\n    vector<vector<int>> tree(nums.size());\n    // stacks[i] := (node, depth)s of nodes with value i\n    vector<stack<pair<int, int>>> stacks(kMax + 1);\n\n    for (const vector<int> edge : edges) {\n      const int u = edge[0];\n      const int v = edge[1];\n      tree[u].push_back(v);\n      tree[v].push_back(u);\n    }\n\n    dfs(tree, 0, /*prev=*/-1, /*depth=*/0, nums, stacks, ans);\n    return ans;\n  }\n\n private:\n  static constexpr int kMax = 50;\n\n  void dfs(const vector<vector<int>>& tree, int u, int prev, int depth,\n           const vector<int>& nums, vector<stack<pair<int, int>>>& stacks,\n           vector<int>& ans) {\n    ans[u] = getAncestor(u, stacks, nums);\n    stacks[nums[u]].push({u, depth});\n\n    for (const int v : tree[u])\n      if (prev != v)\n        dfs(tree, v, u, depth + 1, nums, stacks, ans);\n\n    stacks[nums[u]].pop();\n  }\n\n  int getAncestor(int u, const vector<stack<pair<int, int>>>& stacks,\n                  const vector<int>& nums) {\n    int maxNode = -1;\n    int maxDepth = -1;\n    for (int i = 1; i <= kMax; ++i)\n      if (!stacks[i].empty() && stacks[i].top().second > maxDepth &&\n          __gcd(nums[u], i) == 1) {\n        maxNode = stacks[i].top().first;\n        maxDepth = stacks[i].top().second;\n      }\n    return maxNode;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] getCoprimes(int[] nums, int[][] edges) {\n    int[] ans = new int[nums.length];\n    Arrays.fill(ans, -1);\n    List<Integer>[] tree = new List[nums.length];\n    // stacks[i] := (node, depth)s of nodes with value i\n    Deque<Pair<Integer, Integer>>[] stacks = new Deque[kMax + 1];\n\n    for (int i = 0; i < nums.length; ++i)\n      tree[i] = new ArrayList<>();\n\n    for (int i = 1; i <= kMax; ++i)\n      stacks[i] = new ArrayDeque<>();\n\n    for (int[] edge : edges) {\n      final int u = edge[0];\n      final int v = edge[1];\n      tree[u].add(v);\n      tree[v].add(u);\n    }\n\n    dfs(tree, 0, /*prev=*/-1, /*depth=*/0, nums, stacks, ans);\n    return ans;\n  }\n\n  private static final int kMax = 50;\n\n  private void dfs(List<Integer>[] tree, int u, int prev, int depth, int[] nums,\n                   Deque<Pair<Integer, Integer>>[] stacks, int[] ans) {\n    ans[u] = getAncestor(u, stacks, nums);\n    stacks[nums[u]].push(new Pair<>(u, depth));\n\n    for (final int v : tree[u])\n      if (prev != v)\n        dfs(tree, v, u, depth + 1, nums, stacks, ans);\n\n    stacks[nums[u]].pop();\n  }\n\n  private int getAncestor(int u, Deque<Pair<Integer, Integer>>[] stacks, int[] nums) {\n    int maxNode = -1;\n    int maxDepth = -1;\n    for (int i = 1; i <= kMax; ++i)\n      if (!stacks[i].isEmpty() && stacks[i].peek().getValue() > maxDepth && gcd(nums[u], i) == 1) {\n        maxNode = stacks[i].peek().getKey();\n        maxDepth = stacks[i].peek().getValue();\n      }\n    return maxNode;\n  }\n\n  private int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def getCoprimes(self, nums: List[int], edges: List[List[int]]) -> List[int]:\n    kMax = 50\n    ans = [-1] * len(nums)\n    tree = [[] for _ in range(len(nums))]\n    # stacks[i] := (node, depth)s of nodes with value i\n    stacks = [[] for _ in range(kMax + 1)]\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    def getAncestor(u: int) -> int:\n      maxNode = -1\n      maxDepth = -1\n      for i, stack in enumerate(stacks):\n        if stack and stack[-1][1] > maxDepth and math.gcd(nums[u], i) == 1:\n          maxNode, maxDepth = stack[-1]\n      return maxNode\n\n    def dfs(u: int, prev: int, depth: int) -> int:\n      ans[u] = getAncestor(u)\n      stacks[nums[u]].append((u, depth))\n\n      for v in tree[u]:\n        if prev != v:\n          dfs(v, u, depth + 1)\n\n      stacks[nums[u]].pop()\n\n    dfs(0, -1, 0)\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}