{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "120",
            "title": "Triangle",
            "titleSlug": "triangle",
            "content": "<p>Given a <code>triangle</code> array, return <em>the minimum path sum from top to bottom</em>.</p>\n\n<p>For each step, you may move to an adjacent number of the row below. More formally, if you are on index <code>i</code> on the current row, you may move to either index <code>i</code> or index <code>i + 1</code> on the next row.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The triangle looks like:\n   <u>2</u>\n  <u>3</u> 4\n 6 <u>5</u> 7\n4 <u>1</u> 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> triangle = [[-10]]\n<strong>Output:</strong> -10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= triangle.length &lt;= 200</code></li>\n\t<li><code>triangle[0].length == 1</code></li>\n\t<li><code>triangle[i].length == triangle[i - 1].length + 1</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= triangle[i][j] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you&nbsp;do this using only <code>O(n)</code> extra space, where <code>n</code> is the total number of rows in the triangle?",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9158,
            "dislikes": 526,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"689.5K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 689506, \"totalSubmissionRaw\": 1232397, \"acRate\": \"55.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a triangle represented as a nested array, find the minimum path sum from the top to the bottom.  At each step, you can move to an adjacent number in the row below.  Specifically, if you are at index `i` in the current row, you can move to either index `i` or `i + 1` in the next row.",
                "constraints": [
                    "1 <= triangle.length <= 200",
                    "triangle[0].length == 1",
                    "triangle[i].length == triangle[i - 1].length + 1",
                    "-10<sup>4</sup> <= triangle[i][j] <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "[[2],[3,4],[6,5,7],[4,1,8,3]]",
                        "output": "11",
                        "explanation": "The minimum path is 2 -> 3 -> 5 -> 1, which sums to 11."
                    },
                    {
                        "input": "[[-10]]",
                        "output": "-10",
                        "explanation": "The triangle only contains one element, so the minimum path sum is -10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int minimumTotal(vector<vector<int>>& triangle) {\n    for (int i = triangle.size() - 2; i >= 0; --i)\n      for (int j = 0; j <= i; ++j)\n        triangle[i][j] += min(triangle[i + 1][j], triangle[i + 1][j + 1]);\n    return triangle[0][0];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int minimumTotal(List<List<Integer>> triangle) {\n    for (int i = triangle.size() - 2; i >= 0; --i)\n      for (int j = 0; j <= i; ++j)\n        triangle.get(i).set(j, triangle.get(i).get(j) + Math.min(triangle.get(i + 1).get(j),\n                                                                 triangle.get(i + 1).get(j + 1)));\n    return triangle.get(0).get(0);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def minimumTotal(self, triangle: List[List[int]]) -> int:\n    for i in reversed(range(len(triangle) - 1)):\n      for j in range(i + 1):\n        triangle[i][j] += min(triangle[i + 1][j],\n                              triangle[i + 1][j + 1])\n\n    return triangle[0][0]\n",
                "lang_text": "py"
            }
        }
    }
}