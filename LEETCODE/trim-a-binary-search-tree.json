{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "669",
            "title": "Trim a Binary Search Tree",
            "titleSlug": "trim-a-binary-search-tree",
            "content": "<p>Given the <code>root</code> of a binary search tree and the lowest and highest boundaries as <code>low</code> and <code>high</code>, trim the tree so that all its elements lies in <code>[low, high]</code>. Trimming the tree should <strong>not</strong> change the relative structure of the elements that will remain in the tree (i.e., any node&#39;s descendant should remain a descendant). It can be proven that there is a <strong>unique answer</strong>.</p>\n\n<p>Return <em>the root of the trimmed binary search tree</em>. Note that the root may change depending on the given bounds.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg\" style=\"width: 450px; height: 126px;\" />\n<pre>\n<strong>Input:</strong> root = [1,0,2], low = 1, high = 2\n<strong>Output:</strong> [1,null,2]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg\" style=\"width: 450px; height: 277px;\" />\n<pre>\n<strong>Input:</strong> root = [3,0,4,null,2,null,null,1], low = 1, high = 3\n<strong>Output:</strong> [3,2,null,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The value of each node in the tree is <strong>unique</strong>.</li>\n\t<li><code>root</code> is guaranteed to be a valid binary search tree.</li>\n\t<li><code>0 &lt;= low &lt;= high &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5679,
            "dislikes": 251,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"282.1K\", \"totalSubmission\": \"425.7K\", \"totalAcceptedRaw\": 282126, \"totalSubmissionRaw\": 425672, \"acRate\": \"66.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary search tree and the lower and upper boundaries, `low` and `high`, trim the tree so that all its node values fall within the inclusive range `[low, high]`.  Trimming should preserve the relative structure of the remaining elements. Return the root of the trimmed binary search tree. The root node may change after trimming.",
                "constraints": [
                    "The number of nodes in the tree is in the range `[1, 10<sup>4</sup>]`.",
                    "`0 <= Node.val <= 10<sup>4</sup>`",
                    "The value of each node in the tree is unique.",
                    "`root` is guaranteed to be a valid binary search tree.",
                    "`0 <= low <= high <= 10<sup>4</sup>`"
                ],
                "testcases": [
                    {
                        "input": "root = [1,0,2], low = 1, high = 2",
                        "output": "[1,null,2]",
                        "explanation": "The nodes with values outside the range [1, 2] are removed. The node with value 0 is removed. The structure [1, null, 2] remains, with node 1 as the root."
                    },
                    {
                        "input": "root = [3,0,4,null,2,null,null,1], low = 1, high = 3",
                        "output": "[3,2,null,1]",
                        "explanation": "The nodes with values outside the range [1, 3] are removed. The node with value 0 and 4 are removed. The remaining nodes are [1,2,3] and the tree needs to be re-arranged to still satisfy BST properties. The resulting tree is [3,2,null,1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  TreeNode* trimBST(TreeNode* root, int L, int R) {\n    if (root == nullptr)\n      return nullptr;\n    if (root->val < L)\n      return trimBST(root->right, L, R);\n    if (root->val > R)\n      return trimBST(root->left, L, R);\n    root->left = trimBST(root->left, L, R);\n    root->right = trimBST(root->right, L, R);\n    return root;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public TreeNode trimBST(TreeNode root, int low, int high) {\n    if (root == null)\n      return null;\n    if (root.val < low)\n      return trimBST(root.right, low, high);\n    if (root.val > high)\n      return trimBST(root.left, low, high);\n    root.left = trimBST(root.left, low, high);\n    root.right = trimBST(root.right, low, high);\n    return root;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}