{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "982",
            "title": "Triples with Bitwise AND Equal To Zero",
            "titleSlug": "triples-with-bitwise-and-equal-to-zero",
            "content": "<p>Given an integer array nums, return <em>the number of <strong>AND triples</strong></em>.</p>\n\n<p>An <strong>AND triple</strong> is a triple of indices <code>(i, j, k)</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; nums.length</code></li>\n\t<li><code>0 &lt;= j &lt; nums.length</code></li>\n\t<li><code>0 &lt;= k &lt; nums.length</code></li>\n\t<li><code>nums[i] &amp; nums[j] &amp; nums[k] == 0</code>, where <code>&amp;</code> represents the bitwise-AND operator.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,3]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 &amp; 2 &amp; 1\n(i=0, j=1, k=0) : 2 &amp; 1 &amp; 2\n(i=0, j=1, k=1) : 2 &amp; 1 &amp; 1\n(i=0, j=1, k=2) : 2 &amp; 1 &amp; 3\n(i=0, j=2, k=1) : 2 &amp; 3 &amp; 1\n(i=1, j=0, k=0) : 1 &amp; 2 &amp; 2\n(i=1, j=0, k=1) : 1 &amp; 2 &amp; 1\n(i=1, j=0, k=2) : 1 &amp; 2 &amp; 3\n(i=1, j=1, k=0) : 1 &amp; 1 &amp; 2\n(i=1, j=2, k=0) : 1 &amp; 3 &amp; 2\n(i=2, j=0, k=1) : 3 &amp; 2 &amp; 1\n(i=2, j=1, k=0) : 3 &amp; 1 &amp; 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0]\n<strong>Output:</strong> 27\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt; 2<sup>16</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 419,
            "dislikes": 214,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Bit Manipulation",
                    "slug": "bit-manipulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.6K\", \"totalSubmission\": \"28.6K\", \"totalAcceptedRaw\": 16598, \"totalSubmissionRaw\": 28645, \"acRate\": \"57.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer array `nums`, determine the number of AND triples. An AND triple is defined as a set of three indices (i, j, k) such that 0 <= i, j, k < nums.length and the bitwise AND of `nums[i]`, `nums[j]`, and `nums[k]` is equal to 0.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "0 <= nums[i] < 2<sup>16</sup>"
                ],
                "testcases": [
                    {
                        "input": "[2,1,3]",
                        "output": "12",
                        "explanation": "The 12 AND triples are formed by the following index combinations where (nums[i] & nums[j] & nums[k] == 0): (0,0,1), (0,1,0), (0,1,1), (0,1,2), (0,2,1), (1,0,0), (1,0,1), (1,0,2), (1,1,0), (1,2,0), (2,0,1), (2,1,0)."
                    },
                    {
                        "input": "[0,0,0]",
                        "output": "27",
                        "explanation": "Since all elements in the array are 0, any combination of indices will result in a bitwise AND of 0. With 3 elements and 3 indices, there are 3 * 3 * 3 = 27 possible combinations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countTriplets(vector<int>& nums) {\n    constexpr int kMax = 1 << 16;\n    int ans = 0;\n    vector<int> count(kMax);  // {nums[i] & nums[j]: times}\n\n    for (const int a : nums)\n      for (const int b : nums)\n        ++count[a & b];\n\n    for (const int num : nums)\n      for (int i = 0; i < kMax; ++i)\n        if ((num & i) == 0)\n          ans += count[i];\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countTriplets(int[] nums) {\n    final int kMax = 1 << 16;\n    int ans = 0;\n    int[] count = new int[kMax]; // {nums[i] & nums[j]: times}\n\n    for (final int a : nums)\n      for (final int b : nums)\n        ++count[a & b];\n\n    for (final int num : nums)\n      for (int i = 0; i < kMax; ++i)\n        if ((num & i) == 0)\n          ans += count[i];\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countTriplets(self, nums: List[int]) -> int:\n    kMax = 1 << 16\n    ans = 0\n    count = [0] * kMax  # {nums[i] & nums[j]: times}\n\n    for a in nums:\n      for b in nums:\n        count[a & b] += 1\n\n    for num in nums:\n      for i in range(kMax):\n        if (num & i) == 0:\n          ans += count[i]\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}