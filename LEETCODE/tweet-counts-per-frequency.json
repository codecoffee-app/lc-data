{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1348",
            "title": "Tweet Counts Per Frequency",
            "titleSlug": "tweet-counts-per-frequency",
            "content": "<p>A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller <strong>time chunks</strong> based on a certain frequency (every <strong>minute</strong>, <strong>hour</strong>, or <strong>day</strong>).</p>\n\n<p>For example, the period <code>[10, 10000]</code> (in <strong>seconds</strong>) would be partitioned into the following <strong>time chunks</strong> with these frequencies:</p>\n\n<ul>\n\t<li>Every <strong>minute</strong> (60-second chunks): <code>[10,69]</code>, <code>[70,129]</code>, <code>[130,189]</code>, <code>...</code>, <code>[9970,10000]</code></li>\n\t<li>Every <strong>hour</strong> (3600-second chunks): <code>[10,3609]</code>, <code>[3610,7209]</code>, <code>[7210,10000]</code></li>\n\t<li>Every <strong>day</strong> (86400-second chunks): <code>[10,10000]</code></li>\n</ul>\n\n<p>Notice that the last chunk may be shorter than the specified frequency&#39;s chunk size and will always end with the end time of the period (<code>10000</code> in the above example).</p>\n\n<p>Design and implement an API to help the company with their analysis.</p>\n\n<p>Implement the <code>TweetCounts</code> class:</p>\n\n<ul>\n\t<li><code>TweetCounts()</code> Initializes the <code>TweetCounts</code> object.</li>\n\t<li><code>void recordTweet(String tweetName, int time)</code> Stores the <code>tweetName</code> at the recorded <code>time</code> (in <strong>seconds</strong>).</li>\n\t<li><code>List&lt;Integer&gt; getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)</code> Returns a list of integers representing the number of tweets with <code>tweetName</code> in each <strong>time chunk</strong> for the given period of time <code>[startTime, endTime]</code> (in <strong>seconds</strong>) and frequency <code>freq</code>.\n\t<ul>\n\t\t<li><code>freq</code> is one of <code>&quot;minute&quot;</code>, <code>&quot;hour&quot;</code>, or <code>&quot;day&quot;</code> representing a frequency of every <strong>minute</strong>, <strong>hour</strong>, or <strong>day</strong> respectively.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;TweetCounts&quot;,&quot;recordTweet&quot;,&quot;recordTweet&quot;,&quot;recordTweet&quot;,&quot;getTweetCountsPerFrequency&quot;,&quot;getTweetCountsPerFrequency&quot;,&quot;recordTweet&quot;,&quot;getTweetCountsPerFrequency&quot;]\n[[],[&quot;tweet3&quot;,0],[&quot;tweet3&quot;,60],[&quot;tweet3&quot;,10],[&quot;minute&quot;,&quot;tweet3&quot;,0,59],[&quot;minute&quot;,&quot;tweet3&quot;,0,60],[&quot;tweet3&quot;,120],[&quot;hour&quot;,&quot;tweet3&quot;,0,210]]\n\n<strong>Output</strong>\n[null,null,null,null,[2],[2,1],null,[4]]\n\n<strong>Explanation</strong>\nTweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet(&quot;tweet3&quot;, 0);                              // New tweet &quot;tweet3&quot; at time 0\ntweetCounts.recordTweet(&quot;tweet3&quot;, 60);                             // New tweet &quot;tweet3&quot; at time 60\ntweetCounts.recordTweet(&quot;tweet3&quot;, 10);                             // New tweet &quot;tweet3&quot; at time 10\ntweetCounts.getTweetCountsPerFrequency(&quot;minute&quot;, &quot;tweet3&quot;, 0, 59); // return [2]; chunk [0,59] had 2 tweets\ntweetCounts.getTweetCountsPerFrequency(&quot;minute&quot;, &quot;tweet3&quot;, 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet\ntweetCounts.recordTweet(&quot;tweet3&quot;, 120);                            // New tweet &quot;tweet3&quot; at time 120\ntweetCounts.getTweetCountsPerFrequency(&quot;hour&quot;, &quot;tweet3&quot;, 0, 210);  // return [4]; chunk [0,210] had 4 tweets\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= time, startTime, endTime &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= endTime - startTime &lt;= 10<sup>4</sup></code></li>\n\t<li>There will be at most <code>10<sup>4</sup></code> calls <strong>in total</strong> to <code>recordTweet</code> and <code>getTweetCountsPerFrequency</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 180,
            "dislikes": 283,
            "similarQuestions": "[{\"title\": \"Design Video Sharing Platform\", \"titleSlug\": \"design-video-sharing-platform\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Ordered Set",
                    "slug": "ordered-set"
                }
            ],
            "stats": "{\"totalAccepted\": \"31.7K\", \"totalSubmission\": \"71.6K\", \"totalAcceptedRaw\": 31679, \"totalSubmissionRaw\": 71592, \"acRate\": \"44.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Design an API for a social media company to monitor tweet activity. The API should allow recording tweets and retrieving tweet counts within specified time periods, partitioned into time chunks based on a given frequency (minute, hour, or day).",
                "constraints": [
                    "0 <= time, startTime, endTime <= 10^9",
                    "0 <= endTime - startTime <= 10^4",
                    "There will be at most 10^4 calls in total to recordTweet and getTweetCountsPerFrequency."
                ],
                "testcases": [
                    {
                        "input": "[\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]\n[[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]",
                        "output": "[null,null,null,null,[2],[2,1],null,[4]]",
                        "explanation": "TweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet(\"tweet3\", 0);  // New tweet \"tweet3\" at time 0\ntweetCounts.recordTweet(\"tweet3\", 60); // New tweet \"tweet3\" at time 60\ntweetCounts.recordTweet(\"tweet3\", 10); // New tweet \"tweet3\" at time 10\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); // return [2]; chunk [0,59] had 2 tweets\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet\ntweetCounts.recordTweet(\"tweet3\", 120); // New tweet \"tweet3\" at time 120\ntweetCounts.getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210); // return [4]; chunk [0,210] had 4 tweets"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "design-video-sharing-platform",
                "title": "Design Video Sharing Platform",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class TweetCounts {\n public:\n  void recordTweet(string tweetName, int time) {\n    ++tweetNameToTimeCount[tweetName][time];\n  }\n\n  vector<int> getTweetCountsPerFrequency(string freq, string tweetName,\n                                         int startTime, int endTime) {\n    const int chunkSize = freq == \"minute\" ? 60 : freq == \"hour\" ? 3600 : 86400;\n    vector<int> counts((endTime - startTime) / chunkSize + 1);\n    const map<int, int>& timeCount = tweetNameToTimeCount[tweetName];\n    const auto lo = timeCount.lower_bound(startTime);\n    const auto hi = timeCount.upper_bound(endTime);\n\n    for (auto it = lo; it != hi; ++it) {\n      const int index = (it->first - startTime) / chunkSize;\n      counts[index] += it->second;\n    }\n\n    return counts;\n  }\n\n private:\n  unordered_map<string, map<int, int>> tweetNameToTimeCount;\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class TweetCounts {\n  public void recordTweet(String tweetName, int time) {\n    tweetNameToTimeCount.putIfAbsent(tweetName, new TreeMap<>());\n    tweetNameToTimeCount.get(tweetName).merge(time, 1, Integer::sum);\n  }\n\n  public List<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime,\n                                                  int endTime) {\n    final int chunkSize = freq.equals(\"minute\") ? 60 : freq.equals(\"hour\") ? 3600 : 86400;\n    int[] counts = new int[(endTime - startTime) / chunkSize + 1];\n    TreeMap<Integer, Integer> timeCount = tweetNameToTimeCount.get(tweetName);\n\n    for (Map.Entry<Integer, Integer> entry : timeCount.subMap(startTime, endTime + 1).entrySet()) {\n      final int index = (entry.getKey() - startTime) / chunkSize;\n      counts[index] += entry.getValue();\n    }\n\n    return Arrays.stream(counts).boxed().collect(Collectors.toList());\n  }\n\n  private Map<String, TreeMap<Integer, Integer>> tweetNameToTimeCount = new HashMap<>();\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from sortedcontainers import SortedList\n\n\nclass TweetCounts:\n  def __init__(self):\n    self.tweetNameToTimes = collections.defaultdict(SortedList)\n\n  def recordTweet(self, tweetName: str, time: int) -> None:\n    self.tweetNameToTimes[tweetName].add(time)\n\n  def getTweetCountsPerFrequency(self, freq: str, tweetName: str, startTime: int, endTime: int) -> List[int]:\n    counts = []\n    times = self.tweetNameToTimes[tweetName]\n    chunk = 60 if freq == 'minute' else 3600 if freq == 'hour' else 86400\n\n    # I := startTime of each chunk\n    for i in range(startTime, endTime + 1, chunk):\n      j = min(i + chunk, endTime + 1)  # EndTime of each chunk\n      counts.append(bisect_left(times, j) - bisect_left(times, i))\n\n    return counts\n",
                "lang_text": "py"
            }
        }
    }
}