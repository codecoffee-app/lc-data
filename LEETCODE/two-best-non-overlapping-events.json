{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2054",
            "title": "Two Best Non-Overlapping Events",
            "titleSlug": "two-best-non-overlapping-events",
            "content": "<p>You are given a <strong>0-indexed</strong> 2D integer array of <code>events</code> where <code>events[i] = [startTime<sub>i</sub>, endTime<sub>i</sub>, value<sub>i</sub>]</code>. The <code>i<sup>th</sup></code> event starts at <code>startTime<sub>i</sub></code><sub> </sub>and ends at <code>endTime<sub>i</sub></code>, and if you attend this event, you will receive a value of <code>value<sub>i</sub></code>. You can choose <strong>at most</strong> <strong>two</strong> <strong>non-overlapping</strong> events to attend such that the sum of their values is <strong>maximized</strong>.</p>\n\n<p>Return <em>this <strong>maximum</strong> sum.</em></p>\n\n<p>Note that the start time and end time is <strong>inclusive</strong>: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time <code>t</code>, the next event must start at or after <code>t + 1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/21/picture5.png\" style=\"width: 400px; height: 75px;\" />\n<pre>\n<strong>Input:</strong> events = [[1,3,2],[4,5,2],[2,4,3]]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"Example 1 Diagram\" src=\"https://assets.leetcode.com/uploads/2021/09/21/picture1.png\" style=\"width: 400px; height: 77px;\" />\n<pre>\n<strong>Input:</strong> events = [[1,3,2],[4,5,2],[1,5,5]]\n<strong>Output:</strong> 5\n<strong>Explanation: </strong>Choose event 2 for a sum of 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/21/picture3.png\" style=\"width: 400px; height: 66px;\" />\n<pre>\n<strong>Input:</strong> events = [[1,5,3],[1,5,1],[6,6,5]]\n<strong>Output:</strong> 8\n<strong>Explanation: </strong>Choose events 0 and 2 for a sum of 3 + 5 = 8.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= events.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>events[i].length == 3</code></li>\n\t<li><code>1 &lt;= startTime<sub>i</sub> &lt;= endTime<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= value<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 785,
            "dislikes": 18,
            "similarQuestions": "[{\"title\": \"Maximum Profit in Job Scheduling\", \"titleSlug\": \"maximum-profit-in-job-scheduling\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Number of Events That Can Be Attended II\", \"titleSlug\": \"maximum-number-of-events-that-can-be-attended-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximize Win From Two Segments\", \"titleSlug\": \"maximize-win-from-two-segments\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                },
                {
                    "name": "Heap (Priority Queue)",
                    "slug": "heap-priority-queue"
                }
            ],
            "stats": "{\"totalAccepted\": \"17K\", \"totalSubmission\": \"36.6K\", \"totalAcceptedRaw\": 17008, \"totalSubmissionRaw\": 36595, \"acRate\": \"46.5%\"}",
            "hints": [
                "How can sorting the events on the basis of their start times help? How about end times?",
                "How can we quickly get the maximum score of an interval not intersecting with the interval we chose?"
            ],
            "rephrased": {
                "body": "You are given a 0-indexed 2D integer array `events` where `events[i] = [startTime_i, endTime_i, value_i]`. The i-th event starts at `startTime_i` and ends at `endTime_i`, and if you attend this event, you will receive a value of `value_i`. You can choose at most two non-overlapping events to attend such that the sum of their values is maximized.\n\nReturn the maximum sum achievable by attending at most two non-overlapping events. Two events are considered non-overlapping if the end time of the first event plus one is less than or equal to the start time of the second event.",
                "constraints": [
                    "2 <= events.length <= 10^5",
                    "events[i].length == 3",
                    "1 <= startTime_i <= endTime_i <= 10^9",
                    "1 <= value_i <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[[1,3,2],[4,5,2],[2,4,3]]",
                        "output": "4",
                        "explanation": "The maximum sum is achieved by selecting events 0 and 1, with values 2 and 2 respectively.  The sum is 2 + 2 = 4."
                    },
                    {
                        "input": "[[1,3,2],[4,5,2],[1,5,5]]",
                        "output": "5",
                        "explanation": "The maximum sum is achieved by selecting event 2, with a value of 5. Selecting any other combination of events would result in a lower sum."
                    },
                    {
                        "input": "[[1,5,3],[1,5,1],[6,6,5]]",
                        "output": "8",
                        "explanation": "The maximum sum is achieved by selecting events 0 and 2, with values 3 and 5 respectively.  These events are non-overlapping, and their sum is 3 + 5 = 8."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-profit-in-job-scheduling",
                "title": "Maximum Profit in Job Scheduling",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "maximum-number-of-events-that-can-be-attended-ii",
                "title": "Maximum Number of Events That Can Be Attended II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximize-win-from-two-segments",
                "title": "Maximize Win From Two Segments",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How can sorting the events on the basis of their start times help? How about end times?",
            "How can we quickly get the maximum score of an interval not intersecting with the interval we chose?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct Event {\n  int time;\n  int value;\n  bool isStart;\n  Event(int time, int value, bool isStart)\n      : time(time), value(value), isStart(isStart) {}\n};\n\nclass Solution {\n public:\n  int maxTwoEvents(vector<vector<int>>& events) {\n    int ans = 0;\n    int maxValue = 0;\n    vector<Event> evts;\n\n    for (const auto& event : events) {\n      const int start = event[0];\n      const int end = event[1];\n      const int value = event[2];\n      evts.emplace_back(start, value, true);\n      evts.emplace_back(end + 1, value, false);\n    }\n\n    sort(evts.begin(), evts.end(), [](const auto& a, const auto& b) {\n      return a.time == b.time ? a.isStart < b.isStart : a.time < b.time;\n    });\n\n    for (const auto& [_, value, isStart] : evts)\n      if (isStart)\n        ans = max(ans, value + maxValue);\n      else\n        maxValue = max(maxValue, value);\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Event {\n  public int time;\n  public int value;\n  public int isStart;\n  public Event(int time, int value, int isStart) {\n    this.time = time;\n    this.value = value;\n    this.isStart = isStart;\n  }\n};\n\nclass Solution {\n  public int maxTwoEvents(int[][] events) {\n    int ans = 0;\n    int maxValue = 0;\n    Event[] evts = new Event[events.length * 2];\n\n    for (int i = 0; i < events.length; ++i) {\n      final int start = events[i][0];\n      final int end = events[i][1];\n      final int value = events[i][2];\n      evts[i * 2] = new Event(start, value, 1);\n      evts[i * 2 + 1] = new Event(end + 1, value, 0);\n    }\n\n    Arrays.sort(evts, (a, b) -> a.time == b.time ? a.isStart - b.isStart : a.time - b.time);\n\n    for (Event evt : evts)\n      if (evt.isStart == 1)\n        ans = Math.max(ans, evt.value + maxValue);\n      else\n        maxValue = Math.max(maxValue, evt.value);\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxTwoEvents(self, events: List[List[int]]) -> int:\n    ans = 0\n    maxValue = 0\n    evts = []  # (time, isStart, value)\n\n    for s, e, v in events:\n      evts.append((s, 1, v))\n      evts.append((e + 1, 0, v))\n\n    # When two events have the same time, the one is not start will be in the front\n    evts.sort()\n\n    for _, isStart, value in evts:\n      if isStart:\n        ans = max(ans, value + maxValue)\n      else:\n        maxValue = max(maxValue, value)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}