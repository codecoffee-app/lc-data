{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "167",
            "title": "Two Sum II - Input Array Is Sorted",
            "titleSlug": "two-sum-ii-input-array-is-sorted",
            "content": "<p>Given a <strong>1-indexed</strong> array of integers <code>numbers</code> that is already <strong><em>sorted in non-decreasing order</em></strong>, find two numbers such that they add up to a specific <code>target</code> number. Let these two numbers be <code>numbers[index<sub>1</sub>]</code> and <code>numbers[index<sub>2</sub>]</code> where <code>1 &lt;= index<sub>1</sub> &lt; index<sub>2</sub> &lt;= numbers.length</code>.</p>\n\n<p>Return<em> the indices of the two numbers, </em><code>index<sub>1</sub></code><em> and </em><code>index<sub>2</sub></code><em>, <strong>added by one</strong> as an integer array </em><code>[index<sub>1</sub>, index<sub>2</sub>]</code><em> of length 2.</em></p>\n\n<p>The tests are generated such that there is <strong>exactly one solution</strong>. You <strong>may not</strong> use the same element twice.</p>\n\n<p>Your solution must use only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>2</u>,<u>7</u>,11,15], target = 9\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The sum of 2 and 7 is 9. Therefore, index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>2</u>,3,<u>4</u>], target = 6\n<strong>Output:</strong> [1,3]\n<strong>Explanation:</strong> The sum of 2 and 4 is 6. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 3. We return [1, 3].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> numbers = [<u>-1</u>,<u>0</u>], target = -1\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The sum of -1 and 0 is -1. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= numbers.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li>\n\t<li><code>numbers</code> is sorted in <strong>non-decreasing order</strong>.</li>\n\t<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n\t<li>The tests are generated such that there is <strong>exactly one solution</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 11171,
            "dislikes": 1359,
            "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Two Sum IV - Input is a BST\", \"titleSlug\": \"two-sum-iv-input-is-a-bst\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Two Sum Less Than K\", \"titleSlug\": \"two-sum-less-than-k\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.8M\", \"totalSubmission\": \"2.9M\", \"totalAcceptedRaw\": 1785872, \"totalSubmissionRaw\": 2943183, \"acRate\": \"60.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a 1-indexed array of integers `numbers` sorted in non-decreasing order, find two numbers within the array that sum up to the given `target` number.  Return the 1-indexed positions of these two numbers as an array `[index1, index2]`, where `1 <= index1 < index2 <= numbers.length`. There is guaranteed to be exactly one solution, and you cannot use the same element twice.  Your solution must use only constant extra space.",
                "constraints": [
                    "2 <= numbers.length <= 3 * 10^4",
                    "-1000 <= numbers[i] <= 1000",
                    "`numbers` is sorted in non-decreasing order.",
                    "-1000 <= target <= 1000",
                    "There is exactly one solution."
                ],
                "testcases": [
                    {
                        "input": "numbers = [2,7,11,15], target = 9",
                        "output": "[1,2]",
                        "explanation": "The numbers at index 1 (value 2) and index 2 (value 7) sum to 9. Therefore, the result is [1, 2]."
                    },
                    {
                        "input": "numbers = [2,3,4], target = 6",
                        "output": "[1,3]",
                        "explanation": "The numbers at index 1 (value 2) and index 3 (value 4) sum to 6. Therefore, the result is [1, 3]."
                    },
                    {
                        "input": "numbers = [-1,0], target = -1",
                        "output": "[1,2]",
                        "explanation": "The numbers at index 1 (value -1) and index 2 (value 0) sum to -1. Therefore, the result is [1, 2]."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "two-sum",
                "title": "Two Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "two-sum-iv-input-is-a-bst",
                "title": "Two Sum IV - Input is a BST",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "two-sum-less-than-k",
                "title": "Two Sum Less Than K",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> twoSum(vector<int>& numbers, int target) {\n    int l = 0;\n    int r = numbers.size() - 1;\n\n    while (numbers[l] + numbers[r] != target)\n      if (numbers[l] + numbers[r] < target)\n        ++l;\n      else\n        --r;\n\n    return {l + 1, r + 1};\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] twoSum(int[] numbers, int target) {\n    int l = 0;\n    int r = numbers.length - 1;\n\n    while (numbers[l] + numbers[r] != target)\n      if (numbers[l] + numbers[r] < target)\n        ++l;\n      else\n        --r;\n\n    return new int[] {l + 1, r + 1};\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def twoSum(self, numbers: List[int], target: int) -> List[int]:\n    l = 0\n    r = len(numbers) - 1\n\n    while l < r:\n      summ = numbers[l] + numbers[r]\n      if summ == target:\n        return [l + 1, r + 1]\n      if summ < target:\n        l += 1\n      else:\n        r -= 1\n",
                "lang_text": "py"
            }
        }
    }
}