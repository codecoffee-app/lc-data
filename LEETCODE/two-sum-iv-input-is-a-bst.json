{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "653",
            "title": "Two Sum IV - Input is a BST",
            "titleSlug": "two-sum-iv-input-is-a-bst",
            "content": "<p>Given the <code>root</code> of a binary search tree and an integer <code>k</code>, return <code>true</code> <em>if there exist two elements in the BST such that their sum is equal to</em> <code>k</code>, <em>or</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/21/sum_tree_1.jpg\" style=\"width: 400px; height: 229px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,7], k = 9\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/21/sum_tree_2.jpg\" style=\"width: 400px; height: 229px;\" />\n<pre>\n<strong>Input:</strong> root = [5,3,6,2,4,null,7], k = 28\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li><code>root</code> is guaranteed to be a <strong>valid</strong> binary search tree.</li>\n\t<li><code>-10<sup>5</sup> &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6519,
            "dislikes": 256,
            "similarQuestions": "[{\"title\": \"Two Sum\", \"titleSlug\": \"two-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Two Sum II - Input Array Is Sorted\", \"titleSlug\": \"two-sum-ii-input-array-is-sorted\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Two Sum III - Data structure design\", \"titleSlug\": \"two-sum-iii-data-structure-design\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Two Sum BSTs\", \"titleSlug\": \"two-sum-bsts\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"505.7K\", \"totalSubmission\": \"827.3K\", \"totalAcceptedRaw\": 505677, \"totalSubmissionRaw\": 827261, \"acRate\": \"61.1%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given the root of a binary search tree (BST) and an integer k, determine if there exist two distinct elements in the BST whose sum is equal to k. Return true if such a pair exists; otherwise, return false.",
                "constraints": [
                    "The number of nodes in the tree is in the range [1, 10<sup>4</sup>].",
                    "-10<sup>4</sup> <= Node.val <= 10<sup>4</sup>",
                    "root is guaranteed to be a valid binary search tree.",
                    "-10<sup>5</sup> <= k <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "root = [5,3,6,2,4,null,7], k = 9",
                        "output": "true",
                        "explanation": "The nodes with values 3 and 6 exist in the BST and their sum is 9."
                    },
                    {
                        "input": "root = [5,3,6,2,4,null,7], k = 28",
                        "output": "false",
                        "explanation": "There are no two distinct nodes in the BST whose sum is 28."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "two-sum",
                "title": "Two Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "two-sum-ii-input-array-is-sorted",
                "title": "Two Sum II - Input Array Is Sorted",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "two-sum-iii-data-structure-design",
                "title": "Two Sum III - Data structure design",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "two-sum-bsts",
                "title": "Two Sum BSTs",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class BSTIterator {\n public:\n  BSTIterator(TreeNode* root, bool leftToRight) : leftToRight(leftToRight) {\n    pushUntilNull(root);\n  }\n\n  int next() {\n    TreeNode* root = stack.top();\n    stack.pop();\n    pushUntilNull(leftToRight ? root->right : root->left);\n    return root->val;\n  }\n\n private:\n  stack<TreeNode*> stack;\n  bool leftToRight;\n\n  void pushUntilNull(TreeNode* root) {\n    while (root != nullptr) {\n      stack.push(root);\n      root = leftToRight ? root->left : root->right;\n    }\n  }\n};\n\nclass Solution {\n public:\n  bool findTarget(TreeNode* root, int k) {\n    if (root == nullptr)\n      return false;\n\n    BSTIterator left(root, true);\n    BSTIterator right(root, false);\n\n    for (int l = left.next(), r = right.next(); l < r;) {\n      const int sum = l + r;\n      if (sum == k)\n        return true;\n      if (sum < k)\n        l = left.next();\n      else\n        r = right.next();\n    }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class BSTIterator {\n  public BSTIterator(TreeNode root, boolean leftToRight) {\n    this.leftToRight = leftToRight;\n    pushLeftsUntilNull(root);\n  }\n\n  public int next() {\n    TreeNode root = stack.pop();\n    pushLeftsUntilNull(leftToRight ? root.right : root.left);\n    return root.val;\n  }\n\n  public boolean hasNext() {\n    return !stack.isEmpty();\n  }\n\n  private Deque<TreeNode> stack = new ArrayDeque<>();\n  private boolean leftToRight;\n\n  private void pushLeftsUntilNull(TreeNode root) {\n    while (root != null) {\n      stack.push(root);\n      root = leftToRight ? root.left : root.right;\n    }\n  }\n}\n\nclass Solution {\n  public boolean findTarget(TreeNode root, int k) {\n    if (root == null)\n      return false;\n\n    BSTIterator left = new BSTIterator(root, true);\n    BSTIterator right = new BSTIterator(root, false);\n\n    for (int l = left.next(), r = right.next(); l < r;) {\n      final int sum = l + r;\n      if (sum == k)\n        return true;\n      if (sum < k)\n        l = left.next();\n      else\n        r = right.next();\n    }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class BSTIterator:\n  def __init__(self, root: Optional[TreeNode], leftToRight: bool):\n    self.stack = []\n    self.leftToRight = leftToRight\n    self._pushUntilNone(root)\n\n  def next(self) -> int:\n    node = self.stack.pop()\n    if self.leftToRight:\n      self._pushUntilNone(node.right)\n    else:\n      self._pushUntilNone(node.left)\n    return node.val\n\n  def _pushUntilNone(self, root: Optional[TreeNode]):\n    while root:\n      self.stack.append(root)\n      root = root.left if self.leftToRight else root.right\n\n\nclass Solution:\n  def findTarget(self, root: Optional[TreeNode], k: int) -> bool:\n    if not root:\n      return False\n\n    left = BSTIterator(root, True)\n    right = BSTIterator(root, False)\n\n    l = left.next()\n    r = right.next()\n    while l < r:\n      summ = l + r\n      if summ == k:\n        return True\n      if summ < k:\n        l = left.next()\n      else:\n        r = right.next()\n\n    return False\n",
                "lang_text": "py"
            }
        }
    }
}