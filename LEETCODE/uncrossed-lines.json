{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1035",
            "title": "Uncrossed Lines",
            "titleSlug": "uncrossed-lines",
            "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>. We write the integers of <code>nums1</code> and <code>nums2</code> (in the order they are given) on two separate horizontal lines.</p>\n\n<p>We may draw connecting lines: a straight line connecting two numbers <code>nums1[i]</code> and <code>nums2[j]</code> such that:</p>\n\n<ul>\n\t<li><code>nums1[i] == nums2[j]</code>, and</li>\n\t<li>the line we draw does not intersect any other connecting (non-horizontal) line.</li>\n</ul>\n\n<p>Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).</p>\n\n<p>Return <em>the maximum number of connecting lines we can draw in this way</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/26/142.png\" style=\"width: 400px; height: 286px;\" />\n<pre>\n<strong>Input:</strong> nums1 = [1,4,2], nums2 = [1,2,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can draw 2 uncrossed lines as in the diagram.\nWe cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[j] &lt;= 2000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3722,
            "dislikes": 53,
            "similarQuestions": "[{\"title\": \"Edit Distance\", \"titleSlug\": \"edit-distance\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"149.8K\", \"totalSubmission\": \"239K\", \"totalAcceptedRaw\": 149757, \"totalSubmissionRaw\": 238986, \"acRate\": \"62.7%\"}",
            "hints": [
                "Think dynamic programming.  Given an oracle dp(i,j) that tells us how many lines A[i:], B[j:]  [the sequence A[i], A[i+1], ... and B[j], B[j+1], ...] are uncrossed, can we write this as a recursion?"
            ],
            "rephrased": {
                "body": "Given two integer arrays, `nums1` and `nums2`, visualize them written on two separate horizontal lines. Draw connecting lines between `nums1[i]` and `nums2[j]` if `nums1[i]` equals `nums2[j]` and no connecting lines intersect, including at endpoints (each number can only belong to one connecting line). Determine the maximum number of connecting lines you can draw in this manner.",
                "constraints": [
                    "1 <= nums1.length, nums2.length <= 500",
                    "1 <= nums1[i], nums2[j] <= 2000"
                ],
                "testcases": [
                    {
                        "input": "nums1 = [1,4,2], nums2 = [1,2,4]",
                        "output": "2",
                        "explanation": "The maximum number of uncrossed lines is 2. One possible solution connects 1 to 1 and 2 to 2. It's not possible to draw 3 uncrossed lines because connecting 4 to 4 would intersect the line connecting 2 to 2."
                    },
                    {
                        "input": "nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]",
                        "output": "3",
                        "explanation": null
                    },
                    {
                        "input": "nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "edit-distance",
                "title": "Edit Distance",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Think dynamic programming.  Given an oracle dp(i,j) that tells us how many lines A[i:], B[j:]  [the sequence A[i], A[i+1], ... and B[j], B[j+1], ...] are uncrossed, can we write this as a recursion?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int maxUncrossedLines(vector<int>& nums1, vector<int>& nums2) {\n    const int m = nums1.size();\n    const int n = nums2.size();\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1));\n\n    for (int i = 1; i <= m; ++i)\n      for (int j = 1; j <= n; ++j)\n        dp[i][j] = nums1[i - 1] == nums2[j - 1]\n                       ? dp[i - 1][j - 1] + 1\n                       : max(dp[i - 1][j], dp[i][j - 1]);\n\n    return dp[m][n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int maxUncrossedLines(int[] nums1, int[] nums2) {\n    final int m = nums1.length;\n    final int n = nums2.length;\n    int[][] dp = new int[m + 1][n + 1];\n\n    for (int i = 1; i <= m; ++i)\n      for (int j = 1; j <= n; ++j)\n        dp[i][j] = nums1[i - 1] == nums2[j - 1] ? dp[i - 1][j - 1] + 1\n                                                : Math.max(dp[i - 1][j], dp[i][j - 1]);\n\n    return dp[m][n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:\n    m = len(nums1)\n    n = len(nums2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n      for j in range(1, n + 1):\n        dp[i][j] = dp[i - 1][j - 1] + 1 \\\n            if nums1[i - 1] == nums2[j - 1] \\\n            else max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n",
                "lang_text": "py"
            }
        }
    }
}