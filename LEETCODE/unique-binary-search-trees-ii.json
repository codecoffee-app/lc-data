{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "95",
            "title": "Unique Binary Search Trees II",
            "titleSlug": "unique-binary-search-trees-ii",
            "content": "<p>Given an integer <code>n</code>, return <em>all the structurally unique <strong>BST&#39;</strong>s (binary search trees), which has exactly </em><code>n</code><em> nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>. Return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\" style=\"width: 600px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7386,
            "dislikes": 499,
            "similarQuestions": "[{\"title\": \"Unique Binary Search Trees\", \"titleSlug\": \"unique-binary-search-trees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Different Ways to Add Parentheses\", \"titleSlug\": \"different-ways-to-add-parentheses\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"431.8K\", \"totalSubmission\": \"758.2K\", \"totalAcceptedRaw\": 431839, \"totalSubmissionRaw\": 758238, \"acRate\": \"57.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer `n`, generate all structurally unique Binary Search Trees (BSTs) that can be formed using nodes with values from 1 to `n`. Return the list of these BSTs in any order.",
                "constraints": [
                    "1 <= n <= 8"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
                        "explanation": "All possible structurally unique BSTs using nodes with values 1, 2, and 3."
                    },
                    {
                        "input": "1",
                        "output": "[[1]]",
                        "explanation": "The only possible BST using the node with value 1."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "unique-binary-search-trees",
                "title": "Unique Binary Search Trees",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "different-ways-to-add-parentheses",
                "title": "Different Ways to Add Parentheses",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<TreeNode*> generateTrees(int n) {\n    if (n == 0)\n      return {};\n    return generateTrees(1, n);\n  }\n\n private:\n  vector<TreeNode*> generateTrees(int min, int max) {\n    if (min > max)\n      return {nullptr};\n\n    vector<TreeNode*> ans;\n\n    for (int i = min; i <= max; ++i)\n      for (TreeNode* left : generateTrees(min, i - 1))\n        for (TreeNode* right : generateTrees(i + 1, max)) {\n          ans.push_back(new TreeNode(i));\n          ans.back()->left = left;\n          ans.back()->right = right;\n        }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<TreeNode> generateTrees(int n) {\n    if (n == 0)\n      return new ArrayList<>();\n    return generateTrees(1, n);\n  }\n\n  private List<TreeNode> generateTrees(int min, int max) {\n    if (min > max)\n      return Arrays.asList((TreeNode) null);\n\n    List<TreeNode> ans = new ArrayList<>();\n\n    for (int i = min; i <= max; ++i)\n      for (TreeNode left : generateTrees(min, i - 1))\n        for (TreeNode right : generateTrees(i + 1, max)) {\n          ans.add(new TreeNode(i));\n          ans.get(ans.size() - 1).left = left;\n          ans.get(ans.size() - 1).right = right;\n        }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def generateTrees(self, n: int) -> List[TreeNode]:\n    if n == 0:\n      return []\n\n    def generateTrees(mini: int, maxi: int) -> List[Optional[int]]:\n      if mini > maxi:\n        return [None]\n\n      ans = []\n\n      for i in range(mini, maxi + 1):\n        for left in generateTrees(mini, i - 1):\n          for right in generateTrees(i + 1, maxi):\n            ans.append(TreeNode(i))\n            ans[-1].left = left\n            ans[-1].right = right\n\n      return ans\n\n    return generateTrees(1, n)\n",
                "lang_text": "py"
            }
        }
    }
}