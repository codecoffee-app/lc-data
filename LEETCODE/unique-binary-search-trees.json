{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "96",
            "title": "Unique Binary Search Trees",
            "titleSlug": "unique-binary-search-trees",
            "content": "<p>Given an integer <code>n</code>, return <em>the number of structurally unique <strong>BST&#39;</strong>s (binary search trees) which has exactly </em><code>n</code><em> nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\" style=\"width: 600px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 5\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 19</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10108,
            "dislikes": 389,
            "similarQuestions": "[{\"title\": \"Unique Binary Search Trees II\", \"titleSlug\": \"unique-binary-search-trees-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Search Tree",
                    "slug": "binary-search-tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"628.4K\", \"totalSubmission\": \"1M\", \"totalAcceptedRaw\": 628366, \"totalSubmissionRaw\": 1036134, \"acRate\": \"60.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an integer `n`, determine the number of structurally unique Binary Search Trees (BSTs) that can be formed using `n` distinct nodes with values ranging from 1 to `n`. In essence, you need to count the different possible shapes of BSTs you can create with the given number of nodes, where each node contains a unique value.",
                "constraints": [
                    "1 <= n <= 19"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "5",
                        "explanation": "With n=3, there are 5 possible BST structures using nodes with values 1, 2, and 3."
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "With n=1, there is only 1 possible BST structure: a single node."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "unique-binary-search-trees-ii",
                "title": "Unique Binary Search Trees II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numTrees(int n) {\n    // G[i] := # of unique BST's that store values 1..i\n    vector<int> G(n + 1);\n    G[0] = 1;\n    G[1] = 1;\n\n    for (int i = 2; i <= n; ++i)\n      for (int j = 0; j < i; ++j)\n        G[i] += G[j] * G[i - j - 1];\n\n    return G[n];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numTrees(int n) {\n    // G[i] := # of unique BST's that store values 1..i\n    int[] G = new int[n + 1];\n    G[0] = 1;\n    G[1] = 1;\n\n    for (int i = 2; i <= n; ++i)\n      for (int j = 0; j < i; ++j)\n        G[i] += G[j] * G[i - j - 1];\n\n    return G[n];\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numTrees(self, n: int) -> int:\n    # G[i] := # of unique BST's that store values 1..i\n    G = [1, 1] + [0] * (n - 1)\n\n    for i in range(2, n + 1):\n      for j in range(i):\n        G[i] += G[j] * G[i - j - 1]\n\n    return G[n]\n",
                "lang_text": "py"
            }
        }
    }
}