{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1930",
            "title": "Unique Length-3 Palindromic Subsequences",
            "titleSlug": "unique-length-3-palindromic-subsequences",
            "content": "<p>Given a string <code>s</code>, return <em>the number of <strong>unique palindromes of length three</strong> that are a <strong>subsequence</strong> of </em><code>s</code>.</p>\n\n<p>Note that even if there are multiple ways to obtain the same subsequence, it is still only counted <strong>once</strong>.</p>\n\n<p>A <strong>palindrome</strong> is a string that reads the same forwards and backwards.</p>\n\n<p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p>\n\n<ul>\n\t<li>For example, <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;<u>a</u>b<u>c</u>d<u>e</u>&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabca&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The 3 palindromic subsequences of length 3 are:\n- &quot;aba&quot; (subsequence of &quot;<u>a</u>a<u>b</u>c<u>a</u>&quot;)\n- &quot;aaa&quot; (subsequence of &quot;<u>aa</u>bc<u>a</u>&quot;)\n- &quot;aca&quot; (subsequence of &quot;<u>a</u>ab<u>ca</u>&quot;)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;adc&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no palindromic subsequences of length 3 in &quot;adc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbcbaba&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The 4 palindromic subsequences of length 3 are:\n- &quot;bbb&quot; (subsequence of &quot;<u>bb</u>c<u>b</u>aba&quot;)\n- &quot;bcb&quot; (subsequence of &quot;<u>b</u>b<u>cb</u>aba&quot;)\n- &quot;bab&quot; (subsequence of &quot;<u>b</u>bcb<u>ab</u>a&quot;)\n- &quot;aba&quot; (subsequence of &quot;bbcb<u>aba</u>&quot;)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1657,
            "dislikes": 67,
            "similarQuestions": "[{\"title\": \"Count Palindromic Subsequences\", \"titleSlug\": \"count-palindromic-subsequences\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"97.2K\", \"totalSubmission\": \"146.9K\", \"totalAcceptedRaw\": 97159, \"totalSubmissionRaw\": 146904, \"acRate\": \"66.1%\"}",
            "hints": [
                "What is the maximum number of length-3 palindromic strings?",
                "How can we keep track of the characters that appeared to the left of a given position?"
            ],
            "rephrased": {
                "body": "Given a string `s`, find the number of unique palindromes of length three that are a subsequence of `s`. A palindrome is a string that reads the same forwards and backward. A subsequence is formed by deleting zero or more characters from a string without changing the order of the remaining characters.",
                "constraints": [
                    "3 <= s.length <= 10^5",
                    "s consists of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "aabca",
                        "output": 3,
                        "explanation": "The 3 palindromic subsequences of length 3 are:\n- \"aba\" (subsequence of \"aabca\")\n- \"aaa\" (subsequence of \"aabca\")\n- \"aca\" (subsequence of \"aabca\")"
                    },
                    {
                        "input": "adc",
                        "output": 0,
                        "explanation": "There are no palindromic subsequences of length 3 in \"adc\"."
                    },
                    {
                        "input": "bbcbaba",
                        "output": 4,
                        "explanation": "The 4 palindromic subsequences of length 3 are:\n- \"bbb\" (subsequence of \"bbcbaba\")\n- \"bcb\" (subsequence of \"bbcbaba\")\n- \"bab\" (subsequence of \"bbcbaba\")\n- \"aba\" (subsequence of \"bbcbaba\")"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "count-palindromic-subsequences",
                "title": "Count Palindromic Subsequences",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "What is the maximum number of length-3 palindromic strings?",
            "How can we keep track of the characters that appeared to the left of a given position?"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int countPalindromicSubsequence(string s) {\n    int ans = 0;\n    vector<int> first(26, s.length());\n    vector<int> last(26);\n\n    for (int i = 0; i < s.length(); ++i) {\n      const int index = s[i] - 'a';\n      first[index] = min(first[index], i);\n      last[index] = i;\n    }\n\n    for (int i = 0; i < 26; ++i)\n      if (first[i] < last[i])\n        ans += unordered_set<int>(s.begin() + first[i] + 1, s.begin() + last[i])\n                   .size();\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int countPalindromicSubsequence(String s) {\n    int ans = 0;\n    int[] first = new int[26];\n    int[] last = new int[26];\n\n    Arrays.fill(first, s.length());\n\n    for (int i = 0; i < s.length(); ++i) {\n      final int index = s.charAt(i) - 'a';\n      first[index] = Math.min(first[index], i);\n      last[index] = i;\n    }\n\n    for (int i = 0; i < 26; ++i)\n      if (first[i] < last[i])\n        ans += s.substring(first[i] + 1, last[i]).chars().distinct().count();\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def countPalindromicSubsequence(self, s: str) -> int:\n    ans = 0\n    first = [len(s)] * 26\n    last = [0] * 26\n\n    for i, c in enumerate(s):\n      index = ord(c) - ord('a')\n      first[index] = min(first[index], i)\n      last[index] = i\n\n    for f, l in zip(first, last):\n      if f < l:\n        ans += len(set(s[f + 1:l]))\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}