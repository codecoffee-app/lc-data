{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "965",
            "title": "Univalued Binary Tree",
            "titleSlug": "univalued-binary-tree",
            "content": "<p>A binary tree is <strong>uni-valued</strong> if every node in the tree has the same value.</p>\n\n<p>Given the <code>root</code> of a binary tree, return <code>true</code><em> if the given tree is <strong>uni-valued</strong>, or </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/unival_bst_1.png\" style=\"width: 265px; height: 172px;\" />\n<pre>\n<strong>Input:</strong> root = [1,1,1,1,1,null,1]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/unival_bst_2.png\" style=\"width: 198px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,2,5,2]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt; 100</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1841,
            "dislikes": 63,
            "similarQuestions": "[{\"title\": \"Find All The Lonely Nodes\", \"titleSlug\": \"find-all-the-lonely-nodes\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"208.2K\", \"totalSubmission\": \"295.7K\", \"totalAcceptedRaw\": 208249, \"totalSubmissionRaw\": 295711, \"acRate\": \"70.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Determine if a given binary tree is uni-valued. A binary tree is uni-valued if all nodes in the tree have the same value.  Given the root of a binary tree, return `true` if the tree is uni-valued, and `false` otherwise.",
                "constraints": [
                    "The number of nodes in the tree is in the range `[1, 100]`.",
                    "`0 <= Node.val < 100`"
                ],
                "testcases": [
                    {
                        "input": "[1,1,1,1,1,null,1]",
                        "output": "true",
                        "explanation": "All nodes in the tree have a value of 1, so the tree is uni-valued."
                    },
                    {
                        "input": "[2,2,2,5,2]",
                        "output": "false",
                        "explanation": "The tree contains nodes with values 2 and 5, so it is not uni-valued."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "find-all-the-lonely-nodes",
                "title": "Find All The Lonely Nodes",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isUnivalTree(TreeNode* root) {\n    if (root == nullptr)\n      return true;\n    if (root->left != nullptr && root->left->val != root->val)\n      return false;\n    if (root->right != nullptr && root->right->val != root->val)\n      return false;\n    return isUnivalTree(root->left) && isUnivalTree(root->right);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isUnivalTree(TreeNode root) {\n    if (root == null)\n      return true;\n    if (root.left != null && root.left.val != root.val)\n      return false;\n    if (root.right != null && root.right.val != root.val)\n      return false;\n    return isUnivalTree(root.left) && isUnivalTree(root.right);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isUnivalTree(self, root: Optional[TreeNode]) -> bool:\n    if not root:\n      return True\n    if root.left and root.left.val != root.val:\n      return False\n    if root.right and root.right.val != root.val:\n      return False\n    return self.isUnivalTree(root.left) and self.isUnivalTree(root.right)\n",
                "lang_text": "py"
            }
        }
    }
}