{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2434",
            "title": "Using a Robot to Print the Lexicographically Smallest String",
            "titleSlug": "using-a-robot-to-print-the-lexicographically-smallest-string",
            "content": "<p>You are given a string <code>s</code> and a robot that currently holds an empty string <code>t</code>. Apply one of the following operations until <code>s</code> and <code>t</code> <strong>are both empty</strong>:</p>\n\n<ul>\n\t<li>Remove the <strong>first</strong> character of a string <code>s</code> and give it to the robot. The robot will append this character to the string <code>t</code>.</li>\n\t<li>Remove the <strong>last</strong> character of a string <code>t</code> and give it to the robot. The robot will write this character on paper.</li>\n</ul>\n\n<p>Return <em>the lexicographically smallest string that can be written on the paper.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;zza&quot;\n<strong>Output:</strong> &quot;azz&quot;\n<strong>Explanation:</strong> Let p denote the written string.\nInitially p=&quot;&quot;, s=&quot;zza&quot;, t=&quot;&quot;.\nPerform first operation three times p=&quot;&quot;, s=&quot;&quot;, t=&quot;zza&quot;.\nPerform second operation three times p=&quot;azz&quot;, s=&quot;&quot;, t=&quot;&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bac&quot;\n<strong>Output:</strong> &quot;abc&quot;\n<strong>Explanation:</strong> Let p denote the written string.\nPerform first operation twice p=&quot;&quot;, s=&quot;c&quot;, t=&quot;ba&quot;. \nPerform second operation twice p=&quot;ab&quot;, s=&quot;c&quot;, t=&quot;&quot;. \nPerform first operation p=&quot;ab&quot;, s=&quot;&quot;, t=&quot;c&quot;. \nPerform second operation p=&quot;abc&quot;, s=&quot;&quot;, t=&quot;&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bdda&quot;\n<strong>Output:</strong> &quot;addb&quot;\n<strong>Explanation:</strong> Let p denote the written string.\nInitially p=&quot;&quot;, s=&quot;bdda&quot;, t=&quot;&quot;.\nPerform first operation four times p=&quot;&quot;, s=&quot;&quot;, t=&quot;bdda&quot;.\nPerform second operation four times p=&quot;addb&quot;, s=&quot;&quot;, t=&quot;&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only English lowercase letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 613,
            "dislikes": 181,
            "similarQuestions": "[{\"title\": \"Find Permutation\", \"titleSlug\": \"find-permutation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"16.7K\", \"totalSubmission\": \"42.6K\", \"totalAcceptedRaw\": 16689, \"totalSubmissionRaw\": 42579, \"acRate\": \"39.2%\"}",
            "hints": [
                "If there are some character \u201ca\u201d \u2019 s in the string, they can be written on paper before anything else.",
                "Every character in the string before the last \u201ca\u201d should be written in reversed order.",
                "After the robot writes every \u201ca\u201d on paper, the same holds for other characters \u201cb\u201d, \u201dc\u201d, \u2026etc."
            ],
            "rephrased": {
                "body": "You are given a string `s` and a robot that holds an initially empty string `t`. The robot can perform two operations:\n\n1.  Move the first character of `s` to the end of `t`. \n2.  Move the last character of `t` to a paper.\n\nThe goal is to find the lexicographically smallest string that can be written on the paper by applying these operations until both `s` and `t` are empty.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists of only English lowercase letters."
                ],
                "testcases": [
                    {
                        "input": "zza",
                        "output": "azz",
                        "explanation": "Initially, paper = \"\", s = \"zza\", t = \"\".  Move 'z', 'z', 'a' from s to t. Now, s is empty, t = \"zza\". Move 'a', 'z', 'z' from t to paper. The final paper string is \"azz\"."
                    },
                    {
                        "input": "bac",
                        "output": "abc",
                        "explanation": "Initially, paper = \"\", s = \"bac\", t = \"\". Move 'b', 'a' from s to t. Now s = \"c\", t = \"ba\". Move 'a', 'b' from t to the paper. Now paper = \"ab\", s = \"c\", t = \"\". Move 'c' from s to t. Now paper = \"ab\", s = \"\", t = \"c\".  Move 'c' from t to the paper. The final paper string is \"abc\"."
                    },
                    {
                        "input": "bdda",
                        "output": "addb",
                        "explanation": "Initially, paper = \"\", s = \"bdda\", t = \"\".  Move 'b', 'd', 'd', 'a' from s to t. Now s is empty, t = \"bdda\".  Move 'a', 'd', 'd', 'b' from t to paper. The final paper string is \"addb\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "find-permutation",
                "title": "Find Permutation",
                "isPaidOnly": true
            }
        ],
        "hints": [
            "If there are some character \u201ca\u201d \u2019 s in the string, they can be written on paper before anything else.",
            "Every character in the string before the last \u201ca\u201d should be written in reversed order.",
            "After the robot writes every \u201ca\u201d on paper, the same holds for other characters \u201cb\u201d, \u201dc\u201d, \u2026etc."
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string robotWithString(string s) {\n    string ans;\n    vector<int> count(26);\n    stack<char> stack;\n\n    for (const char c : s)\n      ++count[c - 'a'];\n\n    for (const char c : s) {\n      stack.push(c);\n      --count[c - 'a'];\n      const char minChar = getMinChar(count);\n      while (!stack.empty() && stack.top() <= minChar)\n        ans += stack.top(), stack.pop();\n    }\n\n    while (!stack.empty())\n      ans += stack.top(), stack.pop();\n\n    return ans;\n  }\n\n private:\n  char getMinChar(const vector<int>& count) {\n    for (int i = 0; i < 26; ++i)\n      if (count[i])\n        return 'a' + i;\n    return 'a';\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String robotWithString(String s) {\n    StringBuilder sb = new StringBuilder();\n    int[] count = new int[26];\n    Deque<Character> stack = new ArrayDeque<>();\n\n    for (final char c : s.toCharArray())\n      ++count[c - 'a'];\n\n    for (final char c : s.toCharArray()) {\n      stack.push(c);\n      --count[c - 'a'];\n      final char minChar = getMinChar(count);\n      while (!stack.isEmpty() && stack.peek() <= minChar)\n        sb.append(stack.pop());\n    }\n\n    while (!stack.isEmpty())\n      sb.append(stack.pop());\n\n    return sb.toString();\n  }\n\n  private char getMinChar(int[] count) {\n    for (int i = 0; i < 26; ++i)\n      if (count[i] > 0)\n        return (char) ('a' + i);\n    return 'a';\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def robotWithString(self, s: str) -> str:\n    ans = []\n    count = collections.Counter(s)\n    stack = []\n\n    for c in s:\n      stack.append(c)\n      count[c] -= 1\n      minChar = self._getMinChar(count)\n      while stack and stack[-1] <= minChar:\n        ans.append(stack.pop())\n\n    return ''.join(ans + stack[::-1])\n\n  def _getMinChar(self, count: List[int]) -> str:\n    for c in string.ascii_lowercase:\n      if count[c]:\n        return c\n    return 'a'\n",
                "lang_text": "py"
            }
        }
    }
}