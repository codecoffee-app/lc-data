{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2097",
            "title": "Valid Arrangement of Pairs",
            "titleSlug": "valid-arrangement-of-pairs",
            "content": "<p>You are given a <strong>0-indexed</strong> 2D integer array <code>pairs</code> where <code>pairs[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>. An arrangement of <code>pairs</code> is <strong>valid</strong> if for every index <code>i</code> where <code>1 &lt;= i &lt; pairs.length</code>, we have <code>end<sub>i-1</sub> == start<sub>i</sub></code>.</p>\n\n<p>Return <em><strong>any</strong> valid arrangement of </em><code>pairs</code>.</p>\n\n<p><strong>Note:</strong> The inputs will be generated such that there exists a valid arrangement of <code>pairs</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[5,1],[4,5],[11,9],[9,4]]\n<strong>Output:</strong> [[11,9],[9,4],[4,5],[5,1]]\n<strong>Explanation:\n</strong>This is a valid arrangement since end<sub>i-1</sub> always equals start<sub>i</sub>.\nend<sub>0</sub> = 9 == 9 = start<sub>1</sub> \nend<sub>1</sub> = 4 == 4 = start<sub>2</sub>\nend<sub>2</sub> = 5 == 5 = start<sub>3</sub>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[1,3],[3,2],[2,1]]\n<strong>Output:</strong> [[1,3],[3,2],[2,1]]\n<strong>Explanation:</strong>\nThis is a valid arrangement since end<sub>i-1</sub> always equals start<sub>i</sub>.\nend<sub>0</sub> = 3 == 3 = start<sub>1</sub>\nend<sub>1</sub> = 2 == 2 = start<sub>2</sub>\nThe arrangements [[2,1],[1,3],[3,2]] and [[3,2],[2,1],[1,3]] are also valid.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[1,3],[2,1]]\n<strong>Output:</strong> [[1,2],[2,1],[1,3]]\n<strong>Explanation:</strong>\nThis is a valid arrangement since end<sub>i-1</sub> always equals start<sub>i</sub>.\nend<sub>0</sub> = 2 == 2 = start<sub>1</sub>\nend<sub>1</sub> = 1 == 1 = start<sub>2</sub>\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pairs.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pairs[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub>, end<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>start<sub>i</sub> != end<sub>i</sub></code></li>\n\t<li>No two pairs are exactly the same.</li>\n\t<li>There <strong>exists</strong> a valid arrangement of <code>pairs</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 475,
            "dislikes": 25,
            "similarQuestions": "[{\"title\": \"Reconstruct Itinerary\", \"titleSlug\": \"reconstruct-itinerary\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Find if Path Exists in Graph\", \"titleSlug\": \"find-if-path-exists-in-graph\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Eulerian Circuit",
                    "slug": "eulerian-circuit"
                }
            ],
            "stats": "{\"totalAccepted\": \"8.8K\", \"totalSubmission\": \"20.8K\", \"totalAcceptedRaw\": 8813, \"totalSubmissionRaw\": 20801, \"acRate\": \"42.4%\"}",
            "hints": [
                "Could you convert this into a graph problem?",
                "Consider the pairs as edges and each number as a node.",
                "We have to find an Eulerian path of this graph. Hierholzer\u2019s algorithm can be used."
            ],
            "rephrased": {
                "body": "Given a 0-indexed 2D integer array `pairs` where `pairs[i] = [start_i, end_i]`. A valid arrangement of `pairs` satisfies the condition that for every index `i` (1 <= i < pairs.length), `end_{i-1} == start_i`.\n\nReturn any valid arrangement of `pairs`.\n\nNote: The inputs are guaranteed to have at least one valid arrangement.",
                "constraints": [
                    "1 <= pairs.length <= 10^5",
                    "pairs[i].length == 2",
                    "0 <= start_i, end_i <= 10^9",
                    "start_i != end_i",
                    "No two pairs are exactly the same.",
                    "There exists a valid arrangement of pairs."
                ],
                "testcases": [
                    {
                        "input": "[[5,1],[4,5],[11,9],[9,4]]",
                        "output": "[[11,9],[9,4],[4,5],[5,1]]",
                        "explanation": "In this arrangement, the end value of the previous pair matches the start value of the next pair: end_0 (9) == start_1 (9), end_1 (4) == start_2 (4), and end_2 (5) == start_3 (5)."
                    },
                    {
                        "input": "[[1,3],[3,2],[2,1]]",
                        "output": "[[1,3],[3,2],[2,1]]",
                        "explanation": "In this arrangement, the end value of the previous pair matches the start value of the next pair: end_0 (3) == start_1 (3) and end_1 (2) == start_2 (2). Other valid arrangements exist."
                    },
                    {
                        "input": "[[1,2],[1,3],[2,1]]",
                        "output": "[[1,2],[2,1],[1,3]]",
                        "explanation": "In this arrangement, the end value of the previous pair matches the start value of the next pair: end_0 (2) == start_1 (2) and end_1 (1) == start_2 (1)."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "reconstruct-itinerary",
                "title": "Reconstruct Itinerary",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-if-path-exists-in-graph",
                "title": "Find if Path Exists in Graph",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Could you convert this into a graph problem?",
            "Consider the pairs as edges and each number as a node.",
            "We have to find an Eulerian path of this graph. Hierholzer\u2019s algorithm can be used."
        ],
        "relatedTopics": [
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Eulerian Circuit",
                "slug": "eulerian-circuit"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<int>> validArrangement(vector<vector<int>>& pairs) {\n    vector<vector<int>> ans;\n    unordered_map<int, stack<int>> graph;\n    unordered_map<int, int> outDegree;\n    unordered_map<int, int> inDegree;\n\n    for (const vector<int>& pair : pairs) {\n      const int start = pair[0];\n      const int end = pair[1];\n      graph[start].push(end);\n      ++outDegree[start];\n      ++inDegree[end];\n    }\n\n    const int startNode = getStartNode(graph, outDegree, inDegree, pairs);\n    euler(graph, startNode, ans);\n    reverse(ans.begin(), ans.end());\n    return ans;\n  }\n\n private:\n  int getStartNode(const unordered_map<int, stack<int>>& graph,\n                   unordered_map<int, int>& outDegree,\n                   unordered_map<int, int>& inDegree,\n                   const vector<vector<int>>& pairs) {\n    for (const auto& [u, _] : graph)\n      if (outDegree[u] - inDegree[u] == 1)\n        return u;\n    return pairs[0][0];  // Arbitrarily choose a node\n  }\n\n  void euler(unordered_map<int, stack<int>>& graph, int u,\n             vector<vector<int>>& ans) {\n    auto& stack = graph[u];\n    while (!stack.empty()) {\n      const int v = stack.top();\n      stack.pop();\n      euler(graph, v, ans);\n      ans.push_back({u, v});\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[][] validArrangement(int[][] pairs) {\n    List<int[]> ans = new ArrayList<>();\n    Map<Integer, Deque<Integer>> graph = new HashMap<>();\n    Map<Integer, Integer> outDegree = new HashMap<>();\n    Map<Integer, Integer> inDegree = new HashMap<>();\n\n    for (int[] pair : pairs) {\n      final int start = pair[0];\n      final int end = pair[1];\n      graph.putIfAbsent(start, new ArrayDeque<>());\n      graph.get(start).push(end);\n      outDegree.merge(start, 1, Integer::sum);\n      inDegree.merge(end, 1, Integer::sum);\n    }\n\n    final int startNode = getStartNode(graph, outDegree, inDegree, pairs);\n    euler(graph, startNode, ans);\n    Collections.reverse(ans);\n    return ans.stream().toArray(int[][] ::new);\n  }\n\n  private int getStartNode(Map<Integer, Deque<Integer>> graph, Map<Integer, Integer> outDegree,\n                           Map<Integer, Integer> inDegree, int[][] pairs) {\n    for (final int u : graph.keySet())\n      if (outDegree.getOrDefault(u, 0) - inDegree.getOrDefault(u, 0) == 1)\n        return u;\n    return pairs[0][0];\n  }\n\n  private void euler(Map<Integer, Deque<Integer>> graph, int u, List<int[]> ans) {\n    Deque<Integer> stack = graph.get(u);\n    while (stack != null && !stack.isEmpty()) {\n      final int v = stack.pop();\n      euler(graph, v, ans);\n      ans.add(new int[] {u, v});\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def validArrangement(self, pairs: List[List[int]]) -> List[List[int]]:\n    ans = []\n    graph = collections.defaultdict(list)\n    outDegree = collections.Counter()\n    inDegree = collections.Counter()\n\n    for start, end in pairs:\n      graph[start].append(end)\n      outDegree[start] += 1\n      inDegree[end] += 1\n\n    def getStartNode() -> int:\n      for u in graph.keys():\n        if outDegree[u] - inDegree[u] == 1:\n          return u\n      return pairs[0][0]  # Arbitrarily choose a node\n\n    def euler(u: int) -> None:\n      stack = graph[u]\n      while stack:\n        v = stack.pop()\n        euler(v)\n        ans.append([u, v])\n\n    euler(getStartNode())\n    return ans[::-1]\n",
                "lang_text": "py"
            }
        }
    }
}