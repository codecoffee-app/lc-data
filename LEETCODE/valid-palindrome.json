{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "125",
            "title": "Valid Palindrome",
            "titleSlug": "valid-palindrome",
            "content": "<p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p>\n\n<p>Given a string <code>s</code>, return <code>true</code><em> if it is a <strong>palindrome</strong>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A man, a plan, a canal: Panama&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;amanaplanacanalpanama&quot; is a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;race a car&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;raceacar&quot; is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot; &quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> s is an empty string &quot;&quot; after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of printable ASCII characters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8676,
            "dislikes": 8131,
            "similarQuestions": "[{\"title\": \"Palindrome Linked List\", \"titleSlug\": \"palindrome-linked-list\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Valid Palindrome II\", \"titleSlug\": \"valid-palindrome-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Maximum Product of the Length of Two Palindromic Subsequences\", \"titleSlug\": \"maximum-product-of-the-length-of-two-palindromic-subsequences\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find First Palindromic String in the Array\", \"titleSlug\": \"find-first-palindromic-string-in-the-array\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Valid Palindrome IV\", \"titleSlug\": \"valid-palindrome-iv\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"2.6M\", \"totalSubmission\": \"5.5M\", \"totalAcceptedRaw\": 2554311, \"totalSubmissionRaw\": 5506699, \"acRate\": \"46.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string, determine if it is a palindrome after converting all uppercase letters to lowercase and removing non-alphanumeric characters. A palindrome reads the same forwards and backward.",
                "constraints": [
                    "1 <= s.length <= 2 * 10^5",
                    "s consists only of printable ASCII characters."
                ],
                "testcases": [
                    {
                        "input": "A man, a plan, a canal: Panama",
                        "output": "true",
                        "explanation": "After processing, the string becomes \"amanaplanacanalpanama\", which is a palindrome."
                    },
                    {
                        "input": "race a car",
                        "output": "false",
                        "explanation": "After processing, the string becomes \"raceacar\", which is not a palindrome."
                    },
                    {
                        "input": " ",
                        "output": "true",
                        "explanation": "After removing non-alphanumeric characters, the string is empty. An empty string is considered a palindrome."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "palindrome-linked-list",
                "title": "Palindrome Linked List",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "valid-palindrome-ii",
                "title": "Valid Palindrome II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
                "title": "Maximum Product of the Length of Two Palindromic Subsequences",
                "isPaidOnly": false
            },
            {
                "difficulty": "Easy",
                "titleSlug": "find-first-palindromic-string-in-the-array",
                "title": "Find First Palindromic String in the Array",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "valid-palindrome-iv",
                "title": "Valid Palindrome IV",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isPalindrome(string s) {\n    int l = 0;\n    int r = s.length() - 1;\n\n    while (l < r) {\n      while (l < r && !isalnum(s[l]))\n        ++l;\n      while (l < r && !isalnum(s[r]))\n        --r;\n      if (tolower(s[l]) != tolower(s[r]))\n        return false;\n      ++l;\n      --r;\n    }\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isPalindrome(String s) {\n    int l = 0;\n    int r = s.length() - 1;\n\n    while (l < r) {\n      while (l < r && !Character.isLetterOrDigit(s.charAt(l)))\n        ++l;\n      while (l < r && !Character.isLetterOrDigit(s.charAt(r)))\n        --r;\n      if (Character.toLowerCase(s.charAt(l)) != Character.toLowerCase(s.charAt(r)))\n        return false;\n      ++l;\n      --r;\n    }\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isPalindrome(self, s: str) -> bool:\n    l = 0\n    r = len(s) - 1\n\n    while l < r:\n      while l < r and not s[l].isalnum():\n        l += 1\n      while l < r and not s[r].isalnum():\n        r -= 1\n      if s[l].lower() != s[r].lower():\n        return False\n      l += 1\n      r -= 1\n\n    return True\n",
                "lang_text": "py"
            }
        }
    }
}