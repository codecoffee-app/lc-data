{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "678",
            "title": "Valid Parenthesis String",
            "titleSlug": "valid-parenthesis-string",
            "content": "<p>Given a string <code>s</code> containing only three types of characters: <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code> and <code>&#39;*&#39;</code>, return <code>true</code> <em>if</em> <code>s</code> <em>is <strong>valid</strong></em>.</p>\n\n<p>The following rules define a <strong>valid</strong> string:</p>\n\n<ul>\n\t<li>Any left parenthesis <code>&#39;(&#39;</code> must have a corresponding right parenthesis <code>&#39;)&#39;</code>.</li>\n\t<li>Any right parenthesis <code>&#39;)&#39;</code> must have a corresponding left parenthesis <code>&#39;(&#39;</code>.</li>\n\t<li>Left parenthesis <code>&#39;(&#39;</code> must go before the corresponding right parenthesis <code>&#39;)&#39;</code>.</li>\n\t<li><code>&#39;*&#39;</code> could be treated as a single right parenthesis <code>&#39;)&#39;</code> or a single left parenthesis <code>&#39;(&#39;</code> or an empty string <code>&quot;&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"()\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"(*)\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \"(*))\"\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s[i]</code> is <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code> or <code>&#39;*&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5029,
            "dislikes": 128,
            "similarQuestions": "[{\"title\": \"Special Binary String\", \"titleSlug\": \"special-binary-string\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Check if a Parentheses String Can Be Valid\", \"titleSlug\": \"check-if-a-parentheses-string-can-be-valid\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                }
            ],
            "stats": "{\"totalAccepted\": \"238.1K\", \"totalSubmission\": \"687.5K\", \"totalAcceptedRaw\": 238127, \"totalSubmissionRaw\": 687510, \"acRate\": \"34.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` consisting of only '(', ')' and '*' characters, determine if the string is valid. A valid string adheres to the following rules:\n\n*   Every left parenthesis '(' must have a corresponding right parenthesis ')'.\n*   Every right parenthesis ')' must have a corresponding left parenthesis '('.\n*   Left parentheses '(' must appear before their corresponding right parentheses ')'.\n*   The '*' character can be treated as a single right parenthesis ')', a single left parenthesis '(', or an empty string.",
                "constraints": [
                    "1 <= s.length <= 100",
                    "s[i] is '(', ')' or '*'"
                ],
                "testcases": [
                    {
                        "input": "()",
                        "output": "true",
                        "explanation": null
                    },
                    {
                        "input": "(*)",
                        "output": "true",
                        "explanation": null
                    },
                    {
                        "input": "(*))",
                        "output": "true",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "special-binary-string",
                "title": "Special Binary String",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "check-if-a-parentheses-string-can-be-valid",
                "title": "Check if a Parentheses String Can Be Valid",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool checkValidString(const string& s) {\n    int low = 0;   // Lower bound of valid '(' count\n    int high = 0;  // Upper bound of valid '(' count\n\n    for (const char c : s) {\n      switch (c) {\n        case '(':\n          ++low;\n          ++high;\n          break;\n        case ')':\n          low = max(0, --low);\n          --high;\n          break;\n        case '*':\n          low = max(0, --low);\n          ++high;\n          break;\n      }\n      if (high < 0)\n        return false;\n    }\n\n    return low == 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean checkValidString(final String s) {\n    int low = 0;  // Lower bound of valid '(' count\n    int high = 0; // Upper bound of valid '(' count\n\n    for (final char c : s.toCharArray()) {\n      switch (c) {\n        case '(':\n          ++low;\n          ++high;\n          break;\n        case ')':\n          low = Math.max(0, --low);\n          --high;\n          break;\n        case '*':\n          low = Math.max(0, --low);\n          ++high;\n          break;\n      }\n      if (high < 0)\n        return false;\n    }\n\n    return low == 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def checkValidString(self, s: str) -> bool:\n    low = 0\n    high = 0\n\n    for c in s:\n      if c == '(':\n        low += 1\n        high += 1\n      elif c == ')':\n        if low > 0:\n          low -= 1\n        high -= 1\n      else:\n        if low > 0:\n          low -= 1\n        high += 1\n      if high < 0:\n        return False\n\n    return low == 0\n",
                "lang_text": "py"
            }
        }
    }
}