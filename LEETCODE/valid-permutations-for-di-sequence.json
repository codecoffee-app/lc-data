{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "903",
            "title": "Valid Permutations for DI Sequence",
            "titleSlug": "valid-permutations-for-di-sequence",
            "content": "<p>You are given a string <code>s</code> of length <code>n</code> where <code>s[i]</code> is either:</p>\n\n<ul>\n\t<li><code>&#39;D&#39;</code> means decreasing, or</li>\n\t<li><code>&#39;I&#39;</code> means increasing.</li>\n</ul>\n\n<p>A permutation <code>perm</code> of <code>n + 1</code> integers of all the integers in the range <code>[0, n]</code> is called a <strong>valid permutation</strong> if for all valid <code>i</code>:</p>\n\n<ul>\n\t<li>If <code>s[i] == &#39;D&#39;</code>, then <code>perm[i] &gt; perm[i + 1]</code>, and</li>\n\t<li>If <code>s[i] == &#39;I&#39;</code>, then <code>perm[i] &lt; perm[i + 1]</code>.</li>\n</ul>\n\n<p>Return <em>the number of <strong>valid permutations</strong> </em><code>perm</code>. Since the answer may be large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;DID&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;D&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == s.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;I&#39;</code> or <code>&#39;D&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 697,
            "dislikes": 41,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"14.9K\", \"totalSubmission\": \"25.9K\", \"totalAcceptedRaw\": 14886, \"totalSubmissionRaw\": 25890, \"acRate\": \"57.5%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` of length `n` consisting of 'D' (decreasing) and 'I' (increasing) characters, find the number of valid permutations of the integers in the range `[0, n]`. A permutation `perm` is valid if, for each index `i` in `s`:\n\n- If `s[i] == 'D'`, then `perm[i] > perm[i + 1]`.\n- If `s[i] == 'I'`, then `perm[i] < perm[i + 1]`.\n\nReturn the count of valid permutations modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "n == s.length",
                    "1 <= n <= 200",
                    "s[i] is either 'I' or 'D'."
                ],
                "testcases": [
                    {
                        "input": "DID",
                        "output": "5",
                        "explanation": "The valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)"
                    },
                    {
                        "input": "D",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numPermsDISequence(string s) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = s.length();\n    // dp[i][j] := # of valid permutations w/ i + 1 digits, where s[i] is j-th\n    // Digit of remaining digits\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1));\n\n    // When there's only one digit, the # of perms is 1\n    for (int j = 0; j <= n; ++j)\n      dp[0][j] = 1;\n\n    for (int i = 1; i <= n; ++i)\n      if (s[i - 1] == 'I') {  // s[i - 1] == 'I'\n        // Calculate postfix sum to prevent duplicate calculation\n        int postfixsum = 0;\n        for (int j = n - i; j >= 0; --j) {\n          postfixsum = (postfixsum + dp[i - 1][j + 1]) % kMod;\n          dp[i][j] = postfixsum;\n        }\n      } else {  // s[i - 1] == 'D'\n        // Calculate prefix sum to prevent duplicate calculation\n        int prefix = 0;\n        for (int j = 0; j <= n - i; ++j) {\n          prefix = (prefix + dp[i - 1][j]) % kMod;\n          dp[i][j] = prefix;\n        }\n      }\n\n    return dp[n][0];\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numPermsDISequence(String s) {\n    final int kMod = 1_000_000_007;\n    final int n = s.length();\n    // dp[i][j] := # of valid permutations w/ i + 1 digits, where s[i] is j-th\n    // Digit of remaining digits\n    int[][] dp = new int[n + 1][n + 1];\n\n    // When there's only one digit, the # of perms is 1\n    for (int j = 0; j <= n; ++j)\n      dp[0][j] = 1;\n\n    for (int i = 1; i <= n; ++i)\n      if (s.charAt(i - 1) == 'I') { // s[i - 1] == 'I'\n        // Calculate postfix sum to prevent duplicate calculation\n        int postfixsum = 0;\n        for (int j = n - i; j >= 0; --j) {\n          postfixsum = (postfixsum + dp[i - 1][j + 1]) % kMod;\n          dp[i][j] = postfixsum;\n        }\n      } else { // s[i - 1] == 'D'\n        // Calculate prefix sum to prevent duplicate calculation\n        int prefix = 0;\n        for (int j = 0; j <= n - i; ++j) {\n          prefix = (prefix + dp[i - 1][j]) % kMod;\n          dp[i][j] = prefix;\n        }\n      }\n\n    return dp[n][0];\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}