{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "794",
            "title": "Valid Tic-Tac-Toe State",
            "titleSlug": "valid-tic-tac-toe-state",
            "content": "<p>Given a Tic-Tac-Toe board as a string array <code>board</code>, return <code>true</code> if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.</p>\n\n<p>The board is a <code>3 x 3</code> array that consists of characters <code>&#39; &#39;</code>, <code>&#39;X&#39;</code>, and <code>&#39;O&#39;</code>. The <code>&#39; &#39;</code> character represents an empty square.</p>\n\n<p>Here are the rules of Tic-Tac-Toe:</p>\n\n<ul>\n\t<li>Players take turns placing characters into empty squares <code>&#39; &#39;</code>.</li>\n\t<li>The first player always places <code>&#39;X&#39;</code> characters, while the second player always places <code>&#39;O&#39;</code> characters.</li>\n\t<li><code>&#39;X&#39;</code> and <code>&#39;O&#39;</code> characters are always placed into empty squares, never filled ones.</li>\n\t<li>The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.</li>\n\t<li>The game also ends if all squares are non-empty.</li>\n\t<li>No more moves can be played if the game is over.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/15/tictactoe1-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> board = [&quot;O  &quot;,&quot;   &quot;,&quot;   &quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The first player always plays &quot;X&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/15/tictactoe2-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> board = [&quot;XOX&quot;,&quot; X &quot;,&quot;   &quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Players take turns making moves.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/15/tictactoe4-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> board = [&quot;XOX&quot;,&quot;O O&quot;,&quot;XOX&quot;]\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 3</code></li>\n\t<li><code>board[i].length == 3</code></li>\n\t<li><code>board[i][j]</code> is either <code>&#39;X&#39;</code>, <code>&#39;O&#39;</code>, or <code>&#39; &#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 536,
            "dislikes": 1133,
            "similarQuestions": "[{\"title\": \"Design Tic-Tac-Toe\", \"titleSlug\": \"design-tic-tac-toe\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                }
            ],
            "stats": "{\"totalAccepted\": \"56.5K\", \"totalSubmission\": \"162.1K\", \"totalAcceptedRaw\": 56469, \"totalSubmissionRaw\": 162071, \"acRate\": \"34.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a Tic-Tac-Toe board represented as a 3x3 string array, determine if the board position is reachable during a valid Tic-Tac-Toe game.  A valid Tic-Tac-Toe game follows the rules: players alternate placing 'X' and 'O' in empty squares, with 'X' going first. The game ends when a player has three in a row (horizontally, vertically, or diagonally) or when all squares are filled. No further moves are allowed once the game concludes.",
                "constraints": [
                    "board.length == 3",
                    "board[i].length == 3",
                    "board[i][j] is either 'X', 'O', or ' '."
                ],
                "testcases": [
                    {
                        "input": "[\"O  \",\"   \",\"   \"]",
                        "output": "false",
                        "explanation": "The first player always plays 'X', so a board starting with 'O' is impossible."
                    },
                    {
                        "input": "[\"XOX\",\" X \",\"   \"]",
                        "output": "false",
                        "explanation": "Players must take turns. There needs to be some valid pattern that can lead to this board."
                    },
                    {
                        "input": "[\"XOX\",\"O O\",\"XOX\"]",
                        "output": "true",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "design-tic-tac-toe",
                "title": "Design Tic-Tac-Toe",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool validTicTacToe(vector<string>& board) {\n    const int countX = sum(board, 'X');\n    const int countO = sum(board, 'O');\n\n    if (countX < countO || countX - countO > 1)\n      return false;\n    if (isWinned(board, 'X') && countX == countO ||\n        isWinned(board, 'O') && countX != countO)\n      return false;\n\n    return true;\n  }\n\n private:\n  int sum(const vector<string>& board, char c) {\n    int ans = 0;\n\n    for (const string& row : board)\n      ans += count(row.begin(), row.end(), c);\n\n    return ans;\n  }\n\n  bool isWinned(const vector<string>& board, char c) {\n    vector<string> rotated = rotate(board);\n\n    auto equalsToThree = [&c](const string& row) {\n      return count(row.begin(), row.end(), c) == 3;\n    };\n\n    return any_of(board.begin(), board.end(), equalsToThree) ||\n           any_of(rotated.begin(), rotated.end(), equalsToThree) ||\n           board[0][0] == c && board[1][1] == c && board[2][2] == c ||\n           board[0][2] == c && board[1][1] == c && board[2][0] == c;\n  }\n\n  vector<string> rotate(const vector<string>& board) {\n    vector<string> rotated(3);\n\n    for (const string& row : board)\n      for (int i = 0; i < 3; ++i)\n        rotated[i].push_back(row[i]);\n\n    return rotated;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean validTicTacToe(String[] board) {\n    final int countX = sum(board, 'X');\n    final int countO = sum(board, 'O');\n\n    if (countX < countO || countX - countO > 1)\n      return false;\n    if (isWinned(board, 'X') && countX == countO || //\n        isWinned(board, 'O') && countX != countO)\n      return false;\n\n    return true;\n  }\n\n  private int sum(final String[] board, char c) {\n    int ans = 0;\n\n    for (final String row : board)\n      ans += row.chars().filter(i -> i == c).count();\n\n    return ans;\n  }\n\n  private boolean isWinned(final String[] board, char c) {\n    String[] rotated = rotate(board);\n\n    return Arrays.stream(board).anyMatch(row -> row.chars().filter(i -> i == c).count() == 3) ||\n        Arrays.stream(rotated).anyMatch(row -> row.chars().filter(i -> i == c).count() == 3) ||\n        board[0].charAt(0) == c && board[1].charAt(1) == c && board[2].charAt(2) == c ||\n        board[0].charAt(2) == c && board[1].charAt(1) == c && board[2].charAt(0) == c;\n  }\n\n  private String[] rotate(final String[] board) {\n    String[] rotated = new String[3];\n\n    for (final String row : board)\n      for (int i = 0; i < 3; ++i)\n        rotated[i] += row.charAt(i);\n\n    return rotated;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def validTicTacToe(self, board: List[str]) -> bool:\n    def isWin(c: str) -> bool:\n      return any(row.count(c) == 3 for row in board) or \\\n          any(row.count(c) == 3 for row in list(zip(*board))) or \\\n          all(board[i][i] == c for i in range(3)) or \\\n          all(board[i][2 - i] == c for i in range(3))\n\n    countX = sum(row.count('X') for row in board)\n    countO = sum(row.count('O') for row in board)\n\n    if countX < countO or countX - countO > 1:\n      return False\n    if isWin('X') and countX == countO or isWin('O') and countX != countO:\n      return False\n\n    return True\n",
                "lang_text": "py"
            }
        }
    }
}