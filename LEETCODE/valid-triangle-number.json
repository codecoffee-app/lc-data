{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "611",
            "title": "Valid Triangle Number",
            "titleSlug": "valid-triangle-number",
            "content": "<p>Given an integer array <code>nums</code>, return <em>the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,3,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Valid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,3,4]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3678,
            "dislikes": 206,
            "similarQuestions": "[{\"title\": \"3Sum Smaller\", \"titleSlug\": \"3sum-smaller\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Polygon With the Largest Perimeter\", \"titleSlug\": \"find-polygon-with-the-largest-perimeter\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Greedy",
                    "slug": "greedy"
                },
                {
                    "name": "Sorting",
                    "slug": "sorting"
                }
            ],
            "stats": "{\"totalAccepted\": \"184K\", \"totalSubmission\": \"361.8K\", \"totalAcceptedRaw\": 184033, \"totalSubmissionRaw\": 361799, \"acRate\": \"50.9%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of integers `nums`, determine the number of triplets that can be chosen from the array to form the sides of a valid triangle. A valid triangle must satisfy the triangle inequality theorem: the sum of any two sides must be greater than the third side.",
                "constraints": [
                    "1 <= nums.length <= 1000",
                    "0 <= nums[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[2,2,3,4]",
                        "output": "3",
                        "explanation": "The valid triangle combinations are (2, 2, 3), (2, 3, 4), and (2, 3, 4). Note that the two '2' values are distinct elements in the array."
                    },
                    {
                        "input": "[4,2,3,4]",
                        "output": "4",
                        "explanation": "The valid triangle combinations are (2, 3, 4), (2, 3, 4), (4, 4, 2), (4,4,3). Note that the two '4' values are distinct elements in the array."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "3sum-smaller",
                "title": "3Sum Smaller",
                "isPaidOnly": true
            },
            {
                "difficulty": "Medium",
                "titleSlug": "find-polygon-with-the-largest-perimeter",
                "title": "Find Polygon With the Largest Perimeter",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int triangleNumber(vector<int>& nums) {\n    if (nums.size() < 3)\n      return 0;\n\n    int ans = 0;\n\n    std::ranges::sort(nums);\n\n    for (int k = nums.size() - 1; k > 1; --k) {\n      int i = 0;\n      int j = k - 1;\n      while (i < j)\n        if (nums[i] + nums[j] > nums[k]) {\n          // (nums[i], nums[j], nums[k])\n          // (nums[i + 1], nums[j], nums[k])\n          // ...\n          // (nums[j - 1], nums[j], nums[k])\n          ans += j - i;\n          --j;\n        } else {\n          ++i;\n        }\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int triangleNumber(int[] nums) {\n    if (nums.length < 3)\n      return 0;\n\n    int ans = 0;\n\n    Arrays.sort(nums);\n\n    for (int k = nums.length - 1; k > 1; --k) {\n      int i = 0;\n      int j = k - 1;\n      while (i < j)\n        if (nums[i] + nums[j] > nums[k]) {\n          // (nums[i], nums[j], nums[k])\n          // (nums[i + 1], nums[j], nums[k])\n          // ...\n          // (nums[j - 1], nums[j], nums[k])\n          ans += j - i;\n          --j;\n        } else {\n          ++i;\n        }\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def triangleNumber(self, nums: List[int]) -> int:\n    ans = 0\n\n    nums.sort()\n\n    for k in range(len(nums) - 1, 1, -1):\n      i = 0\n      j = k - 1\n      while i < j:\n        if nums[i] + nums[j] > nums[k]:\n          ans += j - i\n          j -= 1\n        else:\n          i += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}