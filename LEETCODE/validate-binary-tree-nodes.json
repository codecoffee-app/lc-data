{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1361",
            "title": "Validate Binary Tree Nodes",
            "titleSlug": "validate-binary-tree-nodes",
            "content": "<p>You have <code>n</code> binary tree nodes numbered from <code>0</code> to <code>n - 1</code> where node <code>i</code> has two children <code>leftChild[i]</code> and <code>rightChild[i]</code>, return <code>true</code> if and only if <strong>all</strong> the given nodes form <strong>exactly one</strong> valid binary tree.</p>\n\n<p>If node <code>i</code> has no left child then <code>leftChild[i]</code> will equal <code>-1</code>, similarly for the right child.</p>\n\n<p>Note that the nodes have no values and that we only use the node numbers in this problem.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/08/23/1503_ex1.png\" style=\"width: 195px; height: 287px;\" />\n<pre>\n<strong>Input:</strong> n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/08/23/1503_ex2.png\" style=\"width: 183px; height: 272px;\" />\n<pre>\n<strong>Input:</strong> n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/08/23/1503_ex3.png\" style=\"width: 82px; height: 174px;\" />\n<pre>\n<strong>Input:</strong> n = 2, leftChild = [1,0], rightChild = [-1,-1]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == leftChild.length == rightChild.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1 &lt;= leftChild[i], rightChild[i] &lt;= n - 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2013,
            "dislikes": 493,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                },
                {
                    "name": "Union Find",
                    "slug": "union-find"
                },
                {
                    "name": "Graph",
                    "slug": "graph"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"105.5K\", \"totalSubmission\": \"238.6K\", \"totalAcceptedRaw\": 105484, \"totalSubmissionRaw\": 238620, \"acRate\": \"44.2%\"}",
            "hints": [
                "Find the parent of each node.",
                "A valid tree must have nodes with only one parent and exactly one node with no parent."
            ],
            "rephrased": {
                "body": "Given `n` binary tree nodes numbered from `0` to `n - 1`, where node `i` has two children `leftChild[i]` and `rightChild[i]`, determine if all the given nodes form exactly one valid binary tree. A valid binary tree must satisfy the following conditions:\n\n*   All nodes must be connected.\n*   There should be only one root node (a node with no incoming edges).\n*   There should be no cycles.\n\nIf node `i` has no left child, then `leftChild[i]` will equal `-1`. Similarly for the right child.\n\nNote that the nodes have no values; only the node numbers are used.",
                "constraints": [
                    "`n == leftChild.length == rightChild.length`",
                    "`1 <= n <= 10^4`",
                    "`-1 <= leftChild[i], rightChild[i] <= n - 1`"
                ],
                "testcases": [
                    {
                        "input": "n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]",
                        "output": "true",
                        "explanation": "The nodes can be arranged into a single, valid binary tree."
                    },
                    {
                        "input": "n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]",
                        "output": "false",
                        "explanation": "There is a cycle (node 3 is both a right child of node 1 and a right child of node 2), so it's not a valid binary tree."
                    },
                    {
                        "input": "n = 2, leftChild = [1,0], rightChild = [-1,-1]",
                        "output": "false",
                        "explanation": "Node 1 is the left child of node 0 and Node 0 is the left child of node 1. Hence there is a cycle and it is not a valid binary tree"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Find the parent of each node.",
            "A valid tree must have nodes with only one parent and exactly one node with no parent."
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Union Find",
                "slug": "union-find"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ]
    }
}