{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "468",
            "title": "Validate IP Address",
            "titleSlug": "validate-ip-address",
            "content": "<p>Given a string <code>queryIP</code>, return <code>&quot;IPv4&quot;</code> if IP is a valid IPv4 address, <code>&quot;IPv6&quot;</code> if IP is a valid IPv6 address or <code>&quot;Neither&quot;</code> if IP is not a correct IP of any type.</p>\n\n<p><strong>A valid IPv4</strong> address is an IP in the form <code>&quot;x<sub>1</sub>.x<sub>2</sub>.x<sub>3</sub>.x<sub>4</sub>&quot;</code> where <code>0 &lt;= x<sub>i</sub> &lt;= 255</code> and <code>x<sub>i</sub></code> <strong>cannot contain</strong> leading zeros. For example, <code>&quot;192.168.1.1&quot;</code> and <code>&quot;192.168.1.0&quot;</code> are valid IPv4 addresses while <code>&quot;192.168.01.1&quot;</code>, <code>&quot;192.168.1.00&quot;</code>, and <code>&quot;192.168@1.1&quot;</code> are invalid IPv4 addresses.</p>\n\n<p><strong>A valid IPv6</strong> address is an IP in the form <code>&quot;x<sub>1</sub>:x<sub>2</sub>:x<sub>3</sub>:x<sub>4</sub>:x<sub>5</sub>:x<sub>6</sub>:x<sub>7</sub>:x<sub>8</sub>&quot;</code> where:</p>\n\n<ul>\n\t<li><code>1 &lt;= x<sub>i</sub>.length &lt;= 4</code></li>\n\t<li><code>x<sub>i</sub></code> is a <strong>hexadecimal string</strong> which may contain digits, lowercase English letter (<code>&#39;a&#39;</code> to <code>&#39;f&#39;</code>) and upper-case English letters (<code>&#39;A&#39;</code> to <code>&#39;F&#39;</code>).</li>\n\t<li>Leading zeros are allowed in <code>x<sub>i</sub></code>.</li>\n</ul>\n\n<p>For example, &quot;<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</code> and &quot;<code>2001:db8:85a3:0:0:8A2E:0370:7334&quot;</code> are valid IPv6 addresses, while &quot;<code>2001:0db8:85a3::8A2E:037j:7334&quot;</code> and &quot;<code>02001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</code> are invalid IPv6 addresses.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> queryIP = &quot;172.16.254.1&quot;\n<strong>Output:</strong> &quot;IPv4&quot;\n<strong>Explanation:</strong> This is a valid IPv4 address, return &quot;IPv4&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> queryIP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334&quot;\n<strong>Output:</strong> &quot;IPv6&quot;\n<strong>Explanation:</strong> This is a valid IPv6 address, return &quot;IPv6&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> queryIP = &quot;256.256.256.256&quot;\n<strong>Output:</strong> &quot;Neither&quot;\n<strong>Explanation:</strong> This is neither a IPv4 address nor a IPv6 address.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>queryIP</code> consists only of English letters, digits and the characters <code>&#39;.&#39;</code> and <code>&#39;:&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 964,
            "dislikes": 2678,
            "similarQuestions": "[{\"title\": \"IP to CIDR\", \"titleSlug\": \"ip-to-cidr\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Strong Password Checker II\", \"titleSlug\": \"strong-password-checker-ii\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"151.9K\", \"totalSubmission\": \"567.1K\", \"totalAcceptedRaw\": 151897, \"totalSubmissionRaw\": 567070, \"acRate\": \"26.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `queryIP`, determine if it represents a valid IPv4 address, a valid IPv6 address, or neither. Return \"IPv4\" if it's a valid IPv4 address, \"IPv6\" if it's a valid IPv6 address, and \"Neither\" otherwise.\n\nValid IPv4 addresses follow the format `x1.x2.x3.x4`, where each `xi` is a decimal number between 0 and 255 (inclusive) without leading zeros.  For instance, \"192.168.1.1\" is valid, but \"192.168.01.1\" is not.\n\nValid IPv6 addresses follow the format `x1:x2:x3:x4:x5:x6:x7:x8`, where each `xi` is a hexadecimal string of length between 1 and 4 characters, containing digits (0-9) and/or lowercase/uppercase letters (a-f/A-F). Leading zeros are allowed. For instance, \"2001:0db8:85a3:0:0:8A2E:0370:7334\" is valid, but \"2001:0db8:85a3::8A2E:037j:7334\" is not.",
                "constraints": [
                    "queryIP consists only of English letters, digits and the characters '.' and ':'."
                ],
                "testcases": [
                    {
                        "input": "172.16.254.1",
                        "output": "IPv4",
                        "explanation": "The input is a valid IPv4 address because it has the correct format (four decimal numbers separated by dots) and each number is within the valid range (0-255) without leading zeros."
                    },
                    {
                        "input": "2001:0db8:85a3:0:0:8A2E:0370:7334",
                        "output": "IPv6",
                        "explanation": "The input is a valid IPv6 address because it follows the correct format (eight hexadecimal strings separated by colons) and each string consists of valid hexadecimal characters (0-9, a-f, A-F) with lengths between 1 and 4."
                    },
                    {
                        "input": "256.256.256.256",
                        "output": "Neither",
                        "explanation": "The input is not a valid IPv4 address because the numbers are out of range (0-255). It is also not a valid IPv6 address because it uses dots instead of colons."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "ip-to-cidr",
                "title": "IP to CIDR",
                "isPaidOnly": true
            },
            {
                "difficulty": "Easy",
                "titleSlug": "strong-password-checker-ii",
                "title": "Strong Password Checker II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  string validIPAddress(string IP) {\n    string digit;\n    istringstream iss(IP);\n\n    if (count(IP.begin(), IP.end(), '.') == 3) {\n      for (int i = 0; i < 4; ++i)  // Make sure we have 4 parts\n        if (!getline(iss, digit, '.') || !isIPv4(digit))\n          return \"Neither\";\n      return \"IPv4\";\n    }\n\n    if (count(IP.begin(), IP.end(), ':') == 7) {\n      for (int i = 0; i < 8; ++i)  // Make sure we have 8 parts\n        if (!getline(iss, digit, ':') || !isIPv6(digit))\n          return \"Neither\";\n      return \"IPv6\";\n    }\n\n    return \"Neither\";\n  }\n\n private:\n  static inline string validIPv6Chars = \"0123456789abcdefABCDEF\";\n\n  bool isIPv4(const string& digit) {\n    if (digit.empty() || digit.length() > 3)\n      return false;\n    if (digit.length() > 1 && digit[0] == '0')\n      return false;\n\n    for (const char c : digit)\n      if (c < '0' || c > '9')\n        return false;\n\n    const int num = stoi(digit);\n    return 0 <= num && num <= 255;\n  }\n\n  bool isIPv6(const string& digit) {\n    if (digit.empty() || digit.length() > 4)\n      return false;\n\n    for (const char c : digit)\n      if (validIPv6Chars.find(c) == string::npos)\n        return false;\n\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String validIPAddress(String IP) {\n    if (IP.chars().filter(c -> c == '.').count() == 3) {\n      for (final String digit : IP.split(\"\\\\.\", -1))\n        if (!isIPv4(digit))\n          return \"Neither\";\n      return \"IPv4\";\n    }\n\n    if (IP.chars().filter(c -> c == ':').count() == 7) {\n      for (final String digit : IP.split(\"\\\\:\", -1))\n        if (!isIPv6(digit))\n          return \"Neither\";\n      return \"IPv6\";\n    }\n\n    return \"Neither\";\n  }\n\n  private static final String validIPv6Chars = \"0123456789abcdefABCDEF\";\n\n  private boolean isIPv4(final String digit) {\n    if (digit.isEmpty() || digit.length() > 3)\n      return false;\n    if (digit.length() > 1 && digit.charAt(0) == '0')\n      return false;\n\n    for (final char c : digit.toCharArray())\n      if (c < '0' || c > '9')\n        return false;\n\n    final int num = Integer.parseInt(digit);\n    return 0 <= num && num <= 255;\n  }\n\n  private boolean isIPv6(final String digit) {\n    if (digit.isEmpty() || digit.length() > 4)\n      return false;\n\n    for (final char c : digit.toCharArray())\n      if (!validIPv6Chars.contains(\"\" + c))\n        return false;\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}