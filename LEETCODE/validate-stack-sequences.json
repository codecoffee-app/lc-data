{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "946",
            "title": "Validate Stack Sequences",
            "titleSlug": "validate-stack-sequences",
            "content": "<p>Given two integer arrays <code>pushed</code> and <code>popped</code> each with distinct values, return <code>true</code><em> if this could have been the result of a sequence of push and pop operations on an initially empty stack, or </em><code>false</code><em> otherwise.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We might do the following sequence:\npush(1), push(2), push(3), push(4),\npop() -&gt; 4,\npush(5),\npop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> 1 cannot be popped before 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pushed.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= pushed[i] &lt;= 1000</code></li>\n\t<li>All the elements of <code>pushed</code> are <strong>unique</strong>.</li>\n\t<li><code>popped.length == pushed.length</code></li>\n\t<li><code>popped</code> is a permutation of <code>pushed</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5800,
            "dislikes": 118,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"291.5K\", \"totalSubmission\": \"419.8K\", \"totalAcceptedRaw\": 291465, \"totalSubmissionRaw\": 419843, \"acRate\": \"69.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two integer arrays `pushed` and `popped`, both containing distinct values, determine if `popped` could be the result of a sequence of push and pop operations on an initially empty stack, using the elements from `pushed` in order. Return `true` if possible, and `false` otherwise.",
                "constraints": [
                    "1 <= pushed.length <= 1000",
                    "0 <= pushed[i] <= 1000",
                    "All the elements of `pushed` are unique.",
                    "popped.length == pushed.length",
                    "`popped` is a permutation of `pushed`."
                ],
                "testcases": [
                    {
                        "input": {
                            "pushed": "[1,2,3,4,5]",
                            "popped": "[4,5,3,2,1]"
                        },
                        "output": "true",
                        "explanation": "The `popped` array could be achieved through the following operations: push(1), push(2), push(3), push(4), pop() -> 4, push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1"
                    },
                    {
                        "input": {
                            "pushed": "[1,2,3,4,5]",
                            "popped": "[4,3,5,1,2]"
                        },
                        "output": "false",
                        "explanation": "The `popped` array is not achievable because 1 cannot be popped before 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {\n    stack<int> stack;\n    int i = 0;  // popped's index\n\n    for (const int x : pushed) {\n      stack.push(x);\n      while (!stack.empty() && stack.top() == popped[i]) {\n        stack.pop();\n        ++i;\n      }\n    }\n\n    return stack.empty();\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean validateStackSequences(int[] pushed, int[] popped) {\n    Deque<Integer> stack = new ArrayDeque<>();\n    int i = 0; // popped's index\n\n    for (final int x : pushed) {\n      stack.push(x);\n      while (!stack.isEmpty() && stack.peek() == popped[i]) {\n        stack.pop();\n        ++i;\n      }\n    }\n\n    return stack.isEmpty();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:\n    stack = []\n    i = 0  # popped's index\n\n    for x in pushed:\n      stack.append(x)\n      while stack and stack[-1] == popped[i]:\n        stack.pop()\n        i += 1\n\n    return not stack\n",
                "lang_text": "py"
            }
        }
    }
}