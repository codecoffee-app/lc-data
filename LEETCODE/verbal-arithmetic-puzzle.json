{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1307",
            "title": "Verbal Arithmetic Puzzle",
            "titleSlug": "verbal-arithmetic-puzzle",
            "content": "<p>Given an equation, represented by <code>words</code> on the left side and the <code>result</code> on the right side.</p>\n\n<p>You need to check if the equation is solvable under the following rules:</p>\n\n<ul>\n\t<li>Each character is decoded as one digit (0 - 9).</li>\n\t<li>No two characters can map to the same digit.</li>\n\t<li>Each <code>words[i]</code> and <code>result</code> are decoded as one number <strong>without</strong> leading zeros.</li>\n\t<li>Sum of numbers on the left side (<code>words</code>) will equal to the number on the right side (<code>result</code>).</li>\n</ul>\n\n<p>Return <code>true</code> <em>if the equation is solvable, otherwise return</em> <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;SEND&quot;,&quot;MORE&quot;], result = &quot;MONEY&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Map &#39;S&#39;-&gt; 9, &#39;E&#39;-&gt;5, &#39;N&#39;-&gt;6, &#39;D&#39;-&gt;7, &#39;M&#39;-&gt;1, &#39;O&#39;-&gt;0, &#39;R&#39;-&gt;8, &#39;Y&#39;-&gt;&#39;2&#39;\nSuch that: &quot;SEND&quot; + &quot;MORE&quot; = &quot;MONEY&quot; ,  9567 + 1085 = 10652</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;SIX&quot;,&quot;SEVEN&quot;,&quot;SEVEN&quot;], result = &quot;TWENTY&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Map &#39;S&#39;-&gt; 6, &#39;I&#39;-&gt;5, &#39;X&#39;-&gt;0, &#39;E&#39;-&gt;8, &#39;V&#39;-&gt;7, &#39;N&#39;-&gt;2, &#39;T&#39;-&gt;1, &#39;W&#39;-&gt;&#39;3&#39;, &#39;Y&#39;-&gt;4\nSuch that: &quot;SIX&quot; + &quot;SEVEN&quot; + &quot;SEVEN&quot; = &quot;TWENTY&quot; ,  650 + 68782 + 68782 = 138214</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;LEET&quot;,&quot;CODE&quot;], result = &quot;POINT&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no possible mapping to satisfy the equation, so we return false.\nNote that two different characters cannot map to the same digit.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= words.length &lt;= 5</code></li>\n\t<li><code>1 &lt;= words[i].length, result.length &lt;= 7</code></li>\n\t<li><code>words[i], result</code> contain only uppercase English letters.</li>\n\t<li>The number of different characters used in the expression is at most <code>10</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 485,
            "dislikes": 121,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                }
            ],
            "stats": "{\"totalAccepted\": \"12.2K\", \"totalSubmission\": \"35.8K\", \"totalAcceptedRaw\": 12157, \"totalSubmissionRaw\": 35753, \"acRate\": \"34.0%\"}",
            "hints": [
                "Use Backtracking and pruning to solve this problem.",
                "If you set the values of some digits (from right to left), the other digits will be constrained."
            ],
            "rephrased": {
                "body": "Given an equation where `words` represent the left side and `result` represents the right side, determine if the equation is solvable. Each letter must be assigned a unique digit (0-9). No word or the result can have a leading zero after decoding, and the sum of the decoded `words` must equal the decoded `result`.",
                "constraints": [
                    "2 <= words.length <= 5",
                    "1 <= words[i].length, result.length <= 7",
                    "words[i], result contain only uppercase English letters.",
                    "The number of different characters used in the expression is at most 10."
                ],
                "testcases": [
                    {
                        "input": "words = [\"SEND\",\"MORE\"], result = \"MONEY\"",
                        "output": "true",
                        "explanation": "One possible solution is: S=9, E=5, N=6, D=7, M=1, O=0, R=8, Y=2. This satisfies SEND + MORE = MONEY (9567 + 1085 = 10652)."
                    },
                    {
                        "input": "words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"",
                        "output": "true",
                        "explanation": "One possible solution is: S=6, I=5, X=0, E=8, V=7, N=2, T=1, W=3, Y=4. This satisfies SIX + SEVEN + SEVEN = TWENTY (650 + 68782 + 68782 = 138214)."
                    },
                    {
                        "input": "words = [\"LEET\",\"CODE\"], result = \"POINT\"",
                        "output": "false",
                        "explanation": "There is no possible mapping of letters to digits that satisfies the equation and the constraints."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use Backtracking and pruning to solve this problem.",
            "If you set the values of some digits (from right to left), the other digits will be constrained."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isSolvable(vector<string>& words, string result) {\n    usedDigit = vector<bool>(10);\n    words.push_back(result);\n    rows = words.size();\n    for (const string& word : words)\n      cols = max(cols, static_cast<int>(word.length()));\n    return dfs(words, 0, 0, 0);\n  }\n\n private:\n  unordered_map<char, int> letterToDigit;\n  vector<bool> usedDigit;\n  int rows;\n  int cols;\n\n  bool dfs(vector<string>& words, int row, int col, int sum) {\n    if (col == cols)\n      return sum == 0;\n    if (row == rows)\n      return sum % 10 == 0 && dfs(words, 0, col + 1, sum / 10);\n\n    string word = words[row];\n    if (col >= word.length())\n      return dfs(words, row + 1, col, sum);\n\n    char letter = word[word.length() - col - 1];\n    int sign = row == rows - 1 ? -1 : 1;\n\n    if (const auto it = letterToDigit.find(letter);\n        it != letterToDigit.cend() &&\n        (it->second > 0 || col < word.length() - 1))\n      return dfs(words, row + 1, col, sum + sign * letterToDigit[letter]);\n\n    for (int digit = 0; digit < 10; ++digit)\n      if (!usedDigit[digit] && (digit > 0 || col + 1 < word.length())) {\n        letterToDigit[letter] = digit;\n        usedDigit[digit] = true;\n        if (dfs(words, row + 1, col, sum + sign * digit))\n          return true;\n        usedDigit[digit] = false;\n        letterToDigit.erase(letter);\n      }\n\n    return false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isSolvable(String[] words, String result) {\n    rows = words.length + 1;\n    for (final String word : words)\n      cols = Math.max(cols, word.length());\n    cols = Math.max(cols, result.length());\n    return dfs(words, result, 0, 0, 0);\n  }\n\n  private Map<Character, Integer> letterToDigit = new HashMap<>();\n  private boolean[] usedDigit = new boolean[10];\n  private int rows = 0;\n  private int cols = 0;\n\n  private boolean dfs(String[] words, String result, int row, int col, int sum) {\n    if (col == cols)\n      return sum == 0;\n    if (row == rows)\n      return sum % 10 == 0 && dfs(words, result, 0, col + 1, sum / 10);\n\n    String word = row == rows - 1 ? result : words[row];\n    if (col >= word.length())\n      return dfs(words, result, row + 1, col, sum);\n\n    char letter = word.charAt(word.length() - col - 1);\n    int sign = row == rows - 1 ? -1 : 1;\n\n    if (letterToDigit.containsKey(letter) &&\n        (letterToDigit.get(letter) > 0 || col < word.length() - 1))\n      return dfs(words, result, row + 1, col, sum + sign * letterToDigit.get(letter));\n\n    for (int digit = 0; digit < 10; ++digit)\n      if (!usedDigit[digit] && (digit > 0 || col < word.length() - 1)) {\n        letterToDigit.put(letter, digit);\n        usedDigit[digit] = true;\n        if (dfs(words, result, row + 1, col, sum + sign * letterToDigit.get(letter)))\n          return true;\n        usedDigit[digit] = false;\n        letterToDigit.remove(letter);\n      }\n\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isSolvable(self, words: List[str], result: str) -> bool:\n    words.append(result)\n    rows = len(words)\n    cols = max(map(len, words))\n    letterToDigit = {}\n    usedDigit = [False] * 10\n\n    def dfs(row: int, col: int, summ: int) -> bool:\n      if col == cols:\n        return summ == 0\n      if row == rows:\n        return summ % 10 == 0 and dfs(0, col + 1, summ // 10)\n\n      word = words[row]\n      if col >= len(word):\n        return dfs(row + 1, col, summ)\n\n      letter = word[~col]\n      sign = -1 if row == rows - 1 else 1\n\n      if letter in letterToDigit and (letterToDigit[letter] > 0 or col < len(word) - 1):\n        return dfs(row + 1, col, summ + sign * letterToDigit[letter])\n\n      for digit, used in enumerate(usedDigit):\n        if not used and (digit > 0 or col < len(word) - 1):\n          letterToDigit[letter] = digit\n          usedDigit[digit] = True\n          if dfs(row + 1, col, summ + sign * digit):\n            return True\n          usedDigit[digit] = False\n          if letter in letterToDigit:\n            del letterToDigit[letter]\n\n      return False\n\n    return dfs(0, 0, 0)\n",
                "lang_text": "py"
            }
        }
    }
}