{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "331",
            "title": "Verify Preorder Serialization of a Binary Tree",
            "titleSlug": "verify-preorder-serialization-of-a-binary-tree",
            "content": "<p>One way to serialize a binary tree is to use <strong>preorder traversal</strong>. When we encounter a non-null node, we record the node&#39;s value. If it is a null node, we record using a sentinel value such as <code>&#39;#&#39;</code>.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/12/pre-tree.jpg\" style=\"width: 362px; height: 293px;\" />\n<p>For example, the above binary tree can be serialized to the string <code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>, where <code>&#39;#&#39;</code> represents a null node.</p>\n\n<p>Given a string of comma-separated values <code>preorder</code>, return <code>true</code> if it is a correct preorder traversal serialization of a binary tree.</p>\n\n<p>It is <strong>guaranteed</strong> that each comma-separated value in the string must be either an integer or a character <code>&#39;#&#39;</code> representing null pointer.</p>\n\n<p>You may assume that the input format is always valid.</p>\n\n<ul>\n\t<li>For example, it could never contain two consecutive commas, such as <code>&quot;1,,3&quot;</code>.</li>\n</ul>\n\n<p><strong>Note:&nbsp;</strong>You are not allowed to reconstruct the tree.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> preorder = \"1,#\"\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> preorder = \"9,#,#,1\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= preorder.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>preorder</code> consist of integers in the range <code>[0, 100]</code> and <code>&#39;#&#39;</code> separated by commas <code>&#39;,&#39;</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2243,
            "dislikes": 116,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Stack",
                    "slug": "stack"
                },
                {
                    "name": "Tree",
                    "slug": "tree"
                },
                {
                    "name": "Binary Tree",
                    "slug": "binary-tree"
                }
            ],
            "stats": "{\"totalAccepted\": \"135.8K\", \"totalSubmission\": \"302.1K\", \"totalAcceptedRaw\": 135824, \"totalSubmissionRaw\": 302108, \"acRate\": \"45.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Determine if a given string represents a valid preorder traversal serialization of a binary tree.  The serialization format uses comma-separated values.  Non-null nodes are represented by their integer value, and null nodes are represented by the character '#'.",
                "constraints": [
                    "1 <= preorder.length <= 10^4",
                    "preorder consists of integers in the range [0, 100] and '#' separated by commas ','."
                ],
                "testcases": [
                    {
                        "input": "9,3,4,#,#,1,#,#,2,#,6,#,#",
                        "output": "true",
                        "explanation": null
                    },
                    {
                        "input": "1,#",
                        "output": "false",
                        "explanation": null
                    },
                    {
                        "input": "9,#,#,1",
                        "output": "false",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isValidSerialization(string preorder) {\n    int degree = 1;  // OutDegree (children) - inDegree (parent)\n    istringstream iss(preorder);\n\n    for (string node; getline(iss, node, ',');) {\n      if (--degree < 0)\n        return false;\n      if (node != \"#\")\n        degree += 2;\n    }\n\n    return degree == 0;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isValidSerialization(String preorder) {\n    int degree = 1; // OutDegree (children) - inDegree (parent)\n\n    for (final String node : preorder.split(\",\")) {\n      if (--degree < 0) // One parent\n        return false;\n      if (!node.equals(\"#\"))\n        degree += 2; // Two children\n    }\n\n    return degree == 0;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isValidSerialization(self, preorder: str) -> bool:\n    degree = 1  # OutDegree (children) - inDegree (parent)\n\n    for node in preorder.split(','):\n      degree -= 1\n      if degree < 0:\n        return False\n      if node != '#':\n        degree += 2\n\n    return degree == 0\n",
                "lang_text": "py"
            }
        }
    }
}