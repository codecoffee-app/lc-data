{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "953",
            "title": "Verifying an Alien Dictionary",
            "titleSlug": "verifying-an-alien-dictionary",
            "content": "<p>In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different <code>order</code>. The <code>order</code> of the alphabet is some permutation of lowercase letters.</p>\n\n<p>Given a sequence of <code>words</code> written in the alien language, and the <code>order</code> of the alphabet, return <code>true</code> if and only if the given <code>words</code> are sorted lexicographically in this alien language.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;hello&quot;,&quot;leetcode&quot;], order = &quot;hlabcdefgijkmnopqrstuvwxyz&quot;\n<strong>Output:</strong> true\n<strong>Explanation: </strong>As &#39;h&#39; comes before &#39;l&#39; in this language, then the sequence is sorted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;word&quot;,&quot;world&quot;,&quot;row&quot;], order = &quot;worldabcefghijkmnpqstuvxyz&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>As &#39;d&#39; comes after &#39;l&#39; in this language, then words[0] &gt; words[1], hence the sequence is unsorted.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;apple&quot;,&quot;app&quot;], order = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>The first three characters &quot;app&quot; match, and the second string is shorter (in size.) According to lexicographical rules &quot;apple&quot; &gt; &quot;app&quot;, because &#39;l&#39; &gt; &#39;&empty;&#39;, where &#39;&empty;&#39; is defined as the blank character which is less than any other character (<a href=\"https://en.wikipedia.org/wiki/Lexicographical_order\" target=\"_blank\">More info</a>).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>order.length == 26</code></li>\n\t<li>All characters in <code>words[i]</code> and <code>order</code> are English lowercase letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4794,
            "dislikes": 1593,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"484.6K\", \"totalSubmission\": \"885.2K\", \"totalAcceptedRaw\": 484640, \"totalSubmissionRaw\": 885171, \"acRate\": \"54.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a sequence of words written in an alien language and the order of the alphabet in that language, determine if the given words are sorted lexicographically according to the alien alphabet.",
                "constraints": [
                    "1 <= words.length <= 100",
                    "1 <= words[i].length <= 20",
                    "order.length == 26",
                    "All characters in words[i] and order are English lowercase letters."
                ],
                "testcases": [
                    {
                        "input": "words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"",
                        "output": "true",
                        "explanation": "Since 'h' comes before 'l' in the provided alien alphabet, the sequence of words is lexicographically sorted."
                    },
                    {
                        "input": "words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"",
                        "output": "false",
                        "explanation": "Since 'd' comes after 'l' in the given alien alphabet, \"word\" should come after \"world\", thus the sequence is not sorted."
                    },
                    {
                        "input": "words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"",
                        "output": "false",
                        "explanation": "The words share the prefix \"app\". Because \"apple\" is longer than \"app\", it should come after \"app\" lexicographically. Therefore the sequence is not sorted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool isAlienSorted(vector<string>& words, const string& order) {\n    vector<char> map(26);  // Order = \"bca\" -> map = ['c', 'a', 'b']\n\n    for (int i = 0; i < 26; ++i)\n      map[order[i] - 'a'] = i + 'a';\n\n    for (string& word : words)\n      for (char& c : word)\n        c = map[c - 'a'];\n\n    return is_sorted(words.begin(), words.end());\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean isAlienSorted(String[] words, String order) {\n    char[] map = new char[26]; // Order = \"bca\" -> map = ['c', 'a', 'b']\n\n    for (int i = 0; i < 26; ++i)\n      map[order.charAt(i) - 'a'] = (char) (i + 'a');\n\n    for (int i = 0; i + 1 < words.length; ++i)\n      if (bigger(words[i], words[i + 1], map))\n        return false;\n\n    return true;\n  }\n\n  private boolean bigger(final String s1, final String s2, final char[] map) {\n    for (int i = 0; i < s1.length() && i < s2.length(); ++i)\n      if (s1.charAt(i) != s2.charAt(i))\n        return map[s1.charAt(i) - 'a'] > map[s2.charAt(i) - 'a'];\n    return s1.length() > s2.length();\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def isAlienSorted(self, words: List[str], order: str) -> bool:\n    dict = {c: i for i, c in enumerate(order)}\n    words = [[dict[c] for c in word] for word in words]\n    return all(w1 <= w2 for w1, w2 in zip(words, words[1:]))\n",
                "lang_text": "py"
            }
        }
    }
}