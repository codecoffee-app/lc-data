{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2786",
            "title": "Visit Array Positions to Maximize Score",
            "titleSlug": "visit-array-positions-to-maximize-score",
            "content": "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and a positive integer <code>x</code>.</p>\n\n<p>You are <strong>initially</strong> at position <code>0</code> in the array and you can visit other positions according to the following rules:</p>\n\n<ul>\n\t<li>If you are currently in position <code>i</code>, then you can move to <strong>any</strong> position <code>j</code> such that <code>i &lt; j</code>.</li>\n\t<li>For each position <code>i</code> that you visit, you get a score of <code>nums[i]</code>.</li>\n\t<li>If you move from a position <code>i</code> to a position <code>j</code> and the <strong>parities</strong> of <code>nums[i]</code> and <code>nums[j]</code> differ, then you lose a score of <code>x</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> total score you can get</em>.</p>\n\n<p><strong>Note</strong> that initially you have <code>nums[0]</code> points.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,6,1,9,2], x = 5\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> We can visit the following positions in the array: 0 -&gt; 2 -&gt; 3 -&gt; 4.\nThe corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -&gt; 3 will make you lose a score of x = 5.\nThe total score will be: 2 + 6 + 1 + 9 - 5 = 13.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,6,8], x = 3\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> All the integers in the array have the same parities, so we can visit all of them without losing any score.\nThe total score is: 2 + 4 + 6 + 8 = 20.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], x &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 469,
            "dislikes": 26,
            "similarQuestions": "[{\"title\": \"Jump Game II\", \"titleSlug\": \"jump-game-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Stone Game\", \"titleSlug\": \"stone-game\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"19K\", \"totalSubmission\": \"53K\", \"totalAcceptedRaw\": 19037, \"totalSubmissionRaw\": 52953, \"acRate\": \"36.0%\"}",
            "hints": [
                "How can we use dynamic programming to solve the problem?",
                "Let dp[i] be the answer to the subarray nums[0\u2026i]. What are the transitions of this dp?"
            ],
            "rephrased": {
                "body": "Given a 0-indexed integer array `nums` and a positive integer `x`, you start at position 0 with a score of `nums[0]`. You can move from position `i` to any position `j` where `i < j`. Visiting a position `i` adds `nums[i]` to your score. However, if you move from position `i` to position `j` and the parities of `nums[i]` and `nums[j]` are different, you lose a score of `x`. Find the maximum total score you can obtain.",
                "constraints": [
                    "2 <= nums.length <= 10^5",
                    "1 <= nums[i], x <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "nums = [2,3,6,1,9,2], x = 5",
                        "output": "13",
                        "explanation": "One optimal path is 0 -> 2 -> 3 -> 4. The corresponding values are 2, 6, 1, and 9. The move from 6 to 1 (positions 2 and 3) incurs a penalty of x = 5 because their parities differ. Total score: 2 + 6 + 1 + 9 - 5 = 13."
                    },
                    {
                        "input": "nums = [2,4,6,8], x = 3",
                        "output": "20",
                        "explanation": "Since all integers have the same parity, there's no penalty for moving between them.  The optimal path is to visit all positions: 0 -> 1 -> 2 -> 3. Total score: 2 + 4 + 6 + 8 = 20."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "jump-game-ii",
                "title": "Jump Game II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "stone-game",
                "title": "Stone Game",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "How can we use dynamic programming to solve the problem?",
            "Let dp[i] be the answer to the subarray nums[0\u2026i]. What are the transitions of this dp?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  long long maxScore(vector<int>& nums, int x) {\n    // Note that we always need to take nums[0], so the initial definition might\n    // not hold true.\n\n    // dp0 := max score so far with nums ending in an even number\n    long long dp0 = nums[0] - (nums[0] % 2 == 1 ? x : 0);\n    // dp1 := max score so far with nums ending in an odd number\n    long long dp1 = nums[0] - (nums[0] % 2 == 0 ? x : 0);\n\n    for (int i = 1; i < nums.size(); ++i)\n      if (nums[i] % 2 == 0)\n        dp0 = nums[i] + max(dp0, dp1 - x);\n      else\n        dp1 = nums[i] + max(dp1, dp0 - x);\n\n    return max(dp0, dp1);\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public long maxScore(int[] nums, int x) {\n    // Note that we always need to take nums[0], so the initial definition might\n    // not hold true.\n\n    // dp0 := max score so far with nums ending in an even number\n    long dp0 = nums[0] - (nums[0] % 2 == 1 ? x : 0);\n    // dp1 := max score so far with nums ending in an odd number\n    long dp1 = nums[0] - (nums[0] % 2 == 0 ? x : 0);\n\n    for (int i = 1; i < nums.length; ++i)\n      if (nums[i] % 2 == 0)\n        dp0 = nums[i] + Math.max(dp0, dp1 - x);\n      else\n        dp1 = nums[i] + Math.max(dp1, dp0 - x);\n\n    return Math.max(dp0, dp1);\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def maxScore(self, nums: List[int], x: int) -> int:\n    # Note that we always need to take nums[0], so the initial definition might\n    # not hold true.\n\n    # dp0 := max score so far with nums ending in an even number\n    dp0 = nums[0] - (x if nums[0] % 2 == 1 else 0)\n    # dp0 := max score so far with nums ending in an odd number\n    dp1 = nums[0] - (x if nums[0] % 2 == 0 else 0)\n\n    for i in range(1, len(nums)):\n      if nums[i] % 2 == 0:\n        dp0 = nums[i] + max(dp0, dp1 - x)\n      else:\n        dp1 = nums[i] + max(dp1, dp0 - x)\n\n    return max(dp0, dp1)\n",
                "lang_text": "py"
            }
        }
    }
}