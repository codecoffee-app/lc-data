{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "966",
            "title": "Vowel Spellchecker",
            "titleSlug": "vowel-spellchecker",
            "content": "<p>Given a <code>wordlist</code>, we want to implement a spellchecker that converts a query word into a correct word.</p>\n\n<p>For a given <code>query</code> word, the spell checker handles two categories of spelling mistakes:</p>\n\n<ul>\n\t<li>Capitalization: If the query matches a word in the wordlist (<strong>case-insensitive</strong>), then the query word is returned with the same case as the case in the wordlist.\n\n\t<ul>\n\t\t<li>Example: <code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;YellOw&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\n\t\t<li>Example: <code>wordlist = [&quot;Yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;Yellow&quot;</code></li>\n\t\t<li>Example: <code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>Vowel Errors: If after replacing the vowels <code>(&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;)</code> of the query word with any vowel individually, it matches a word in the wordlist (<strong>case-insensitive</strong>), then the query word is returned with the same case as the match in the wordlist.\n\t<ul>\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yollow&quot;</code>: <code>correct = &quot;YellOw&quot;</code></li>\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yeellow&quot;</code>: <code>correct = &quot;&quot;</code> (no match)</li>\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yllw&quot;</code>: <code>correct = &quot;&quot;</code> (no match)</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>In addition, the spell checker operates under the following precedence rules:</p>\n\n<ul>\n\t<li>When the query exactly matches a word in the wordlist (<strong>case-sensitive</strong>), you should return the same word back.</li>\n\t<li>When the query matches a word up to capitlization, you should return the first such match in the wordlist.</li>\n\t<li>When the query matches a word up to vowel errors, you should return the first such match in the wordlist.</li>\n\t<li>If the query has no matches in the wordlist, you should return the empty string.</li>\n</ul>\n\n<p>Given some <code>queries</code>, return a list of words <code>answer</code>, where <code>answer[i]</code> is the correct word for <code>query = queries[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]\n<strong>Output:</strong> [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> wordlist = [\"yellow\"], queries = [\"YellOw\"]\n<strong>Output:</strong> [\"yellow\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= wordlist.length, queries.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= wordlist[i].length, queries[i].length &lt;= 7</code></li>\n\t<li><code>wordlist[i]</code> and <code>queries[i]</code> consist only of only English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 412,
            "dislikes": 801,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"40.3K\", \"totalSubmission\": \"78.4K\", \"totalAcceptedRaw\": 40266, \"totalSubmissionRaw\": 78384, \"acRate\": \"51.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Implement a spellchecker that corrects spelling mistakes in query words based on a given wordlist. The spellchecker addresses two types of errors: capitalization and vowel errors. The spellchecker operates under the following precedence:\n\n1.  Exact match (case-sensitive): Return the word as is.\n2.  Capitalization match (case-insensitive): Return the first matching word in the wordlist, preserving its original capitalization.\n3.  Vowel error match (case-insensitive): Replace vowels ('a', 'e', 'i', 'o', 'u') in the query word with any vowel and check for a match. Return the first matching word in the wordlist, preserving its original capitalization.\n4.  No match: Return an empty string.\n",
                "constraints": [
                    "1 <= wordlist.length, queries.length <= 5000",
                    "1 <= wordlist[i].length, queries[i].length <= 7",
                    "wordlist[i] and queries[i] consist only of English letters."
                ],
                "testcases": [
                    {
                        "input": "wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]",
                        "output": "[\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]",
                        "explanation": null
                    },
                    {
                        "input": "wordlist = [\"yellow\"], queries = [\"YellOw\"]",
                        "output": "[\"yellow\"]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> spellchecker(vector<string>& wordlist,\n                              vector<string>& queries) {\n    vector<string> ans;\n    unordered_map<string, string> dict;\n\n    for (const string& word : wordlist) {\n      dict.insert({word, word});\n      dict.insert({lowerKey(word), word});\n      dict.insert({vowelKey(word), word});\n    }\n\n    for (const string& query : queries)\n      if (const auto it = dict.find(query); it != dict.cend())\n        ans.push_back(it->second);\n      else if (const auto it = dict.find(lowerKey(query)); it != dict.cend())\n        ans.push_back(it->second);\n      else if (const auto it = dict.find(vowelKey(query)); it != dict.cend())\n        ans.push_back(it->second);\n      else\n        ans.push_back(\"\");\n\n    return ans;\n  }\n\n private:\n  string lowerKey(const string& word) {\n    string s{\"$\"};\n    for (const char c : word)\n      s += tolower(c);\n    return s;\n  }\n\n  string vowelKey(const string& word) {\n    string s;\n    for (const char c : word)\n      s += isVowel(c) ? '*' : tolower(c);\n    return s;\n  }\n\n  bool isVowel(char c) {\n    static constexpr string_view kVowels = \"aeiouAEIOU\";\n    return kVowels.find(c) != string_view::npos;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public String[] spellchecker(String[] wordlist, String[] queries) {\n    List<String> ans = new ArrayList<>();\n    Map<String, String> dict = new HashMap<>();\n\n    for (final String word : wordlist) {\n      dict.putIfAbsent(word, word);\n      dict.putIfAbsent(lowerKey(word), word);\n      dict.putIfAbsent(vowelKey(word), word);\n    }\n\n    for (final String query : queries)\n      if (dict.containsKey(query))\n        ans.add(dict.get(query));\n      else if (dict.containsKey(lowerKey(query)))\n        ans.add(dict.get(lowerKey(query)));\n      else if (dict.containsKey(vowelKey(query)))\n        ans.add(dict.get(vowelKey(query)));\n      else\n        ans.add(\"\");\n\n    return ans.toArray(new String[0]);\n  }\n\n  private String lowerKey(final String word) {\n    return \"$\" + word.toLowerCase();\n  }\n\n  private String vowelKey(final String word) {\n    StringBuilder sb = new StringBuilder();\n    for (final char c : word.toCharArray())\n      sb.append(isVowel(c) ? '*' : Character.toLowerCase(c));\n    return sb.toString();\n  }\n\n  private boolean isVowel(char c) {\n    return \"aeiouAEIOU\".indexOf(c) != -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n    def lowerKey(word: str) -> str:\n      return '$' + ''.join([c.lower() for c in word])\n\n    def vowelKey(word: str) -> str:\n      return ''.join(['*' if c.lower() in 'aeiou' else c.lower() for c in word])\n\n    ans = []\n    dict = {}\n\n    for word in wordlist:\n      dict.setdefault(word, word)\n      dict.setdefault(lowerKey(word), word)\n      dict.setdefault(vowelKey(word), word)\n\n    for query in queries:\n      if query in dict:\n        ans.append(dict[query])\n      elif lowerKey(query) in dict:\n        ans.append(dict[lowerKey(query)])\n      elif vowelKey(query) in dict:\n        ans.append(dict[vowelKey(query)])\n      else:\n        ans.append('')\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}