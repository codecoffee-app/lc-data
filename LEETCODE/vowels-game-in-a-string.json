{
    "failed": false,
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "3227",
            "title": "Vowels Game in a String",
            "titleSlug": "vowels-game-in-a-string",
            "content": "<p>Alice and Bob are playing a game on a string.</p>\n\n<p>You are given a string <code>s</code>, Alice and Bob will take turns playing the following game where Alice starts <strong>first</strong>:</p>\n\n<ul>\n\t<li>On Alice&#39;s turn, she has to remove any <strong>non-empty</strong> <span data-keyword=\"substring\">substring</span> from <code>s</code> that contains an <strong>odd</strong> number of vowels.</li>\n\t<li>On Bob&#39;s turn, he has to remove any <strong>non-empty</strong> <span data-keyword=\"substring\">substring</span> from <code>s</code> that contains an <strong>even</strong> number of vowels.</li>\n</ul>\n\n<p>The first player who cannot make a move on their turn loses the game. We assume that both Alice and Bob play <strong>optimally</strong>.</p>\n\n<p>Return <code>true</code> if Alice wins the game, and <code>false</code> otherwise.</p>\n\n<p>The English vowels are: <code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, and <code>u</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;leetcoder&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong><br />\nAlice can win the game as follows:</p>\n\n<ul>\n\t<li>Alice plays first, she can delete the underlined substring in <code>s = &quot;<u><strong>leetco</strong></u>der&quot;</code> which contains 3 vowels. The resulting string is <code>s = &quot;der&quot;</code>.</li>\n\t<li>Bob plays second, he can delete the underlined substring in <code>s = &quot;<u><strong>d</strong></u>er&quot;</code> which contains 0 vowels. The resulting string is <code>s = &quot;er&quot;</code>.</li>\n\t<li>Alice plays third, she can delete the whole string <code>s = &quot;<strong><u>er</u></strong>&quot;</code> which contains 1 vowel.</li>\n\t<li>Bob plays fourth, since the string is empty, there is no valid play for Bob. So Alice wins the game.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;bbcd&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong><br />\nThere is no valid play for Alice in her first turn, so Alice loses the game.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 108,
            "dislikes": 23,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Brainteaser",
                    "slug": "brainteaser"
                },
                {
                    "name": "Game Theory",
                    "slug": "game-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"33K\", \"totalSubmission\": \"53.6K\", \"totalAcceptedRaw\": 33004, \"totalSubmissionRaw\": 53602, \"acRate\": \"61.6%\"}",
            "hints": [
                "If there are no vowels in the initial string, then Bob wins.",
                "If the number of vowels in the initial string is odd, then Alice can remove the whole string on her first turn and win.",
                "What if the number of vowels in the initial string is even? What\u2019s the optimal play for Alice\u2019s first turn?"
            ],
            "rephrased": {
                "body": "Alice and Bob are playing a game on a string. Given a string `s`, they take turns removing substrings. Alice goes first and removes substrings containing an odd number of vowels. Bob removes substrings containing an even number of vowels. The first player unable to make a move loses. Assuming both play optimally, determine if Alice wins.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "leetcoder",
                        "output": "true",
                        "explanation": "Alice can remove 'leetco' (3 vowels), leaving 'der'. Bob removes 'd' (0 vowels), leaving 'er'. Alice removes 'er' (1 vowel), leaving an empty string. Bob cannot move, so Alice wins."
                    },
                    {
                        "input": "bbcd",
                        "output": "false",
                        "explanation": "Alice cannot make a valid first move as there are no substrings with an odd number of vowels. Therefore, Alice loses the game."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "If there are no vowels in the initial string, then Bob wins.",
            "If the number of vowels in the initial string is odd, then Alice can remove the whole string on her first turn and win.",
            "What if the number of vowels in the initial string is even? What\u2019s the optimal play for Alice\u2019s first turn?"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Brainteaser",
                "slug": "brainteaser"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool doesAliceWin(string s) {\n    // Let k be the number of vowels in s.\n    // 1. If k == 0, Bob wins since Alice has no vowels to pick.\n    // 2. If k % 2 == 1, Alice wins since Alice can pick the entire string.\n    // 3. If k % 2 == 0, Alice wins since Alice can pick (k - 1) vowels,\n    // then Bob will either pick a substring containing 0 vowels, resulting in\n    // Alice picking the remaining entire string, or Bob couldn't pick at all\n    // (the last vowel).\n    return ranges::any_of(s, [=](char c) { return isVowel(c); });\n  }\n\n private:\n  bool isVowel(char c) {\n    static constexpr string_view kVowels = \"aeiou\";\n    return kVowels.find(c) != string_view::npos;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean doesAliceWin(String s) {\n    // Let k be the number of vowels in s.\n    // 1. If k == 0, Bob wins since Alice has no vowels to pick.\n    // 2. If k % 2 == 1, Alice wins since Alice can pick the entire string.\n    // 3. If k % 2 == 0, Alice wins since Alice can pick (k - 1) vowels,\n    // then Bob will either pick a substring containing 0 vowels, resulting in\n    // Alice picking the remaining entire string, or Bob couldn't pick at all\n    // (the last vowel).\n    return s.chars().anyMatch(c -> isVowel((char) c));\n  }\n\n  private boolean isVowel(char c) {\n    return \"aeiou\".indexOf(Character.toLowerCase(c)) != -1;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def doesAliceWin(self, s: str) -> bool:\n    # Let k be the number of vowels in s.\n    # 1. If k == 0, Bob wins since Alice has no vowels to pick.\n    # 2. If k % 2 == 1, Alice wins since Alice can pick the entire string.\n    # 3. If k % 2 == 0, Alice wins since Alice can pick (k - 1) vowels,\n    # then Bob will either pick a substring containing 0 vowels, resulting in\n    # Alice picking the remaining entire string, or Bob couldn't pick at all\n    # (the last vowel).\n    kVowels = 'aeiou'\n    return any(c in kVowels for c in s)\n",
                "lang_text": "py"
            }
        }
    }
}