{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2069",
            "title": "Walking Robot Simulation II",
            "titleSlug": "walking-robot-simulation-ii",
            "content": "<p>A <code>width x height</code> grid is on an XY-plane with the <strong>bottom-left</strong> cell at <code>(0, 0)</code> and the <strong>top-right</strong> cell at <code>(width - 1, height - 1)</code>. The grid is aligned with the four cardinal directions (<code>&quot;North&quot;</code>, <code>&quot;East&quot;</code>, <code>&quot;South&quot;</code>, and <code>&quot;West&quot;</code>). A robot is <strong>initially</strong> at cell <code>(0, 0)</code> facing direction <code>&quot;East&quot;</code>.</p>\n\n<p>The robot can be instructed to move for a specific number of <strong>steps</strong>. For each step, it does the following.</p>\n\n<ol>\n\t<li>Attempts to move <strong>forward one</strong> cell in the direction it is facing.</li>\n\t<li>If the cell the robot is <strong>moving to</strong> is <strong>out of bounds</strong>, the robot instead <strong>turns</strong> 90 degrees <strong>counterclockwise</strong> and retries the step.</li>\n</ol>\n\n<p>After the robot finishes moving the number of steps required, it stops and awaits the next instruction.</p>\n\n<p>Implement the <code>Robot</code> class:</p>\n\n<ul>\n\t<li><code>Robot(int width, int height)</code> Initializes the <code>width x height</code> grid with the robot at <code>(0, 0)</code> facing <code>&quot;East&quot;</code>.</li>\n\t<li><code>void step(int num)</code> Instructs the robot to move forward <code>num</code> steps.</li>\n\t<li><code>int[] getPos()</code> Returns the current cell the robot is at, as an array of length 2, <code>[x, y]</code>.</li>\n\t<li><code>String getDir()</code> Returns the current direction of the robot, <code>&quot;North&quot;</code>, <code>&quot;East&quot;</code>, <code>&quot;South&quot;</code>, or <code>&quot;West&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"example-1\" src=\"https://assets.leetcode.com/uploads/2021/10/09/example-1.png\" style=\"width: 498px; height: 268px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;Robot&quot;, &quot;step&quot;, &quot;step&quot;, &quot;getPos&quot;, &quot;getDir&quot;, &quot;step&quot;, &quot;step&quot;, &quot;step&quot;, &quot;getPos&quot;, &quot;getDir&quot;]\n[[6, 3], [2], [2], [], [], [2], [1], [4], [], []]\n<strong>Output</strong>\n[null, null, null, [4, 0], &quot;East&quot;, null, null, null, [1, 2], &quot;West&quot;]\n\n<strong>Explanation</strong>\nRobot robot = new Robot(6, 3); // Initialize the grid and the robot at (0, 0) facing East.\nrobot.step(2);  // It moves two steps East to (2, 0), and faces East.\nrobot.step(2);  // It moves two steps East to (4, 0), and faces East.\nrobot.getPos(); // return [4, 0]\nrobot.getDir(); // return &quot;East&quot;\nrobot.step(2);  // It moves one step East to (5, 0), and faces East.\n                // Moving the next step East would be out of bounds, so it turns and faces North.\n                // Then, it moves one step North to (5, 1), and faces North.\nrobot.step(1);  // It moves one step North to (5, 2), and faces <strong>North</strong> (not West).\nrobot.step(4);  // Moving the next step North would be out of bounds, so it turns and faces West.\n                // Then, it moves four steps West to (1, 2), and faces West.\nrobot.getPos(); // return [1, 2]\nrobot.getDir(); // return &quot;West&quot;\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= width, height &lt;= 100</code></li>\n\t<li><code>1 &lt;= num &lt;= 10<sup>5</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>step</code>, <code>getPos</code>, and <code>getDir</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 155,
            "dislikes": 301,
            "similarQuestions": "[{\"title\": \"Walking Robot Simulation\", \"titleSlug\": \"walking-robot-simulation\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Design",
                    "slug": "design"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"9.7K\", \"totalSubmission\": \"39.8K\", \"totalAcceptedRaw\": 9680, \"totalSubmissionRaw\": 39830, \"acRate\": \"24.3%\"}",
            "hints": [
                "The robot only moves along the perimeter of the grid. Can you think if modulus can help you quickly compute which cell it stops at?",
                "After the robot moves one time, whenever the robot stops at some cell, it will always face a specific direction. i.e., The direction it faces is determined by the cell it stops at.",
                "Can you precompute what direction it faces when it stops at each cell along the perimeter, and reuse the results?"
            ],
            "rephrased": {
                "body": "A robot moves on a grid of size width x height, starting at (0, 0) facing East. The robot can move a specified number of steps. If a move would take the robot out of bounds, it turns 90 degrees counterclockwise and retries. Implement the Robot class with the following methods:\n\n*   `Robot(int width, int height)`: Initializes the grid and robot.\n*   `void step(int num)`: Moves the robot `num` steps.\n*   `int[] getPos()`: Returns the robot's current position [x, y].\n*   `String getDir()`: Returns the robot's current direction (\"North\", \"East\", \"South\", or \"West\").",
                "constraints": [
                    "2 <= width, height <= 100",
                    "1 <= num <= 10^5",
                    "At most 10^4 calls in total will be made to step, getPos, and getDir."
                ],
                "testcases": [
                    {
                        "input": "[\"Robot\", \"step\", \"step\", \"getPos\", \"getDir\", \"step\", \"step\", \"step\", \"getPos\", \"getDir\"]\n[[6, 3], [2], [2], [], [], [2], [1], [4], [], []]",
                        "output": "[null, null, null, [4, 0], \"East\", null, null, null, [1, 2], \"West\"]",
                        "explanation": "Robot is initialized with a 6x3 grid. First two `step(2)` calls move the robot to (4, 0) facing East. `getPos()` returns [4, 0] and `getDir()` returns \"East\". The next `step(2)` moves the robot to (5,0), then turns North and moves to (5,1). Then `step(1)` moves it to (5, 2) facing North. Finally `step(4)` moves it to (1,2) facing West. Then `getPos()` returns [1, 2] and `getDir()` returns \"West\"."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "walking-robot-simulation",
                "title": "Walking Robot Simulation",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "The robot only moves along the perimeter of the grid. Can you think if modulus can help you quickly compute which cell it stops at?",
            "After the robot moves one time, whenever the robot stops at some cell, it will always face a specific direction. i.e., The direction it faces is determined by the cell it stops at.",
            "Can you precompute what direction it faces when it stops at each cell along the perimeter, and reuse the results?"
        ],
        "relatedTopics": [
            {
                "name": "Design",
                "slug": "design"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ]
    }
}