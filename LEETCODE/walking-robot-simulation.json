{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "874",
            "title": "Walking Robot Simulation",
            "titleSlug": "walking-robot-simulation",
            "content": "<p>A robot on an infinite XY-plane starts at point <code>(0, 0)</code> facing north. The robot can receive a sequence of these three possible types of <code>commands</code>:</p>\n\n<ul>\n\t<li><code>-2</code>: Turn left <code>90</code> degrees.</li>\n\t<li><code>-1</code>: Turn right <code>90</code> degrees.</li>\n\t<li><code>1 &lt;= k &lt;= 9</code>: Move forward <code>k</code> units, one unit at a time.</li>\n</ul>\n\n<p>Some of the grid squares are <code>obstacles</code>. The <code>i<sup>th</sup></code> obstacle is at grid point <code>obstacles[i] = (x<sub>i</sub>, y<sub>i</sub>)</code>. If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.</p>\n\n<p>Return <em>the <strong>maximum Euclidean distance</strong> that the robot ever gets from the origin <strong>squared</strong> (i.e. if the distance is </em><code>5</code><em>, return </em><code>25</code><em>)</em>.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>North means +Y direction.</li>\n\t<li>East means +X direction.</li>\n\t<li>South means -Y direction.</li>\n\t<li>West means -X direction.</li>\n\t<li>There can be obstacle in&nbsp;[0,0].</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> commands = [4,-1,3], obstacles = []\n<strong>Output:</strong> 25\n<strong>Explanation:</strong> The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 3 units to (3, 4).\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 3<sup>2</sup> + 4<sup>2</sup> = 25 units away.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n<strong>Output:</strong> 65\n<strong>Explanation:</strong> The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n4. Turn left.\n5. Move north 4 units to (1, 8).\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 1<sup>2</sup> + 8<sup>2</sup> = 65 units away.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> commands = [6,-1,-1,6], obstacles = []\n<strong>Output:</strong> 36\n<strong>Explanation:</strong> The robot starts at (0, 0):\n1. Move north 6 units to (0, 6).\n2. Turn right.\n3. Turn right.\n4. Move south 6 units to (0, 0).\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 6<sup>2</sup> = 36 units away.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= commands.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>commands[i]</code> is either <code>-2</code>, <code>-1</code>, or an integer in the range <code>[1, 9]</code>.</li>\n\t<li><code>0 &lt;= obstacles.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-3 * 10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li>The answer is guaranteed to be less than <code>2<sup>31</sup></code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 190,
            "dislikes": 46,
            "similarQuestions": "[{\"title\": \"Walking Robot Simulation II\", \"titleSlug\": \"walking-robot-simulation-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"39.2K\", \"totalSubmission\": \"98.8K\", \"totalAcceptedRaw\": 39177, \"totalSubmissionRaw\": 98832, \"acRate\": \"39.6%\"}",
            "hints": [],
            "rephrased": {
                "body": "A robot, starting at (0, 0) on an infinite XY-plane and initially facing north, executes a series of commands. The commands are:\n\n*   `-2`: Turn 90 degrees left.\n*   `-1`: Turn 90 degrees right.\n*   `1 <= k <= 9`: Move forward k units in the current direction.\n\nObstacles are present on some grid squares. If the robot encounters an obstacle while moving, it remains in its current location and proceeds to the next command.\n\nDetermine the maximum squared Euclidean distance the robot ever reaches from the origin.",
                "constraints": [
                    "1 <= commands.length <= 10<sup>4</sup>",
                    "commands[i] is either -2, -1, or an integer in the range [1, 9].",
                    "0 <= obstacles.length <= 10<sup>4</sup>",
                    "-3 * 10<sup>4</sup> <= x<sub>i</sub>, y<sub>i</sub> <= 3 * 10<sup>4</sup>",
                    "The answer is guaranteed to be less than 2<sup>31</sup>."
                ],
                "testcases": [
                    {
                        "input": "{commands: [4,-1,3], obstacles: []}",
                        "output": "25",
                        "explanation": "The robot moves north 4 units to (0, 4), then turns right (east), and moves 3 units to (3, 4). The squared distance from the origin is 3<sup>2</sup> + 4<sup>2</sup> = 25."
                    },
                    {
                        "input": "{commands: [4,-1,4,-2,4], obstacles: [[2,4]]}",
                        "output": "65",
                        "explanation": "The robot moves north 4 units to (0, 4), turns right (east), moves 1 unit and is blocked by (2, 4), so it remains at (1, 4). It then turns left (north) and moves 4 units to (1, 8). The squared distance from the origin is 1<sup>2</sup> + 8<sup>2</sup> = 65."
                    },
                    {
                        "input": "{commands: [6,-1,-1,6], obstacles: []}",
                        "output": "36",
                        "explanation": "The robot moves north 6 units to (0, 6), turns right twice (south), and moves 6 units to (0, 0). The maximum squared distance is 6<sup>2</sup> = 36."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "walking-robot-simulation-ii",
                "title": "Walking Robot Simulation II",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {\n    const vector<int> dirs{0, 1, 0, -1, 0};\n    int ans = 0;\n    int d = 0;  // 0 := north, 1 := east, 2 := south, 3 := west\n    int x = 0;  // Start x\n    int y = 0;  // Start y\n    unordered_set<pair<int, int>, pairHash> obstaclesSet;\n\n    for (const vector<int>& o : obstacles)\n      obstaclesSet.insert({o[0], o[1]});\n\n    for (const int c : commands) {\n      if (c == -1) {\n        d = (d + 1) % 4;\n      } else if (c == -2) {\n        d = (d + 3) % 4;\n      } else {\n        for (int step = 0; step < c; ++step) {\n          if (obstaclesSet.count({x + dirs[d], y + dirs[d + 1]}))\n            break;\n          x += dirs[d];\n          y += dirs[d + 1];\n        }\n      }\n      ans = max(ans, x * x + y * y);\n    }\n\n    return ans;\n  }\n\n private:\n  struct pairHash {\n    size_t operator()(const pair<int, int>& p) const {\n      return p.first ^ p.second;\n    }\n  };\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int robotSim(int[] commands, int[][] obstacles) {\n    final int[] dirs = {0, 1, 0, -1, 0};\n    int ans = 0;\n    int d = 0; // 0 := north, 1 := east, 2 := south, 3 := west\n    int x = 0; // Start x\n    int y = 0; // Start y\n    Set<Pair<Integer, Integer>> obstaclesSet = new HashSet<>();\n\n    for (int[] o : obstacles)\n      obstaclesSet.add(new Pair<>(o[0], o[1]));\n\n    for (final int c : commands) {\n      if (c == -1) {\n        d = (d + 1) % 4;\n      } else if (c == -2) {\n        d = (d + 3) % 4;\n      } else {\n        for (int step = 0; step < c; ++step) {\n          if (obstaclesSet.contains(new Pair<>(x + dirs[d], y + dirs[d + 1])))\n            break;\n          x += dirs[d];\n          y += dirs[d + 1];\n        }\n      }\n      ans = Math.max(ans, x * x + y * y);\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n    dirs = [0, 1, 0, -1, 0]\n    ans = 0\n    d = 0  # 0 := north, 1 := east, 2 := south, 3 := west\n    x = 0  # Start x\n    y = 0  # Start y\n    obstaclesSet = {(x, y) for x, y in obstacles}\n\n    for c in commands:\n      if c == -1:\n        d = (d + 1) % 4\n      elif c == -2:\n        d = (d + 3) % 4\n      else:\n        for _ in range(c):\n          if (x + dirs[d], y + dirs[d + 1]) in obstaclesSet:\n            break\n          x += dirs[d]\n          y += dirs[d + 1]\n\n      ans = max(ans, x * x + y * y)\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}