{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1664",
            "title": "Ways to Make a Fair Array",
            "titleSlug": "ways-to-make-a-fair-array",
            "content": "<p>You are given an integer array&nbsp;<code>nums</code>. You can choose <strong>exactly one</strong> index (<strong>0-indexed</strong>) and remove the element. Notice that the index of the elements may change after the removal.</p>\n\n<p>For example, if <code>nums = [6,1,7,4,1]</code>:</p>\n\n<ul>\n\t<li>Choosing to remove index <code>1</code> results in <code>nums = [6,7,4,1]</code>.</li>\n\t<li>Choosing to remove index <code>2</code> results in <code>nums = [6,1,4,1]</code>.</li>\n\t<li>Choosing to remove index <code>4</code> results in <code>nums = [6,1,7,4]</code>.</li>\n</ul>\n\n<p>An array is <strong>fair</strong> if the sum of the odd-indexed values equals the sum of the even-indexed values.</p>\n\n<p>Return the <em><strong>number</strong> of indices that you could choose such that after the removal, </em><code>nums</code><em> </em><em>is <strong>fair</strong>. </em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,6,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nRemove index 0: [1,6,4] -&gt; Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.\nRemove index 1: [2,6,4] -&gt; Even sum: 2 + 4 = 6. Odd sum: 6. Fair.\nRemove index 2: [2,1,4] -&gt; Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.\nRemove index 3: [2,1,6] -&gt; Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.\nThere is 1 index that you can remove to make nums fair.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>&nbsp;You can remove any index and the remaining array is fair.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>&nbsp;You cannot make a fair array after removing any index.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1267,
            "dislikes": 35,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"34.8K\", \"totalSubmission\": \"55K\", \"totalAcceptedRaw\": 34791, \"totalSubmissionRaw\": 54974, \"acRate\": \"63.3%\"}",
            "hints": [
                "The parity of the indices after the removed element changes.",
                "Calculate prefix sums for even and odd indices separately to calculate for each index in O(1)."
            ],
            "rephrased": {
                "body": "Given an integer array `nums`, determine the number of indices that, when removed, result in a 'fair' array. An array is considered 'fair' if the sum of its odd-indexed elements equals the sum of its even-indexed elements. You can remove exactly one element.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "1 <= nums[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[2,1,6,4]",
                        "output": "1",
                        "explanation": "Removing index 1 results in [2,6,4], where the sum of even-indexed elements (2 + 4 = 6) equals the sum of odd-indexed elements (6).  Removing any other index does not result in a fair array."
                    },
                    {
                        "input": "[1,1,1]",
                        "output": "3",
                        "explanation": "Removing any index results in [1,1], where the sum of the even-indexed element (1) equals the sum of the odd-indexed element (1)."
                    },
                    {
                        "input": "[1,2,3]",
                        "output": "0",
                        "explanation": "Removing any index does not result in a fair array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "The parity of the indices after the removed element changes.",
            "Calculate prefix sums for even and odd indices separately to calculate for each index in O(1)."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int waysToMakeFair(vector<int>& nums) {\n    const int n = nums.size();\n    int ans = 0;\n    vector<int> even(n + 1);  // Sum of even-indexed nums[0..i)\n    vector<int> odd(n + 1);   // Sum of odd-indexed nums[0..i)\n\n    for (int i = 1; i <= n; ++i) {\n      odd[i] = odd[i - 1];\n      even[i] = even[i - 1];\n      if (i % 2 == 0)\n        even[i] += nums[i - 1];\n      else\n        odd[i] += nums[i - 1];\n    }\n\n    const int sum = even.back() + odd.back();\n\n    for (int i = 0; i < n; ++i) {\n      const int evenSum = even[i] + odd.back() - odd[i + 1];\n      const int oddSum = sum - nums[i] - evenSum;\n      if (evenSum == oddSum)\n        ++ans;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int waysToMakeFair(int[] nums) {\n    final int n = nums.length;\n    int ans = 0;\n    int[] even = new int[n + 1]; // Sum of even-indexed nums[0..i)\n    int[] odd = new int[n + 1];  // Sum of odd-indexed nums[0..i)\n\n    for (int i = 1; i <= n; ++i) {\n      odd[i] = odd[i - 1];\n      even[i] = even[i - 1];\n      if (i % 2 == 0)\n        even[i] += nums[i - 1];\n      else\n        odd[i] += nums[i - 1];\n    }\n\n    final int sum = even[n] + odd[n];\n\n    for (int i = 0; i < n; ++i) {\n      final int evenSum = even[i] + odd[n] - odd[i + 1];\n      final int oddSum = sum - nums[i] - evenSum;\n      if (evenSum == oddSum)\n        ++ans;\n    }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            }
        }
    }
}