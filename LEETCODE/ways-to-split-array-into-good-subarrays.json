{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "2750",
            "title": "Ways to Split Array Into Good Subarrays",
            "titleSlug": "ways-to-split-array-into-good-subarrays",
            "content": "<p>You are given a binary array <code>nums</code>.</p>\n\n<p>A subarray of an array is <strong>good</strong> if it contains <strong>exactly</strong> <strong>one</strong> element with the value <code>1</code>.</p>\n\n<p>Return <em>an integer denoting the number of ways to split the array </em><code>nums</code><em> into <strong>good</strong> subarrays</em>. As the number may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0,0,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 ways to split nums into good subarrays:\n- [0,1] [0,0,1]\n- [0,1,0] [0,1]\n- [0,1,0,0] [1]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is 1 way to split nums into good subarrays:\n- [0,1,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1</code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 385,
            "dislikes": 11,
            "similarQuestions": "[{\"title\": \"Binary Subarrays With Sum\", \"titleSlug\": \"binary-subarrays-with-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Count Number of Nice Subarrays\", \"titleSlug\": \"count-number-of-nice-subarrays\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                }
            ],
            "stats": "{\"totalAccepted\": \"18.2K\", \"totalSubmission\": \"55K\", \"totalAcceptedRaw\": 18246, \"totalSubmissionRaw\": 55011, \"acRate\": \"33.2%\"}",
            "hints": [
                "If the array consists of only 0s answer is 0.",
                "In the final split, exactly one separation point exists between two consecutive 1s.",
                "In how many ways can separation points be put?"
            ],
            "rephrased": {
                "body": "Given a binary array `nums`, a subarray is considered **good** if it contains exactly one element with the value `1`.  Your task is to determine the number of ways to split the array `nums` into a sequence of good subarrays. Return the count modulo `10^9 + 7`. A subarray must be a contiguous, non-empty sequence of elements.",
                "constraints": [
                    "1 <= nums.length <= 10^5",
                    "0 <= nums[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[0,1,0,0,1]",
                        "output": "3",
                        "explanation": "The array can be split into good subarrays in the following three ways:\n\n*   [0,1] [0,0,1]\n*   [0,1,0] [0,1]\n*   [0,1,0,0] [1]"
                    },
                    {
                        "input": "[0,1,0]",
                        "output": "1",
                        "explanation": "The array can be split into good subarrays in the following one way:\n\n*   [0,1,0]"
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "binary-subarrays-with-sum",
                "title": "Binary Subarrays With Sum",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "count-number-of-nice-subarrays",
                "title": "Count Number of Nice Subarrays",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "If the array consists of only 0s answer is 0.",
            "In the final split, exactly one separation point exists between two consecutive 1s.",
            "In how many ways can separation points be put?"
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int numberOfGoodSubarraySplits(vector<int>& nums) {\n    if (count(nums.begin(), nums.end(), 1) == 0)\n      return 0;\n\n    constexpr int kMod = 1'000'000'007;\n    int prev = -1;  // previous 1's index\n    int ans = 1;\n\n    for (int i = 0; i < nums.size(); ++i)\n      if (nums[i] == 1) {\n        if (prev != -1)\n          ans = ans * static_cast<long>(i - prev) % kMod;\n        prev = i;\n      }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int numberOfGoodSubarraySplits(int[] nums) {\n    if (Arrays.stream(nums).filter(num -> num == 1).count() == 0)\n      return 0;\n\n    final int kMod = 1_000_000_007;\n    int prev = -1; // previous 1's index\n    int ans = 1;\n\n    for (int i = 0; i < nums.length; ++i)\n      if (nums[i] == 1) {\n        if (prev != -1)\n          ans = (int) ((long) ans * (i - prev) % kMod);\n        prev = i;\n      }\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def numberOfGoodSubarraySplits(self, nums: List[int]) -> int:\n    if 1 not in nums:\n      return 0\n\n    kMod = 1_000_000_007\n    prev = -1  # previous 1's index\n    ans = 1\n\n    for i, num in enumerate(nums):\n      if num == 1:\n        if prev != -1:\n          ans *= i - prev\n          ans %= kMod\n        prev = i\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}