{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1712",
            "title": "Ways to Split Array Into Three Subarrays",
            "titleSlug": "ways-to-split-array-into-three-subarrays",
            "content": "<p>A split of an integer array is <strong>good</strong> if:</p>\n\n<ul>\n\t<li>The array is split into three <strong>non-empty</strong> contiguous subarrays - named <code>left</code>, <code>mid</code>, <code>right</code> respectively from left to right.</li>\n\t<li>The sum of the elements in <code>left</code> is less than or equal to the sum of the elements in <code>mid</code>, and the sum of the elements in <code>mid</code> is less than or equal to the sum of the elements in <code>right</code>.</li>\n</ul>\n\n<p>Given <code>nums</code>, an array of <strong>non-negative</strong> integers, return <em>the number of <strong>good</strong> ways to split</em> <code>nums</code>. As the number may be too large, return it <strong>modulo</strong> <code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The only good way to split nums is [1] [1] [1].</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,2,5,0]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are three good ways of splitting nums:\n[1] [2] [2,2,5,0]\n[1] [2,2] [2,5,0]\n[1,2] [2,2] [5,0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no good way to split nums.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1362,
            "dislikes": 100,
            "similarQuestions": "[{\"title\": \"Number of Ways to Divide a Long Corridor\", \"titleSlug\": \"number-of-ways-to-divide-a-long-corridor\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Number of Ways to Split Array\", \"titleSlug\": \"number-of-ways-to-split-array\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Two Pointers",
                    "slug": "two-pointers"
                },
                {
                    "name": "Binary Search",
                    "slug": "binary-search"
                },
                {
                    "name": "Prefix Sum",
                    "slug": "prefix-sum"
                }
            ],
            "stats": "{\"totalAccepted\": \"31.1K\", \"totalSubmission\": \"94.9K\", \"totalAcceptedRaw\": 31146, \"totalSubmissionRaw\": 94895, \"acRate\": \"32.8%\"}",
            "hints": [
                "Create a prefix array to efficiently find the sum of subarrays.",
                "As we are dividing the array into three subarrays, there are two \"walls\". Iterate over the right wall positions and find where the left wall could be for each right wall position.",
                "Use binary search to find the left-most position and right-most position the left wall could be."
            ],
            "rephrased": {
                "body": "Given an array `nums` of non-negative integers, a split of the array into three non-empty contiguous subarrays (`left`, `mid`, `right`) is considered **good** if the sum of `left` is less than or equal to the sum of `mid`, and the sum of `mid` is less than or equal to the sum of `right`. Return the number of **good** ways to split `nums` modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "3 <= nums.length <= 10<sup>5</sup>",
                    "0 <= nums[i] <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "[1,1,1]",
                        "output": "1",
                        "explanation": "The only valid split is [1] [1] [1]."
                    },
                    {
                        "input": "[1,2,2,2,5,0]",
                        "output": "3",
                        "explanation": "The valid splits are: [1] [2] [2,2,5,0], [1] [2,2] [2,5,0], and [1,2] [2,2] [5,0]."
                    },
                    {
                        "input": "[3,2,1]",
                        "output": "0",
                        "explanation": "There are no valid splits for this input."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "number-of-ways-to-divide-a-long-corridor",
                "title": "Number of Ways to Divide a Long Corridor",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "number-of-ways-to-split-array",
                "title": "Number of Ways to Split Array",
                "isPaidOnly": false
            }
        ],
        "hints": [
            "Create a prefix array to efficiently find the sum of subarrays.",
            "As we are dividing the array into three subarrays, there are two \"walls\". Iterate over the right wall positions and find where the left wall could be for each right wall position.",
            "Use binary search to find the left-most position and right-most position the left wall could be."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  int waysToSplit(vector<int>& nums) {\n    constexpr int kMod = 1'000'000'007;\n    const int n = nums.size();\n    int ans = 0;\n    vector<int> prefix(n);\n\n    partial_sum(nums.begin(), nums.end(), prefix.begin());\n\n    // Find the first index j s.t.\n    // Mid = prefix[j] - prefix[i] >= left = prefix[i]\n    auto firstGreaterEqual = [&](int i) {\n      int l = i + 1;\n      int r = n - 1;\n      while (l < r) {\n        const int m = (l + r) / 2;\n        if (prefix[m] - prefix[i] >= prefix[i])\n          r = m;\n        else\n          l = m + 1;\n      }\n      return l;\n    };\n\n    // Find the first index k s.t.\n    // Mid = prefix[k] - prefix[i] > right = prefix[-1] - prefix[k]\n    auto firstGreater = [&](int i) {\n      int l = i + 1;\n      int r = n - 1;\n      while (l < r) {\n        const int m = (l + r) / 2;\n        if (prefix[m] - prefix[i] > prefix.back() - prefix[m])\n          r = m;\n        else\n          l = m + 1;\n      }\n      return l;\n    };\n\n    for (int i = 0; i < n - 2; ++i) {\n      const int j = firstGreaterEqual(i);\n      if (j == n - 1)\n        break;\n      const int mid = prefix[j] - prefix[i];\n      const int right = prefix.back() - prefix[j];\n      if (mid > right)\n        continue;\n      const int k = firstGreater(i);\n      ans = (ans + k - j) % kMod;\n    }\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int waysToSplit(int[] nums) {\n    final int kMod = 1_000_000_007;\n    final int n = nums.length;\n    int ans = 0;\n    int[] prefix = nums.clone();\n\n    for (int i = 1; i < n; ++i)\n      prefix[i] += prefix[i - 1];\n\n    for (int i = 0; i < n - 2; ++i) {\n      final int j = firstGreaterEqual(prefix, i);\n      if (j == n - 1)\n        break;\n      final int mid = prefix[j] - prefix[i];\n      final int right = prefix[prefix.length - 1] - prefix[j];\n      if (mid > right)\n        continue;\n      final int k = firstGreater(prefix, i);\n      ans = (ans + k - j) % kMod;\n    }\n\n    return ans;\n  }\n\n  // Find the first index j s.t.\n  // Mid = prefix[j] - prefix[i] >= left = prefix[i]\n  private int firstGreaterEqual(int[] prefix, int i) {\n    int l = i + 1;\n    int r = prefix.length - 1;\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (prefix[m] - prefix[i] >= prefix[i])\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  };\n\n  // Find the first index k s.t.\n  // Mid = prefix[k] - prefix[i] > right = prefix[-1] - prefix[k]\n  private int firstGreater(int[] prefix, int i) {\n    int l = i + 1;\n    int r = prefix.length - 1;\n    while (l < r) {\n      final int m = (l + r) / 2;\n      if (prefix[m] - prefix[i] > prefix[prefix.length - 1] - prefix[m])\n        r = m;\n      else\n        l = m + 1;\n    }\n    return l;\n  };\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def waysToSplit(self, nums: List[int]) -> int:\n    kMod = 1_000_000_007\n    n = len(nums)\n    ans = 0\n    prefix = list(itertools.accumulate(nums))\n\n    # Find the first index j s.t.\n    # Mid = prefix[j] - prefix[i] >= left = prefix[i]\n    def firstGreaterEqual(i: int) -> int:\n      l = i + 1\n      r = n - 1\n      while l < r:\n        m = (l + r) // 2\n        if prefix[m] - prefix[i] >= prefix[i]:\n          r = m\n        else:\n          l = m + 1\n      return l\n\n    # Find the first index k s.t.\n    # Mid = prefix[k] - prefix[i] > right = prefix[-1] - prefix[k]\n    def firstGreater(i: int) -> int:\n      l = i + 1\n      r = n - 1\n      while l < r:\n        m = (l + r) // 2\n        if prefix[m] - prefix[i] > prefix[-1] - prefix[m]:\n          r = m\n        else:\n          l = m + 1\n      return l\n\n    for i in range(n - 2):\n      j = firstGreaterEqual(i)\n      if j == n - 1:\n        break\n      mid = prefix[j] - prefix[i]\n      right = prefix[-1] - prefix[j]\n      if mid > right:\n        continue\n      k = firstGreater(i)\n      ans = (ans + k - j) % kMod\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}