{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "1706",
            "title": "Where Will the Ball Fall",
            "titleSlug": "where-will-the-ball-fall",
            "content": "<p>You have a 2-D <code>grid</code> of size <code>m x n</code> representing a box, and you have <code>n</code> balls. The box is open on the top and bottom sides.</p>\n\n<p>Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.</p>\n\n<ul>\n\t<li>A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as <code>1</code>.</li>\n\t<li>A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as <code>-1</code>.</li>\n</ul>\n\n<p>We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a &quot;V&quot; shaped pattern between two boards or if a board redirects the ball into either wall of the box.</p>\n\n<p>Return <em>an array </em><code>answer</code><em> of size </em><code>n</code><em> where </em><code>answer[i]</code><em> is the column that the ball falls out of at the bottom after dropping the ball from the </em><code>i<sup>th</sup></code><em> column at the top, or <code>-1</code><em> if the ball gets stuck in the box</em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/26/ball.jpg\" style=\"width: 500px; height: 385px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]\n<strong>Output:</strong> [1,-1,-1,-1,-1]\n<strong>Explanation:</strong> This example is shown in the photo.\nBall b0 is dropped at column 0 and falls out of the box at column 1.\nBall b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.\nBall b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.\nBall b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.\nBall b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[-1]]\n<strong>Output:</strong> [-1]\n<strong>Explanation:</strong> The ball gets stuck against the left wall.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]\n<strong>Output:</strong> [0,1,2,3,4,-1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>grid[i][j]</code> is <code>1</code> or <code>-1</code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3046,
            "dislikes": 181,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Depth-First Search",
                    "slug": "depth-first-search"
                },
                {
                    "name": "Matrix",
                    "slug": "matrix"
                },
                {
                    "name": "Simulation",
                    "slug": "simulation"
                }
            ],
            "stats": "{\"totalAccepted\": \"137.8K\", \"totalSubmission\": \"192.1K\", \"totalAcceptedRaw\": 137793, \"totalSubmissionRaw\": 192141, \"acRate\": \"71.7%\"}",
            "hints": [
                "Use DFS.",
                "Traverse the path of the ball downwards until you reach the bottom or get stuck."
            ],
            "rephrased": {
                "body": "Given an `m x n` grid representing a box with diagonal boards that redirect balls, and `n` balls dropped from the top of each column, determine the column where each ball falls out at the bottom. If a ball gets stuck due to a 'V' shape or redirection into a wall, return -1 for that ball.",
                "constraints": [
                    "m == grid.length",
                    "n == grid[i].length",
                    "1 <= m, n <= 100",
                    "grid[i][j] is 1 or -1"
                ],
                "testcases": [
                    {
                        "input": "[[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]",
                        "output": "[1,-1,-1,-1,-1]",
                        "explanation": "Ball 0 exits at column 1. Balls 1, 2, 3, and 4 get stuck within the grid."
                    },
                    {
                        "input": "[[-1]]",
                        "output": "[-1]",
                        "explanation": "The ball gets stuck against the left wall."
                    },
                    {
                        "input": "[[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]",
                        "output": "[0,1,2,3,4,-1]",
                        "explanation": "Ball at column 5 gets stuck as it cannot exit the grid."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "Use DFS.",
            "Traverse the path of the ball downwards until you reach the bottom or get stuck."
        ],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Simulation",
                "slug": "simulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<int> findBall(vector<vector<int>>& grid) {\n    const int m = grid.size();\n    const int n = grid[0].size();\n    // dp[i] := status of i-th column\n    // -1 := empty, 0 := b0, 1 := b1, ...\n    vector<int> dp(n);\n    // ans[i] := i-th ball's final position\n    vector<int> ans(n, -1);\n\n    iota(dp.begin(), dp.end(), 0);\n\n    for (int i = 0; i < m; ++i) {\n      vector<int> newDp(n, -1);\n      for (int j = 0; j < n; ++j) {\n        // Out of bound\n        if (j + grid[i][j] < 0 || j + grid[i][j] == n)\n          continue;\n        // Stuck\n        if (grid[i][j] == 1 && grid[i][j + 1] == -1 ||\n            grid[i][j] == -1 && grid[i][j - 1] == 1)\n          continue;\n        newDp[j + grid[i][j]] = dp[j];\n      }\n      dp = move(newDp);\n    }\n\n    for (int i = 0; i < n; ++i)\n      if (dp[i] != -1)\n        ans[dp[i]] = i;\n\n    return ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public int[] findBall(int[][] grid) {\n    final int m = grid.length;\n    final int n = grid[0].length;\n    // dp[i] := status of i-th column\n    // -1 := empty, 0 := b0, 1 := b1, ...\n    int[] dp = new int[n];\n    // ans[i] := i-th ball's final position\n    int[] ans = new int[n];\n    Arrays.fill(ans, -1);\n\n    for (int i = 0; i < n; ++i)\n      dp[i] = i;\n\n    for (int i = 0; i < m; ++i) {\n      int[] newDp = new int[n];\n      Arrays.fill(newDp, -1);\n      for (int j = 0; j < n; ++j) {\n        // Out of bound\n        if (j + grid[i][j] < 0 || j + grid[i][j] == n)\n          continue;\n        // Stuck\n        if (grid[i][j] == 1 && grid[i][j + 1] == -1 || grid[i][j] == -1 && grid[i][j - 1] == 1)\n          continue;\n        newDp[j + grid[i][j]] = dp[j];\n      }\n      dp = newDp;\n    }\n\n    for (int i = 0; i < n; ++i)\n      if (dp[i] != -1)\n        ans[dp[i]] = i;\n\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findBall(self, grid: List[List[int]]) -> List[int]:\n    m = len(grid)\n    n = len(grid[0])\n    # dp[i] := status of i-th column\n    # -1 := empty, 0 := b0, 1 := b1, ...\n    dp = [i for i in range(n)]\n    # ans[i] := i-th ball's final positio\n    ans = [-1] * n\n\n    for i in range(m):\n      newDp = [-1] * n\n      for j in range(n):\n        # Out of bound\n        if j + grid[i][j] < 0 or j + grid[i][j] == n:\n          continue\n        if grid[i][j] == 1 and grid[i][j + 1] == -1 or \\\n                grid[i][j] == -1 and grid[i][j - 1] == 1:\n          continue\n        newDp[j + grid[i][j]] = dp[j]\n      dp = newDp\n\n    for i, ball in enumerate(dp):\n      if ball != -1:\n        ans[ball] = i\n\n    return ans\n",
                "lang_text": "py"
            }
        }
    }
}