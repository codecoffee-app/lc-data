{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "140",
            "title": "Word Break II",
            "titleSlug": "word-break-ii",
            "content": "<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, add spaces in <code>s</code> to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in <strong>any order</strong>.</p>\n\n<p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsanddog&quot;, wordDict = [&quot;cat&quot;,&quot;cats&quot;,&quot;and&quot;,&quot;sand&quot;,&quot;dog&quot;]\n<strong>Output:</strong> [&quot;cats and dog&quot;,&quot;cat sand dog&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pineapplepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;,&quot;applepen&quot;,&quot;pine&quot;,&quot;pineapple&quot;]\n<strong>Output:</strong> [&quot;pine apple pen apple&quot;,&quot;pineapple pen apple&quot;,&quot;pine applepen apple&quot;]\n<strong>Explanation:</strong> Note that you are allowed to reuse a dictionary word.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= wordDict[i].length &lt;= 10</code></li>\n\t<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>\n\t<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>\n\t<li>Input is generated in a way that the length of the answer doesn&#39;t exceed&nbsp;10<sup>5</sup>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6599,
            "dislikes": 521,
            "similarQuestions": "[{\"title\": \"Word Break\", \"titleSlug\": \"word-break\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Concatenated Words\", \"titleSlug\": \"concatenated-words\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"552.7K\", \"totalSubmission\": \"1.2M\", \"totalAcceptedRaw\": 552685, \"totalSubmissionRaw\": 1176080, \"acRate\": \"47.0%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` and a dictionary of strings `wordDict`, segment `s` into a sequence of words from `wordDict`, separated by spaces.  Find all possible ways to construct such sentences. The same word in the dictionary can be used multiple times. Return all possible sentences in any order.",
                "constraints": [
                    "1 <= s.length <= 20",
                    "1 <= wordDict.length <= 1000",
                    "1 <= wordDict[i].length <= 10",
                    "s and wordDict[i] consist of only lowercase English letters.",
                    "All the strings of wordDict are unique.",
                    "The length of the answer doesn't exceed 10^5."
                ],
                "testcases": [
                    {
                        "input": {
                            "s": "catsanddog",
                            "wordDict": [
                                "cat",
                                "cats",
                                "and",
                                "sand",
                                "dog"
                            ]
                        },
                        "output": [
                            "cats and dog",
                            "cat sand dog"
                        ],
                        "explanation": null
                    },
                    {
                        "input": {
                            "s": "pineapplepenapple",
                            "wordDict": [
                                "apple",
                                "pen",
                                "applepen",
                                "pine",
                                "pineapple"
                            ]
                        },
                        "output": [
                            "pine apple pen apple",
                            "pineapple pen apple",
                            "pine applepen apple"
                        ],
                        "explanation": "Note that you are allowed to reuse a dictionary word."
                    },
                    {
                        "input": {
                            "s": "catsandog",
                            "wordDict": [
                                "cats",
                                "dog",
                                "sand",
                                "and",
                                "cat"
                            ]
                        },
                        "output": [],
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Medium",
                "titleSlug": "word-break",
                "title": "Word Break",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "concatenated-words",
                "title": "Concatenated Words",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> wordBreak(string s, vector<string>& wordDict) {\n    unordered_set<string> wordSet{wordDict.begin(), wordDict.end()};\n    unordered_map<string, vector<string>> memo;\n    return wordBreak(s, wordSet, memo);\n  }\n\n private:\n  vector<string> wordBreak(const string& s,\n                           const unordered_set<string>& wordSet,\n                           unordered_map<string, vector<string>>& memo) {\n    if (const auto it = memo.find(s); it != memo.cend())\n      return it->second;\n\n    vector<string> ans;\n\n    // 1 <= prefix.length() < s.length()\n    for (int i = 1; i < s.length(); ++i) {\n      const string& prefix = s.substr(0, i);\n      const string& suffix = s.substr(i);\n      if (wordSet.count(prefix))\n        for (const string& word : wordBreak(suffix, wordSet, memo))\n          ans.push_back(prefix + \" \" + word);\n    }\n\n    // Contains whole string, so don't add any space\n    if (wordSet.count(s))\n      ans.push_back(s);\n\n    return memo[s] = ans;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> wordBreak(String s, List<String> wordDict) {\n    Set<String> wordSet = new HashSet<>(wordDict);\n    Map<String, List<String>> memo = new HashMap<>();\n    return wordBreak(s, wordSet, memo);\n  }\n\n  private List<String> wordBreak(final String s, Set<String> wordSet,\n                                 Map<String, List<String>> memo) {\n    if (memo.containsKey(s))\n      return memo.get(s);\n\n    List<String> ans = new ArrayList<>();\n\n    // 1 <= prefix.length() < s.length()\n    for (int i = 1; i < s.length(); ++i) {\n      final String prefix = s.substring(0, i);\n      final String suffix = s.substring(i);\n      if (wordSet.contains(prefix))\n        for (final String word : wordBreak(suffix, wordSet, memo))\n          ans.add(prefix + \" \" + word);\n    }\n\n    // Contains whole string, so don't add any space\n    if (wordSet.contains(s))\n      ans.add(s);\n\n    memo.put(s, ans);\n    return ans;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n    wordSet = set(wordDict)\n\n    @functools.lru_cache(None)\n    def wordBreak(s: str) -> List[str]:\n      ans = []\n\n      # 1 <= len(prefix) < len(s)\n      for i in range(1, len(s)):\n        prefix = s[0:i]\n        suffix = s[i:]\n        if prefix in wordSet:\n          for word in wordBreak(suffix):\n            ans.append(prefix + ' ' + word)\n\n      # Contains whole string, so don't add any space\n      if s in wordSet:\n        ans.append(s)\n\n      return ans\n\n    return wordBreak(s)\n",
                "lang_text": "py"
            }
        }
    }
}