{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "139",
            "title": "Word Break",
            "titleSlug": "word-break",
            "content": "<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p>\n\n<p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;,&quot;code&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.\nNote that you are allowed to reuse a dictionary word.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li>\n\t<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>\n\t<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 16598,
            "dislikes": 726,
            "similarQuestions": "[{\"title\": \"Word Break II\", \"titleSlug\": \"word-break-ii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Extra Characters in a String\", \"titleSlug\": \"extra-characters-in-a-string\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Dynamic Programming",
                    "slug": "dynamic-programming"
                },
                {
                    "name": "Trie",
                    "slug": "trie"
                },
                {
                    "name": "Memoization",
                    "slug": "memoization"
                }
            ],
            "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"3.4M\", \"totalAcceptedRaw\": 1561396, \"totalSubmissionRaw\": 3362478, \"acRate\": \"46.4%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a string `s` and a dictionary of strings `wordDict`, determine if `s` can be broken down into a sequence of one or more words from `wordDict`, separated by spaces. Words from the dictionary can be reused.",
                "constraints": [
                    "1 <= s.length <= 300",
                    "1 <= wordDict.length <= 1000",
                    "1 <= wordDict[i].length <= 20",
                    "`s` and `wordDict[i]` consist of only lowercase English letters.",
                    "All strings in `wordDict` are unique."
                ],
                "testcases": [
                    {
                        "input": "s = \"leetcode\", wordDict = [\"leet\",\"code\"]",
                        "output": "true",
                        "explanation": "\"leetcode\" can be segmented as \"leet code\"."
                    },
                    {
                        "input": "s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]",
                        "output": "true",
                        "explanation": "\"applepenapple\" can be segmented as \"apple pen apple\". Note that dictionary words can be reused."
                    },
                    {
                        "input": "s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
                        "output": "false",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "word-break-ii",
                "title": "Word Break II",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "extra-characters-in-a-string",
                "title": "Extra Characters in a String",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Memoization",
                "slug": "memoization"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool wordBreak(string s, vector<string>& wordDict) {\n    return wordBreak(s, {wordDict.begin(), wordDict.end()}, {});\n  }\n\n private:\n  bool wordBreak(const string& s, const unordered_set<string>&& wordSet,\n                 unordered_map<string, bool>&& memo) {\n    if (wordSet.count(s))\n      return true;\n    if (const auto it = memo.find(s); it != memo.cend())\n      return it->second;\n\n    // 1 <= prefix.length() < s.length()\n    for (int i = 1; i < s.length(); ++i) {\n      const string& prefix = s.substr(0, i);\n      const string& suffix = s.substr(i);\n      if (wordSet.count(prefix) && wordBreak(suffix, move(wordSet), move(memo)))\n        return memo[s] = true;\n    }\n\n    return memo[s] = false;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean wordBreak(String s, List<String> wordDict) {\n    return wordBreak(s, new HashSet<>(wordDict), new HashMap<>());\n  }\n\n  private boolean wordBreak(final String s, Set<String> wordSet, Map<String, Boolean> memo) {\n    if (memo.containsKey(s))\n      return memo.get(s);\n    if (wordSet.contains(s)) {\n      memo.put(s, true);\n      return true;\n    }\n\n    // 1 <= prefix.length() < s.length()\n    for (int i = 1; i < s.length(); ++i) {\n      final String prefix = s.substring(0, i);\n      final String suffix = s.substring(i);\n      if (wordSet.contains(prefix) && wordBreak(suffix, wordSet, memo)) {\n        memo.put(s, true);\n        return true;\n      }\n    }\n\n    memo.put(s, false);\n    return false;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n    wordSet = set(wordDict)\n\n    @functools.lru_cache(None)\n    def wordBreak(s: str) -> bool:\n      if s in wordSet:\n        return True\n      return any(s[:i] in wordSet and wordBreak(s[i:]) for i in range(len(s)))\n\n    return wordBreak(s)\n",
                "lang_text": "py"
            }
        }
    }
}