{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "126",
            "title": "Word Ladder II",
            "titleSlug": "word-ladder-ii",
            "content": "<p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p>\n\n<ul>\n\t<li>Every adjacent pair of words differs by a single letter.</li>\n\t<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li>\n\t<li><code>s<sub>k</sub> == endWord</code></li>\n</ul>\n\n<p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>all the <strong>shortest transformation sequences</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words </em><code>[beginWord, s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub>]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n<strong>Output:</strong> [[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],[&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]]\n<strong>Explanation:</strong>&nbsp;There are 2 shortest transformation sequences:\n&quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;\n&quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;lot&quot; -&gt; &quot;log&quot; -&gt; &quot;cog&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= beginWord.length &lt;= 5</code></li>\n\t<li><code>endWord.length == beginWord.length</code></li>\n\t<li><code>1 &lt;= wordList.length &lt;= 500</code></li>\n\t<li><code>wordList[i].length == beginWord.length</code></li>\n\t<li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li>\n\t<li><code>beginWord != endWord</code></li>\n\t<li>All the words in <code>wordList</code> are <strong>unique</strong>.</li>\n\t<li>The <strong>sum</strong> of all shortest transformation sequences does not exceed <code>10<sup>5</sup></code>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5812,
            "dislikes": 716,
            "similarQuestions": "[{\"title\": \"Word Ladder\", \"titleSlug\": \"word-ladder\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Groups of Strings\", \"titleSlug\": \"groups-of-strings\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                },
                {
                    "name": "Backtracking",
                    "slug": "backtracking"
                },
                {
                    "name": "Breadth-First Search",
                    "slug": "breadth-first-search"
                }
            ],
            "stats": "{\"totalAccepted\": \"355.7K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 355682, \"totalSubmissionRaw\": 1301958, \"acRate\": \"27.3%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a start word (`beginWord`), an end word (`endWord`), and a dictionary of words (`wordList`), find all the shortest transformation sequences from `beginWord` to `endWord`.  A transformation sequence follows these rules:\n\n*   Each adjacent word in the sequence differs by only one letter.\n*   Every word in the sequence (except possibly the `beginWord`) must be present in `wordList`.\n*   The last word in the sequence must be `endWord`.\n\nReturn a list of all the shortest transformation sequences, where each sequence is a list of words from `beginWord` to `endWord`. If no such sequence exists, return an empty list.",
                "constraints": [
                    "1 <= beginWord.length <= 5",
                    "endWord.length == beginWord.length",
                    "1 <= wordList.length <= 500",
                    "wordList[i].length == beginWord.length",
                    "beginWord, endWord, and wordList[i] consist of lowercase English letters.",
                    "beginWord != endWord",
                    "All the words in wordList are unique.",
                    "The sum of all shortest transformation sequences does not exceed 10^5."
                ],
                "testcases": [
                    {
                        "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
                        "output": "[[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]",
                        "explanation": "There are two shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\""
                    },
                    {
                        "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
                        "output": "[]",
                        "explanation": "The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Hard",
                "titleSlug": "word-ladder",
                "title": "Word Ladder",
                "isPaidOnly": false
            },
            {
                "difficulty": "Hard",
                "titleSlug": "groups-of-strings",
                "title": "Groups of Strings",
                "isPaidOnly": false
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<vector<string>> findLadders(string beginWord, string endWord,\n                                     vector<string>& wordList) {\n    unordered_set<string> wordSet{wordList.begin(), wordList.end()};\n    if (!wordSet.count(endWord))\n      return {};\n\n    // {\"hit\": [\"hot\"], \"hot\": [\"dot\", \"lot\"], ...}\n    unordered_map<string, vector<string>> graph;\n\n    // Build graph from beginWord -> endWord.\n    if (!bfs(beginWord, endWord, wordSet, graph))\n      return {};\n\n    vector<vector<string>> ans;\n    dfs(graph, beginWord, endWord, {beginWord}, ans);\n    return ans;\n  }\n\n private:\n  bool bfs(const string& beginWord, const string& endWord,\n           unordered_set<string>& wordSet,\n           unordered_map<string, vector<string>>& graph) {\n    unordered_set<string> currentLevelWords{beginWord};\n\n    while (!currentLevelWords.empty()) {\n      for (const string& word : currentLevelWords)\n        wordSet.erase(word);\n      unordered_set<string> nextLevelWords;\n      bool reachEndWord = false;\n      for (const string& parent : currentLevelWords) {\n        vector<string> children;\n        getChildren(parent, wordSet, children);\n        for (const string& child : children) {\n          if (wordSet.count(child)) {\n            nextLevelWords.insert(child);\n            graph[parent].push_back(child);\n          }\n          if (child == endWord)\n            reachEndWord = true;\n        }\n      }\n      if (reachEndWord)\n        return true;\n      currentLevelWords = move(nextLevelWords);\n    }\n\n    return false;\n  }\n\n  void getChildren(const string& parent, const unordered_set<string>& wordSet,\n                   vector<string>& children) {\n    string s(parent);\n\n    for (int i = 0; i < s.length(); ++i) {\n      const char cache = s[i];\n      for (char c = 'a'; c <= 'z'; ++c) {\n        if (c == cache)\n          continue;\n        s[i] = c;  // Now is `child`\n        if (wordSet.count(s))\n          children.push_back(s);\n      }\n      s[i] = cache;\n    }\n  }\n\n  void dfs(const unordered_map<string, vector<string>>& graph,\n           const string& word, const string& endWord, vector<string>&& path,\n           vector<vector<string>>& ans) {\n    if (word == endWord) {\n      ans.push_back(path);\n      return;\n    }\n    if (!graph.count(word))\n      return;\n\n    for (const string& child : graph.at(word)) {\n      path.push_back(child);\n      dfs(graph, child, endWord, move(path), ans);\n      path.pop_back();\n    }\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n    Set<String> wordSet = new HashSet<>(wordList);\n    if (!wordSet.contains(endWord))\n      return new ArrayList<>();\n\n    // {\"hit\": [\"hot\"], \"hot\": [\"dot\", \"lot\"], ...}\n    Map<String, List<String>> graph = new HashMap<>();\n\n    // Build graph from beginWord -> endWord.\n    if (!bfs(beginWord, endWord, wordSet, graph))\n      return new ArrayList<>();\n\n    List<List<String>> ans = new ArrayList<>();\n    List<String> path = new ArrayList<>(Arrays.asList(beginWord));\n    dfs(graph, beginWord, endWord, path, ans);\n    return ans;\n  }\n\n  private boolean bfs(final String beginWord, final String endWord, Set<String> wordSet,\n                      Map<String, List<String>> graph) {\n    Set<String> currentLevelWords = new HashSet<>();\n    currentLevelWords.add(beginWord);\n    boolean reachEndWord = false;\n\n    while (!currentLevelWords.isEmpty()) {\n      for (final String word : currentLevelWords)\n        wordSet.remove(word);\n      Set<String> nextLevelWords = new HashSet<>();\n      for (final String parent : currentLevelWords) {\n        graph.putIfAbsent(parent, new ArrayList<>());\n        for (final String child : getChildren(parent, wordSet)) {\n          if (wordSet.contains(child)) {\n            nextLevelWords.add(child);\n            graph.get(parent).add(child);\n          }\n          if (child.equals(endWord))\n            reachEndWord = true;\n        }\n      }\n      if (reachEndWord)\n        return true;\n      currentLevelWords = nextLevelWords;\n    }\n\n    return false;\n  }\n\n  private List<String> getChildren(final String parent, Set<String> wordSet) {\n    List<String> children = new ArrayList<>();\n    StringBuilder sb = new StringBuilder(parent);\n\n    for (int i = 0; i < sb.length(); ++i) {\n      final char cache = sb.charAt(i);\n      for (char c = 'a'; c <= 'z'; ++c) {\n        if (c == cache)\n          continue;\n        sb.setCharAt(i, c);\n        final String child = sb.toString();\n        if (wordSet.contains(child))\n          children.add(child);\n      }\n      sb.setCharAt(i, cache);\n    }\n\n    return children;\n  }\n\n  private void dfs(Map<String, List<String>> graph, final String word, final String endWord,\n                   List<String> path, List<List<String>> ans) {\n    if (word.equals(endWord)) {\n      ans.add(new ArrayList<>(path));\n      return;\n    }\n    if (!graph.containsKey(word))\n      return;\n\n    for (final String child : graph.get(word)) {\n      path.add(child);\n      dfs(graph, child, endWord, path, ans);\n      path.remove(path.size() - 1);\n    }\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n    wordSet = set(wordList)\n    if endWord not in wordList:\n      return []\n\n    # {\"hit\": [\"hot\"], \"hot\": [\"dot\", \"lot\"], ...}\n    graph: Dict[str, List[str]] = collections.defaultdict(list)\n\n    # Build graph from beginWord -> endWord.\n    if not self._bfs(beginWord, endWord, wordSet, graph):\n      return []\n\n    ans = []\n    self._dfs(graph, beginWord, endWord, [beginWord], ans)\n    return ans\n\n  def _bfs(self, beginWord: str, endWord: str, wordSet: Set[str], graph: Dict[str, List[str]]) -> bool:\n    currentLevelWords = {beginWord}\n\n    while currentLevelWords:\n      for word in currentLevelWords:\n        wordSet.discard(word)\n      nextLevelWords = set()\n      reachEndWord = False\n      for parent in currentLevelWords:\n        for child in self._getChildren(parent, wordSet):\n          if child in wordSet:\n            nextLevelWords.add(child)\n            graph[parent].append(child)\n          if child == endWord:\n            reachEndWord = True\n      if reachEndWord:\n        return True\n      currentLevelWords = nextLevelWords\n\n    return False\n\n  def _getChildren(self, parent: str, wordSet: Set[str]) -> List[str]:\n    children = []\n    s = list(parent)\n\n    for i, cache in enumerate(s):\n      for c in string.ascii_lowercase:\n        if c == cache:\n          continue\n        s[i] = c\n        child = ''.join(s)\n        if child in wordSet:\n          children.append(child)\n      s[i] = cache\n\n    return children\n\n  def _dfs(self, graph: Dict[str, List[str]], word: str, endWord: str, path: List[str], ans: List[List[str]]) -> None:\n    if word == endWord:\n      ans.append(path.copy())\n      return\n\n    for child in graph.get(word, []):\n      path.append(child)\n      self._dfs(graph, child, endWord, path, ans)\n      path.pop()\n",
                "lang_text": "py"
            }
        }
    }
}