{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "290",
            "title": "Word Pattern",
            "titleSlug": "word-pattern",
            "content": "<p>Given a <code>pattern</code> and a string <code>s</code>, find if <code>s</code>&nbsp;follows the same pattern.</p>\n\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;abba&quot;, s = &quot;dog cat cat dog&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;abba&quot;, s = &quot;dog cat cat fish&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;aaaa&quot;, s = &quot;dog cat cat dog&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 300</code></li>\n\t<li><code>pattern</code> contains only lower-case English letters.</li>\n\t<li><code>1 &lt;= s.length &lt;= 3000</code></li>\n\t<li><code>s</code> contains only lowercase English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> <strong>does not contain</strong> any leading or trailing spaces.</li>\n\t<li>All the words in <code>s</code> are separated by a <strong>single space</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6959,
            "dislikes": 911,
            "similarQuestions": "[{\"title\": \"Isomorphic Strings\", \"titleSlug\": \"isomorphic-strings\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Word Pattern II\", \"titleSlug\": \"word-pattern-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
            "topicTags": [
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"630.1K\", \"totalSubmission\": \"1.5M\", \"totalAcceptedRaw\": 630105, \"totalSubmissionRaw\": 1507484, \"acRate\": \"41.8%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given a pattern and a string s, determine if s follows the same pattern.  'Follow' means there is a full match, creating a one-to-one correspondence (bijection) between a letter in the pattern and a non-empty word in s.",
                "constraints": [
                    "1 <= pattern.length <= 300",
                    "pattern contains only lower-case English letters.",
                    "1 <= s.length <= 3000",
                    "s contains only lowercase English letters and spaces ' '.",
                    "s does not contain any leading or trailing spaces.",
                    "All the words in s are separated by a single space."
                ],
                "testcases": [
                    {
                        "input": "pattern = \"abba\", s = \"dog cat cat dog\"",
                        "output": "true",
                        "explanation": "The pattern 'abba' maps to 'dog cat cat dog' where 'a' corresponds to 'dog' and 'b' corresponds to 'cat'. This maintains a consistent one-to-one mapping."
                    },
                    {
                        "input": "pattern = \"abba\", s = \"dog cat cat fish\"",
                        "output": "false",
                        "explanation": "The pattern 'abba' does not map correctly to 'dog cat cat fish'. 'a' maps to 'dog' and 'b' maps to 'cat' for the first three elements, but then 'a' would have to map to 'fish', breaking the one-to-one mapping."
                    },
                    {
                        "input": "pattern = \"aaaa\", s = \"dog cat cat dog\"",
                        "output": "false",
                        "explanation": "The pattern 'aaaa' does not map correctly to 'dog cat cat dog'. If 'a' were to map to dog, then all other 'a's must also be dog.  But then the mapping leads to \"dog dog dog dog\" rather than \"dog cat cat dog\""
                    }
                ]
            }
        },
        "similar": [
            {
                "difficulty": "Easy",
                "titleSlug": "isomorphic-strings",
                "title": "Isomorphic Strings",
                "isPaidOnly": false
            },
            {
                "difficulty": "Medium",
                "titleSlug": "word-pattern-ii",
                "title": "Word Pattern II",
                "isPaidOnly": true
            }
        ],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool wordPattern(string pattern, string str) {\n    const int n = pattern.length();\n    istringstream iss(str);\n    vector<int> charToIndex(128);\n    unordered_map<string, int> stringToIndex;\n\n    int i = 0;\n    for (string word; iss >> word; ++i) {\n      if (i == n)  // Out of bound\n        return false;\n      if (charToIndex[pattern[i]] != stringToIndex[word])\n        return false;\n      charToIndex[pattern[i]] = i + 1;\n      stringToIndex[word] = i + 1;\n    }\n\n    return i == n;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean wordPattern(String pattern, String str) {\n    String[] words = str.split(\" \");\n    if (words.length != pattern.length())\n      return false;\n\n    Map<Character, Integer> charToIndex = new HashMap<>();\n    Map<String, Integer> stringToIndex = new HashMap<>();\n\n    for (Integer i = 0; i < pattern.length(); ++i)\n      if (charToIndex.put(pattern.charAt(i), i) != stringToIndex.put(words[i], i))\n        return false;\n\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def wordPattern(self, pattern: str, str: str) -> bool:\n    t = str.split()\n    return [*map(pattern.index, pattern)] == [*map(t.index, t)]\n",
                "lang_text": "py"
            }
        }
    }
}