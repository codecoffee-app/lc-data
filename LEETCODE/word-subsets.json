{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "916",
            "title": "Word Subsets",
            "titleSlug": "word-subsets",
            "content": "<p>You are given two string arrays <code>words1</code> and <code>words2</code>.</p>\n\n<p>A string <code>b</code> is a <strong>subset</strong> of string <code>a</code> if every letter in <code>b</code> occurs in <code>a</code> including multiplicity.</p>\n\n<ul>\n\t<li>For example, <code>&quot;wrr&quot;</code> is a subset of <code>&quot;warrior&quot;</code> but is not a subset of <code>&quot;world&quot;</code>.</li>\n</ul>\n\n<p>A string <code>a</code> from <code>words1</code> is <strong>universal</strong> if for every string <code>b</code> in <code>words2</code>, <code>b</code> is a subset of <code>a</code>.</p>\n\n<p>Return an array of all the <strong>universal</strong> strings in <code>words1</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words1 = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], words2 = [&quot;e&quot;,&quot;o&quot;]\n<strong>Output:</strong> [&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words1 = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], words2 = [&quot;l&quot;,&quot;e&quot;]\n<strong>Output:</strong> [&quot;apple&quot;,&quot;google&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words1.length, words2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words1[i].length, words2[i].length &lt;= 10</code></li>\n\t<li><code>words1[i]</code> and <code>words2[i]</code> consist only of lowercase English letters.</li>\n\t<li>All the strings of <code>words1</code> are <strong>unique</strong>.</li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2674,
            "dislikes": 227,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "String",
                    "slug": "string"
                }
            ],
            "stats": "{\"totalAccepted\": \"112.1K\", \"totalSubmission\": \"212.8K\", \"totalAcceptedRaw\": 112090, \"totalSubmissionRaw\": 212840, \"acRate\": \"52.7%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given two string arrays, `words1` and `words2`, identify and return the strings from `words1` that are 'universal'. A string `a` from `words1` is considered universal if every string `b` in `words2` is a subset of `a`. A string `b` is a subset of string `a` if every letter in `b` occurs in `a` with at least the same multiplicity.",
                "constraints": [
                    "1 <= words1.length, words2.length <= 10<sup>4</sup>",
                    "1 <= words1[i].length, words2[i].length <= 10",
                    "words1[i] and words2[i] consist only of lowercase English letters.",
                    "All the strings of words1 are unique."
                ],
                "testcases": [
                    {
                        "input": "words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]",
                        "output": "[\"facebook\",\"google\",\"leetcode\"]",
                        "explanation": "The strings 'facebook', 'google', and 'leetcode' each contain at least one 'e' and at least one 'o'."
                    },
                    {
                        "input": "words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]",
                        "output": "[\"apple\",\"google\",\"leetcode\"]",
                        "explanation": "The strings 'apple', 'google', and 'leetcode' each contain at least one 'l' and at least one 'e'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "String",
                "slug": "string"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  vector<string> wordSubsets(vector<string>& A, vector<string>& B) {\n    vector<string> ans;\n    vector<int> countB(26);\n\n    for (const string& b : B) {\n      vector<int> temp = counter(b);\n      for (int i = 0; i < 26; ++i)\n        countB[i] = max(countB[i], temp[i]);\n    }\n\n    for (const string& a : A)\n      if (isUniversal(counter(a), countB))\n        ans.push_back(a);\n\n    return ans;\n  }\n\n private:\n  vector<int> counter(const string& s) {\n    vector<int> count(26);\n    for (char c : s)\n      ++count[c - 'a'];\n    return count;\n  }\n\n  bool isUniversal(vector<int> countA, vector<int>& countB) {\n    for (int i = 0; i < 26; ++i)\n      if (countA[i] < countB[i])\n        return false;\n    return true;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public List<String> wordSubsets(String[] A, String[] B) {\n    List<String> ans = new ArrayList<>();\n    int[] countB = new int[26];\n\n    for (final String b : B) {\n      int[] temp = counter(b);\n      for (int i = 0; i < 26; ++i)\n        countB[i] = Math.max(countB[i], temp[i]);\n    }\n\n    for (final String a : A)\n      if (isUniversal(counter(a), countB))\n        ans.add(a);\n\n    return ans;\n  }\n\n  private int[] counter(final String s) {\n    int[] count = new int[26];\n    for (char c : s.toCharArray())\n      ++count[c - 'a'];\n    return count;\n  }\n\n  private boolean isUniversal(int[] countA, int[] countB) {\n    for (int i = 0; i < 26; ++i)\n      if (countA[i] < countB[i])\n        return false;\n    return true;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def wordSubsets(self, A: List[str], B: List[str]) -> List[str]:\n    count = collections.Counter()\n\n    for b in B:\n      count = count | collections.Counter(b)\n\n    return [a for a in A if collections.Counter(a) & count == count]\n",
                "lang_text": "py"
            }
        }
    }
}