{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": "914",
            "title": "X of a Kind in a Deck of Cards",
            "titleSlug": "x-of-a-kind-in-a-deck-of-cards",
            "content": "<p>You are given an integer array <code>deck</code> where <code>deck[i]</code> represents the number written on the <code>i<sup>th</sup></code> card.</p>\n\n<p>Partition the cards into <strong>one or more groups</strong> such that:</p>\n\n<ul>\n\t<li>Each group has <strong>exactly</strong> <code>x</code> cards where <code>x &gt; 1</code>, and</li>\n\t<li>All the cards in one group have the same integer written on them.</li>\n</ul>\n\n<p>Return <code>true</code><em> if such partition is possible, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> deck = [1,2,3,4,4,3,2,1]\n<strong>Output:</strong> true\n<strong>Explanation</strong>: Possible partition [1,1],[2,2],[3,3],[4,4].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> deck = [1,1,1,2,2,2,3,3]\n<strong>Output:</strong> false\n<strong>Explanation</strong>: No possible partition.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= deck.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= deck[i] &lt; 10<sup>4</sup></code></li>\n</ul>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1771,
            "dislikes": 477,
            "similarQuestions": "[]",
            "topicTags": [
                {
                    "name": "Array",
                    "slug": "array"
                },
                {
                    "name": "Hash Table",
                    "slug": "hash-table"
                },
                {
                    "name": "Math",
                    "slug": "math"
                },
                {
                    "name": "Counting",
                    "slug": "counting"
                },
                {
                    "name": "Number Theory",
                    "slug": "number-theory"
                }
            ],
            "stats": "{\"totalAccepted\": \"114.6K\", \"totalSubmission\": \"379.6K\", \"totalAcceptedRaw\": 114587, \"totalSubmissionRaw\": 379591, \"acRate\": \"30.2%\"}",
            "hints": [],
            "rephrased": {
                "body": "Given an array of integers `deck` where each element `deck[i]` represents a card's value, determine if the cards can be partitioned into one or more groups such that each group contains exactly `x` cards (where `x > 1`) and all cards within a group have the same value.",
                "constraints": [
                    "1 <= deck.length <= 10<sup>4</sup>",
                    "0 <= deck[i] < 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4,4,3,2,1]",
                        "output": "true",
                        "explanation": "The deck can be partitioned into groups of two: [1,1], [2,2], [3,3], [4,4]."
                    },
                    {
                        "input": "[1,1,1,2,2,2,3,3]",
                        "output": "false",
                        "explanation": "It is not possible to partition the deck such that each group has more than one card and all cards in the group have the same integer."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Array",
                "slug": "array"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Counting",
                "slug": "counting"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n public:\n  bool hasGroupsSizeX(vector<int>& deck) {\n    unordered_map<int, int> count;\n    int gcd = 0;\n\n    for (const int d : deck)\n      ++count[d];\n\n    for (const auto& [_, value] : count)\n      gcd = __gcd(gcd, value);\n\n    return gcd >= 2;\n  }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n  public boolean hasGroupsSizeX(int[] deck) {\n    Map<Integer, Integer> count = new HashMap<>();\n    int gcd = 0;\n\n    for (final int d : deck)\n      count.merge(d, 1, Integer::sum);\n\n    for (final int value : count.values())\n      gcd = __gcd(gcd, value);\n\n    return gcd >= 2;\n  }\n\n  private int __gcd(int a, int b) {\n    return b > 0 ? __gcd(b, a % b) : a;\n  }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n  def hasGroupsSizeX(self, deck: List[int]) -> bool:\n    count = collections.Counter(deck)\n    return functools.reduce(math.gcd, count.values()) >= 2\n",
                "lang_text": "py"
            }
        }
    }
}